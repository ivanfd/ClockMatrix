

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Thu Feb 23 16:40:45 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18F4525
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    86                           	psect	pa_nodes0,global,class=CODE,delta=1
    87  0000                     
    88                           ; Version 1.41
    89                           ; Generated 25/01/2017 GMT
    90                           ; 
    91                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    92                           ; All rights reserved.
    93                           ; 
    94                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    95                           ; 
    96                           ; Redistribution and use in source and binary forms, with or without modification, are
    97                           ; permitted provided that the following conditions are met:
    98                           ; 
    99                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   100                           ;        conditions and the following disclaimer.
   101                           ; 
   102                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   103                           ;        of conditions and the following disclaimer in the documentation and/or other
   104                           ;        materials provided with the distribution.
   105                           ; 
   106                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   107                           ;        software without specific prior written permission.
   108                           ; 
   109                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   110                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   111                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   112                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   113                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   114                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   115                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   116                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   117                           ; 
   118                           ; 
   119                           ; Code-generator required, PIC18F4525 Definitions
   120                           ; 
   121                           ; SFR Addresses
   122  0000                     tosu	equ	0xFFF
   123                           tosh	equ	0xFFE
   124                           tosl	equ	0xFFD
   125                           pclath	equ	0xFFA
   126                           tblptru	equ	0xFF8
   127                           tblptrh	equ	0xFF7
   128                           tblptrl	equ	0xFF6
   129                           tablat	equ	0xFF5
   130                           prodh	equ	0xFF4
   131                           prodl	equ	0xFF3
   132                           intcon	equ	0xFF2
   133                           intcon2	equ	0xFF1
   134                           wreg	equ	0xFE8
   135                           indf1	equ	0xFE7
   136                           plusw1	equ	0xFE3
   137                           fsr1h	equ	0xFE2
   138                           fsr1l	equ	0xFE1
   139                           indf2	equ	0xFDF
   140                           postinc2	equ	0xFDE
   141                           postdec2	equ	0xFDD
   142                           plusw2	equ	0xFDB
   143                           fsr2h	equ	0xFDA
   144                           fsr2l	equ	0xFD9
   145                           status	equ	0xFD8
   146                           
   147                           	psect	idataCOMRAM
   148  0018E0                     __pidataCOMRAM:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _events
   152  0018E0  05                 	db	5
   153                           tosu	equ	0xFFF
   154                           tosh	equ	0xFFE
   155                           tosl	equ	0xFFD
   156                           pclath	equ	0xFFA
   157                           tblptru	equ	0xFF8
   158                           tblptrh	equ	0xFF7
   159                           tblptrl	equ	0xFF6
   160                           tablat	equ	0xFF5
   161                           prodh	equ	0xFF4
   162                           prodl	equ	0xFF3
   163                           intcon	equ	0xFF2
   164                           intcon2	equ	0xFF1
   165                           wreg	equ	0xFE8
   166                           indf1	equ	0xFE7
   167                           plusw1	equ	0xFE3
   168                           fsr1h	equ	0xFE2
   169                           fsr1l	equ	0xFE1
   170                           indf2	equ	0xFDF
   171                           postinc2	equ	0xFDE
   172                           postdec2	equ	0xFDD
   173                           plusw2	equ	0xFDB
   174                           fsr2h	equ	0xFDA
   175                           fsr2l	equ	0xFD9
   176                           status	equ	0xFD8
   177                           
   178                           	psect	mediumconst
   179  00BA9A                     __pmediumconst:
   180                           	opt stack 0
   181  00BA9A  00                 	db	0
   182  00BA9B                     _pic7x8:
   183                           	opt stack 0
   184  00BA9B  00                 	db	0
   185  00BA9C  00                 	db	0
   186  00BA9D  00                 	db	0
   187  00BA9E  00                 	db	0
   188  00BA9F  00                 	db	0
   189  00BAA0  00                 	db	0
   190  00BAA1  00                 	db	0
   191  00BAA2  08                 	db	8
   192  00BAA3  7C                 	db	124
   193  00BAA4  4E                 	db	78
   194  00BAA5  4F                 	db	79
   195  00BAA6  4E                 	db	78
   196  00BAA7  7C                 	db	124
   197  00BAA8  08                 	db	8
   198  00BAA9  04                 	db	4
   199  00BAAA  26                 	db	38
   200  00BAAB  47                 	db	71
   201  00BAAC  3F                 	db	63
   202  00BAAD  07                 	db	7
   203  00BAAE  06                 	db	6
   204  00BAAF  04                 	db	4
   205  00BAB0  20                 	db	32
   206  00BAB1  3E                 	db	62
   207  00BAB2  7F                 	db	127
   208  00BAB3  7F                 	db	127
   209  00BAB4  3F                 	db	63
   210  00BAB5  3E                 	db	62
   211  00BAB6  20                 	db	32
   212  00BAB7                     __end_of_pic7x8:
   213                           	opt stack 0
   214  00BAB7                     _fract:
   215                           	opt stack 0
   216  00BAB7  00                 	db	0
   217  00BAB8  01                 	db	1
   218  00BAB9  01                 	db	1
   219  00BABA  02                 	db	2
   220  00BABB  02                 	db	2
   221  00BABC  03                 	db	3
   222  00BABD  04                 	db	4
   223  00BABE  04                 	db	4
   224  00BABF  05                 	db	5
   225  00BAC0  06                 	db	6
   226  00BAC1  06                 	db	6
   227  00BAC2  07                 	db	7
   228  00BAC3  07                 	db	7
   229  00BAC4  08                 	db	8
   230  00BAC5  09                 	db	9
   231  00BAC6  09                 	db	9
   232  00BAC7                     __end_of_fract:
   233                           	opt stack 0
   234  00BAC7                     _Font:
   235                           	opt stack 0
   236  00BAC7  00                 	db	0
   237  00BAC8  00                 	db	0
   238  00BAC9  00                 	db	0
   239  00BACA  00                 	db	0
   240  00BACB  00                 	db	0
   241  00BACC  45                 	db	69
   242  00BACD  51                 	db	81
   243  00BACE  45                 	db	69
   244  00BACF  3E                 	db	62
   245  00BAD0  00                 	db	0
   246  00BAD1  6B                 	db	107
   247  00BAD2  6F                 	db	111
   248  00BAD3  6B                 	db	107
   249  00BAD4  3E                 	db	62
   250  00BAD5  00                 	db	0
   251  00BAD6  3E                 	db	62
   252  00BAD7  7C                 	db	124
   253  00BAD8  3E                 	db	62
   254  00BAD9  1C                 	db	28
   255  00BADA  00                 	db	0
   256  00BADB  3C                 	db	60
   257  00BADC  7E                 	db	126
   258  00BADD  3C                 	db	60
   259  00BADE  18                 	db	24
   260  00BADF  00                 	db	0
   261  00BAE0  36                 	db	54
   262  00BAE1  7F                 	db	127
   263  00BAE2  36                 	db	54
   264  00BAE3  30                 	db	48
   265  00BAE4  00                 	db	0
   266  00BAE5  00                 	db	0
   267  00BAE6  00                 	db	0
   268  00BAE7  00                 	db	0
   269  00BAE8  00                 	db	0
   270  00BAE9  00                 	db	0
   271  00BAEA  00                 	db	0
   272  00BAEB  00                 	db	0
   273  00BAEC  00                 	db	0
   274  00BAED  00                 	db	0
   275  00BAEE  00                 	db	0
   276  00BAEF  00                 	db	0
   277  00BAF0  00                 	db	0
   278  00BAF1  00                 	db	0
   279  00BAF2  00                 	db	0
   280  00BAF3  00                 	db	0
   281  00BAF4  00                 	db	0
   282  00BAF5  00                 	db	0
   283  00BAF6  00                 	db	0
   284  00BAF7  00                 	db	0
   285  00BAF8  00                 	db	0
   286  00BAF9  00                 	db	0
   287  00BAFA  00                 	db	0
   288  00BAFB  00                 	db	0
   289  00BAFC  00                 	db	0
   290  00BAFD  00                 	db	0
   291  00BAFE  00                 	db	0
   292  00BAFF  00                 	db	0
   293  00BB00  00                 	db	0
   294  00BB01  00                 	db	0
   295  00BB02  00                 	db	0
   296  00BB03  00                 	db	0
   297  00BB04  00                 	db	0
   298  00BB05  00                 	db	0
   299  00BB06  00                 	db	0
   300  00BB07  00                 	db	0
   301  00BB08  00                 	db	0
   302  00BB09  00                 	db	0
   303  00BB0A  00                 	db	0
   304  00BB0B  00                 	db	0
   305  00BB0C  00                 	db	0
   306  00BB0D  00                 	db	0
   307  00BB0E  00                 	db	0
   308  00BB0F  00                 	db	0
   309  00BB10  00                 	db	0
   310  00BB11  00                 	db	0
   311  00BB12  00                 	db	0
   312  00BB13  00                 	db	0
   313  00BB14  00                 	db	0
   314  00BB15  00                 	db	0
   315  00BB16  00                 	db	0
   316  00BB17  00                 	db	0
   317  00BB18  00                 	db	0
   318  00BB19  00                 	db	0
   319  00BB1A  00                 	db	0
   320  00BB1B  00                 	db	0
   321  00BB1C  00                 	db	0
   322  00BB1D  00                 	db	0
   323  00BB1E  00                 	db	0
   324  00BB1F  00                 	db	0
   325  00BB20  00                 	db	0
   326  00BB21  00                 	db	0
   327  00BB22  00                 	db	0
   328  00BB23  00                 	db	0
   329  00BB24  00                 	db	0
   330  00BB25  00                 	db	0
   331  00BB26  00                 	db	0
   332  00BB27  00                 	db	0
   333  00BB28  00                 	db	0
   334  00BB29  00                 	db	0
   335  00BB2A  00                 	db	0
   336  00BB2B  00                 	db	0
   337  00BB2C  00                 	db	0
   338  00BB2D  00                 	db	0
   339  00BB2E  00                 	db	0
   340  00BB2F  00                 	db	0
   341  00BB30  00                 	db	0
   342  00BB31  00                 	db	0
   343  00BB32  00                 	db	0
   344  00BB33  00                 	db	0
   345  00BB34  00                 	db	0
   346  00BB35  00                 	db	0
   347  00BB36  00                 	db	0
   348  00BB37  00                 	db	0
   349  00BB38  00                 	db	0
   350  00BB39  00                 	db	0
   351  00BB3A  00                 	db	0
   352  00BB3B  00                 	db	0
   353  00BB3C  00                 	db	0
   354  00BB3D  00                 	db	0
   355  00BB3E  00                 	db	0
   356  00BB3F  7C                 	db	124
   357  00BB40  4E                 	db	78
   358  00BB41  4E                 	db	78
   359  00BB42  7C                 	db	124
   360  00BB43  08                 	db	8
   361  00BB44  20                 	db	32
   362  00BB45  34                 	db	52
   363  00BB46  7E                 	db	126
   364  00BB47  34                 	db	52
   365  00BB48  20                 	db	32
   366  00BB49  00                 	db	0
   367  00BB4A  00                 	db	0
   368  00BB4B  36                 	db	54
   369  00BB4C  36                 	db	54
   370  00BB4D  00                 	db	0
   371  00BB4E  00                 	db	0
   372  00BB4F  00                 	db	0
   373  00BB50  00                 	db	0
   374  00BB51  00                 	db	0
   375  00BB52  00                 	db	0
   376  00BB53  00                 	db	0
   377  00BB54  00                 	db	0
   378  00BB55  00                 	db	0
   379  00BB56  00                 	db	0
   380  00BB57  00                 	db	0
   381  00BB58  00                 	db	0
   382  00BB59  00                 	db	0
   383  00BB5A  00                 	db	0
   384  00BB5B  00                 	db	0
   385  00BB5C  00                 	db	0
   386  00BB5D  00                 	db	0
   387  00BB5E  00                 	db	0
   388  00BB5F  00                 	db	0
   389  00BB60  00                 	db	0
   390  00BB61  00                 	db	0
   391  00BB62  00                 	db	0
   392  00BB63  00                 	db	0
   393  00BB64  00                 	db	0
   394  00BB65  00                 	db	0
   395  00BB66  00                 	db	0
   396  00BB67  00                 	db	0
   397  00BB68  00                 	db	0
   398  00BB69  00                 	db	0
   399  00BB6A  00                 	db	0
   400  00BB6B  00                 	db	0
   401  00BB6C  00                 	db	0
   402  00BB6D  00                 	db	0
   403  00BB6E  5F                 	db	95
   404  00BB6F  00                 	db	0
   405  00BB70  00                 	db	0
   406  00BB71  00                 	db	0
   407  00BB72  07                 	db	7
   408  00BB73  00                 	db	0
   409  00BB74  07                 	db	7
   410  00BB75  00                 	db	0
   411  00BB76  14                 	db	20
   412  00BB77  7F                 	db	127
   413  00BB78  14                 	db	20
   414  00BB79  7F                 	db	127
   415  00BB7A  14                 	db	20
   416  00BB7B  24                 	db	36
   417  00BB7C  2A                 	db	42
   418  00BB7D  7F                 	db	127
   419  00BB7E  2A                 	db	42
   420  00BB7F  12                 	db	18
   421  00BB80  23                 	db	35
   422  00BB81  13                 	db	19
   423  00BB82  08                 	db	8
   424  00BB83  64                 	db	100
   425  00BB84  62                 	db	98
   426  00BB85  36                 	db	54
   427  00BB86  49                 	db	73
   428  00BB87  56                 	db	86
   429  00BB88  20                 	db	32
   430  00BB89  50                 	db	80
   431  00BB8A  00                 	db	0
   432  00BB8B  08                 	db	8
   433  00BB8C  07                 	db	7
   434  00BB8D  03                 	db	3
   435  00BB8E  00                 	db	0
   436  00BB8F  00                 	db	0
   437  00BB90  1C                 	db	28
   438  00BB91  22                 	db	34
   439  00BB92  41                 	db	65
   440  00BB93  00                 	db	0
   441  00BB94  00                 	db	0
   442  00BB95  41                 	db	65
   443  00BB96  22                 	db	34
   444  00BB97  1C                 	db	28
   445  00BB98  00                 	db	0
   446  00BB99  2A                 	db	42
   447  00BB9A  1C                 	db	28
   448  00BB9B  7F                 	db	127
   449  00BB9C  1C                 	db	28
   450  00BB9D  2A                 	db	42
   451  00BB9E  08                 	db	8
   452  00BB9F  08                 	db	8
   453  00BBA0  3E                 	db	62
   454  00BBA1  08                 	db	8
   455  00BBA2  08                 	db	8
   456  00BBA3  00                 	db	0
   457  00BBA4  80                 	db	128
   458  00BBA5  70                 	db	112
   459  00BBA6  30                 	db	48
   460  00BBA7  00                 	db	0
   461  00BBA8  08                 	db	8
   462  00BBA9  08                 	db	8
   463  00BBAA  08                 	db	8
   464  00BBAB  08                 	db	8
   465  00BBAC  08                 	db	8
   466  00BBAD  60                 	db	96
   467  00BBAE  60                 	db	96
   468  00BBAF  00                 	db	0
   469  00BBB0  00                 	db	0
   470  00BBB1  00                 	db	0
   471  00BBB2  20                 	db	32
   472  00BBB3  10                 	db	16
   473  00BBB4  08                 	db	8
   474  00BBB5  04                 	db	4
   475  00BBB6  02                 	db	2
   476  00BBB7  7F                 	db	127
   477  00BBB8  7F                 	db	127
   478  00BBB9  41                 	db	65
   479  00BBBA  7F                 	db	127
   480  00BBBB  7F                 	db	127
   481  00BBBC  00                 	db	0
   482  00BBBD  01                 	db	1
   483  00BBBE  7F                 	db	127
   484  00BBBF  7F                 	db	127
   485  00BBC0  00                 	db	0
   486  00BBC1  63                 	db	99
   487  00BBC2  73                 	db	115
   488  00BBC3  59                 	db	89
   489  00BBC4  4F                 	db	79
   490  00BBC5  47                 	db	71
   491  00BBC6  63                 	db	99
   492  00BBC7  63                 	db	99
   493  00BBC8  49                 	db	73
   494  00BBC9  7F                 	db	127
   495  00BBCA  77                 	db	119
   496  00BBCB  1F                 	db	31
   497  00BBCC  1F                 	db	31
   498  00BBCD  10                 	db	16
   499  00BBCE  7F                 	db	127
   500  00BBCF  7F                 	db	127
   501  00BBD0  6F                 	db	111
   502  00BBD1  6F                 	db	111
   503  00BBD2  49                 	db	73
   504  00BBD3  79                 	db	121
   505  00BBD4  79                 	db	121
   506  00BBD5  7F                 	db	127
   507  00BBD6  7F                 	db	127
   508  00BBD7  49                 	db	73
   509  00BBD8  7B                 	db	123
   510  00BBD9  7B                 	db	123
   511  00BBDA  03                 	db	3
   512  00BBDB  73                 	db	115
   513  00BBDC  79                 	db	121
   514  00BBDD  0F                 	db	15
   515  00BBDE  07                 	db	7
   516  00BBDF  77                 	db	119
   517  00BBE0  7F                 	db	127
   518  00BBE1  49                 	db	73
   519  00BBE2  7F                 	db	127
   520  00BBE3  77                 	db	119
   521  00BBE4  6F                 	db	111
   522  00BBE5  6F                 	db	111
   523  00BBE6  49                 	db	73
   524  00BBE7  7F                 	db	127
   525  00BBE8  7F                 	db	127
   526  00BBE9  00                 	db	0
   527  00BBEA  00                 	db	0
   528  00BBEB  36                 	db	54
   529  00BBEC  36                 	db	54
   530  00BBED  00                 	db	0
   531  00BBEE  00                 	db	0
   532  00BBEF  40                 	db	64
   533  00BBF0  34                 	db	52
   534  00BBF1  00                 	db	0
   535  00BBF2  00                 	db	0
   536  00BBF3  00                 	db	0
   537  00BBF4  08                 	db	8
   538  00BBF5  14                 	db	20
   539  00BBF6  22                 	db	34
   540  00BBF7  41                 	db	65
   541  00BBF8  14                 	db	20
   542  00BBF9  14                 	db	20
   543  00BBFA  14                 	db	20
   544  00BBFB  14                 	db	20
   545  00BBFC  14                 	db	20
   546  00BBFD  00                 	db	0
   547  00BBFE  41                 	db	65
   548  00BBFF  22                 	db	34
   549  00BC00  14                 	db	20
   550  00BC01  08                 	db	8
   551  00BC02  02                 	db	2
   552  00BC03  01                 	db	1
   553  00BC04  59                 	db	89
   554  00BC05  09                 	db	9
   555  00BC06  06                 	db	6
   556  00BC07  3E                 	db	62
   557  00BC08  41                 	db	65
   558  00BC09  5D                 	db	93
   559  00BC0A  59                 	db	89
   560  00BC0B  4E                 	db	78
   561  00BC0C  7C                 	db	124
   562  00BC0D  12                 	db	18
   563  00BC0E  11                 	db	17
   564  00BC0F  12                 	db	18
   565  00BC10  7C                 	db	124
   566  00BC11  7F                 	db	127
   567  00BC12  49                 	db	73
   568  00BC13  49                 	db	73
   569  00BC14  49                 	db	73
   570  00BC15  36                 	db	54
   571  00BC16  3E                 	db	62
   572  00BC17  41                 	db	65
   573  00BC18  41                 	db	65
   574  00BC19  41                 	db	65
   575  00BC1A  22                 	db	34
   576  00BC1B  7F                 	db	127
   577  00BC1C  41                 	db	65
   578  00BC1D  41                 	db	65
   579  00BC1E  41                 	db	65
   580  00BC1F  3E                 	db	62
   581  00BC20  7F                 	db	127
   582  00BC21  49                 	db	73
   583  00BC22  49                 	db	73
   584  00BC23  49                 	db	73
   585  00BC24  41                 	db	65
   586  00BC25  7F                 	db	127
   587  00BC26  09                 	db	9
   588  00BC27  09                 	db	9
   589  00BC28  09                 	db	9
   590  00BC29  01                 	db	1
   591  00BC2A  3E                 	db	62
   592  00BC2B  41                 	db	65
   593  00BC2C  41                 	db	65
   594  00BC2D  51                 	db	81
   595  00BC2E  72                 	db	114
   596  00BC2F  7F                 	db	127
   597  00BC30  08                 	db	8
   598  00BC31  08                 	db	8
   599  00BC32  08                 	db	8
   600  00BC33  7F                 	db	127
   601  00BC34  00                 	db	0
   602  00BC35  41                 	db	65
   603  00BC36  7F                 	db	127
   604  00BC37  41                 	db	65
   605  00BC38  00                 	db	0
   606  00BC39  20                 	db	32
   607  00BC3A  40                 	db	64
   608  00BC3B  41                 	db	65
   609  00BC3C  3F                 	db	63
   610  00BC3D  01                 	db	1
   611  00BC3E  7F                 	db	127
   612  00BC3F  08                 	db	8
   613  00BC40  14                 	db	20
   614  00BC41  22                 	db	34
   615  00BC42  41                 	db	65
   616  00BC43  7F                 	db	127
   617  00BC44  40                 	db	64
   618  00BC45  40                 	db	64
   619  00BC46  40                 	db	64
   620  00BC47  40                 	db	64
   621  00BC48  7F                 	db	127
   622  00BC49  02                 	db	2
   623  00BC4A  04                 	db	4
   624  00BC4B  02                 	db	2
   625  00BC4C  7F                 	db	127
   626  00BC4D  7F                 	db	127
   627  00BC4E  04                 	db	4
   628  00BC4F  08                 	db	8
   629  00BC50  10                 	db	16
   630  00BC51  7F                 	db	127
   631  00BC52  3E                 	db	62
   632  00BC53  41                 	db	65
   633  00BC54  41                 	db	65
   634  00BC55  41                 	db	65
   635  00BC56  3E                 	db	62
   636  00BC57  7F                 	db	127
   637  00BC58  09                 	db	9
   638  00BC59  09                 	db	9
   639  00BC5A  09                 	db	9
   640  00BC5B  06                 	db	6
   641  00BC5C  3E                 	db	62
   642  00BC5D  41                 	db	65
   643  00BC5E  51                 	db	81
   644  00BC5F  21                 	db	33
   645  00BC60  5E                 	db	94
   646  00BC61  7F                 	db	127
   647  00BC62  09                 	db	9
   648  00BC63  19                 	db	25
   649  00BC64  29                 	db	41
   650  00BC65  46                 	db	70
   651  00BC66  26                 	db	38
   652  00BC67  49                 	db	73
   653  00BC68  49                 	db	73
   654  00BC69  49                 	db	73
   655  00BC6A  32                 	db	50
   656  00BC6B  01                 	db	1
   657  00BC6C  01                 	db	1
   658  00BC6D  7F                 	db	127
   659  00BC6E  01                 	db	1
   660  00BC6F  01                 	db	1
   661  00BC70  3F                 	db	63
   662  00BC71  40                 	db	64
   663  00BC72  40                 	db	64
   664  00BC73  40                 	db	64
   665  00BC74  3F                 	db	63
   666  00BC75  1F                 	db	31
   667  00BC76  20                 	db	32
   668  00BC77  40                 	db	64
   669  00BC78  20                 	db	32
   670  00BC79  1F                 	db	31
   671  00BC7A  3F                 	db	63
   672  00BC7B  40                 	db	64
   673  00BC7C  38                 	db	56
   674  00BC7D  40                 	db	64
   675  00BC7E  3F                 	db	63
   676  00BC7F  63                 	db	99
   677  00BC80  14                 	db	20
   678  00BC81  08                 	db	8
   679  00BC82  14                 	db	20
   680  00BC83  63                 	db	99
   681  00BC84  03                 	db	3
   682  00BC85  04                 	db	4
   683  00BC86  78                 	db	120
   684  00BC87  04                 	db	4
   685  00BC88  03                 	db	3
   686  00BC89  61                 	db	97
   687  00BC8A  51                 	db	81
   688  00BC8B  49                 	db	73
   689  00BC8C  45                 	db	69
   690  00BC8D  43                 	db	67
   691  00BC8E  00                 	db	0
   692  00BC8F  7F                 	db	127
   693  00BC90  41                 	db	65
   694  00BC91  41                 	db	65
   695  00BC92  00                 	db	0
   696  00BC93  02                 	db	2
   697  00BC94  04                 	db	4
   698  00BC95  08                 	db	8
   699  00BC96  10                 	db	16
   700  00BC97  20                 	db	32
   701  00BC98  00                 	db	0
   702  00BC99  41                 	db	65
   703  00BC9A  41                 	db	65
   704  00BC9B  7F                 	db	127
   705  00BC9C  00                 	db	0
   706  00BC9D  04                 	db	4
   707  00BC9E  02                 	db	2
   708  00BC9F  01                 	db	1
   709  00BCA0  02                 	db	2
   710  00BCA1  04                 	db	4
   711  00BCA2  40                 	db	64
   712  00BCA3  40                 	db	64
   713  00BCA4  40                 	db	64
   714  00BCA5  40                 	db	64
   715  00BCA6  40                 	db	64
   716  00BCA7  00                 	db	0
   717  00BCA8  03                 	db	3
   718  00BCA9  07                 	db	7
   719  00BCAA  08                 	db	8
   720  00BCAB  00                 	db	0
   721  00BCAC  20                 	db	32
   722  00BCAD  54                 	db	84
   723  00BCAE  54                 	db	84
   724  00BCAF  78                 	db	120
   725  00BCB0  40                 	db	64
   726  00BCB1  7F                 	db	127
   727  00BCB2  28                 	db	40
   728  00BCB3  44                 	db	68
   729  00BCB4  44                 	db	68
   730  00BCB5  38                 	db	56
   731  00BCB6  38                 	db	56
   732  00BCB7  44                 	db	68
   733  00BCB8  44                 	db	68
   734  00BCB9  44                 	db	68
   735  00BCBA  28                 	db	40
   736  00BCBB  38                 	db	56
   737  00BCBC  44                 	db	68
   738  00BCBD  44                 	db	68
   739  00BCBE  28                 	db	40
   740  00BCBF  7F                 	db	127
   741  00BCC0  38                 	db	56
   742  00BCC1  54                 	db	84
   743  00BCC2  54                 	db	84
   744  00BCC3  54                 	db	84
   745  00BCC4  18                 	db	24
   746  00BCC5  08                 	db	8
   747  00BCC6  7E                 	db	126
   748  00BCC7  09                 	db	9
   749  00BCC8  02                 	db	2
   750  00BCC9  00                 	db	0
   751  00BCCA  18                 	db	24
   752  00BCCB  A4                 	db	164
   753  00BCCC  A4                 	db	164
   754  00BCCD  9C                 	db	156
   755  00BCCE  78                 	db	120
   756  00BCCF  7F                 	db	127
   757  00BCD0  08                 	db	8
   758  00BCD1  04                 	db	4
   759  00BCD2  04                 	db	4
   760  00BCD3  78                 	db	120
   761  00BCD4  00                 	db	0
   762  00BCD5  44                 	db	68
   763  00BCD6  7D                 	db	125
   764  00BCD7  40                 	db	64
   765  00BCD8  00                 	db	0
   766  00BCD9  20                 	db	32
   767  00BCDA  40                 	db	64
   768  00BCDB  40                 	db	64
   769  00BCDC  3D                 	db	61
   770  00BCDD  00                 	db	0
   771  00BCDE  7F                 	db	127
   772  00BCDF  10                 	db	16
   773  00BCE0  28                 	db	40
   774  00BCE1  44                 	db	68
   775  00BCE2  00                 	db	0
   776  00BCE3  00                 	db	0
   777  00BCE4  41                 	db	65
   778  00BCE5  7F                 	db	127
   779  00BCE6  40                 	db	64
   780  00BCE7  00                 	db	0
   781  00BCE8  7C                 	db	124
   782  00BCE9  04                 	db	4
   783  00BCEA  78                 	db	120
   784  00BCEB  04                 	db	4
   785  00BCEC  78                 	db	120
   786  00BCED  7C                 	db	124
   787  00BCEE  08                 	db	8
   788  00BCEF  04                 	db	4
   789  00BCF0  04                 	db	4
   790  00BCF1  78                 	db	120
   791  00BCF2  38                 	db	56
   792  00BCF3  44                 	db	68
   793  00BCF4  44                 	db	68
   794  00BCF5  44                 	db	68
   795  00BCF6  38                 	db	56
   796  00BCF7  FC                 	db	252
   797  00BCF8  18                 	db	24
   798  00BCF9  24                 	db	36
   799  00BCFA  24                 	db	36
   800  00BCFB  18                 	db	24
   801  00BCFC  18                 	db	24
   802  00BCFD  24                 	db	36
   803  00BCFE  24                 	db	36
   804  00BCFF  18                 	db	24
   805  00BD00  FC                 	db	252
   806  00BD01  7C                 	db	124
   807  00BD02  04                 	db	4
   808  00BD03  04                 	db	4
   809  00BD04  08                 	db	8
   810  00BD05  00                 	db	0
   811  00BD06  48                 	db	72
   812  00BD07  54                 	db	84
   813  00BD08  54                 	db	84
   814  00BD09  54                 	db	84
   815  00BD0A  24                 	db	36
   816  00BD0B  00                 	db	0
   817  00BD0C  04                 	db	4
   818  00BD0D  3F                 	db	63
   819  00BD0E  44                 	db	68
   820  00BD0F  20                 	db	32
   821  00BD10  3C                 	db	60
   822  00BD11  40                 	db	64
   823  00BD12  40                 	db	64
   824  00BD13  20                 	db	32
   825  00BD14  7C                 	db	124
   826  00BD15  1C                 	db	28
   827  00BD16  20                 	db	32
   828  00BD17  40                 	db	64
   829  00BD18  20                 	db	32
   830  00BD19  1C                 	db	28
   831  00BD1A  3C                 	db	60
   832  00BD1B  40                 	db	64
   833  00BD1C  30                 	db	48
   834  00BD1D  40                 	db	64
   835  00BD1E  3C                 	db	60
   836  00BD1F  44                 	db	68
   837  00BD20  28                 	db	40
   838  00BD21  10                 	db	16
   839  00BD22  28                 	db	40
   840  00BD23  44                 	db	68
   841  00BD24  4C                 	db	76
   842  00BD25  90                 	db	144
   843  00BD26  90                 	db	144
   844  00BD27  90                 	db	144
   845  00BD28  7C                 	db	124
   846  00BD29  44                 	db	68
   847  00BD2A  64                 	db	100
   848  00BD2B  54                 	db	84
   849  00BD2C  4C                 	db	76
   850  00BD2D  44                 	db	68
   851  00BD2E  00                 	db	0
   852  00BD2F  08                 	db	8
   853  00BD30  36                 	db	54
   854  00BD31  41                 	db	65
   855  00BD32  00                 	db	0
   856  00BD33  00                 	db	0
   857  00BD34  00                 	db	0
   858  00BD35  77                 	db	119
   859  00BD36  00                 	db	0
   860  00BD37  00                 	db	0
   861  00BD38  00                 	db	0
   862  00BD39  41                 	db	65
   863  00BD3A  36                 	db	54
   864  00BD3B  08                 	db	8
   865  00BD3C  00                 	db	0
   866  00BD3D  02                 	db	2
   867  00BD3E  01                 	db	1
   868  00BD3F  02                 	db	2
   869  00BD40  04                 	db	4
   870  00BD41  02                 	db	2
   871  00BD42  00                 	db	0
   872  00BD43  00                 	db	0
   873  00BD44  00                 	db	0
   874  00BD45  00                 	db	0
   875  00BD46  00                 	db	0
   876  00BD47  00                 	db	0
   877  00BD48  00                 	db	0
   878  00BD49  00                 	db	0
   879  00BD4A  00                 	db	0
   880  00BD4B  00                 	db	0
   881  00BD4C  00                 	db	0
   882  00BD4D  00                 	db	0
   883  00BD4E  00                 	db	0
   884  00BD4F  00                 	db	0
   885  00BD50  00                 	db	0
   886  00BD51  00                 	db	0
   887  00BD52  00                 	db	0
   888  00BD53  00                 	db	0
   889  00BD54  00                 	db	0
   890  00BD55  00                 	db	0
   891  00BD56  00                 	db	0
   892  00BD57  00                 	db	0
   893  00BD58  00                 	db	0
   894  00BD59  00                 	db	0
   895  00BD5A  00                 	db	0
   896  00BD5B  00                 	db	0
   897  00BD5C  00                 	db	0
   898  00BD5D  00                 	db	0
   899  00BD5E  00                 	db	0
   900  00BD5F  00                 	db	0
   901  00BD60  40                 	db	64
   902  00BD61  00                 	db	0
   903  00BD62  40                 	db	64
   904  00BD63  00                 	db	0
   905  00BD64  40                 	db	64
   906  00BD65  00                 	db	0
   907  00BD66  00                 	db	0
   908  00BD67  00                 	db	0
   909  00BD68  00                 	db	0
   910  00BD69  00                 	db	0
   911  00BD6A  00                 	db	0
   912  00BD6B  00                 	db	0
   913  00BD6C  00                 	db	0
   914  00BD6D  00                 	db	0
   915  00BD6E  00                 	db	0
   916  00BD6F  3E                 	db	62
   917  00BD70  55                 	db	85
   918  00BD71  55                 	db	85
   919  00BD72  41                 	db	65
   920  00BD73  22                 	db	34
   921  00BD74  00                 	db	0
   922  00BD75  00                 	db	0
   923  00BD76  00                 	db	0
   924  00BD77  00                 	db	0
   925  00BD78  00                 	db	0
   926  00BD79  00                 	db	0
   927  00BD7A  00                 	db	0
   928  00BD7B  00                 	db	0
   929  00BD7C  00                 	db	0
   930  00BD7D  00                 	db	0
   931  00BD7E  00                 	db	0
   932  00BD7F  00                 	db	0
   933  00BD80  00                 	db	0
   934  00BD81  00                 	db	0
   935  00BD82  00                 	db	0
   936  00BD83  00                 	db	0
   937  00BD84  00                 	db	0
   938  00BD85  00                 	db	0
   939  00BD86  00                 	db	0
   940  00BD87  00                 	db	0
   941  00BD88  00                 	db	0
   942  00BD89  00                 	db	0
   943  00BD8A  00                 	db	0
   944  00BD8B  00                 	db	0
   945  00BD8C  00                 	db	0
   946  00BD8D  00                 	db	0
   947  00BD8E  00                 	db	0
   948  00BD8F  00                 	db	0
   949  00BD90  00                 	db	0
   950  00BD91  00                 	db	0
   951  00BD92  00                 	db	0
   952  00BD93  00                 	db	0
   953  00BD94  00                 	db	0
   954  00BD95  00                 	db	0
   955  00BD96  00                 	db	0
   956  00BD97  00                 	db	0
   957  00BD98  00                 	db	0
   958  00BD99  00                 	db	0
   959  00BD9A  00                 	db	0
   960  00BD9B  00                 	db	0
   961  00BD9C  00                 	db	0
   962  00BD9D  00                 	db	0
   963  00BD9E  00                 	db	0
   964  00BD9F  00                 	db	0
   965  00BDA0  00                 	db	0
   966  00BDA1  00                 	db	0
   967  00BDA2  00                 	db	0
   968  00BDA3  00                 	db	0
   969  00BDA4  00                 	db	0
   970  00BDA5  00                 	db	0
   971  00BDA6  00                 	db	0
   972  00BDA7  00                 	db	0
   973  00BDA8  00                 	db	0
   974  00BDA9  00                 	db	0
   975  00BDAA  00                 	db	0
   976  00BDAB  00                 	db	0
   977  00BDAC  00                 	db	0
   978  00BDAD  00                 	db	0
   979  00BDAE  00                 	db	0
   980  00BDAF  00                 	db	0
   981  00BDB0  00                 	db	0
   982  00BDB1  0C                 	db	12
   983  00BDB2  1E                 	db	30
   984  00BDB3  1E                 	db	30
   985  00BDB4  0C                 	db	12
   986  00BDB5  00                 	db	0
   987  00BDB6  00                 	db	0
   988  00BDB7  00                 	db	0
   989  00BDB8  00                 	db	0
   990  00BDB9  00                 	db	0
   991  00BDBA  00                 	db	0
   992  00BDBB  00                 	db	0
   993  00BDBC  00                 	db	0
   994  00BDBD  00                 	db	0
   995  00BDBE  00                 	db	0
   996  00BDBF  00                 	db	0
   997  00BDC0  00                 	db	0
   998  00BDC1  00                 	db	0
   999  00BDC2  00                 	db	0
  1000  00BDC3  00                 	db	0
  1001  00BDC4  00                 	db	0
  1002  00BDC5  00                 	db	0
  1003  00BDC6  00                 	db	0
  1004  00BDC7  00                 	db	0
  1005  00BDC8  00                 	db	0
  1006  00BDC9  00                 	db	0
  1007  00BDCA  00                 	db	0
  1008  00BDCB  00                 	db	0
  1009  00BDCC  00                 	db	0
  1010  00BDCD  00                 	db	0
  1011  00BDCE  00                 	db	0
  1012  00BDCF  00                 	db	0
  1013  00BDD0  00                 	db	0
  1014  00BDD1  00                 	db	0
  1015  00BDD2  00                 	db	0
  1016  00BDD3  00                 	db	0
  1017  00BDD4  00                 	db	0
  1018  00BDD5  00                 	db	0
  1019  00BDD6  00                 	db	0
  1020  00BDD7  00                 	db	0
  1021  00BDD8  00                 	db	0
  1022  00BDD9  00                 	db	0
  1023  00BDDA  00                 	db	0
  1024  00BDDB  00                 	db	0
  1025  00BDDC  00                 	db	0
  1026  00BDDD  00                 	db	0
  1027  00BDDE  00                 	db	0
  1028  00BDDF  00                 	db	0
  1029  00BDE0  00                 	db	0
  1030  00BDE1  00                 	db	0
  1031  00BDE2  00                 	db	0
  1032  00BDE3  00                 	db	0
  1033  00BDE4  00                 	db	0
  1034  00BDE5  00                 	db	0
  1035  00BDE6  00                 	db	0
  1036  00BDE7  00                 	db	0
  1037  00BDE8  00                 	db	0
  1038  00BDE9  00                 	db	0
  1039  00BDEA  00                 	db	0
  1040  00BDEB  00                 	db	0
  1041  00BDEC  00                 	db	0
  1042  00BDED  00                 	db	0
  1043  00BDEE  00                 	db	0
  1044  00BDEF  00                 	db	0
  1045  00BDF0  00                 	db	0
  1046  00BDF1  00                 	db	0
  1047  00BDF2  00                 	db	0
  1048  00BDF3  00                 	db	0
  1049  00BDF4  00                 	db	0
  1050  00BDF5  00                 	db	0
  1051  00BDF6  00                 	db	0
  1052  00BDF7  00                 	db	0
  1053  00BDF8  00                 	db	0
  1054  00BDF9  00                 	db	0
  1055  00BDFA  00                 	db	0
  1056  00BDFB  00                 	db	0
  1057  00BDFC  00                 	db	0
  1058  00BDFD  00                 	db	0
  1059  00BDFE  00                 	db	0
  1060  00BDFF  00                 	db	0
  1061  00BE00  7E                 	db	126
  1062  00BE01  02                 	db	2
  1063  00BE02  02                 	db	2
  1064  00BE03  02                 	db	2
  1065  00BE04  03                 	db	3
  1066  00BE05  00                 	db	0
  1067  00BE06  00                 	db	0
  1068  00BE07  00                 	db	0
  1069  00BE08  00                 	db	0
  1070  00BE09  00                 	db	0
  1071  00BE0A  00                 	db	0
  1072  00BE0B  00                 	db	0
  1073  00BE0C  00                 	db	0
  1074  00BE0D  00                 	db	0
  1075  00BE0E  00                 	db	0
  1076  00BE0F  7E                 	db	126
  1077  00BE10  4B                 	db	75
  1078  00BE11  4A                 	db	74
  1079  00BE12  4B                 	db	75
  1080  00BE13  42                 	db	66
  1081  00BE14  00                 	db	0
  1082  00BE15  00                 	db	0
  1083  00BE16  00                 	db	0
  1084  00BE17  00                 	db	0
  1085  00BE18  00                 	db	0
  1086  00BE19  3E                 	db	62
  1087  00BE1A  49                 	db	73
  1088  00BE1B  49                 	db	73
  1089  00BE1C  49                 	db	73
  1090  00BE1D  22                 	db	34
  1091  00BE1E  00                 	db	0
  1092  00BE1F  00                 	db	0
  1093  00BE20  00                 	db	0
  1094  00BE21  00                 	db	0
  1095  00BE22  00                 	db	0
  1096  00BE23  00                 	db	0
  1097  00BE24  00                 	db	0
  1098  00BE25  00                 	db	0
  1099  00BE26  00                 	db	0
  1100  00BE27  00                 	db	0
  1101  00BE28  00                 	db	0
  1102  00BE29  00                 	db	0
  1103  00BE2A  00                 	db	0
  1104  00BE2B  00                 	db	0
  1105  00BE2C  00                 	db	0
  1106  00BE2D  00                 	db	0
  1107  00BE2E  00                 	db	0
  1108  00BE2F  00                 	db	0
  1109  00BE30  00                 	db	0
  1110  00BE31  00                 	db	0
  1111  00BE32  00                 	db	0
  1112  00BE33  41                 	db	65
  1113  00BE34  7E                 	db	126
  1114  00BE35  41                 	db	65
  1115  00BE36  00                 	db	0
  1116  00BE37  00                 	db	0
  1117  00BE38  06                 	db	6
  1118  00BE39  09                 	db	9
  1119  00BE3A  09                 	db	9
  1120  00BE3B  06                 	db	6
  1121  00BE3C  44                 	db	68
  1122  00BE3D  44                 	db	68
  1123  00BE3E  5F                 	db	95
  1124  00BE3F  44                 	db	68
  1125  00BE40  44                 	db	68
  1126  00BE41  00                 	db	0
  1127  00BE42  41                 	db	65
  1128  00BE43  7F                 	db	127
  1129  00BE44  41                 	db	65
  1130  00BE45  00                 	db	0
  1131  00BE46  00                 	db	0
  1132  00BE47  44                 	db	68
  1133  00BE48  7D                 	db	125
  1134  00BE49  40                 	db	64
  1135  00BE4A  00                 	db	0
  1136  00BE4B  00                 	db	0
  1137  00BE4C  7C                 	db	124
  1138  00BE4D  04                 	db	4
  1139  00BE4E  04                 	db	4
  1140  00BE4F  06                 	db	6
  1141  00BE50  00                 	db	0
  1142  00BE51  00                 	db	0
  1143  00BE52  00                 	db	0
  1144  00BE53  00                 	db	0
  1145  00BE54  00                 	db	0
  1146  00BE55  00                 	db	0
  1147  00BE56  00                 	db	0
  1148  00BE57  00                 	db	0
  1149  00BE58  00                 	db	0
  1150  00BE59  00                 	db	0
  1151  00BE5A  00                 	db	0
  1152  00BE5B  00                 	db	0
  1153  00BE5C  00                 	db	0
  1154  00BE5D  00                 	db	0
  1155  00BE5E  00                 	db	0
  1156  00BE5F  38                 	db	56
  1157  00BE60  55                 	db	85
  1158  00BE61  54                 	db	84
  1159  00BE62  55                 	db	85
  1160  00BE63  18                 	db	24
  1161  00BE64  00                 	db	0
  1162  00BE65  00                 	db	0
  1163  00BE66  00                 	db	0
  1164  00BE67  00                 	db	0
  1165  00BE68  00                 	db	0
  1166  00BE69  38                 	db	56
  1167  00BE6A  54                 	db	84
  1168  00BE6B  54                 	db	84
  1169  00BE6C  54                 	db	84
  1170  00BE6D  44                 	db	68
  1171  00BE6E  22                 	db	34
  1172  00BE6F  14                 	db	20
  1173  00BE70  2A                 	db	42
  1174  00BE71  14                 	db	20
  1175  00BE72  08                 	db	8
  1176  00BE73  20                 	db	32
  1177  00BE74  40                 	db	64
  1178  00BE75  40                 	db	64
  1179  00BE76  3D                 	db	61
  1180  00BE77  00                 	db	0
  1181  00BE78  00                 	db	0
  1182  00BE79  00                 	db	0
  1183  00BE7A  00                 	db	0
  1184  00BE7B  00                 	db	0
  1185  00BE7C  00                 	db	0
  1186  00BE7D  00                 	db	0
  1187  00BE7E  00                 	db	0
  1188  00BE7F  00                 	db	0
  1189  00BE80  00                 	db	0
  1190  00BE81  00                 	db	0
  1191  00BE82  00                 	db	0
  1192  00BE83  45                 	db	69
  1193  00BE84  7C                 	db	124
  1194  00BE85  41                 	db	65
  1195  00BE86  00                 	db	0
  1196  00BE87  7E                 	db	126
  1197  00BE88  11                 	db	17
  1198  00BE89  11                 	db	17
  1199  00BE8A  11                 	db	17
  1200  00BE8B  7E                 	db	126
  1201  00BE8C  7F                 	db	127
  1202  00BE8D  49                 	db	73
  1203  00BE8E  49                 	db	73
  1204  00BE8F  49                 	db	73
  1205  00BE90  31                 	db	49
  1206  00BE91  7F                 	db	127
  1207  00BE92  49                 	db	73
  1208  00BE93  49                 	db	73
  1209  00BE94  49                 	db	73
  1210  00BE95  36                 	db	54
  1211  00BE96  7F                 	db	127
  1212  00BE97  01                 	db	1
  1213  00BE98  01                 	db	1
  1214  00BE99  01                 	db	1
  1215  00BE9A  01                 	db	1
  1216  00BE9B  C0                 	db	192
  1217  00BE9C  7E                 	db	126
  1218  00BE9D  41                 	db	65
  1219  00BE9E  7E                 	db	126
  1220  00BE9F  C0                 	db	192
  1221  00BEA0  7F                 	db	127
  1222  00BEA1  49                 	db	73
  1223  00BEA2  49                 	db	73
  1224  00BEA3  49                 	db	73
  1225  00BEA4  41                 	db	65
  1226  00BEA5  77                 	db	119
  1227  00BEA6  08                 	db	8
  1228  00BEA7  7F                 	db	127
  1229  00BEA8  08                 	db	8
  1230  00BEA9  77                 	db	119
  1231  00BEAA  22                 	db	34
  1232  00BEAB  41                 	db	65
  1233  00BEAC  49                 	db	73
  1234  00BEAD  49                 	db	73
  1235  00BEAE  36                 	db	54
  1236  00BEAF  7F                 	db	127
  1237  00BEB0  10                 	db	16
  1238  00BEB1  08                 	db	8
  1239  00BEB2  04                 	db	4
  1240  00BEB3  7F                 	db	127
  1241  00BEB4  7E                 	db	126
  1242  00BEB5  11                 	db	17
  1243  00BEB6  09                 	db	9
  1244  00BEB7  05                 	db	5
  1245  00BEB8  7E                 	db	126
  1246  00BEB9  7F                 	db	127
  1247  00BEBA  08                 	db	8
  1248  00BEBB  14                 	db	20
  1249  00BEBC  22                 	db	34
  1250  00BEBD  41                 	db	65
  1251  00BEBE  40                 	db	64
  1252  00BEBF  7E                 	db	126
  1253  00BEC0  01                 	db	1
  1254  00BEC1  01                 	db	1
  1255  00BEC2  7F                 	db	127
  1256  00BEC3  7F                 	db	127
  1257  00BEC4  02                 	db	2
  1258  00BEC5  0C                 	db	12
  1259  00BEC6  02                 	db	2
  1260  00BEC7  7F                 	db	127
  1261  00BEC8  7F                 	db	127
  1262  00BEC9  08                 	db	8
  1263  00BECA  08                 	db	8
  1264  00BECB  08                 	db	8
  1265  00BECC  7F                 	db	127
  1266  00BECD  3E                 	db	62
  1267  00BECE  41                 	db	65
  1268  00BECF  41                 	db	65
  1269  00BED0  41                 	db	65
  1270  00BED1  3E                 	db	62
  1271  00BED2  7F                 	db	127
  1272  00BED3  01                 	db	1
  1273  00BED4  01                 	db	1
  1274  00BED5  01                 	db	1
  1275  00BED6  7F                 	db	127
  1276  00BED7  7F                 	db	127
  1277  00BED8  09                 	db	9
  1278  00BED9  09                 	db	9
  1279  00BEDA  09                 	db	9
  1280  00BEDB  06                 	db	6
  1281  00BEDC  3E                 	db	62
  1282  00BEDD  41                 	db	65
  1283  00BEDE  41                 	db	65
  1284  00BEDF  41                 	db	65
  1285  00BEE0  22                 	db	34
  1286  00BEE1  01                 	db	1
  1287  00BEE2  01                 	db	1
  1288  00BEE3  7F                 	db	127
  1289  00BEE4  01                 	db	1
  1290  00BEE5  01                 	db	1
  1291  00BEE6  27                 	db	39
  1292  00BEE7  48                 	db	72
  1293  00BEE8  48                 	db	72
  1294  00BEE9  48                 	db	72
  1295  00BEEA  3F                 	db	63
  1296  00BEEB  0E                 	db	14
  1297  00BEEC  11                 	db	17
  1298  00BEED  7F                 	db	127
  1299  00BEEE  11                 	db	17
  1300  00BEEF  0E                 	db	14
  1301  00BEF0  63                 	db	99
  1302  00BEF1  14                 	db	20
  1303  00BEF2  08                 	db	8
  1304  00BEF3  14                 	db	20
  1305  00BEF4  63                 	db	99
  1306  00BEF5  7F                 	db	127
  1307  00BEF6  40                 	db	64
  1308  00BEF7  40                 	db	64
  1309  00BEF8  7F                 	db	127
  1310  00BEF9  C0                 	db	192
  1311  00BEFA  07                 	db	7
  1312  00BEFB  08                 	db	8
  1313  00BEFC  08                 	db	8
  1314  00BEFD  08                 	db	8
  1315  00BEFE  7F                 	db	127
  1316  00BEFF  7F                 	db	127
  1317  00BF00  40                 	db	64
  1318  00BF01  7E                 	db	126
  1319  00BF02  40                 	db	64
  1320  00BF03  7F                 	db	127
  1321  00BF04  7F                 	db	127
  1322  00BF05  40                 	db	64
  1323  00BF06  7E                 	db	126
  1324  00BF07  40                 	db	64
  1325  00BF08  FF                 	db	255
  1326  00BF09  01                 	db	1
  1327  00BF0A  7F                 	db	127
  1328  00BF0B  44                 	db	68
  1329  00BF0C  44                 	db	68
  1330  00BF0D  38                 	db	56
  1331  00BF0E  7F                 	db	127
  1332  00BF0F  44                 	db	68
  1333  00BF10  38                 	db	56
  1334  00BF11  00                 	db	0
  1335  00BF12  7F                 	db	127
  1336  00BF13  7F                 	db	127
  1337  00BF14  44                 	db	68
  1338  00BF15  44                 	db	68
  1339  00BF16  44                 	db	68
  1340  00BF17  38                 	db	56
  1341  00BF18  22                 	db	34
  1342  00BF19  41                 	db	65
  1343  00BF1A  49                 	db	73
  1344  00BF1B  49                 	db	73
  1345  00BF1C  3E                 	db	62
  1346  00BF1D  7F                 	db	127
  1347  00BF1E  08                 	db	8
  1348  00BF1F  3E                 	db	62
  1349  00BF20  41                 	db	65
  1350  00BF21  3E                 	db	62
  1351  00BF22  46                 	db	70
  1352  00BF23  29                 	db	41
  1353  00BF24  19                 	db	25
  1354  00BF25  09                 	db	9
  1355  00BF26  7F                 	db	127
  1356  00BF27  20                 	db	32
  1357  00BF28  54                 	db	84
  1358  00BF29  54                 	db	84
  1359  00BF2A  54                 	db	84
  1360  00BF2B  78                 	db	120
  1361  00BF2C  3C                 	db	60
  1362  00BF2D  4A                 	db	74
  1363  00BF2E  4A                 	db	74
  1364  00BF2F  4A                 	db	74
  1365  00BF30  31                 	db	49
  1366  00BF31  7C                 	db	124
  1367  00BF32  54                 	db	84
  1368  00BF33  54                 	db	84
  1369  00BF34  54                 	db	84
  1370  00BF35  28                 	db	40
  1371  00BF36  00                 	db	0
  1372  00BF37  7C                 	db	124
  1373  00BF38  04                 	db	4
  1374  00BF39  04                 	db	4
  1375  00BF3A  04                 	db	4
  1376  00BF3B  C0                 	db	192
  1377  00BF3C  78                 	db	120
  1378  00BF3D  44                 	db	68
  1379  00BF3E  7C                 	db	124
  1380  00BF3F  C0                 	db	192
  1381  00BF40  38                 	db	56
  1382  00BF41  54                 	db	84
  1383  00BF42  54                 	db	84
  1384  00BF43  54                 	db	84
  1385  00BF44  18                 	db	24
  1386  00BF45  6C                 	db	108
  1387  00BF46  10                 	db	16
  1388  00BF47  7C                 	db	124
  1389  00BF48  10                 	db	16
  1390  00BF49  6C                 	db	108
  1391  00BF4A  28                 	db	40
  1392  00BF4B  44                 	db	68
  1393  00BF4C  54                 	db	84
  1394  00BF4D  54                 	db	84
  1395  00BF4E  28                 	db	40
  1396  00BF4F  7C                 	db	124
  1397  00BF50  20                 	db	32
  1398  00BF51  10                 	db	16
  1399  00BF52  08                 	db	8
  1400  00BF53  7C                 	db	124
  1401  00BF54  7C                 	db	124
  1402  00BF55  21                 	db	33
  1403  00BF56  11                 	db	17
  1404  00BF57  09                 	db	9
  1405  00BF58  7C                 	db	124
  1406  00BF59  7C                 	db	124
  1407  00BF5A  10                 	db	16
  1408  00BF5B  10                 	db	16
  1409  00BF5C  28                 	db	40
  1410  00BF5D  44                 	db	68
  1411  00BF5E  40                 	db	64
  1412  00BF5F  38                 	db	56
  1413  00BF60  04                 	db	4
  1414  00BF61  04                 	db	4
  1415  00BF62  7C                 	db	124
  1416  00BF63  7C                 	db	124
  1417  00BF64  08                 	db	8
  1418  00BF65  10                 	db	16
  1419  00BF66  08                 	db	8
  1420  00BF67  7C                 	db	124
  1421  00BF68  7C                 	db	124
  1422  00BF69  10                 	db	16
  1423  00BF6A  10                 	db	16
  1424  00BF6B  10                 	db	16
  1425  00BF6C  7C                 	db	124
  1426  00BF6D  38                 	db	56
  1427  00BF6E  44                 	db	68
  1428  00BF6F  44                 	db	68
  1429  00BF70  44                 	db	68
  1430  00BF71  38                 	db	56
  1431  00BF72  7C                 	db	124
  1432  00BF73  04                 	db	4
  1433  00BF74  04                 	db	4
  1434  00BF75  04                 	db	4
  1435  00BF76  7C                 	db	124
  1436  00BF77  7C                 	db	124
  1437  00BF78  14                 	db	20
  1438  00BF79  14                 	db	20
  1439  00BF7A  14                 	db	20
  1440  00BF7B  08                 	db	8
  1441  00BF7C  38                 	db	56
  1442  00BF7D  44                 	db	68
  1443  00BF7E  44                 	db	68
  1444  00BF7F  44                 	db	68
  1445  00BF80  28                 	db	40
  1446  00BF81  04                 	db	4
  1447  00BF82  04                 	db	4
  1448  00BF83  7C                 	db	124
  1449  00BF84  04                 	db	4
  1450  00BF85  04                 	db	4
  1451  00BF86  4C                 	db	76
  1452  00BF87  50                 	db	80
  1453  00BF88  50                 	db	80
  1454  00BF89  50                 	db	80
  1455  00BF8A  3C                 	db	60
  1456  00BF8B  18                 	db	24
  1457  00BF8C  24                 	db	36
  1458  00BF8D  7C                 	db	124
  1459  00BF8E  24                 	db	36
  1460  00BF8F  18                 	db	24
  1461  00BF90  00                 	db	0
  1462  00BF91  6C                 	db	108
  1463  00BF92  10                 	db	16
  1464  00BF93  10                 	db	16
  1465  00BF94  6C                 	db	108
  1466  00BF95  7C                 	db	124
  1467  00BF96  40                 	db	64
  1468  00BF97  40                 	db	64
  1469  00BF98  7C                 	db	124
  1470  00BF99  C0                 	db	192
  1471  00BF9A  0C                 	db	12
  1472  00BF9B  10                 	db	16
  1473  00BF9C  10                 	db	16
  1474  00BF9D  10                 	db	16
  1475  00BF9E  7C                 	db	124
  1476  00BF9F  7C                 	db	124
  1477  00BFA0  40                 	db	64
  1478  00BFA1  78                 	db	120
  1479  00BFA2  40                 	db	64
  1480  00BFA3  7C                 	db	124
  1481  00BFA4  7C                 	db	124
  1482  00BFA5  40                 	db	64
  1483  00BFA6  78                 	db	120
  1484  00BFA7  40                 	db	64
  1485  00BFA8  FC                 	db	252
  1486  00BFA9  04                 	db	4
  1487  00BFAA  7C                 	db	124
  1488  00BFAB  50                 	db	80
  1489  00BFAC  50                 	db	80
  1490  00BFAD  20                 	db	32
  1491  00BFAE  7C                 	db	124
  1492  00BFAF  50                 	db	80
  1493  00BFB0  20                 	db	32
  1494  00BFB1  00                 	db	0
  1495  00BFB2  7C                 	db	124
  1496  00BFB3  00                 	db	0
  1497  00BFB4  7C                 	db	124
  1498  00BFB5  50                 	db	80
  1499  00BFB6  50                 	db	80
  1500  00BFB7  20                 	db	32
  1501  00BFB8  44                 	db	68
  1502  00BFB9  54                 	db	84
  1503  00BFBA  54                 	db	84
  1504  00BFBB  54                 	db	84
  1505  00BFBC  38                 	db	56
  1506  00BFBD  7C                 	db	124
  1507  00BFBE  10                 	db	16
  1508  00BFBF  38                 	db	56
  1509  00BFC0  44                 	db	68
  1510  00BFC1  38                 	db	56
  1511  00BFC2  48                 	db	72
  1512  00BFC3  54                 	db	84
  1513  00BFC4  34                 	db	52
  1514  00BFC5  14                 	db	20
  1515  00BFC6  7C                 	db	124
  1516  00BFC7                     __end_of_Font:
  1517                           	opt stack 0
  1518  00BFC7                     _FontS:
  1519                           	opt stack 0
  1520  00BFC7  00                 	db	0
  1521  00BFC8  00                 	db	0
  1522  00BFC9  00                 	db	0
  1523  00BFCA  7C                 	db	124
  1524  00BFCB  44                 	db	68
  1525  00BFCC  7C                 	db	124
  1526  00BFCD  00                 	db	0
  1527  00BFCE  7C                 	db	124
  1528  00BFCF  00                 	db	0
  1529  00BFD0  74                 	db	116
  1530  00BFD1  54                 	db	84
  1531  00BFD2  5C                 	db	92
  1532  00BFD3  54                 	db	84
  1533  00BFD4  54                 	db	84
  1534  00BFD5  7C                 	db	124
  1535  00BFD6  1C                 	db	28
  1536  00BFD7  10                 	db	16
  1537  00BFD8  7C                 	db	124
  1538  00BFD9  5C                 	db	92
  1539  00BFDA  54                 	db	84
  1540  00BFDB  74                 	db	116
  1541  00BFDC  7C                 	db	124
  1542  00BFDD  54                 	db	84
  1543  00BFDE  74                 	db	116
  1544  00BFDF  04                 	db	4
  1545  00BFE0  04                 	db	4
  1546  00BFE1  7C                 	db	124
  1547  00BFE2  7C                 	db	124
  1548  00BFE3  54                 	db	84
  1549  00BFE4  7C                 	db	124
  1550  00BFE5  5C                 	db	92
  1551  00BFE6  54                 	db	84
  1552  00BFE7  7C                 	db	124
  1553  00BFE8                     __end_of_FontS:
  1554                           	opt stack 0
  1555  0000                     _TMR0	set	4054
  1556  0000                     _TRISCbits	set	3988
  1557  0000                     _PORTB	set	3969
  1558  0000                     _T1CONbits	set	4045
  1559  0000                     _LATDbits	set	3980
  1560  0000                     _TMR1L	set	4046
  1561  0000                     _TMR1H	set	4047
  1562  0000                     _PIR1bits	set	3998
  1563  0000                     _PIE1bits	set	3997
  1564  0000                     _T0CON	set	4053
  1565  0000                     _SSPBUF	set	4041
  1566  0000                     _SSPCON2	set	4037
  1567  0000                     _SSPADD	set	4040
  1568  0000                     _SSPSTAT	set	4039
  1569  0000                     _SSPCON1	set	4038
  1570  0000                     _PORTCbits	set	3970
  1571  0000                     _INTCON2bits	set	4081
  1572  0000                     _TRISD	set	3989
  1573  0000                     _LATD	set	3980
  1574  0000                     _INTCON2	set	4081
  1575  0000                     _TRISB	set	3987
  1576  0000                     _LATB	set	3978
  1577  0000                     _TRISC	set	3988
  1578  0000                     _LATC	set	3979
  1579  0000                     _INTCONbits	set	4082
  1580  0000                     _ACKEN	set	32300
  1581  0000                     _ACKDT	set	32301
  1582  0000                     _RCEN	set	32299
  1583  0000                     _SSPIF	set	31987
  1584  0000                     _RSEN	set	32297
  1585  0000                     _ACKSTAT	set	32302
  1586  0000                     _SEN	set	32296
  1587  0000                     _R_W	set	32314
  1588  0000                     _PEN	set	32298
  1589  00BFE8                     STR_1:
  1590  00BFE8  43                 	db	67	;'C'
  1591  00BFE9  6C                 	db	108	;'l'
  1592  00BFEA  6F                 	db	111	;'o'
  1593  00BFEB  63                 	db	99	;'c'
  1594  00BFEC  6B                 	db	107	;'k'
  1595  00BFED  20                 	db	32
  1596  00BFEE  76                 	db	118	;'v'
  1597  00BFEF  31                 	db	49	;'1'
  1598  00BFF0  2E                 	db	46
  1599  00BFF1  30                 	db	48	;'0'
  1600  00BFF2  20                 	db	32
  1601  00BFF3  62                 	db	98	;'b'
  1602  00BFF4  79                 	db	121	;'y'
  1603  00BFF5  20                 	db	32
  1604  00BFF6  49                 	db	73	;'I'
  1605  00BFF7  76                 	db	118	;'v'
  1606  00BFF8  61                 	db	97	;'a'
  1607  00BFF9  6E                 	db	110	;'n'
  1608  00BFFA  5F                 	db	95	;'_'
  1609  00BFFB  66                 	db	102	;'f'
  1610  00BFFC  64                 	db	100	;'d'
  1611  00BFFD  00                 	db	0
  1612                           
  1613                           ; #config settings
  1614  00BFFE  00                 	db	0	; dummy byte at the end
  1615  0000                     tosu	equ	0xFFF
  1616                           tosh	equ	0xFFE
  1617                           tosl	equ	0xFFD
  1618                           pclath	equ	0xFFA
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           prodh	equ	0xFF4
  1624                           prodl	equ	0xFF3
  1625                           intcon	equ	0xFF2
  1626                           intcon2	equ	0xFF1
  1627                           wreg	equ	0xFE8
  1628                           indf1	equ	0xFE7
  1629                           plusw1	equ	0xFE3
  1630                           fsr1h	equ	0xFE2
  1631                           fsr1l	equ	0xFE1
  1632                           indf2	equ	0xFDF
  1633                           postinc2	equ	0xFDE
  1634                           postdec2	equ	0xFDD
  1635                           plusw2	equ	0xFDB
  1636                           fsr2h	equ	0xFDA
  1637                           fsr2l	equ	0xFD9
  1638                           status	equ	0xFD8
  1639                           
  1640                           	psect	cinit
  1641  0012E4                     __pcinit:
  1642                           	opt stack 0
  1643  0012E4                     start_initialization:
  1644                           	opt stack 0
  1645  0012E4                     __initialization:
  1646                           	opt stack 0
  1647                           
  1648                           ; Initialize objects allocated to COMRAM (1 bytes)
  1649                           ; load TBLPTR registers with __pidataCOMRAM
  1650  0012E4  0EE0               	movlw	low __pidataCOMRAM
  1651  0012E6  6EF6               	movwf	tblptrl,c
  1652  0012E8  0E18               	movlw	high __pidataCOMRAM
  1653  0012EA  6EF7               	movwf	tblptrh,c
  1654  0012EC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1655  0012EE  6EF8               	movwf	tblptru,c
  1656  0012F0  0009               	tblrd		*+	;fetch initializer
  1657  0012F2  CFF5 F070          	movff	tablat,__pdataCOMRAM
  1658                           
  1659                           ; Clear objects allocated to BANK1 (100 bytes)
  1660  0012F6  EE01  F000         	lfsr	0,__pbssBANK1
  1661  0012FA  0E64               	movlw	100
  1662  0012FC                     clear_0:
  1663  0012FC  6AEE               	clrf	postinc0,c
  1664  0012FE  06E8               	decf	wreg,f,c
  1665  001300  E1FD               	bnz	clear_0
  1666                           
  1667                           ; Clear objects allocated to BANK0 (120 bytes)
  1668  001302  EE00  F080         	lfsr	0,__pbssBANK0
  1669  001306  0E78               	movlw	120
  1670  001308                     clear_1:
  1671  001308  6AEE               	clrf	postinc0,c
  1672  00130A  06E8               	decf	wreg,f,c
  1673  00130C  E1FD               	bnz	clear_1
  1674                           
  1675                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1676  00130E  6A6F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1677                           
  1678                           ; Clear objects allocated to COMRAM (64 bytes)
  1679  001310  EE00  F001         	lfsr	0,__pbssCOMRAM
  1680  001314  0E40               	movlw	64
  1681  001316                     clear_2:
  1682  001316  6AEE               	clrf	postinc0,c
  1683  001318  06E8               	decf	wreg,f,c
  1684  00131A  E1FD               	bnz	clear_2
  1685  00131C                     end_of_initialization:
  1686                           	opt stack 0
  1687  00131C                     __end_of__initialization:
  1688                           	opt stack 0
  1689  00131C  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1690  00131E  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1691  001320  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1692  001322  6EF8               	movwf	tblptru,c
  1693  001324  0100               	movlb	0
  1694  001326  EF24  F009         	goto	_main	;jump to C main() function
  1695                           tosu	equ	0xFFF
  1696                           tosh	equ	0xFFE
  1697                           tosl	equ	0xFFD
  1698                           pclath	equ	0xFFA
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           prodh	equ	0xFF4
  1704                           prodl	equ	0xFF3
  1705                           intcon	equ	0xFF2
  1706                           intcon2	equ	0xFF1
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           indf1	equ	0xFE7
  1710                           plusw1	equ	0xFE3
  1711                           fsr1h	equ	0xFE2
  1712                           fsr1l	equ	0xFE1
  1713                           indf2	equ	0xFDF
  1714                           postinc2	equ	0xFDE
  1715                           postdec2	equ	0xFDD
  1716                           plusw2	equ	0xFDB
  1717                           fsr2h	equ	0xFDA
  1718                           fsr2l	equ	0xFD9
  1719                           status	equ	0xFD8
  1720                           
  1721                           	psect	bitbssCOMRAM
  1722  000378                     __pbitbssCOMRAM:
  1723                           	opt stack 0
  1724  000378                     _en_put:
  1725                           	opt stack 0
  1726  000378                     	ds	1
  1727  000379                     _show_digit:
  1728                           	opt stack 0
  1729  000379                     	ds	1
  1730                           tosu	equ	0xFFF
  1731                           tosh	equ	0xFFE
  1732                           tosl	equ	0xFFD
  1733                           pclath	equ	0xFFA
  1734                           tblptru	equ	0xFF8
  1735                           tblptrh	equ	0xFF7
  1736                           tblptrl	equ	0xFF6
  1737                           tablat	equ	0xFF5
  1738                           prodh	equ	0xFF4
  1739                           prodl	equ	0xFF3
  1740                           intcon	equ	0xFF2
  1741                           intcon2	equ	0xFF1
  1742                           postinc0	equ	0xFEE
  1743                           wreg	equ	0xFE8
  1744                           indf1	equ	0xFE7
  1745                           plusw1	equ	0xFE3
  1746                           fsr1h	equ	0xFE2
  1747                           fsr1l	equ	0xFE1
  1748                           indf2	equ	0xFDF
  1749                           postinc2	equ	0xFDE
  1750                           postdec2	equ	0xFDD
  1751                           plusw2	equ	0xFDB
  1752                           fsr2h	equ	0xFDA
  1753                           fsr2l	equ	0xFD9
  1754                           status	equ	0xFD8
  1755                           
  1756                           	psect	bssCOMRAM
  1757  000001                     __pbssCOMRAM:
  1758                           	opt stack 0
  1759  000001                     _scratch:
  1760                           	opt stack 0
  1761  000001                     	ds	9
  1762  00000A                     _TSTime:
  1763                           	opt stack 0
  1764  00000A                     	ds	7
  1765  000011                     key_press@count:
  1766                           	opt stack 0
  1767  000011                     	ds	1
  1768  000012                     _i_bchar:
  1769                           	opt stack 0
  1770  000012                     	ds	1
  1771  000013                     _i_char:
  1772                           	opt stack 0
  1773  000013                     	ds	1
  1774  000014                     _Timer0Interrupt:
  1775                           	opt stack 0
  1776  000014                     	ds	1
  1777  000015                     _arrayTail:
  1778                           	opt stack 0
  1779  000015                     	ds	1
  1780  000016                     _Dis_Buff:
  1781                           	opt stack 0
  1782  000016                     	ds	32
  1783  000036                     _TTime:
  1784                           	opt stack 0
  1785  000036                     	ds	7
  1786  00003D                     _temperature:
  1787                           	opt stack 0
  1788  00003D                     	ds	2
  1789  00003F                     _time_flag:
  1790                           	opt stack 0
  1791  00003F                     	ds	1
  1792  000040                     _timer_val:
  1793                           	opt stack 0
  1794  000040                     	ds	1
  1795                           tosu	equ	0xFFF
  1796                           tosh	equ	0xFFE
  1797                           tosl	equ	0xFFD
  1798                           pclath	equ	0xFFA
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           prodh	equ	0xFF4
  1804                           prodl	equ	0xFF3
  1805                           intcon	equ	0xFF2
  1806                           intcon2	equ	0xFF1
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           indf1	equ	0xFE7
  1810                           plusw1	equ	0xFE3
  1811                           fsr1h	equ	0xFE2
  1812                           fsr1l	equ	0xFE1
  1813                           indf2	equ	0xFDF
  1814                           postinc2	equ	0xFDE
  1815                           postdec2	equ	0xFDD
  1816                           plusw2	equ	0xFDB
  1817                           fsr2h	equ	0xFDA
  1818                           fsr2l	equ	0xFD9
  1819                           status	equ	0xFD8
  1820                           
  1821                           	psect	dataCOMRAM
  1822  000070                     __pdataCOMRAM:
  1823                           	opt stack 0
  1824  000070                     _events:
  1825                           	opt stack 0
  1826  000070                     	ds	1
  1827                           tosu	equ	0xFFF
  1828                           tosh	equ	0xFFE
  1829                           tosl	equ	0xFFD
  1830                           pclath	equ	0xFFA
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           prodh	equ	0xFF4
  1836                           prodl	equ	0xFF3
  1837                           intcon	equ	0xFF2
  1838                           intcon2	equ	0xFF1
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           indf1	equ	0xFE7
  1842                           plusw1	equ	0xFE3
  1843                           fsr1h	equ	0xFE2
  1844                           fsr1l	equ	0xFE1
  1845                           indf2	equ	0xFDF
  1846                           postinc2	equ	0xFDE
  1847                           postdec2	equ	0xFDD
  1848                           plusw2	equ	0xFDB
  1849                           fsr2h	equ	0xFDA
  1850                           fsr2l	equ	0xFD9
  1851                           status	equ	0xFD8
  1852                           
  1853                           	psect	bssBANK0
  1854  000080                     __pbssBANK0:
  1855                           	opt stack 0
  1856  000080                     _TaskArray:
  1857                           	opt stack 0
  1858  000080                     	ds	120
  1859                           tosu	equ	0xFFF
  1860                           tosh	equ	0xFFE
  1861                           tosl	equ	0xFFD
  1862                           pclath	equ	0xFFA
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           prodh	equ	0xFF4
  1868                           prodl	equ	0xFF3
  1869                           intcon	equ	0xFF2
  1870                           intcon2	equ	0xFF1
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           indf1	equ	0xFE7
  1874                           plusw1	equ	0xFE3
  1875                           fsr1h	equ	0xFE2
  1876                           fsr1l	equ	0xFE1
  1877                           indf2	equ	0xFDF
  1878                           postinc2	equ	0xFDE
  1879                           postdec2	equ	0xFDD
  1880                           plusw2	equ	0xFDB
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885                           	psect	bssBANK1
  1886  000100                     __pbssBANK1:
  1887                           	opt stack 0
  1888  000100                     _text_buf:
  1889                           	opt stack 0
  1890  000100                     	ds	100
  1891                           tosu	equ	0xFFF
  1892                           tosh	equ	0xFFE
  1893                           tosl	equ	0xFFD
  1894                           pclath	equ	0xFFA
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           prodh	equ	0xFF4
  1900                           prodl	equ	0xFF3
  1901                           intcon	equ	0xFF2
  1902                           intcon2	equ	0xFF1
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           indf1	equ	0xFE7
  1906                           plusw1	equ	0xFE3
  1907                           fsr1h	equ	0xFE2
  1908                           fsr1l	equ	0xFE1
  1909                           indf2	equ	0xFDF
  1910                           postinc2	equ	0xFDE
  1911                           postdec2	equ	0xFDD
  1912                           plusw2	equ	0xFDB
  1913                           fsr2h	equ	0xFDA
  1914                           fsr2l	equ	0xFD9
  1915                           status	equ	0xFD8
  1916                           
  1917                           	psect	cstackCOMRAM
  1918  000041                     __pcstackCOMRAM:
  1919                           	opt stack 0
  1920  000041                     i2RTOS_SetTask@taskFunc:
  1921                           	opt stack 0
  1922                           
  1923                           ; 2 bytes @ 0x0
  1924  000041                     	ds	2
  1925  000043                     i2RTOS_SetTask@taskDelay:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x2
  1929  000043                     	ds	2
  1930  000045                     i2RTOS_SetTask@taskPeriod:
  1931                           	opt stack 0
  1932                           
  1933                           ; 2 bytes @ 0x4
  1934  000045                     	ds	2
  1935  000047                     
  1936                           ; 1 bytes @ 0x6
  1937  000047                     	ds	2
  1938  000049                     i2RTOS_SetTask@i:
  1939                           	opt stack 0
  1940                           
  1941                           ; 1 bytes @ 0x8
  1942  000049                     	ds	1
  1943  00004A                     ??_INTERRUPT_InterruptManager:
  1944                           
  1945                           ; 1 bytes @ 0x9
  1946  00004A                     	ds	5
  1947  00004F                     ??_ow_reset:
  1948  00004F                     ??_read_byte:
  1949  00004F                     ??_I2C_idle:
  1950  00004F                     ??_scroll_text:
  1951  00004F                     ??_bcd_to_decimal:
  1952  00004F                     ?_sprintf:
  1953                           	opt stack 0
  1954  00004F                     ?___lwdiv:
  1955                           	opt stack 0
  1956  00004F                     Send_Byte_7221@dat:
  1957                           	opt stack 0
  1958  00004F                     pixel_on@y:
  1959                           	opt stack 0
  1960  00004F                     pixel_off@y:
  1961                           	opt stack 0
  1962  00004F                     clear_matrix@i:
  1963                           	opt stack 0
  1964  00004F                     key_press@key:
  1965                           	opt stack 0
  1966  00004F                     write_bit@bitval:
  1967                           	opt stack 0
  1968  00004F                     ___lbdiv@divisor:
  1969                           	opt stack 0
  1970  00004F                     RTOS_SetTask@taskFunc:
  1971                           	opt stack 0
  1972  00004F                     RTOS_DeleteTask@taskFunc:
  1973                           	opt stack 0
  1974  00004F                     sprintf@sp:
  1975                           	opt stack 0
  1976  00004F                     ___lwdiv@dividend:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0xE
  1980  00004F                     	ds	1
  1981  000050                     ??_write_byte:
  1982  000050                     ??_pixel_on:
  1983  000050                     ??_pixel_off:
  1984  000050                     I2C_start@_R_W:
  1985                           	opt stack 0
  1986  000050                     I2C_restart@_R_W:
  1987                           	opt stack 0
  1988  000050                     I2C_write@data:
  1989                           	opt stack 0
  1990  000050                     Send_Byte_7221@i:
  1991                           	opt stack 0
  1992  000050                     bcd_to_decimal@d:
  1993                           	opt stack 0
  1994  000050                     ow_reset@presence:
  1995                           	opt stack 0
  1996  000050                     ___lbdiv@dividend:
  1997                           	opt stack 0
  1998                           
  1999                           ; 1 bytes @ 0xF
  2000  000050                     	ds	1
  2001  000051                     ??_RTOS_DeleteTask:
  2002  000051                     I2C_start@adress:
  2003                           	opt stack 0
  2004  000051                     I2C_restart@adres:
  2005                           	opt stack 0
  2006  000051                     Cmd7221@val:
  2007                           	opt stack 0
  2008  000051                     Update_Matrix@buf:
  2009                           	opt stack 0
  2010  000051                     scroll_text@i:
  2011                           	opt stack 0
  2012  000051                     read_byte@val:
  2013                           	opt stack 0
  2014  000051                     ___lbdiv@counter:
  2015                           	opt stack 0
  2016  000051                     RTOS_SetTask@taskDelay:
  2017                           	opt stack 0
  2018  000051                     sprintf@f:
  2019                           	opt stack 0
  2020  000051                     ___lwdiv@divisor:
  2021                           	opt stack 0
  2022                           
  2023                           ; 2 bytes @ 0x10
  2024  000051                     	ds	1
  2025  000052                     Cmd7221@adr:
  2026                           	opt stack 0
  2027  000052                     Update_Matrix@data:
  2028                           	opt stack 0
  2029  000052                     pixel_on@x:
  2030                           	opt stack 0
  2031  000052                     DS3231_Read@address:
  2032                           	opt stack 0
  2033  000052                     read_byte@i:
  2034                           	opt stack 0
  2035  000052                     write_byte@val:
  2036                           	opt stack 0
  2037  000052                     ___lbdiv@quotient:
  2038                           	opt stack 0
  2039                           
  2040                           ; 1 bytes @ 0x11
  2041  000052                     	ds	1
  2042  000053                     Cmd7221@i:
  2043                           	opt stack 0
  2044  000053                     Update_Matrix@j:
  2045                           	opt stack 0
  2046  000053                     pixel_off@x:
  2047                           	opt stack 0
  2048  000053                     DS3231_Read@value:
  2049                           	opt stack 0
  2050  000053                     write_byte@temp:
  2051                           	opt stack 0
  2052  000053                     sprintf@c:
  2053                           	opt stack 0
  2054  000053                     ___lbmod@divisor:
  2055                           	opt stack 0
  2056  000053                     RTOS_SetTask@taskPeriod:
  2057                           	opt stack 0
  2058  000053                     ___lwdiv@quotient:
  2059                           	opt stack 0
  2060                           
  2061                           ; 2 bytes @ 0x12
  2062  000053                     	ds	1
  2063  000054                     Update_Matrix@i:
  2064                           	opt stack 0
  2065  000054                     pic_to_led@pic:
  2066                           	opt stack 0
  2067  000054                     getTime@p3:
  2068                           	opt stack 0
  2069  000054                     getDate@p4:
  2070                           	opt stack 0
  2071  000054                     write_byte@i:
  2072                           	opt stack 0
  2073  000054                     ___lbmod@dividend:
  2074                           	opt stack 0
  2075                           
  2076                           ; 1 bytes @ 0x13
  2077  000054                     	ds	1
  2078  000055                     ??_version:
  2079  000055                     ??_pic_to_led:
  2080  000055                     ??_scroll_left:
  2081  000055                     getTime@p2:
  2082                           	opt stack 0
  2083  000055                     getDate@p3:
  2084                           	opt stack 0
  2085  000055                     readTemp_Single@buf:
  2086                           	opt stack 0
  2087  000055                     ___lbmod@counter:
  2088                           	opt stack 0
  2089  000055                     ___lwdiv@counter:
  2090                           	opt stack 0
  2091                           
  2092                           ; 1 bytes @ 0x14
  2093  000055                     	ds	1
  2094  000056                     ?___lwmod:
  2095                           	opt stack 0
  2096  000056                     scroll_left@j:
  2097                           	opt stack 0
  2098  000056                     getTime@p1:
  2099                           	opt stack 0
  2100  000056                     getDate@p2:
  2101                           	opt stack 0
  2102  000056                     version@i:
  2103                           	opt stack 0
  2104  000056                     readTemp_Single@time_flag:
  2105                           	opt stack 0
  2106  000056                     ___lbmod@rem:
  2107                           	opt stack 0
  2108  000056                     ___lwmod@dividend:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0x15
  2112  000056                     	ds	1
  2113  000057                     ??_FillBuf:
  2114  000057                     ??_decimal_to_bcd:
  2115  000057                     RTOS_SetTask@i:
  2116                           	opt stack 0
  2117  000057                     RTOS_DeleteTask@i:
  2118                           	opt stack 0
  2119  000057                     pic_to_led@mask:
  2120                           	opt stack 0
  2121  000057                     putchar_b_buf@symbol:
  2122                           	opt stack 0
  2123  000057                     putchar_down_s@symbol:
  2124                           	opt stack 0
  2125  000057                     scroll_left@k:
  2126                           	opt stack 0
  2127  000057                     getDate@p1:
  2128                           	opt stack 0
  2129  000057                     readTemp_Single@timer_val:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x16
  2133  000057                     	ds	1
  2134  000058                     ??_readTemp_Single:
  2135  000058                     ??_putchar_b_buf:
  2136  000058                     ??_putchar_down_s:
  2137  000058                     pic_to_led@x:
  2138                           	opt stack 0
  2139  000058                     scroll_left@speed:
  2140                           	opt stack 0
  2141  000058                     ___lwmod@divisor:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x17
  2145  000058                     	ds	1
  2146  000059                     pic_to_led@j:
  2147                           	opt stack 0
  2148  000059                     FillBuf@i:
  2149                           	opt stack 0
  2150  000059                     scroll_left@i:
  2151                           	opt stack 0
  2152  000059                     decimal_to_bcd@d:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x18
  2156  000059                     	ds	1
  2157  00005A                     pic_to_led@i:
  2158                           	opt stack 0
  2159  00005A                     putchar_b_buf@mask:
  2160                           	opt stack 0
  2161  00005A                     DS3231_Write@value:
  2162                           	opt stack 0
  2163  00005A                     readTemp_Single@tmp:
  2164                           	opt stack 0
  2165  00005A                     ___lwmod@counter:
  2166                           	opt stack 0
  2167                           
  2168                           ; 1 bytes @ 0x19
  2169  00005A                     	ds	1
  2170  00005B                     putchar_b_buf@x:
  2171                           	opt stack 0
  2172  00005B                     putchar_down@symbol:
  2173                           	opt stack 0
  2174  00005B                     DS3231_Write@address:
  2175                           	opt stack 0
  2176  00005B                     readTemp_Single@i:
  2177                           	opt stack 0
  2178                           
  2179                           ; 1 bytes @ 0x1A
  2180  00005B                     	ds	1
  2181  00005C                     ??_putchar_down:
  2182  00005C                     putchar_b_buf@j:
  2183                           	opt stack 0
  2184  00005C                     setTime@mSet:
  2185                           	opt stack 0
  2186  00005C                     setDate@dateSet:
  2187                           	opt stack 0
  2188  00005C                     readTemp_Single@temp:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x1B
  2192  00005C                     	ds	1
  2193  00005D                     putchar_b_buf@i:
  2194                           	opt stack 0
  2195  00005D                     putchar_down_s@x:
  2196                           	opt stack 0
  2197  00005D                     setTime@sSet:
  2198                           	opt stack 0
  2199  00005D                     setDate@monthSet:
  2200                           	opt stack 0
  2201                           
  2202                           ; 1 bytes @ 0x1C
  2203  00005D                     	ds	1
  2204  00005E                     putchar_down_s@k:
  2205                           	opt stack 0
  2206  00005E                     setTime@hSet:
  2207                           	opt stack 0
  2208  00005E                     setDate@yearSet:
  2209                           	opt stack 0
  2210                           
  2211                           ; 1 bytes @ 0x1D
  2212  00005E                     	ds	1
  2213  00005F                     putchar_down_s@j:
  2214                           	opt stack 0
  2215  00005F                     setDate@daySet:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x1E
  2219  00005F                     	ds	1
  2220  000060                     putchar_down_s@i:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x1F
  2224  000060                     	ds	1
  2225  000061                     putchar_down@x:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x20
  2229  000061                     	ds	1
  2230  000062                     putchar_down@k:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x21
  2234  000062                     	ds	1
  2235  000063                     putchar_down@j:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x22
  2239  000063                     	ds	1
  2240  000064                     putchar_down@i:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x23
  2244  000064                     	ds	1
  2245  000065                     ??_home_temp:
  2246                           
  2247                           ; 1 bytes @ 0x24
  2248  000065                     	ds	1
  2249  000066                     ??_RTOS_DispatchTask:
  2250                           
  2251                           ; 1 bytes @ 0x25
  2252  000066                     	ds	4
  2253  00006A                     RTOS_DispatchTask@function:
  2254                           	opt stack 0
  2255                           
  2256                           ; 2 bytes @ 0x29
  2257  00006A                     	ds	2
  2258  00006C                     RTOS_DispatchTask@j:
  2259                           	opt stack 0
  2260                           
  2261                           ; 1 bytes @ 0x2B
  2262  00006C                     	ds	1
  2263  00006D                     RTOS_DispatchTask@i:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x2C
  2267  00006D                     	ds	1
  2268  00006E                     ??_main:
  2269                           
  2270                           ; 1 bytes @ 0x2D
  2271  00006E                     	ds	1
  2272                           tosu	equ	0xFFF
  2273                           tosh	equ	0xFFE
  2274                           tosl	equ	0xFFD
  2275                           pclath	equ	0xFFA
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           prodh	equ	0xFF4
  2281                           prodl	equ	0xFF3
  2282                           intcon	equ	0xFF2
  2283                           intcon2	equ	0xFF1
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           indf1	equ	0xFE7
  2287                           plusw1	equ	0xFE3
  2288                           fsr1h	equ	0xFE2
  2289                           fsr1l	equ	0xFE1
  2290                           indf2	equ	0xFDF
  2291                           postinc2	equ	0xFDE
  2292                           postdec2	equ	0xFDD
  2293                           plusw2	equ	0xFDB
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           status	equ	0xFD8
  2297                           
  2298 ;;
  2299 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2300 ;;
  2301 ;; *************** function _main *****************
  2302 ;; Defined at:
  2303 ;;		line 19 in file "main.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;		None
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;		None
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;Total ram usage:        1 bytes
  2322 ;; Hardware stack levels required when called:    9
  2323 ;; This function calls:
  2324 ;;		_RTOS_DispatchTask
  2325 ;;		_RTOS_SetTask
  2326 ;;		_SYSTEM_Initialize
  2327 ;;		_clear_matrix
  2328 ;;		_version
  2329 ;; This function is called by:
  2330 ;;		Startup code after reset
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text0
  2335  001248                     __ptext0:
  2336                           	opt stack 0
  2337  001248                     _main:
  2338                           	opt stack 22
  2339                           
  2340                           ;main.c: 20: _delay((unsigned long)((10)*(40000000/4000.0)));
  2341                           
  2342                           ;incstack = 0
  2343  001248  0E82               	movlw	130
  2344  00124A  6E6E               	movwf	??_main& (0+255),c
  2345  00124C  0EDE               	movlw	222
  2346  00124E                     u2617:
  2347  00124E  2EE8               	decfsz	wreg,f,c
  2348  001250  D7FE               	bra	u2617
  2349  001252  2E6E               	decfsz	??_main& (0+255),f,c
  2350  001254  D7FC               	bra	u2617
  2351                           
  2352                           ;main.c: 21: SYSTEM_Initialize();
  2353  001256  ECBA  F00B         	call	_SYSTEM_Initialize	;wreg free
  2354                           
  2355                           ;main.c: 23: clear_matrix();
  2356  00125A  EC0B  F00C         	call	_clear_matrix	;wreg free
  2357                           
  2358                           ;main.c: 24: version();
  2359  00125E  ECB7  F009         	call	_version	;wreg free
  2360                           
  2361                           ;main.c: 26: (INTCONbits.GIE = 0);
  2362  001262  9EF2               	bcf	intcon,7,c	;volatile
  2363                           
  2364                           ;main.c: 27: RTOS_SetTask(time_led, 100, 20);
  2365  001264  0ED8               	movlw	low _time_led
  2366  001266  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  2367  001268  0E0B               	movlw	high _time_led
  2368  00126A  6E50               	movwf	RTOS_SetTask@taskFunc+1,c
  2369  00126C  6A52               	clrf	RTOS_SetTask@taskDelay+1,c
  2370  00126E  0E64               	movlw	100
  2371  001270  6E51               	movwf	RTOS_SetTask@taskDelay,c
  2372  001272  6A54               	clrf	RTOS_SetTask@taskPeriod+1,c
  2373  001274  0E14               	movlw	20
  2374  001276  6E53               	movwf	RTOS_SetTask@taskPeriod,c
  2375  001278  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  2376                           
  2377                           ;main.c: 28: RTOS_SetTask(key_press,0,1);
  2378  00127C  0E2A               	movlw	low _key_press
  2379  00127E  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  2380  001280  0E13               	movlw	high _key_press
  2381  001282  6E50               	movwf	RTOS_SetTask@taskFunc+1,c
  2382  001284  6A52               	clrf	RTOS_SetTask@taskDelay+1,c
  2383  001286  6A51               	clrf	RTOS_SetTask@taskDelay,c
  2384  001288  6A54               	clrf	RTOS_SetTask@taskPeriod+1,c
  2385  00128A  0E01               	movlw	1
  2386  00128C  6E53               	movwf	RTOS_SetTask@taskPeriod,c
  2387  00128E  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  2388                           
  2389                           ;main.c: 29: (INTCONbits.GIE = 1);
  2390  001292  8EF2               	bsf	intcon,7,c	;volatile
  2391  001294                     l4104:
  2392                           
  2393                           ;main.c: 32: {
  2394                           ;main.c: 33: RTOS_DispatchTask();
  2395  001294  EC1A  F005         	call	_RTOS_DispatchTask	;wreg free
  2396  001298  D7FD               	goto	l4104
  2397  00129A                     __end_of_main:
  2398                           	opt stack 0
  2399                           tosu	equ	0xFFF
  2400                           tosh	equ	0xFFE
  2401                           tosl	equ	0xFFD
  2402                           pclath	equ	0xFFA
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           intcon	equ	0xFF2
  2410                           intcon2	equ	0xFF1
  2411                           postinc0	equ	0xFEE
  2412                           wreg	equ	0xFE8
  2413                           indf1	equ	0xFE7
  2414                           plusw1	equ	0xFE3
  2415                           fsr1h	equ	0xFE2
  2416                           fsr1l	equ	0xFE1
  2417                           indf2	equ	0xFDF
  2418                           postinc2	equ	0xFDE
  2419                           postdec2	equ	0xFDD
  2420                           plusw2	equ	0xFDB
  2421                           fsr2h	equ	0xFDA
  2422                           fsr2l	equ	0xFD9
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _version *****************
  2426 ;; Defined at:
  2427 ;;		line 505 in file "common.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  i               1   21[COMRAM] unsigned char 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      void 
  2434 ;; Registers used:
  2435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;Total ram usage:        2 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    5
  2448 ;; This function calls:
  2449 ;;		_Update_Matrix
  2450 ;;		_scroll_text
  2451 ;;		_sprintf
  2452 ;; This function is called by:
  2453 ;;		_main
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           	psect	text1
  2458  00136E                     __ptext1:
  2459                           	opt stack 0
  2460  00136E                     _version:
  2461                           	opt stack 25
  2462                           
  2463                           ;common.c: 507: uint8_t i;
  2464                           ;common.c: 509: sprintf(text_buf, "Clock v1.0 by Ivan_fd");
  2465                           
  2466                           ;incstack = 0
  2467  00136E  0E00               	movlw	low _text_buf
  2468  001370  6E4F               	movwf	sprintf@sp,c
  2469  001372  0E01               	movlw	high _text_buf
  2470  001374  6E50               	movwf	sprintf@sp+1,c
  2471  001376  0EE8               	movlw	low STR_1
  2472  001378  6E51               	movwf	sprintf@f,c
  2473  00137A  0EBF               	movlw	high STR_1
  2474  00137C  6E52               	movwf	sprintf@f+1,c
  2475  00137E  ECA1  F00A         	call	_sprintf	;wreg free
  2476                           
  2477                           ;common.c: 510: while(scroll_text())
  2478  001382  D010               	goto	l4054
  2479  001384                     l4042:
  2480                           
  2481                           ;common.c: 511: {
  2482                           ;common.c: 512: Update_Matrix(Dis_Buff);
  2483  001384  0E16               	movlw	low _Dis_Buff
  2484  001386  6E51               	movwf	Update_Matrix@buf,c
  2485  001388  EC14  F00A         	call	_Update_Matrix	;wreg free
  2486                           
  2487                           ;common.c: 513: for(i=0; i<60; i++)
  2488  00138C  6A56               	clrf	version@i,c
  2489  00138E                     l4050:
  2490                           
  2491                           ;common.c: 514: _delay((unsigned long)((1)*(40000000/4000.0)));
  2492  00138E  0E0D               	movlw	13
  2493  001390  6E55               	movwf	??_version& (0+255),c
  2494  001392  0EFC               	movlw	252
  2495  001394                     u2627:
  2496  001394  2EE8               	decfsz	wreg,f,c
  2497  001396  D7FE               	bra	u2627
  2498  001398  2E55               	decfsz	??_version& (0+255),f,c
  2499  00139A  D7FC               	bra	u2627
  2500  00139C  2A56               	incf	version@i,f,c
  2501  00139E  0E3B               	movlw	59
  2502  0013A0  6456               	cpfsgt	version@i,c
  2503  0013A2  D7F5               	goto	l4050
  2504  0013A4                     l4054:
  2505  0013A4  ECB3  F007         	call	_scroll_text	;wreg free
  2506  0013A8  0900               	iorlw	0
  2507  0013AA  E1EC               	bnz	l4042
  2508  0013AC  0012               	return		;funcret
  2509  0013AE                     __end_of_version:
  2510                           	opt stack 0
  2511                           tosu	equ	0xFFF
  2512                           tosh	equ	0xFFE
  2513                           tosl	equ	0xFFD
  2514                           pclath	equ	0xFFA
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           prodh	equ	0xFF4
  2520                           prodl	equ	0xFF3
  2521                           intcon	equ	0xFF2
  2522                           intcon2	equ	0xFF1
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           indf1	equ	0xFE7
  2526                           plusw1	equ	0xFE3
  2527                           fsr1h	equ	0xFE2
  2528                           fsr1l	equ	0xFE1
  2529                           indf2	equ	0xFDF
  2530                           postinc2	equ	0xFDE
  2531                           postdec2	equ	0xFDD
  2532                           plusw2	equ	0xFDB
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _sprintf *****************
  2538 ;; Defined at:
  2539 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  sp              2   14[COMRAM] PTR unsigned char 
  2542 ;;		 -> text_buf(100), 
  2543 ;;  f               2   16[COMRAM] PTR const unsigned char 
  2544 ;;		 -> STR_1(22), 
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  tmpval          4    0        struct .
  2547 ;;  cp              3    0        PTR const unsigned char 
  2548 ;;  len             2    0        unsigned int 
  2549 ;;  val             2    0        unsigned int 
  2550 ;;  c               1   18[COMRAM] char 
  2551 ;;  flag            1    0        unsigned char 
  2552 ;;  prec            1    0        char 
  2553 ;;  ap              1    0        PTR void [1]
  2554 ;;		 -> ?_sprintf(2), 
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  2   14[COMRAM] int 
  2557 ;; Registers used:
  2558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2564 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;Total ram usage:        5 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    3
  2571 ;; This function calls:
  2572 ;;		Nothing
  2573 ;; This function is called by:
  2574 ;;		_version
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text2
  2579  001542                     __ptext2:
  2580                           	opt stack 0
  2581  001542                     _sprintf:
  2582                           	opt stack 26
  2583                           
  2584                           ;doprnt.c: 536: while(c = *f++) {
  2585                           
  2586                           ;incstack = 0
  2587  001542  D005               	goto	l3974
  2588  001544                     l3970:
  2589                           
  2590                           ;doprnt.c: 540: {
  2591                           ;doprnt.c: 541: ((*sp++ = (c)));
  2592  001544  D812               	call	PL90	;call to abstracted procedure
  2593  001546  C053  FFDF         	movff	sprintf@c,indf2
  2594  00154A  4A4F               	infsnz	sprintf@sp,f,c
  2595  00154C  2A50               	incf	sprintf@sp+1,f,c
  2596  00154E                     l3974:
  2597  00154E  C051  FFF6         	movff	sprintf@f,tblptrl
  2598  001552  C052  FFF7         	movff	sprintf@f+1,tblptrh
  2599  001556  4A51               	infsnz	sprintf@f,f,c
  2600  001558  2A52               	incf	sprintf@f+1,f,c
  2601  00155A                     	if	0	;tblptru may be non-zero
  2602  00155A                     	endif
  2603  00155A                     	if	0	;tblptru may be non-zero
  2604  00155A                     	endif
  2605  00155A  0008               	tblrd		*
  2606  00155C  CFF5 F053          	movff	tablat,sprintf@c
  2607  001560  5053               	movf	sprintf@c,w,c
  2608  001562  E1F0               	bnz	l3970
  2609                           
  2610                           ;doprnt.c: 1469: }
  2611                           ;doprnt.c: 1533: }
  2612                           ;doprnt.c: 1538: *sp = 0;
  2613  001564  D802               	call	PL90	;call to abstracted procedure
  2614  001566  6ADF               	clrf	indf2,c
  2615  001568  0C00               	retlw	0	;funcret
  2616  00156A                     __end_of_sprintf:
  2617                           	opt stack 0
  2618  00156A                     PL90:
  2619                           	opt stack 26
  2620  00156A  C04F  FFD9         	movff	sprintf@sp,fsr2l
  2621  00156E  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  2622  001572  0012               	return	
  2623  001574                     __end_ofPL90:
  2624                           	opt stack 0
  2625                           tosu	equ	0xFFF
  2626                           tosh	equ	0xFFE
  2627                           tosl	equ	0xFFD
  2628                           pclath	equ	0xFFA
  2629                           tblptru	equ	0xFF8
  2630                           tblptrh	equ	0xFF7
  2631                           tblptrl	equ	0xFF6
  2632                           tablat	equ	0xFF5
  2633                           prodh	equ	0xFF4
  2634                           prodl	equ	0xFF3
  2635                           intcon	equ	0xFF2
  2636                           intcon2	equ	0xFF1
  2637                           postinc0	equ	0xFEE
  2638                           wreg	equ	0xFE8
  2639                           indf1	equ	0xFE7
  2640                           plusw1	equ	0xFE3
  2641                           fsr1h	equ	0xFE2
  2642                           fsr1l	equ	0xFE1
  2643                           indf2	equ	0xFDF
  2644                           postinc2	equ	0xFDE
  2645                           postdec2	equ	0xFDD
  2646                           plusw2	equ	0xFDB
  2647                           fsr2h	equ	0xFDA
  2648                           fsr2l	equ	0xFD9
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _scroll_text *****************
  2652 ;; Defined at:
  2653 ;;		line 229 in file "display.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  i               1   16[COMRAM] unsigned char 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      unsigned char 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;Total ram usage:        3 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    3
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_version
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text3
  2682  000F66                     __ptext3:
  2683                           	opt stack 0
  2684  000F66                     _scroll_text:
  2685                           	opt stack 26
  2686                           
  2687                           ;display.c: 231: uint8_t i;
  2688                           ;display.c: 233: for (i=0; i<31; i++)
  2689                           
  2690                           ;incstack = 0
  2691  000F66  6A51               	clrf	scroll_text@i,c
  2692  000F68                     l3490:
  2693                           
  2694                           ;display.c: 234: Dis_Buff[i] = Dis_Buff[i+1];
  2695  000F68  5051               	movf	scroll_text@i,w,c
  2696  000F6A  0F17               	addlw	low (_Dis_Buff+1)
  2697  000F6C  6ED9               	movwf	fsr2l,c
  2698  000F6E  6ADA               	clrf	fsr2h,c
  2699  000F70  5051               	movf	scroll_text@i,w,c
  2700  000F72  D833               	call	PL46	;call to abstracted procedure
  2701  000F74  2A51               	incf	scroll_text@i,f,c
  2702  000F76  0E1E               	movlw	30
  2703  000F78  6451               	cpfsgt	scroll_text@i,c
  2704  000F7A  D7F6               	goto	l3490
  2705                           
  2706                           ;display.c: 236: if ((i_bchar) >= 5)
  2707  000F7C  0E04               	movlw	4
  2708  000F7E  6412               	cpfsgt	_i_bchar,c
  2709  000F80  D00D               	goto	l3512
  2710                           
  2711                           ;display.c: 237: {
  2712                           ;display.c: 238: if (text_buf[i_char] == 0)
  2713  000F82  D823               	call	PL34	;call to abstracted procedure
  2714  000F84  E107               	bnz	l424
  2715                           
  2716                           ;display.c: 239: {
  2717                           ;display.c: 240: i_bchar++;
  2718  000F86  2A12               	incf	_i_bchar,f,c
  2719                           
  2720                           ;display.c: 241: if (i_bchar >= 32)
  2721  000F88  0E1F               	movlw	31
  2722  000F8A  6412               	cpfsgt	_i_bchar,c
  2723  000F8C  0C01               	retlw	1
  2724                           
  2725                           ;display.c: 242: {
  2726                           ;display.c: 243: i_char = 0;
  2727  000F8E  6A13               	clrf	_i_char,c
  2728                           
  2729                           ;display.c: 244: i_bchar = 0;
  2730  000F90  6A12               	clrf	_i_bchar,c
  2731                           
  2732                           ;display.c: 245: return 0;
  2733  000F92  0C00               	retlw	0
  2734  000F94                     l424:
  2735                           
  2736                           ;display.c: 248: else
  2737                           ;display.c: 249: {
  2738                           ;display.c: 250: Dis_Buff[31] = 0;
  2739  000F94  6A35               	clrf	_Dis_Buff+31,c
  2740                           
  2741                           ;display.c: 251: i_bchar = 0;
  2742  000F96  6A12               	clrf	_i_bchar,c
  2743                           
  2744                           ;display.c: 252: i_char++;
  2745  000F98  2A13               	incf	_i_char,f,c
  2746  000F9A  0C01               	retlw	1
  2747  000F9C                     l3512:
  2748                           
  2749                           ;display.c: 255: else
  2750                           ;display.c: 256: {
  2751                           ;display.c: 257: Dis_Buff[31] = Font[ text_buf[i_char]][i_bchar++];
  2752  000F9C  D816               	call	PL34	;call to abstracted procedure
  2753  000F9E  0D05               	mullw	5
  2754  000FA0  0EC7               	movlw	low _Font
  2755  000FA2  6E4F               	movwf	??_scroll_text& (0+255),c
  2756  000FA4  0EBA               	movlw	high _Font
  2757  000FA6  6E50               	movwf	(??_scroll_text+1)& (0+255),c
  2758  000FA8  50F3               	movf	prodl,w,c
  2759  000FAA  264F               	addwf	??_scroll_text,f,c
  2760  000FAC  50F4               	movf	prodh,w,c
  2761  000FAE  2250               	addwfc	??_scroll_text+1,f,c
  2762  000FB0  5012               	movf	_i_bchar,w,c
  2763  000FB2  264F               	addwf	??_scroll_text,f,c
  2764  000FB4  0E00               	movlw	0
  2765  000FB6  2250               	addwfc	??_scroll_text+1,f,c
  2766  000FB8  C04F  FFF6         	movff	??_scroll_text,tblptrl
  2767  000FBC  C050  FFF7         	movff	??_scroll_text+1,tblptrh
  2768  000FC0                     	if	0	;tblptru may be non-zero
  2769  000FC0                     	endif
  2770  000FC0                     	if	0	;tblptru may be non-zero
  2771  000FC0                     	endif
  2772  000FC0  0008               	tblrd		*
  2773  000FC2  CFF5 F035          	movff	tablat,_Dis_Buff+31
  2774  000FC6  2A12               	incf	_i_bchar,f,c
  2775                           
  2776                           ;display.c: 259: }
  2777                           ;display.c: 263: return 1;
  2778  000FC8  0C01               	retlw	1	;funcret
  2779  000FCA                     __end_of_scroll_text:
  2780                           	opt stack 0
  2781  000FCA                     PL34:
  2782                           	opt stack 26
  2783  000FCA  0E00               	movlw	low _text_buf
  2784  000FCC  2413               	addwf	_i_char,w,c
  2785  000FCE  6ED9               	movwf	fsr2l,c
  2786  000FD0  6ADA               	clrf	fsr2h,c
  2787  000FD2  0E01               	movlw	high _text_buf
  2788  000FD4  22DA               	addwfc	fsr2h,f,c
  2789  000FD6  50DF               	movf	indf2,w,c
  2790  000FD8  0012               	return	
  2791  000FDA                     __end_ofPL34:
  2792                           	opt stack 0
  2793  000FDA                     PL46:
  2794                           	opt stack 23
  2795  000FDA  0F16               	addlw	low _Dis_Buff
  2796  000FDC  6EE1               	movwf	fsr1l,c
  2797  000FDE  6AE2               	clrf	fsr1h,c
  2798  000FE0  CFDF FFE7          	movff	indf2,indf1
  2799  000FE4  0012               	return	
  2800  000FE6                     __end_ofPL46:
  2801                           	opt stack 0
  2802                           tosu	equ	0xFFF
  2803                           tosh	equ	0xFFE
  2804                           tosl	equ	0xFFD
  2805                           pclath	equ	0xFFA
  2806                           tblptru	equ	0xFF8
  2807                           tblptrh	equ	0xFF7
  2808                           tblptrl	equ	0xFF6
  2809                           tablat	equ	0xFF5
  2810                           prodh	equ	0xFF4
  2811                           prodl	equ	0xFF3
  2812                           intcon	equ	0xFF2
  2813                           intcon2	equ	0xFF1
  2814                           postinc0	equ	0xFEE
  2815                           wreg	equ	0xFE8
  2816                           indf1	equ	0xFE7
  2817                           plusw1	equ	0xFE3
  2818                           fsr1h	equ	0xFE2
  2819                           fsr1l	equ	0xFE1
  2820                           indf2	equ	0xFDF
  2821                           postinc2	equ	0xFDE
  2822                           postdec2	equ	0xFDD
  2823                           plusw2	equ	0xFDB
  2824                           fsr2h	equ	0xFDA
  2825                           fsr2l	equ	0xFD9
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function _SYSTEM_Initialize *****************
  2829 ;; Defined at:
  2830 ;;		line 64 in file "init.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;		None
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;		None
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  1    wreg      void 
  2837 ;; Registers used:
  2838 ;;		wreg, status,2, status,0, cstack
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;Total ram usage:        0 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    7
  2851 ;; This function calls:
  2852 ;;		_DS3231_init
  2853 ;;		_I2C_Init
  2854 ;;		_Init7221
  2855 ;;		_Interrupt_Init
  2856 ;;		_Port_Init
  2857 ;;		_RTOS_Init
  2858 ;;		_TMR1Init
  2859 ;; This function is called by:
  2860 ;;		_main
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text4
  2865  001774                     __ptext4:
  2866                           	opt stack 0
  2867  001774                     _SYSTEM_Initialize:
  2868                           	opt stack 23
  2869                           
  2870                           ;init.c: 67: Port_Init();
  2871                           
  2872                           ;incstack = 0
  2873  001774  ECC8  F00B         	call	_Port_Init	;wreg free
  2874                           
  2875                           ;init.c: 68: I2C_Init();
  2876  001778  ECFF  F00B         	call	_I2C_Init	;wreg free
  2877                           
  2878                           ;init.c: 69: Init7221();
  2879  00177C  ECBA  F00A         	call	_Init7221	;wreg free
  2880                           
  2881                           ;init.c: 70: TMR1Init();
  2882  001780  EC56  F00C         	call	_TMR1Init	;wreg free
  2883                           
  2884                           ;init.c: 71: Interrupt_Init();
  2885  001784  EC6A  F00C         	call	_Interrupt_Init	;wreg free
  2886                           
  2887                           ;init.c: 72: DS3231_init();
  2888  001788  EC2B  F00C         	call	_DS3231_init	;wreg free
  2889                           
  2890                           ;init.c: 74: RTOS_Init();
  2891  00178C  EF46  F00C         	goto	_RTOS_Init	;wreg free
  2892  001790                     __end_of_SYSTEM_Initialize:
  2893                           	opt stack 0
  2894                           tosu	equ	0xFFF
  2895                           tosh	equ	0xFFE
  2896                           tosl	equ	0xFFD
  2897                           pclath	equ	0xFFA
  2898                           tblptru	equ	0xFF8
  2899                           tblptrh	equ	0xFF7
  2900                           tblptrl	equ	0xFF6
  2901                           tablat	equ	0xFF5
  2902                           prodh	equ	0xFF4
  2903                           prodl	equ	0xFF3
  2904                           intcon	equ	0xFF2
  2905                           intcon2	equ	0xFF1
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           indf1	equ	0xFE7
  2909                           plusw1	equ	0xFE3
  2910                           fsr1h	equ	0xFE2
  2911                           fsr1l	equ	0xFE1
  2912                           indf2	equ	0xFDF
  2913                           postinc2	equ	0xFDE
  2914                           postdec2	equ	0xFDD
  2915                           plusw2	equ	0xFDB
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _TMR1Init *****************
  2921 ;; Defined at:
  2922 ;;		line 5 in file "timer.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;		None
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;		None
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, status,2
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;Total ram usage:        0 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    3
  2943 ;; This function calls:
  2944 ;;		Nothing
  2945 ;; This function is called by:
  2946 ;;		_SYSTEM_Initialize
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text5
  2951  0018AC                     __ptext5:
  2952                           	opt stack 0
  2953  0018AC                     _TMR1Init:
  2954                           	opt stack 26
  2955                           
  2956                           ;timer.c: 7: T1CONbits.TMR1ON = 0;
  2957                           
  2958                           ;incstack = 0
  2959  0018AC  90CD               	bcf	4045,0,c	;volatile
  2960                           
  2961                           ;timer.c: 8: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  2962  0018AE  0E3C               	movlw	60
  2963  0018B0  6ECF               	movwf	4047,c	;volatile
  2964                           
  2965                           ;timer.c: 9: TMR1L = ((unsigned char)((15536)&0xFF));
  2966  0018B2  0EB0               	movlw	176
  2967  0018B4  6ECE               	movwf	4046,c	;volatile
  2968                           
  2969                           ;timer.c: 10: PIE1bits.TMR1IE = 1;
  2970  0018B6  809D               	bsf	3997,0,c	;volatile
  2971  0018B8  0CB0               	retlw	176	;funcret
  2972  0018BA                     __end_of_TMR1Init:
  2973                           	opt stack 0
  2974                           tosu	equ	0xFFF
  2975                           tosh	equ	0xFFE
  2976                           tosl	equ	0xFFD
  2977                           pclath	equ	0xFFA
  2978                           tblptru	equ	0xFF8
  2979                           tblptrh	equ	0xFF7
  2980                           tblptrl	equ	0xFF6
  2981                           tablat	equ	0xFF5
  2982                           prodh	equ	0xFF4
  2983                           prodl	equ	0xFF3
  2984                           intcon	equ	0xFF2
  2985                           intcon2	equ	0xFF1
  2986                           postinc0	equ	0xFEE
  2987                           wreg	equ	0xFE8
  2988                           indf1	equ	0xFE7
  2989                           plusw1	equ	0xFE3
  2990                           fsr1h	equ	0xFE2
  2991                           fsr1l	equ	0xFE1
  2992                           indf2	equ	0xFDF
  2993                           postinc2	equ	0xFDE
  2994                           postdec2	equ	0xFDD
  2995                           plusw2	equ	0xFDB
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _RTOS_Init *****************
  3001 ;; Defined at:
  3002 ;;		line 10 in file "dispatcher.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      void 
  3009 ;; Registers used:
  3010 ;;		wreg, status,2
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3020 ;;Total ram usage:        0 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    3
  3023 ;; This function calls:
  3024 ;;		Nothing
  3025 ;; This function is called by:
  3026 ;;		_SYSTEM_Initialize
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text6
  3031  00188C                     __ptext6:
  3032                           	opt stack 0
  3033  00188C                     _RTOS_Init:
  3034                           	opt stack 26
  3035                           
  3036                           ;dispatcher.c: 12: T0CON = 0b11000111;
  3037                           
  3038                           ;incstack = 0
  3039  00188C  0EC7               	movlw	199
  3040  00188E  6ED5               	movwf	4053,c	;volatile
  3041                           
  3042                           ;dispatcher.c: 13: INTCONbits.TMR0IE = 1;
  3043  001890  8AF2               	bsf	intcon,5,c	;volatile
  3044                           
  3045                           ;dispatcher.c: 14: TMR0 = 61;
  3046  001892  6AD7               	clrf	4055,c	;volatile
  3047  001894  0E3D               	movlw	61
  3048  001896  6ED6               	movwf	4054,c	;volatile
  3049                           
  3050                           ;dispatcher.c: 16: arrayTail = 0;
  3051  001898  6A15               	clrf	_arrayTail,c	;volatile
  3052  00189A  0012               	return		;funcret
  3053  00189C                     __end_of_RTOS_Init:
  3054                           	opt stack 0
  3055                           tosu	equ	0xFFF
  3056                           tosh	equ	0xFFE
  3057                           tosl	equ	0xFFD
  3058                           pclath	equ	0xFFA
  3059                           tblptru	equ	0xFF8
  3060                           tblptrh	equ	0xFF7
  3061                           tblptrl	equ	0xFF6
  3062                           tablat	equ	0xFF5
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           intcon	equ	0xFF2
  3066                           intcon2	equ	0xFF1
  3067                           postinc0	equ	0xFEE
  3068                           wreg	equ	0xFE8
  3069                           indf1	equ	0xFE7
  3070                           plusw1	equ	0xFE3
  3071                           fsr1h	equ	0xFE2
  3072                           fsr1l	equ	0xFE1
  3073                           indf2	equ	0xFDF
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           plusw2	equ	0xFDB
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _Port_Init *****************
  3082 ;; Defined at:
  3083 ;;		line 78 in file "init.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;		None
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, status,2, status,0
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;Total ram usage:        0 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    3
  3104 ;; This function calls:
  3105 ;;		Nothing
  3106 ;; This function is called by:
  3107 ;;		_SYSTEM_Initialize
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text7
  3112  001790                     __ptext7:
  3113                           	opt stack 0
  3114  001790                     _Port_Init:
  3115                           	opt stack 26
  3116                           
  3117                           ;init.c: 80: LATC = 0x00;
  3118                           
  3119                           ;incstack = 0
  3120  001790  6A8B               	clrf	3979,c	;volatile
  3121                           
  3122                           ;init.c: 81: TRISC = 0b00011000;
  3123  001792  0E18               	movlw	24
  3124  001794  6E94               	movwf	3988,c	;volatile
  3125                           
  3126                           ;init.c: 82: LATB = 0x00;
  3127  001796  6A8A               	clrf	3978,c	;volatile
  3128                           
  3129                           ;init.c: 83: TRISB = 0b00011111;
  3130  001798  0E1F               	movlw	31
  3131  00179A  6E93               	movwf	3987,c	;volatile
  3132                           
  3133                           ;init.c: 84: INTCON2 &= (~(1<<7));
  3134  00179C  9EF1               	bcf	intcon2,7,c	;volatile
  3135                           
  3136                           ;init.c: 85: LATD = 0x00;
  3137  00179E  6A8C               	clrf	3980,c	;volatile
  3138                           
  3139                           ;init.c: 86: TRISD = 0x00;
  3140  0017A0  6A95               	clrf	3989,c	;volatile
  3141                           
  3142                           ;init.c: 87: INTCON2bits.INTEDG0 = 1;
  3143  0017A2  8CF1               	bsf	intcon2,6,c	;volatile
  3144                           
  3145                           ;init.c: 88: INTCONbits.INT0IF = 0;
  3146  0017A4  92F2               	bcf	intcon,1,c	;volatile
  3147                           
  3148                           ;init.c: 89: INTCONbits.INT0IE = 1;
  3149  0017A6  88F2               	bsf	intcon,4,c	;volatile
  3150                           
  3151                           ;init.c: 90: PORTCbits.RC0 = 1;
  3152  0017A8  8082               	bsf	3970,0,c	;volatile
  3153  0017AA  0012               	return		;funcret
  3154  0017AC                     __end_of_Port_Init:
  3155                           	opt stack 0
  3156                           tosu	equ	0xFFF
  3157                           tosh	equ	0xFFE
  3158                           tosl	equ	0xFFD
  3159                           pclath	equ	0xFFA
  3160                           tblptru	equ	0xFF8
  3161                           tblptrh	equ	0xFF7
  3162                           tblptrl	equ	0xFF6
  3163                           tablat	equ	0xFF5
  3164                           prodh	equ	0xFF4
  3165                           prodl	equ	0xFF3
  3166                           intcon	equ	0xFF2
  3167                           intcon2	equ	0xFF1
  3168                           postinc0	equ	0xFEE
  3169                           wreg	equ	0xFE8
  3170                           indf1	equ	0xFE7
  3171                           plusw1	equ	0xFE3
  3172                           fsr1h	equ	0xFE2
  3173                           fsr1l	equ	0xFE1
  3174                           indf2	equ	0xFDF
  3175                           postinc2	equ	0xFDE
  3176                           postdec2	equ	0xFDD
  3177                           plusw2	equ	0xFDB
  3178                           fsr2h	equ	0xFDA
  3179                           fsr2l	equ	0xFD9
  3180                           status	equ	0xFD8
  3181                           
  3182 ;; *************** function _Interrupt_Init *****************
  3183 ;; Defined at:
  3184 ;;		line 93 in file "init.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;		None
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;		None
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		None
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;Total ram usage:        0 bytes
  3203 ;; Hardware stack levels used:    1
  3204 ;; Hardware stack levels required when called:    3
  3205 ;; This function calls:
  3206 ;;		Nothing
  3207 ;; This function is called by:
  3208 ;;		_SYSTEM_Initialize
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text8
  3213  0018D4                     __ptext8:
  3214                           	opt stack 0
  3215  0018D4                     _Interrupt_Init:
  3216                           	opt stack 26
  3217                           
  3218                           ;init.c: 95: (INTCONbits.GIE = 1);
  3219                           
  3220                           ;incstack = 0
  3221  0018D4  8EF2               	bsf	intcon,7,c	;volatile
  3222                           
  3223                           ;init.c: 96: (INTCONbits.PEIE = 1);
  3224  0018D6  8CF2               	bsf	intcon,6,c	;volatile
  3225  0018D8  0012               	return		;funcret
  3226  0018DA                     __end_of_Interrupt_Init:
  3227                           	opt stack 0
  3228                           tosu	equ	0xFFF
  3229                           tosh	equ	0xFFE
  3230                           tosl	equ	0xFFD
  3231                           pclath	equ	0xFFA
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodh	equ	0xFF4
  3237                           prodl	equ	0xFF3
  3238                           intcon	equ	0xFF2
  3239                           intcon2	equ	0xFF1
  3240                           postinc0	equ	0xFEE
  3241                           wreg	equ	0xFE8
  3242                           indf1	equ	0xFE7
  3243                           plusw1	equ	0xFE3
  3244                           fsr1h	equ	0xFE2
  3245                           fsr1l	equ	0xFE1
  3246                           indf2	equ	0xFDF
  3247                           postinc2	equ	0xFDE
  3248                           postdec2	equ	0xFDD
  3249                           plusw2	equ	0xFDB
  3250                           fsr2h	equ	0xFDA
  3251                           fsr2l	equ	0xFD9
  3252                           status	equ	0xFD8
  3253                           
  3254 ;; *************** function _Init7221 *****************
  3255 ;; Defined at:
  3256 ;;		line 77 in file "max7221.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;		None
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;		None
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      void 
  3263 ;; Registers used:
  3264 ;;		wreg, status,2, status,0, cstack
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;Total ram usage:        0 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    5
  3277 ;; This function calls:
  3278 ;;		_Cmd7221
  3279 ;; This function is called by:
  3280 ;;		_SYSTEM_Initialize
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text9
  3285  001574                     __ptext9:
  3286                           	opt stack 0
  3287  001574                     _Init7221:
  3288                           	opt stack 24
  3289                           
  3290                           ;max7221.c: 79: LATDbits.LD0 = 1;
  3291                           
  3292                           ;incstack = 0
  3293  001574  808C               	bsf	3980,0,c	;volatile
  3294                           
  3295                           ;max7221.c: 81: Cmd7221(0x0C,1);
  3296  001576  0E01               	movlw	1
  3297  001578  6E51               	movwf	Cmd7221@val,c
  3298  00157A  0E0C               	movlw	12
  3299  00157C  ECAB  F00B         	call	_Cmd7221
  3300                           
  3301                           ;max7221.c: 82: Cmd7221(0x09,0);
  3302  001580  6A51               	clrf	Cmd7221@val,c
  3303  001582  0E09               	movlw	9
  3304  001584  ECAB  F00B         	call	_Cmd7221
  3305                           
  3306                           ;max7221.c: 83: Cmd7221(0x0B,7);
  3307  001588  0E07               	movlw	7
  3308  00158A  6E51               	movwf	Cmd7221@val,c
  3309  00158C  0E0B               	movlw	11
  3310  00158E  ECAB  F00B         	call	_Cmd7221
  3311                           
  3312                           ;max7221.c: 84: Cmd7221(0x0A,0x01);
  3313  001592  0E01               	movlw	1
  3314  001594  6E51               	movwf	Cmd7221@val,c
  3315  001596  0E0A               	movlw	10
  3316  001598  ECAB  F00B         	call	_Cmd7221
  3317                           
  3318                           ;max7221.c: 85: Cmd7221(0x0F,0);
  3319  00159C  6A51               	clrf	Cmd7221@val,c
  3320  00159E  0E0F               	movlw	15
  3321  0015A0  EFAB  F00B         	goto	_Cmd7221
  3322  0015A4                     __end_of_Init7221:
  3323                           	opt stack 0
  3324                           tosu	equ	0xFFF
  3325                           tosh	equ	0xFFE
  3326                           tosl	equ	0xFFD
  3327                           pclath	equ	0xFFA
  3328                           tblptru	equ	0xFF8
  3329                           tblptrh	equ	0xFF7
  3330                           tblptrl	equ	0xFF6
  3331                           tablat	equ	0xFF5
  3332                           prodh	equ	0xFF4
  3333                           prodl	equ	0xFF3
  3334                           intcon	equ	0xFF2
  3335                           intcon2	equ	0xFF1
  3336                           postinc0	equ	0xFEE
  3337                           wreg	equ	0xFE8
  3338                           indf1	equ	0xFE7
  3339                           plusw1	equ	0xFE3
  3340                           fsr1h	equ	0xFE2
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           postdec2	equ	0xFDD
  3345                           plusw2	equ	0xFDB
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _Cmd7221 *****************
  3351 ;; Defined at:
  3352 ;;		line 33 in file "max7221.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  adr             1    wreg     unsigned char 
  3355 ;;  val             1   16[COMRAM] unsigned char 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  adr             1   17[COMRAM] unsigned char 
  3358 ;;  i               1   18[COMRAM] unsigned char 
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0, cstack
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3368 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;Total ram usage:        3 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    4
  3375 ;; This function calls:
  3376 ;;		_Send_Byte_7221
  3377 ;; This function is called by:
  3378 ;;		_Init7221
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text10
  3383  001756                     __ptext10:
  3384                           	opt stack 0
  3385  001756                     _Cmd7221:
  3386                           	opt stack 24
  3387                           
  3388                           ;incstack = 0
  3389                           ;Cmd7221@adr stored from wreg
  3390  001756  6E52               	movwf	Cmd7221@adr,c
  3391                           
  3392                           ;max7221.c: 35: uint8_t i;
  3393                           ;max7221.c: 36: LATDbits.LD0 = 0;
  3394  001758  908C               	bcf	3980,0,c	;volatile
  3395                           
  3396                           ;max7221.c: 37: for (i = 0; i < 4; i++ )
  3397  00175A  6A53               	clrf	Cmd7221@i,c
  3398  00175C                     l3148:
  3399                           
  3400                           ;max7221.c: 38: {
  3401                           ;max7221.c: 39: Send_Byte_7221(adr);
  3402  00175C  5052               	movf	Cmd7221@adr,w,c
  3403  00175E  EC87  F00B         	call	_Send_Byte_7221
  3404                           
  3405                           ;max7221.c: 40: Send_Byte_7221(val);
  3406  001762  5051               	movf	Cmd7221@val,w,c
  3407  001764  EC87  F00B         	call	_Send_Byte_7221
  3408  001768  2A53               	incf	Cmd7221@i,f,c
  3409  00176A  0E03               	movlw	3
  3410  00176C  6453               	cpfsgt	Cmd7221@i,c
  3411  00176E  D7F6               	goto	l3148
  3412                           
  3413                           ;max7221.c: 42: }
  3414                           ;max7221.c: 44: LATDbits.LD0 = 1;
  3415  001770  808C               	bsf	3980,0,c	;volatile
  3416  001772  0C03               	retlw	3	;funcret
  3417  001774                     __end_of_Cmd7221:
  3418                           	opt stack 0
  3419                           tosu	equ	0xFFF
  3420                           tosh	equ	0xFFE
  3421                           tosl	equ	0xFFD
  3422                           pclath	equ	0xFFA
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           prodh	equ	0xFF4
  3428                           prodl	equ	0xFF3
  3429                           intcon	equ	0xFF2
  3430                           intcon2	equ	0xFF1
  3431                           postinc0	equ	0xFEE
  3432                           wreg	equ	0xFE8
  3433                           indf1	equ	0xFE7
  3434                           plusw1	equ	0xFE3
  3435                           fsr1h	equ	0xFE2
  3436                           fsr1l	equ	0xFE1
  3437                           indf2	equ	0xFDF
  3438                           postinc2	equ	0xFDE
  3439                           postdec2	equ	0xFDD
  3440                           plusw2	equ	0xFDB
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function _I2C_Init *****************
  3446 ;; Defined at:
  3447 ;;		line 11 in file "i2c.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;		None
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;		None
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  1    wreg      void 
  3454 ;; Registers used:
  3455 ;;		wreg, status,2, status,0
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;Total ram usage:        0 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    3
  3468 ;; This function calls:
  3469 ;;		Nothing
  3470 ;; This function is called by:
  3471 ;;		_SYSTEM_Initialize
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           	psect	text11
  3476  0017FE                     __ptext11:
  3477                           	opt stack 0
  3478  0017FE                     _I2C_Init:
  3479                           	opt stack 26
  3480                           
  3481                           ;i2c.c: 13: TRISC |= 0b00011000;
  3482                           
  3483                           ;incstack = 0
  3484  0017FE  0E18               	movlw	24
  3485  001800  1294               	iorwf	3988,f,c	;volatile
  3486                           
  3487                           ;i2c.c: 14: SSPCON1 = 0b00101000;
  3488  001802  0E28               	movlw	40
  3489  001804  6EC6               	movwf	4038,c	;volatile
  3490                           
  3491                           ;i2c.c: 15: SSPSTAT = 0b10000000;
  3492  001806  0E80               	movlw	128
  3493  001808  6EC7               	movwf	4039,c	;volatile
  3494                           
  3495                           ;i2c.c: 17: SSPADD = 0x1F;
  3496  00180A  0E1F               	movlw	31
  3497  00180C  6EC8               	movwf	4040,c	;volatile
  3498                           
  3499                           ;i2c.c: 18: PEN = 1;
  3500  00180E  84C5               	bsf	4037,2,c	;volatile
  3501  001810                     l136:
  3502  001810  A4C5               	btfss	4037,2,c	;volatile
  3503  001812  0012               	return		;funcret
  3504  001814  D7FD               	goto	l136
  3505  001816                     __end_of_I2C_Init:
  3506                           	opt stack 0
  3507                           tosu	equ	0xFFF
  3508                           tosh	equ	0xFFE
  3509                           tosl	equ	0xFFD
  3510                           pclath	equ	0xFFA
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           intcon	equ	0xFF2
  3518                           intcon2	equ	0xFF1
  3519                           postinc0	equ	0xFEE
  3520                           wreg	equ	0xFE8
  3521                           indf1	equ	0xFE7
  3522                           plusw1	equ	0xFE3
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           postinc2	equ	0xFDE
  3527                           postdec2	equ	0xFDD
  3528                           plusw2	equ	0xFDB
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function _DS3231_init *****************
  3534 ;; Defined at:
  3535 ;;		line 37 in file "ds3231.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;		None
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;Total ram usage:        0 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    6
  3556 ;; This function calls:
  3557 ;;		_DS3231_Write
  3558 ;; This function is called by:
  3559 ;;		_SYSTEM_Initialize
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text12
  3564  001856                     __ptext12:
  3565                           	opt stack 0
  3566  001856                     _DS3231_init:
  3567                           	opt stack 23
  3568                           
  3569                           ;ds3231.c: 39: DS3231_Write(0x0E, 0x00);
  3570                           
  3571                           ;incstack = 0
  3572  001856  6A5A               	clrf	DS3231_Write@value,c
  3573  001858  0E0E               	movlw	14
  3574  00185A  ECF2  F00B         	call	_DS3231_Write
  3575                           
  3576                           ;ds3231.c: 40: DS3231_Write(0x0F, 0x08);
  3577  00185E  0E08               	movlw	8
  3578  001860  6E5A               	movwf	DS3231_Write@value,c
  3579  001862  0E0F               	movlw	15
  3580  001864  EFF2  F00B         	goto	_DS3231_Write
  3581  001868                     __end_of_DS3231_init:
  3582                           	opt stack 0
  3583                           tosu	equ	0xFFF
  3584                           tosh	equ	0xFFE
  3585                           tosl	equ	0xFFD
  3586                           pclath	equ	0xFFA
  3587                           tblptru	equ	0xFF8
  3588                           tblptrh	equ	0xFF7
  3589                           tblptrl	equ	0xFF6
  3590                           tablat	equ	0xFF5
  3591                           prodh	equ	0xFF4
  3592                           prodl	equ	0xFF3
  3593                           intcon	equ	0xFF2
  3594                           intcon2	equ	0xFF1
  3595                           postinc0	equ	0xFEE
  3596                           wreg	equ	0xFE8
  3597                           indf1	equ	0xFE7
  3598                           plusw1	equ	0xFE3
  3599                           fsr1h	equ	0xFE2
  3600                           fsr1l	equ	0xFE1
  3601                           indf2	equ	0xFDF
  3602                           postinc2	equ	0xFDE
  3603                           postdec2	equ	0xFDD
  3604                           plusw2	equ	0xFDB
  3605                           fsr2h	equ	0xFDA
  3606                           fsr2l	equ	0xFD9
  3607                           status	equ	0xFD8
  3608                           
  3609 ;; *************** function _RTOS_DispatchTask *****************
  3610 ;; Defined at:
  3611 ;;		line 84 in file "dispatcher.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;		None
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  function        2   41[COMRAM] PTR FTN()void 
  3616 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
  3617 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
  3618 ;;		 -> GetTime(1), key_press(1), time_led(1), 
  3619 ;;  i               1   44[COMRAM] unsigned char 
  3620 ;;  j               1   43[COMRAM] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;Total ram usage:        8 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    8
  3637 ;; This function calls:
  3638 ;;		_GetTime
  3639 ;;		_RTOS_DeleteTask
  3640 ;;		_default_state
  3641 ;;		_home_temp
  3642 ;;		_key_press
  3643 ;;		_time_led
  3644 ;;		_time_set_dt
  3645 ;;		_time_set_dy
  3646 ;;		_time_set_hr
  3647 ;;		_time_set_min
  3648 ;;		_time_set_mt
  3649 ;;		_time_set_yr
  3650 ;; This function is called by:
  3651 ;;		_main
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           	psect	text13
  3656  000A34                     __ptext13:
  3657                           	opt stack 0
  3658  000A34                     _RTOS_DispatchTask:
  3659                           	opt stack 22
  3660                           
  3661                           ;dispatcher.c: 86: uint8_t i, j;
  3662                           ;dispatcher.c: 87: void (*function) (void);
  3663                           ;dispatcher.c: 89: if (Timer0Interrupt)
  3664                           
  3665                           ;incstack = 0
  3666  000A34  5014               	movf	_Timer0Interrupt,w,c
  3667  000A36  E018               	bz	l229
  3668                           
  3669                           ;dispatcher.c: 90: {
  3670                           ;dispatcher.c: 91: Timer0Interrupt = 0;
  3671  000A38  6A14               	clrf	_Timer0Interrupt,c
  3672                           
  3673                           ;dispatcher.c: 92: for (j=0; j<arrayTail; j++)
  3674  000A3A  6A6C               	clrf	RTOS_DispatchTask@j,c
  3675  000A3C  D012               	goto	l4068
  3676  000A3E                     l4060:
  3677                           
  3678                           ;dispatcher.c: 93: {
  3679                           ;dispatcher.c: 94: if (TaskArray[j].delay == 0)
  3680  000A3E  506C               	movf	RTOS_DispatchTask@j,w,c
  3681  000A40  D85E               	call	PL18	;call to abstracted procedure
  3682  000A42  50DE               	movf	postinc2,w,c
  3683  000A44  10DE               	iorwf	postinc2,w,c
  3684  000A46  E107               	bnz	l4064
  3685                           
  3686                           ;dispatcher.c: 95: TaskArray[j].run = 1;
  3687  000A48  506C               	movf	RTOS_DispatchTask@j,w,c
  3688  000A4A  0D08               	mullw	8
  3689  000A4C  D85E               	call	PL22	;call to abstracted procedure
  3690  000A4E  0E01               	movlw	1
  3691  000A50  6EDE               	movwf	postinc2,c
  3692  000A52  6ADD               	clrf	postdec2,c
  3693  000A54  D005               	goto	l4066
  3694  000A56                     l4064:
  3695                           
  3696                           ;dispatcher.c: 96: else TaskArray[j].delay--;
  3697  000A56  506C               	movf	RTOS_DispatchTask@j,w,c
  3698  000A58  D852               	call	PL18	;call to abstracted procedure
  3699  000A5A  06DE               	decf	postinc2,f,c
  3700  000A5C  0E00               	movlw	0
  3701  000A5E  5ADD               	subwfb	postdec2,f,c
  3702  000A60                     l4066:
  3703  000A60  2A6C               	incf	RTOS_DispatchTask@j,f,c
  3704  000A62                     l4068:
  3705  000A62  5015               	movf	_arrayTail,w,c	;volatile
  3706  000A64  5C6C               	subwf	RTOS_DispatchTask@j,w,c
  3707  000A66  E3EB               	bnc	l4060
  3708  000A68                     l229:
  3709                           
  3710                           ;dispatcher.c: 97: }
  3711                           ;dispatcher.c: 98: }
  3712                           ;dispatcher.c: 100: for (i=0; i<arrayTail; i++)
  3713  000A68  6A6D               	clrf	RTOS_DispatchTask@i,c
  3714  000A6A  D045               	goto	l4084
  3715  000A6C                     l4070:
  3716                           
  3717                           ;dispatcher.c: 101: {
  3718                           ;dispatcher.c: 102: if (TaskArray[i].run == 1)
  3719  000A6C  506D               	movf	RTOS_DispatchTask@i,w,c
  3720  000A6E  0D08               	mullw	8
  3721  000A70  D84C               	call	PL22	;call to abstracted procedure
  3722  000A72  04DE               	decf	postinc2,w,c
  3723  000A74  10DE               	iorwf	postinc2,w,c
  3724  000A76  E13E               	bnz	l4082
  3725                           
  3726                           ;dispatcher.c: 103: {
  3727                           ;dispatcher.c: 104: function = TaskArray[i].pFunc;
  3728  000A78  506D               	movf	RTOS_DispatchTask@i,w,c
  3729  000A7A  EC82  F006         	call	PL20	;call to abstracted procedure
  3730  000A7E  CFDE F06A          	movff	postinc2,RTOS_DispatchTask@function
  3731  000A82  CFDD F06B          	movff	postdec2,RTOS_DispatchTask@function+1
  3732                           
  3733                           ;dispatcher.c: 106: if(TaskArray[i].period == 0)
  3734  000A86  506D               	movf	RTOS_DispatchTask@i,w,c
  3735  000A88  EC88  F006         	call	PL26	;call to abstracted procedure
  3736  000A8C  50DE               	movf	postinc2,w,c
  3737  000A8E  10DE               	iorwf	postinc2,w,c
  3738  000A90  E10A               	bnz	l4076
  3739                           
  3740                           ;dispatcher.c: 107: {
  3741                           ;dispatcher.c: 108: RTOS_DeleteTask(TaskArray[i].pFunc);
  3742  000A92  506D               	movf	RTOS_DispatchTask@i,w,c
  3743  000A94  EC82  F006         	call	PL20	;call to abstracted procedure
  3744  000A98  CFDE F04F          	movff	postinc2,RTOS_DeleteTask@taskFunc
  3745  000A9C  CFDD F050          	movff	postdec2,RTOS_DeleteTask@taskFunc+1
  3746  000AA0  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  3747                           
  3748                           ;dispatcher.c: 110: }
  3749  000AA4  D01B               	goto	l4080
  3750  000AA6                     l4076:
  3751                           
  3752                           ;dispatcher.c: 111: else
  3753                           ;dispatcher.c: 112: {
  3754                           ;dispatcher.c: 113: TaskArray[i].run = 0;
  3755  000AA6  506D               	movf	RTOS_DispatchTask@i,w,c
  3756  000AA8  EC7A  F006         	call	PL16	;call to abstracted procedure
  3757                           
  3758                           ;dispatcher.c: 114: if(!TaskArray[i].delay)
  3759  000AAC  506D               	movf	RTOS_DispatchTask@i,w,c
  3760  000AAE  D827               	call	PL18	;call to abstracted procedure
  3761  000AB0  50DE               	movf	postinc2,w,c
  3762  000AB2  10DE               	iorwf	postinc2,w,c
  3763  000AB4  E113               	bnz	l4080
  3764                           
  3765                           ;dispatcher.c: 115: {
  3766                           ;dispatcher.c: 116: TaskArray[i].delay = TaskArray[i].period-1;
  3767  000AB6  6866               	setf	??_RTOS_DispatchTask& (0+255),c
  3768  000AB8  6867               	setf	(??_RTOS_DispatchTask+1)& (0+255),c
  3769  000ABA  506D               	movf	RTOS_DispatchTask@i,w,c
  3770  000ABC  EC88  F006         	call	PL26	;call to abstracted procedure
  3771  000AC0  CFDE F068          	movff	postinc2,??_RTOS_DispatchTask+2
  3772  000AC4  CFDD F069          	movff	postdec2,??_RTOS_DispatchTask+3
  3773  000AC8  5066               	movf	??_RTOS_DispatchTask,w,c
  3774  000ACA  2668               	addwf	??_RTOS_DispatchTask+2,f,c
  3775  000ACC  5067               	movf	??_RTOS_DispatchTask+1,w,c
  3776  000ACE  2269               	addwfc	??_RTOS_DispatchTask+3,f,c
  3777  000AD0  506D               	movf	RTOS_DispatchTask@i,w,c
  3778  000AD2  D815               	call	PL18	;call to abstracted procedure
  3779  000AD4  C068  FFDE         	movff	??_RTOS_DispatchTask+2,postinc2
  3780  000AD8  C069  FFDD         	movff	??_RTOS_DispatchTask+3,postdec2
  3781  000ADC                     l4080:
  3782                           
  3783                           ;dispatcher.c: 117: }
  3784                           ;dispatcher.c: 118: }
  3785                           ;dispatcher.c: 119: (*function)();
  3786  000ADC  D801               	call	u2528
  3787  000ADE  D00A               	goto	l4082
  3788  000AE0                     u2528:
  3789  000AE0  0005               	push	
  3790  000AE2  6EFA               	movwf	pclath,c
  3791  000AE4  506A               	movf	RTOS_DispatchTask@function,w,c
  3792  000AE6  6EFD               	movwf	tosl,c
  3793  000AE8  506B               	movf	RTOS_DispatchTask@function+1,w,c
  3794  000AEA  6EFE               	movwf	tosh,c
  3795  000AEC  50F8               	movf	tblptru,w,c
  3796  000AEE  6EFF               	movwf	tosu,c
  3797  000AF0  50FA               	movf	pclath,w,c
  3798  000AF2  0012               	return		;indir
  3799  000AF4                     l4082:
  3800  000AF4  2A6D               	incf	RTOS_DispatchTask@i,f,c
  3801  000AF6                     l4084:
  3802  000AF6  5015               	movf	_arrayTail,w,c	;volatile
  3803  000AF8  5C6D               	subwf	RTOS_DispatchTask@i,w,c
  3804  000AFA  E3B8               	bnc	l4070
  3805  000AFC  0012               	return		;funcret
  3806  000AFE                     __end_of_RTOS_DispatchTask:
  3807                           	opt stack 0
  3808  000AFE                     PL18:
  3809                           	opt stack 27
  3810  000AFE  0D08               	mullw	8
  3811  000B00  50F3               	movf	prodl,w,c
  3812  000B02  0F82               	addlw	low (_TaskArray+2)
  3813  000B04  6ED9               	movwf	fsr2l,c
  3814  000B06  6ADA               	clrf	fsr2h,c
  3815  000B08  0012               	return	
  3816  000B0A                     __end_ofPL18:
  3817                           	opt stack 0
  3818  000B0A                     PL22:
  3819                           	opt stack 22
  3820  000B0A  50F3               	movf	prodl,w,c
  3821  000B0C  0F86               	addlw	low (_TaskArray+6)
  3822  000B0E  6ED9               	movwf	fsr2l,c
  3823  000B10  6ADA               	clrf	fsr2h,c
  3824  000B12  0012               	return	
  3825  000B14                     __end_ofPL22:
  3826                           	opt stack 0
  3827                           tosu	equ	0xFFF
  3828                           tosh	equ	0xFFE
  3829                           tosl	equ	0xFFD
  3830                           pclath	equ	0xFFA
  3831                           tblptru	equ	0xFF8
  3832                           tblptrh	equ	0xFF7
  3833                           tblptrl	equ	0xFF6
  3834                           tablat	equ	0xFF5
  3835                           prodh	equ	0xFF4
  3836                           prodl	equ	0xFF3
  3837                           intcon	equ	0xFF2
  3838                           intcon2	equ	0xFF1
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           indf1	equ	0xFE7
  3842                           plusw1	equ	0xFE3
  3843                           fsr1h	equ	0xFE2
  3844                           fsr1l	equ	0xFE1
  3845                           indf2	equ	0xFDF
  3846                           postinc2	equ	0xFDE
  3847                           postdec2	equ	0xFDD
  3848                           plusw2	equ	0xFDB
  3849                           fsr2h	equ	0xFDA
  3850                           fsr2l	equ	0xFD9
  3851                           status	equ	0xFD8
  3852                           
  3853 ;; *************** function _home_temp *****************
  3854 ;; Defined at:
  3855 ;;		line 419 in file "common.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;		None
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;		None
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  1    wreg      void 
  3862 ;; Registers used:
  3863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;Total ram usage:        1 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    7
  3876 ;; This function calls:
  3877 ;;		_RTOS_DeleteTask
  3878 ;;		_RTOS_SetTask
  3879 ;;		___lbdiv
  3880 ;;		___lbmod
  3881 ;;		___lwdiv
  3882 ;;		___lwmod
  3883 ;;		_clear_matrix
  3884 ;;		_getTime
  3885 ;;		_pic_to_led
  3886 ;;		_putchar_down
  3887 ;;		_putchar_down_s
  3888 ;;		_readTemp_Single
  3889 ;;		_scroll_left
  3890 ;; This function is called by:
  3891 ;;		_time_led
  3892 ;;		_RTOS_DispatchTask
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text14
  3897  00038C                     __ptext14:
  3898                           	opt stack 0
  3899  00038C                     _home_temp:
  3900                           	opt stack 22
  3901                           
  3902                           ;common.c: 421: switch (events)
  3903                           
  3904                           ;incstack = 0
  3905  00038C  D090               	goto	l3926
  3906  00038E                     l3884:
  3907                           
  3908                           ;common.c: 424: if (readTemp_Single(&temperature, &time_flag, &timer_val))
  3909  00038E  0E3D               	movlw	low _temperature
  3910  000390  6E55               	movwf	readTemp_Single@buf,c
  3911  000392  0E3F               	movlw	low _time_flag
  3912  000394  6E56               	movwf	readTemp_Single@time_flag,c
  3913  000396  0E40               	movlw	low _timer_val
  3914  000398  6E57               	movwf	readTemp_Single@timer_val,c
  3915  00039A  EC1F  F004         	call	_readTemp_Single	;wreg free
  3916  00039E  0900               	iorlw	0
  3917  0003A0  B4D8               	btfsc	status,2,c
  3918  0003A2  0012               	return	
  3919                           
  3920                           ;common.c: 425: {
  3921                           ;common.c: 426: clear_matrix();
  3922  0003A4  EC0B  F00C         	call	_clear_matrix	;wreg free
  3923                           
  3924                           ;common.c: 427: pic_to_led(3,1);
  3925  0003A8  0E01               	movlw	1
  3926  0003AA  6E54               	movwf	pic_to_led@pic,c
  3927  0003AC  0E03               	movlw	3
  3928  0003AE  EC95  F008         	call	_pic_to_led
  3929                           
  3930                           ;common.c: 428: putchar_down(13,(temperature/100) % 10 + 48);
  3931  0003B2  6A52               	clrf	___lwdiv@divisor+1,c
  3932  0003B4  0E64               	movlw	100
  3933  0003B6  D88B               	call	PL42	;call to abstracted procedure
  3934  0003B8  EC4D  F009         	call	___lwdiv	;wreg free
  3935  0003BC  D880               	call	PL32	;call to abstracted procedure
  3936  0003BE  ECD7  F009         	call	___lwmod	;wreg free
  3937  0003C2  5056               	movf	?___lwmod,w,c
  3938  0003C4  D897               	call	PL120	;call to abstracted procedure
  3939  0003C6  ECE5  F006         	call	_putchar_down
  3940                           
  3941                           ;common.c: 429: putchar_down(19,(temperature/10) % 10 + 48);
  3942  0003CA  6A52               	clrf	___lwdiv@divisor+1,c
  3943  0003CC  0E0A               	movlw	10
  3944  0003CE  D87F               	call	PL42	;call to abstracted procedure
  3945  0003D0  EC4D  F009         	call	___lwdiv	;wreg free
  3946  0003D4  D874               	call	PL32	;call to abstracted procedure
  3947  0003D6  ECD7  F009         	call	___lwmod	;wreg free
  3948  0003DA  5056               	movf	?___lwmod,w,c
  3949  0003DC  D888               	call	PL108	;call to abstracted procedure
  3950  0003DE  ECE5  F006         	call	_putchar_down
  3951                           
  3952                           ;common.c: 430: putchar_down(25,176);
  3953  0003E2  0EB0               	movlw	176
  3954  0003E4  6E5B               	movwf	putchar_down@symbol,c
  3955  0003E6  0E19               	movlw	25
  3956  0003E8  ECE5  F006         	call	_putchar_down
  3957                           
  3958                           ;common.c: 431: events = 6;
  3959  0003EC  0E06               	movlw	6
  3960  0003EE  6E70               	movwf	_events,c
  3961                           
  3962                           ;common.c: 432: RTOS_SetTask(default_state, 750, 0);
  3963  0003F0  0EDA               	movlw	low _default_state
  3964  0003F2  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  3965  0003F4  0E18               	movlw	high _default_state
  3966  0003F6  6E50               	movwf	RTOS_SetTask@taskFunc+1,c
  3967  0003F8  0E02               	movlw	2
  3968  0003FA  6E52               	movwf	RTOS_SetTask@taskDelay+1,c
  3969  0003FC  0EEE               	movlw	238
  3970  0003FE  6E51               	movwf	RTOS_SetTask@taskDelay,c
  3971  000400  6A54               	clrf	RTOS_SetTask@taskPeriod+1,c
  3972  000402  6A53               	clrf	RTOS_SetTask@taskPeriod,c
  3973  000404  EF2F  F007         	goto	_RTOS_SetTask	;wreg free
  3974  000408                     l3900:
  3975                           
  3976                           ;common.c: 438: events = 5;
  3977  000408  0E05               	movlw	5
  3978  00040A  6E70               	movwf	_events,c
  3979                           
  3980                           ;common.c: 439: scroll_left();
  3981  00040C  ECFA  F008         	call	_scroll_left	;wreg free
  3982                           
  3983                           ;common.c: 440: putchar_down(0, (TTime.Thr/10) % 10 + 48);
  3984  000410  D869               	call	PL76	;call to abstracted procedure
  3985  000412  EC87  F00A         	call	___lbdiv
  3986  000416  EC62  F00B         	call	___lbmod
  3987  00041A  0F30               	addlw	48
  3988  00041C  6E5B               	movwf	putchar_down@symbol,c
  3989  00041E  0E00               	movlw	0
  3990  000420  ECE5  F006         	call	_putchar_down
  3991                           
  3992                           ;common.c: 441: putchar_down(6, TTime.Thr % 10 + 48);
  3993  000424  0E0A               	movlw	10
  3994  000426  6E53               	movwf	___lbmod@divisor,c
  3995  000428  5038               	movf	_TTime+2,w,c
  3996  00042A  EC62  F00B         	call	___lbmod
  3997  00042E  0F30               	addlw	48
  3998  000430  6E5B               	movwf	putchar_down@symbol,c
  3999  000432  0E06               	movlw	6
  4000  000434  ECE5  F006         	call	_putchar_down
  4001                           
  4002                           ;common.c: 442: putchar_down(13, (TTime.Tmin/10) % 10 + 48);
  4003  000438  0E0A               	movlw	10
  4004  00043A  6E53               	movwf	___lbmod@divisor,c
  4005  00043C  6E4F               	movwf	___lbdiv@divisor,c
  4006  00043E  5037               	movf	_TTime+1,w,c
  4007  000440  EC87  F00A         	call	___lbdiv
  4008  000444  EC62  F00B         	call	___lbmod
  4009  000448  D855               	call	PL120	;call to abstracted procedure
  4010  00044A  ECE5  F006         	call	_putchar_down
  4011                           
  4012                           ;common.c: 443: putchar_down(19, TTime.Tmin % 10 + 48);
  4013  00044E  0E0A               	movlw	10
  4014  000450  6E53               	movwf	___lbmod@divisor,c
  4015  000452  5037               	movf	_TTime+1,w,c
  4016  000454  EC62  F00B         	call	___lbmod
  4017  000458  D84A               	call	PL108	;call to abstracted procedure
  4018  00045A  ECE5  F006         	call	_putchar_down
  4019                           
  4020                           ;common.c: 444: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  4021  00045E  EC20  F00B         	call	PL36	;call to abstracted procedure
  4022  000462  ECCA  F008         	call	_getTime	;wreg free
  4023                           
  4024                           ;common.c: 445: putchar_down_s(25, (TTime.Ts/10) % 10 + 1);
  4025  000466  D839               	call	PL74	;call to abstracted procedure
  4026  000468  EC87  F00A         	call	___lbdiv
  4027  00046C  EC62  F00B         	call	___lbmod
  4028  000470  6E65               	movwf	??_home_temp& (0+255),c
  4029  000472  2865               	incf	??_home_temp,w,c
  4030  000474  6E57               	movwf	putchar_down_s@symbol,c
  4031  000476  0E19               	movlw	25
  4032  000478  EC9B  F006         	call	_putchar_down_s
  4033                           
  4034                           ;common.c: 446: putchar_down_s(29, TTime.Ts % 10 + 1);
  4035  00047C  0E0A               	movlw	10
  4036  00047E  6E53               	movwf	___lbmod@divisor,c
  4037  000480  5036               	movf	_TTime,w,c
  4038  000482  EC62  F00B         	call	___lbmod
  4039  000486  6E65               	movwf	??_home_temp& (0+255),c
  4040  000488  2865               	incf	??_home_temp,w,c
  4041  00048A  6E57               	movwf	putchar_down_s@symbol,c
  4042  00048C  0E1D               	movlw	29
  4043  00048E  EC9B  F006         	call	_putchar_down_s
  4044                           
  4045                           ;common.c: 447: RTOS_DeleteTask(default_state);
  4046  000492  ECB3  F001         	call	PL28	;call to abstracted procedure
  4047  000496  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4048                           
  4049                           ;common.c: 448: RTOS_DeleteTask(home_temp);
  4050  00049A  0E8C               	movlw	low _home_temp
  4051  00049C  6E4F               	movwf	RTOS_DeleteTask@taskFunc,c
  4052  00049E  0E03               	movlw	high _home_temp
  4053  0004A0  6E50               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4054  0004A2  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4055                           
  4056                           ;common.c: 449: RTOS_SetTask(time_led,0,20);
  4057  0004A6  ECA9  F001         	call	PL10	;call to abstracted procedure
  4058  0004AA  EF2F  F007         	goto	_RTOS_SetTask	;wreg free
  4059  0004AE                     l3926:
  4060  0004AE  5070               	movf	_events,w,c
  4061                           
  4062                           ; Switch size 1, requested type "space"
  4063                           ; Number of cases is 3, Range of values is 4 to 6
  4064                           ; switch strategies available:
  4065                           ; Name         Instructions Cycles
  4066                           ; simple_byte           10     6 (average)
  4067                           ;	Chosen strategy is simple_byte
  4068  0004B0  0A04               	xorlw	4	; case 4
  4069  0004B2  E0AA               	bz	l3900
  4070  0004B4  0A01               	xorlw	1	; case 5
  4071  0004B6  E101 D76A          	bz	l3884
  4072  0004BA  0A03               	xorlw	3	; case 6
  4073  0004BC  0012               	return	
  4074  0004BE                     __end_of_home_temp:
  4075                           	opt stack 0
  4076  0004BE                     PL32:
  4077                           	opt stack 22
  4078  0004BE  C04F  F056         	movff	?___lwdiv,___lwmod@dividend
  4079  0004C2  C050  F057         	movff	?___lwdiv+1,___lwmod@dividend+1
  4080  0004C6  6A59               	clrf	___lwmod@divisor+1,c
  4081  0004C8  0E0A               	movlw	10
  4082  0004CA  6E58               	movwf	___lwmod@divisor,c
  4083  0004CC  0C0A               	retlw	10
  4084  0004CE                     __end_ofPL32:
  4085                           	opt stack 0
  4086  0004CE                     PL42:
  4087                           	opt stack 22
  4088  0004CE  6E51               	movwf	___lwdiv@divisor,c
  4089  0004D0  C03D  F04F         	movff	_temperature,___lwdiv@dividend
  4090  0004D4  C03E  F050         	movff	_temperature+1,___lwdiv@dividend+1
  4091  0004D8  0012               	return	
  4092  0004DA                     __end_ofPL42:
  4093                           	opt stack 0
  4094  0004DA                     PL74:
  4095                           	opt stack 24
  4096  0004DA  0E0A               	movlw	10
  4097  0004DC  6E53               	movwf	___lbmod@divisor,c
  4098  0004DE  6E4F               	movwf	___lbdiv@divisor,c
  4099  0004E0  5036               	movf	_TTime,w,c
  4100  0004E2  0012               	return	
  4101  0004E4                     __end_ofPL74:
  4102                           	opt stack 0
  4103  0004E4                     PL76:
  4104                           	opt stack 24
  4105  0004E4  0E0A               	movlw	10
  4106  0004E6  6E53               	movwf	___lbmod@divisor,c
  4107  0004E8  6E4F               	movwf	___lbdiv@divisor,c
  4108  0004EA  5038               	movf	_TTime+2,w,c
  4109  0004EC  0012               	return	
  4110  0004EE                     __end_ofPL76:
  4111                           	opt stack 0
  4112  0004EE                     PL108:
  4113                           	opt stack 22
  4114  0004EE  0F30               	addlw	48
  4115  0004F0  6E5B               	movwf	putchar_down@symbol,c
  4116  0004F2  0C13               	retlw	19
  4117  0004F4                     __end_ofPL108:
  4118                           	opt stack 0
  4119  0004F4                     PL120:
  4120                           	opt stack 22
  4121  0004F4  0F30               	addlw	48
  4122  0004F6  6E5B               	movwf	putchar_down@symbol,c
  4123  0004F8  0C0D               	retlw	13
  4124  0004FA                     __end_ofPL120:
  4125                           	opt stack 0
  4126                           tosu	equ	0xFFF
  4127                           tosh	equ	0xFFE
  4128                           tosl	equ	0xFFD
  4129                           pclath	equ	0xFFA
  4130                           tblptru	equ	0xFF8
  4131                           tblptrh	equ	0xFF7
  4132                           tblptrl	equ	0xFF6
  4133                           tablat	equ	0xFF5
  4134                           prodh	equ	0xFF4
  4135                           prodl	equ	0xFF3
  4136                           intcon	equ	0xFF2
  4137                           intcon2	equ	0xFF1
  4138                           postinc0	equ	0xFEE
  4139                           wreg	equ	0xFE8
  4140                           indf1	equ	0xFE7
  4141                           plusw1	equ	0xFE3
  4142                           fsr1h	equ	0xFE2
  4143                           fsr1l	equ	0xFE1
  4144                           indf2	equ	0xFDF
  4145                           postinc2	equ	0xFDE
  4146                           postdec2	equ	0xFDD
  4147                           plusw2	equ	0xFDB
  4148                           fsr2h	equ	0xFDA
  4149                           fsr2l	equ	0xFD9
  4150                           status	equ	0xFD8
  4151                           
  4152 ;; *************** function _time_set_min *****************
  4153 ;; Defined at:
  4154 ;;		line 24 in file "common.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;Total ram usage:        0 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    5
  4175 ;; This function calls:
  4176 ;;		_RTOS_DeleteTask
  4177 ;;		_RTOS_SetTask
  4178 ;;		_Update_Matrix
  4179 ;;		___lbdiv
  4180 ;;		___lbmod
  4181 ;;		_putchar_b_buf
  4182 ;; This function is called by:
  4183 ;;		_time_led
  4184 ;;		_RTOS_DispatchTask
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text15
  4189  000B14                     __ptext15:
  4190                           	opt stack 0
  4191  000B14                     _time_set_min:
  4192                           	opt stack 24
  4193                           
  4194                           ;common.c: 26: show_digit = ~show_digit;
  4195                           
  4196                           ;incstack = 0
  4197  000B14  B26F               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  4198  000B16  D002               	goto	u2030
  4199  000B18  826F               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  4200  000B1A  D02C               	goto	l3560
  4201  000B1C                     u2030:
  4202  000B1C  926F               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  4203                           
  4204                           ;common.c: 27: switch (events)
  4205  000B1E  D02A               	goto	l3560
  4206  000B20                     l3524:
  4207                           
  4208                           ;common.c: 34: RTOS_DeleteTask(time_set_min);
  4209  000B20  D856               	call	PL58	;call to abstracted procedure
  4210  000B22  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4211                           
  4212                           ;common.c: 35: RTOS_SetTask(time_set_hr, 0, 50);
  4213  000B26  0EFA               	movlw	low _time_set_hr
  4214  000B28  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  4215  000B2A  0E04               	movlw	high _time_set_hr
  4216  000B2C  6E50               	movwf	RTOS_SetTask@taskFunc+1,c
  4217  000B2E  EC3D  F006         	call	PL48	;call to abstracted procedure
  4218  000B32  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4219  000B36                     l3528:
  4220                           
  4221                           ;common.c: 36: RTOS_SetTask(default_state, 2000, 0);
  4222  000B36  EC87  F003         	call	PL2	;call to abstracted procedure
  4223  000B3A  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4224  000B3E                     l3530:
  4225                           
  4226                           ;common.c: 37: events = 5;
  4227  000B3E  0E05               	movlw	5
  4228  000B40  6E70               	movwf	_events,c
  4229                           
  4230                           ;common.c: 38: break;
  4231  000B42  D022               	goto	l601
  4232  000B44                     l3532:
  4233                           
  4234                           ;common.c: 40: RTOS_DeleteTask(time_set_min);
  4235  000B44  D844               	call	PL58	;call to abstracted procedure
  4236  000B46  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4237                           
  4238                           ;common.c: 41: RTOS_DeleteTask(default_state);
  4239  000B4A  ECB3  F001         	call	PL28	;call to abstracted procedure
  4240  000B4E  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4241                           
  4242                           ;common.c: 42: RTOS_SetTask(time_led, 0, 20);
  4243  000B52  ECA9  F001         	call	PL10	;call to abstracted procedure
  4244  000B56  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4245  000B5A  D7F1               	goto	l3530
  4246  000B5C                     l3538:
  4247                           
  4248                           ;common.c: 46: TSTime.Tmin++;
  4249  000B5C  2A0B               	incf	_TSTime+1,f,c
  4250                           
  4251                           ;common.c: 47: if(TSTime.Tmin > 59) TSTime.Tmin = 0;
  4252  000B5E  0E3B               	movlw	59
  4253  000B60  640B               	cpfsgt	_TSTime+1,c
  4254  000B62  D7E9               	goto	l3528
  4255  000B64  6A0B               	clrf	_TSTime+1,c
  4256  000B66  D7E7               	goto	l3528
  4257  000B68                     l3548:
  4258                           
  4259                           ;common.c: 52: TSTime.Tmin--;
  4260  000B68  060B               	decf	_TSTime+1,f,c
  4261                           
  4262                           ;common.c: 53: if(TSTime.Tmin == 255) TSTime.Tmin = 59;
  4263  000B6A  280B               	incf	_TSTime+1,w,c
  4264  000B6C  E1E4               	bnz	l3528
  4265  000B6E  0E3B               	movlw	59
  4266  000B70  6E0B               	movwf	_TSTime+1,c
  4267  000B72  D7E1               	goto	l3528
  4268  000B74                     l3560:
  4269  000B74  5070               	movf	_events,w,c
  4270                           
  4271                           ; Switch size 1, requested type "space"
  4272                           ; Number of cases is 5, Range of values is 1 to 5
  4273                           ; switch strategies available:
  4274                           ; Name         Instructions Cycles
  4275                           ; simple_byte           16     9 (average)
  4276                           ;	Chosen strategy is simple_byte
  4277  000B76  0A01               	xorlw	1	; case 1
  4278  000B78  E0D3               	bz	l3524
  4279  000B7A  0A03               	xorlw	3	; case 2
  4280  000B7C  E0EF               	bz	l3538
  4281  000B7E  0A01               	xorlw	1	; case 3
  4282  000B80  E0F3               	bz	l3548
  4283  000B82  0A07               	xorlw	7	; case 4
  4284  000B84  E0DF               	bz	l3532
  4285  000B86  0A01               	xorlw	1	; case 5
  4286  000B88                     l601:
  4287                           
  4288                           ;common.c: 59: if(show_digit)
  4289  000B88  A26F               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  4290  000B8A  D013               	goto	l3564
  4291                           
  4292                           ;common.c: 60: {
  4293                           ;common.c: 61: putchar_b_buf(13,(TSTime.Tmin/10) % 10 + 48);
  4294  000B8C  EC08  F003         	call	PL54	;call to abstracted procedure
  4295  000B90  EC87  F00A         	call	___lbdiv
  4296  000B94  EC62  F00B         	call	___lbmod
  4297  000B98  EC12  F003         	call	PL102	;call to abstracted procedure
  4298  000B9C  EC60  F008         	call	_putchar_b_buf
  4299                           
  4300                           ;common.c: 62: putchar_b_buf(19,TSTime.Tmin % 10 + 48);
  4301  000BA0  EC18  F003         	call	PL124	;call to abstracted procedure
  4302  000BA4  EC62  F00B         	call	___lbmod
  4303  000BA8  EC15  F003         	call	PL118	;call to abstracted procedure
  4304  000BAC  EC60  F008         	call	_putchar_b_buf
  4305                           
  4306                           ;common.c: 63: }
  4307  000BB0  D008               	goto	l3566
  4308  000BB2                     l3564:
  4309                           
  4310                           ;common.c: 64: else
  4311                           ;common.c: 65: {
  4312                           ;common.c: 66: putchar_b_buf(13,0);
  4313  000BB2  6A57               	clrf	putchar_b_buf@symbol,c
  4314  000BB4  0E0D               	movlw	13
  4315  000BB6  EC60  F008         	call	_putchar_b_buf
  4316                           
  4317                           ;common.c: 67: putchar_b_buf(19,0);
  4318  000BBA  6A57               	clrf	putchar_b_buf@symbol,c
  4319  000BBC  0E13               	movlw	19
  4320  000BBE  EC60  F008         	call	_putchar_b_buf
  4321  000BC2                     l3566:
  4322                           
  4323                           ;common.c: 68: }
  4324                           ;common.c: 69: Update_Matrix(Dis_Buff);
  4325  000BC2  0E16               	movlw	low _Dis_Buff
  4326  000BC4  6E51               	movwf	Update_Matrix@buf,c
  4327  000BC6  EC14  F00A         	call	_Update_Matrix	;wreg free
  4328                           
  4329                           ;common.c: 70: en_put = 1;
  4330  000BCA  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  4331  000BCC  0012               	return		;funcret
  4332  000BCE                     __end_of_time_set_min:
  4333                           	opt stack 0
  4334  000BCE                     PL58:
  4335                           	opt stack 24
  4336  000BCE  0E14               	movlw	low _time_set_min
  4337  000BD0  6E4F               	movwf	RTOS_DeleteTask@taskFunc,c
  4338  000BD2  0E0B               	movlw	high _time_set_min
  4339  000BD4  6E50               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4340  000BD6  0012               	return	
  4341  000BD8                     __end_ofPL58:
  4342                           	opt stack 0
  4343                           tosu	equ	0xFFF
  4344                           tosh	equ	0xFFE
  4345                           tosl	equ	0xFFD
  4346                           pclath	equ	0xFFA
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           intcon	equ	0xFF2
  4354                           intcon2	equ	0xFF1
  4355                           postinc0	equ	0xFEE
  4356                           wreg	equ	0xFE8
  4357                           indf1	equ	0xFE7
  4358                           plusw1	equ	0xFE3
  4359                           fsr1h	equ	0xFE2
  4360                           fsr1l	equ	0xFE1
  4361                           indf2	equ	0xFDF
  4362                           postinc2	equ	0xFDE
  4363                           postdec2	equ	0xFDD
  4364                           plusw2	equ	0xFDB
  4365                           fsr2h	equ	0xFDA
  4366                           fsr2l	equ	0xFD9
  4367                           status	equ	0xFD8
  4368                           
  4369 ;; *************** function _GetTime *****************
  4370 ;; Defined at:
  4371 ;;		line 15 in file "common.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;		None
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      void 
  4378 ;; Registers used:
  4379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;Total ram usage:        0 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    7
  4392 ;; This function calls:
  4393 ;;		_getDate
  4394 ;;		_getTime
  4395 ;; This function is called by:
  4396 ;;		_INT0_ISR
  4397 ;;		_RTOS_DispatchTask
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           	psect	text16
  4402  001626                     __ptext16:
  4403                           	opt stack 0
  4404  001626                     _GetTime:
  4405                           	opt stack 0
  4406                           
  4407                           ;common.c: 17: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  4408                           
  4409                           ;incstack = 0
  4410  001626  D80C               	call	PL36	;call to abstracted procedure
  4411  001628  ECCA  F008         	call	_getTime	;wreg free
  4412                           
  4413                           ;common.c: 18: getDate(&TTime.Tdy,&TTime.Tdt,&TTime.Tmt,&TTime.Tyr);
  4414  00162C  0E39               	movlw	low (_TTime+3)
  4415  00162E  6E54               	movwf	getDate@p4,c
  4416  001630  0E3A               	movlw	low (_TTime+4)
  4417  001632  6E55               	movwf	getDate@p3,c
  4418  001634  0E3B               	movlw	low (_TTime+5)
  4419  001636  6E56               	movwf	getDate@p2,c
  4420  001638  0E3C               	movlw	low (_TTime+6)
  4421  00163A  6E57               	movwf	getDate@p1,c
  4422  00163C  EF72  F007         	goto	_getDate	;wreg free
  4423  001640                     __end_of_GetTime:
  4424                           	opt stack 0
  4425  001640                     PL36:
  4426                           	opt stack 22
  4427  001640  0E38               	movlw	low (_TTime+2)
  4428  001642  6E54               	movwf	getTime@p3,c
  4429  001644  0E37               	movlw	low (_TTime+1)
  4430  001646  6E55               	movwf	getTime@p2,c
  4431  001648  0E36               	movlw	low _TTime
  4432  00164A  6E56               	movwf	getTime@p1,c
  4433  00164C  0012               	return	
  4434  00164E                     __end_ofPL36:
  4435                           	opt stack 0
  4436                           tosu	equ	0xFFF
  4437                           tosh	equ	0xFFE
  4438                           tosl	equ	0xFFD
  4439                           pclath	equ	0xFFA
  4440                           tblptru	equ	0xFF8
  4441                           tblptrh	equ	0xFF7
  4442                           tblptrl	equ	0xFF6
  4443                           tablat	equ	0xFF5
  4444                           prodh	equ	0xFF4
  4445                           prodl	equ	0xFF3
  4446                           intcon	equ	0xFF2
  4447                           intcon2	equ	0xFF1
  4448                           postinc0	equ	0xFEE
  4449                           wreg	equ	0xFE8
  4450                           indf1	equ	0xFE7
  4451                           plusw1	equ	0xFE3
  4452                           fsr1h	equ	0xFE2
  4453                           fsr1l	equ	0xFE1
  4454                           indf2	equ	0xFDF
  4455                           postinc2	equ	0xFDE
  4456                           postdec2	equ	0xFDD
  4457                           plusw2	equ	0xFDB
  4458                           fsr2h	equ	0xFDA
  4459                           fsr2l	equ	0xFD9
  4460                           status	equ	0xFD8
  4461                           
  4462 ;; *************** function _time_set_dy *****************
  4463 ;; Defined at:
  4464 ;;		line 339 in file "common.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  1    wreg      void 
  4471 ;; Registers used:
  4472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;Total ram usage:        0 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    7
  4485 ;; This function calls:
  4486 ;;		_RTOS_DeleteTask
  4487 ;;		_RTOS_SetTask
  4488 ;;		_Update_Matrix
  4489 ;;		_putchar_b_buf
  4490 ;;		_setDate
  4491 ;; This function is called by:
  4492 ;;		_time_set_dt
  4493 ;;		_RTOS_DispatchTask
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text17
  4498  0001FC                     __ptext17:
  4499                           	opt stack 0
  4500  0001FC                     _time_set_dy:
  4501                           	opt stack 22
  4502                           
  4503                           ;common.c: 341: switch (events)
  4504                           
  4505                           ;incstack = 0
  4506  0001FC  D033               	goto	l3856
  4507  0001FE                     l3814:
  4508                           
  4509                           ;common.c: 347: RTOS_DeleteTask(time_set_dy);
  4510  0001FE  D8BE               	call	PL94	;call to abstracted procedure
  4511  000200  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4512                           
  4513                           ;common.c: 348: RTOS_SetTask(time_led, 0, 20);
  4514  000204  D8A6               	call	PL10	;call to abstracted procedure
  4515  000206  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4516                           
  4517                           ;common.c: 349: RTOS_DeleteTask(default_state);
  4518  00020A  D8AD               	call	PL28	;call to abstracted procedure
  4519  00020C  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4520                           
  4521                           ;common.c: 350: events = 5;
  4522                           
  4523                           ;common.c: 351: en_put=1;
  4524  000210  EC97  F003         	call	PL96	;call to abstracted procedure
  4525                           
  4526                           ;common.c: 352: break;
  4527  000214  D031               	goto	l683
  4528  000216                     l3824:
  4529                           
  4530                           ;common.c: 354: RTOS_DeleteTask(time_set_dy);
  4531  000216  D8B2               	call	PL94	;call to abstracted procedure
  4532  000218  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4533                           
  4534                           ;common.c: 355: RTOS_DeleteTask(default_state);
  4535  00021C  D8A4               	call	PL28	;call to abstracted procedure
  4536  00021E  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4537                           
  4538                           ;common.c: 356: RTOS_SetTask(time_led, 0, 20);
  4539  000222  D897               	call	PL10	;call to abstracted procedure
  4540  000224  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4541                           
  4542                           ;common.c: 357: events = 5;
  4543  000228  0E05               	movlw	5
  4544  00022A  6E70               	movwf	_events,c
  4545                           
  4546                           ;common.c: 358: break;
  4547  00022C  D025               	goto	l683
  4548  00022E                     l3830:
  4549                           
  4550                           ;common.c: 360: TSTime.Tdy++;
  4551  00022E  2A0D               	incf	_TSTime+3,f,c
  4552                           
  4553                           ;common.c: 361: if(TSTime.Tdy > 7) TSTime.Tdy = 1;
  4554  000230  0E07               	movlw	7
  4555  000232  640D               	cpfsgt	_TSTime+3,c
  4556  000234  D002               	goto	l3836
  4557  000236  0E01               	movlw	1
  4558  000238  6E0D               	movwf	_TSTime+3,c
  4559  00023A                     l3836:
  4560                           
  4561                           ;common.c: 362: RTOS_SetTask(default_state, 2000, 0);
  4562  00023A  EC87  F003         	call	PL2	;call to abstracted procedure
  4563  00023E  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4564                           
  4565                           ;common.c: 363: events = 5;
  4566                           
  4567                           ;common.c: 364: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4568  000242  D87D               	call	PL8	;call to abstracted procedure
  4569  000244  EC32  F00A         	call	_setDate
  4570                           
  4571                           ;common.c: 365: break;
  4572  000248  D017               	goto	l683
  4573  00024A                     l3842:
  4574                           
  4575                           ;common.c: 367: TSTime.Tdy--;
  4576  00024A  060D               	decf	_TSTime+3,f,c
  4577                           
  4578                           ;common.c: 368: if(TSTime.Tdy == 0) TSTime.Tdy = 7;
  4579  00024C  500D               	movf	_TSTime+3,w,c
  4580  00024E  E102               	bnz	l3848
  4581  000250  0E07               	movlw	7
  4582  000252  6E0D               	movwf	_TSTime+3,c
  4583  000254                     l3848:
  4584                           
  4585                           ;common.c: 369: RTOS_SetTask(default_state, 2000, 0);
  4586  000254  EC87  F003         	call	PL2	;call to abstracted procedure
  4587  000258  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4588                           
  4589                           ;common.c: 370: events = 5;
  4590                           
  4591                           ;common.c: 371: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4592  00025C  D870               	call	PL8	;call to abstracted procedure
  4593  00025E  EC32  F00A         	call	_setDate
  4594                           
  4595                           ;common.c: 372: break;
  4596  000262  D00A               	goto	l683
  4597  000264                     l3856:
  4598  000264  5070               	movf	_events,w,c
  4599                           
  4600                           ; Switch size 1, requested type "space"
  4601                           ; Number of cases is 5, Range of values is 1 to 5
  4602                           ; switch strategies available:
  4603                           ; Name         Instructions Cycles
  4604                           ; simple_byte           16     9 (average)
  4605                           ;	Chosen strategy is simple_byte
  4606  000266  0A01               	xorlw	1	; case 1
  4607  000268  E0CA               	bz	l3814
  4608  00026A  0A03               	xorlw	3	; case 2
  4609  00026C  E0E0               	bz	l3830
  4610  00026E  0A01               	xorlw	1	; case 3
  4611  000270  E0EC               	bz	l3842
  4612  000272  0A07               	xorlw	7	; case 4
  4613  000274  E0D0               	bz	l3824
  4614  000276  0A01               	xorlw	1	; case 5
  4615  000278                     l683:
  4616                           
  4617                           ;common.c: 374: if(en_put)
  4618  000278  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  4619  00027A  D05B               	goto	l3878
  4620                           
  4621                           ;common.c: 375: {
  4622                           ;common.c: 376: putchar_b_buf(0,'Ä');
  4623  00027C  0EC4               	movlw	196
  4624  00027E  6E57               	movwf	putchar_b_buf@symbol,c
  4625  000280  0E00               	movlw	0
  4626  000282  EC60  F008         	call	_putchar_b_buf
  4627                           
  4628                           ;common.c: 377: putchar_b_buf(6,'í');
  4629  000286  0EED               	movlw	237
  4630  000288  6E57               	movwf	putchar_b_buf@symbol,c
  4631  00028A  0E06               	movlw	6
  4632  00028C  EC60  F008         	call	_putchar_b_buf
  4633                           
  4634                           ;common.c: 378: putchar_b_buf(12,':');
  4635  000290  D872               	call	PL92	;call to abstracted procedure
  4636  000292  EC60  F008         	call	_putchar_b_buf
  4637                           
  4638                           ;common.c: 379: switch(TSTime.Tdy)
  4639  000296  D03E               	goto	l3876
  4640  000298                     l3860:
  4641                           
  4642                           ;common.c: 382: putchar_b_buf(18,'Ï');
  4643  000298  D876               	call	PL104	;call to abstracted procedure
  4644  00029A  EC60  F008         	call	_putchar_b_buf
  4645                           
  4646                           ;common.c: 383: putchar_b_buf(24,'í');
  4647  00029E  0EED               	movlw	237
  4648  0002A0  6E57               	movwf	putchar_b_buf@symbol,c
  4649  0002A2  0E18               	movlw	24
  4650  0002A4  EC60  F008         	call	_putchar_b_buf
  4651                           
  4652                           ;common.c: 384: break;
  4653  0002A8  D044               	goto	l3878
  4654  0002AA                     l3862:
  4655                           
  4656                           ;common.c: 386: putchar_b_buf(18,'Â');
  4657  0002AA  ECF8  F000         	call	PL112	;call to abstracted procedure
  4658  0002AE  EC60  F008         	call	_putchar_b_buf
  4659                           
  4660                           ;common.c: 387: putchar_b_buf(24,'ò');
  4661  0002B2  D85E               	call	PL50	;call to abstracted procedure
  4662  0002B4  EC60  F008         	call	_putchar_b_buf
  4663                           
  4664                           ;common.c: 388: break;
  4665  0002B8  D03C               	goto	l3878
  4666  0002BA                     l3864:
  4667                           
  4668                           ;common.c: 390: putchar_b_buf(18,'Ñ');
  4669  0002BA  ECE7  F000         	call	PL72	;call to abstracted procedure
  4670  0002BE  EC60  F008         	call	_putchar_b_buf
  4671                           
  4672                           ;common.c: 391: putchar_b_buf(24,'ð');
  4673  0002C2  ECE4  F000         	call	PL44	;call to abstracted procedure
  4674  0002C6  EC60  F008         	call	_putchar_b_buf
  4675                           
  4676                           ;common.c: 392: break;
  4677  0002CA  D033               	goto	l3878
  4678  0002CC                     l3866:
  4679                           
  4680                           ;common.c: 394: putchar_b_buf(18,'×');
  4681  0002CC  ECFB  F000         	call	PL114	;call to abstracted procedure
  4682  0002D0  EC60  F008         	call	_putchar_b_buf
  4683                           
  4684                           ;common.c: 395: putchar_b_buf(24,'ò');
  4685  0002D4  D84D               	call	PL50	;call to abstracted procedure
  4686  0002D6  EC60  F008         	call	_putchar_b_buf
  4687                           
  4688                           ;common.c: 396: break;
  4689  0002DA  D02B               	goto	l3878
  4690  0002DC                     l3868:
  4691                           
  4692                           ;common.c: 398: putchar_b_buf(18,'Ï');
  4693  0002DC  D854               	call	PL104	;call to abstracted procedure
  4694  0002DE  EC60  F008         	call	_putchar_b_buf
  4695                           
  4696                           ;common.c: 399: putchar_b_buf(24,'ò');
  4697  0002E2  D846               	call	PL50	;call to abstracted procedure
  4698  0002E4  EC60  F008         	call	_putchar_b_buf
  4699                           
  4700                           ;common.c: 400: break;
  4701  0002E8  D024               	goto	l3878
  4702  0002EA                     l3870:
  4703                           
  4704                           ;common.c: 402: putchar_b_buf(18,'Ñ');
  4705  0002EA  ECE7  F000         	call	PL72	;call to abstracted procedure
  4706  0002EE  EC60  F008         	call	_putchar_b_buf
  4707                           
  4708                           ;common.c: 403: putchar_b_buf(24,'á');
  4709  0002F2  0EE1               	movlw	225
  4710  0002F4  6E57               	movwf	putchar_b_buf@symbol,c
  4711  0002F6  0E18               	movlw	24
  4712  0002F8  EC60  F008         	call	_putchar_b_buf
  4713                           
  4714                           ;common.c: 404: break;
  4715  0002FC  D01A               	goto	l3878
  4716  0002FE                     l3872:
  4717                           
  4718                           ;common.c: 406: putchar_b_buf(18,'Í');
  4719  0002FE  0ECD               	movlw	205
  4720  000300  6E57               	movwf	putchar_b_buf@symbol,c
  4721  000302  0E12               	movlw	18
  4722  000304  EC60  F008         	call	_putchar_b_buf
  4723                           
  4724                           ;common.c: 407: putchar_b_buf(24,'ä');
  4725  000308  0EE4               	movlw	228
  4726  00030A  6E57               	movwf	putchar_b_buf@symbol,c
  4727  00030C  0E18               	movlw	24
  4728  00030E  EC60  F008         	call	_putchar_b_buf
  4729                           
  4730                           ;common.c: 408: break;
  4731  000312  D00F               	goto	l3878
  4732  000314                     l3876:
  4733  000314  500D               	movf	_TSTime+3,w,c
  4734                           
  4735                           ; Switch size 1, requested type "space"
  4736                           ; Number of cases is 7, Range of values is 1 to 7
  4737                           ; switch strategies available:
  4738                           ; Name         Instructions Cycles
  4739                           ; simple_byte           22    12 (average)
  4740                           ;	Chosen strategy is simple_byte
  4741  000316  0A01               	xorlw	1	; case 1
  4742  000318  E0F2               	bz	l3872
  4743  00031A  0A03               	xorlw	3	; case 2
  4744  00031C  E0BD               	bz	l3860
  4745  00031E  0A01               	xorlw	1	; case 3
  4746  000320  E0C4               	bz	l3862
  4747  000322  0A07               	xorlw	7	; case 4
  4748  000324  E0CA               	bz	l3864
  4749  000326  0A01               	xorlw	1	; case 5
  4750  000328  E0D1               	bz	l3866
  4751  00032A  0A03               	xorlw	3	; case 6
  4752  00032C  E0D7               	bz	l3868
  4753  00032E  0A01               	xorlw	1	; case 7
  4754  000330  E0DC               	bz	l3870
  4755  000332                     l3878:
  4756                           
  4757                           ;common.c: 410: }
  4758                           ;common.c: 411: Update_Matrix(Dis_Buff);
  4759  000332  0E16               	movlw	low _Dis_Buff
  4760  000334  6E51               	movwf	Update_Matrix@buf,c
  4761  000336  EC14  F00A         	call	_Update_Matrix	;wreg free
  4762                           
  4763                           ;common.c: 412: en_put=1;
  4764  00033A  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  4765  00033C  0012               	return		;funcret
  4766  00033E                     __end_of_time_set_dy:
  4767                           	opt stack 0
  4768  00033E                     PL8:
  4769                           	opt stack 22
  4770  00033E  0E05               	movlw	5
  4771  000340  6E70               	movwf	_events,c
  4772  000342  C00E  F05C         	movff	_TSTime+4,setDate@dateSet
  4773  000346  C00F  F05D         	movff	_TSTime+5,setDate@monthSet
  4774  00034A  C010  F05E         	movff	_TSTime+6,setDate@yearSet
  4775  00034E  500D               	movf	_TSTime+3,w,c
  4776  000350  0012               	return	
  4777  000352                     __end_ofPL8:
  4778                           	opt stack 0
  4779  000352                     PL10:
  4780                           	opt stack 22
  4781  000352  0ED8               	movlw	low _time_led
  4782  000354  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  4783  000356  0E0B               	movlw	high _time_led
  4784  000358  6E50               	movwf	RTOS_SetTask@taskFunc+1,c
  4785  00035A  6A52               	clrf	RTOS_SetTask@taskDelay+1,c
  4786  00035C  6A51               	clrf	RTOS_SetTask@taskDelay,c
  4787  00035E  6A54               	clrf	RTOS_SetTask@taskPeriod+1,c
  4788  000360  0E14               	movlw	20
  4789  000362  6E53               	movwf	RTOS_SetTask@taskPeriod,c
  4790  000364  0C14               	retlw	20
  4791  000366                     __end_ofPL10:
  4792                           	opt stack 0
  4793  000366                     PL28:
  4794                           	opt stack 23
  4795  000366  0EDA               	movlw	low _default_state
  4796  000368  6E4F               	movwf	RTOS_DeleteTask@taskFunc,c
  4797  00036A  0E18               	movlw	high _default_state
  4798  00036C  6E50               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4799  00036E  0012               	return	
  4800  000370                     __end_ofPL28:
  4801                           	opt stack 0
  4802  000370                     PL50:
  4803                           	opt stack 22
  4804  000370  0EF2               	movlw	242
  4805  000372  6E57               	movwf	putchar_b_buf@symbol,c
  4806  000374  0C18               	retlw	24
  4807  000376                     __end_ofPL50:
  4808                           	opt stack 0
  4809  000376                     PL92:
  4810                           	opt stack 22
  4811  000376  0E3A               	movlw	58
  4812  000378  6E57               	movwf	putchar_b_buf@symbol,c
  4813  00037A  0C0C               	retlw	12
  4814  00037C                     __end_ofPL92:
  4815                           	opt stack 0
  4816  00037C                     PL94:
  4817                           	opt stack 22
  4818  00037C  0EFC               	movlw	low _time_set_dy
  4819  00037E  6E4F               	movwf	RTOS_DeleteTask@taskFunc,c
  4820  000380  0E01               	movlw	high _time_set_dy
  4821  000382  6E50               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4822  000384  0012               	return	
  4823  000386                     __end_ofPL94:
  4824                           	opt stack 0
  4825  000386                     PL104:
  4826                           	opt stack 22
  4827  000386  0ECF               	movlw	207
  4828  000388  6E57               	movwf	putchar_b_buf@symbol,c
  4829  00038A  0C12               	retlw	18
  4830  00038C                     __end_ofPL104:
  4831                           	opt stack 0
  4832                           tosu	equ	0xFFF
  4833                           tosh	equ	0xFFE
  4834                           tosl	equ	0xFFD
  4835                           pclath	equ	0xFFA
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           prodh	equ	0xFF4
  4841                           prodl	equ	0xFF3
  4842                           intcon	equ	0xFF2
  4843                           intcon2	equ	0xFF1
  4844                           postinc0	equ	0xFEE
  4845                           wreg	equ	0xFE8
  4846                           indf1	equ	0xFE7
  4847                           plusw1	equ	0xFE3
  4848                           fsr1h	equ	0xFE2
  4849                           fsr1l	equ	0xFE1
  4850                           indf2	equ	0xFDF
  4851                           postinc2	equ	0xFDE
  4852                           postdec2	equ	0xFDD
  4853                           plusw2	equ	0xFDB
  4854                           fsr2h	equ	0xFDA
  4855                           fsr2l	equ	0xFD9
  4856                           status	equ	0xFD8
  4857                           
  4858 ;; *************** function _time_set_dt *****************
  4859 ;; Defined at:
  4860 ;;		line 288 in file "common.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;		None
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;		None
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  1    wreg      void 
  4867 ;; Registers used:
  4868 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;Total ram usage:        0 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; Hardware stack levels required when called:    7
  4881 ;; This function calls:
  4882 ;;		_RTOS_DeleteTask
  4883 ;;		_RTOS_SetTask
  4884 ;;		_Update_Matrix
  4885 ;;		___lbdiv
  4886 ;;		___lbmod
  4887 ;;		_putchar_b_buf
  4888 ;;		_setDate
  4889 ;; This function is called by:
  4890 ;;		_time_set_mt
  4891 ;;		_RTOS_DispatchTask
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text18
  4896  000638                     __ptext18:
  4897                           	opt stack 0
  4898  000638                     _time_set_dt:
  4899                           	opt stack 22
  4900                           
  4901                           ;common.c: 290: switch (events)
  4902                           
  4903                           ;incstack = 0
  4904  000638  D038               	goto	l3804
  4905  00063A                     l3762:
  4906                           
  4907                           ;common.c: 296: RTOS_DeleteTask(time_set_dt);
  4908  00063A  D874               	call	PL88	;call to abstracted procedure
  4909  00063C  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4910                           
  4911                           ;common.c: 297: RTOS_SetTask(time_set_dy, 0, 20);
  4912  000640  0EFC               	movlw	low _time_set_dy
  4913  000642  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  4914  000644  0E01               	movlw	high _time_set_dy
  4915  000646  EC0E  F005         	call	PL12	;call to abstracted procedure
  4916  00064A  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4917                           
  4918                           ;common.c: 298: RTOS_SetTask(default_state, 2000, 0);
  4919  00064E  D85F               	call	PL2	;call to abstracted procedure
  4920  000650  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4921                           
  4922                           ;common.c: 299: events = 5;
  4923                           
  4924                           ;common.c: 300: en_put=1;
  4925  000654  D86C               	call	PL96	;call to abstracted procedure
  4926                           
  4927                           ;common.c: 301: break;
  4928  000656  D033               	goto	l670
  4929  000658                     l3772:
  4930                           
  4931                           ;common.c: 303: RTOS_DeleteTask(time_set_dt);
  4932  000658  D865               	call	PL88	;call to abstracted procedure
  4933  00065A  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4934                           
  4935                           ;common.c: 304: RTOS_DeleteTask(default_state);
  4936  00065E  ECB3  F001         	call	PL28	;call to abstracted procedure
  4937  000662  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  4938                           
  4939                           ;common.c: 305: RTOS_SetTask(time_led, 0, 20);
  4940  000666  ECA9  F001         	call	PL10	;call to abstracted procedure
  4941  00066A  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4942                           
  4943                           ;common.c: 306: events = 5;
  4944  00066E  0E05               	movlw	5
  4945  000670  6E70               	movwf	_events,c
  4946                           
  4947                           ;common.c: 307: break;
  4948  000672  D025               	goto	l670
  4949  000674                     l3778:
  4950                           
  4951                           ;common.c: 309: TSTime.Tdt++;
  4952  000674  2A0E               	incf	_TSTime+4,f,c
  4953                           
  4954                           ;common.c: 310: if(TSTime.Tdt > 31) TSTime.Tdt = 1;
  4955  000676  0E1F               	movlw	31
  4956  000678  640E               	cpfsgt	_TSTime+4,c
  4957  00067A  D002               	goto	l3784
  4958  00067C  0E01               	movlw	1
  4959  00067E  6E0E               	movwf	_TSTime+4,c
  4960  000680                     l3784:
  4961                           
  4962                           ;common.c: 311: RTOS_SetTask(default_state, 2000, 0);
  4963  000680  D846               	call	PL2	;call to abstracted procedure
  4964  000682  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4965                           
  4966                           ;common.c: 312: events = 5;
  4967                           
  4968                           ;common.c: 313: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4969  000686  EC9F  F001         	call	PL8	;call to abstracted procedure
  4970  00068A  EC32  F00A         	call	_setDate
  4971                           
  4972                           ;common.c: 314: break;
  4973  00068E  D017               	goto	l670
  4974  000690                     l3790:
  4975                           
  4976                           ;common.c: 316: TSTime.Tdt--;
  4977  000690  060E               	decf	_TSTime+4,f,c
  4978                           
  4979                           ;common.c: 317: if(TSTime.Tdt == 0) TSTime.Tdt = 31;
  4980  000692  500E               	movf	_TSTime+4,w,c
  4981  000694  E102               	bnz	l3796
  4982  000696  0E1F               	movlw	31
  4983  000698  6E0E               	movwf	_TSTime+4,c
  4984  00069A                     l3796:
  4985                           
  4986                           ;common.c: 318: RTOS_SetTask(default_state, 2000, 0);
  4987  00069A  D839               	call	PL2	;call to abstracted procedure
  4988  00069C  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  4989                           
  4990                           ;common.c: 319: events = 5;
  4991                           
  4992                           ;common.c: 320: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4993  0006A0  EC9F  F001         	call	PL8	;call to abstracted procedure
  4994  0006A4  EC32  F00A         	call	_setDate
  4995                           
  4996                           ;common.c: 321: break;
  4997  0006A8  D00A               	goto	l670
  4998  0006AA                     l3804:
  4999  0006AA  5070               	movf	_events,w,c
  5000                           
  5001                           ; Switch size 1, requested type "space"
  5002                           ; Number of cases is 5, Range of values is 1 to 5
  5003                           ; switch strategies available:
  5004                           ; Name         Instructions Cycles
  5005                           ; simple_byte           16     9 (average)
  5006                           ;	Chosen strategy is simple_byte
  5007  0006AC  0A01               	xorlw	1	; case 1
  5008  0006AE  E0C5               	bz	l3762
  5009  0006B0  0A03               	xorlw	3	; case 2
  5010  0006B2  E0E0               	bz	l3778
  5011  0006B4  0A01               	xorlw	1	; case 3
  5012  0006B6  E0EC               	bz	l3790
  5013  0006B8  0A07               	xorlw	7	; case 4
  5014  0006BA  E0CE               	bz	l3772
  5015  0006BC  0A01               	xorlw	1	; case 5
  5016  0006BE                     l670:
  5017                           
  5018                           ;common.c: 323: if(en_put)
  5019  0006BE  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5020  0006C0  D020               	goto	l3808
  5021                           
  5022                           ;common.c: 324: {
  5023                           ;common.c: 325: putchar_b_buf(0,'×');
  5024  0006C2  0ED7               	movlw	215
  5025  0006C4  6E57               	movwf	putchar_b_buf@symbol,c
  5026  0006C6  0E00               	movlw	0
  5027  0006C8  EC60  F008         	call	_putchar_b_buf
  5028                           
  5029                           ;common.c: 326: putchar_b_buf(6,'ñ');
  5030  0006CC  ECF5  F000         	call	PL110	;call to abstracted procedure
  5031  0006D0  EC60  F008         	call	_putchar_b_buf
  5032                           
  5033                           ;common.c: 327: putchar_b_buf(12,':');
  5034  0006D4  ECBB  F001         	call	PL92	;call to abstracted procedure
  5035  0006D8  EC60  F008         	call	_putchar_b_buf
  5036                           
  5037                           ;common.c: 328: putchar_b_buf(18,(TSTime.Tdt/10) % 10 + 48);
  5038  0006DC  0E0A               	movlw	10
  5039  0006DE  6E53               	movwf	___lbmod@divisor,c
  5040  0006E0  6E4F               	movwf	___lbdiv@divisor,c
  5041  0006E2  500E               	movf	_TSTime+4,w,c
  5042  0006E4  EC87  F00A         	call	___lbdiv
  5043  0006E8  EC62  F00B         	call	___lbmod
  5044  0006EC  D824               	call	PL116	;call to abstracted procedure
  5045  0006EE  EC60  F008         	call	_putchar_b_buf
  5046                           
  5047                           ;common.c: 329: putchar_b_buf(24,TSTime.Tdt % 10 + 48);
  5048  0006F2  0E0A               	movlw	10
  5049  0006F4  6E53               	movwf	___lbmod@divisor,c
  5050  0006F6  500E               	movf	_TSTime+4,w,c
  5051  0006F8  EC62  F00B         	call	___lbmod
  5052  0006FC  D81F               	call	PL122	;call to abstracted procedure
  5053  0006FE  EC60  F008         	call	_putchar_b_buf
  5054  000702                     l3808:
  5055                           
  5056                           ;common.c: 330: }
  5057                           ;common.c: 331: Update_Matrix(Dis_Buff);
  5058  000702  0E16               	movlw	low _Dis_Buff
  5059  000704  6E51               	movwf	Update_Matrix@buf,c
  5060  000706  EC14  F00A         	call	_Update_Matrix	;wreg free
  5061                           
  5062                           ;common.c: 332: en_put=1;
  5063  00070A  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5064  00070C  0012               	return		;funcret
  5065  00070E                     __end_of_time_set_dt:
  5066                           	opt stack 0
  5067  00070E                     PL2:
  5068                           	opt stack 22
  5069  00070E  0EDA               	movlw	low _default_state
  5070  000710  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  5071  000712  0E18               	movlw	high _default_state
  5072  000714  6E50               	movwf	RTOS_SetTask@taskFunc+1,c
  5073  000716  0E07               	movlw	7
  5074  000718  6E52               	movwf	RTOS_SetTask@taskDelay+1,c
  5075  00071A  0ED0               	movlw	208
  5076  00071C  6E51               	movwf	RTOS_SetTask@taskDelay,c
  5077  00071E  6A54               	clrf	RTOS_SetTask@taskPeriod+1,c
  5078  000720  6A53               	clrf	RTOS_SetTask@taskPeriod,c
  5079  000722  0CD0               	retlw	208
  5080  000724                     __end_ofPL2:
  5081                           	opt stack 0
  5082  000724                     PL88:
  5083                           	opt stack 22
  5084  000724  0E38               	movlw	low _time_set_dt
  5085  000726  6E4F               	movwf	RTOS_DeleteTask@taskFunc,c
  5086  000728  0E06               	movlw	high _time_set_dt
  5087  00072A  6E50               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5088  00072C  0012               	return	
  5089  00072E                     __end_ofPL88:
  5090                           	opt stack 0
  5091  00072E                     PL96:
  5092                           	opt stack 22
  5093  00072E  0E05               	movlw	5
  5094  000730  6E70               	movwf	_events,c
  5095  000732  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5096  000734  0C05               	retlw	5
  5097  000736                     __end_ofPL96:
  5098                           	opt stack 0
  5099  000736                     PL116:
  5100                           	opt stack 22
  5101  000736  0F30               	addlw	48
  5102  000738  6E57               	movwf	putchar_b_buf@symbol,c
  5103  00073A  0C12               	retlw	18
  5104  00073C                     __end_ofPL116:
  5105                           	opt stack 0
  5106  00073C                     PL122:
  5107                           	opt stack 22
  5108  00073C  0F30               	addlw	48
  5109  00073E  6E57               	movwf	putchar_b_buf@symbol,c
  5110  000740  0C18               	retlw	24
  5111  000742                     __end_ofPL122:
  5112                           	opt stack 0
  5113                           tosu	equ	0xFFF
  5114                           tosh	equ	0xFFE
  5115                           tosl	equ	0xFFD
  5116                           pclath	equ	0xFFA
  5117                           tblptru	equ	0xFF8
  5118                           tblptrh	equ	0xFF7
  5119                           tblptrl	equ	0xFF6
  5120                           tablat	equ	0xFF5
  5121                           prodh	equ	0xFF4
  5122                           prodl	equ	0xFF3
  5123                           intcon	equ	0xFF2
  5124                           intcon2	equ	0xFF1
  5125                           postinc0	equ	0xFEE
  5126                           wreg	equ	0xFE8
  5127                           indf1	equ	0xFE7
  5128                           plusw1	equ	0xFE3
  5129                           fsr1h	equ	0xFE2
  5130                           fsr1l	equ	0xFE1
  5131                           indf2	equ	0xFDF
  5132                           postinc2	equ	0xFDE
  5133                           postdec2	equ	0xFDD
  5134                           plusw2	equ	0xFDB
  5135                           fsr2h	equ	0xFDA
  5136                           fsr2l	equ	0xFD9
  5137                           status	equ	0xFD8
  5138                           
  5139 ;; *************** function _time_set_mt *****************
  5140 ;; Defined at:
  5141 ;;		line 188 in file "common.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;		None
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;		None
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      void 
  5148 ;; Registers used:
  5149 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;Total ram usage:        0 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    7
  5162 ;; This function calls:
  5163 ;;		_RTOS_DeleteTask
  5164 ;;		_RTOS_SetTask
  5165 ;;		_Update_Matrix
  5166 ;;		_putchar_b_buf
  5167 ;;		_setDate
  5168 ;; This function is called by:
  5169 ;;		_time_set_yr
  5170 ;;		_RTOS_DispatchTask
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           	psect	text19
  5175  000012                     __ptext19:
  5176                           	opt stack 0
  5177  000012                     _time_set_mt:
  5178                           	opt stack 22
  5179                           
  5180                           ;common.c: 190: switch (events)
  5181                           
  5182                           ;incstack = 0
  5183  000012  D03C               	goto	l3724
  5184  000014                     l3682:
  5185                           
  5186                           ;common.c: 196: RTOS_DeleteTask(time_set_mt);
  5187  000014  D8DF               	call	PL86	;call to abstracted procedure
  5188  000016  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  5189                           
  5190                           ;common.c: 197: RTOS_SetTask(time_set_dt, 0, 20);
  5191  00001A  0E38               	movlw	low _time_set_dt
  5192  00001C  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  5193  00001E  0E06               	movlw	high _time_set_dt
  5194  000020  EC0E  F005         	call	PL12	;call to abstracted procedure
  5195  000024  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5196                           
  5197                           ;common.c: 198: RTOS_SetTask(default_state, 2000, 0);
  5198  000028  EC87  F003         	call	PL2	;call to abstracted procedure
  5199  00002C  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5200                           
  5201                           ;common.c: 199: events = 5;
  5202                           
  5203                           ;common.c: 200: en_put=1;
  5204  000030  EC97  F003         	call	PL96	;call to abstracted procedure
  5205                           
  5206                           ;common.c: 201: break;
  5207  000034  D035               	goto	l643
  5208  000036                     l3692:
  5209                           
  5210                           ;common.c: 203: RTOS_DeleteTask(time_set_mt);
  5211  000036  D8CE               	call	PL86	;call to abstracted procedure
  5212  000038  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  5213                           
  5214                           ;common.c: 204: RTOS_DeleteTask(default_state);
  5215  00003C  ECB3  F001         	call	PL28	;call to abstracted procedure
  5216  000040  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  5217                           
  5218                           ;common.c: 205: RTOS_SetTask(time_led, 0, 20);
  5219  000044  ECA9  F001         	call	PL10	;call to abstracted procedure
  5220  000048  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5221                           
  5222                           ;common.c: 206: events = 5;
  5223  00004C  0E05               	movlw	5
  5224  00004E  6E70               	movwf	_events,c
  5225                           
  5226                           ;common.c: 207: break;
  5227  000050  D027               	goto	l643
  5228  000052                     l3698:
  5229                           
  5230                           ;common.c: 209: TSTime.Tmt++;
  5231  000052  2A0F               	incf	_TSTime+5,f,c
  5232                           
  5233                           ;common.c: 210: if(TSTime.Tmt > 12) TSTime.Tmt = 1;
  5234  000054  0E0C               	movlw	12
  5235  000056  640F               	cpfsgt	_TSTime+5,c
  5236  000058  D002               	goto	l3704
  5237  00005A  0E01               	movlw	1
  5238  00005C  6E0F               	movwf	_TSTime+5,c
  5239  00005E                     l3704:
  5240                           
  5241                           ;common.c: 211: RTOS_SetTask(default_state, 2000, 0);
  5242  00005E  EC87  F003         	call	PL2	;call to abstracted procedure
  5243  000062  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5244                           
  5245                           ;common.c: 212: events = 5;
  5246                           
  5247                           ;common.c: 213: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5248  000066  EC9F  F001         	call	PL8	;call to abstracted procedure
  5249  00006A  EC32  F00A         	call	_setDate
  5250                           
  5251                           ;common.c: 214: break;
  5252  00006E  D018               	goto	l643
  5253  000070                     l3710:
  5254                           
  5255                           ;common.c: 216: TSTime.Tmt--;
  5256  000070  060F               	decf	_TSTime+5,f,c
  5257                           
  5258                           ;common.c: 217: if(TSTime.Tmt == 0) TSTime.Tmt = 12;
  5259  000072  500F               	movf	_TSTime+5,w,c
  5260  000074  E102               	bnz	l3716
  5261  000076  0E0C               	movlw	12
  5262  000078  6E0F               	movwf	_TSTime+5,c
  5263  00007A                     l3716:
  5264                           
  5265                           ;common.c: 218: RTOS_SetTask(default_state, 2000, 0);
  5266  00007A  EC87  F003         	call	PL2	;call to abstracted procedure
  5267  00007E  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5268                           
  5269                           ;common.c: 219: events = 5;
  5270                           
  5271                           ;common.c: 220: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5272  000082  EC9F  F001         	call	PL8	;call to abstracted procedure
  5273  000086  EC32  F00A         	call	_setDate
  5274                           
  5275                           ;common.c: 221: break;
  5276  00008A  D00A               	goto	l643
  5277  00008C                     l3724:
  5278  00008C  5070               	movf	_events,w,c
  5279                           
  5280                           ; Switch size 1, requested type "space"
  5281                           ; Number of cases is 5, Range of values is 1 to 5
  5282                           ; switch strategies available:
  5283                           ; Name         Instructions Cycles
  5284                           ; simple_byte           16     9 (average)
  5285                           ;	Chosen strategy is simple_byte
  5286  00008E  0A01               	xorlw	1	; case 1
  5287  000090  E0C1               	bz	l3682
  5288  000092  0A03               	xorlw	3	; case 2
  5289  000094  E0DE               	bz	l3698
  5290  000096  0A01               	xorlw	1	; case 3
  5291  000098  E0EB               	bz	l3710
  5292  00009A  0A07               	xorlw	7	; case 4
  5293  00009C  E0CC               	bz	l3692
  5294  00009E  0A01               	xorlw	1	; case 5
  5295  0000A0                     l643:
  5296                           
  5297                           ;common.c: 223: if(en_put)
  5298  0000A0  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5299  0000A2  D08C               	goto	l3756
  5300                           
  5301                           ;common.c: 224: {
  5302                           ;common.c: 225: putchar_b_buf(0,'Ì');
  5303  0000A4  0ECC               	movlw	204
  5304  0000A6  6E57               	movwf	putchar_b_buf@symbol,c
  5305  0000A8  0E00               	movlw	0
  5306  0000AA  EC60  F008         	call	_putchar_b_buf
  5307                           
  5308                           ;common.c: 226: putchar_b_buf(6,'ñ');
  5309  0000AE  D89D               	call	PL110	;call to abstracted procedure
  5310  0000B0  EC60  F008         	call	_putchar_b_buf
  5311                           
  5312                           ;common.c: 227: putchar_b_buf(12,':');
  5313  0000B4  ECBB  F001         	call	PL92	;call to abstracted procedure
  5314  0000B8  EC60  F008         	call	_putchar_b_buf
  5315                           
  5316                           ;common.c: 228: switch(TSTime.Tmt)
  5317  0000BC  D066               	goto	l3754
  5318  0000BE                     l3728:
  5319                           
  5320                           ;common.c: 231: putchar_b_buf(18,'Ñ');
  5321  0000BE  D887               	call	PL72	;call to abstracted procedure
  5322  0000C0  EC60  F008         	call	_putchar_b_buf
  5323                           
  5324                           ;common.c: 232: putchar_b_buf(24,'÷');
  5325  0000C4  0EF7               	movlw	247
  5326  0000C6  6E57               	movwf	putchar_b_buf@symbol,c
  5327  0000C8  0E18               	movlw	24
  5328  0000CA  EC60  F008         	call	_putchar_b_buf
  5329                           
  5330                           ;common.c: 233: break;
  5331  0000CE  D076               	goto	l3756
  5332  0000D0                     l3730:
  5333                           
  5334                           ;common.c: 235: putchar_b_buf(18,'Ë');
  5335  0000D0  D886               	call	PL98	;call to abstracted procedure
  5336  0000D2  EC60  F008         	call	_putchar_b_buf
  5337                           
  5338                           ;common.c: 236: putchar_b_buf(24,'ò');
  5339  0000D6  ECB8  F001         	call	PL50	;call to abstracted procedure
  5340  0000DA  EC60  F008         	call	_putchar_b_buf
  5341                           
  5342                           ;common.c: 237: break;
  5343  0000DE  D06E               	goto	l3756
  5344  0000E0                     l3732:
  5345                           
  5346                           ;common.c: 239: putchar_b_buf(18,'Á');
  5347  0000E0  0EC1               	movlw	193
  5348  0000E2  6E57               	movwf	putchar_b_buf@symbol,c
  5349  0000E4  0E12               	movlw	18
  5350  0000E6  EC60  F008         	call	_putchar_b_buf
  5351                           
  5352                           ;common.c: 240: putchar_b_buf(24,'ð');
  5353  0000EA  D86E               	call	PL44	;call to abstracted procedure
  5354  0000EC  EC60  F008         	call	_putchar_b_buf
  5355                           
  5356                           ;common.c: 241: break;
  5357  0000F0  D065               	goto	l3756
  5358  0000F2                     l3734:
  5359                           
  5360                           ;common.c: 243: putchar_b_buf(18,'Ê');
  5361  0000F2  0ECA               	movlw	202
  5362  0000F4  6E57               	movwf	putchar_b_buf@symbol,c
  5363  0000F6  0E12               	movlw	18
  5364  0000F8  EC60  F008         	call	_putchar_b_buf
  5365                           
  5366                           ;common.c: 244: putchar_b_buf(24,'â');
  5367  0000FC  0EE2               	movlw	226
  5368  0000FE  6E57               	movwf	putchar_b_buf@symbol,c
  5369  000100  0E18               	movlw	24
  5370  000102  EC60  F008         	call	_putchar_b_buf
  5371                           
  5372                           ;common.c: 245: break;
  5373  000106  D05A               	goto	l3756
  5374  000108                     l3736:
  5375                           
  5376                           ;common.c: 247: putchar_b_buf(18,'Ò');
  5377  000108  0ED2               	movlw	210
  5378  00010A  6E57               	movwf	putchar_b_buf@symbol,c
  5379  00010C  0E12               	movlw	18
  5380  00010E  EC60  F008         	call	_putchar_b_buf
  5381                           
  5382                           ;common.c: 248: putchar_b_buf(24,'ð');
  5383  000112  D85A               	call	PL44	;call to abstracted procedure
  5384  000114  EC60  F008         	call	_putchar_b_buf
  5385                           
  5386                           ;common.c: 249: break;
  5387  000118  D051               	goto	l3756
  5388  00011A                     l3738:
  5389                           
  5390                           ;common.c: 251: putchar_b_buf(18,'×');
  5391  00011A  D86D               	call	PL114	;call to abstracted procedure
  5392  00011C  EC60  F008         	call	_putchar_b_buf
  5393                           
  5394                           ;common.c: 252: putchar_b_buf(24,'ð');
  5395  000120  D853               	call	PL44	;call to abstracted procedure
  5396  000122  EC60  F008         	call	_putchar_b_buf
  5397                           
  5398                           ;common.c: 253: break;
  5399  000126  D04A               	goto	l3756
  5400  000128                     l3740:
  5401                           
  5402                           ;common.c: 255: putchar_b_buf(18,'Ë');
  5403  000128  D85A               	call	PL98	;call to abstracted procedure
  5404  00012A  EC60  F008         	call	_putchar_b_buf
  5405                           
  5406                           ;common.c: 256: putchar_b_buf(24,'ï');
  5407  00012E  D85A               	call	PL100	;call to abstracted procedure
  5408  000130  EC60  F008         	call	_putchar_b_buf
  5409                           
  5410                           ;common.c: 257: break;
  5411  000134  D043               	goto	l3756
  5412  000136                     l3742:
  5413                           
  5414                           ;common.c: 259: putchar_b_buf(18,'Ñ');
  5415  000136  D84B               	call	PL72	;call to abstracted procedure
  5416  000138  EC60  F008         	call	_putchar_b_buf
  5417                           
  5418                           ;common.c: 260: putchar_b_buf(24,'ï');
  5419  00013C  D853               	call	PL100	;call to abstracted procedure
  5420  00013E  EC60  F008         	call	_putchar_b_buf
  5421                           
  5422                           ;common.c: 261: break;
  5423  000142  D03C               	goto	l3756
  5424  000144                     l3744:
  5425                           
  5426                           ;common.c: 263: putchar_b_buf(18,'Â');
  5427  000144  D855               	call	PL112	;call to abstracted procedure
  5428  000146  EC60  F008         	call	_putchar_b_buf
  5429                           
  5430                           ;common.c: 264: putchar_b_buf(24,'ð');
  5431  00014A  D83E               	call	PL44	;call to abstracted procedure
  5432  00014C  EC60  F008         	call	_putchar_b_buf
  5433                           
  5434                           ;common.c: 265: break;
  5435  000150  D035               	goto	l3756
  5436  000152                     l3746:
  5437                           
  5438                           ;common.c: 267: putchar_b_buf(18,'Æ');
  5439  000152  0EC6               	movlw	198
  5440  000154  6E57               	movwf	putchar_b_buf@symbol,c
  5441  000156  0E12               	movlw	18
  5442  000158  EC60  F008         	call	_putchar_b_buf
  5443                           
  5444                           ;common.c: 268: putchar_b_buf(24,'ò');
  5445  00015C  ECB8  F001         	call	PL50	;call to abstracted procedure
  5446  000160  EC60  F008         	call	_putchar_b_buf
  5447                           
  5448                           ;common.c: 269: break;
  5449  000164  D02B               	goto	l3756
  5450  000166                     l3748:
  5451                           
  5452                           ;common.c: 271: putchar_b_buf(18,'Ë');
  5453  000166  D83B               	call	PL98	;call to abstracted procedure
  5454  000168  EC60  F008         	call	_putchar_b_buf
  5455                           
  5456                           ;common.c: 272: putchar_b_buf(24,'ñ');
  5457  00016C  0EF1               	movlw	241
  5458  00016E  6E57               	movwf	putchar_b_buf@symbol,c
  5459  000170  0E18               	movlw	24
  5460  000172  EC60  F008         	call	_putchar_b_buf
  5461                           
  5462                           ;common.c: 273: break;
  5463  000176  D022               	goto	l3756
  5464  000178                     l3750:
  5465                           
  5466                           ;common.c: 275: putchar_b_buf(18,'Ã');
  5467  000178  0EC3               	movlw	195
  5468  00017A  6E57               	movwf	putchar_b_buf@symbol,c
  5469  00017C  0E12               	movlw	18
  5470  00017E  EC60  F008         	call	_putchar_b_buf
  5471                           
  5472                           ;common.c: 276: putchar_b_buf(24,'ð');
  5473  000182  D822               	call	PL44	;call to abstracted procedure
  5474  000184  EC60  F008         	call	_putchar_b_buf
  5475                           
  5476                           ;common.c: 277: break;
  5477  000188  D019               	goto	l3756
  5478  00018A                     l3754:
  5479  00018A  500F               	movf	_TSTime+5,w,c
  5480                           
  5481                           ; Switch size 1, requested type "space"
  5482                           ; Number of cases is 12, Range of values is 1 to 12
  5483                           ; switch strategies available:
  5484                           ; Name         Instructions Cycles
  5485                           ; simple_byte           37    19 (average)
  5486                           ;	Chosen strategy is simple_byte
  5487  00018C  0A01               	xorlw	1	; case 1
  5488  00018E  E097               	bz	l3728
  5489  000190  0A03               	xorlw	3	; case 2
  5490  000192  E09E               	bz	l3730
  5491  000194  0A01               	xorlw	1	; case 3
  5492  000196  E0A4               	bz	l3732
  5493  000198  0A07               	xorlw	7	; case 4
  5494  00019A  E0AB               	bz	l3734
  5495  00019C  0A01               	xorlw	1	; case 5
  5496  00019E  E0B4               	bz	l3736
  5497  0001A0  0A03               	xorlw	3	; case 6
  5498  0001A2  E0BB               	bz	l3738
  5499  0001A4  0A01               	xorlw	1	; case 7
  5500  0001A6  E0C0               	bz	l3740
  5501  0001A8  0A0F               	xorlw	15	; case 8
  5502  0001AA  E0C5               	bz	l3742
  5503  0001AC  0A01               	xorlw	1	; case 9
  5504  0001AE  E0CA               	bz	l3744
  5505  0001B0  0A03               	xorlw	3	; case 10
  5506  0001B2  E0CF               	bz	l3746
  5507  0001B4  0A01               	xorlw	1	; case 11
  5508  0001B6  E0D7               	bz	l3748
  5509  0001B8  0A07               	xorlw	7	; case 12
  5510  0001BA  E0DE               	bz	l3750
  5511  0001BC                     l3756:
  5512                           
  5513                           ;common.c: 280: }
  5514                           ;common.c: 281: Update_Matrix(Dis_Buff);
  5515  0001BC  0E16               	movlw	low _Dis_Buff
  5516  0001BE  6E51               	movwf	Update_Matrix@buf,c
  5517  0001C0  EC14  F00A         	call	_Update_Matrix	;wreg free
  5518                           
  5519                           ;common.c: 282: en_put=1;
  5520  0001C4  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5521  0001C6  0012               	return		;funcret
  5522  0001C8                     __end_of_time_set_mt:
  5523                           	opt stack 0
  5524  0001C8                     PL44:
  5525                           	opt stack 22
  5526  0001C8  0EF0               	movlw	240
  5527  0001CA  6E57               	movwf	putchar_b_buf@symbol,c
  5528  0001CC  0C18               	retlw	24
  5529  0001CE                     __end_ofPL44:
  5530                           	opt stack 0
  5531  0001CE                     PL72:
  5532                           	opt stack 22
  5533  0001CE  0ED1               	movlw	209
  5534  0001D0  6E57               	movwf	putchar_b_buf@symbol,c
  5535  0001D2  0C12               	retlw	18
  5536  0001D4                     __end_ofPL72:
  5537                           	opt stack 0
  5538  0001D4                     PL86:
  5539                           	opt stack 22
  5540  0001D4  0E12               	movlw	low _time_set_mt
  5541  0001D6  6E4F               	movwf	RTOS_DeleteTask@taskFunc,c
  5542  0001D8  0E00               	movlw	high _time_set_mt
  5543  0001DA  6E50               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5544  0001DC  0012               	return	
  5545  0001DE                     __end_ofPL86:
  5546                           	opt stack 0
  5547  0001DE                     PL98:
  5548                           	opt stack 22
  5549  0001DE  0ECB               	movlw	203
  5550  0001E0  6E57               	movwf	putchar_b_buf@symbol,c
  5551  0001E2  0C12               	retlw	18
  5552  0001E4                     __end_ofPL98:
  5553                           	opt stack 0
  5554  0001E4                     PL100:
  5555                           	opt stack 22
  5556  0001E4  0EEF               	movlw	239
  5557  0001E6  6E57               	movwf	putchar_b_buf@symbol,c
  5558  0001E8  0C18               	retlw	24
  5559  0001EA                     __end_ofPL100:
  5560                           	opt stack 0
  5561  0001EA                     PL110:
  5562                           	opt stack 22
  5563  0001EA  0EF1               	movlw	241
  5564  0001EC  6E57               	movwf	putchar_b_buf@symbol,c
  5565  0001EE  0C06               	retlw	6
  5566  0001F0                     __end_ofPL110:
  5567                           	opt stack 0
  5568  0001F0                     PL112:
  5569                           	opt stack 22
  5570  0001F0  0EC2               	movlw	194
  5571  0001F2  6E57               	movwf	putchar_b_buf@symbol,c
  5572  0001F4  0C12               	retlw	18
  5573  0001F6                     __end_ofPL112:
  5574                           	opt stack 0
  5575  0001F6                     PL114:
  5576                           	opt stack 22
  5577  0001F6  0ED7               	movlw	215
  5578  0001F8  6E57               	movwf	putchar_b_buf@symbol,c
  5579  0001FA  0C12               	retlw	18
  5580  0001FC                     __end_ofPL114:
  5581                           	opt stack 0
  5582                           tosu	equ	0xFFF
  5583                           tosh	equ	0xFFE
  5584                           tosl	equ	0xFFD
  5585                           pclath	equ	0xFFA
  5586                           tblptru	equ	0xFF8
  5587                           tblptrh	equ	0xFF7
  5588                           tblptrl	equ	0xFF6
  5589                           tablat	equ	0xFF5
  5590                           prodh	equ	0xFF4
  5591                           prodl	equ	0xFF3
  5592                           intcon	equ	0xFF2
  5593                           intcon2	equ	0xFF1
  5594                           postinc0	equ	0xFEE
  5595                           wreg	equ	0xFE8
  5596                           indf1	equ	0xFE7
  5597                           plusw1	equ	0xFE3
  5598                           fsr1h	equ	0xFE2
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           postdec2	equ	0xFDD
  5603                           plusw2	equ	0xFDB
  5604                           fsr2h	equ	0xFDA
  5605                           fsr2l	equ	0xFD9
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function _default_state *****************
  5609 ;; Defined at:
  5610 ;;		line 519 in file "common.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;		None
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;		None
  5615 ;; Return value:  Size  Location     Type
  5616 ;;                  1    wreg      void 
  5617 ;; Registers used:
  5618 ;;		wreg, status,2
  5619 ;; Tracked objects:
  5620 ;;		On entry : 0/0
  5621 ;;		On exit  : 0/0
  5622 ;;		Unchanged: 0/0
  5623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;Total ram usage:        0 bytes
  5629 ;; Hardware stack levels used:    1
  5630 ;; Hardware stack levels required when called:    3
  5631 ;; This function calls:
  5632 ;;		Nothing
  5633 ;; This function is called by:
  5634 ;;		_time_set_min
  5635 ;;		_time_set_hr
  5636 ;;		_time_set_yr
  5637 ;;		_time_set_mt
  5638 ;;		_time_set_dt
  5639 ;;		_time_set_dy
  5640 ;;		_home_temp
  5641 ;;		_time_led
  5642 ;;		_RTOS_DispatchTask
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text20
  5647  0018DA                     __ptext20:
  5648                           	opt stack 0
  5649  0018DA                     _default_state:
  5650                           	opt stack 26
  5651                           
  5652                           ;common.c: 521: events = 4;
  5653                           
  5654                           ;incstack = 0
  5655  0018DA  0E04               	movlw	4
  5656  0018DC  6E70               	movwf	_events,c
  5657  0018DE  0C04               	retlw	4	;funcret
  5658  0018E0                     __end_of_default_state:
  5659                           	opt stack 0
  5660                           tosu	equ	0xFFF
  5661                           tosh	equ	0xFFE
  5662                           tosl	equ	0xFFD
  5663                           pclath	equ	0xFFA
  5664                           tblptru	equ	0xFF8
  5665                           tblptrh	equ	0xFF7
  5666                           tblptrl	equ	0xFF6
  5667                           tablat	equ	0xFF5
  5668                           prodh	equ	0xFF4
  5669                           prodl	equ	0xFF3
  5670                           intcon	equ	0xFF2
  5671                           intcon2	equ	0xFF1
  5672                           postinc0	equ	0xFEE
  5673                           wreg	equ	0xFE8
  5674                           indf1	equ	0xFE7
  5675                           plusw1	equ	0xFE3
  5676                           fsr1h	equ	0xFE2
  5677                           fsr1l	equ	0xFE1
  5678                           indf2	equ	0xFDF
  5679                           postinc2	equ	0xFDE
  5680                           postdec2	equ	0xFDD
  5681                           plusw2	equ	0xFDB
  5682                           fsr2h	equ	0xFDA
  5683                           fsr2l	equ	0xFD9
  5684                           status	equ	0xFD8
  5685                           
  5686 ;; *************** function _time_set_hr *****************
  5687 ;; Defined at:
  5688 ;;		line 76 in file "common.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;		None
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;		None
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  1    wreg      void 
  5695 ;; Registers used:
  5696 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;Total ram usage:        0 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:    7
  5709 ;; This function calls:
  5710 ;;		_RTOS_DeleteTask
  5711 ;;		_RTOS_SetTask
  5712 ;;		_Update_Matrix
  5713 ;;		___lbdiv
  5714 ;;		___lbmod
  5715 ;;		_clear_matrix
  5716 ;;		_putchar_b_buf
  5717 ;;		_setTime
  5718 ;; This function is called by:
  5719 ;;		_time_set_min
  5720 ;;		_RTOS_DispatchTask
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text21
  5725  0004FA                     __ptext21:
  5726                           	opt stack 0
  5727  0004FA                     _time_set_hr:
  5728                           	opt stack 22
  5729                           
  5730                           ;common.c: 78: show_digit = ~show_digit;
  5731                           
  5732                           ;incstack = 0
  5733  0004FA  B26F               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  5734  0004FC  D002               	goto	u2080
  5735  0004FE  826F               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  5736  000500  D03E               	goto	l3616
  5737  000502                     u2080:
  5738  000502  926F               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  5739                           
  5740                           ;common.c: 79: switch (events)
  5741  000504  D03C               	goto	l3616
  5742  000506                     l3572:
  5743                           
  5744                           ;common.c: 85: RTOS_DeleteTask(time_set_hr);
  5745  000506  D889               	call	PL62	;call to abstracted procedure
  5746  000508  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  5747                           
  5748                           ;common.c: 86: RTOS_SetTask(time_set_yr, 0, 20);
  5749  00050C  0E3A               	movlw	low _time_set_yr
  5750  00050E  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  5751  000510  0E09               	movlw	high _time_set_yr
  5752  000512  EC0E  F005         	call	PL12	;call to abstracted procedure
  5753  000516  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5754                           
  5755                           ;common.c: 87: RTOS_SetTask(default_state, 2000, 0);
  5756  00051A  EC87  F003         	call	PL2	;call to abstracted procedure
  5757  00051E  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5758                           
  5759                           ;common.c: 89: events = 5;
  5760  000522  0E05               	movlw	5
  5761  000524  6E70               	movwf	_events,c
  5762                           
  5763                           ;common.c: 90: clear_matrix();
  5764  000526  EC0B  F00C         	call	_clear_matrix	;wreg free
  5765                           
  5766                           ;common.c: 91: en_put = 0;
  5767  00052A  906F               	bcf	_en_put/(0+8),_en_put& (0+7),c
  5768                           
  5769                           ;common.c: 92: break;
  5770  00052C  D032               	goto	l615
  5771  00052E                     l3584:
  5772                           
  5773                           ;common.c: 94: RTOS_DeleteTask(time_set_hr);
  5774  00052E  D875               	call	PL62	;call to abstracted procedure
  5775  000530  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  5776                           
  5777                           ;common.c: 95: RTOS_DeleteTask(default_state);
  5778  000534  ECB3  F001         	call	PL28	;call to abstracted procedure
  5779  000538  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  5780                           
  5781                           ;common.c: 96: RTOS_SetTask(time_led, 0, 20);
  5782  00053C  ECA9  F001         	call	PL10	;call to abstracted procedure
  5783  000540  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5784                           
  5785                           ;common.c: 97: events = 5;
  5786  000544  0E05               	movlw	5
  5787  000546  6E70               	movwf	_events,c
  5788                           
  5789                           ;common.c: 98: break;
  5790  000548  D024               	goto	l615
  5791  00054A                     l3590:
  5792                           
  5793                           ;common.c: 100: TSTime.Thr++;
  5794  00054A  2A0C               	incf	_TSTime+2,f,c
  5795                           
  5796                           ;common.c: 101: if(TSTime.Thr > 23) TSTime.Thr = 0;
  5797  00054C  0E17               	movlw	23
  5798  00054E  640C               	cpfsgt	_TSTime+2,c
  5799  000550  D001               	goto	l3596
  5800  000552  6A0C               	clrf	_TSTime+2,c
  5801  000554                     l3596:
  5802                           
  5803                           ;common.c: 102: RTOS_SetTask(default_state, 2000, 0);
  5804  000554  EC87  F003         	call	PL2	;call to abstracted procedure
  5805  000558  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5806                           
  5807                           ;common.c: 103: events = 5;
  5808                           
  5809                           ;common.c: 104: setTime(TSTime.Thr,TSTime.Tmin,0);
  5810  00055C  D852               	call	PL38	;call to abstracted procedure
  5811  00055E  ECD2  F00A         	call	_setTime
  5812                           
  5813                           ;common.c: 105: break;
  5814  000562  D017               	goto	l615
  5815  000564                     l3602:
  5816                           
  5817                           ;common.c: 107: TSTime.Thr--;
  5818  000564  060C               	decf	_TSTime+2,f,c
  5819                           
  5820                           ;common.c: 108: if(TSTime.Thr == 255) TSTime.Thr = 23;
  5821  000566  280C               	incf	_TSTime+2,w,c
  5822  000568  E102               	bnz	l3608
  5823  00056A  0E17               	movlw	23
  5824  00056C  6E0C               	movwf	_TSTime+2,c
  5825  00056E                     l3608:
  5826                           
  5827                           ;common.c: 109: RTOS_SetTask(default_state, 2000, 0);
  5828  00056E  EC87  F003         	call	PL2	;call to abstracted procedure
  5829  000572  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  5830                           
  5831                           ;common.c: 110: events = 5;
  5832                           
  5833                           ;common.c: 111: setTime(TSTime.Thr,TSTime.Tmin,0);
  5834  000576  D845               	call	PL38	;call to abstracted procedure
  5835  000578  ECD2  F00A         	call	_setTime
  5836                           
  5837                           ;common.c: 112: break;
  5838  00057C  D00A               	goto	l615
  5839  00057E                     l3616:
  5840  00057E  5070               	movf	_events,w,c
  5841                           
  5842                           ; Switch size 1, requested type "space"
  5843                           ; Number of cases is 5, Range of values is 1 to 5
  5844                           ; switch strategies available:
  5845                           ; Name         Instructions Cycles
  5846                           ; simple_byte           16     9 (average)
  5847                           ;	Chosen strategy is simple_byte
  5848  000580  0A01               	xorlw	1	; case 1
  5849  000582  E0C1               	bz	l3572
  5850  000584  0A03               	xorlw	3	; case 2
  5851  000586  E0E1               	bz	l3590
  5852  000588  0A01               	xorlw	1	; case 3
  5853  00058A  E0EC               	bz	l3602
  5854  00058C  0A07               	xorlw	7	; case 4
  5855  00058E  E0CF               	bz	l3584
  5856  000590  0A01               	xorlw	1	; case 5
  5857  000592                     l615:
  5858                           
  5859                           ;common.c: 114: if(en_put)
  5860  000592  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5861  000594  D030               	goto	l3624
  5862                           
  5863                           ;common.c: 115: {
  5864                           ;common.c: 116: if(show_digit)
  5865  000596  A26F               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  5866  000598  D026               	goto	l3622
  5867                           
  5868                           ;common.c: 117: {
  5869                           ;common.c: 119: putchar_b_buf(13,(TSTime.Tmin/10) % 10 + 48);
  5870  00059A  D83A               	call	PL54	;call to abstracted procedure
  5871  00059C  EC87  F00A         	call	___lbdiv
  5872  0005A0  EC62  F00B         	call	___lbmod
  5873  0005A4  D83F               	call	PL102	;call to abstracted procedure
  5874  0005A6  EC60  F008         	call	_putchar_b_buf
  5875                           
  5876                           ;common.c: 120: putchar_b_buf(19,TSTime.Tmin % 10 + 48);
  5877  0005AA  D842               	call	PL124	;call to abstracted procedure
  5878  0005AC  EC62  F00B         	call	___lbmod
  5879  0005B0  D83C               	call	PL118	;call to abstracted procedure
  5880  0005B2  EC60  F008         	call	_putchar_b_buf
  5881                           
  5882                           ;common.c: 122: putchar_b_buf(0,(TSTime.Thr/10) % 10 + 48);
  5883  0005B6  0E0A               	movlw	10
  5884  0005B8  6E53               	movwf	___lbmod@divisor,c
  5885  0005BA  6E4F               	movwf	___lbdiv@divisor,c
  5886  0005BC  500C               	movf	_TSTime+2,w,c
  5887  0005BE  EC87  F00A         	call	___lbdiv
  5888  0005C2  EC62  F00B         	call	___lbmod
  5889  0005C6  0F30               	addlw	48
  5890  0005C8  6E57               	movwf	putchar_b_buf@symbol,c
  5891  0005CA  0E00               	movlw	0
  5892  0005CC  EC60  F008         	call	_putchar_b_buf
  5893                           
  5894                           ;common.c: 123: putchar_b_buf(6,TSTime.Thr % 10 + 48);
  5895  0005D0  0E0A               	movlw	10
  5896  0005D2  6E53               	movwf	___lbmod@divisor,c
  5897  0005D4  500C               	movf	_TSTime+2,w,c
  5898  0005D6  EC62  F00B         	call	___lbmod
  5899  0005DA  0F30               	addlw	48
  5900  0005DC  6E57               	movwf	putchar_b_buf@symbol,c
  5901  0005DE  0E06               	movlw	6
  5902  0005E0  EC60  F008         	call	_putchar_b_buf
  5903                           
  5904                           ;common.c: 124: }
  5905  0005E4  D008               	goto	l3624
  5906  0005E6                     l3622:
  5907                           
  5908                           ;common.c: 125: else
  5909                           ;common.c: 126: {
  5910                           ;common.c: 128: putchar_b_buf(0,0);
  5911  0005E6  0E00               	movlw	0
  5912  0005E8  6A57               	clrf	putchar_b_buf@symbol,c
  5913  0005EA  EC60  F008         	call	_putchar_b_buf
  5914                           
  5915                           ;common.c: 129: putchar_b_buf(6,0);
  5916  0005EE  6A57               	clrf	putchar_b_buf@symbol,c
  5917  0005F0  0E06               	movlw	6
  5918  0005F2  EC60  F008         	call	_putchar_b_buf
  5919  0005F6                     l3624:
  5920                           
  5921                           ;common.c: 130: }
  5922                           ;common.c: 131: }
  5923                           ;common.c: 132: Update_Matrix(Dis_Buff);
  5924  0005F6  0E16               	movlw	low _Dis_Buff
  5925  0005F8  6E51               	movwf	Update_Matrix@buf,c
  5926  0005FA  EC14  F00A         	call	_Update_Matrix	;wreg free
  5927                           
  5928                           ;common.c: 133: en_put = 1;
  5929  0005FE  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5930  000600  0012               	return		;funcret
  5931  000602                     __end_of_time_set_hr:
  5932                           	opt stack 0
  5933  000602                     PL38:
  5934                           	opt stack 22
  5935  000602  0E05               	movlw	5
  5936  000604  6E70               	movwf	_events,c
  5937  000606  C00B  F05C         	movff	_TSTime+1,setTime@mSet
  5938  00060A  6A5D               	clrf	setTime@sSet,c
  5939  00060C  500C               	movf	_TSTime+2,w,c
  5940  00060E  0012               	return	
  5941  000610                     __end_ofPL38:
  5942                           	opt stack 0
  5943  000610                     PL54:
  5944                           	opt stack 24
  5945  000610  0E0A               	movlw	10
  5946  000612  6E53               	movwf	___lbmod@divisor,c
  5947  000614  6E4F               	movwf	___lbdiv@divisor,c
  5948  000616  500B               	movf	_TSTime+1,w,c
  5949  000618  0012               	return	
  5950  00061A                     __end_ofPL54:
  5951                           	opt stack 0
  5952  00061A                     PL62:
  5953                           	opt stack 22
  5954  00061A  0EFA               	movlw	low _time_set_hr
  5955  00061C  6E4F               	movwf	RTOS_DeleteTask@taskFunc,c
  5956  00061E  0E04               	movlw	high _time_set_hr
  5957  000620  6E50               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5958  000622  0012               	return	
  5959  000624                     __end_ofPL62:
  5960                           	opt stack 0
  5961  000624                     PL102:
  5962                           	opt stack 24
  5963  000624  0F30               	addlw	48
  5964  000626  6E57               	movwf	putchar_b_buf@symbol,c
  5965  000628  0C0D               	retlw	13
  5966  00062A                     __end_ofPL102:
  5967                           	opt stack 0
  5968  00062A                     PL118:
  5969                           	opt stack 24
  5970  00062A  0F30               	addlw	48
  5971  00062C  6E57               	movwf	putchar_b_buf@symbol,c
  5972  00062E  0C13               	retlw	19
  5973  000630                     __end_ofPL118:
  5974                           	opt stack 0
  5975  000630                     PL124:
  5976                           	opt stack 24
  5977  000630  0E0A               	movlw	10
  5978  000632  6E53               	movwf	___lbmod@divisor,c
  5979  000634  500B               	movf	_TSTime+1,w,c
  5980  000636  0012               	return	
  5981  000638                     __end_ofPL124:
  5982                           	opt stack 0
  5983                           tosu	equ	0xFFF
  5984                           tosh	equ	0xFFE
  5985                           tosl	equ	0xFFD
  5986                           pclath	equ	0xFFA
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           intcon	equ	0xFF2
  5994                           intcon2	equ	0xFF1
  5995                           postinc0	equ	0xFEE
  5996                           wreg	equ	0xFE8
  5997                           indf1	equ	0xFE7
  5998                           plusw1	equ	0xFE3
  5999                           fsr1h	equ	0xFE2
  6000                           fsr1l	equ	0xFE1
  6001                           indf2	equ	0xFDF
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           plusw2	equ	0xFDB
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function _key_press *****************
  6010 ;; Defined at:
  6011 ;;		line 5 in file "key.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  key             1   14[COMRAM] unsigned char 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, status,2, status,0
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6028 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;Total ram usage:        1 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    3
  6032 ;; This function calls:
  6033 ;;		Nothing
  6034 ;; This function is called by:
  6035 ;;		_main
  6036 ;;		_RTOS_DispatchTask
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text22
  6041  00132A                     __ptext22:
  6042                           	opt stack 0
  6043  00132A                     _key_press:
  6044                           	opt stack 26
  6045                           
  6046                           ;key.c: 7: static uint8_t count = 0;
  6047                           ;key.c: 8: uint8_t key;
  6048                           ;key.c: 10: if ((PORTB & (1<<4))==0)
  6049                           
  6050                           ;incstack = 0
  6051  00132A  B881               	btfsc	3969,4,c	;volatile
  6052  00132C  D002               	goto	l766
  6053                           
  6054                           ;key.c: 11: key = 1;
  6055  00132E  0E01               	movlw	1
  6056  001330  D00B               	goto	L3
  6057  001332                     l766:
  6058                           
  6059                           ;key.c: 12: else if ((PORTB & (1<<1))==0)
  6060  001332  B281               	btfsc	3969,1,c	;volatile
  6061  001334  D002               	goto	l768
  6062                           
  6063                           ;key.c: 13: key = 2;
  6064  001336  0E02               	movlw	2
  6065  001338  D007               	goto	L3
  6066  00133A                     l768:
  6067                           
  6068                           ;key.c: 14: else if ((PORTB & (1<<2))==0)
  6069  00133A  B481               	btfsc	3969,2,c	;volatile
  6070  00133C  D002               	goto	l770
  6071                           
  6072                           ;key.c: 15: key = 3;
  6073  00133E  0E03               	movlw	3
  6074  001340  D003               	goto	L3
  6075  001342                     l770:
  6076                           
  6077                           ;key.c: 16: else if ((PORTB & (1<<3))==0)
  6078  001342  B681               	btfsc	3969,3,c	;volatile
  6079  001344  D003               	goto	l772
  6080                           
  6081                           ;key.c: 17: key = 4;
  6082  001346  0E04               	movlw	4
  6083  001348                     L3:
  6084  001348  6E4F               	movwf	key_press@key,c
  6085  00134A  D001               	goto	l3992
  6086  00134C                     l772:
  6087                           
  6088                           ;key.c: 18: else
  6089                           ;key.c: 19: key = (0);
  6090  00134C  6A4F               	clrf	key_press@key,c
  6091  00134E                     l3992:
  6092                           
  6093                           ;key.c: 22: if(key){
  6094  00134E  504F               	movf	key_press@key,w,c
  6095  001350  E00C               	bz	l774
  6096                           
  6097                           ;key.c: 23: if(count <= 30)
  6098  001352  0E1F               	movlw	31
  6099  001354  6011               	cpfslt	key_press@count,c
  6100  001356  0C1F               	retlw	31
  6101                           
  6102                           ;key.c: 24: {
  6103                           ;key.c: 25: count++;
  6104  001358  2A11               	incf	key_press@count,f,c
  6105                           
  6106                           ;key.c: 26: if(count == 30)
  6107  00135A  0E1E               	movlw	30
  6108  00135C  1811               	xorwf	key_press@count,w,c
  6109  00135E  A4D8               	btfss	status,2,c
  6110  001360  0012               	return	
  6111                           
  6112                           ;key.c: 27: {
  6113                           ;key.c: 29: events = key;
  6114  001362  C04F  F070         	movff	key_press@key,_events
  6115                           
  6116                           ;key.c: 30: count = 0;
  6117  001366  6A11               	clrf	key_press@count,c
  6118  001368  0012               	return	
  6119  00136A                     l774:
  6120                           
  6121                           ;key.c: 34: else
  6122                           ;key.c: 35: {
  6123                           ;key.c: 36: count = 0;
  6124  00136A  6A11               	clrf	key_press@count,c
  6125  00136C  0012               	return		;funcret
  6126  00136E                     __end_of_key_press:
  6127                           	opt stack 0
  6128                           tosu	equ	0xFFF
  6129                           tosh	equ	0xFFE
  6130                           tosl	equ	0xFFD
  6131                           pclath	equ	0xFFA
  6132                           tblptru	equ	0xFF8
  6133                           tblptrh	equ	0xFF7
  6134                           tblptrl	equ	0xFF6
  6135                           tablat	equ	0xFF5
  6136                           prodh	equ	0xFF4
  6137                           prodl	equ	0xFF3
  6138                           intcon	equ	0xFF2
  6139                           intcon2	equ	0xFF1
  6140                           postinc0	equ	0xFEE
  6141                           wreg	equ	0xFE8
  6142                           indf1	equ	0xFE7
  6143                           plusw1	equ	0xFE3
  6144                           fsr1h	equ	0xFE2
  6145                           fsr1l	equ	0xFE1
  6146                           indf2	equ	0xFDF
  6147                           postinc2	equ	0xFDE
  6148                           postdec2	equ	0xFDD
  6149                           plusw2	equ	0xFDB
  6150                           fsr2h	equ	0xFDA
  6151                           fsr2l	equ	0xFD9
  6152                           status	equ	0xFD8
  6153                           
  6154 ;; *************** function _time_led *****************
  6155 ;; Defined at:
  6156 ;;		line 456 in file "common.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;		None
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;		None
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      void 
  6163 ;; Registers used:
  6164 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;Total ram usage:        0 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    6
  6177 ;; This function calls:
  6178 ;;		_FillBuf
  6179 ;;		_RTOS_DeleteTask
  6180 ;;		_RTOS_SetTask
  6181 ;;		_Update_Matrix
  6182 ;;		_scroll_left
  6183 ;; This function is called by:
  6184 ;;		_main
  6185 ;;		_time_set_min
  6186 ;;		_time_set_hr
  6187 ;;		_time_set_yr
  6188 ;;		_time_set_mt
  6189 ;;		_time_set_dt
  6190 ;;		_time_set_dy
  6191 ;;		_home_temp
  6192 ;;		_RTOS_DispatchTask
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           	psect	text23
  6197  000BD8                     __ptext23:
  6198                           	opt stack 0
  6199  000BD8                     _time_led:
  6200                           	opt stack 23
  6201                           
  6202                           ;common.c: 460: switch (events)
  6203                           
  6204                           ;incstack = 0
  6205  000BD8  D040               	goto	l3964
  6206  000BDA                     l3930:
  6207                           
  6208                           ;common.c: 463: FillBuf();
  6209  000BDA  ECA1  F003         	call	_FillBuf	;wreg free
  6210                           
  6211                           ;common.c: 464: if(((TTime.Ts>2)&&(TTime.Ts<4))||((TTime.Ts>45)&&(TTime.Ts<47)))
  6212  000BDE  0E02               	movlw	2
  6213  000BE0  6436               	cpfsgt	_TTime,c
  6214  000BE2  D003               	goto	l3936
  6215  000BE4  0E03               	movlw	3
  6216  000BE6  6436               	cpfsgt	_TTime,c
  6217  000BE8  D006               	goto	l3940
  6218  000BEA                     l3936:
  6219  000BEA  0E2D               	movlw	45
  6220  000BEC  6436               	cpfsgt	_TTime,c
  6221  000BEE  D041               	goto	l3966
  6222  000BF0  0E2F               	movlw	47
  6223  000BF2  6036               	cpfslt	_TTime,c
  6224  000BF4  D03E               	goto	l3966
  6225  000BF6                     l3940:
  6226                           
  6227                           ;common.c: 465: events = 3;
  6228  000BF6  0E03               	movlw	3
  6229  000BF8  D018               	goto	L4
  6230  000BFA                     l3942:
  6231                           
  6232                           ;common.c: 468: RTOS_DeleteTask(time_led);
  6233  000BFA  D845               	call	PL78	;call to abstracted procedure
  6234  000BFC  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  6235                           
  6236                           ;common.c: 469: RTOS_SetTask(time_set_min, 0, 50);
  6237  000C00  0E14               	movlw	low _time_set_min
  6238  000C02  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  6239  000C04  0E0B               	movlw	high _time_set_min
  6240  000C06  6E50               	movwf	RTOS_SetTask@taskFunc+1,c
  6241  000C08  D838               	call	PL48	;call to abstracted procedure
  6242  000C0A  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  6243                           
  6244                           ;common.c: 470: RTOS_SetTask(default_state, 2000, 0);
  6245  000C0E  EC87  F003         	call	PL2	;call to abstracted procedure
  6246  000C12  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  6247                           
  6248                           ;common.c: 471: TSTime = TTime;
  6249  000C16  EE20  F036         	lfsr	2,_TTime
  6250  000C1A  EE10  F00A         	lfsr	1,_TSTime
  6251  000C1E  0E06               	movlw	6
  6252  000C20                     u2311:
  6253  000C20  CFDB FFE3          	movff	plusw2,plusw1
  6254  000C24  06E8               	decf	wreg,f,c
  6255  000C26  E2FC               	bc	u2311
  6256  000C28                     l3950:
  6257                           
  6258                           ;common.c: 472: events = 5;
  6259  000C28  0E05               	movlw	5
  6260  000C2A                     L4:
  6261  000C2A  6E70               	movwf	_events,c
  6262                           
  6263                           ;common.c: 473: break;
  6264  000C2C  D022               	goto	l3966
  6265  000C2E                     l721:
  6266  000C2E  F000               	nop		;# 
  6267                           
  6268                           ;common.c: 481: break;
  6269  000C30  D020               	goto	l3966
  6270  000C32                     l3952:
  6271                           
  6272                           ;common.c: 485: scroll_left();
  6273  000C32  ECFA  F008         	call	_scroll_left	;wreg free
  6274                           
  6275                           ;common.c: 486: RTOS_DeleteTask(time_led);
  6276  000C36  D827               	call	PL78	;call to abstracted procedure
  6277  000C38  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  6278                           
  6279                           ;common.c: 487: RTOS_SetTask(home_temp, 0, 20);
  6280  000C3C  0E8C               	movlw	low _home_temp
  6281  000C3E  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  6282  000C40  0E03               	movlw	high _home_temp
  6283  000C42  EC0E  F005         	call	PL12	;call to abstracted procedure
  6284  000C46  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  6285  000C4A  D7EE               	goto	l3950
  6286  000C4C                     l3958:
  6287                           
  6288                           ;common.c: 491: events = 5;
  6289  000C4C  0E05               	movlw	5
  6290  000C4E  6E70               	movwf	_events,c
  6291                           
  6292                           ;common.c: 492: RTOS_DeleteTask(default_state);
  6293  000C50  ECB3  F001         	call	PL28	;call to abstracted procedure
  6294  000C54  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  6295                           
  6296                           ;common.c: 493: break;
  6297  000C58  D00C               	goto	l3966
  6298  000C5A                     l3964:
  6299  000C5A  5070               	movf	_events,w,c
  6300                           
  6301                           ; Switch size 1, requested type "space"
  6302                           ; Number of cases is 6, Range of values is 1 to 6
  6303                           ; switch strategies available:
  6304                           ; Name         Instructions Cycles
  6305                           ; simple_byte           19    10 (average)
  6306                           ;	Chosen strategy is simple_byte
  6307  000C5C  0A01               	xorlw	1	; case 1
  6308  000C5E  E0CD               	bz	l3942
  6309  000C60  0A03               	xorlw	3	; case 2
  6310  000C62  E0E5               	bz	l721
  6311  000C64  0A01               	xorlw	1	; case 3
  6312  000C66  E0E5               	bz	l3952
  6313  000C68  0A07               	xorlw	7	; case 4
  6314  000C6A  E0F0               	bz	l3958
  6315  000C6C  0A01               	xorlw	1	; case 5
  6316  000C6E  E0B5               	bz	l3930
  6317  000C70  0A03               	xorlw	3	; case 6
  6318  000C72                     l3966:
  6319                           
  6320                           ;common.c: 498: Update_Matrix(Dis_Buff);
  6321  000C72  0E16               	movlw	low _Dis_Buff
  6322  000C74  6E51               	movwf	Update_Matrix@buf,c
  6323  000C76  EF14  F00A         	goto	_Update_Matrix	;wreg free
  6324  000C7A                     __end_of_time_led:
  6325                           	opt stack 0
  6326  000C7A                     PL48:
  6327                           	opt stack 24
  6328  000C7A  6A52               	clrf	RTOS_SetTask@taskDelay+1,c
  6329  000C7C  6A51               	clrf	RTOS_SetTask@taskDelay,c
  6330  000C7E  6A54               	clrf	RTOS_SetTask@taskPeriod+1,c
  6331  000C80  0E32               	movlw	50
  6332  000C82  6E53               	movwf	RTOS_SetTask@taskPeriod,c
  6333  000C84  0C32               	retlw	50
  6334  000C86                     __end_ofPL48:
  6335                           	opt stack 0
  6336  000C86                     PL78:
  6337                           	opt stack 23
  6338  000C86  0ED8               	movlw	low _time_led
  6339  000C88  6E4F               	movwf	RTOS_DeleteTask@taskFunc,c
  6340  000C8A  0E0B               	movlw	high _time_led
  6341  000C8C  6E50               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6342  000C8E  0012               	return	
  6343  000C90                     __end_ofPL78:
  6344                           	opt stack 0
  6345                           tosu	equ	0xFFF
  6346                           tosh	equ	0xFFE
  6347                           tosl	equ	0xFFD
  6348                           pclath	equ	0xFFA
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           intcon	equ	0xFF2
  6356                           intcon2	equ	0xFF1
  6357                           postinc0	equ	0xFEE
  6358                           wreg	equ	0xFE8
  6359                           indf1	equ	0xFE7
  6360                           plusw1	equ	0xFE3
  6361                           fsr1h	equ	0xFE2
  6362                           fsr1l	equ	0xFE1
  6363                           indf2	equ	0xFDF
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           plusw2	equ	0xFDB
  6367                           fsr2h	equ	0xFDA
  6368                           fsr2l	equ	0xFD9
  6369                           status	equ	0xFD8
  6370                           
  6371 ;; *************** function _time_set_yr *****************
  6372 ;; Defined at:
  6373 ;;		line 138 in file "common.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    7
  6394 ;; This function calls:
  6395 ;;		_RTOS_DeleteTask
  6396 ;;		_RTOS_SetTask
  6397 ;;		_Update_Matrix
  6398 ;;		___lbdiv
  6399 ;;		___lbmod
  6400 ;;		_putchar_b_buf
  6401 ;;		_setDate
  6402 ;; This function is called by:
  6403 ;;		_time_set_hr
  6404 ;;		_RTOS_DispatchTask
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           	psect	text24
  6409  00093A                     __ptext24:
  6410                           	opt stack 0
  6411  00093A                     _time_set_yr:
  6412                           	opt stack 22
  6413                           
  6414                           ;common.c: 140: switch (events)
  6415                           
  6416                           ;incstack = 0
  6417  00093A  D03B               	goto	l3672
  6418  00093C                     l3630:
  6419                           
  6420                           ;common.c: 146: RTOS_DeleteTask(time_set_yr);
  6421  00093C  D876               	call	PL64	;call to abstracted procedure
  6422  00093E  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  6423                           
  6424                           ;common.c: 147: RTOS_SetTask(time_set_mt, 0, 20);
  6425  000942  0E12               	movlw	low _time_set_mt
  6426  000944  6E4F               	movwf	RTOS_SetTask@taskFunc,c
  6427  000946  0E00               	movlw	high _time_set_mt
  6428  000948  D869               	call	PL12	;call to abstracted procedure
  6429  00094A  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  6430                           
  6431                           ;common.c: 148: RTOS_SetTask(default_state, 2000, 0);
  6432  00094E  EC87  F003         	call	PL2	;call to abstracted procedure
  6433  000952  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  6434                           
  6435                           ;common.c: 149: events = 5;
  6436  000956  0E05               	movlw	5
  6437  000958  6E70               	movwf	_events,c
  6438                           
  6439                           ;common.c: 150: en_put=0;
  6440  00095A  906F               	bcf	_en_put/(0+8),_en_put& (0+7),c
  6441                           
  6442                           ;common.c: 151: break;
  6443  00095C  D034               	goto	l630
  6444  00095E                     l3640:
  6445                           
  6446                           ;common.c: 153: RTOS_DeleteTask(time_set_yr);
  6447  00095E  D865               	call	PL64	;call to abstracted procedure
  6448  000960  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  6449                           
  6450                           ;common.c: 154: RTOS_DeleteTask(default_state);
  6451  000964  ECB3  F001         	call	PL28	;call to abstracted procedure
  6452  000968  ECF3  F007         	call	_RTOS_DeleteTask	;wreg free
  6453                           
  6454                           ;common.c: 155: RTOS_SetTask(time_led, 0, 20);
  6455  00096C  ECA9  F001         	call	PL10	;call to abstracted procedure
  6456  000970  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  6457                           
  6458                           ;common.c: 156: events = 5;
  6459  000974  0E05               	movlw	5
  6460  000976  6E70               	movwf	_events,c
  6461                           
  6462                           ;common.c: 157: break;
  6463  000978  D026               	goto	l630
  6464  00097A                     l3646:
  6465                           
  6466                           ;common.c: 159: TSTime.Tyr++;
  6467  00097A  2A10               	incf	_TSTime+6,f,c
  6468                           
  6469                           ;common.c: 160: if(TSTime.Tyr > 99) TSTime.Tyr = 0;
  6470  00097C  0E63               	movlw	99
  6471  00097E  6410               	cpfsgt	_TSTime+6,c
  6472  000980  D001               	goto	l3652
  6473  000982  6A10               	clrf	_TSTime+6,c
  6474  000984                     l3652:
  6475                           
  6476                           ;common.c: 161: RTOS_SetTask(default_state, 2000, 0);
  6477  000984  EC87  F003         	call	PL2	;call to abstracted procedure
  6478  000988  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  6479                           
  6480                           ;common.c: 162: events = 5;
  6481                           
  6482                           ;common.c: 163: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6483  00098C  EC9F  F001         	call	PL8	;call to abstracted procedure
  6484  000990  EC32  F00A         	call	_setDate
  6485                           
  6486                           ;common.c: 164: break;
  6487  000994  D018               	goto	l630
  6488  000996                     l3658:
  6489                           
  6490                           ;common.c: 166: TSTime.Tyr--;
  6491  000996  0610               	decf	_TSTime+6,f,c
  6492                           
  6493                           ;common.c: 167: if(TSTime.Tyr == 255) TSTime.Tyr = 99;
  6494  000998  2810               	incf	_TSTime+6,w,c
  6495  00099A  E102               	bnz	l3664
  6496  00099C  0E63               	movlw	99
  6497  00099E  6E10               	movwf	_TSTime+6,c
  6498  0009A0                     l3664:
  6499                           
  6500                           ;common.c: 168: RTOS_SetTask(default_state, 2000, 0);
  6501  0009A0  EC87  F003         	call	PL2	;call to abstracted procedure
  6502  0009A4  EC2F  F007         	call	_RTOS_SetTask	;wreg free
  6503                           
  6504                           ;common.c: 169: events = 5;
  6505                           
  6506                           ;common.c: 170: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6507  0009A8  EC9F  F001         	call	PL8	;call to abstracted procedure
  6508  0009AC  EC32  F00A         	call	_setDate
  6509                           
  6510                           ;common.c: 171: break;
  6511  0009B0  D00A               	goto	l630
  6512  0009B2                     l3672:
  6513  0009B2  5070               	movf	_events,w,c
  6514                           
  6515                           ; Switch size 1, requested type "space"
  6516                           ; Number of cases is 5, Range of values is 1 to 5
  6517                           ; switch strategies available:
  6518                           ; Name         Instructions Cycles
  6519                           ; simple_byte           16     9 (average)
  6520                           ;	Chosen strategy is simple_byte
  6521  0009B4  0A01               	xorlw	1	; case 1
  6522  0009B6  E0C2               	bz	l3630
  6523  0009B8  0A03               	xorlw	3	; case 2
  6524  0009BA  E0DF               	bz	l3646
  6525  0009BC  0A01               	xorlw	1	; case 3
  6526  0009BE  E0EB               	bz	l3658
  6527  0009C0  0A07               	xorlw	7	; case 4
  6528  0009C2  E0CD               	bz	l3640
  6529  0009C4  0A01               	xorlw	1	; case 5
  6530  0009C6                     l630:
  6531                           
  6532                           ;common.c: 173: if(en_put)
  6533  0009C6  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6534  0009C8  D023               	goto	l3676
  6535                           
  6536                           ;common.c: 174: {
  6537                           ;common.c: 175: putchar_b_buf(0,'Ð');
  6538  0009CA  0ED0               	movlw	208
  6539  0009CC  6E57               	movwf	putchar_b_buf@symbol,c
  6540  0009CE  0E00               	movlw	0
  6541  0009D0  EC60  F008         	call	_putchar_b_buf
  6542                           
  6543                           ;common.c: 176: putchar_b_buf(6,'ê');
  6544  0009D4  0EEA               	movlw	234
  6545  0009D6  6E57               	movwf	putchar_b_buf@symbol,c
  6546  0009D8  0E06               	movlw	6
  6547  0009DA  EC60  F008         	call	_putchar_b_buf
  6548                           
  6549                           ;common.c: 177: putchar_b_buf(12,':');
  6550  0009DE  ECBB  F001         	call	PL92	;call to abstracted procedure
  6551  0009E2  EC60  F008         	call	_putchar_b_buf
  6552                           
  6553                           ;common.c: 178: putchar_b_buf(18,(TSTime.Tyr/10) % 10 + 48);
  6554  0009E6  0E0A               	movlw	10
  6555  0009E8  6E53               	movwf	___lbmod@divisor,c
  6556  0009EA  6E4F               	movwf	___lbdiv@divisor,c
  6557  0009EC  5010               	movf	_TSTime+6,w,c
  6558  0009EE  EC87  F00A         	call	___lbdiv
  6559  0009F2  EC62  F00B         	call	___lbmod
  6560  0009F6  EC9B  F003         	call	PL116	;call to abstracted procedure
  6561  0009FA  EC60  F008         	call	_putchar_b_buf
  6562                           
  6563                           ;common.c: 179: putchar_b_buf(24,TSTime.Tyr % 10 + 48);
  6564  0009FE  0E0A               	movlw	10
  6565  000A00  6E53               	movwf	___lbmod@divisor,c
  6566  000A02  5010               	movf	_TSTime+6,w,c
  6567  000A04  EC62  F00B         	call	___lbmod
  6568  000A08  EC9E  F003         	call	PL122	;call to abstracted procedure
  6569  000A0C  EC60  F008         	call	_putchar_b_buf
  6570  000A10                     l3676:
  6571                           
  6572                           ;common.c: 180: }
  6573                           ;common.c: 181: Update_Matrix(Dis_Buff);
  6574  000A10  0E16               	movlw	low _Dis_Buff
  6575  000A12  6E51               	movwf	Update_Matrix@buf,c
  6576  000A14  EC14  F00A         	call	_Update_Matrix	;wreg free
  6577                           
  6578                           ;common.c: 182: en_put=1;
  6579  000A18  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6580  000A1A  0012               	return		;funcret
  6581  000A1C                     __end_of_time_set_yr:
  6582                           	opt stack 0
  6583  000A1C                     PL12:
  6584                           	opt stack 23
  6585  000A1C  6E50               	movwf	RTOS_SetTask@taskFunc+1,c
  6586  000A1E  6A52               	clrf	RTOS_SetTask@taskDelay+1,c
  6587  000A20  6A51               	clrf	RTOS_SetTask@taskDelay,c
  6588  000A22  6A54               	clrf	RTOS_SetTask@taskPeriod+1,c
  6589  000A24  0E14               	movlw	20
  6590  000A26  6E53               	movwf	RTOS_SetTask@taskPeriod,c
  6591  000A28  0C14               	retlw	20
  6592  000A2A                     __end_ofPL12:
  6593                           	opt stack 0
  6594  000A2A                     PL64:
  6595                           	opt stack 22
  6596  000A2A  0E3A               	movlw	low _time_set_yr
  6597  000A2C  6E4F               	movwf	RTOS_DeleteTask@taskFunc,c
  6598  000A2E  0E09               	movlw	high _time_set_yr
  6599  000A30  6E50               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6600  000A32  0012               	return	
  6601  000A34                     __end_ofPL64:
  6602                           	opt stack 0
  6603                           tosu	equ	0xFFF
  6604                           tosh	equ	0xFFE
  6605                           tosl	equ	0xFFD
  6606                           pclath	equ	0xFFA
  6607                           tblptru	equ	0xFF8
  6608                           tblptrh	equ	0xFF7
  6609                           tblptrl	equ	0xFF6
  6610                           tablat	equ	0xFF5
  6611                           prodh	equ	0xFF4
  6612                           prodl	equ	0xFF3
  6613                           intcon	equ	0xFF2
  6614                           intcon2	equ	0xFF1
  6615                           postinc0	equ	0xFEE
  6616                           wreg	equ	0xFE8
  6617                           indf1	equ	0xFE7
  6618                           plusw1	equ	0xFE3
  6619                           fsr1h	equ	0xFE2
  6620                           fsr1l	equ	0xFE1
  6621                           indf2	equ	0xFDF
  6622                           postinc2	equ	0xFDE
  6623                           postdec2	equ	0xFDD
  6624                           plusw2	equ	0xFDB
  6625                           fsr2h	equ	0xFDA
  6626                           fsr2l	equ	0xFD9
  6627                           status	equ	0xFD8
  6628                           
  6629 ;; *************** function _setTime *****************
  6630 ;; Defined at:
  6631 ;;		line 71 in file "ds3231.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  hSet            1    wreg     unsigned char 
  6634 ;;  mSet            1   27[COMRAM] unsigned char 
  6635 ;;  sSet            1   28[COMRAM] unsigned char 
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;  hSet            1   29[COMRAM] unsigned char 
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  1    wreg      void 
  6640 ;; Registers used:
  6641 ;;		wreg, status,2, status,0, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6651 ;;Total ram usage:        3 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    6
  6654 ;; This function calls:
  6655 ;;		_DS3231_Write
  6656 ;;		_decimal_to_bcd
  6657 ;; This function is called by:
  6658 ;;		_time_set_hr
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text25
  6663  0015A4                     __ptext25:
  6664                           	opt stack 0
  6665  0015A4                     _setTime:
  6666                           	opt stack 22
  6667                           
  6668                           ;incstack = 0
  6669                           ;setTime@hSet stored from wreg
  6670  0015A4  6E5E               	movwf	setTime@hSet,c
  6671                           
  6672                           ;ds3231.c: 73: DS3231_Write(0x00, (decimal_to_bcd(sSet)));
  6673  0015A6  505D               	movf	setTime@sSet,w,c
  6674  0015A8  EC4F  F00B         	call	_decimal_to_bcd
  6675  0015AC  6E5A               	movwf	DS3231_Write@value,c
  6676  0015AE  0E00               	movlw	0
  6677  0015B0  ECF2  F00B         	call	_DS3231_Write
  6678                           
  6679                           ;ds3231.c: 74: DS3231_Write(0x01, (decimal_to_bcd(mSet)));
  6680  0015B4  505C               	movf	setTime@mSet,w,c
  6681  0015B6  EC4F  F00B         	call	_decimal_to_bcd
  6682  0015BA  6E5A               	movwf	DS3231_Write@value,c
  6683  0015BC  0E01               	movlw	1
  6684  0015BE  ECF2  F00B         	call	_DS3231_Write
  6685                           
  6686                           ;ds3231.c: 75: DS3231_Write(0x02, (0x3F & (decimal_to_bcd(hSet))));
  6687  0015C2  505E               	movf	setTime@hSet,w,c
  6688  0015C4  EC4F  F00B         	call	_decimal_to_bcd
  6689  0015C8  0B3F               	andlw	63
  6690  0015CA  6E5A               	movwf	DS3231_Write@value,c
  6691  0015CC  0E02               	movlw	2
  6692  0015CE  EFF2  F00B         	goto	_DS3231_Write
  6693  0015D2                     __end_of_setTime:
  6694                           	opt stack 0
  6695                           tosu	equ	0xFFF
  6696                           tosh	equ	0xFFE
  6697                           tosl	equ	0xFFD
  6698                           pclath	equ	0xFFA
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           intcon2	equ	0xFF1
  6707                           postinc0	equ	0xFEE
  6708                           wreg	equ	0xFE8
  6709                           indf1	equ	0xFE7
  6710                           plusw1	equ	0xFE3
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           plusw2	equ	0xFDB
  6717                           fsr2h	equ	0xFDA
  6718                           fsr2l	equ	0xFD9
  6719                           status	equ	0xFD8
  6720                           
  6721 ;; *************** function _setDate *****************
  6722 ;; Defined at:
  6723 ;;		line 79 in file "ds3231.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;  daySet          1    wreg     unsigned char 
  6726 ;;  dateSet         1   27[COMRAM] unsigned char 
  6727 ;;  monthSet        1   28[COMRAM] unsigned char 
  6728 ;;  yearSet         1   29[COMRAM] unsigned char 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  daySet          1   30[COMRAM] unsigned char 
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      void 
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, status,0, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6740 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;Total ram usage:        4 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    6
  6747 ;; This function calls:
  6748 ;;		_DS3231_Write
  6749 ;;		_decimal_to_bcd
  6750 ;; This function is called by:
  6751 ;;		_time_set_yr
  6752 ;;		_time_set_mt
  6753 ;;		_time_set_dt
  6754 ;;		_time_set_dy
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	text26
  6759  001464                     __ptext26:
  6760                           	opt stack 0
  6761  001464                     _setDate:
  6762                           	opt stack 22
  6763                           
  6764                           ;incstack = 0
  6765                           ;setDate@daySet stored from wreg
  6766  001464  6E5F               	movwf	setDate@daySet,c
  6767                           
  6768                           ;ds3231.c: 81: DS3231_Write(0x03, (decimal_to_bcd(daySet)));
  6769  001466  505F               	movf	setDate@daySet,w,c
  6770  001468  EC4F  F00B         	call	_decimal_to_bcd
  6771  00146C  6E5A               	movwf	DS3231_Write@value,c
  6772  00146E  0E03               	movlw	3
  6773  001470  ECF2  F00B         	call	_DS3231_Write
  6774                           
  6775                           ;ds3231.c: 82: DS3231_Write(0x04, (decimal_to_bcd(dateSet)));
  6776  001474  505C               	movf	setDate@dateSet,w,c
  6777  001476  EC4F  F00B         	call	_decimal_to_bcd
  6778  00147A  6E5A               	movwf	DS3231_Write@value,c
  6779  00147C  0E04               	movlw	4
  6780  00147E  ECF2  F00B         	call	_DS3231_Write
  6781                           
  6782                           ;ds3231.c: 83: DS3231_Write(0x05, (decimal_to_bcd(monthSet)));
  6783  001482  505D               	movf	setDate@monthSet,w,c
  6784  001484  EC4F  F00B         	call	_decimal_to_bcd
  6785  001488  6E5A               	movwf	DS3231_Write@value,c
  6786  00148A  0E05               	movlw	5
  6787  00148C  ECF2  F00B         	call	_DS3231_Write
  6788                           
  6789                           ;ds3231.c: 84: DS3231_Write(0x06, (decimal_to_bcd(yearSet)));
  6790  001490  505E               	movf	setDate@yearSet,w,c
  6791  001492  EC4F  F00B         	call	_decimal_to_bcd
  6792  001496  6E5A               	movwf	DS3231_Write@value,c
  6793  001498  0E06               	movlw	6
  6794  00149A  EFF2  F00B         	goto	_DS3231_Write
  6795  00149E                     __end_of_setDate:
  6796                           	opt stack 0
  6797                           tosu	equ	0xFFF
  6798                           tosh	equ	0xFFE
  6799                           tosl	equ	0xFFD
  6800                           pclath	equ	0xFFA
  6801                           tblptru	equ	0xFF8
  6802                           tblptrh	equ	0xFF7
  6803                           tblptrl	equ	0xFF6
  6804                           tablat	equ	0xFF5
  6805                           prodh	equ	0xFF4
  6806                           prodl	equ	0xFF3
  6807                           intcon	equ	0xFF2
  6808                           intcon2	equ	0xFF1
  6809                           postinc0	equ	0xFEE
  6810                           wreg	equ	0xFE8
  6811                           indf1	equ	0xFE7
  6812                           plusw1	equ	0xFE3
  6813                           fsr1h	equ	0xFE2
  6814                           fsr1l	equ	0xFE1
  6815                           indf2	equ	0xFDF
  6816                           postinc2	equ	0xFDE
  6817                           postdec2	equ	0xFDD
  6818                           plusw2	equ	0xFDB
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           
  6823 ;; *************** function _decimal_to_bcd *****************
  6824 ;; Defined at:
  6825 ;;		line 10 in file "ds3231.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;  d               1    wreg     unsigned char 
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;  d               1   24[COMRAM] unsigned char 
  6830 ;; Return value:  Size  Location     Type
  6831 ;;                  1    wreg      unsigned char 
  6832 ;; Registers used:
  6833 ;;		wreg, status,2, status,0, cstack
  6834 ;; Tracked objects:
  6835 ;;		On entry : 0/0
  6836 ;;		On exit  : 0/0
  6837 ;;		Unchanged: 0/0
  6838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;Total ram usage:        3 bytes
  6844 ;; Hardware stack levels used:    1
  6845 ;; Hardware stack levels required when called:    4
  6846 ;; This function calls:
  6847 ;;		___lbdiv
  6848 ;;		___lbmod
  6849 ;; This function is called by:
  6850 ;;		_setTime
  6851 ;;		_setDate
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text27
  6856  00169E                     __ptext27:
  6857                           	opt stack 0
  6858  00169E                     _decimal_to_bcd:
  6859                           	opt stack 23
  6860                           
  6861                           ;incstack = 0
  6862                           ;decimal_to_bcd@d stored from wreg
  6863  00169E  6E59               	movwf	decimal_to_bcd@d,c
  6864                           
  6865                           ;ds3231.c: 12: return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
  6866  0016A0  0E0A               	movlw	10
  6867  0016A2  6E53               	movwf	___lbmod@divisor,c
  6868  0016A4  5059               	movf	decimal_to_bcd@d,w,c
  6869  0016A6  EC62  F00B         	call	___lbmod
  6870  0016AA  6E57               	movwf	??_decimal_to_bcd& (0+255),c
  6871  0016AC  0E0F               	movlw	15
  6872  0016AE  1657               	andwf	??_decimal_to_bcd,f,c
  6873  0016B0  0E0A               	movlw	10
  6874  0016B2  6E4F               	movwf	___lbdiv@divisor,c
  6875  0016B4  5059               	movf	decimal_to_bcd@d,w,c
  6876  0016B6  EC87  F00A         	call	___lbdiv
  6877  0016BA  6E58               	movwf	(??_decimal_to_bcd+1)& (0+255),c
  6878  0016BC  3858               	swapf	??_decimal_to_bcd+1,w,c
  6879  0016BE  0BF0               	andlw	240
  6880  0016C0  1057               	iorwf	??_decimal_to_bcd,w,c
  6881  0016C2  0012               	return		;funcret
  6882  0016C4                     __end_of_decimal_to_bcd:
  6883                           	opt stack 0
  6884                           tosu	equ	0xFFF
  6885                           tosh	equ	0xFFE
  6886                           tosl	equ	0xFFD
  6887                           pclath	equ	0xFFA
  6888                           tblptru	equ	0xFF8
  6889                           tblptrh	equ	0xFF7
  6890                           tblptrl	equ	0xFF6
  6891                           tablat	equ	0xFF5
  6892                           prodh	equ	0xFF4
  6893                           prodl	equ	0xFF3
  6894                           intcon	equ	0xFF2
  6895                           intcon2	equ	0xFF1
  6896                           postinc0	equ	0xFEE
  6897                           wreg	equ	0xFE8
  6898                           indf1	equ	0xFE7
  6899                           plusw1	equ	0xFE3
  6900                           fsr1h	equ	0xFE2
  6901                           fsr1l	equ	0xFE1
  6902                           indf2	equ	0xFDF
  6903                           postinc2	equ	0xFDE
  6904                           postdec2	equ	0xFDD
  6905                           plusw2	equ	0xFDB
  6906                           fsr2h	equ	0xFDA
  6907                           fsr2l	equ	0xFD9
  6908                           status	equ	0xFD8
  6909                           
  6910 ;; *************** function _DS3231_Write *****************
  6911 ;; Defined at:
  6912 ;;		line 28 in file "ds3231.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  address         1    wreg     unsigned char 
  6915 ;;  value           1   25[COMRAM] unsigned char 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  address         1   26[COMRAM] unsigned char 
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      void 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6927 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;Total ram usage:        2 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    5
  6934 ;; This function calls:
  6935 ;;		_I2C_start
  6936 ;;		_I2C_stop
  6937 ;;		_I2C_write
  6938 ;; This function is called by:
  6939 ;;		_DS3231_init
  6940 ;;		_setTime
  6941 ;;		_setDate
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text28
  6946  0017E4                     __ptext28:
  6947                           	opt stack 0
  6948  0017E4                     _DS3231_Write:
  6949                           	opt stack 23
  6950                           
  6951                           ;incstack = 0
  6952                           ;DS3231_Write@address stored from wreg
  6953  0017E4  6E5B               	movwf	DS3231_Write@address,c
  6954                           
  6955                           ;ds3231.c: 30: I2C_start(0xD0,0);
  6956  0017E6  6A50               	clrf	I2C_start@_R_W,c
  6957  0017E8  0ED0               	movlw	208
  6958  0017EA  ECE9  F00A         	call	_I2C_start
  6959                           
  6960                           ;ds3231.c: 31: I2C_write(address);
  6961  0017EE  505B               	movf	DS3231_Write@address,w,c
  6962  0017F0  ECE4  F00B         	call	_I2C_write
  6963                           
  6964                           ;ds3231.c: 32: I2C_write(value);
  6965  0017F4  505A               	movf	DS3231_Write@value,w,c
  6966  0017F6  ECE4  F00B         	call	_I2C_write
  6967                           
  6968                           ;ds3231.c: 33: I2C_stop();
  6969  0017FA  EF64  F00C         	goto	_I2C_stop	;wreg free
  6970  0017FE                     __end_of_DS3231_Write:
  6971                           	opt stack 0
  6972                           tosu	equ	0xFFF
  6973                           tosh	equ	0xFFE
  6974                           tosl	equ	0xFFD
  6975                           pclath	equ	0xFFA
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           intcon2	equ	0xFF1
  6984                           postinc0	equ	0xFEE
  6985                           wreg	equ	0xFE8
  6986                           indf1	equ	0xFE7
  6987                           plusw1	equ	0xFE3
  6988                           fsr1h	equ	0xFE2
  6989                           fsr1l	equ	0xFE1
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           plusw2	equ	0xFDB
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function _putchar_b_buf *****************
  6999 ;; Defined at:
  7000 ;;		line 50 in file "display.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  x               1    wreg     unsigned char 
  7003 ;;  symbol          1   22[COMRAM] unsigned char 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  x               1   26[COMRAM] unsigned char 
  7006 ;;  i               1   28[COMRAM] unsigned char 
  7007 ;;  j               1   27[COMRAM] unsigned char 
  7008 ;;  mask            1   25[COMRAM] unsigned char 
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  1    wreg      void 
  7011 ;; Registers used:
  7012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : 0/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7018 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;Total ram usage:        7 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    4
  7025 ;; This function calls:
  7026 ;;		_pixel_off
  7027 ;;		_pixel_on
  7028 ;; This function is called by:
  7029 ;;		_time_set_min
  7030 ;;		_time_set_hr
  7031 ;;		_time_set_yr
  7032 ;;		_time_set_mt
  7033 ;;		_time_set_dt
  7034 ;;		_time_set_dy
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	text29
  7039  0010C0                     __ptext29:
  7040                           	opt stack 0
  7041  0010C0                     _putchar_b_buf:
  7042                           	opt stack 24
  7043                           
  7044                           ;incstack = 0
  7045                           ;putchar_b_buf@x stored from wreg
  7046  0010C0  6E5B               	movwf	putchar_b_buf@x,c
  7047                           
  7048                           ;display.c: 52: uint8_t i, j, mask=0x01;
  7049  0010C2  0E01               	movlw	1
  7050  0010C4  6E5A               	movwf	putchar_b_buf@mask,c
  7051                           
  7052                           ;display.c: 55: for(i=0; i<5; i++)
  7053  0010C6  6A5D               	clrf	putchar_b_buf@i,c
  7054  0010C8                     l362:
  7055                           
  7056                           ;display.c: 56: {
  7057                           ;display.c: 57: for(j=0;j<8;j++)
  7058  0010C8  6A5C               	clrf	putchar_b_buf@j,c
  7059  0010CA                     l3196:
  7060                           
  7061                           ;display.c: 58: {
  7062                           ;display.c: 59: if(Font[symbol] [i] & mask)
  7063  0010CA  5057               	movf	putchar_b_buf@symbol,w,c
  7064  0010CC  0D05               	mullw	5
  7065  0010CE  0EC7               	movlw	low _Font
  7066  0010D0  6E58               	movwf	??_putchar_b_buf& (0+255),c
  7067  0010D2  0EBA               	movlw	high _Font
  7068  0010D4  6E59               	movwf	(??_putchar_b_buf+1)& (0+255),c
  7069  0010D6  50F3               	movf	prodl,w,c
  7070  0010D8  2658               	addwf	??_putchar_b_buf,f,c
  7071  0010DA  50F4               	movf	prodh,w,c
  7072  0010DC  2259               	addwfc	??_putchar_b_buf+1,f,c
  7073  0010DE  505D               	movf	putchar_b_buf@i,w,c
  7074  0010E0  2658               	addwf	??_putchar_b_buf,f,c
  7075  0010E2  0E00               	movlw	0
  7076  0010E4  2259               	addwfc	??_putchar_b_buf+1,f,c
  7077  0010E6  C058  FFF6         	movff	??_putchar_b_buf,tblptrl
  7078  0010EA  C059  FFF7         	movff	??_putchar_b_buf+1,tblptrh
  7079  0010EE                     	if	0	;tblptru may be non-zero
  7080  0010EE                     	endif
  7081  0010EE                     	if	0	;tblptru may be non-zero
  7082  0010EE                     	endif
  7083  0010EE  0008               	tblrd		*
  7084  0010F0  50F5               	movf	tablat,w,c
  7085  0010F2  145A               	andwf	putchar_b_buf@mask,w,c
  7086  0010F4  E007               	bz	l3200
  7087                           
  7088                           ;display.c: 60: pixel_on(x+i,j);
  7089  0010F6  C05C  F04F         	movff	putchar_b_buf@j,pixel_on@y
  7090  0010FA  505B               	movf	putchar_b_buf@x,w,c
  7091  0010FC  245D               	addwf	putchar_b_buf@i,w,c
  7092  0010FE  EC99  F00B         	call	_pixel_on
  7093  001102  D006               	goto	l3202
  7094  001104                     l3200:
  7095                           
  7096                           ;display.c: 61: else
  7097                           ;display.c: 62: pixel_off(x+i,j);
  7098  001104  C05C  F04F         	movff	putchar_b_buf@j,pixel_off@y
  7099  001108  505B               	movf	putchar_b_buf@x,w,c
  7100  00110A  245D               	addwf	putchar_b_buf@i,w,c
  7101  00110C  EC27  F00B         	call	_pixel_off
  7102  001110                     l3202:
  7103                           
  7104                           ;display.c: 64: mask = mask<<1;
  7105  001110  90D8               	bcf	status,0,c
  7106  001112  365A               	rlcf	putchar_b_buf@mask,f,c
  7107  001114  2A5C               	incf	putchar_b_buf@j,f,c
  7108  001116  0E07               	movlw	7
  7109  001118  645C               	cpfsgt	putchar_b_buf@j,c
  7110  00111A  D7D7               	goto	l3196
  7111                           
  7112                           ;display.c: 65: };
  7113                           ;display.c: 67: mask=0x01;
  7114  00111C  0E01               	movlw	1
  7115  00111E  6E5A               	movwf	putchar_b_buf@mask,c
  7116  001120  2A5D               	incf	putchar_b_buf@i,f,c
  7117  001122  0E04               	movlw	4
  7118  001124  645D               	cpfsgt	putchar_b_buf@i,c
  7119  001126  D7D0               	goto	l362
  7120  001128  0C04               	retlw	4
  7121  00112A                     __end_of_putchar_b_buf:
  7122                           	opt stack 0
  7123                           tosu	equ	0xFFF
  7124                           tosh	equ	0xFFE
  7125                           tosl	equ	0xFFD
  7126                           pclath	equ	0xFFA
  7127                           tblptru	equ	0xFF8
  7128                           tblptrh	equ	0xFF7
  7129                           tblptrl	equ	0xFF6
  7130                           tablat	equ	0xFF5
  7131                           prodh	equ	0xFF4
  7132                           prodl	equ	0xFF3
  7133                           intcon	equ	0xFF2
  7134                           intcon2	equ	0xFF1
  7135                           postinc0	equ	0xFEE
  7136                           wreg	equ	0xFE8
  7137                           indf1	equ	0xFE7
  7138                           plusw1	equ	0xFE3
  7139                           fsr1h	equ	0xFE2
  7140                           fsr1l	equ	0xFE1
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           plusw2	equ	0xFDB
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function _FillBuf *****************
  7150 ;; Defined at:
  7151 ;;		line 156 in file "display.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;		None
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  i               1   24[COMRAM] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  1    wreg      void 
  7158 ;; Registers used:
  7159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;Total ram usage:        3 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    4
  7172 ;; This function calls:
  7173 ;;		___lbdiv
  7174 ;;		___lbmod
  7175 ;; This function is called by:
  7176 ;;		_time_led
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           	psect	text30
  7181  000742                     __ptext30:
  7182                           	opt stack 0
  7183  000742                     _FillBuf:
  7184                           	opt stack 24
  7185                           
  7186                           ;display.c: 158: uint8_t i;
  7187                           ;display.c: 160: for(i=0; i<5; ++i)
  7188                           
  7189                           ;incstack = 0
  7190  000742  6A59               	clrf	FillBuf@i,c
  7191  000744                     l3280:
  7192                           
  7193                           ;display.c: 161: {
  7194                           ;display.c: 162: Dis_Buff[i] = Font[(TTime.Thr/10) % 10 + 48][i];
  7195  000744  EC72  F002         	call	PL76	;call to abstracted procedure
  7196  000748  EC87  F00A         	call	___lbdiv
  7197  00074C  EC62  F00B         	call	___lbmod
  7198  000750  D839               	call	PL4	;call to abstracted procedure
  7199  000752  0F16               	addlw	low _Dis_Buff
  7200                           
  7201                           ;display.c: 163: Dis_Buff[i + 6] = Font[TTime.Thr % 10 + 48][i];
  7202  000754  D866               	call	PL24	;call to abstracted procedure
  7203  000756  5038               	movf	_TTime+2,w,c
  7204  000758  EC62  F00B         	call	___lbmod
  7205  00075C  D833               	call	PL4	;call to abstracted procedure
  7206  00075E  0F1C               	addlw	low (_Dis_Buff+6)
  7207                           
  7208                           ;display.c: 164: Dis_Buff[i + 13] = Font[(TTime.Tmin/10) % 10 + 48][i];
  7209  000760  D860               	call	PL24	;call to abstracted procedure
  7210  000762  6E4F               	movwf	___lbdiv@divisor,c
  7211  000764  5037               	movf	_TTime+1,w,c
  7212  000766  EC87  F00A         	call	___lbdiv
  7213  00076A  EC62  F00B         	call	___lbmod
  7214  00076E  D82A               	call	PL4	;call to abstracted procedure
  7215  000770  0F23               	addlw	low (_Dis_Buff+13)
  7216                           
  7217                           ;display.c: 165: Dis_Buff[i + 19] = Font[TTime.Tmin % 10 + 48][i];
  7218  000772  D857               	call	PL24	;call to abstracted procedure
  7219  000774  5037               	movf	_TTime+1,w,c
  7220  000776  EC62  F00B         	call	___lbmod
  7221  00077A  D824               	call	PL4	;call to abstracted procedure
  7222  00077C  0F29               	addlw	low (_Dis_Buff+19)
  7223  00077E  6ED9               	movwf	fsr2l,c
  7224  000780  D858               	call	PL30	;call to abstracted procedure
  7225  000782  0E04               	movlw	4
  7226  000784  6459               	cpfsgt	FillBuf@i,c
  7227  000786  D7DE               	goto	l3280
  7228                           
  7229                           ;display.c: 167: }
  7230                           ;display.c: 169: for (i=0; i<3; ++i)
  7231  000788  6A59               	clrf	FillBuf@i,c
  7232  00078A                     l3290:
  7233                           
  7234                           ;display.c: 170: {
  7235                           ;display.c: 171: Dis_Buff[i + 25] = FontS[(TTime.Ts/10) % 10 + 1][i];
  7236  00078A  EC6D  F002         	call	PL74	;call to abstracted procedure
  7237  00078E  EC87  F00A         	call	___lbdiv
  7238  000792  EC62  F00B         	call	___lbmod
  7239  000796  D840               	call	PL14	;call to abstracted procedure
  7240  000798  D82C               	call	PL6	;call to abstracted procedure
  7241  00079A  0F2F               	addlw	low (_Dis_Buff+25)
  7242                           
  7243                           ;display.c: 172: Dis_Buff[i + 29] = FontS[TTime.Ts % 10 + 1][i];
  7244  00079C  D842               	call	PL24	;call to abstracted procedure
  7245  00079E  5036               	movf	_TTime,w,c
  7246  0007A0  EC62  F00B         	call	___lbmod
  7247  0007A4  D839               	call	PL14	;call to abstracted procedure
  7248  0007A6  D825               	call	PL6	;call to abstracted procedure
  7249  0007A8  0F33               	addlw	low (_Dis_Buff+29)
  7250  0007AA  6ED9               	movwf	fsr2l,c
  7251  0007AC  D842               	call	PL30	;call to abstracted procedure
  7252  0007AE  0E02               	movlw	2
  7253  0007B0  6459               	cpfsgt	FillBuf@i,c
  7254  0007B2  D7EB               	goto	l3290
  7255                           
  7256                           ;display.c: 173: }
  7257                           ;display.c: 175: Dis_Buff[5] = 0;
  7258  0007B4  6A1B               	clrf	_Dis_Buff+5,c
  7259                           
  7260                           ;display.c: 176: Dis_Buff[11] = 0x80;
  7261  0007B6  0E80               	movlw	128
  7262  0007B8  6E21               	movwf	_Dis_Buff+11,c
  7263                           
  7264                           ;display.c: 177: Dis_Buff[12] = 0x80;
  7265  0007BA  6E22               	movwf	_Dis_Buff+12,c
  7266                           
  7267                           ;display.c: 178: Dis_Buff[18] = 0;
  7268  0007BC  6A28               	clrf	_Dis_Buff+18,c
  7269                           
  7270                           ;display.c: 179: Dis_Buff[24] = 0;
  7271  0007BE  6A2E               	clrf	_Dis_Buff+24,c
  7272                           
  7273                           ;display.c: 180: Dis_Buff[28] = 0;
  7274  0007C0  6A32               	clrf	_Dis_Buff+28,c
  7275  0007C2  0012               	return		;funcret
  7276  0007C4                     __end_of_FillBuf:
  7277                           	opt stack 0
  7278  0007C4                     PL4:
  7279                           	opt stack 24
  7280  0007C4  0D05               	mullw	5
  7281  0007C6  0EC7               	movlw	low _Font
  7282  0007C8  6E57               	movwf	??_FillBuf& (0+255),c
  7283  0007CA  0EBA               	movlw	high _Font
  7284  0007CC  6E58               	movwf	(??_FillBuf+1)& (0+255),c
  7285  0007CE  50F3               	movf	prodl,w,c
  7286  0007D0  2657               	addwf	??_FillBuf,f,c
  7287  0007D2  50F4               	movf	prodh,w,c
  7288  0007D4  2258               	addwfc	??_FillBuf+1,f,c
  7289  0007D6  5059               	movf	FillBuf@i,w,c
  7290  0007D8  2657               	addwf	??_FillBuf,f,c
  7291  0007DA  0E00               	movlw	0
  7292  0007DC  2258               	addwfc	??_FillBuf+1,f,c
  7293  0007DE  0EF0               	movlw	240
  7294  0007E0  2657               	addwf	??_FillBuf,f,c
  7295  0007E2  0E00               	movlw	0
  7296  0007E4  2258               	addwfc	??_FillBuf+1,f,c
  7297  0007E6  C057  FFF6         	movff	??_FillBuf,tblptrl
  7298  0007EA  C058  FFF7         	movff	??_FillBuf+1,tblptrh
  7299  0007EE                     	if	0	;tblptru may be non-zero
  7300  0007EE                     	endif
  7301  0007EE                     	if	0	;tblptru may be non-zero
  7302  0007EE                     	endif
  7303  0007EE  5059               	movf	FillBuf@i,w,c
  7304  0007F0  0012               	return	
  7305  0007F2                     __end_ofPL4:
  7306                           	opt stack 0
  7307  0007F2                     PL6:
  7308                           	opt stack 24
  7309  0007F2  6E58               	movwf	(??_FillBuf+1)& (0+255),c
  7310  0007F4  50F3               	movf	prodl,w,c
  7311  0007F6  2657               	addwf	??_FillBuf,f,c
  7312  0007F8  50F4               	movf	prodh,w,c
  7313  0007FA  2258               	addwfc	??_FillBuf+1,f,c
  7314  0007FC  5059               	movf	FillBuf@i,w,c
  7315  0007FE  2657               	addwf	??_FillBuf,f,c
  7316  000800  0E00               	movlw	0
  7317  000802  2258               	addwfc	??_FillBuf+1,f,c
  7318  000804  0E03               	movlw	3
  7319  000806  2657               	addwf	??_FillBuf,f,c
  7320  000808  0E00               	movlw	0
  7321  00080A  2258               	addwfc	??_FillBuf+1,f,c
  7322  00080C  C057  FFF6         	movff	??_FillBuf,tblptrl
  7323  000810  C058  FFF7         	movff	??_FillBuf+1,tblptrh
  7324  000814                     	if	0	;tblptru may be non-zero
  7325  000814                     	endif
  7326  000814                     	if	0	;tblptru may be non-zero
  7327  000814                     	endif
  7328  000814  5059               	movf	FillBuf@i,w,c
  7329  000816  0012               	return	
  7330  000818                     __end_ofPL6:
  7331                           	opt stack 0
  7332  000818                     PL14:
  7333                           	opt stack 24
  7334  000818  0D03               	mullw	3
  7335  00081A  0EC7               	movlw	low _FontS
  7336  00081C  6E57               	movwf	??_FillBuf& (0+255),c
  7337  00081E  0EBF               	movlw	high _FontS
  7338  000820  0012               	return	
  7339  000822                     __end_ofPL14:
  7340                           	opt stack 0
  7341  000822                     PL24:
  7342                           	opt stack 24
  7343  000822  6ED9               	movwf	fsr2l,c
  7344  000824  6ADA               	clrf	fsr2h,c
  7345  000826  0008               	tblrd		*
  7346  000828  CFF5 FFDF          	movff	tablat,indf2
  7347  00082C  0E0A               	movlw	10
  7348  00082E  6E53               	movwf	___lbmod@divisor,c
  7349  000830  0C0A               	retlw	10
  7350  000832                     __end_ofPL24:
  7351                           	opt stack 0
  7352  000832                     PL30:
  7353                           	opt stack 24
  7354  000832  6ADA               	clrf	fsr2h,c
  7355  000834  0008               	tblrd		*
  7356  000836  CFF5 FFDF          	movff	tablat,indf2
  7357  00083A  2A59               	incf	FillBuf@i,f,c
  7358  00083C  0012               	return	
  7359  00083E                     __end_ofPL30:
  7360                           	opt stack 0
  7361                           tosu	equ	0xFFF
  7362                           tosh	equ	0xFFE
  7363                           tosl	equ	0xFFD
  7364                           pclath	equ	0xFFA
  7365                           tblptru	equ	0xFF8
  7366                           tblptrh	equ	0xFF7
  7367                           tblptrl	equ	0xFF6
  7368                           tablat	equ	0xFF5
  7369                           prodh	equ	0xFF4
  7370                           prodl	equ	0xFF3
  7371                           intcon	equ	0xFF2
  7372                           intcon2	equ	0xFF1
  7373                           postinc0	equ	0xFEE
  7374                           wreg	equ	0xFE8
  7375                           indf1	equ	0xFE7
  7376                           plusw1	equ	0xFE3
  7377                           fsr1h	equ	0xFE2
  7378                           fsr1l	equ	0xFE1
  7379                           indf2	equ	0xFDF
  7380                           postinc2	equ	0xFDE
  7381                           postdec2	equ	0xFDD
  7382                           plusw2	equ	0xFDB
  7383                           fsr2h	equ	0xFDA
  7384                           fsr2l	equ	0xFD9
  7385                           status	equ	0xFD8
  7386                           
  7387 ;; *************** function _scroll_left *****************
  7388 ;; Defined at:
  7389 ;;		line 271 in file "display.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;		None
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;  i               1   24[COMRAM] unsigned char 
  7394 ;;  speed           1   23[COMRAM] unsigned char 
  7395 ;;  k               1   22[COMRAM] unsigned char 
  7396 ;;  j               1   21[COMRAM] unsigned char 
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  1    wreg      void 
  7399 ;; Registers used:
  7400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7408 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;Total ram usage:        5 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    5
  7413 ;; This function calls:
  7414 ;;		_Update_Matrix
  7415 ;; This function is called by:
  7416 ;;		_home_temp
  7417 ;;		_time_led
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text31
  7422  0011F4                     __ptext31:
  7423                           	opt stack 0
  7424  0011F4                     _scroll_left:
  7425                           	opt stack 23
  7426                           
  7427                           ;display.c: 273: uint8_t i,j,k,speed = 100;
  7428                           
  7429                           ;incstack = 0
  7430  0011F4  0E64               	movlw	100
  7431  0011F6  6E58               	movwf	scroll_left@speed,c
  7432                           
  7433                           ;display.c: 276: for (k=0;k<=31;k++)
  7434  0011F8  6A57               	clrf	scroll_left@k,c
  7435  0011FA                     l431:
  7436                           
  7437                           ;display.c: 277: {
  7438                           ;display.c: 278: for (i=0; i<=31; i++)
  7439  0011FA  6A59               	clrf	scroll_left@i,c
  7440  0011FC                     l3316:
  7441                           
  7442                           ;display.c: 279: Dis_Buff[i] = Dis_Buff[i+1];
  7443  0011FC  5059               	movf	scroll_left@i,w,c
  7444  0011FE  0F17               	addlw	low (_Dis_Buff+1)
  7445  001200  6ED9               	movwf	fsr2l,c
  7446  001202  6ADA               	clrf	fsr2h,c
  7447  001204  5059               	movf	scroll_left@i,w,c
  7448  001206  ECED  F007         	call	PL46	;call to abstracted procedure
  7449  00120A  2A59               	incf	scroll_left@i,f,c
  7450  00120C  0E1F               	movlw	31
  7451  00120E  6459               	cpfsgt	scroll_left@i,c
  7452  001210  D7F5               	goto	l3316
  7453                           
  7454                           ;display.c: 281: Dis_Buff[31] = 0;
  7455  001212  6A35               	clrf	_Dis_Buff+31,c
  7456                           
  7457                           ;display.c: 282: Update_Matrix(Dis_Buff);
  7458  001214  0E16               	movlw	low _Dis_Buff
  7459  001216  6E51               	movwf	Update_Matrix@buf,c
  7460  001218  EC14  F00A         	call	_Update_Matrix	;wreg free
  7461                           
  7462                           ;display.c: 283: for(j=0; j<speed; j++)
  7463  00121C  6A56               	clrf	scroll_left@j,c
  7464  00121E  D008               	goto	l435
  7465  001220                     l3326:
  7466                           
  7467                           ;display.c: 284: _delay((unsigned long)((1)*(40000000/4000.0)));
  7468  001220  0E0D               	movlw	13
  7469  001222  6E55               	movwf	??_scroll_left& (0+255),c
  7470  001224  0EFC               	movlw	252
  7471  001226                     u2637:
  7472  001226  2EE8               	decfsz	wreg,f,c
  7473  001228  D7FE               	bra	u2637
  7474  00122A  2E55               	decfsz	??_scroll_left& (0+255),f,c
  7475  00122C  D7FC               	bra	u2637
  7476  00122E  2A56               	incf	scroll_left@j,f,c
  7477  001230                     l435:
  7478  001230  5058               	movf	scroll_left@speed,w,c
  7479  001232  5C56               	subwf	scroll_left@j,w,c
  7480  001234  E3F5               	bnc	l3326
  7481                           
  7482                           ;display.c: 285: if (speed > 10) speed -=10;
  7483  001236  0E0A               	movlw	10
  7484  001238  6458               	cpfsgt	scroll_left@speed,c
  7485  00123A  D001               	goto	l3334
  7486  00123C  5E58               	subwf	scroll_left@speed,f,c
  7487  00123E                     l3334:
  7488  00123E  2A57               	incf	scroll_left@k,f,c
  7489  001240  0E1F               	movlw	31
  7490  001242  6457               	cpfsgt	scroll_left@k,c
  7491  001244  D7DA               	goto	l431
  7492  001246  0C1F               	retlw	31
  7493  001248                     __end_of_scroll_left:
  7494                           	opt stack 0
  7495                           tosu	equ	0xFFF
  7496                           tosh	equ	0xFFE
  7497                           tosl	equ	0xFFD
  7498                           pclath	equ	0xFFA
  7499                           tblptru	equ	0xFF8
  7500                           tblptrh	equ	0xFF7
  7501                           tblptrl	equ	0xFF6
  7502                           tablat	equ	0xFF5
  7503                           prodh	equ	0xFF4
  7504                           prodl	equ	0xFF3
  7505                           intcon	equ	0xFF2
  7506                           intcon2	equ	0xFF1
  7507                           postinc0	equ	0xFEE
  7508                           wreg	equ	0xFE8
  7509                           indf1	equ	0xFE7
  7510                           plusw1	equ	0xFE3
  7511                           fsr1h	equ	0xFE2
  7512                           fsr1l	equ	0xFE1
  7513                           indf2	equ	0xFDF
  7514                           postinc2	equ	0xFDE
  7515                           postdec2	equ	0xFDD
  7516                           plusw2	equ	0xFDB
  7517                           fsr2h	equ	0xFDA
  7518                           fsr2l	equ	0xFD9
  7519                           status	equ	0xFD8
  7520                           
  7521 ;; *************** function _readTemp_Single *****************
  7522 ;; Defined at:
  7523 ;;		line 32 in file "ds18b20.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;  buf             1   20[COMRAM] PTR unsigned int 
  7526 ;;		 -> temperature(2), 
  7527 ;;  time_flag       1   21[COMRAM] PTR unsigned char 
  7528 ;;		 -> time_flag(1), 
  7529 ;;  timer_val       1   22[COMRAM] PTR unsigned char 
  7530 ;;		 -> timer_val(1), 
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;  temp            2   27[COMRAM] unsigned int 
  7533 ;;  i               1   26[COMRAM] unsigned char 
  7534 ;;  tmp             1   25[COMRAM] unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  1    wreg      unsigned char 
  7537 ;; Registers used:
  7538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7544 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;Total ram usage:        9 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    5
  7551 ;; This function calls:
  7552 ;;		_ow_reset
  7553 ;;		_read_byte
  7554 ;;		_write_byte
  7555 ;; This function is called by:
  7556 ;;		_home_temp
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           	psect	text32
  7561  00083E                     __ptext32:
  7562                           	opt stack 0
  7563  00083E                     _readTemp_Single:
  7564                           	opt stack 23
  7565                           
  7566                           ;ds18b20.c: 36: uint8_t i, tmp;
  7567                           ;ds18b20.c: 38: switch(*time_flag)
  7568                           
  7569                           ;incstack = 0
  7570  00083E  D072               	goto	l3438
  7571  000840                     l3366:
  7572                           
  7573                           ;ds18b20.c: 41: if (!ow_reset())
  7574  000840  ECF6  F009         	call	_ow_reset	;wreg free
  7575  000844  0900               	iorlw	0
  7576  000846  A4D8               	btfss	status,2,c
  7577  000848  0012               	return	
  7578                           
  7579                           ;ds18b20.c: 42: {
  7580                           ;ds18b20.c: 43: write_byte(0xCC);
  7581  00084A  0ECC               	movlw	204
  7582  00084C  EC4F  F00A         	call	_write_byte
  7583                           
  7584                           ;ds18b20.c: 44: write_byte(0x4E);
  7585  000850  0E4E               	movlw	78
  7586  000852  EC4F  F00A         	call	_write_byte
  7587                           
  7588                           ;ds18b20.c: 45: write_byte(0x00);
  7589  000856  0E00               	movlw	0
  7590  000858  EC4F  F00A         	call	_write_byte
  7591                           
  7592                           ;ds18b20.c: 46: write_byte(0x00);
  7593  00085C  0E00               	movlw	0
  7594  00085E  EC4F  F00A         	call	_write_byte
  7595                           
  7596                           ;ds18b20.c: 47: write_byte(0x1F);
  7597  000862  0E1F               	movlw	31
  7598  000864  EC4F  F00A         	call	_write_byte
  7599                           
  7600                           ;ds18b20.c: 48: ow_reset();
  7601  000868  ECF6  F009         	call	_ow_reset	;wreg free
  7602                           
  7603                           ;ds18b20.c: 49: write_byte(0xCC);
  7604  00086C  0ECC               	movlw	204
  7605  00086E  EC4F  F00A         	call	_write_byte
  7606                           
  7607                           ;ds18b20.c: 50: write_byte(0x44);
  7608  000872  0E44               	movlw	68
  7609  000874  EC4F  F00A         	call	_write_byte
  7610                           
  7611                           ;ds18b20.c: 51: *timer_val = 0;
  7612  000878  5057               	movf	readTemp_Single@timer_val,w,c
  7613  00087A  6ED9               	movwf	fsr2l,c
  7614  00087C  6ADA               	clrf	fsr2h,c
  7615  00087E  6ADF               	clrf	indf2,c
  7616                           
  7617                           ;ds18b20.c: 52: *time_flag = 2;
  7618  000880  5056               	movf	readTemp_Single@time_flag,w,c
  7619  000882  6ED9               	movwf	fsr2l,c
  7620  000884  6ADA               	clrf	fsr2h,c
  7621  000886  0E02               	movlw	2
  7622  000888  6EDF               	movwf	indf2,c
  7623                           
  7624                           ;ds18b20.c: 53: T1CONbits.TMR1ON = 1;
  7625  00088A  80CD               	bsf	4045,0,c	;volatile
  7626                           
  7627                           ;ds18b20.c: 55: return 0;
  7628  00088C  0C00               	retlw	0
  7629  00088E                     l3386:
  7630                           
  7631                           ;ds18b20.c: 72: ow_reset();
  7632  00088E  ECF6  F009         	call	_ow_reset	;wreg free
  7633                           
  7634                           ;ds18b20.c: 73: write_byte(0xCC);
  7635  000892  0ECC               	movlw	204
  7636  000894  EC4F  F00A         	call	_write_byte
  7637                           
  7638                           ;ds18b20.c: 74: write_byte(0xBE);
  7639  000898  0EBE               	movlw	190
  7640  00089A  EC4F  F00A         	call	_write_byte
  7641                           
  7642                           ;ds18b20.c: 75: for(i=0; i<2; i++)
  7643  00089E  6A5B               	clrf	readTemp_Single@i,c
  7644  0008A0                     l3398:
  7645                           
  7646                           ;ds18b20.c: 76: {
  7647                           ;ds18b20.c: 77: scratch[i]= read_byte();
  7648  0008A0  505B               	movf	readTemp_Single@i,w,c
  7649  0008A2  0F01               	addlw	low _scratch
  7650  0008A4  6ED9               	movwf	fsr2l,c
  7651  0008A6  6ADA               	clrf	fsr2h,c
  7652  0008A8  EC6B  F00A         	call	_read_byte	;wreg free
  7653  0008AC  6EDF               	movwf	indf2,c
  7654  0008AE  2A5B               	incf	readTemp_Single@i,f,c
  7655  0008B0  0E01               	movlw	1
  7656  0008B2  645B               	cpfsgt	readTemp_Single@i,c
  7657  0008B4  D7F5               	goto	l3398
  7658                           
  7659                           ;ds18b20.c: 78: }
  7660                           ;ds18b20.c: 80: temp =(((uint16_t)scratch[1])<<8)|((uint16_t)scratch[0]);
  7661  0008B6  5002               	movf	_scratch+1,w,c
  7662  0008B8  6E58               	movwf	??_readTemp_Single& (0+255),c
  7663  0008BA  5001               	movf	_scratch,w,c
  7664  0008BC  6E5C               	movwf	readTemp_Single@temp,c
  7665  0008BE  C058  F05D         	movff	??_readTemp_Single,readTemp_Single@temp+1
  7666                           
  7667                           ;ds18b20.c: 83: if (temp & 0x8000)
  7668  0008C2  AE5D               	btfss	readTemp_Single@temp+1,7,c
  7669  0008C4  D004               	goto	l3410
  7670                           
  7671                           ;ds18b20.c: 86: minus=1;
  7672  0008C6  6C5C               	negf	readTemp_Single@temp,c
  7673  0008C8  1E5D               	comf	readTemp_Single@temp+1,f,c
  7674  0008CA  B0D8               	btfsc	status,0,c
  7675  0008CC  2A5D               	incf	readTemp_Single@temp+1,f,c
  7676  0008CE                     l3410:
  7677                           
  7678                           ;ds18b20.c: 87: }
  7679                           ;ds18b20.c: 89: tmp = temp & 0x0f;
  7680  0008CE  505C               	movf	readTemp_Single@temp,w,c
  7681  0008D0  0B0F               	andlw	15
  7682  0008D2  6E5A               	movwf	readTemp_Single@tmp,c
  7683                           
  7684                           ;ds18b20.c: 90: tmp = fract[tmp];
  7685  0008D4  0EB7               	movlw	low _fract
  7686  0008D6  245A               	addwf	readTemp_Single@tmp,w,c
  7687  0008D8  6EF6               	movwf	tblptrl,c
  7688  0008DA  6AF7               	clrf	tblptrh,c
  7689  0008DC  0EBA               	movlw	high _fract
  7690  0008DE  22F7               	addwfc	tblptrh,f,c
  7691  0008E0                     	if	0	;There are less than 3 active tblptr bytes
  7692  0008E0                     	endif
  7693  0008E0  0008               	tblrd		*
  7694  0008E2  CFF5 F05A          	movff	tablat,readTemp_Single@tmp
  7695                           
  7696                           ;ds18b20.c: 91: temp = temp>>4;
  7697  0008E6  3A5C               	swapf	readTemp_Single@temp,f,c
  7698  0008E8  3A5D               	swapf	readTemp_Single@temp+1,f,c
  7699  0008EA  0E0F               	movlw	15
  7700  0008EC  165C               	andwf	readTemp_Single@temp,f,c
  7701  0008EE  505D               	movf	readTemp_Single@temp+1,w,c
  7702  0008F0  0BF0               	andlw	240
  7703  0008F2  125C               	iorwf	readTemp_Single@temp,f,c
  7704  0008F4  0E0F               	movlw	15
  7705  0008F6  165D               	andwf	readTemp_Single@temp+1,f,c
  7706                           
  7707                           ;ds18b20.c: 92: temp = (temp & 0x00ff) * 10;
  7708  0008F8  505C               	movf	readTemp_Single@temp,w,c
  7709  0008FA  0D0A               	mullw	10
  7710  0008FC  CFF3 F05C          	movff	prodl,readTemp_Single@temp
  7711  000900  CFF4 F05D          	movff	prodh,readTemp_Single@temp+1
  7712                           
  7713                           ;ds18b20.c: 93: temp = temp + tmp;
  7714  000904  505A               	movf	readTemp_Single@tmp,w,c
  7715  000906  265C               	addwf	readTemp_Single@temp,f,c
  7716  000908  0E00               	movlw	0
  7717  00090A  225D               	addwfc	readTemp_Single@temp+1,f,c
  7718                           
  7719                           ;ds18b20.c: 96: *buf = temp;
  7720  00090C  5055               	movf	readTemp_Single@buf,w,c
  7721  00090E  6ED9               	movwf	fsr2l,c
  7722  000910  6ADA               	clrf	fsr2h,c
  7723  000912  C05C  FFDE         	movff	readTemp_Single@temp,postinc2
  7724  000916  C05D  FFDD         	movff	readTemp_Single@temp+1,postdec2
  7725                           
  7726                           ;ds18b20.c: 97: *time_flag = 0;
  7727  00091A  5056               	movf	readTemp_Single@time_flag,w,c
  7728  00091C  6ED9               	movwf	fsr2l,c
  7729  00091E  6ADA               	clrf	fsr2h,c
  7730  000920  6ADF               	clrf	indf2,c
  7731                           
  7732                           ;ds18b20.c: 99: return 1;
  7733  000922  0C01               	retlw	1
  7734  000924                     l3438:
  7735  000924  5056               	movf	readTemp_Single@time_flag,w,c
  7736  000926  6ED9               	movwf	fsr2l,c
  7737  000928  6ADA               	clrf	fsr2h,c
  7738  00092A  50DF               	movf	indf2,w,c
  7739                           
  7740                           ; Switch size 1, requested type "space"
  7741                           ; Number of cases is 3, Range of values is 0 to 2
  7742                           ; switch strategies available:
  7743                           ; Name         Instructions Cycles
  7744                           ; simple_byte           10     6 (average)
  7745                           ;	Chosen strategy is simple_byte
  7746  00092C  E089               	bz	l3366
  7747  00092E  0A01               	xorlw	1	; case 1
  7748  000930  E0AE               	bz	l3386
  7749  000932  0A03               	xorlw	3	; case 2
  7750  000934  B4D8               	btfsc	status,2,c
  7751  000936  0C00               	retlw	0
  7752  000938  0012               	return		;funcret
  7753  00093A                     __end_of_readTemp_Single:
  7754                           	opt stack 0
  7755                           tosu	equ	0xFFF
  7756                           tosh	equ	0xFFE
  7757                           tosl	equ	0xFFD
  7758                           pclath	equ	0xFFA
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           intcon	equ	0xFF2
  7766                           intcon2	equ	0xFF1
  7767                           postinc0	equ	0xFEE
  7768                           wreg	equ	0xFE8
  7769                           indf1	equ	0xFE7
  7770                           plusw1	equ	0xFE3
  7771                           fsr1h	equ	0xFE2
  7772                           fsr1l	equ	0xFE1
  7773                           indf2	equ	0xFDF
  7774                           postinc2	equ	0xFDE
  7775                           postdec2	equ	0xFDD
  7776                           plusw2	equ	0xFDB
  7777                           fsr2h	equ	0xFDA
  7778                           fsr2l	equ	0xFD9
  7779                           status	equ	0xFD8
  7780                           
  7781 ;; *************** function _write_byte *****************
  7782 ;; Defined at:
  7783 ;;		line 66 in file "onewire.c"
  7784 ;; Parameters:    Size  Location     Type
  7785 ;;  val             1    wreg     unsigned char 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  val             1   17[COMRAM] unsigned char 
  7788 ;;  i               1   19[COMRAM] unsigned char 
  7789 ;;  temp            1   18[COMRAM] unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;Total ram usage:        5 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    4
  7806 ;; This function calls:
  7807 ;;		_write_bit
  7808 ;; This function is called by:
  7809 ;;		_readTemp_Single
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text33
  7814  00149E                     __ptext33:
  7815                           	opt stack 0
  7816  00149E                     _write_byte:
  7817                           	opt stack 23
  7818                           
  7819                           ;incstack = 0
  7820                           ;write_byte@val stored from wreg
  7821  00149E  6E52               	movwf	write_byte@val,c
  7822                           
  7823                           ;onewire.c: 68: uint8_t i;
  7824                           ;onewire.c: 69: uint8_t temp;
  7825                           ;onewire.c: 71: for (i=0;i<8;i++)
  7826  0014A0  6A54               	clrf	write_byte@i,c
  7827  0014A2                     l3054:
  7828                           
  7829                           ;onewire.c: 72: {
  7830                           ;onewire.c: 73: temp = val >> i;
  7831  0014A2  C054  F050         	movff	write_byte@i,??_write_byte
  7832  0014A6  C052  F051         	movff	write_byte@val,??_write_byte+1
  7833  0014AA  2A50               	incf	??_write_byte,f,c
  7834  0014AC  D002               	goto	u1554
  7835  0014AE                     u1555:
  7836  0014AE  90D8               	bcf	status,0,c
  7837  0014B0  3251               	rrcf	??_write_byte+1,f,c
  7838  0014B2                     u1554:
  7839  0014B2  2E50               	decfsz	??_write_byte,f,c
  7840  0014B4  D7FC               	goto	u1555
  7841  0014B6  5051               	movf	??_write_byte+1,w,c
  7842  0014B8  6E53               	movwf	write_byte@temp,c
  7843                           
  7844                           ;onewire.c: 74: temp &= 0x01;
  7845  0014BA  0E01               	movlw	1
  7846  0014BC  1653               	andwf	write_byte@temp,f,c
  7847                           
  7848                           ;onewire.c: 75: write_bit(temp);
  7849  0014BE  5053               	movf	write_byte@temp,w,c
  7850  0014C0  EC75  F00B         	call	_write_bit
  7851  0014C4  2A54               	incf	write_byte@i,f,c
  7852  0014C6  0E07               	movlw	7
  7853  0014C8  6454               	cpfsgt	write_byte@i,c
  7854  0014CA  D7EB               	goto	l3054
  7855                           
  7856                           ;onewire.c: 76: }
  7857                           ;onewire.c: 78: _delay((unsigned long)((105)*(40000000/4000000.0)));
  7858  0014CC  0ED2               	movlw	210
  7859  0014CE                     u2647:
  7860  0014CE  D000               	nop2	
  7861  0014D0  2EE8               	decfsz	wreg,f,c
  7862  0014D2  D7FD               	bra	u2647
  7863  0014D4  0012               	return		;funcret
  7864  0014D6                     __end_of_write_byte:
  7865                           	opt stack 0
  7866                           tosu	equ	0xFFF
  7867                           tosh	equ	0xFFE
  7868                           tosl	equ	0xFFD
  7869                           pclath	equ	0xFFA
  7870                           tblptru	equ	0xFF8
  7871                           tblptrh	equ	0xFF7
  7872                           tblptrl	equ	0xFF6
  7873                           tablat	equ	0xFF5
  7874                           prodh	equ	0xFF4
  7875                           prodl	equ	0xFF3
  7876                           intcon	equ	0xFF2
  7877                           intcon2	equ	0xFF1
  7878                           postinc0	equ	0xFEE
  7879                           wreg	equ	0xFE8
  7880                           indf1	equ	0xFE7
  7881                           plusw1	equ	0xFE3
  7882                           fsr1h	equ	0xFE2
  7883                           fsr1l	equ	0xFE1
  7884                           indf2	equ	0xFDF
  7885                           postinc2	equ	0xFDE
  7886                           postdec2	equ	0xFDD
  7887                           plusw2	equ	0xFDB
  7888                           fsr2h	equ	0xFDA
  7889                           fsr2l	equ	0xFD9
  7890                           status	equ	0xFD8
  7891                           
  7892 ;; *************** function _write_bit *****************
  7893 ;; Defined at:
  7894 ;;		line 34 in file "onewire.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  bitval          1    wreg     unsigned char 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  bitval          1   14[COMRAM] unsigned char 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  1    wreg      void 
  7901 ;; Registers used:
  7902 ;;		wreg, status,2, status,0, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;Total ram usage:        1 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    3
  7915 ;; This function calls:
  7916 ;;		Nothing
  7917 ;; This function is called by:
  7918 ;;		_write_byte
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           	psect	text34
  7923  0016EA                     __ptext34:
  7924                           	opt stack 0
  7925  0016EA                     _write_bit:
  7926                           	opt stack 23
  7927                           
  7928                           ;incstack = 0
  7929                           ;write_bit@bitval stored from wreg
  7930  0016EA  6E4F               	movwf	write_bit@bitval,c
  7931                           
  7932                           ;onewire.c: 36: PORTCbits.RC0 = 0;
  7933  0016EC  9082               	bcf	3970,0,c	;volatile
  7934                           
  7935                           ;onewire.c: 37: TRISCbits.RC0 = 0;
  7936  0016EE  9094               	bcf	3988,0,c	;volatile
  7937                           
  7938                           ;onewire.c: 38: if(bitval == 1) {
  7939  0016F0  044F               	decf	write_bit@bitval,w,c
  7940  0016F2  E106               	bnz	l845
  7941                           
  7942                           ;onewire.c: 39: _delay((unsigned long)((2)*(40000000/4000000.0)));
  7943  0016F4  0E06               	movlw	6
  7944  0016F6                     u2657:
  7945  0016F6  2EE8               	decfsz	wreg,f,c
  7946  0016F8  D7FE               	bra	u2657
  7947  0016FA  D000               	nop2	
  7948                           
  7949                           ;onewire.c: 40: PORTCbits.RC0 = 1;
  7950  0016FC  8082               	bsf	3970,0,c	;volatile
  7951                           
  7952                           ;onewire.c: 41: TRISCbits.RC0 = 1;
  7953  0016FE  8094               	bsf	3988,0,c	;volatile
  7954  001700                     l845:
  7955                           
  7956                           ;onewire.c: 42: }
  7957                           ;onewire.c: 43: _delay((unsigned long)((105)*(40000000/4000000.0)));
  7958  001700  0ED2               	movlw	210
  7959  001702                     u2667:
  7960  001702  D000               	nop2	
  7961  001704  2EE8               	decfsz	wreg,f,c
  7962  001706  D7FD               	bra	u2667
  7963                           
  7964                           ;onewire.c: 44: PORTCbits.RC0 = 1;
  7965  001708  8082               	bsf	3970,0,c	;volatile
  7966                           
  7967                           ;onewire.c: 45: TRISCbits.RC0 = 1;
  7968  00170A  8094               	bsf	3988,0,c	;volatile
  7969  00170C  0012               	return		;funcret
  7970  00170E                     __end_of_write_bit:
  7971                           	opt stack 0
  7972                           tosu	equ	0xFFF
  7973                           tosh	equ	0xFFE
  7974                           tosl	equ	0xFFD
  7975                           pclath	equ	0xFFA
  7976                           tblptru	equ	0xFF8
  7977                           tblptrh	equ	0xFF7
  7978                           tblptrl	equ	0xFF6
  7979                           tablat	equ	0xFF5
  7980                           prodh	equ	0xFF4
  7981                           prodl	equ	0xFF3
  7982                           intcon	equ	0xFF2
  7983                           intcon2	equ	0xFF1
  7984                           postinc0	equ	0xFEE
  7985                           wreg	equ	0xFE8
  7986                           indf1	equ	0xFE7
  7987                           plusw1	equ	0xFE3
  7988                           fsr1h	equ	0xFE2
  7989                           fsr1l	equ	0xFE1
  7990                           indf2	equ	0xFDF
  7991                           postinc2	equ	0xFDE
  7992                           postdec2	equ	0xFDD
  7993                           plusw2	equ	0xFDB
  7994                           fsr2h	equ	0xFDA
  7995                           fsr2l	equ	0xFD9
  7996                           status	equ	0xFD8
  7997                           
  7998 ;; *************** function _read_byte *****************
  7999 ;; Defined at:
  8000 ;;		line 50 in file "onewire.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;		None
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;  i               1   17[COMRAM] unsigned char 
  8005 ;;  val             1   16[COMRAM] unsigned char 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      unsigned char 
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0, cstack
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;Total ram usage:        4 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    4
  8022 ;; This function calls:
  8023 ;;		_read_bit
  8024 ;; This function is called by:
  8025 ;;		_readTemp_Single
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text35
  8030  0014D6                     __ptext35:
  8031                           	opt stack 0
  8032  0014D6                     _read_byte:
  8033                           	opt stack 23
  8034                           
  8035                           ;onewire.c: 52: uint8_t i;
  8036                           ;onewire.c: 53: uint8_t val = 0;
  8037                           
  8038                           ;incstack = 0
  8039  0014D6  6A51               	clrf	read_byte@val,c
  8040                           
  8041                           ;onewire.c: 55: for(i=0;i<8;i++)
  8042  0014D8  6A52               	clrf	read_byte@i,c
  8043  0014DA                     l3070:
  8044                           
  8045                           ;onewire.c: 56: {
  8046                           ;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  8047  0014DA  ECD6  F00B         	call	_read_bit	;wreg free
  8048  0014DE  0900               	iorlw	0
  8049  0014E0  E00C               	bz	l3074
  8050  0014E2  C052  F04F         	movff	read_byte@i,??_read_byte
  8051  0014E6  0E01               	movlw	1
  8052  0014E8  6E50               	movwf	(??_read_byte+1)& (0+255),c
  8053  0014EA  2A4F               	incf	??_read_byte,f,c
  8054  0014EC  D002               	goto	u1584
  8055  0014EE                     u1585:
  8056  0014EE  90D8               	bcf	status,0,c
  8057  0014F0  3650               	rlcf	??_read_byte+1,f,c
  8058  0014F2                     u1584:
  8059  0014F2  2E4F               	decfsz	??_read_byte,f,c
  8060  0014F4  D7FC               	goto	u1585
  8061  0014F6  5050               	movf	??_read_byte+1,w,c
  8062  0014F8  1251               	iorwf	read_byte@val,f,c
  8063  0014FA                     l3074:
  8064                           
  8065                           ;onewire.c: 58: _delay((unsigned long)((120)*(40000000/4000000.0)));
  8066  0014FA  0EF0               	movlw	240
  8067  0014FC                     u2677:
  8068  0014FC  D000               	nop2	
  8069  0014FE  2EE8               	decfsz	wreg,f,c
  8070  001500  D7FD               	bra	u2677
  8071  001502  2A52               	incf	read_byte@i,f,c
  8072  001504  0E07               	movlw	7
  8073  001506  6452               	cpfsgt	read_byte@i,c
  8074  001508  D7E8               	goto	l3070
  8075                           
  8076                           ;onewire.c: 59: }
  8077                           ;onewire.c: 61: return val;
  8078  00150A  5051               	movf	read_byte@val,w,c
  8079  00150C  0012               	return		;funcret
  8080  00150E                     __end_of_read_byte:
  8081                           	opt stack 0
  8082                           tosu	equ	0xFFF
  8083                           tosh	equ	0xFFE
  8084                           tosl	equ	0xFFD
  8085                           pclath	equ	0xFFA
  8086                           tblptru	equ	0xFF8
  8087                           tblptrh	equ	0xFF7
  8088                           tblptrl	equ	0xFF6
  8089                           tablat	equ	0xFF5
  8090                           prodh	equ	0xFF4
  8091                           prodl	equ	0xFF3
  8092                           intcon	equ	0xFF2
  8093                           intcon2	equ	0xFF1
  8094                           postinc0	equ	0xFEE
  8095                           wreg	equ	0xFE8
  8096                           indf1	equ	0xFE7
  8097                           plusw1	equ	0xFE3
  8098                           fsr1h	equ	0xFE2
  8099                           fsr1l	equ	0xFE1
  8100                           indf2	equ	0xFDF
  8101                           postinc2	equ	0xFDE
  8102                           postdec2	equ	0xFDD
  8103                           plusw2	equ	0xFDB
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108 ;; *************** function _read_bit *****************
  8109 ;; Defined at:
  8110 ;;		line 22 in file "onewire.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;		None
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;		None
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      unsigned char 
  8117 ;; Registers used:
  8118 ;;		wreg
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;Total ram usage:        0 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    3
  8131 ;; This function calls:
  8132 ;;		Nothing
  8133 ;; This function is called by:
  8134 ;;		_read_byte
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           	psect	text36
  8139  0017AC                     __ptext36:
  8140                           	opt stack 0
  8141  0017AC                     _read_bit:
  8142                           	opt stack 23
  8143                           
  8144                           ;onewire.c: 24: PORTCbits.RC0 = 0;
  8145                           
  8146                           ;incstack = 0
  8147  0017AC  9082               	bcf	3970,0,c	;volatile
  8148                           
  8149                           ;onewire.c: 25: TRISCbits.RC0 = 0;
  8150  0017AE  9094               	bcf	3988,0,c	;volatile
  8151                           
  8152                           ;onewire.c: 26: _delay((unsigned long)((1)*(40000000/4000000.0)));
  8153  0017B0  0E03               	movlw	3
  8154  0017B2                     u2687:
  8155  0017B2  2EE8               	decfsz	wreg,f,c
  8156  0017B4  D7FE               	bra	u2687
  8157  0017B6  F000               	nop	
  8158                           
  8159                           ;onewire.c: 27: PORTCbits.RC0 = 1;
  8160  0017B8  8082               	bsf	3970,0,c	;volatile
  8161                           
  8162                           ;onewire.c: 28: TRISCbits.RC0 = 1;
  8163  0017BA  8094               	bsf	3988,0,c	;volatile
  8164                           
  8165                           ;onewire.c: 29: _delay((unsigned long)((6)*(40000000/4000000.0)));
  8166  0017BC  0E14               	movlw	20
  8167  0017BE                     u2697:
  8168  0017BE  2EE8               	decfsz	wreg,f,c
  8169  0017C0  D7FE               	bra	u2697
  8170                           
  8171                           ;onewire.c: 30: return(PORTCbits.RC0);
  8172  0017C2  B082               	btfsc	3970,0,c	;volatile
  8173  0017C4  0C01               	retlw	1
  8174  0017C6  0C00               	retlw	0	;funcret
  8175  0017C8                     __end_of_read_bit:
  8176                           	opt stack 0
  8177                           tosu	equ	0xFFF
  8178                           tosh	equ	0xFFE
  8179                           tosl	equ	0xFFD
  8180                           pclath	equ	0xFFA
  8181                           tblptru	equ	0xFF8
  8182                           tblptrh	equ	0xFF7
  8183                           tblptrl	equ	0xFF6
  8184                           tablat	equ	0xFF5
  8185                           prodh	equ	0xFF4
  8186                           prodl	equ	0xFF3
  8187                           intcon	equ	0xFF2
  8188                           intcon2	equ	0xFF1
  8189                           postinc0	equ	0xFEE
  8190                           wreg	equ	0xFE8
  8191                           indf1	equ	0xFE7
  8192                           plusw1	equ	0xFE3
  8193                           fsr1h	equ	0xFE2
  8194                           fsr1l	equ	0xFE1
  8195                           indf2	equ	0xFDF
  8196                           postinc2	equ	0xFDE
  8197                           postdec2	equ	0xFDD
  8198                           plusw2	equ	0xFDB
  8199                           fsr2h	equ	0xFDA
  8200                           fsr2l	equ	0xFD9
  8201                           status	equ	0xFD8
  8202                           
  8203 ;; *************** function _ow_reset *****************
  8204 ;; Defined at:
  8205 ;;		line 5 in file "onewire.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;		None
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  presence        1   15[COMRAM] unsigned char 
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  1    wreg      unsigned char 
  8212 ;; Registers used:
  8213 ;;		wreg, status,2
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8223 ;;Total ram usage:        2 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    3
  8226 ;; This function calls:
  8227 ;;		Nothing
  8228 ;; This function is called by:
  8229 ;;		_readTemp_Single
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           	psect	text37
  8234  0013EC                     __ptext37:
  8235                           	opt stack 0
  8236  0013EC                     _ow_reset:
  8237                           	opt stack 24
  8238                           
  8239                           ;onewire.c: 7: uint8_t presence;
  8240                           ;onewire.c: 8: PORTCbits.RC0 = 0;
  8241                           
  8242                           ;incstack = 0
  8243  0013EC  9082               	bcf	3970,0,c	;volatile
  8244                           
  8245                           ;onewire.c: 9: TRISCbits.RC0 = 0;
  8246  0013EE  9094               	bcf	3988,0,c	;volatile
  8247                           
  8248                           ;onewire.c: 10: _delay((unsigned long)((500)*(40000000/4000000.0)));
  8249  0013F0  0E07               	movlw	7
  8250  0013F2  6E4F               	movwf	??_ow_reset& (0+255),c
  8251  0013F4  0E7D               	movlw	125
  8252  0013F6                     u2707:
  8253  0013F6  2EE8               	decfsz	wreg,f,c
  8254  0013F8  D7FE               	bra	u2707
  8255  0013FA  2E4F               	decfsz	??_ow_reset& (0+255),f,c
  8256  0013FC  D7FC               	bra	u2707
  8257  0013FE  F000               	nop	
  8258                           
  8259                           ;onewire.c: 11: PORTCbits.RC0 = 1;
  8260  001400  8082               	bsf	3970,0,c	;volatile
  8261                           
  8262                           ;onewire.c: 12: TRISCbits.RC0 = 1;
  8263  001402  8094               	bsf	3988,0,c	;volatile
  8264                           
  8265                           ;onewire.c: 13: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8266  001404  0EC8               	movlw	200
  8267  001406                     u2717:
  8268  001406  D000               	nop2	
  8269  001408  2EE8               	decfsz	wreg,f,c
  8270  00140A  D7FD               	bra	u2717
  8271                           
  8272                           ;onewire.c: 14: presence = PORTCbits.RC0;
  8273  00140C  0E00               	movlw	0
  8274  00140E  B082               	btfsc	3970,0,c	;volatile
  8275  001410  0E01               	movlw	1
  8276  001412  6E50               	movwf	ow_reset@presence,c
  8277                           
  8278                           ;onewire.c: 15: _delay((unsigned long)((424)*(40000000/4000000.0)));
  8279  001414  0E06               	movlw	6
  8280  001416  6E4F               	movwf	??_ow_reset& (0+255),c
  8281  001418  0E80               	movlw	128
  8282  00141A                     u2727:
  8283  00141A  2EE8               	decfsz	wreg,f,c
  8284  00141C  D7FE               	bra	u2727
  8285  00141E  2E4F               	decfsz	??_ow_reset& (0+255),f,c
  8286  001420  D7FC               	bra	u2727
  8287  001422  D000               	nop2	
  8288                           
  8289                           ;onewire.c: 16: return(presence);
  8290  001424  5050               	movf	ow_reset@presence,w,c
  8291  001426  0012               	return		;funcret
  8292  001428                     __end_of_ow_reset:
  8293                           	opt stack 0
  8294                           tosu	equ	0xFFF
  8295                           tosh	equ	0xFFE
  8296                           tosl	equ	0xFFD
  8297                           pclath	equ	0xFFA
  8298                           tblptru	equ	0xFF8
  8299                           tblptrh	equ	0xFF7
  8300                           tblptrl	equ	0xFF6
  8301                           tablat	equ	0xFF5
  8302                           prodh	equ	0xFF4
  8303                           prodl	equ	0xFF3
  8304                           intcon	equ	0xFF2
  8305                           intcon2	equ	0xFF1
  8306                           postinc0	equ	0xFEE
  8307                           wreg	equ	0xFE8
  8308                           indf1	equ	0xFE7
  8309                           plusw1	equ	0xFE3
  8310                           fsr1h	equ	0xFE2
  8311                           fsr1l	equ	0xFE1
  8312                           indf2	equ	0xFDF
  8313                           postinc2	equ	0xFDE
  8314                           postdec2	equ	0xFDD
  8315                           plusw2	equ	0xFDB
  8316                           fsr2h	equ	0xFDA
  8317                           fsr2l	equ	0xFD9
  8318                           status	equ	0xFD8
  8319                           
  8320 ;; *************** function _putchar_down_s *****************
  8321 ;; Defined at:
  8322 ;;		line 120 in file "display.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;  x               1    wreg     unsigned char 
  8325 ;;  symbol          1   22[COMRAM] unsigned char 
  8326 ;; Auto vars:     Size  Location     Type
  8327 ;;  x               1   28[COMRAM] unsigned char 
  8328 ;;  i               1   31[COMRAM] unsigned char 
  8329 ;;  j               1   30[COMRAM] unsigned char 
  8330 ;;  k               1   29[COMRAM] unsigned char 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      void 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8340 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;Total ram usage:       10 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    5
  8347 ;; This function calls:
  8348 ;;		_Update_Matrix
  8349 ;; This function is called by:
  8350 ;;		_home_temp
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text38
  8355  000D36                     __ptext38:
  8356                           	opt stack 0
  8357  000D36                     _putchar_down_s:
  8358                           	opt stack 23
  8359                           
  8360                           ;incstack = 0
  8361                           ;putchar_down_s@x stored from wreg
  8362  000D36  6E5D               	movwf	putchar_down_s@x,c
  8363                           
  8364                           ;display.c: 122: uint8_t i, j, k;
  8365                           ;display.c: 127: for(j=0;j<=7;j++)
  8366  000D38  6A5F               	clrf	putchar_down_s@j,c
  8367  000D3A                     l389:
  8368                           
  8369                           ;display.c: 128: {
  8370                           ;display.c: 129: for(i=0;i<3;i++)
  8371  000D3A  6A60               	clrf	putchar_down_s@i,c
  8372  000D3C                     l3254:
  8373                           
  8374                           ;display.c: 130: {
  8375                           ;display.c: 131: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | (FontS[symbol][i] >> (8-1-j));
  8376  000D3C  505D               	movf	putchar_down_s@x,w,c
  8377  000D3E  0F16               	addlw	low _Dis_Buff
  8378  000D40  2460               	addwf	putchar_down_s@i,w,c
  8379  000D42  6ED9               	movwf	fsr2l,c
  8380  000D44  6ADA               	clrf	fsr2h,c
  8381  000D46  505F               	movf	putchar_down_s@j,w,c
  8382  000D48  0807               	sublw	7
  8383  000D4A  6E58               	movwf	??_putchar_down_s& (0+255),c
  8384  000D4C  5057               	movf	putchar_down_s@symbol,w,c
  8385  000D4E  0D03               	mullw	3
  8386  000D50  0EC7               	movlw	low _FontS
  8387  000D52  6E59               	movwf	(??_putchar_down_s+1)& (0+255),c
  8388  000D54  0EBF               	movlw	high _FontS
  8389  000D56  6E5A               	movwf	(??_putchar_down_s+2)& (0+255),c
  8390  000D58  50F3               	movf	prodl,w,c
  8391  000D5A  2659               	addwf	??_putchar_down_s+1,f,c
  8392  000D5C  50F4               	movf	prodh,w,c
  8393  000D5E  225A               	addwfc	??_putchar_down_s+2,f,c
  8394  000D60  5060               	movf	putchar_down_s@i,w,c
  8395  000D62  2659               	addwf	??_putchar_down_s+1,f,c
  8396  000D64  0E00               	movlw	0
  8397  000D66  225A               	addwfc	??_putchar_down_s+2,f,c
  8398  000D68  C059  FFF6         	movff	??_putchar_down_s+1,tblptrl
  8399  000D6C  C05A  FFF7         	movff	??_putchar_down_s+2,tblptrh
  8400  000D70                     	if	0	;tblptru may be non-zero
  8401  000D70                     	endif
  8402  000D70                     	if	0	;tblptru may be non-zero
  8403  000D70                     	endif
  8404  000D70  0008               	tblrd		*
  8405  000D72  CFF5 F05B          	movff	tablat,??_putchar_down_s+3
  8406  000D76  2A58               	incf	??_putchar_down_s,f,c
  8407  000D78  D002               	goto	u1804
  8408  000D7A                     u1805:
  8409  000D7A  90D8               	bcf	status,0,c
  8410  000D7C  325B               	rrcf	??_putchar_down_s+3,f,c
  8411  000D7E                     u1804:
  8412  000D7E  2E58               	decfsz	??_putchar_down_s,f,c
  8413  000D80  D7FC               	goto	u1805
  8414  000D82  505D               	movf	putchar_down_s@x,w,c
  8415  000D84  0F16               	addlw	low _Dis_Buff
  8416  000D86  2460               	addwf	putchar_down_s@i,w,c
  8417  000D88  6EE1               	movwf	fsr1l,c
  8418  000D8A  6AE2               	clrf	fsr1h,c
  8419  000D8C  50E7               	movf	indf1,w,c
  8420  000D8E  6E5C               	movwf	(??_putchar_down_s+4)& (0+255),c
  8421  000D90  90D8               	bcf	status,0,c
  8422  000D92  345C               	rlcf	??_putchar_down_s+4,w,c
  8423  000D94  105B               	iorwf	??_putchar_down_s+3,w,c
  8424  000D96  6EDF               	movwf	indf2,c
  8425  000D98  2A60               	incf	putchar_down_s@i,f,c
  8426  000D9A  0E02               	movlw	2
  8427  000D9C  6460               	cpfsgt	putchar_down_s@i,c
  8428  000D9E  D7CE               	goto	l3254
  8429                           
  8430                           ;display.c: 132: }
  8431                           ;display.c: 134: for(k=0;k<30;k++)
  8432  000DA0  6A5E               	clrf	putchar_down_s@k,c
  8433  000DA2                     l3264:
  8434                           
  8435                           ;display.c: 135: _delay((unsigned long)((1)*(40000000/4000.0)));
  8436  000DA2  0E0D               	movlw	13
  8437  000DA4  6E58               	movwf	??_putchar_down_s& (0+255),c
  8438  000DA6  0EFC               	movlw	252
  8439  000DA8                     u2737:
  8440  000DA8  2EE8               	decfsz	wreg,f,c
  8441  000DAA  D7FE               	bra	u2737
  8442  000DAC  2E58               	decfsz	??_putchar_down_s& (0+255),f,c
  8443  000DAE  D7FC               	bra	u2737
  8444  000DB0  2A5E               	incf	putchar_down_s@k,f,c
  8445  000DB2  0E1D               	movlw	29
  8446  000DB4  645E               	cpfsgt	putchar_down_s@k,c
  8447  000DB6  D7F5               	goto	l3264
  8448                           
  8449                           ;display.c: 136: Update_Matrix(Dis_Buff);
  8450  000DB8  0E16               	movlw	low _Dis_Buff
  8451  000DBA  6E51               	movwf	Update_Matrix@buf,c
  8452  000DBC  EC14  F00A         	call	_Update_Matrix	;wreg free
  8453  000DC0  2A5F               	incf	putchar_down_s@j,f,c
  8454  000DC2  0E07               	movlw	7
  8455  000DC4  645F               	cpfsgt	putchar_down_s@j,c
  8456  000DC6  D7B9               	goto	l389
  8457  000DC8  0C07               	retlw	7
  8458  000DCA                     __end_of_putchar_down_s:
  8459                           	opt stack 0
  8460                           tosu	equ	0xFFF
  8461                           tosh	equ	0xFFE
  8462                           tosl	equ	0xFFD
  8463                           pclath	equ	0xFFA
  8464                           tblptru	equ	0xFF8
  8465                           tblptrh	equ	0xFF7
  8466                           tblptrl	equ	0xFF6
  8467                           tablat	equ	0xFF5
  8468                           prodh	equ	0xFF4
  8469                           prodl	equ	0xFF3
  8470                           intcon	equ	0xFF2
  8471                           intcon2	equ	0xFF1
  8472                           postinc0	equ	0xFEE
  8473                           wreg	equ	0xFE8
  8474                           indf1	equ	0xFE7
  8475                           plusw1	equ	0xFE3
  8476                           fsr1h	equ	0xFE2
  8477                           fsr1l	equ	0xFE1
  8478                           indf2	equ	0xFDF
  8479                           postinc2	equ	0xFDE
  8480                           postdec2	equ	0xFDD
  8481                           plusw2	equ	0xFDB
  8482                           fsr2h	equ	0xFDA
  8483                           fsr2l	equ	0xFD9
  8484                           status	equ	0xFD8
  8485                           
  8486 ;; *************** function _putchar_down *****************
  8487 ;; Defined at:
  8488 ;;		line 98 in file "display.c"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;  x               1    wreg     unsigned char 
  8491 ;;  symbol          1   26[COMRAM] unsigned char 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  x               1   32[COMRAM] unsigned char 
  8494 ;;  i               1   35[COMRAM] unsigned char 
  8495 ;;  j               1   34[COMRAM] unsigned char 
  8496 ;;  k               1   33[COMRAM] unsigned char 
  8497 ;; Return value:  Size  Location     Type
  8498 ;;                  1    wreg      void 
  8499 ;; Registers used:
  8500 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8501 ;; Tracked objects:
  8502 ;;		On entry : 0/0
  8503 ;;		On exit  : 0/0
  8504 ;;		Unchanged: 0/0
  8505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8506 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8507 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;Total ram usage:       10 bytes
  8511 ;; Hardware stack levels used:    1
  8512 ;; Hardware stack levels required when called:    5
  8513 ;; This function calls:
  8514 ;;		_Update_Matrix
  8515 ;; This function is called by:
  8516 ;;		_home_temp
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	text39
  8521  000DCA                     __ptext39:
  8522                           	opt stack 0
  8523  000DCA                     _putchar_down:
  8524                           	opt stack 23
  8525                           
  8526                           ;incstack = 0
  8527                           ;putchar_down@x stored from wreg
  8528  000DCA  6E61               	movwf	putchar_down@x,c
  8529                           
  8530                           ;display.c: 100: uint8_t i, j, k;
  8531                           ;display.c: 102: for(j=0;j<=7;j++)
  8532  000DCC  6A63               	clrf	putchar_down@j,c
  8533  000DCE                     l380:
  8534                           
  8535                           ;display.c: 103: {
  8536                           ;display.c: 104: for(i=0;i<5;i++)
  8537  000DCE  6A64               	clrf	putchar_down@i,c
  8538  000DD0                     l3224:
  8539                           
  8540                           ;display.c: 105: {
  8541                           ;display.c: 106: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | (Font[symbol][i] >> (8-1-j));
  8542  000DD0  5061               	movf	putchar_down@x,w,c
  8543  000DD2  0F16               	addlw	low _Dis_Buff
  8544  000DD4  2464               	addwf	putchar_down@i,w,c
  8545  000DD6  6ED9               	movwf	fsr2l,c
  8546  000DD8  6ADA               	clrf	fsr2h,c
  8547  000DDA  5063               	movf	putchar_down@j,w,c
  8548  000DDC  0807               	sublw	7
  8549  000DDE  6E5C               	movwf	??_putchar_down& (0+255),c
  8550  000DE0  505B               	movf	putchar_down@symbol,w,c
  8551  000DE2  0D05               	mullw	5
  8552  000DE4  0EC7               	movlw	low _Font
  8553  000DE6  6E5D               	movwf	(??_putchar_down+1)& (0+255),c
  8554  000DE8  0EBA               	movlw	high _Font
  8555  000DEA  6E5E               	movwf	(??_putchar_down+2)& (0+255),c
  8556  000DEC  50F3               	movf	prodl,w,c
  8557  000DEE  265D               	addwf	??_putchar_down+1,f,c
  8558  000DF0  50F4               	movf	prodh,w,c
  8559  000DF2  225E               	addwfc	??_putchar_down+2,f,c
  8560  000DF4  5064               	movf	putchar_down@i,w,c
  8561  000DF6  265D               	addwf	??_putchar_down+1,f,c
  8562  000DF8  0E00               	movlw	0
  8563  000DFA  225E               	addwfc	??_putchar_down+2,f,c
  8564  000DFC  C05D  FFF6         	movff	??_putchar_down+1,tblptrl
  8565  000E00  C05E  FFF7         	movff	??_putchar_down+2,tblptrh
  8566  000E04                     	if	0	;tblptru may be non-zero
  8567  000E04                     	endif
  8568  000E04                     	if	0	;tblptru may be non-zero
  8569  000E04                     	endif
  8570  000E04  0008               	tblrd		*
  8571  000E06  CFF5 F05F          	movff	tablat,??_putchar_down+3
  8572  000E0A  2A5C               	incf	??_putchar_down,f,c
  8573  000E0C  D002               	goto	u1764
  8574  000E0E                     u1765:
  8575  000E0E  90D8               	bcf	status,0,c
  8576  000E10  325F               	rrcf	??_putchar_down+3,f,c
  8577  000E12                     u1764:
  8578  000E12  2E5C               	decfsz	??_putchar_down,f,c
  8579  000E14  D7FC               	goto	u1765
  8580  000E16  5061               	movf	putchar_down@x,w,c
  8581  000E18  0F16               	addlw	low _Dis_Buff
  8582  000E1A  2464               	addwf	putchar_down@i,w,c
  8583  000E1C  6EE1               	movwf	fsr1l,c
  8584  000E1E  6AE2               	clrf	fsr1h,c
  8585  000E20  50E7               	movf	indf1,w,c
  8586  000E22  6E60               	movwf	(??_putchar_down+4)& (0+255),c
  8587  000E24  90D8               	bcf	status,0,c
  8588  000E26  3460               	rlcf	??_putchar_down+4,w,c
  8589  000E28  105F               	iorwf	??_putchar_down+3,w,c
  8590  000E2A  6EDF               	movwf	indf2,c
  8591  000E2C  2A64               	incf	putchar_down@i,f,c
  8592  000E2E  0E04               	movlw	4
  8593  000E30  6464               	cpfsgt	putchar_down@i,c
  8594  000E32  D7CE               	goto	l3224
  8595                           
  8596                           ;display.c: 107: }
  8597                           ;display.c: 109: for(k=0;k<30;k++)
  8598  000E34  6A62               	clrf	putchar_down@k,c
  8599  000E36                     l3234:
  8600                           
  8601                           ;display.c: 110: _delay((unsigned long)((1)*(40000000/4000.0)));
  8602  000E36  0E0D               	movlw	13
  8603  000E38  6E5C               	movwf	??_putchar_down& (0+255),c
  8604  000E3A  0EFC               	movlw	252
  8605  000E3C                     u2747:
  8606  000E3C  2EE8               	decfsz	wreg,f,c
  8607  000E3E  D7FE               	bra	u2747
  8608  000E40  2E5C               	decfsz	??_putchar_down& (0+255),f,c
  8609  000E42  D7FC               	bra	u2747
  8610  000E44  2A62               	incf	putchar_down@k,f,c
  8611  000E46  0E1D               	movlw	29
  8612  000E48  6462               	cpfsgt	putchar_down@k,c
  8613  000E4A  D7F5               	goto	l3234
  8614                           
  8615                           ;display.c: 111: Update_Matrix(Dis_Buff);
  8616  000E4C  0E16               	movlw	low _Dis_Buff
  8617  000E4E  6E51               	movwf	Update_Matrix@buf,c
  8618  000E50  EC14  F00A         	call	_Update_Matrix	;wreg free
  8619  000E54  2A63               	incf	putchar_down@j,f,c
  8620  000E56  0E07               	movlw	7
  8621  000E58  6463               	cpfsgt	putchar_down@j,c
  8622  000E5A  D7B9               	goto	l380
  8623  000E5C  0C07               	retlw	7
  8624  000E5E                     __end_of_putchar_down:
  8625                           	opt stack 0
  8626                           tosu	equ	0xFFF
  8627                           tosh	equ	0xFFE
  8628                           tosl	equ	0xFFD
  8629                           pclath	equ	0xFFA
  8630                           tblptru	equ	0xFF8
  8631                           tblptrh	equ	0xFF7
  8632                           tblptrl	equ	0xFF6
  8633                           tablat	equ	0xFF5
  8634                           prodh	equ	0xFF4
  8635                           prodl	equ	0xFF3
  8636                           intcon	equ	0xFF2
  8637                           intcon2	equ	0xFF1
  8638                           postinc0	equ	0xFEE
  8639                           wreg	equ	0xFE8
  8640                           indf1	equ	0xFE7
  8641                           plusw1	equ	0xFE3
  8642                           fsr1h	equ	0xFE2
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           plusw2	equ	0xFDB
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function _Update_Matrix *****************
  8653 ;; Defined at:
  8654 ;;		line 51 in file "max7221.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  buf             1   16[COMRAM] PTR unsigned char 
  8657 ;;		 -> Dis_Buff(32), 
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  i               1   19[COMRAM] unsigned char 
  8660 ;;  j               1   18[COMRAM] unsigned char 
  8661 ;;  data            1   17[COMRAM] unsigned char 
  8662 ;; Return value:  Size  Location     Type
  8663 ;;                  1    wreg      void 
  8664 ;; Registers used:
  8665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8666 ;; Tracked objects:
  8667 ;;		On entry : 0/0
  8668 ;;		On exit  : 0/0
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8671 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8672 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8674 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8675 ;;Total ram usage:        4 bytes
  8676 ;; Hardware stack levels used:    1
  8677 ;; Hardware stack levels required when called:    4
  8678 ;; This function calls:
  8679 ;;		_Send_Byte_7221
  8680 ;; This function is called by:
  8681 ;;		_putchar_down
  8682 ;;		_putchar_down_s
  8683 ;;		_scroll_left
  8684 ;;		_time_set_min
  8685 ;;		_time_set_hr
  8686 ;;		_time_set_yr
  8687 ;;		_time_set_mt
  8688 ;;		_time_set_dt
  8689 ;;		_time_set_dy
  8690 ;;		_time_led
  8691 ;;		_version
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           	psect	text40
  8696  001428                     __ptext40:
  8697                           	opt stack 0
  8698  001428                     _Update_Matrix:
  8699                           	opt stack 25
  8700                           
  8701                           ;max7221.c: 53: uint8_t i, j, data;
  8702                           ;max7221.c: 56: for (i = 0; i < 8; i++)
  8703                           
  8704                           ;incstack = 0
  8705  001428  6A54               	clrf	Update_Matrix@i,c
  8706  00142A                     l311:
  8707                           
  8708                           ;max7221.c: 57: {
  8709                           ;max7221.c: 58: LATDbits.LD0 = 0;
  8710  00142A  908C               	bcf	3980,0,c	;volatile
  8711                           
  8712                           ;max7221.c: 59: for (j = 0; j < 4; j++)
  8713  00142C  6A53               	clrf	Update_Matrix@j,c
  8714  00142E                     l3000:
  8715                           
  8716                           ;max7221.c: 60: {
  8717                           ;max7221.c: 62: data = buf[8 * (4 - 1 - j) + i];
  8718  00142E  5053               	movf	Update_Matrix@j,w,c
  8719  001430  0DF8               	mullw	-8
  8720  001432  5051               	movf	Update_Matrix@buf,w,c
  8721  001434  24F3               	addwf	prodl,w,c
  8722  001436  2454               	addwf	Update_Matrix@i,w,c
  8723  001438  6ED9               	movwf	fsr2l,c
  8724  00143A  6ADA               	clrf	fsr2h,c
  8725  00143C  0E18               	movlw	24
  8726  00143E  26D9               	addwf	fsr2l,f,c
  8727  001440  50DF               	movf	indf2,w,c
  8728  001442  6E52               	movwf	Update_Matrix@data,c
  8729                           
  8730                           ;max7221.c: 64: Send_Byte_7221(1 + i);
  8731  001444  2854               	incf	Update_Matrix@i,w,c
  8732  001446  EC87  F00B         	call	_Send_Byte_7221
  8733                           
  8734                           ;max7221.c: 65: Send_Byte_7221(data);
  8735  00144A  5052               	movf	Update_Matrix@data,w,c
  8736  00144C  EC87  F00B         	call	_Send_Byte_7221
  8737  001450  2A53               	incf	Update_Matrix@j,f,c
  8738  001452  0E03               	movlw	3
  8739  001454  6453               	cpfsgt	Update_Matrix@j,c
  8740  001456  D7EB               	goto	l3000
  8741                           
  8742                           ;max7221.c: 66: }
  8743                           ;max7221.c: 67: LATDbits.LD0 = 1;
  8744  001458  808C               	bsf	3980,0,c	;volatile
  8745  00145A  2A54               	incf	Update_Matrix@i,f,c
  8746  00145C  0E07               	movlw	7
  8747  00145E  6454               	cpfsgt	Update_Matrix@i,c
  8748  001460  D7E4               	goto	l311
  8749  001462  0C07               	retlw	7
  8750  001464                     __end_of_Update_Matrix:
  8751                           	opt stack 0
  8752                           tosu	equ	0xFFF
  8753                           tosh	equ	0xFFE
  8754                           tosl	equ	0xFFD
  8755                           pclath	equ	0xFFA
  8756                           tblptru	equ	0xFF8
  8757                           tblptrh	equ	0xFF7
  8758                           tblptrl	equ	0xFF6
  8759                           tablat	equ	0xFF5
  8760                           prodh	equ	0xFF4
  8761                           prodl	equ	0xFF3
  8762                           intcon	equ	0xFF2
  8763                           intcon2	equ	0xFF1
  8764                           postinc0	equ	0xFEE
  8765                           wreg	equ	0xFE8
  8766                           indf1	equ	0xFE7
  8767                           plusw1	equ	0xFE3
  8768                           fsr1h	equ	0xFE2
  8769                           fsr1l	equ	0xFE1
  8770                           indf2	equ	0xFDF
  8771                           postinc2	equ	0xFDE
  8772                           postdec2	equ	0xFDD
  8773                           plusw2	equ	0xFDB
  8774                           fsr2h	equ	0xFDA
  8775                           fsr2l	equ	0xFD9
  8776                           status	equ	0xFD8
  8777                           
  8778 ;; *************** function _Send_Byte_7221 *****************
  8779 ;; Defined at:
  8780 ;;		line 6 in file "max7221.c"
  8781 ;; Parameters:    Size  Location     Type
  8782 ;;  dat             1    wreg     unsigned char 
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;  dat             1   14[COMRAM] unsigned char 
  8785 ;;  i               1   15[COMRAM] unsigned char 
  8786 ;; Return value:  Size  Location     Type
  8787 ;;                  1    wreg      void 
  8788 ;; Registers used:
  8789 ;;		wreg, status,2, status,0
  8790 ;; Tracked objects:
  8791 ;;		On entry : 0/0
  8792 ;;		On exit  : 0/0
  8793 ;;		Unchanged: 0/0
  8794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;Total ram usage:        2 bytes
  8800 ;; Hardware stack levels used:    1
  8801 ;; Hardware stack levels required when called:    3
  8802 ;; This function calls:
  8803 ;;		Nothing
  8804 ;; This function is called by:
  8805 ;;		_Cmd7221
  8806 ;;		_Update_Matrix
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           	psect	text41
  8811  00170E                     __ptext41:
  8812                           	opt stack 0
  8813  00170E                     _Send_Byte_7221:
  8814                           	opt stack 25
  8815                           
  8816                           ;incstack = 0
  8817                           ;Send_Byte_7221@dat stored from wreg
  8818  00170E  6E4F               	movwf	Send_Byte_7221@dat,c
  8819                           
  8820                           ;max7221.c: 8: uint8_t i;
  8821                           ;max7221.c: 10: for (i = 0; i < 8; i++)
  8822  001710  6A50               	clrf	Send_Byte_7221@i,c
  8823  001712                     l299:
  8824                           
  8825                           ;max7221.c: 11: {
  8826                           ;max7221.c: 12: if (dat & 0x80)
  8827  001712  AE4F               	btfss	Send_Byte_7221@dat,7,c
  8828  001714  D002               	goto	l301
  8829                           
  8830                           ;max7221.c: 13: LATDbits.LD2 = 1;
  8831  001716  848C               	bsf	3980,2,c	;volatile
  8832  001718  D001               	goto	l302
  8833  00171A                     l301:
  8834                           
  8835                           ;max7221.c: 14: else
  8836                           ;max7221.c: 15: LATDbits.LD2 = 0;
  8837  00171A  948C               	bcf	3980,2,c	;volatile
  8838  00171C                     l302:
  8839                           
  8840                           ;max7221.c: 16: LATDbits.LD1 = 1;
  8841  00171C  828C               	bsf	3980,1,c	;volatile
  8842  00171E  F000               	nop		;# 
  8843  001720  F000               	nop		;# 
  8844                           
  8845                           ;max7221.c: 23: LATDbits.LD1 = 0;
  8846  001722  928C               	bcf	3980,1,c	;volatile
  8847                           
  8848                           ;max7221.c: 24: dat <<= 1;
  8849  001724  90D8               	bcf	status,0,c
  8850  001726  364F               	rlcf	Send_Byte_7221@dat,f,c
  8851  001728  2A50               	incf	Send_Byte_7221@i,f,c
  8852  00172A  0E07               	movlw	7
  8853  00172C  6450               	cpfsgt	Send_Byte_7221@i,c
  8854  00172E  D7F1               	goto	l299
  8855  001730  0C07               	retlw	7
  8856  001732                     __end_of_Send_Byte_7221:
  8857                           	opt stack 0
  8858                           tosu	equ	0xFFF
  8859                           tosh	equ	0xFFE
  8860                           tosl	equ	0xFFD
  8861                           pclath	equ	0xFFA
  8862                           tblptru	equ	0xFF8
  8863                           tblptrh	equ	0xFF7
  8864                           tblptrl	equ	0xFF6
  8865                           tablat	equ	0xFF5
  8866                           prodh	equ	0xFF4
  8867                           prodl	equ	0xFF3
  8868                           intcon	equ	0xFF2
  8869                           intcon2	equ	0xFF1
  8870                           postinc0	equ	0xFEE
  8871                           wreg	equ	0xFE8
  8872                           indf1	equ	0xFE7
  8873                           plusw1	equ	0xFE3
  8874                           fsr1h	equ	0xFE2
  8875                           fsr1l	equ	0xFE1
  8876                           indf2	equ	0xFDF
  8877                           postinc2	equ	0xFDE
  8878                           postdec2	equ	0xFDD
  8879                           plusw2	equ	0xFDB
  8880                           fsr2h	equ	0xFDA
  8881                           fsr2l	equ	0xFD9
  8882                           status	equ	0xFD8
  8883                           
  8884 ;; *************** function _pic_to_led *****************
  8885 ;; Defined at:
  8886 ;;		line 29 in file "display.c"
  8887 ;; Parameters:    Size  Location     Type
  8888 ;;  x               1    wreg     unsigned char 
  8889 ;;  pic             1   19[COMRAM] unsigned char 
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;  x               1   23[COMRAM] unsigned char 
  8892 ;;  i               1   25[COMRAM] unsigned char 
  8893 ;;  j               1   24[COMRAM] unsigned char 
  8894 ;;  mask            1   22[COMRAM] unsigned char 
  8895 ;; Return value:  Size  Location     Type
  8896 ;;                  1    wreg      void 
  8897 ;; Registers used:
  8898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8899 ;; Tracked objects:
  8900 ;;		On entry : 0/0
  8901 ;;		On exit  : 0/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8904 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8905 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;Total ram usage:        7 bytes
  8909 ;; Hardware stack levels used:    1
  8910 ;; Hardware stack levels required when called:    4
  8911 ;; This function calls:
  8912 ;;		_pixel_off
  8913 ;;		_pixel_on
  8914 ;; This function is called by:
  8915 ;;		_home_temp
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           	psect	text42
  8920  00112A                     __ptext42:
  8921                           	opt stack 0
  8922  00112A                     _pic_to_led:
  8923                           	opt stack 24
  8924                           
  8925                           ;incstack = 0
  8926                           ;pic_to_led@x stored from wreg
  8927  00112A  6E58               	movwf	pic_to_led@x,c
  8928                           
  8929                           ;display.c: 31: uint8_t i, j, mask=0x01;
  8930  00112C  0E01               	movlw	1
  8931  00112E  6E57               	movwf	pic_to_led@mask,c
  8932                           
  8933                           ;display.c: 33: for(i=0; i<7; i++){
  8934  001130  6A5A               	clrf	pic_to_led@i,c
  8935  001132                     l353:
  8936                           
  8937                           ;display.c: 34: for(j=0;j<8;j++){
  8938  001132  6A59               	clrf	pic_to_led@j,c
  8939  001134                     l3166:
  8940                           
  8941                           ;display.c: 35: if(pic7x8[pic][i] & mask){
  8942  001134  5054               	movf	pic_to_led@pic,w,c
  8943  001136  0D07               	mullw	7
  8944  001138  0E9B               	movlw	low _pic7x8
  8945  00113A  6E55               	movwf	??_pic_to_led& (0+255),c
  8946  00113C  0EBA               	movlw	high _pic7x8
  8947  00113E  6E56               	movwf	(??_pic_to_led+1)& (0+255),c
  8948  001140  50F3               	movf	prodl,w,c
  8949  001142  2655               	addwf	??_pic_to_led,f,c
  8950  001144  50F4               	movf	prodh,w,c
  8951  001146  2256               	addwfc	??_pic_to_led+1,f,c
  8952  001148  505A               	movf	pic_to_led@i,w,c
  8953  00114A  2655               	addwf	??_pic_to_led,f,c
  8954  00114C  0E00               	movlw	0
  8955  00114E  2256               	addwfc	??_pic_to_led+1,f,c
  8956  001150  C055  FFF6         	movff	??_pic_to_led,tblptrl
  8957  001154  C056  FFF7         	movff	??_pic_to_led+1,tblptrh
  8958  001158                     	if	0	;tblptru may be non-zero
  8959  001158                     	endif
  8960  001158                     	if	0	;tblptru may be non-zero
  8961  001158                     	endif
  8962  001158  0008               	tblrd		*
  8963  00115A  50F5               	movf	tablat,w,c
  8964  00115C  1457               	andwf	pic_to_led@mask,w,c
  8965  00115E  E007               	bz	l3170
  8966                           
  8967                           ;display.c: 36: pixel_on(x+i,j);
  8968  001160  C059  F04F         	movff	pic_to_led@j,pixel_on@y
  8969  001164  5058               	movf	pic_to_led@x,w,c
  8970  001166  245A               	addwf	pic_to_led@i,w,c
  8971  001168  EC99  F00B         	call	_pixel_on
  8972                           
  8973                           ;display.c: 37: }
  8974  00116C  D006               	goto	l3172
  8975  00116E                     l3170:
  8976                           
  8977                           ;display.c: 38: else {
  8978                           ;display.c: 39: pixel_off(x+i,j);
  8979  00116E  C059  F04F         	movff	pic_to_led@j,pixel_off@y
  8980  001172  5058               	movf	pic_to_led@x,w,c
  8981  001174  245A               	addwf	pic_to_led@i,w,c
  8982  001176  EC27  F00B         	call	_pixel_off
  8983  00117A                     l3172:
  8984                           
  8985                           ;display.c: 40: };
  8986                           ;display.c: 41: mask = mask<<1;
  8987  00117A  90D8               	bcf	status,0,c
  8988  00117C  3657               	rlcf	pic_to_led@mask,f,c
  8989  00117E  2A59               	incf	pic_to_led@j,f,c
  8990  001180  0E07               	movlw	7
  8991  001182  6459               	cpfsgt	pic_to_led@j,c
  8992  001184  D7D7               	goto	l3166
  8993                           
  8994                           ;display.c: 42: };
  8995                           ;display.c: 43: mask=0x01;
  8996  001186  0E01               	movlw	1
  8997  001188  6E57               	movwf	pic_to_led@mask,c
  8998  00118A  2A5A               	incf	pic_to_led@i,f,c
  8999  00118C  0E06               	movlw	6
  9000  00118E  645A               	cpfsgt	pic_to_led@i,c
  9001  001190  D7D0               	goto	l353
  9002  001192  0C06               	retlw	6
  9003  001194                     __end_of_pic_to_led:
  9004                           	opt stack 0
  9005                           tosu	equ	0xFFF
  9006                           tosh	equ	0xFFE
  9007                           tosl	equ	0xFFD
  9008                           pclath	equ	0xFFA
  9009                           tblptru	equ	0xFF8
  9010                           tblptrh	equ	0xFF7
  9011                           tblptrl	equ	0xFF6
  9012                           tablat	equ	0xFF5
  9013                           prodh	equ	0xFF4
  9014                           prodl	equ	0xFF3
  9015                           intcon	equ	0xFF2
  9016                           intcon2	equ	0xFF1
  9017                           postinc0	equ	0xFEE
  9018                           wreg	equ	0xFE8
  9019                           indf1	equ	0xFE7
  9020                           plusw1	equ	0xFE3
  9021                           fsr1h	equ	0xFE2
  9022                           fsr1l	equ	0xFE1
  9023                           indf2	equ	0xFDF
  9024                           postinc2	equ	0xFDE
  9025                           postdec2	equ	0xFDD
  9026                           plusw2	equ	0xFDB
  9027                           fsr2h	equ	0xFDA
  9028                           fsr2l	equ	0xFD9
  9029                           status	equ	0xFD8
  9030                           
  9031 ;; *************** function _pixel_on *****************
  9032 ;; Defined at:
  9033 ;;		line 13 in file "display.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;  x               1    wreg     unsigned char 
  9036 ;;  y               1   14[COMRAM] unsigned char 
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;  x               1   17[COMRAM] unsigned char 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  1    wreg      void 
  9041 ;; Registers used:
  9042 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9048 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9049 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9050 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9051 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9052 ;;Total ram usage:        4 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    3
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		_pic_to_led
  9059 ;;		_putchar_b_buf
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text43
  9064  001732                     __ptext43:
  9065                           	opt stack 0
  9066  001732                     _pixel_on:
  9067                           	opt stack 24
  9068                           
  9069                           ;incstack = 0
  9070                           ;pixel_on@x stored from wreg
  9071  001732  6E52               	movwf	pixel_on@x,c
  9072                           
  9073                           ;display.c: 15: Dis_Buff[x] |= (1<<y);
  9074  001734  C04F  F050         	movff	pixel_on@y,??_pixel_on
  9075  001738  0E01               	movlw	1
  9076  00173A  6E51               	movwf	(??_pixel_on+1)& (0+255),c
  9077  00173C  2A50               	incf	??_pixel_on,f,c
  9078  00173E  D002               	goto	u1534
  9079  001740                     u1535:
  9080  001740  90D8               	bcf	status,0,c
  9081  001742  3651               	rlcf	??_pixel_on+1,f,c
  9082  001744                     u1534:
  9083  001744  2E50               	decfsz	??_pixel_on,f,c
  9084  001746  D7FC               	goto	u1535
  9085  001748  5052               	movf	pixel_on@x,w,c
  9086  00174A  0F16               	addlw	low _Dis_Buff
  9087  00174C  6ED9               	movwf	fsr2l,c
  9088  00174E  6ADA               	clrf	fsr2h,c
  9089  001750  5051               	movf	??_pixel_on+1,w,c
  9090  001752  12DF               	iorwf	indf2,f,c
  9091  001754  0012               	return		;funcret
  9092  001756                     __end_of_pixel_on:
  9093                           	opt stack 0
  9094                           tosu	equ	0xFFF
  9095                           tosh	equ	0xFFE
  9096                           tosl	equ	0xFFD
  9097                           pclath	equ	0xFFA
  9098                           tblptru	equ	0xFF8
  9099                           tblptrh	equ	0xFF7
  9100                           tblptrl	equ	0xFF6
  9101                           tablat	equ	0xFF5
  9102                           prodh	equ	0xFF4
  9103                           prodl	equ	0xFF3
  9104                           intcon	equ	0xFF2
  9105                           intcon2	equ	0xFF1
  9106                           postinc0	equ	0xFEE
  9107                           wreg	equ	0xFE8
  9108                           indf1	equ	0xFE7
  9109                           plusw1	equ	0xFE3
  9110                           fsr1h	equ	0xFE2
  9111                           fsr1l	equ	0xFE1
  9112                           indf2	equ	0xFDF
  9113                           postinc2	equ	0xFDE
  9114                           postdec2	equ	0xFDD
  9115                           plusw2	equ	0xFDB
  9116                           fsr2h	equ	0xFDA
  9117                           fsr2l	equ	0xFD9
  9118                           status	equ	0xFD8
  9119                           
  9120 ;; *************** function _pixel_off *****************
  9121 ;; Defined at:
  9122 ;;		line 21 in file "display.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;  x               1    wreg     unsigned char 
  9125 ;;  y               1   14[COMRAM] unsigned char 
  9126 ;; Auto vars:     Size  Location     Type
  9127 ;;  x               1   18[COMRAM] unsigned char 
  9128 ;; Return value:  Size  Location     Type
  9129 ;;                  1    wreg      void 
  9130 ;; Registers used:
  9131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9132 ;; Tracked objects:
  9133 ;;		On entry : 0/0
  9134 ;;		On exit  : 0/0
  9135 ;;		Unchanged: 0/0
  9136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9137 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9139 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9140 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;Total ram usage:        5 bytes
  9142 ;; Hardware stack levels used:    1
  9143 ;; Hardware stack levels required when called:    3
  9144 ;; This function calls:
  9145 ;;		Nothing
  9146 ;; This function is called by:
  9147 ;;		_pic_to_led
  9148 ;;		_putchar_b_buf
  9149 ;; This function uses a non-reentrant model
  9150 ;;
  9151                           
  9152                           	psect	text44
  9153  00164E                     __ptext44:
  9154                           	opt stack 0
  9155  00164E                     _pixel_off:
  9156                           	opt stack 24
  9157                           
  9158                           ;incstack = 0
  9159                           ;pixel_off@x stored from wreg
  9160  00164E  6E53               	movwf	pixel_off@x,c
  9161                           
  9162                           ;display.c: 23: Dis_Buff[x] &= ~(1<<y);
  9163  001650  C04F  F050         	movff	pixel_off@y,??_pixel_off
  9164  001654  0E01               	movlw	1
  9165  001656  6E51               	movwf	(??_pixel_off+1)& (0+255),c
  9166  001658  2A50               	incf	??_pixel_off,f,c
  9167  00165A  D002               	goto	u1544
  9168  00165C                     u1545:
  9169  00165C  90D8               	bcf	status,0,c
  9170  00165E  3651               	rlcf	??_pixel_off+1,f,c
  9171  001660                     u1544:
  9172  001660  2E50               	decfsz	??_pixel_off,f,c
  9173  001662  D7FC               	goto	u1545
  9174  001664  1C51               	comf	??_pixel_off+1,w,c
  9175  001666  6E52               	movwf	(??_pixel_off+2)& (0+255),c
  9176  001668  5053               	movf	pixel_off@x,w,c
  9177  00166A  0F16               	addlw	low _Dis_Buff
  9178  00166C  6ED9               	movwf	fsr2l,c
  9179  00166E  6ADA               	clrf	fsr2h,c
  9180  001670  5052               	movf	??_pixel_off+2,w,c
  9181  001672  16DF               	andwf	indf2,f,c
  9182  001674  0012               	return		;funcret
  9183  001676                     __end_of_pixel_off:
  9184                           	opt stack 0
  9185                           tosu	equ	0xFFF
  9186                           tosh	equ	0xFFE
  9187                           tosl	equ	0xFFD
  9188                           pclath	equ	0xFFA
  9189                           tblptru	equ	0xFF8
  9190                           tblptrh	equ	0xFF7
  9191                           tblptrl	equ	0xFF6
  9192                           tablat	equ	0xFF5
  9193                           prodh	equ	0xFF4
  9194                           prodl	equ	0xFF3
  9195                           intcon	equ	0xFF2
  9196                           intcon2	equ	0xFF1
  9197                           postinc0	equ	0xFEE
  9198                           wreg	equ	0xFE8
  9199                           indf1	equ	0xFE7
  9200                           plusw1	equ	0xFE3
  9201                           fsr1h	equ	0xFE2
  9202                           fsr1l	equ	0xFE1
  9203                           indf2	equ	0xFDF
  9204                           postinc2	equ	0xFDE
  9205                           postdec2	equ	0xFDD
  9206                           plusw2	equ	0xFDB
  9207                           fsr2h	equ	0xFDA
  9208                           fsr2l	equ	0xFD9
  9209                           status	equ	0xFD8
  9210                           
  9211 ;; *************** function _clear_matrix *****************
  9212 ;; Defined at:
  9213 ;;		line 145 in file "display.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;		None
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  i               1   14[COMRAM] unsigned char 
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  1    wreg      void 
  9220 ;; Registers used:
  9221 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;Total ram usage:        1 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; Hardware stack levels required when called:    3
  9234 ;; This function calls:
  9235 ;;		Nothing
  9236 ;; This function is called by:
  9237 ;;		_main
  9238 ;;		_time_set_hr
  9239 ;;		_home_temp
  9240 ;; This function uses a non-reentrant model
  9241 ;;
  9242                           
  9243                           	psect	text45
  9244  001816                     __ptext45:
  9245                           	opt stack 0
  9246  001816                     _clear_matrix:
  9247                           	opt stack 27
  9248                           
  9249                           ;display.c: 147: uint8_t i;
  9250                           ;display.c: 148: for (i=0; i<=4 * 8; i++)
  9251                           
  9252                           ;incstack = 0
  9253  001816  6A4F               	clrf	clear_matrix@i,c
  9254  001818                     l3088:
  9255                           
  9256                           ;display.c: 149: Dis_Buff[i] = 0;
  9257  001818  504F               	movf	clear_matrix@i,w,c
  9258  00181A  0F16               	addlw	low _Dis_Buff
  9259  00181C  6ED9               	movwf	fsr2l,c
  9260  00181E  6ADA               	clrf	fsr2h,c
  9261  001820  6ADF               	clrf	indf2,c
  9262  001822  2A4F               	incf	clear_matrix@i,f,c
  9263  001824  0E20               	movlw	32
  9264  001826  644F               	cpfsgt	clear_matrix@i,c
  9265  001828  D7F7               	goto	l3088
  9266  00182A  0C20               	retlw	32
  9267  00182C                     __end_of_clear_matrix:
  9268                           	opt stack 0
  9269                           tosu	equ	0xFFF
  9270                           tosh	equ	0xFFE
  9271                           tosl	equ	0xFFD
  9272                           pclath	equ	0xFFA
  9273                           tblptru	equ	0xFF8
  9274                           tblptrh	equ	0xFF7
  9275                           tblptrl	equ	0xFF6
  9276                           tablat	equ	0xFF5
  9277                           prodh	equ	0xFF4
  9278                           prodl	equ	0xFF3
  9279                           intcon	equ	0xFF2
  9280                           intcon2	equ	0xFF1
  9281                           postinc0	equ	0xFEE
  9282                           wreg	equ	0xFE8
  9283                           indf1	equ	0xFE7
  9284                           plusw1	equ	0xFE3
  9285                           fsr1h	equ	0xFE2
  9286                           fsr1l	equ	0xFE1
  9287                           indf2	equ	0xFDF
  9288                           postinc2	equ	0xFDE
  9289                           postdec2	equ	0xFDD
  9290                           plusw2	equ	0xFDB
  9291                           fsr2h	equ	0xFDA
  9292                           fsr2l	equ	0xFD9
  9293                           status	equ	0xFD8
  9294                           
  9295 ;; *************** function ___lwmod *****************
  9296 ;; Defined at:
  9297 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;  dividend        2   21[COMRAM] unsigned int 
  9300 ;;  divisor         2   23[COMRAM] unsigned int 
  9301 ;; Auto vars:     Size  Location     Type
  9302 ;;  counter         1   25[COMRAM] unsigned char 
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  2   21[COMRAM] unsigned int 
  9305 ;; Registers used:
  9306 ;;		wreg, status,2, status,0
  9307 ;; Tracked objects:
  9308 ;;		On entry : 0/0
  9309 ;;		On exit  : 0/0
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9312 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9313 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;Total ram usage:        5 bytes
  9317 ;; Hardware stack levels used:    1
  9318 ;; Hardware stack levels required when called:    3
  9319 ;; This function calls:
  9320 ;;		Nothing
  9321 ;; This function is called by:
  9322 ;;		_home_temp
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           	psect	text46
  9327  0013AE                     __ptext46:
  9328                           	opt stack 0
  9329  0013AE                     ___lwmod:
  9330                           	opt stack 25
  9331                           
  9332                           ;incstack = 0
  9333  0013AE  5058               	movf	___lwmod@divisor,w,c
  9334  0013B0  1059               	iorwf	___lwmod@divisor+1,w,c
  9335  0013B2  E017               	bz	l1281
  9336  0013B4  0E01               	movlw	1
  9337  0013B6  6E5A               	movwf	___lwmod@counter,c
  9338  0013B8  D004               	goto	l3468
  9339  0013BA                     l3466:
  9340  0013BA  90D8               	bcf	status,0,c
  9341  0013BC  3658               	rlcf	___lwmod@divisor,f,c
  9342  0013BE  3659               	rlcf	___lwmod@divisor+1,f,c
  9343  0013C0  2A5A               	incf	___lwmod@counter,f,c
  9344  0013C2                     l3468:
  9345  0013C2  AE59               	btfss	___lwmod@divisor+1,7,c
  9346  0013C4  D7FA               	goto	l3466
  9347  0013C6                     l3470:
  9348  0013C6  5058               	movf	___lwmod@divisor,w,c
  9349  0013C8  5C56               	subwf	___lwmod@dividend,w,c
  9350  0013CA  5059               	movf	___lwmod@divisor+1,w,c
  9351  0013CC  5857               	subwfb	___lwmod@dividend+1,w,c
  9352  0013CE  E304               	bnc	l3474
  9353  0013D0  5058               	movf	___lwmod@divisor,w,c
  9354  0013D2  5E56               	subwf	___lwmod@dividend,f,c
  9355  0013D4  5059               	movf	___lwmod@divisor+1,w,c
  9356  0013D6  5A57               	subwfb	___lwmod@dividend+1,f,c
  9357  0013D8                     l3474:
  9358  0013D8  90D8               	bcf	status,0,c
  9359  0013DA  3259               	rrcf	___lwmod@divisor+1,f,c
  9360  0013DC  3258               	rrcf	___lwmod@divisor,f,c
  9361  0013DE  2E5A               	decfsz	___lwmod@counter,f,c
  9362  0013E0  D7F2               	goto	l3470
  9363  0013E2                     l1281:
  9364  0013E2  C056  F056         	movff	___lwmod@dividend,?___lwmod
  9365  0013E6  C057  F057         	movff	___lwmod@dividend+1,?___lwmod+1
  9366  0013EA  0012               	return		;funcret
  9367  0013EC                     __end_of___lwmod:
  9368                           	opt stack 0
  9369                           tosu	equ	0xFFF
  9370                           tosh	equ	0xFFE
  9371                           tosl	equ	0xFFD
  9372                           pclath	equ	0xFFA
  9373                           tblptru	equ	0xFF8
  9374                           tblptrh	equ	0xFF7
  9375                           tblptrl	equ	0xFF6
  9376                           tablat	equ	0xFF5
  9377                           prodh	equ	0xFF4
  9378                           prodl	equ	0xFF3
  9379                           intcon	equ	0xFF2
  9380                           intcon2	equ	0xFF1
  9381                           postinc0	equ	0xFEE
  9382                           wreg	equ	0xFE8
  9383                           indf1	equ	0xFE7
  9384                           plusw1	equ	0xFE3
  9385                           fsr1h	equ	0xFE2
  9386                           fsr1l	equ	0xFE1
  9387                           indf2	equ	0xFDF
  9388                           postinc2	equ	0xFDE
  9389                           postdec2	equ	0xFDD
  9390                           plusw2	equ	0xFDB
  9391                           fsr2h	equ	0xFDA
  9392                           fsr2l	equ	0xFD9
  9393                           status	equ	0xFD8
  9394                           
  9395 ;; *************** function ___lwdiv *****************
  9396 ;; Defined at:
  9397 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;  dividend        2   14[COMRAM] unsigned int 
  9400 ;;  divisor         2   16[COMRAM] unsigned int 
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;  quotient        2   18[COMRAM] unsigned int 
  9403 ;;  counter         1   20[COMRAM] unsigned char 
  9404 ;; Return value:  Size  Location     Type
  9405 ;;                  2   14[COMRAM] unsigned int 
  9406 ;; Registers used:
  9407 ;;		wreg, status,2, status,0
  9408 ;; Tracked objects:
  9409 ;;		On entry : 0/0
  9410 ;;		On exit  : 0/0
  9411 ;;		Unchanged: 0/0
  9412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;Total ram usage:        7 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; Hardware stack levels required when called:    3
  9420 ;; This function calls:
  9421 ;;		Nothing
  9422 ;; This function is called by:
  9423 ;;		_home_temp
  9424 ;; This function uses a non-reentrant model
  9425 ;;
  9426                           
  9427                           	psect	text47
  9428  00129A                     __ptext47:
  9429                           	opt stack 0
  9430  00129A                     ___lwdiv:
  9431                           	opt stack 25
  9432                           
  9433                           ;incstack = 0
  9434  00129A  6A53               	clrf	___lwdiv@quotient,c
  9435  00129C  6A54               	clrf	___lwdiv@quotient+1,c
  9436  00129E  5051               	movf	___lwdiv@divisor,w,c
  9437  0012A0  1052               	iorwf	___lwdiv@divisor+1,w,c
  9438  0012A2  E01B               	bz	l1271
  9439  0012A4  0E01               	movlw	1
  9440  0012A6  6E55               	movwf	___lwdiv@counter,c
  9441  0012A8  D004               	goto	l3448
  9442  0012AA                     l3446:
  9443  0012AA  90D8               	bcf	status,0,c
  9444  0012AC  3651               	rlcf	___lwdiv@divisor,f,c
  9445  0012AE  3652               	rlcf	___lwdiv@divisor+1,f,c
  9446  0012B0  2A55               	incf	___lwdiv@counter,f,c
  9447  0012B2                     l3448:
  9448  0012B2  AE52               	btfss	___lwdiv@divisor+1,7,c
  9449  0012B4  D7FA               	goto	l3446
  9450  0012B6                     l3450:
  9451  0012B6  90D8               	bcf	status,0,c
  9452  0012B8  3653               	rlcf	___lwdiv@quotient,f,c
  9453  0012BA  3654               	rlcf	___lwdiv@quotient+1,f,c
  9454  0012BC  5051               	movf	___lwdiv@divisor,w,c
  9455  0012BE  5C4F               	subwf	___lwdiv@dividend,w,c
  9456  0012C0  5052               	movf	___lwdiv@divisor+1,w,c
  9457  0012C2  5850               	subwfb	___lwdiv@dividend+1,w,c
  9458  0012C4  E305               	bnc	l3458
  9459  0012C6  5051               	movf	___lwdiv@divisor,w,c
  9460  0012C8  5E4F               	subwf	___lwdiv@dividend,f,c
  9461  0012CA  5052               	movf	___lwdiv@divisor+1,w,c
  9462  0012CC  5A50               	subwfb	___lwdiv@dividend+1,f,c
  9463  0012CE  8053               	bsf	___lwdiv@quotient,0,c
  9464  0012D0                     l3458:
  9465  0012D0  90D8               	bcf	status,0,c
  9466  0012D2  3252               	rrcf	___lwdiv@divisor+1,f,c
  9467  0012D4  3251               	rrcf	___lwdiv@divisor,f,c
  9468  0012D6  2E55               	decfsz	___lwdiv@counter,f,c
  9469  0012D8  D7EE               	goto	l3450
  9470  0012DA                     l1271:
  9471  0012DA  C053  F04F         	movff	___lwdiv@quotient,?___lwdiv
  9472  0012DE  C054  F050         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9473  0012E2  0012               	return		;funcret
  9474  0012E4                     __end_of___lwdiv:
  9475                           	opt stack 0
  9476                           tosu	equ	0xFFF
  9477                           tosh	equ	0xFFE
  9478                           tosl	equ	0xFFD
  9479                           pclath	equ	0xFFA
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           intcon	equ	0xFF2
  9487                           intcon2	equ	0xFF1
  9488                           postinc0	equ	0xFEE
  9489                           wreg	equ	0xFE8
  9490                           indf1	equ	0xFE7
  9491                           plusw1	equ	0xFE3
  9492                           fsr1h	equ	0xFE2
  9493                           fsr1l	equ	0xFE1
  9494                           indf2	equ	0xFDF
  9495                           postinc2	equ	0xFDE
  9496                           postdec2	equ	0xFDD
  9497                           plusw2	equ	0xFDB
  9498                           fsr2h	equ	0xFDA
  9499                           fsr2l	equ	0xFD9
  9500                           status	equ	0xFD8
  9501                           
  9502 ;; *************** function ___lbmod *****************
  9503 ;; Defined at:
  9504 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbmod.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  dividend        1    wreg     unsigned char 
  9507 ;;  divisor         1   18[COMRAM] unsigned char 
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;  dividend        1   19[COMRAM] unsigned char 
  9510 ;;  rem             1   21[COMRAM] unsigned char 
  9511 ;;  counter         1   20[COMRAM] unsigned char 
  9512 ;; Return value:  Size  Location     Type
  9513 ;;                  1    wreg      unsigned char 
  9514 ;; Registers used:
  9515 ;;		wreg, status,2, status,0
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9521 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9525 ;;Total ram usage:        4 bytes
  9526 ;; Hardware stack levels used:    1
  9527 ;; Hardware stack levels required when called:    3
  9528 ;; This function calls:
  9529 ;;		Nothing
  9530 ;; This function is called by:
  9531 ;;		_FillBuf
  9532 ;;		_decimal_to_bcd
  9533 ;;		_time_set_min
  9534 ;;		_time_set_hr
  9535 ;;		_time_set_yr
  9536 ;;		_time_set_dt
  9537 ;;		_home_temp
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           	psect	text48
  9542  0016C4                     __ptext48:
  9543                           	opt stack 0
  9544  0016C4                     ___lbmod:
  9545                           	opt stack 23
  9546                           
  9547                           ;incstack = 0
  9548                           ;___lbmod@dividend stored from wreg
  9549  0016C4  6E54               	movwf	___lbmod@dividend,c
  9550  0016C6  0E08               	movlw	8
  9551  0016C8  6E55               	movwf	___lbmod@counter,c
  9552  0016CA  6A56               	clrf	___lbmod@rem,c
  9553  0016CC                     l2976:
  9554  0016CC  90D8               	bcf	status,0,c
  9555  0016CE  3454               	rlcf	___lbmod@dividend,w,c
  9556  0016D0  3456               	rlcf	___lbmod@rem,w,c
  9557  0016D2  6E56               	movwf	___lbmod@rem,c
  9558  0016D4  90D8               	bcf	status,0,c
  9559  0016D6  3654               	rlcf	___lbmod@dividend,f,c
  9560  0016D8  5053               	movf	___lbmod@divisor,w,c
  9561  0016DA  5C56               	subwf	___lbmod@rem,w,c
  9562  0016DC  E302               	bnc	l2984
  9563  0016DE  5053               	movf	___lbmod@divisor,w,c
  9564  0016E0  5E56               	subwf	___lbmod@rem,f,c
  9565  0016E2                     l2984:
  9566  0016E2  2E55               	decfsz	___lbmod@counter,f,c
  9567  0016E4  D7F3               	goto	l2976
  9568  0016E6  5056               	movf	___lbmod@rem,w,c
  9569  0016E8  0012               	return		;funcret
  9570  0016EA                     __end_of___lbmod:
  9571                           	opt stack 0
  9572                           tosu	equ	0xFFF
  9573                           tosh	equ	0xFFE
  9574                           tosl	equ	0xFFD
  9575                           pclath	equ	0xFFA
  9576                           tblptru	equ	0xFF8
  9577                           tblptrh	equ	0xFF7
  9578                           tblptrl	equ	0xFF6
  9579                           tablat	equ	0xFF5
  9580                           prodh	equ	0xFF4
  9581                           prodl	equ	0xFF3
  9582                           intcon	equ	0xFF2
  9583                           intcon2	equ	0xFF1
  9584                           postinc0	equ	0xFEE
  9585                           wreg	equ	0xFE8
  9586                           indf1	equ	0xFE7
  9587                           plusw1	equ	0xFE3
  9588                           fsr1h	equ	0xFE2
  9589                           fsr1l	equ	0xFE1
  9590                           indf2	equ	0xFDF
  9591                           postinc2	equ	0xFDE
  9592                           postdec2	equ	0xFDD
  9593                           plusw2	equ	0xFDB
  9594                           fsr2h	equ	0xFDA
  9595                           fsr2l	equ	0xFD9
  9596                           status	equ	0xFD8
  9597                           
  9598 ;; *************** function ___lbdiv *****************
  9599 ;; Defined at:
  9600 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbdiv.c"
  9601 ;; Parameters:    Size  Location     Type
  9602 ;;  dividend        1    wreg     unsigned char 
  9603 ;;  divisor         1   14[COMRAM] unsigned char 
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;  dividend        1   15[COMRAM] unsigned char 
  9606 ;;  quotient        1   17[COMRAM] unsigned char 
  9607 ;;  counter         1   16[COMRAM] unsigned char 
  9608 ;; Return value:  Size  Location     Type
  9609 ;;                  1    wreg      unsigned char 
  9610 ;; Registers used:
  9611 ;;		wreg, status,2, status,0
  9612 ;; Tracked objects:
  9613 ;;		On entry : 0/0
  9614 ;;		On exit  : 0/0
  9615 ;;		Unchanged: 0/0
  9616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9617 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9618 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9621 ;;Total ram usage:        4 bytes
  9622 ;; Hardware stack levels used:    1
  9623 ;; Hardware stack levels required when called:    3
  9624 ;; This function calls:
  9625 ;;		Nothing
  9626 ;; This function is called by:
  9627 ;;		_FillBuf
  9628 ;;		_decimal_to_bcd
  9629 ;;		_time_set_min
  9630 ;;		_time_set_hr
  9631 ;;		_time_set_yr
  9632 ;;		_time_set_dt
  9633 ;;		_home_temp
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	text49
  9638  00150E                     __ptext49:
  9639                           	opt stack 0
  9640  00150E                     ___lbdiv:
  9641                           	opt stack 23
  9642                           
  9643                           ;incstack = 0
  9644                           ;___lbdiv@dividend stored from wreg
  9645  00150E  6E50               	movwf	___lbdiv@dividend,c
  9646  001510  6A52               	clrf	___lbdiv@quotient,c
  9647  001512  504F               	movf	___lbdiv@divisor,w,c
  9648  001514  E014               	bz	l2968
  9649  001516  0E01               	movlw	1
  9650  001518  6E51               	movwf	___lbdiv@counter,c
  9651  00151A  D003               	goto	l2956
  9652  00151C                     l2952:
  9653  00151C  90D8               	bcf	status,0,c
  9654  00151E  364F               	rlcf	___lbdiv@divisor,f,c
  9655  001520  2A51               	incf	___lbdiv@counter,f,c
  9656  001522                     l2956:
  9657  001522  AE4F               	btfss	___lbdiv@divisor,7,c
  9658  001524  D7FB               	goto	l2952
  9659  001526                     l2958:
  9660  001526  90D8               	bcf	status,0,c
  9661  001528  3652               	rlcf	___lbdiv@quotient,f,c
  9662  00152A  504F               	movf	___lbdiv@divisor,w,c
  9663  00152C  5C50               	subwf	___lbdiv@dividend,w,c
  9664  00152E  E303               	bnc	l2964
  9665  001530  504F               	movf	___lbdiv@divisor,w,c
  9666  001532  5E50               	subwf	___lbdiv@dividend,f,c
  9667  001534  8052               	bsf	___lbdiv@quotient,0,c
  9668  001536                     l2964:
  9669  001536  90D8               	bcf	status,0,c
  9670  001538  324F               	rrcf	___lbdiv@divisor,f,c
  9671  00153A  2E51               	decfsz	___lbdiv@counter,f,c
  9672  00153C  D7F4               	goto	l2958
  9673  00153E                     l2968:
  9674  00153E  5052               	movf	___lbdiv@quotient,w,c
  9675  001540  0012               	return		;funcret
  9676  001542                     __end_of___lbdiv:
  9677                           	opt stack 0
  9678                           tosu	equ	0xFFF
  9679                           tosh	equ	0xFFE
  9680                           tosl	equ	0xFFD
  9681                           pclath	equ	0xFFA
  9682                           tblptru	equ	0xFF8
  9683                           tblptrh	equ	0xFF7
  9684                           tblptrl	equ	0xFF6
  9685                           tablat	equ	0xFF5
  9686                           prodh	equ	0xFF4
  9687                           prodl	equ	0xFF3
  9688                           intcon	equ	0xFF2
  9689                           intcon2	equ	0xFF1
  9690                           postinc0	equ	0xFEE
  9691                           wreg	equ	0xFE8
  9692                           indf1	equ	0xFE7
  9693                           plusw1	equ	0xFE3
  9694                           fsr1h	equ	0xFE2
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           postdec2	equ	0xFDD
  9699                           plusw2	equ	0xFDB
  9700                           fsr2h	equ	0xFDA
  9701                           fsr2l	equ	0xFD9
  9702                           status	equ	0xFD8
  9703                           
  9704 ;; *************** function _RTOS_SetTask *****************
  9705 ;; Defined at:
  9706 ;;		line 22 in file "dispatcher.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
  9709 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
  9710 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
  9711 ;;		 -> GetTime(1), key_press(1), time_led(1), 
  9712 ;;  taskDelay       2   16[COMRAM] unsigned int 
  9713 ;;  taskPeriod      2   18[COMRAM] unsigned int 
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;  i               1   22[COMRAM] unsigned char 
  9716 ;; Return value:  Size  Location     Type
  9717 ;;                  1    wreg      void 
  9718 ;; Registers used:
  9719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9725 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;Total ram usage:        9 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    3
  9732 ;; This function calls:
  9733 ;;		Nothing
  9734 ;; This function is called by:
  9735 ;;		_main
  9736 ;;		_time_set_min
  9737 ;;		_time_set_hr
  9738 ;;		_time_set_yr
  9739 ;;		_time_set_mt
  9740 ;;		_time_set_dt
  9741 ;;		_time_set_dy
  9742 ;;		_home_temp
  9743 ;;		_time_led
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           	psect	text50
  9748  000E5E                     __ptext50:
  9749                           	opt stack 0
  9750  000E5E                     _RTOS_SetTask:
  9751                           	opt stack 27
  9752                           
  9753                           ;dispatcher.c: 24: uint8_t i;
  9754                           ;dispatcher.c: 26: if(!taskFunc) return;
  9755                           
  9756                           ;incstack = 0
  9757  000E5E  504F               	movf	RTOS_SetTask@taskFunc,w,c
  9758  000E60  1050               	iorwf	RTOS_SetTask@taskFunc+1,w,c
  9759  000E62  E101               	bnz	l212
  9760  000E64  0012               	return	
  9761  000E66                     l212:
  9762                           
  9763                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
  9764  000E66  6A57               	clrf	RTOS_SetTask@i,c
  9765  000E68  D018               	goto	l3110
  9766  000E6A                     l3098:
  9767                           
  9768                           ;dispatcher.c: 28: {
  9769                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
  9770  000E6A  5057               	movf	RTOS_SetTask@i,w,c
  9771  000E6C  EC82  F006         	call	PL20	;call to abstracted procedure
  9772  000E70  504F               	movf	RTOS_SetTask@taskFunc,w,c	;volatile
  9773  000E72  18DE               	xorwf	postinc2,w,c
  9774  000E74  E111               	bnz	l3108
  9775  000E76  5050               	movf	RTOS_SetTask@taskFunc+1,w,c	;volatile
  9776  000E78  18DE               	xorwf	postinc2,w,c
  9777  000E7A  E10E               	bnz	l3108
  9778                           
  9779                           ;dispatcher.c: 30: {
  9780                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
  9781  000E7C  9EF2               	bcf	intcon,7,c	;volatile
  9782                           
  9783                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
  9784  000E7E  5057               	movf	RTOS_SetTask@i,w,c
  9785  000E80  EC7F  F005         	call	PL18	;call to abstracted procedure
  9786  000E84  D825               	call	PL56	;call to abstracted procedure
  9787                           
  9788                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
  9789  000E86  5057               	movf	RTOS_SetTask@i,w,c
  9790  000E88  EC88  F006         	call	PL26	;call to abstracted procedure
  9791  000E8C  D826               	call	PL70	;call to abstracted procedure
  9792                           
  9793                           ;dispatcher.c: 35: TaskArray[i].run = 0;
  9794  000E8E  5057               	movf	RTOS_SetTask@i,w,c
  9795  000E90  EC7A  F006         	call	PL16	;call to abstracted procedure
  9796                           
  9797                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
  9798  000E94  8EF2               	bsf	intcon,7,c	;volatile
  9799  000E96  0C00               	retlw	0
  9800  000E98                     l3108:
  9801  000E98  2A57               	incf	RTOS_SetTask@i,f,c
  9802  000E9A                     l3110:
  9803  000E9A  5015               	movf	_arrayTail,w,c	;volatile
  9804  000E9C  5C57               	subwf	RTOS_SetTask@i,w,c
  9805  000E9E  E3E5               	bnc	l3098
  9806                           
  9807                           ;dispatcher.c: 39: }
  9808                           ;dispatcher.c: 40: }
  9809                           ;dispatcher.c: 42: if (arrayTail < 15)
  9810  000EA0  0E0F               	movlw	15
  9811  000EA2  6015               	cpfslt	_arrayTail,c	;volatile
  9812  000EA4  0C0F               	retlw	15
  9813                           
  9814                           ;dispatcher.c: 43: {
  9815                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
  9816  000EA6  9EF2               	bcf	intcon,7,c	;volatile
  9817                           
  9818                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
  9819  000EA8  5015               	movf	_arrayTail,w,c
  9820  000EAA  EC82  F006         	call	PL20	;call to abstracted procedure
  9821  000EAE  C04F  FFDE         	movff	RTOS_SetTask@taskFunc,postinc2	;volatile
  9822  000EB2  C050  FFDD         	movff	RTOS_SetTask@taskFunc+1,postdec2	;volatile
  9823                           
  9824                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
  9825  000EB6  5015               	movf	_arrayTail,w,c
  9826  000EB8  EC7F  F005         	call	PL18	;call to abstracted procedure
  9827  000EBC  D809               	call	PL56	;call to abstracted procedure
  9828                           
  9829                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
  9830  000EBE  5015               	movf	_arrayTail,w,c
  9831  000EC0  EC88  F006         	call	PL26	;call to abstracted procedure
  9832  000EC4  D80A               	call	PL70	;call to abstracted procedure
  9833                           
  9834                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
  9835  000EC6  5015               	movf	_arrayTail,w,c
  9836  000EC8  EC7A  F006         	call	PL16	;call to abstracted procedure
  9837                           
  9838                           ;dispatcher.c: 51: arrayTail++;
  9839                           
  9840                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
  9841  000ECC  EF98  F006         	goto	PL106	;call to abstracted procedure
  9842  000ED0                     __end_of_RTOS_SetTask:
  9843                           	opt stack 0
  9844  000ED0                     PL56:
  9845                           	opt stack 27
  9846  000ED0  C051  FFDE         	movff	RTOS_SetTask@taskDelay,postinc2
  9847  000ED4  C052  FFDD         	movff	RTOS_SetTask@taskDelay+1,postdec2
  9848  000ED8  0012               	return	
  9849  000EDA                     __end_ofPL56:
  9850                           	opt stack 0
  9851  000EDA                     PL70:
  9852                           	opt stack 27
  9853  000EDA  C053  FFDE         	movff	RTOS_SetTask@taskPeriod,postinc2
  9854  000EDE  C054  FFDD         	movff	RTOS_SetTask@taskPeriod+1,postdec2
  9855  000EE2  0012               	return	
  9856  000EE4                     __end_ofPL70:
  9857                           	opt stack 0
  9858                           tosu	equ	0xFFF
  9859                           tosh	equ	0xFFE
  9860                           tosl	equ	0xFFD
  9861                           pclath	equ	0xFFA
  9862                           tblptru	equ	0xFF8
  9863                           tblptrh	equ	0xFF7
  9864                           tblptrl	equ	0xFF6
  9865                           tablat	equ	0xFF5
  9866                           prodh	equ	0xFF4
  9867                           prodl	equ	0xFF3
  9868                           intcon	equ	0xFF2
  9869                           intcon2	equ	0xFF1
  9870                           postinc0	equ	0xFEE
  9871                           wreg	equ	0xFE8
  9872                           indf1	equ	0xFE7
  9873                           plusw1	equ	0xFE3
  9874                           fsr1h	equ	0xFE2
  9875                           fsr1l	equ	0xFE1
  9876                           indf2	equ	0xFDF
  9877                           postinc2	equ	0xFDE
  9878                           postdec2	equ	0xFDD
  9879                           plusw2	equ	0xFDB
  9880                           fsr2h	equ	0xFDA
  9881                           fsr2l	equ	0xFD9
  9882                           status	equ	0xFD8
  9883                           
  9884 ;; *************** function _RTOS_DeleteTask *****************
  9885 ;; Defined at:
  9886 ;;		line 59 in file "dispatcher.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
  9889 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
  9890 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
  9891 ;;		 -> GetTime(1), key_press(1), time_led(1), 
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;  i               1   22[COMRAM] unsigned char 
  9894 ;; Return value:  Size  Location     Type
  9895 ;;                  1    wreg      void 
  9896 ;; Registers used:
  9897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9905 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9906 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9907 ;;Total ram usage:        9 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    3
  9910 ;; This function calls:
  9911 ;;		Nothing
  9912 ;; This function is called by:
  9913 ;;		_RTOS_DispatchTask
  9914 ;;		_time_set_min
  9915 ;;		_time_set_hr
  9916 ;;		_time_set_yr
  9917 ;;		_time_set_mt
  9918 ;;		_time_set_dt
  9919 ;;		_time_set_dy
  9920 ;;		_home_temp
  9921 ;;		_time_led
  9922 ;; This function uses a non-reentrant model
  9923 ;;
  9924                           
  9925                           	psect	text51
  9926  000FE6                     __ptext51:
  9927                           	opt stack 0
  9928  000FE6                     _RTOS_DeleteTask:
  9929                           	opt stack 25
  9930                           
  9931                           ;dispatcher.c: 61: uint8_t i;
  9932                           ;dispatcher.c: 63: for (i=0; i<arrayTail; i++)
  9933                           
  9934                           ;incstack = 0
  9935  000FE6  6A57               	clrf	RTOS_DeleteTask@i,c
  9936  000FE8  D031               	goto	l3140
  9937  000FEA                     l3124:
  9938                           
  9939                           ;dispatcher.c: 64: {
  9940                           ;dispatcher.c: 65: if(TaskArray[i].pFunc == taskFunc)
  9941  000FEA  5057               	movf	RTOS_DeleteTask@i,w,c
  9942  000FEC  EC82  F006         	call	PL20	;call to abstracted procedure
  9943  000FF0  504F               	movf	RTOS_DeleteTask@taskFunc,w,c	;volatile
  9944  000FF2  18DE               	xorwf	postinc2,w,c
  9945  000FF4  E12A               	bnz	l3138
  9946  000FF6  5050               	movf	RTOS_DeleteTask@taskFunc+1,w,c	;volatile
  9947  000FF8  18DE               	xorwf	postinc2,w,c
  9948  000FFA  E127               	bnz	l3138
  9949                           
  9950                           ;dispatcher.c: 66: {
  9951                           ;dispatcher.c: 68: (INTCONbits.GIE = 0);
  9952  000FFC  9EF2               	bcf	intcon,7,c	;volatile
  9953                           
  9954                           ;dispatcher.c: 69: if(i != (arrayTail - 1))
  9955  000FFE  5057               	movf	RTOS_DeleteTask@i,w,c
  9956  001000  6E51               	movwf	??_RTOS_DeleteTask& (0+255),c
  9957  001002  6A52               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
  9958  001004  6853               	setf	(??_RTOS_DeleteTask+2)& (0+255),c
  9959  001006  6854               	setf	(??_RTOS_DeleteTask+3)& (0+255),c
  9960  001008  5015               	movf	_arrayTail,w,c	;volatile
  9961  00100A  6E55               	movwf	(??_RTOS_DeleteTask+4)& (0+255),c
  9962  00100C  6A56               	clrf	(??_RTOS_DeleteTask+5)& (0+255),c
  9963  00100E  5053               	movf	??_RTOS_DeleteTask+2,w,c
  9964  001010  2655               	addwf	??_RTOS_DeleteTask+4,f,c
  9965  001012  5054               	movf	??_RTOS_DeleteTask+3,w,c
  9966  001014  2256               	addwfc	??_RTOS_DeleteTask+5,f,c
  9967  001016  5051               	movf	??_RTOS_DeleteTask,w,c
  9968  001018  1855               	xorwf	??_RTOS_DeleteTask+4,w,c
  9969  00101A  E103               	bnz	u1660
  9970  00101C  5052               	movf	??_RTOS_DeleteTask+1,w,c
  9971  00101E  1856               	xorwf	??_RTOS_DeleteTask+5,w,c
  9972  001020  E011               	bz	l3132
  9973  001022                     u1660:
  9974                           
  9975                           ;dispatcher.c: 70: {
  9976                           ;dispatcher.c: 71: TaskArray[i] = TaskArray[arrayTail - 1];
  9977  001022  5015               	movf	_arrayTail,w,c	;volatile
  9978  001024  0D08               	mullw	8
  9979  001026  50F3               	movf	prodl,w,c
  9980  001028  0F78               	addlw	low (_TaskArray+248)
  9981  00102A  6ED9               	movwf	fsr2l,c
  9982  00102C  6ADA               	clrf	fsr2h,c
  9983  00102E  5057               	movf	RTOS_DeleteTask@i,w,c
  9984  001030  0D08               	mullw	8
  9985  001032  50F3               	movf	prodl,w,c
  9986  001034  0F80               	addlw	low _TaskArray
  9987  001036  6EE1               	movwf	fsr1l,c
  9988  001038  6AE2               	clrf	fsr1h,c
  9989  00103A  0E07               	movlw	7
  9990  00103C                     u1671:
  9991  00103C  CFDB FFE3          	movff	plusw2,plusw1
  9992  001040  06E8               	decf	wreg,f,c
  9993  001042  E2FC               	bc	u1671
  9994  001044                     l3132:
  9995                           
  9996                           ;dispatcher.c: 72: }
  9997                           ;dispatcher.c: 73: arrayTail--;
  9998  001044  0615               	decf	_arrayTail,f,c	;volatile
  9999                           
 10000                           ;dispatcher.c: 74: (INTCONbits.GIE = 1);
 10001  001046  8EF2               	bsf	intcon,7,c	;volatile
 10002  001048  0012               	return	
 10003  00104A                     l3138:
 10004  00104A  2A57               	incf	RTOS_DeleteTask@i,f,c
 10005  00104C                     l3140:
 10006  00104C  5015               	movf	_arrayTail,w,c	;volatile
 10007  00104E  5C57               	subwf	RTOS_DeleteTask@i,w,c
 10008  001050  E3CC               	bnc	l3124
 10009  001052  0012               	return		;funcret
 10010  001054                     __end_of_RTOS_DeleteTask:
 10011                           	opt stack 0
 10012                           tosu	equ	0xFFF
 10013                           tosh	equ	0xFFE
 10014                           tosl	equ	0xFFD
 10015                           pclath	equ	0xFFA
 10016                           tblptru	equ	0xFF8
 10017                           tblptrh	equ	0xFF7
 10018                           tblptrl	equ	0xFF6
 10019                           tablat	equ	0xFF5
 10020                           prodh	equ	0xFF4
 10021                           prodl	equ	0xFF3
 10022                           intcon	equ	0xFF2
 10023                           intcon2	equ	0xFF1
 10024                           postinc0	equ	0xFEE
 10025                           wreg	equ	0xFE8
 10026                           indf1	equ	0xFE7
 10027                           plusw1	equ	0xFE3
 10028                           fsr1h	equ	0xFE2
 10029                           fsr1l	equ	0xFE1
 10030                           indf2	equ	0xFDF
 10031                           postinc2	equ	0xFDE
 10032                           postdec2	equ	0xFDD
 10033                           plusw2	equ	0xFDB
 10034                           fsr2h	equ	0xFDA
 10035                           fsr2l	equ	0xFD9
 10036                           status	equ	0xFD8
 10037                           
 10038 ;; *************** function _getTime *****************
 10039 ;; Defined at:
 10040 ;;		line 46 in file "ds3231.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;  p3              1   19[COMRAM] PTR unsigned char 
 10043 ;;		 -> TTime(7), 
 10044 ;;  p2              1   20[COMRAM] PTR unsigned char 
 10045 ;;		 -> TTime(7), 
 10046 ;;  p1              1   21[COMRAM] PTR unsigned char 
 10047 ;;		 -> TTime(7), 
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;		None
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      void 
 10052 ;; Registers used:
 10053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10059 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;Total ram usage:        3 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    6
 10066 ;; This function calls:
 10067 ;;		_DS3231_Read
 10068 ;;		_bcd_to_decimal
 10069 ;; This function is called by:
 10070 ;;		_GetTime
 10071 ;;		_home_temp
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text52
 10076  001194                     __ptext52:
 10077                           	opt stack 0
 10078  001194                     _getTime:
 10079                           	opt stack 22
 10080                           
 10081                           ;ds3231.c: 48: *p1 = DS3231_Read(0x00);
 10082                           
 10083                           ;incstack = 0
 10084  001194  5056               	movf	getTime@p1,w,c
 10085  001196  6ED9               	movwf	fsr2l,c
 10086  001198  6ADA               	clrf	fsr2h,c
 10087  00119A  0E00               	movlw	0
 10088  00119C  EC3B  F00B         	call	_DS3231_Read
 10089  0011A0  6EDF               	movwf	indf2,c
 10090                           
 10091                           ;ds3231.c: 49: *p1 = bcd_to_decimal(*p1);
 10092  0011A2  5056               	movf	getTime@p1,w,c
 10093  0011A4  6ED9               	movwf	fsr2l,c
 10094  0011A6  6ADA               	clrf	fsr2h,c
 10095  0011A8  5056               	movf	getTime@p1,w,c
 10096  0011AA  ECA0  F007         	call	PL40	;call to abstracted procedure
 10097  0011AE  EC16  F00C         	call	_bcd_to_decimal
 10098                           
 10099                           ;ds3231.c: 50: *p2 = DS3231_Read(0x01);
 10100  0011B2  D816               	call	PL66	;call to abstracted procedure
 10101  0011B4  0E01               	movlw	1
 10102  0011B6  EC3B  F00B         	call	_DS3231_Read
 10103                           
 10104                           ;ds3231.c: 51: *p2 = bcd_to_decimal(*p2);
 10105  0011BA  D812               	call	PL66	;call to abstracted procedure
 10106  0011BC  5055               	movf	getTime@p2,w,c
 10107  0011BE  ECA0  F007         	call	PL40	;call to abstracted procedure
 10108  0011C2  EC16  F00C         	call	_bcd_to_decimal
 10109                           
 10110                           ;ds3231.c: 52: *p3 = (0x3F & DS3231_Read(0x02));
 10111  0011C6  D811               	call	PL68	;call to abstracted procedure
 10112  0011C8  0E02               	movlw	2
 10113  0011CA  EC3B  F00B         	call	_DS3231_Read
 10114  0011CE  0B3F               	andlw	63
 10115                           
 10116                           ;ds3231.c: 53: *p3 = bcd_to_decimal(*p3);
 10117  0011D0  D80C               	call	PL68	;call to abstracted procedure
 10118  0011D2  5054               	movf	getTime@p3,w,c
 10119  0011D4  ECA0  F007         	call	PL40	;call to abstracted procedure
 10120  0011D8  EC16  F00C         	call	_bcd_to_decimal
 10121  0011DC  6EDF               	movwf	indf2,c
 10122  0011DE  0012               	return		;funcret
 10123  0011E0                     __end_of_getTime:
 10124                           	opt stack 0
 10125  0011E0                     PL66:
 10126                           	opt stack 22
 10127  0011E0  6EDF               	movwf	indf2,c
 10128  0011E2  5055               	movf	getTime@p2,w,c
 10129  0011E4  6ED9               	movwf	fsr2l,c
 10130  0011E6  6ADA               	clrf	fsr2h,c
 10131  0011E8  0012               	return	
 10132  0011EA                     __end_ofPL66:
 10133                           	opt stack 0
 10134  0011EA                     PL68:
 10135                           	opt stack 22
 10136  0011EA  6EDF               	movwf	indf2,c
 10137  0011EC  5054               	movf	getTime@p3,w,c
 10138  0011EE  6ED9               	movwf	fsr2l,c
 10139  0011F0  6ADA               	clrf	fsr2h,c
 10140  0011F2  0012               	return	
 10141  0011F4                     __end_ofPL68:
 10142                           	opt stack 0
 10143                           tosu	equ	0xFFF
 10144                           tosh	equ	0xFFE
 10145                           tosl	equ	0xFFD
 10146                           pclath	equ	0xFFA
 10147                           tblptru	equ	0xFF8
 10148                           tblptrh	equ	0xFF7
 10149                           tblptrl	equ	0xFF6
 10150                           tablat	equ	0xFF5
 10151                           prodh	equ	0xFF4
 10152                           prodl	equ	0xFF3
 10153                           intcon	equ	0xFF2
 10154                           intcon2	equ	0xFF1
 10155                           postinc0	equ	0xFEE
 10156                           wreg	equ	0xFE8
 10157                           indf1	equ	0xFE7
 10158                           plusw1	equ	0xFE3
 10159                           fsr1h	equ	0xFE2
 10160                           fsr1l	equ	0xFE1
 10161                           indf2	equ	0xFDF
 10162                           postinc2	equ	0xFDE
 10163                           postdec2	equ	0xFDD
 10164                           plusw2	equ	0xFDB
 10165                           fsr2h	equ	0xFDA
 10166                           fsr2l	equ	0xFD9
 10167                           status	equ	0xFD8
 10168                           
 10169 ;; *************** function _getDate *****************
 10170 ;; Defined at:
 10171 ;;		line 59 in file "ds3231.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;  p4              1   19[COMRAM] PTR unsigned char 
 10174 ;;		 -> TTime(7), 
 10175 ;;  p3              1   20[COMRAM] PTR unsigned char 
 10176 ;;		 -> TTime(7), 
 10177 ;;  p2              1   21[COMRAM] PTR unsigned char 
 10178 ;;		 -> TTime(7), 
 10179 ;;  p1              1   22[COMRAM] PTR unsigned char 
 10180 ;;		 -> TTime(7), 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;		None
 10183 ;; Return value:  Size  Location     Type
 10184 ;;                  1    wreg      void 
 10185 ;; Registers used:
 10186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10192 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;Total ram usage:        4 bytes
 10197 ;; Hardware stack levels used:    1
 10198 ;; Hardware stack levels required when called:    6
 10199 ;; This function calls:
 10200 ;;		_DS3231_Read
 10201 ;;		_bcd_to_decimal
 10202 ;; This function is called by:
 10203 ;;		_GetTime
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           	psect	text53
 10208  000EE4                     __ptext53:
 10209                           	opt stack 0
 10210  000EE4                     _getDate:
 10211                           	opt stack 22
 10212                           
 10213                           ;ds3231.c: 61: *p1 = DS3231_Read(0x06);
 10214                           
 10215                           ;incstack = 0
 10216  000EE4  5057               	movf	getDate@p1,w,c
 10217  000EE6  6ED9               	movwf	fsr2l,c
 10218  000EE8  6ADA               	clrf	fsr2h,c
 10219  000EEA  0E06               	movlw	6
 10220  000EEC  EC3B  F00B         	call	_DS3231_Read
 10221  000EF0  6EDF               	movwf	indf2,c
 10222                           
 10223                           ;ds3231.c: 62: *p1 = bcd_to_decimal(*p1);
 10224  000EF2  5057               	movf	getDate@p1,w,c
 10225  000EF4  6ED9               	movwf	fsr2l,c
 10226  000EF6  6ADA               	clrf	fsr2h,c
 10227  000EF8  5057               	movf	getDate@p1,w,c
 10228  000EFA  D822               	call	PL40	;call to abstracted procedure
 10229  000EFC  EC16  F00C         	call	_bcd_to_decimal
 10230                           
 10231                           ;ds3231.c: 63: *p2 = (0x1F & DS3231_Read(0x05));
 10232  000F00  D823               	call	PL52	;call to abstracted procedure
 10233  000F02  0E05               	movlw	5
 10234  000F04  EC3B  F00B         	call	_DS3231_Read
 10235  000F08  0B1F               	andlw	31
 10236                           
 10237                           ;ds3231.c: 64: *p2 = bcd_to_decimal(*p2);
 10238  000F0A  D81E               	call	PL52	;call to abstracted procedure
 10239  000F0C  5056               	movf	getDate@p2,w,c
 10240  000F0E  D818               	call	PL40	;call to abstracted procedure
 10241  000F10  EC16  F00C         	call	_bcd_to_decimal
 10242                           
 10243                           ;ds3231.c: 65: *p3 = (0x3F & DS3231_Read(0x04));
 10244  000F14  D81E               	call	PL82	;call to abstracted procedure
 10245  000F16  0E04               	movlw	4
 10246  000F18  EC3B  F00B         	call	_DS3231_Read
 10247  000F1C  0B3F               	andlw	63
 10248                           
 10249                           ;ds3231.c: 66: *p3 = bcd_to_decimal(*p3);
 10250  000F1E  D819               	call	PL82	;call to abstracted procedure
 10251  000F20  5055               	movf	getDate@p3,w,c
 10252  000F22  D80E               	call	PL40	;call to abstracted procedure
 10253  000F24  EC16  F00C         	call	_bcd_to_decimal
 10254                           
 10255                           ;ds3231.c: 67: *p4 = (0x07 & DS3231_Read(0x03));
 10256  000F28  D819               	call	PL84	;call to abstracted procedure
 10257  000F2A  0E03               	movlw	3
 10258  000F2C  EC3B  F00B         	call	_DS3231_Read
 10259  000F30  0B07               	andlw	7
 10260                           
 10261                           ;ds3231.c: 68: *p4 = bcd_to_decimal(*p4);
 10262  000F32  D814               	call	PL84	;call to abstracted procedure
 10263  000F34  5054               	movf	getDate@p4,w,c
 10264  000F36  D804               	call	PL40	;call to abstracted procedure
 10265  000F38  EC16  F00C         	call	_bcd_to_decimal
 10266  000F3C  6EDF               	movwf	indf2,c
 10267  000F3E  0012               	return		;funcret
 10268  000F40                     __end_of_getDate:
 10269                           	opt stack 0
 10270  000F40                     PL40:
 10271                           	opt stack 22
 10272  000F40  6EE1               	movwf	fsr1l,c
 10273  000F42  6AE2               	clrf	fsr1h,c
 10274  000F44  50E7               	movf	indf1,w,c
 10275  000F46  0012               	return	
 10276  000F48                     __end_ofPL40:
 10277                           	opt stack 0
 10278  000F48                     PL52:
 10279                           	opt stack 22
 10280  000F48  6EDF               	movwf	indf2,c
 10281  000F4A  5056               	movf	getDate@p2,w,c
 10282  000F4C  6ED9               	movwf	fsr2l,c
 10283  000F4E  6ADA               	clrf	fsr2h,c
 10284  000F50  0012               	return	
 10285  000F52                     __end_ofPL52:
 10286                           	opt stack 0
 10287  000F52                     PL82:
 10288                           	opt stack 22
 10289  000F52  6EDF               	movwf	indf2,c
 10290  000F54  5055               	movf	getDate@p3,w,c
 10291  000F56  6ED9               	movwf	fsr2l,c
 10292  000F58  6ADA               	clrf	fsr2h,c
 10293  000F5A  0012               	return	
 10294  000F5C                     __end_ofPL82:
 10295                           	opt stack 0
 10296  000F5C                     PL84:
 10297                           	opt stack 22
 10298  000F5C  6EDF               	movwf	indf2,c
 10299  000F5E  5054               	movf	getDate@p4,w,c
 10300  000F60  6ED9               	movwf	fsr2l,c
 10301  000F62  6ADA               	clrf	fsr2h,c
 10302  000F64  0012               	return	
 10303  000F66                     __end_ofPL84:
 10304                           	opt stack 0
 10305                           tosu	equ	0xFFF
 10306                           tosh	equ	0xFFE
 10307                           tosl	equ	0xFFD
 10308                           pclath	equ	0xFFA
 10309                           tblptru	equ	0xFF8
 10310                           tblptrh	equ	0xFF7
 10311                           tblptrl	equ	0xFF6
 10312                           tablat	equ	0xFF5
 10313                           prodh	equ	0xFF4
 10314                           prodl	equ	0xFF3
 10315                           intcon	equ	0xFF2
 10316                           intcon2	equ	0xFF1
 10317                           postinc0	equ	0xFEE
 10318                           wreg	equ	0xFE8
 10319                           indf1	equ	0xFE7
 10320                           plusw1	equ	0xFE3
 10321                           fsr1h	equ	0xFE2
 10322                           fsr1l	equ	0xFE1
 10323                           indf2	equ	0xFDF
 10324                           postinc2	equ	0xFDE
 10325                           postdec2	equ	0xFDD
 10326                           plusw2	equ	0xFDB
 10327                           fsr2h	equ	0xFDA
 10328                           fsr2l	equ	0xFD9
 10329                           status	equ	0xFD8
 10330                           
 10331 ;; *************** function _bcd_to_decimal *****************
 10332 ;; Defined at:
 10333 ;;		line 4 in file "ds3231.c"
 10334 ;; Parameters:    Size  Location     Type
 10335 ;;  d               1    wreg     unsigned char 
 10336 ;; Auto vars:     Size  Location     Type
 10337 ;;  d               1   15[COMRAM] unsigned char 
 10338 ;; Return value:  Size  Location     Type
 10339 ;;                  1    wreg      unsigned char 
 10340 ;; Registers used:
 10341 ;;		wreg, status,2, status,0, prodl, prodh
 10342 ;; Tracked objects:
 10343 ;;		On entry : 0/0
 10344 ;;		On exit  : 0/0
 10345 ;;		Unchanged: 0/0
 10346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10350 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10351 ;;Total ram usage:        2 bytes
 10352 ;; Hardware stack levels used:    1
 10353 ;; Hardware stack levels required when called:    3
 10354 ;; This function calls:
 10355 ;;		Nothing
 10356 ;; This function is called by:
 10357 ;;		_getTime
 10358 ;;		_getDate
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           	psect	text54
 10363  00182C                     __ptext54:
 10364                           	opt stack 0
 10365  00182C                     _bcd_to_decimal:
 10366                           	opt stack 24
 10367                           
 10368                           ;incstack = 0
 10369                           ;bcd_to_decimal@d stored from wreg
 10370  00182C  6E50               	movwf	bcd_to_decimal@d,c
 10371                           
 10372                           ;ds3231.c: 6: return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10));
 10373  00182E  C050  F04F         	movff	bcd_to_decimal@d,??_bcd_to_decimal
 10374  001832  0E0F               	movlw	15
 10375  001834  164F               	andwf	??_bcd_to_decimal,f,c
 10376  001836  3850               	swapf	bcd_to_decimal@d,w,c
 10377  001838  0B0F               	andlw	15
 10378  00183A  0D0A               	mullw	10
 10379  00183C  50F3               	movf	prodl,w,c
 10380  00183E  244F               	addwf	??_bcd_to_decimal,w,c
 10381  001840  0012               	return		;funcret
 10382  001842                     __end_of_bcd_to_decimal:
 10383                           	opt stack 0
 10384                           tosu	equ	0xFFF
 10385                           tosh	equ	0xFFE
 10386                           tosl	equ	0xFFD
 10387                           pclath	equ	0xFFA
 10388                           tblptru	equ	0xFF8
 10389                           tblptrh	equ	0xFF7
 10390                           tblptrl	equ	0xFF6
 10391                           tablat	equ	0xFF5
 10392                           prodh	equ	0xFF4
 10393                           prodl	equ	0xFF3
 10394                           intcon	equ	0xFF2
 10395                           intcon2	equ	0xFF1
 10396                           postinc0	equ	0xFEE
 10397                           wreg	equ	0xFE8
 10398                           indf1	equ	0xFE7
 10399                           plusw1	equ	0xFE3
 10400                           fsr1h	equ	0xFE2
 10401                           fsr1l	equ	0xFE1
 10402                           indf2	equ	0xFDF
 10403                           postinc2	equ	0xFDE
 10404                           postdec2	equ	0xFDD
 10405                           plusw2	equ	0xFDB
 10406                           fsr2h	equ	0xFDA
 10407                           fsr2l	equ	0xFD9
 10408                           status	equ	0xFD8
 10409                           
 10410 ;; *************** function _DS3231_Read *****************
 10411 ;; Defined at:
 10412 ;;		line 16 in file "ds3231.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;  address         1    wreg     unsigned char 
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;  address         1   17[COMRAM] unsigned char 
 10417 ;;  value           1   18[COMRAM] unsigned char 
 10418 ;; Return value:  Size  Location     Type
 10419 ;;                  1    wreg      unsigned char 
 10420 ;; Registers used:
 10421 ;;		wreg, status,2, status,0, cstack
 10422 ;; Tracked objects:
 10423 ;;		On entry : 0/0
 10424 ;;		On exit  : 0/0
 10425 ;;		Unchanged: 0/0
 10426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;Total ram usage:        2 bytes
 10432 ;; Hardware stack levels used:    1
 10433 ;; Hardware stack levels required when called:    5
 10434 ;; This function calls:
 10435 ;;		_I2C_read_noack
 10436 ;;		_I2C_restart
 10437 ;;		_I2C_start
 10438 ;;		_I2C_stop
 10439 ;;		_I2C_write
 10440 ;; This function is called by:
 10441 ;;		_getTime
 10442 ;;		_getDate
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           	psect	text55
 10447  001676                     __ptext55:
 10448                           	opt stack 0
 10449  001676                     _DS3231_Read:
 10450                           	opt stack 22
 10451                           
 10452                           ;incstack = 0
 10453                           ;DS3231_Read@address stored from wreg
 10454  001676  6E52               	movwf	DS3231_Read@address,c
 10455                           
 10456                           ;ds3231.c: 19: I2C_start(0xD0,0);
 10457  001678  6A50               	clrf	I2C_start@_R_W,c
 10458  00167A  0ED0               	movlw	208
 10459  00167C  ECE9  F00A         	call	_I2C_start
 10460                           
 10461                           ;ds3231.c: 20: I2C_write(address);
 10462  001680  5052               	movf	DS3231_Read@address,w,c
 10463  001682  ECE4  F00B         	call	_I2C_write
 10464                           
 10465                           ;ds3231.c: 21: I2C_restart(0xD0,1);
 10466  001686  0E01               	movlw	1
 10467  001688  6E50               	movwf	I2C_restart@_R_W,c
 10468  00168A  0ED0               	movlw	208
 10469  00168C  ECFE  F00A         	call	_I2C_restart
 10470                           
 10471                           ;ds3231.c: 22: value = I2C_read_noack();
 10472  001690  EC34  F00C         	call	_I2C_read_noack	;wreg free
 10473  001694  6E53               	movwf	DS3231_Read@value,c
 10474                           
 10475                           ;ds3231.c: 23: I2C_stop();
 10476  001696  EC64  F00C         	call	_I2C_stop	;wreg free
 10477                           
 10478                           ;ds3231.c: 24: return value;
 10479  00169A  5053               	movf	DS3231_Read@value,w,c
 10480  00169C  0012               	return		;funcret
 10481  00169E                     __end_of_DS3231_Read:
 10482                           	opt stack 0
 10483                           tosu	equ	0xFFF
 10484                           tosh	equ	0xFFE
 10485                           tosl	equ	0xFFD
 10486                           pclath	equ	0xFFA
 10487                           tblptru	equ	0xFF8
 10488                           tblptrh	equ	0xFF7
 10489                           tblptrl	equ	0xFF6
 10490                           tablat	equ	0xFF5
 10491                           prodh	equ	0xFF4
 10492                           prodl	equ	0xFF3
 10493                           intcon	equ	0xFF2
 10494                           intcon2	equ	0xFF1
 10495                           postinc0	equ	0xFEE
 10496                           wreg	equ	0xFE8
 10497                           indf1	equ	0xFE7
 10498                           plusw1	equ	0xFE3
 10499                           fsr1h	equ	0xFE2
 10500                           fsr1l	equ	0xFE1
 10501                           indf2	equ	0xFDF
 10502                           postinc2	equ	0xFDE
 10503                           postdec2	equ	0xFDD
 10504                           plusw2	equ	0xFDB
 10505                           fsr2h	equ	0xFDA
 10506                           fsr2l	equ	0xFD9
 10507                           status	equ	0xFD8
 10508                           
 10509 ;; *************** function _I2C_write *****************
 10510 ;; Defined at:
 10511 ;;		line 63 in file "i2c.c"
 10512 ;; Parameters:    Size  Location     Type
 10513 ;;  data            1    wreg     unsigned char 
 10514 ;; Auto vars:     Size  Location     Type
 10515 ;;  data            1   15[COMRAM] unsigned char 
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  1    wreg      unsigned char 
 10518 ;; Registers used:
 10519 ;;		wreg, status,2, status,0, cstack
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10528 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10529 ;;Total ram usage:        1 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; Hardware stack levels required when called:    4
 10532 ;; This function calls:
 10533 ;;		_I2C_idle
 10534 ;; This function is called by:
 10535 ;;		_DS3231_Read
 10536 ;;		_DS3231_Write
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           	psect	text56
 10541  0017C8                     __ptext56:
 10542                           	opt stack 0
 10543  0017C8                     _I2C_write:
 10544                           	opt stack 23
 10545                           
 10546                           ;incstack = 0
 10547                           ;I2C_write@data stored from wreg
 10548  0017C8  6E50               	movwf	I2C_write@data,c
 10549                           
 10550                           ;i2c.c: 65: I2C_idle();
 10551  0017CA  EC4E  F00C         	call	_I2C_idle	;wreg free
 10552                           
 10553                           ;i2c.c: 66: SSPBUF = data;
 10554  0017CE  C050  FFC9         	movff	I2C_write@data,4041	;volatile
 10555                           
 10556                           ;i2c.c: 67: SSPIF = 0;
 10557  0017D2  969E               	bcf	3998,3,c	;volatile
 10558                           
 10559                           ;i2c.c: 68: I2C_idle();
 10560  0017D4  EC4E  F00C         	call	_I2C_idle	;wreg free
 10561                           
 10562                           ;i2c.c: 69: if (ACKSTAT == 0) return 0;
 10563  0017D8  ACC5               	btfss	4037,6,c	;volatile
 10564  0017DA  0012               	return	
 10565                           
 10566                           ;i2c.c: 70: else
 10567                           ;i2c.c: 71: { PEN = 1; while (PEN); return 1;}
 10568  0017DC  84C5               	bsf	4037,2,c	;volatile
 10569  0017DE                     l171:
 10570  0017DE  A4C5               	btfss	4037,2,c	;volatile
 10571  0017E0  0012               	return		;funcret
 10572  0017E2  D7FD               	goto	l171
 10573  0017E4                     __end_of_I2C_write:
 10574                           	opt stack 0
 10575                           tosu	equ	0xFFF
 10576                           tosh	equ	0xFFE
 10577                           tosl	equ	0xFFD
 10578                           pclath	equ	0xFFA
 10579                           tblptru	equ	0xFF8
 10580                           tblptrh	equ	0xFF7
 10581                           tblptrl	equ	0xFF6
 10582                           tablat	equ	0xFF5
 10583                           prodh	equ	0xFF4
 10584                           prodl	equ	0xFF3
 10585                           intcon	equ	0xFF2
 10586                           intcon2	equ	0xFF1
 10587                           postinc0	equ	0xFEE
 10588                           wreg	equ	0xFE8
 10589                           indf1	equ	0xFE7
 10590                           plusw1	equ	0xFE3
 10591                           fsr1h	equ	0xFE2
 10592                           fsr1l	equ	0xFE1
 10593                           indf2	equ	0xFDF
 10594                           postinc2	equ	0xFDE
 10595                           postdec2	equ	0xFDD
 10596                           plusw2	equ	0xFDB
 10597                           fsr2h	equ	0xFDA
 10598                           fsr2l	equ	0xFD9
 10599                           status	equ	0xFD8
 10600                           
 10601 ;; *************** function _I2C_stop *****************
 10602 ;; Defined at:
 10603 ;;		line 87 in file "i2c.c"
 10604 ;; Parameters:    Size  Location     Type
 10605 ;;		None
 10606 ;; Auto vars:     Size  Location     Type
 10607 ;;		None
 10608 ;; Return value:  Size  Location     Type
 10609 ;;                  1    wreg      void 
 10610 ;; Registers used:
 10611 ;;		wreg, status,2, status,0, cstack
 10612 ;; Tracked objects:
 10613 ;;		On entry : 0/0
 10614 ;;		On exit  : 0/0
 10615 ;;		Unchanged: 0/0
 10616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10621 ;;Total ram usage:        0 bytes
 10622 ;; Hardware stack levels used:    1
 10623 ;; Hardware stack levels required when called:    4
 10624 ;; This function calls:
 10625 ;;		_I2C_idle
 10626 ;; This function is called by:
 10627 ;;		_DS3231_Read
 10628 ;;		_DS3231_Write
 10629 ;; This function uses a non-reentrant model
 10630 ;;
 10631                           
 10632                           	psect	text57
 10633  0018C8                     __ptext57:
 10634                           	opt stack 0
 10635  0018C8                     _I2C_stop:
 10636                           	opt stack 23
 10637                           
 10638                           ;i2c.c: 89: I2C_idle();
 10639                           
 10640                           ;incstack = 0
 10641  0018C8  EC4E  F00C         	call	_I2C_idle	;wreg free
 10642                           
 10643                           ;i2c.c: 90: PEN = 1;
 10644  0018CC  84C5               	bsf	4037,2,c	;volatile
 10645  0018CE                     l179:
 10646  0018CE  A4C5               	btfss	4037,2,c	;volatile
 10647  0018D0  0012               	return		;funcret
 10648  0018D2  D7FD               	goto	l179
 10649  0018D4                     __end_of_I2C_stop:
 10650                           	opt stack 0
 10651                           tosu	equ	0xFFF
 10652                           tosh	equ	0xFFE
 10653                           tosl	equ	0xFFD
 10654                           pclath	equ	0xFFA
 10655                           tblptru	equ	0xFF8
 10656                           tblptrh	equ	0xFF7
 10657                           tblptrl	equ	0xFF6
 10658                           tablat	equ	0xFF5
 10659                           prodh	equ	0xFF4
 10660                           prodl	equ	0xFF3
 10661                           intcon	equ	0xFF2
 10662                           intcon2	equ	0xFF1
 10663                           postinc0	equ	0xFEE
 10664                           wreg	equ	0xFE8
 10665                           indf1	equ	0xFE7
 10666                           plusw1	equ	0xFE3
 10667                           fsr1h	equ	0xFE2
 10668                           fsr1l	equ	0xFE1
 10669                           indf2	equ	0xFDF
 10670                           postinc2	equ	0xFDE
 10671                           postdec2	equ	0xFDD
 10672                           plusw2	equ	0xFDB
 10673                           fsr2h	equ	0xFDA
 10674                           fsr2l	equ	0xFD9
 10675                           status	equ	0xFD8
 10676                           
 10677 ;; *************** function _I2C_start *****************
 10678 ;; Defined at:
 10679 ;;		line 32 in file "i2c.c"
 10680 ;; Parameters:    Size  Location     Type
 10681 ;;  adress          1    wreg     unsigned char 
 10682 ;;  _R_W            1   15[COMRAM] unsigned char 
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;  adress          1   16[COMRAM] unsigned char 
 10685 ;; Return value:  Size  Location     Type
 10686 ;;                  1    wreg      unsigned char 
 10687 ;; Registers used:
 10688 ;;		wreg, status,2, status,0, cstack
 10689 ;; Tracked objects:
 10690 ;;		On entry : 0/0
 10691 ;;		On exit  : 0/0
 10692 ;;		Unchanged: 0/0
 10693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10694 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10695 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;Total ram usage:        2 bytes
 10699 ;; Hardware stack levels used:    1
 10700 ;; Hardware stack levels required when called:    4
 10701 ;; This function calls:
 10702 ;;		_I2C_idle
 10703 ;; This function is called by:
 10704 ;;		_DS3231_Read
 10705 ;;		_DS3231_Write
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           	psect	text58
 10710  0015D2                     __ptext58:
 10711                           	opt stack 0
 10712  0015D2                     _I2C_start:
 10713                           	opt stack 23
 10714                           
 10715                           ;incstack = 0
 10716                           ;I2C_start@adress stored from wreg
 10717  0015D2  6E51               	movwf	I2C_start@adress,c
 10718                           
 10719                           ;i2c.c: 34: I2C_idle();
 10720  0015D4  EC4E  F00C         	call	_I2C_idle	;wreg free
 10721                           
 10722                           ;i2c.c: 35: SEN = 1;
 10723  0015D8  80C5               	bsf	4037,0,c	;volatile
 10724                           
 10725                           ;i2c.c: 36: I2C_idle();
 10726  0015DA  EC4E  F00C         	call	_I2C_idle	;wreg free
 10727                           
 10728                           ;i2c.c: 37: if(_R_W == 0) adress &= 0b11111110;
 10729  0015DE  5050               	movf	I2C_start@_R_W,w,c
 10730  0015E0  E102               	bnz	l2848
 10731  0015E2  9051               	bcf	I2C_start@adress,0,c
 10732  0015E4  D001               	goto	l2850
 10733  0015E6                     l2848:
 10734                           
 10735                           ;i2c.c: 38: else adress |= 0b00000001;
 10736  0015E6  8051               	bsf	I2C_start@adress,0,c
 10737  0015E8                     l2850:
 10738                           
 10739                           ;i2c.c: 39: SSPBUF=adress;
 10740  0015E8  C051  FFC9         	movff	I2C_start@adress,4041	;volatile
 10741                           
 10742                           ;i2c.c: 40: I2C_idle();
 10743  0015EC  EC4E  F00C         	call	_I2C_idle	;wreg free
 10744                           
 10745                           ;i2c.c: 41: if (ACKSTAT==0) return 0;
 10746  0015F0  ACC5               	btfss	4037,6,c	;volatile
 10747  0015F2  0012               	return	
 10748                           
 10749                           ;i2c.c: 42: else
 10750                           ;i2c.c: 43: { PEN = 1; while (PEN); return 1;}
 10751  0015F4  84C5               	bsf	4037,2,c	;volatile
 10752  0015F6                     l153:
 10753  0015F6  A4C5               	btfss	4037,2,c	;volatile
 10754  0015F8  0012               	return		;funcret
 10755  0015FA  D7FD               	goto	l153
 10756  0015FC                     __end_of_I2C_start:
 10757                           	opt stack 0
 10758                           tosu	equ	0xFFF
 10759                           tosh	equ	0xFFE
 10760                           tosl	equ	0xFFD
 10761                           pclath	equ	0xFFA
 10762                           tblptru	equ	0xFF8
 10763                           tblptrh	equ	0xFF7
 10764                           tblptrl	equ	0xFF6
 10765                           tablat	equ	0xFF5
 10766                           prodh	equ	0xFF4
 10767                           prodl	equ	0xFF3
 10768                           intcon	equ	0xFF2
 10769                           intcon2	equ	0xFF1
 10770                           postinc0	equ	0xFEE
 10771                           wreg	equ	0xFE8
 10772                           indf1	equ	0xFE7
 10773                           plusw1	equ	0xFE3
 10774                           fsr1h	equ	0xFE2
 10775                           fsr1l	equ	0xFE1
 10776                           indf2	equ	0xFDF
 10777                           postinc2	equ	0xFDE
 10778                           postdec2	equ	0xFDD
 10779                           plusw2	equ	0xFDB
 10780                           fsr2h	equ	0xFDA
 10781                           fsr2l	equ	0xFD9
 10782                           status	equ	0xFD8
 10783                           
 10784 ;; *************** function _I2C_restart *****************
 10785 ;; Defined at:
 10786 ;;		line 48 in file "i2c.c"
 10787 ;; Parameters:    Size  Location     Type
 10788 ;;  adres           1    wreg     unsigned char 
 10789 ;;  _R_W            1   15[COMRAM] unsigned char 
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;  adres           1   16[COMRAM] unsigned char 
 10792 ;; Return value:  Size  Location     Type
 10793 ;;                  1    wreg      unsigned char 
 10794 ;; Registers used:
 10795 ;;		wreg, status,2, status,0, cstack
 10796 ;; Tracked objects:
 10797 ;;		On entry : 0/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10801 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10804 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10805 ;;Total ram usage:        2 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; Hardware stack levels required when called:    4
 10808 ;; This function calls:
 10809 ;;		_I2C_idle
 10810 ;; This function is called by:
 10811 ;;		_DS3231_Read
 10812 ;; This function uses a non-reentrant model
 10813 ;;
 10814                           
 10815                           	psect	text59
 10816  0015FC                     __ptext59:
 10817                           	opt stack 0
 10818  0015FC                     _I2C_restart:
 10819                           	opt stack 22
 10820                           
 10821                           ;incstack = 0
 10822                           ;I2C_restart@adres stored from wreg
 10823  0015FC  6E51               	movwf	I2C_restart@adres,c
 10824                           
 10825                           ;i2c.c: 50: I2C_idle();
 10826  0015FE  EC4E  F00C         	call	_I2C_idle	;wreg free
 10827                           
 10828                           ;i2c.c: 51: RSEN = 1;
 10829  001602  82C5               	bsf	4037,1,c	;volatile
 10830                           
 10831                           ;i2c.c: 52: I2C_idle();
 10832  001604  EC4E  F00C         	call	_I2C_idle	;wreg free
 10833                           
 10834                           ;i2c.c: 53: if(_R_W == 0) adres &= 0b11111110;
 10835  001608  5050               	movf	I2C_restart@_R_W,w,c
 10836  00160A  E102               	bnz	l2868
 10837  00160C  9051               	bcf	I2C_restart@adres,0,c
 10838  00160E  D001               	goto	l2870
 10839  001610                     l2868:
 10840                           
 10841                           ;i2c.c: 54: else adres |= 0b00000001;
 10842  001610  8051               	bsf	I2C_restart@adres,0,c
 10843  001612                     l2870:
 10844                           
 10845                           ;i2c.c: 55: SSPBUF = adres;
 10846  001612  C051  FFC9         	movff	I2C_restart@adres,4041	;volatile
 10847                           
 10848                           ;i2c.c: 56: I2C_idle();
 10849  001616  EC4E  F00C         	call	_I2C_idle	;wreg free
 10850                           
 10851                           ;i2c.c: 57: if (ACKSTAT == 0) return 0;
 10852  00161A  ACC5               	btfss	4037,6,c	;volatile
 10853  00161C  0012               	return	
 10854                           
 10855                           ;i2c.c: 58: else
 10856                           ;i2c.c: 59: { PEN = 1; while (PEN); return 1;}
 10857  00161E  84C5               	bsf	4037,2,c	;volatile
 10858  001620                     l163:
 10859  001620  A4C5               	btfss	4037,2,c	;volatile
 10860  001622  0012               	return		;funcret
 10861  001624  D7FD               	goto	l163
 10862  001626                     __end_of_I2C_restart:
 10863                           	opt stack 0
 10864                           tosu	equ	0xFFF
 10865                           tosh	equ	0xFFE
 10866                           tosl	equ	0xFFD
 10867                           pclath	equ	0xFFA
 10868                           tblptru	equ	0xFF8
 10869                           tblptrh	equ	0xFF7
 10870                           tblptrl	equ	0xFF6
 10871                           tablat	equ	0xFF5
 10872                           prodh	equ	0xFF4
 10873                           prodl	equ	0xFF3
 10874                           intcon	equ	0xFF2
 10875                           intcon2	equ	0xFF1
 10876                           postinc0	equ	0xFEE
 10877                           wreg	equ	0xFE8
 10878                           indf1	equ	0xFE7
 10879                           plusw1	equ	0xFE3
 10880                           fsr1h	equ	0xFE2
 10881                           fsr1l	equ	0xFE1
 10882                           indf2	equ	0xFDF
 10883                           postinc2	equ	0xFDE
 10884                           postdec2	equ	0xFDD
 10885                           plusw2	equ	0xFDB
 10886                           fsr2h	equ	0xFDA
 10887                           fsr2l	equ	0xFD9
 10888                           status	equ	0xFD8
 10889                           
 10890 ;; *************** function _I2C_read_noack *****************
 10891 ;; Defined at:
 10892 ;;		line 75 in file "i2c.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      unsigned char 
 10899 ;; Registers used:
 10900 ;;		wreg, status,2, status,0, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;Total ram usage:        0 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    4
 10913 ;; This function calls:
 10914 ;;		_I2C_idle
 10915 ;; This function is called by:
 10916 ;;		_DS3231_Read
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           	psect	text60
 10921  001868                     __ptext60:
 10922                           	opt stack 0
 10923  001868                     _I2C_read_noack:
 10924                           	opt stack 22
 10925                           
 10926                           ;i2c.c: 77: I2C_idle();
 10927                           
 10928                           ;incstack = 0
 10929  001868  EC4E  F00C         	call	_I2C_idle	;wreg free
 10930                           
 10931                           ;i2c.c: 78: RCEN = 1;
 10932  00186C  86C5               	bsf	4037,3,c	;volatile
 10933                           
 10934                           ;i2c.c: 79: I2C_idle();
 10935  00186E  EC4E  F00C         	call	_I2C_idle	;wreg free
 10936                           
 10937                           ;i2c.c: 80: ACKDT = 1;
 10938  001872  8AC5               	bsf	4037,5,c	;volatile
 10939                           
 10940                           ;i2c.c: 81: ACKEN = 1;
 10941  001874  88C5               	bsf	4037,4,c	;volatile
 10942                           
 10943                           ;i2c.c: 83: return SSPBUF;
 10944  001876  50C9               	movf	4041,w,c	;volatile
 10945  001878  0012               	return		;funcret
 10946  00187A                     __end_of_I2C_read_noack:
 10947                           	opt stack 0
 10948                           tosu	equ	0xFFF
 10949                           tosh	equ	0xFFE
 10950                           tosl	equ	0xFFD
 10951                           pclath	equ	0xFFA
 10952                           tblptru	equ	0xFF8
 10953                           tblptrh	equ	0xFF7
 10954                           tblptrl	equ	0xFF6
 10955                           tablat	equ	0xFF5
 10956                           prodh	equ	0xFF4
 10957                           prodl	equ	0xFF3
 10958                           intcon	equ	0xFF2
 10959                           intcon2	equ	0xFF1
 10960                           postinc0	equ	0xFEE
 10961                           wreg	equ	0xFE8
 10962                           indf1	equ	0xFE7
 10963                           plusw1	equ	0xFE3
 10964                           fsr1h	equ	0xFE2
 10965                           fsr1l	equ	0xFE1
 10966                           indf2	equ	0xFDF
 10967                           postinc2	equ	0xFDE
 10968                           postdec2	equ	0xFDD
 10969                           plusw2	equ	0xFDB
 10970                           fsr2h	equ	0xFDA
 10971                           fsr2l	equ	0xFD9
 10972                           status	equ	0xFD8
 10973                           
 10974 ;; *************** function _I2C_idle *****************
 10975 ;; Defined at:
 10976 ;;		line 24 in file "i2c.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;		None
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;		None
 10981 ;; Return value:  Size  Location     Type
 10982 ;;                  1    wreg      void 
 10983 ;; Registers used:
 10984 ;;		wreg, status,2, status,0
 10985 ;; Tracked objects:
 10986 ;;		On entry : 0/0
 10987 ;;		On exit  : 0/0
 10988 ;;		Unchanged: 0/0
 10989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;Total ram usage:        1 bytes
 10995 ;; Hardware stack levels used:    1
 10996 ;; Hardware stack levels required when called:    3
 10997 ;; This function calls:
 10998 ;;		Nothing
 10999 ;; This function is called by:
 11000 ;;		_I2C_start
 11001 ;;		_I2C_restart
 11002 ;;		_I2C_write
 11003 ;;		_I2C_read_noack
 11004 ;;		_I2C_stop
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text61
 11009  00189C                     __ptext61:
 11010                           	opt stack 0
 11011  00189C                     _I2C_idle:
 11012                           	opt stack 23
 11013  00189C                     l2836:
 11014  00189C  CFC5 F04F          	movff	4037,??_I2C_idle	;volatile
 11015  0018A0  0E1F               	movlw	31
 11016  0018A2  164F               	andwf	??_I2C_idle,f,c
 11017  0018A4  E1FB               	bnz	l2836
 11018  0018A6  A4C7               	btfss	4039,2,c	;volatile
 11019  0018A8  0C1F               	retlw	31	;funcret
 11020  0018AA  D7F8               	goto	l2836
 11021  0018AC                     __end_of_I2C_idle:
 11022                           	opt stack 0
 11023                           tosu	equ	0xFFF
 11024                           tosh	equ	0xFFE
 11025                           tosl	equ	0xFFD
 11026                           pclath	equ	0xFFA
 11027                           tblptru	equ	0xFF8
 11028                           tblptrh	equ	0xFF7
 11029                           tblptrl	equ	0xFF6
 11030                           tablat	equ	0xFF5
 11031                           prodh	equ	0xFF4
 11032                           prodl	equ	0xFF3
 11033                           intcon	equ	0xFF2
 11034                           intcon2	equ	0xFF1
 11035                           postinc0	equ	0xFEE
 11036                           wreg	equ	0xFE8
 11037                           indf1	equ	0xFE7
 11038                           plusw1	equ	0xFE3
 11039                           fsr1h	equ	0xFE2
 11040                           fsr1l	equ	0xFE1
 11041                           indf2	equ	0xFDF
 11042                           postinc2	equ	0xFDE
 11043                           postdec2	equ	0xFDD
 11044                           plusw2	equ	0xFDB
 11045                           fsr2h	equ	0xFDA
 11046                           fsr2l	equ	0xFD9
 11047                           status	equ	0xFD8
 11048                           
 11049 ;; *************** function _INTERRUPT_InterruptManager *****************
 11050 ;; Defined at:
 11051 ;;		line 4 in file "interrupt.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;		None
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;		None
 11056 ;; Return value:  Size  Location     Type
 11057 ;;                  1    wreg      void 
 11058 ;; Registers used:
 11059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11067 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11068 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11069 ;;Total ram usage:        5 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    2
 11072 ;; This function calls:
 11073 ;;		_INT0_ISR
 11074 ;;		_TMR0_ISR
 11075 ;;		_TMR1_ISR
 11076 ;; This function is called by:
 11077 ;;		Interrupt level 2
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           	psect	intcode
 11082  000008                     __pintcode:
 11083                           	opt stack 0
 11084  000008                     _INTERRUPT_InterruptManager:
 11085                           	opt stack 22
 11086                           
 11087                           ;incstack = 0
 11088  000008  8271               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11089  00000A  ED2A  F008         	call	int_func,f	;refresh shadow registers
 11090                           tosu	equ	0xFFF
 11091                           tosh	equ	0xFFE
 11092                           tosl	equ	0xFFD
 11093                           pclath	equ	0xFFA
 11094                           tblptru	equ	0xFF8
 11095                           tblptrh	equ	0xFF7
 11096                           tblptrl	equ	0xFF6
 11097                           tablat	equ	0xFF5
 11098                           prodh	equ	0xFF4
 11099                           prodl	equ	0xFF3
 11100                           intcon	equ	0xFF2
 11101                           intcon2	equ	0xFF1
 11102                           postinc0	equ	0xFEE
 11103                           wreg	equ	0xFE8
 11104                           indf1	equ	0xFE7
 11105                           plusw1	equ	0xFE3
 11106                           fsr1h	equ	0xFE2
 11107                           fsr1l	equ	0xFE1
 11108                           indf2	equ	0xFDF
 11109                           postinc2	equ	0xFDE
 11110                           postdec2	equ	0xFDD
 11111                           plusw2	equ	0xFDB
 11112                           fsr2h	equ	0xFDA
 11113                           fsr2l	equ	0xFD9
 11114                           status	equ	0xFD8
 11115                           
 11116                           	psect	intcode_body
 11117  001054                     __pintcode_body:
 11118                           	opt stack 22
 11119  001054                     int_func:
 11120                           	opt stack 22
 11121  001054  0006               	pop		; remove dummy address from shadow register refresh
 11122  001056  CFD9 F04B          	movff	fsr2l,??_INTERRUPT_InterruptManager+1
 11123  00105A  CFDA F04C          	movff	fsr2h,??_INTERRUPT_InterruptManager+2
 11124  00105E  CFF3 F04D          	movff	prodl,??_INTERRUPT_InterruptManager+3
 11125  001062  CFF4 F04E          	movff	prodh,??_INTERRUPT_InterruptManager+4
 11126                           
 11127                           ;interrupt.c: 7: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 11128  001066  BAF2               	btfsc	intcon,5,c	;volatile
 11129  001068  A4F2               	btfss	intcon,2,c	;volatile
 11130  00106A  D003               	goto	i2l278
 11131                           
 11132                           ;interrupt.c: 8: {
 11133                           ;interrupt.c: 9: TMR0_ISR();
 11134  00106C  EC5D  F00C         	call	_TMR0_ISR	;wreg free
 11135                           
 11136                           ;interrupt.c: 10: }
 11137  001070  D013               	goto	i2l4120
 11138  001072                     i2l278:
 11139                           
 11140                           ;interrupt.c: 11: else if (INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
 11141  001072  B8F2               	btfsc	intcon,4,c	;volatile
 11142  001074  A2F2               	btfss	intcon,1,c	;volatile
 11143  001076  D010               	goto	i2l4120
 11144                           
 11145                           ;interrupt.c: 12: {
 11146                           ;interrupt.c: 13: INTCONbits.INT0IF = 0;
 11147  001078  92F2               	bcf	intcon,1,c	;volatile
 11148  00107A  0E01               	movlw	1
 11149                           
 11150                           ;interrupt.c: 14: INTCON2bits.INTEDG0 = ~INTCON2bits.INTEDG0;
 11151  00107C  ACF1               	btfss	intcon2,6,c	;volatile
 11152  00107E  0E00               	movlw	0
 11153  001080  0AFF               	xorlw	255
 11154  001082  6E4A               	movwf	??_INTERRUPT_InterruptManager& (0+255),c
 11155  001084  3A4A               	swapf	??_INTERRUPT_InterruptManager,f,c
 11156  001086  464A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 11157  001088  464A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 11158  00108A  50F1               	movf	intcon2,w,c	;volatile
 11159  00108C  184A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 11160  00108E  0BBF               	andlw	-65
 11161  001090  184A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 11162  001092  6EF1               	movwf	intcon2,c	;volatile
 11163                           
 11164                           ;interrupt.c: 16: INT0_ISR();
 11165  001094  EC21  F00C         	call	_INT0_ISR	;wreg free
 11166  001098                     i2l4120:
 11167                           
 11168                           ;interrupt.c: 17: } if (PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF ==1)
 11169  001098  B09D               	btfsc	3997,0,c	;volatile
 11170  00109A  A09E               	btfss	3998,0,c	;volatile
 11171  00109C  D007               	goto	i2l282
 11172                           
 11173                           ;interrupt.c: 18: {
 11174                           ;interrupt.c: 19: PIR1bits.TMR1IF = 0;
 11175  00109E  909E               	bcf	3998,0,c	;volatile
 11176                           
 11177                           ;interrupt.c: 20: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
 11178  0010A0  0E3C               	movlw	60
 11179  0010A2  6ECF               	movwf	4047,c	;volatile
 11180                           
 11181                           ;interrupt.c: 21: TMR1L = ((unsigned char)((15536)&0xFF));
 11182  0010A4  0EB0               	movlw	176
 11183  0010A6  6ECE               	movwf	4046,c	;volatile
 11184                           
 11185                           ;interrupt.c: 22: TMR1_ISR();
 11186  0010A8  EC3D  F00C         	call	_TMR1_ISR	;wreg free
 11187  0010AC                     i2l282:
 11188  0010AC  C04E  FFF4         	movff	??_INTERRUPT_InterruptManager+4,prodh
 11189  0010B0  C04D  FFF3         	movff	??_INTERRUPT_InterruptManager+3,prodl
 11190  0010B4  C04C  FFDA         	movff	??_INTERRUPT_InterruptManager+2,fsr2h
 11191  0010B8  C04B  FFD9         	movff	??_INTERRUPT_InterruptManager+1,fsr2l
 11192  0010BC  9271               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11193  0010BE  0011               	retfie		f
 11194  0010C0                     __end_of_INTERRUPT_InterruptManager:
 11195                           	opt stack 0
 11196                           tosu	equ	0xFFF
 11197                           tosh	equ	0xFFE
 11198                           tosl	equ	0xFFD
 11199                           pclath	equ	0xFFA
 11200                           tblptru	equ	0xFF8
 11201                           tblptrh	equ	0xFF7
 11202                           tblptrl	equ	0xFF6
 11203                           tablat	equ	0xFF5
 11204                           prodh	equ	0xFF4
 11205                           prodl	equ	0xFF3
 11206                           intcon	equ	0xFF2
 11207                           intcon2	equ	0xFF1
 11208                           postinc0	equ	0xFEE
 11209                           wreg	equ	0xFE8
 11210                           indf1	equ	0xFE7
 11211                           plusw1	equ	0xFE3
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           plusw2	equ	0xFDB
 11218                           fsr2h	equ	0xFDA
 11219                           fsr2l	equ	0xFD9
 11220                           status	equ	0xFD8
 11221                           
 11222 ;; *************** function _TMR1_ISR *****************
 11223 ;; Defined at:
 11224 ;;		line 542 in file "common.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;		None
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;		None
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      void 
 11231 ;; Registers used:
 11232 ;;		wreg, status,2, status,0
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;Total ram usage:        0 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; This function calls:
 11245 ;;		Nothing
 11246 ;; This function is called by:
 11247 ;;		_INTERRUPT_InterruptManager
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           	psect	text63
 11252  00187A                     __ptext63:
 11253                           	opt stack 0
 11254  00187A                     _TMR1_ISR:
 11255                           	opt stack 23
 11256                           
 11257                           ;common.c: 546: if(++timer_val >= 30)
 11258                           
 11259                           ;incstack = 0
 11260  00187A  2A40               	incf	_timer_val,f,c
 11261  00187C  0E1D               	movlw	29
 11262  00187E  6440               	cpfsgt	_timer_val,c
 11263  001880  0C1D               	retlw	29
 11264                           
 11265                           ;common.c: 547: {
 11266                           ;common.c: 548: timer_val = 0;
 11267  001882  6A40               	clrf	_timer_val,c
 11268                           
 11269                           ;common.c: 549: time_flag = 1;
 11270  001884  0E01               	movlw	1
 11271  001886  6E3F               	movwf	_time_flag,c
 11272                           
 11273                           ;common.c: 550: T1CONbits.TMR1ON = 0;
 11274  001888  90CD               	bcf	4045,0,c	;volatile
 11275  00188A  0C01               	retlw	1	;funcret
 11276  00188C                     __end_of_TMR1_ISR:
 11277                           	opt stack 0
 11278                           tosu	equ	0xFFF
 11279                           tosh	equ	0xFFE
 11280                           tosl	equ	0xFFD
 11281                           pclath	equ	0xFFA
 11282                           tblptru	equ	0xFF8
 11283                           tblptrh	equ	0xFF7
 11284                           tblptrl	equ	0xFF6
 11285                           tablat	equ	0xFF5
 11286                           prodh	equ	0xFF4
 11287                           prodl	equ	0xFF3
 11288                           intcon	equ	0xFF2
 11289                           intcon2	equ	0xFF1
 11290                           postinc0	equ	0xFEE
 11291                           wreg	equ	0xFE8
 11292                           indf1	equ	0xFE7
 11293                           plusw1	equ	0xFE3
 11294                           fsr1h	equ	0xFE2
 11295                           fsr1l	equ	0xFE1
 11296                           indf2	equ	0xFDF
 11297                           postinc2	equ	0xFDE
 11298                           postdec2	equ	0xFDD
 11299                           plusw2	equ	0xFDB
 11300                           fsr2h	equ	0xFDA
 11301                           fsr2l	equ	0xFD9
 11302                           status	equ	0xFD8
 11303                           
 11304 ;; *************** function _TMR0_ISR *****************
 11305 ;; Defined at:
 11306 ;;		line 127 in file "dispatcher.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;		None
 11309 ;; Auto vars:     Size  Location     Type
 11310 ;;		None
 11311 ;; Return value:  Size  Location     Type
 11312 ;;                  1    wreg      void 
 11313 ;; Registers used:
 11314 ;;		wreg, status,2
 11315 ;; Tracked objects:
 11316 ;;		On entry : 0/0
 11317 ;;		On exit  : 0/0
 11318 ;;		Unchanged: 0/0
 11319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11324 ;;Total ram usage:        0 bytes
 11325 ;; Hardware stack levels used:    1
 11326 ;; This function calls:
 11327 ;;		Nothing
 11328 ;; This function is called by:
 11329 ;;		_INTERRUPT_InterruptManager
 11330 ;; This function uses a non-reentrant model
 11331 ;;
 11332                           
 11333                           	psect	text64
 11334  0018BA                     __ptext64:
 11335                           	opt stack 0
 11336  0018BA                     _TMR0_ISR:
 11337                           	opt stack 23
 11338                           
 11339                           ;dispatcher.c: 131: INTCONbits.TMR0IF = 0;
 11340                           
 11341                           ;incstack = 0
 11342  0018BA  94F2               	bcf	intcon,2,c	;volatile
 11343                           
 11344                           ;dispatcher.c: 132: TMR0 = 61;
 11345  0018BC  6AD7               	clrf	4055,c	;volatile
 11346  0018BE  0E3D               	movlw	61
 11347  0018C0  6ED6               	movwf	4054,c	;volatile
 11348                           
 11349                           ;dispatcher.c: 133: Timer0Interrupt = 1;
 11350  0018C2  0E01               	movlw	1
 11351  0018C4  6E14               	movwf	_Timer0Interrupt,c
 11352  0018C6  0C01               	retlw	1	;funcret
 11353  0018C8                     __end_of_TMR0_ISR:
 11354                           	opt stack 0
 11355                           tosu	equ	0xFFF
 11356                           tosh	equ	0xFFE
 11357                           tosl	equ	0xFFD
 11358                           pclath	equ	0xFFA
 11359                           tblptru	equ	0xFF8
 11360                           tblptrh	equ	0xFF7
 11361                           tblptrl	equ	0xFF6
 11362                           tablat	equ	0xFF5
 11363                           prodh	equ	0xFF4
 11364                           prodl	equ	0xFF3
 11365                           intcon	equ	0xFF2
 11366                           intcon2	equ	0xFF1
 11367                           postinc0	equ	0xFEE
 11368                           wreg	equ	0xFE8
 11369                           indf1	equ	0xFE7
 11370                           plusw1	equ	0xFE3
 11371                           fsr1h	equ	0xFE2
 11372                           fsr1l	equ	0xFE1
 11373                           indf2	equ	0xFDF
 11374                           postinc2	equ	0xFDE
 11375                           postdec2	equ	0xFDD
 11376                           plusw2	equ	0xFDB
 11377                           fsr2h	equ	0xFDA
 11378                           fsr2l	equ	0xFD9
 11379                           status	equ	0xFD8
 11380                           
 11381 ;; *************** function _INT0_ISR *****************
 11382 ;; Defined at:
 11383 ;;		line 525 in file "common.c"
 11384 ;; Parameters:    Size  Location     Type
 11385 ;;		None
 11386 ;; Auto vars:     Size  Location     Type
 11387 ;;		None
 11388 ;; Return value:  Size  Location     Type
 11389 ;;                  1    wreg      void 
 11390 ;; Registers used:
 11391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11392 ;; Tracked objects:
 11393 ;;		On entry : 0/0
 11394 ;;		On exit  : 0/0
 11395 ;;		Unchanged: 0/0
 11396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;Total ram usage:        0 bytes
 11402 ;; Hardware stack levels used:    1
 11403 ;; Hardware stack levels required when called:    1
 11404 ;; This function calls:
 11405 ;;		i2_RTOS_SetTask
 11406 ;; This function is called by:
 11407 ;;		_INTERRUPT_InterruptManager
 11408 ;; This function uses a non-reentrant model
 11409 ;;
 11410                           
 11411                           	psect	text65
 11412  001842                     __ptext65:
 11413                           	opt stack 0
 11414  001842                     _INT0_ISR:
 11415                           	opt stack 22
 11416                           
 11417                           ;common.c: 534: RTOS_SetTask(GetTime, 0, 0);
 11418                           
 11419                           ;incstack = 0
 11420  001842  0E26               	movlw	low _GetTime
 11421  001844  6E41               	movwf	i2RTOS_SetTask@taskFunc,c
 11422  001846  0E16               	movlw	high _GetTime
 11423  001848  6E42               	movwf	i2RTOS_SetTask@taskFunc+1,c
 11424  00184A  6A44               	clrf	i2RTOS_SetTask@taskDelay+1,c
 11425  00184C  6A43               	clrf	i2RTOS_SetTask@taskDelay,c
 11426  00184E  6A46               	clrf	i2RTOS_SetTask@taskPeriod+1,c
 11427  001850  6A45               	clrf	i2RTOS_SetTask@taskPeriod,c
 11428  001852  EF48  F006         	goto	i2_RTOS_SetTask	;wreg free
 11429  001856                     __end_of_INT0_ISR:
 11430                           	opt stack 0
 11431                           tosu	equ	0xFFF
 11432                           tosh	equ	0xFFE
 11433                           tosl	equ	0xFFD
 11434                           pclath	equ	0xFFA
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodh	equ	0xFF4
 11440                           prodl	equ	0xFF3
 11441                           intcon	equ	0xFF2
 11442                           intcon2	equ	0xFF1
 11443                           postinc0	equ	0xFEE
 11444                           wreg	equ	0xFE8
 11445                           indf1	equ	0xFE7
 11446                           plusw1	equ	0xFE3
 11447                           fsr1h	equ	0xFE2
 11448                           fsr1l	equ	0xFE1
 11449                           indf2	equ	0xFDF
 11450                           postinc2	equ	0xFDE
 11451                           postdec2	equ	0xFDD
 11452                           plusw2	equ	0xFDB
 11453                           fsr2h	equ	0xFDA
 11454                           fsr2l	equ	0xFD9
 11455                           status	equ	0xFD8
 11456                           
 11457 ;; *************** function i2_RTOS_SetTask *****************
 11458 ;; Defined at:
 11459 ;;		line 22 in file "dispatcher.c"
 11460 ;; Parameters:    Size  Location     Type
 11461 ;;  taskFunc        2    0[COMRAM] PTR FTN()void 
 11462 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
 11463 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
 11464 ;;		 -> GetTime(1), key_press(1), time_led(1), 
 11465 ;;  taskDelay       2    2[COMRAM] unsigned int 
 11466 ;;  taskPeriod      2    4[COMRAM] unsigned int 
 11467 ;; Auto vars:     Size  Location     Type
 11468 ;;  RTOS_SetTask    1    8[COMRAM] unsigned char 
 11469 ;; Return value:  Size  Location     Type
 11470 ;;                  1    wreg      void 
 11471 ;; Registers used:
 11472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11473 ;; Tracked objects:
 11474 ;;		On entry : 0/0
 11475 ;;		On exit  : 0/0
 11476 ;;		Unchanged: 0/0
 11477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11478 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11479 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11480 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11481 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11482 ;;Total ram usage:        9 bytes
 11483 ;; Hardware stack levels used:    1
 11484 ;; This function calls:
 11485 ;;		Nothing
 11486 ;; This function is called by:
 11487 ;;		_INT0_ISR
 11488 ;; This function uses a non-reentrant model
 11489 ;;
 11490                           
 11491                           	psect	text66
 11492  000C90                     __ptext66:
 11493                           	opt stack 0
 11494  000C90                     i2_RTOS_SetTask:
 11495                           	opt stack 22
 11496                           
 11497                           ;dispatcher.c: 24: uint8_t i;
 11498                           ;dispatcher.c: 26: if(!taskFunc) return;
 11499                           
 11500                           ;incstack = 0
 11501  000C90  5041               	movf	i2RTOS_SetTask@taskFunc,w,c
 11502  000C92  1042               	iorwf	i2RTOS_SetTask@taskFunc+1,w,c
 11503  000C94  E101               	bnz	i2l212
 11504  000C96  0012               	return	
 11505  000C98                     i2l212:
 11506                           
 11507                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 11508  000C98  6A49               	clrf	i2RTOS_SetTask@i,c
 11509  000C9A  D015               	goto	i2l4018
 11510  000C9C                     i2l4006:
 11511                           
 11512                           ;dispatcher.c: 28: {
 11513                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 11514  000C9C  5049               	movf	i2RTOS_SetTask@i,w,c
 11515  000C9E  D832               	call	PL20	;call to abstracted procedure
 11516  000CA0  5041               	movf	i2RTOS_SetTask@taskFunc,w,c	;volatile
 11517  000CA2  18DE               	xorwf	postinc2,w,c
 11518  000CA4  E10F               	bnz	i2l4016
 11519  000CA6  5042               	movf	i2RTOS_SetTask@taskFunc+1,w,c	;volatile
 11520  000CA8  18DE               	xorwf	postinc2,w,c
 11521  000CAA  E10C               	bnz	i2l4016
 11522                           
 11523                           ;dispatcher.c: 30: {
 11524                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 11525  000CAC  9EF2               	bcf	intcon,7,c	;volatile
 11526                           
 11527                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 11528  000CAE  5049               	movf	i2RTOS_SetTask@i,w,c
 11529  000CB0  EC7F  F005         	call	PL18	;call to abstracted procedure
 11530  000CB4  D838               	call	PL80	;call to abstracted procedure
 11531                           
 11532                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 11533  000CB6  5049               	movf	i2RTOS_SetTask@i,w,c
 11534  000CB8  D82B               	call	PL26	;call to abstracted procedure
 11535  000CBA  D830               	call	PL60	;call to abstracted procedure
 11536                           
 11537                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 11538  000CBC  5049               	movf	i2RTOS_SetTask@i,w,c
 11539  000CBE  D81A               	call	PL16	;call to abstracted procedure
 11540                           
 11541                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 11542  000CC0  8EF2               	bsf	intcon,7,c	;volatile
 11543  000CC2  0C00               	retlw	0
 11544  000CC4                     i2l4016:
 11545  000CC4  2A49               	incf	i2RTOS_SetTask@i,f,c
 11546  000CC6                     i2l4018:
 11547  000CC6  5015               	movf	_arrayTail,w,c	;volatile
 11548  000CC8  5C49               	subwf	i2RTOS_SetTask@i,w,c
 11549  000CCA  E3E8               	bnc	i2l4006
 11550                           
 11551                           ;dispatcher.c: 39: }
 11552                           ;dispatcher.c: 40: }
 11553                           ;dispatcher.c: 42: if (arrayTail < 15)
 11554  000CCC  0E0F               	movlw	15
 11555  000CCE  6015               	cpfslt	_arrayTail,c	;volatile
 11556  000CD0  0C0F               	retlw	15
 11557                           
 11558                           ;dispatcher.c: 43: {
 11559                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 11560  000CD2  9EF2               	bcf	intcon,7,c	;volatile
 11561                           
 11562                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 11563  000CD4  5015               	movf	_arrayTail,w,c
 11564  000CD6  D816               	call	PL20	;call to abstracted procedure
 11565  000CD8  C041  FFDE         	movff	i2RTOS_SetTask@taskFunc,postinc2	;volatile
 11566  000CDC  C042  FFDD         	movff	i2RTOS_SetTask@taskFunc+1,postdec2	;volatile
 11567                           
 11568                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 11569  000CE0  5015               	movf	_arrayTail,w,c
 11570  000CE2  EC7F  F005         	call	PL18	;call to abstracted procedure
 11571  000CE6  D81F               	call	PL80	;call to abstracted procedure
 11572                           
 11573                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 11574  000CE8  5015               	movf	_arrayTail,w,c
 11575  000CEA  D812               	call	PL26	;call to abstracted procedure
 11576  000CEC  D817               	call	PL60	;call to abstracted procedure
 11577                           
 11578                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 11579  000CEE  5015               	movf	_arrayTail,w,c
 11580  000CF0  D801               	call	PL16	;call to abstracted procedure
 11581                           
 11582                           ;dispatcher.c: 51: arrayTail++;
 11583                           
 11584                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 11585  000CF2  D01E               	goto	PL106	;call to abstracted procedure
 11586  000CF4                     __end_ofi2_RTOS_SetTask:
 11587                           	opt stack 0
 11588  000CF4                     PL16:
 11589                           	opt stack 27
 11590  000CF4  0D08               	mullw	8
 11591  000CF6  50F3               	movf	prodl,w,c
 11592  000CF8  0F86               	addlw	low (_TaskArray+6)
 11593  000CFA  6ED9               	movwf	fsr2l,c
 11594  000CFC  6ADA               	clrf	fsr2h,c
 11595  000CFE  6ADE               	clrf	postinc2,c
 11596  000D00  6ADD               	clrf	postdec2,c
 11597  000D02  0012               	return	
 11598  000D04                     __end_ofPL16:
 11599                           	opt stack 0
 11600  000D04                     PL20:
 11601                           	opt stack 27
 11602  000D04  0D08               	mullw	8
 11603  000D06  50F3               	movf	prodl,w,c
 11604  000D08  0F80               	addlw	low _TaskArray
 11605  000D0A  6ED9               	movwf	fsr2l,c
 11606  000D0C  6ADA               	clrf	fsr2h,c
 11607  000D0E  0012               	return	
 11608  000D10                     __end_ofPL20:
 11609                           	opt stack 0
 11610  000D10                     PL26:
 11611                           	opt stack 27
 11612  000D10  0D08               	mullw	8
 11613  000D12  50F3               	movf	prodl,w,c
 11614  000D14  0F84               	addlw	low (_TaskArray+4)
 11615  000D16  6ED9               	movwf	fsr2l,c
 11616  000D18  6ADA               	clrf	fsr2h,c
 11617  000D1A  0012               	return	
 11618  000D1C                     __end_ofPL26:
 11619                           	opt stack 0
 11620  000D1C                     PL60:
 11621                           	opt stack 22
 11622  000D1C  C045  FFDE         	movff	i2RTOS_SetTask@taskPeriod,postinc2
 11623  000D20  C046  FFDD         	movff	i2RTOS_SetTask@taskPeriod+1,postdec2
 11624  000D24  0012               	return	
 11625  000D26                     __end_ofPL60:
 11626                           	opt stack 0
 11627  000D26                     PL80:
 11628                           	opt stack 22
 11629  000D26  C043  FFDE         	movff	i2RTOS_SetTask@taskDelay,postinc2
 11630  000D2A  C044  FFDD         	movff	i2RTOS_SetTask@taskDelay+1,postdec2
 11631  000D2E  0012               	return	
 11632  000D30                     __end_ofPL80:
 11633                           	opt stack 0
 11634  000D30                     PL106:
 11635                           	opt stack 27
 11636  000D30  2A15               	incf	_arrayTail,f,c	;volatile
 11637  000D32  8EF2               	bsf	intcon,7,c	;volatile
 11638  000D34  0C00               	retlw	0	;funcret
 11639  000D36                     __end_ofPL106:
 11640                           	opt stack 0
 11641                           tosu	equ	0xFFF
 11642                           tosh	equ	0xFFE
 11643                           tosl	equ	0xFFD
 11644                           pclath	equ	0xFFA
 11645                           tblptru	equ	0xFF8
 11646                           tblptrh	equ	0xFF7
 11647                           tblptrl	equ	0xFF6
 11648                           tablat	equ	0xFF5
 11649                           prodh	equ	0xFF4
 11650                           prodl	equ	0xFF3
 11651                           intcon	equ	0xFF2
 11652                           intcon2	equ	0xFF1
 11653                           postinc0	equ	0xFEE
 11654                           wreg	equ	0xFE8
 11655                           indf1	equ	0xFE7
 11656                           plusw1	equ	0xFE3
 11657                           fsr1h	equ	0xFE2
 11658                           fsr1l	equ	0xFE1
 11659                           indf2	equ	0xFDF
 11660                           postinc2	equ	0xFDE
 11661                           postdec2	equ	0xFDD
 11662                           plusw2	equ	0xFDB
 11663                           fsr2h	equ	0xFDA
 11664                           fsr2l	equ	0xFD9
 11665                           status	equ	0xFD8
 11666                           tosu	equ	0xFFF
 11667                           tosh	equ	0xFFE
 11668                           tosl	equ	0xFFD
 11669                           pclath	equ	0xFFA
 11670                           tblptru	equ	0xFF8
 11671                           tblptrh	equ	0xFF7
 11672                           tblptrl	equ	0xFF6
 11673                           tablat	equ	0xFF5
 11674                           prodh	equ	0xFF4
 11675                           prodl	equ	0xFF3
 11676                           intcon	equ	0xFF2
 11677                           intcon2	equ	0xFF1
 11678                           postinc0	equ	0xFEE
 11679                           wreg	equ	0xFE8
 11680                           indf1	equ	0xFE7
 11681                           plusw1	equ	0xFE3
 11682                           fsr1h	equ	0xFE2
 11683                           fsr1l	equ	0xFE1
 11684                           indf2	equ	0xFDF
 11685                           postinc2	equ	0xFDE
 11686                           postdec2	equ	0xFDD
 11687                           plusw2	equ	0xFDB
 11688                           fsr2h	equ	0xFDA
 11689                           fsr2l	equ	0xFD9
 11690                           status	equ	0xFD8
 11691                           
 11692                           	psect	text67
 11693  000000                     __ptext67:
 11694                           	opt stack 0
 11695                           tosu	equ	0xFFF
 11696                           tosh	equ	0xFFE
 11697                           tosl	equ	0xFFD
 11698                           pclath	equ	0xFFA
 11699                           tblptru	equ	0xFF8
 11700                           tblptrh	equ	0xFF7
 11701                           tblptrl	equ	0xFF6
 11702                           tablat	equ	0xFF5
 11703                           prodh	equ	0xFF4
 11704                           prodl	equ	0xFF3
 11705                           intcon	equ	0xFF2
 11706                           intcon2	equ	0xFF1
 11707                           postinc0	equ	0xFEE
 11708                           wreg	equ	0xFE8
 11709                           indf1	equ	0xFE7
 11710                           plusw1	equ	0xFE3
 11711                           fsr1h	equ	0xFE2
 11712                           fsr1l	equ	0xFE1
 11713                           indf2	equ	0xFDF
 11714                           postinc2	equ	0xFDE
 11715                           postdec2	equ	0xFDD
 11716                           plusw2	equ	0xFDB
 11717                           fsr2h	equ	0xFDA
 11718                           fsr2l	equ	0xFD9
 11719                           status	equ	0xFD8
 11720                           
 11721                           	psect	rparam
 11722  0000                     tosu	equ	0xFFF
 11723                           tosh	equ	0xFFE
 11724                           tosl	equ	0xFFD
 11725                           pclath	equ	0xFFA
 11726                           tblptru	equ	0xFF8
 11727                           tblptrh	equ	0xFF7
 11728                           tblptrl	equ	0xFF6
 11729                           tablat	equ	0xFF5
 11730                           prodh	equ	0xFF4
 11731                           prodl	equ	0xFF3
 11732                           intcon	equ	0xFF2
 11733                           intcon2	equ	0xFF1
 11734                           postinc0	equ	0xFEE
 11735                           wreg	equ	0xFE8
 11736                           indf1	equ	0xFE7
 11737                           plusw1	equ	0xFE3
 11738                           fsr1h	equ	0xFE2
 11739                           fsr1l	equ	0xFE1
 11740                           indf2	equ	0xFDF
 11741                           postinc2	equ	0xFDE
 11742                           postdec2	equ	0xFDD
 11743                           plusw2	equ	0xFDB
 11744                           fsr2h	equ	0xFDA
 11745                           fsr2l	equ	0xFD9
 11746                           status	equ	0xFD8
 11747                           
 11748                           	psect	temp
 11749  000071                     btemp:
 11750                           	opt stack 0
 11751  000071                     	ds	1
 11752  0000                     int$flags	set	btemp
 11753                           tosu	equ	0xFFF
 11754                           tosh	equ	0xFFE
 11755                           tosl	equ	0xFFD
 11756                           pclath	equ	0xFFA
 11757                           tblptru	equ	0xFF8
 11758                           tblptrh	equ	0xFF7
 11759                           tblptrl	equ	0xFF6
 11760                           tablat	equ	0xFF5
 11761                           prodh	equ	0xFF4
 11762                           prodl	equ	0xFF3
 11763                           intcon	equ	0xFF2
 11764                           intcon2	equ	0xFF1
 11765                           postinc0	equ	0xFEE
 11766                           wreg	equ	0xFE8
 11767                           indf1	equ	0xFE7
 11768                           plusw1	equ	0xFE3
 11769                           fsr1h	equ	0xFE2
 11770                           fsr1l	equ	0xFE1
 11771                           indf2	equ	0xFDF
 11772                           postinc2	equ	0xFDE
 11773                           postdec2	equ	0xFDD
 11774                           plusw2	equ	0xFDB
 11775                           fsr2h	equ	0xFDA
 11776                           fsr2l	equ	0xFD9
 11777                           status	equ	0xFD8
 11778                           tosu	equ	0xFFF
 11779                           tosh	equ	0xFFE
 11780                           tosl	equ	0xFFD
 11781                           pclath	equ	0xFFA
 11782                           tblptru	equ	0xFF8
 11783                           tblptrh	equ	0xFF7
 11784                           tblptrl	equ	0xFF6
 11785                           tablat	equ	0xFF5
 11786                           prodh	equ	0xFF4
 11787                           prodl	equ	0xFF3
 11788                           intcon	equ	0xFF2
 11789                           intcon2	equ	0xFF1
 11790                           postinc0	equ	0xFEE
 11791                           wreg	equ	0xFE8
 11792                           indf1	equ	0xFE7
 11793                           plusw1	equ	0xFE3
 11794                           fsr1h	equ	0xFE2
 11795                           fsr1l	equ	0xFE1
 11796                           indf2	equ	0xFDF
 11797                           postinc2	equ	0xFDE
 11798                           postdec2	equ	0xFDD
 11799                           plusw2	equ	0xFDB
 11800                           fsr2h	equ	0xFDA
 11801                           fsr2l	equ	0xFD9
 11802                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    1357
    Data        1
    BSS         284
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     46     112
    BANK0           128      0     120
    BANK1           256      0     100
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 100
		 -> text_buf(BANK1[100]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    readTemp_Single@buf	PTR unsigned int  size(1) Largest target is 2
		 -> temperature(COMRAM[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 

    getDate@p4	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    Update_Matrix@buf	PTR unsigned char  size(1) Largest target is 32
		 -> Dis_Buff(COMRAM[32]), 

    RTOS_DispatchTask@function	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    RTOS_DeleteTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    S416task$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    TaskArray.pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    RTOS_SetTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 


Critical Paths under _main in COMRAM

    _main->_RTOS_DispatchTask
    _version->_Update_Matrix
    _Init7221->_Cmd7221
    _Cmd7221->_Send_Byte_7221
    _DS3231_init->_DS3231_Write
    _RTOS_DispatchTask->_home_temp
    _time_set_yr->_setDate
    _time_set_mt->_setDate
    _time_set_min->_putchar_b_buf
    _time_set_hr->_setTime
    _setTime->_DS3231_Write
    _time_set_dy->_setDate
    _time_set_dt->_setDate
    _setDate->_DS3231_Write
    _decimal_to_bcd->___lbmod
    _DS3231_Write->_decimal_to_bcd
    _putchar_b_buf->___lbmod
    _time_led->_FillBuf
    _time_led->_scroll_left
    _FillBuf->___lbmod
    _home_temp->_putchar_down
    _scroll_left->_Update_Matrix
    _readTemp_Single->_write_byte
    _write_byte->_write_bit
    _putchar_down_s->___lbmod
    _putchar_down->___lwmod
    _Update_Matrix->_Send_Byte_7221
    _pic_to_led->_pixel_off
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    _GetTime->_getDate
    _getTime->_DS3231_Read
    _getDate->_DS3231_Read
    _DS3231_Read->_I2C_restart
    _DS3231_Read->_I2C_start
    _I2C_write->_I2C_idle
    _I2C_stop->_I2C_idle
    _I2C_start->_I2C_idle
    _I2C_restart->_I2C_idle
    _I2C_read_noack->_I2C_idle

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INT0_ISR->i2_RTOS_SetTask

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  170481
                                             45 COMRAM     1     1      0
                  _RTOS_DispatchTask
                       _RTOS_SetTask
                  _SYSTEM_Initialize
                       _clear_matrix
                            _version
 ---------------------------------------------------------------------------------
 (1) _version                                              2     2      0    1330
                                             20 COMRAM     2     2      0
                      _Update_Matrix
                        _scroll_text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             19    15      4     218
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _scroll_text                                          3     3      0      90
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1295
                        _DS3231_init
                           _I2C_Init
                           _Init7221
                     _Interrupt_Init
                          _Port_Init
                          _RTOS_Init
                           _TMR1Init
 ---------------------------------------------------------------------------------
 (2) _TMR1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTOS_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init7221                                             0     0      0     479
                            _Cmd7221
 ---------------------------------------------------------------------------------
 (3) _Cmd7221                                              3     2      1     479
                                             16 COMRAM     3     2      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DS3231_init                                          0     0      0     816
                       _DS3231_Write
 ---------------------------------------------------------------------------------
 (1) _RTOS_DispatchTask                                    8     8      0  160496
                                             37 COMRAM     8     8      0
                            _GetTime *
                    _RTOS_DeleteTask
                      _default_state *
                          _home_temp *
                          _key_press *
                           _time_led *
                        _time_set_dt *
                        _time_set_dy *
                        _time_set_hr *
                       _time_set_min *
                        _time_set_mt *
                        _time_set_yr *
 ---------------------------------------------------------------------------------
 (2) _time_set_yr                                          0     0      0   22421
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_mt                                          0     0      0   19860
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_min                                         0     0      0   17376
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
 ---------------------------------------------------------------------------------
 (2) _time_set_hr                                          0     0      0   21187
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                       _clear_matrix
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (3) _setTime                                              3     1      2    3743
                                             27 COMRAM     3     1      2
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (2) _time_set_dy                                          0     0      0   19860
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_dt                                          0     0      0   22421
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (3) _setDate                                              4     1      3    5045
                                             27 COMRAM     4     1      3
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (4) _decimal_to_bcd                                       3     3      0    2605
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write                                         2     1      1     816
                                             25 COMRAM     2     1      1
                          _I2C_start
                           _I2C_stop
                          _I2C_write
                     _decimal_to_bcd (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_b_buf                                        7     6      1    4835
                                             22 COMRAM     7     6      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (2) _time_led                                             0     0      0   14079
                            _FillBuf
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _FillBuf                                              3     3      0    2917
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) _key_press                                            1     1      0      49
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _home_temp                                            1     1      0   19324
                                             36 COMRAM     1     1      0
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                       _clear_matrix
                            _getTime
                         _pic_to_led
                       _putchar_down
                     _putchar_down_s
                    _readTemp_Single
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _scroll_left                                          5     5      0    1182
                                             20 COMRAM     5     5      0
                      _Update_Matrix
 ---------------------------------------------------------------------------------
 (3) _readTemp_Single                                      9     6      3     783
                                             20 COMRAM     9     6      3
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _write_byte                                           5     5      0     136
                                             15 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (5) _write_bit                                            1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _read_byte                                            4     4      0      92
                                             14 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (5) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ow_reset                                             2     2      0      23
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _putchar_down_s                                      10     9      1    1396
                                             22 COMRAM    10     9      1
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_down                                        10     9      1    1716
                                             26 COMRAM    10     9      1
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Update_Matrix                                        4     3      1     976
                                             16 COMRAM     4     3      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (3) _Send_Byte_7221                                       2     2      0      69
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _pic_to_led                                           7     6      1     803
                                             19 COMRAM     7     6      1
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (4) _pixel_on                                             4     3      1     223
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _pixel_off                                            5     4      1     223
                                             14 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (1) _clear_matrix                                         1     1      0      68
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     415
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1    1631
                                             18 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1     930
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _RTOS_SetTask                                         9     3      6    7292
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _RTOS_DeleteTask                                      9     7      2    1712
                                             14 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _default_state                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              0     0      0    1894
                            _getDate
                            _getTime
 ---------------------------------------------------------------------------------
 (3) _getTime                                              3     0      3     978
                                             19 COMRAM     3     0      3
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (3) _getDate                                              4     0      4     916
                                             19 COMRAM     4     0      4
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (4) _bcd_to_decimal                                       2     2      0      44
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _DS3231_Read                                          2     2      0     352
                                             17 COMRAM     2     2      0
                     _I2C_read_noack
                        _I2C_restart
                          _I2C_start
                           _I2C_stop
                          _I2C_write
 ---------------------------------------------------------------------------------
 (4) _I2C_write                                            1     1      0      22
                                             15 COMRAM     1     1      0
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_stop                                             0     0      0       0
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_start                                            2     1      1     174
                                             15 COMRAM     2     1      1
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_restart                                          2     1      1     110
                                             15 COMRAM     2     1      1
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_read_noack                                       0     0      0       0
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_idle                                             1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           5     5      0     344
                                              9 COMRAM     5     5      0
                           _INT0_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0_ISR                                             0     0      0     344
                     i2_RTOS_SetTask
 ---------------------------------------------------------------------------------
 (9) i2_RTOS_SetTask                                       9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTOS_DispatchTask
     _GetTime *
       _getDate
         _DS3231_Read
           _I2C_read_noack
             _I2C_idle
           _I2C_restart
             _I2C_idle
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
         _bcd_to_decimal
       _getTime
         _DS3231_Read
           _I2C_read_noack
             _I2C_idle
           _I2C_restart
             _I2C_idle
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
         _bcd_to_decimal
     _RTOS_DeleteTask *
     _default_state *
     _home_temp *
       _RTOS_DeleteTask
       _RTOS_SetTask
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clear_matrix
       _getTime
         _DS3231_Read
           _I2C_read_noack
             _I2C_idle
           _I2C_restart
             _I2C_idle
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
         _bcd_to_decimal
       _pic_to_led
         _pixel_off
         _pixel_on
       _putchar_down
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
       _putchar_down_s
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
       _readTemp_Single
         _ow_reset
         _read_byte
           _read_bit
         _write_byte
           _write_bit
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _key_press *
     _time_led *
       _FillBuf
         ___lbdiv
         ___lbmod
           ___lbdiv (ARG)
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _time_set_dt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_dy *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_hr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _clear_matrix
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_min *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
     _time_set_mt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_yr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
   _RTOS_SetTask
   _SYSTEM_Initialize
     _DS3231_init
       _DS3231_Write
         _I2C_start
           _I2C_idle
         _I2C_stop
           _I2C_idle
         _I2C_write
           _I2C_idle
         _decimal_to_bcd (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _I2C_Init
     _Init7221
       _Cmd7221
         _Send_Byte_7221
     _Interrupt_Init
     _Port_Init
     _RTOS_Init
     _TMR1Init
   _clear_matrix
   _version
     _Update_Matrix
       _Send_Byte_7221
     _scroll_text
     _sprintf

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     i2_RTOS_SetTask
   _TMR0_ISR
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      64       7       39.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      78       5       93.8%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     2E      70       1       88.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     14C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Feb 23 16:40:45 2017

                   ??_Interrupt_Init 004F                                   PL2 070E  
                                 PL4 07C4                                   PL6 07F2  
                                 PL8 033E                          __CFG_BORV$3 000000  
                    ??_Update_Matrix 0052                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                       _decimal_to_bcd 169E  
                 __size_of_I2C_start 002A                         __CFG_CP2$OFF 000000  
                  ??_RTOS_DeleteTask 0051                   __size_of_I2C_write 001C  
                                PL10 0352                                  PL20 0D04  
                                PL12 0A1C                                  PL30 0832  
                                PL22 0B0A                                  PL14 0818  
                                PL40 0F40                                  PL32 04BE  
                                PL24 0822                                  PL16 0CF4  
                                PL50 0370                                  PL42 04CE  
                                PL34 0FCA                                  PL26 0D10  
                                PL18 0AFE                                  PL60 0D1C  
                                PL52 0F48                                  PL44 01C8  
                                PL36 1640                                  PL28 0366  
                                PL70 0EDA                                  PL62 061A  
                                PL54 0610                                  PL46 0FDA  
                                PL38 0602                                  PL80 0D26  
                                PL72 01CE                                  PL64 0A2A  
                                PL56 0ED0                                  PL48 0C7A  
                                PL90 156A                                  PL82 0F52  
                                PL74 04DA                                  PL66 11E0  
                                PL58 0BCE                                  PL92 0376  
                                PL84 0F5C                                  PL76 04E4  
                                PL68 11EA                                  PL94 037C  
                                PL86 01D4                                  PL78 0C86  
                                PL96 072E                                  PL88 0724  
                                PL98 01DE                                  l212 0E66  
                                l301 171A                                  l302 171C  
                                l311 142A                                  l136 1810  
                                l153 15F6                                  l163 1620  
                                l171 17DE                                  l229 0A68  
                                l431 11FA                                  l424 0F94  
                                l353 1132                                  l601 0B88  
                                l362 10C8                                  l179 18CE  
                                l435 1230                                  l380 0DCE  
                                l630 09C6                                  l615 0592  
                                l721 0C2E                                  l299 1712  
                                l643 00A0                                  l389 0D3A  
                                l670 06BE                                  l770 1342  
                                l683 0278                                  l772 134C  
                                l845 1700                                  l774 136A  
                                l766 1332                                  l768 133A  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _R_W 007E3A                                  tosl 000FFD  
                                wreg 000FE8                                 PL100 01E4  
                               PL110 01EA                                 PL102 0624  
                               PL120 04F4                                 PL112 01F0  
                               PL104 0386                                 PL122 073C  
                               PL114 01F6                                 PL106 0D30  
                               PL124 0630                                 PL116 0736  
                               PL108 04EE                                 PL118 062A  
                       __CFG_LVP$OFF 000000                        I2C_start@_R_W 0050  
                       _putchar_down 0DCA                         __CFG_WDT$OFF 000000  
                               l3000 142E                                 l3110 0E9A  
                               l1271 12DA                                 l3200 1104  
                               l1281 13E2                                 l3202 1110  
                               l3132 1044                                 l3124 0FEA  
                               l3140 104C                                 l3108 0E98  
                               l3070 14DA                                 l3054 14A2  
                               l3224 0DD0                                 l4104 1294  
                               l3138 104A                                 l3170 116E  
                               l3234 0E36                                 l3074 14FA  
                               l3410 08CE                                 l4050 138E  
                               l4042 1384                                 l3172 117A  
                               l3316 11FC                                 l4060 0A3E  
                               l3148 175C                                 l3166 1134  
                               l3254 0D3C                                 l3334 123E  
                               l3326 1220                                 l4070 0A6C  
                               l4054 13A4                                 l3088 1818  
                               l3264 0DA2                                 l3280 0744  
                               l4080 0ADC                                 l4064 0A56  
                               l3512 0F9C                                 l3098 0E6A  
                               l3450 12B6                                 l3290 078A  
                               l3602 0564                                 l3530 0B3E  
                               l4082 0AF4                                 l4066 0A60  
                               l3196 10CA                                 l3532 0B44  
                               l3524 0B20                                 l4076 0AA6  
                               l4084 0AF6                                 l4068 0A62  
                               l3446 12AA                                 l3470 13C6  
                               l3366 0840                                 l3438 0924  
                               l3630 093C                                 l3622 05E6  
                               l3710 0070                                 l3448 12B2  
                               l3640 095E                                 l3624 05F6  
                               l3608 056E                                 l3616 057E  
                               l3704 005E                                 l3528 0B36  
                               l3560 0B74                                 l2850 15E8  
                               l3458 12D0                                 l3474 13D8  
                               l3466 13BA                                 l3386 088E  
                               l3730 00D0                                 l3538 0B5C  
                               l3490 0F68                                 l2836 189C  
                               l3468 13C2                                 l3652 0984  
                               l3572 0506                                 l3740 0128  
                               l3732 00E0                                 l3716 007A  
                               l3724 008C                                 l3804 06AA  
                               l3564 0BB2                                 l3548 0B68  
                               l3900 0408                                 l2870 1612  
                               l3398 08A0                                 l3646 097A  
                               l3590 054A                                 l3750 0178  
                               l3742 0136                                 l3734 00F2  
                               l3830 022E                                 l3814 01FE  
                               l3566 0BC2                                 l2848 15E6  
                               l2952 151C                                 l3664 09A0  
                               l3672 09B2                                 l3584 052E  
                               l3744 0144                                 l3736 0108  
                               l3728 00BE                                 l3808 0702  
                               l3824 0216                                 l3658 0996  
                               l3930 0BDA                                 l3746 0152  
                               l3738 011A                                 l3754 018A  
                               l3682 0014                                 l3762 063A  
                               l3842 024A                                 l2868 1610  
                               l2964 1536                                 l2956 1522  
                               l3676 0A10                                 l3940 0BF6  
                               l3596 0554                                 l3748 0166  
                               l3756 01BC                                 l3692 0036  
                               l3772 0658                                 l3860 0298  
                               l3836 023A                                 l2958 1526  
                               l3950 0C28                                 l3942 0BFA  
                               l3790 0690                                 l3870 02EA  
                               l3862 02AA                                 l3926 04AE  
                               l2968 153E                                 l2984 16E2  
                               l2976 16CC                                 l3952 0C32  
                               l3936 0BEA                                 l3784 0680  
                               l3872 02FE                                 l3864 02BA  
                               l3848 0254                                 l3856 0264  
                               l3698 0052                                 l3778 0674  
                               l3866 02CC                                 l3970 1544  
                               l3964 0C5A                                 l3796 069A  
                               l3868 02DC                                 l3876 0314  
                               l3884 038E                                 l3958 0C4C  
                               l3966 0C72                                 l3878 0332  
                               l3974 154E                                 l3992 134E  
                               STR_1 BFE8                     ow_reset@presence 0050  
                               u2030 0B1C                                 _LATB 000F8A  
                               u2311 0C20                                 _LATC 000F8B  
                               u2080 0502                                 _LATD 000F8C  
                       _DS3231_Write 17E4                                 u1534 1744  
                               u1535 1740                                 u1544 1660  
                               u1545 165C                                 u1554 14B2  
                               u1555 14AE                                 u1660 1022  
                               u1804 0D7E                                 u1805 0D7A  
                               u1671 103C                                 u1584 14F2  
                               u2528 0AE0                                 u1585 14EE  
                               u2617 124E                                 u2707 13F6  
                               u2627 1394                                 u1764 0E12  
                               u1765 0E0E                                 u2717 1406  
                               u2637 1226                                 u2727 141A  
                               u2647 14CE                                 u2737 0DA8  
                               u2657 16F6                                 u2747 0E3C  
                               u2667 1702                                 u2677 14FC  
                               u2687 17B2                                 u2697 17BE  
                               _RCEN 007E2B                                 _TMR0 000FD6  
                               _RSEN 007E29                         _RTOS_SetTask 0E5E  
                       __CFG_PWRT$ON 000000                                 _Font BAC7  
                    __end_of_Cmd7221 1774                      I2C_restart@_R_W 0050  
                               _main 1248                     __end_of_I2C_Init 1816  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0071                        write_byte@val 0052  
                   __end_of_I2C_idle 18AC                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
            __size_ofi2_RTOS_SetTask 0064                     __end_of_I2C_stop 18D4  
                      __CFG_IESO$OFF 000000                      __end_of_FillBuf 07C4  
                    __end_of_GetTime 1640                     ??_I2C_read_noack 0050  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
               __size_of_I2C_restart 002A               __end_of_decimal_to_bcd 16C4  
               RTOS_SetTask@taskFunc 004F                        I2C_write@data 0050  
                      _putchar_b_buf 10C0                     __end_of_INT0_ISR 1856  
                              ?_main 0041                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___lbdiv 1542  
                    __end_of___lbmod 16EA                __end_of_default_state 18E0  
                              _T0CON 000FD5                      __end_of___lwdiv 12E4  
                    __end_of___lwmod 13EC                                i2l212 0C98  
                              i2l282 10AC                                i2l278 1072  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _PORTB 000F81                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _SSPIF 007CF3                        __CFG_WRT0$OFF 000000  
                    __end_of_getDate 0F40                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                 __end_of_clear_matrix 182C  
                              _TTime 0036                                _FontS BFC7  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                    __end_of_getTime 11E0                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                     __end_of_TMR0_ISR 18C8  
                   __end_of_TMR1_ISR 188C                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                     __end_of_TMR1Init 18BA  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                              _fract BAB7                        pic_to_led@pic 0054  
                    __end_of_setDate 149E                     I2C_restart@adres 0051  
                     write_byte@temp 0053                      __end_of_setTime 15D2  
                     __pbitbssCOMRAM 0378                                pclath 000FFA  
                              tablat 000FF5                                plusw1 000FE3  
                              plusw2 000FDB                      __end_of_version 13AE  
                              status 000FD8                    __end_of_I2C_start 15FC  
                    __end_of_sprintf 156A                    __end_of_I2C_write 17E4  
                    ___lbdiv@divisor 004F                         __end_ofPL100 01EA  
                       __end_ofPL110 01F0                         __end_ofPL102 062A  
                       __end_ofPL120 04FA                         __end_ofPL112 01F6  
                       __end_ofPL104 038C                         __end_ofPL122 0742  
                       __end_ofPL114 01FC                         __end_ofPL106 0D36  
                       __end_ofPL124 0638                         __end_ofPL116 073C  
                       __end_ofPL108 04F4                         __end_ofPL118 0630  
                 __size_of_RTOS_Init 0010                      ___lbdiv@counter 0051  
                    write_bit@bitval 004F                      __initialization 12E4  
                       __end_of_Font BFC7                     __end_of_Init7221 15A4  
                       __end_of_main 129A                      _readTemp_Single 083E  
                     ?_putchar_b_buf 0057                      ?_decimal_to_bcd 0041  
        ?_INTERRUPT_InterruptManager 0041                       __CFG_OSC$HSPLL 000000  
              RTOS_SetTask@taskDelay 0051                      decimal_to_bcd@d 0059  
                             ??_main 006E                        __activetblptr 000002  
                   ??_Send_Byte_7221 004F                       _putchar_down_s 0D36  
                          ??_Cmd7221 0052                      I2C_start@adress 0051  
                             i2l4006 0C9C                               i2l4016 0CC4  
                             i2l4120 1098                               i2l4018 0CC6  
                          ??_FillBuf 0057                            ??_GetTime 0058  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                      setDate@daySet 005F                    DS3231_Write@value 005A  
                             _TSTime 000A                       __CFG_XINST$OFF 000000  
                    Send_Byte_7221@i 0050                    _RTOS_DispatchTask 0A34  
                          ??___lbdiv 0050                       __CFG_STVREN$ON 000000  
                          ??___lbmod 0054                               _i_char 0013  
                       ?_scroll_left 0041                            ??___lwdiv 0053  
                   RTOS_DeleteTask@i 0057                         ?_scroll_text 0041  
                          ??___lwmod 005A                               _en_put 0378  
                             _pic7x8 BA9B                       pic_to_led@mask 0057  
                 ?_RTOS_DispatchTask 0041                               _events 0070  
                   __end_of_read_bit 17C8                               clear_0 12FC  
                             clear_1 1308                               clear_2 1316  
                          ??_getDate 0058                            ??_getTime 0057  
             __end_of_putchar_down_s 0DCA                         ?_time_set_dt 0041  
                       ?_time_set_dy 0041                         ?_time_set_hr 0041  
                  __end_of_RTOS_Init 189C                         ?_time_set_mt 0041  
                       ?_time_set_yr 0041                         __pdataCOMRAM 0070  
                          ?_I2C_Init 0041                   __size_of_Port_Init 001C  
                   __end_of_pixel_on 1756                  ??_RTOS_DispatchTask 0066  
                          ??_setDate 005F                     __end_of_time_led 0C7A  
                          ?_I2C_idle 0041                         __mediumconst BA9A  
                   __end_of_ow_reset 1428                            ??_setTime 005E  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                            ?_I2C_stop 0041  
                          ??_version 0055                            ??_sprintf 0053  
                   ___lbdiv@dividend 0050                    _SYSTEM_Initialize 1774  
                    ___lbmod@divisor 0053                           __accesstop 0080  
            __end_of__initialization 131C                      ___lbmod@counter 0055  
                          ?_INT0_ISR 0041                      __CFG_PBADEN$OFF 000000  
                 ?_SYSTEM_Initialize 0041                       i2_RTOS_SetTask 0C90  
                      ___rparam_used 000001              __end_of_readTemp_Single 093A  
                    _RTOS_DeleteTask 0FE6            __end_of_RTOS_DispatchTask 0AFE  
                      __end_of_FontS BFE8                      ??_putchar_b_buf 0058  
                     __pcstackCOMRAM 0041                  ??_SYSTEM_Initialize 005C  
                          ?_TMR0_ISR 0041                            ?_TMR1_ISR 0041  
                          ?_TMR1Init 0041                        __end_of_fract BAC7  
                        pic_to_led@i 005A                          pic_to_led@j 0059  
                        pic_to_led@x 0058                           __end_ofPL2 0724  
                         __end_ofPL4 07F2                           __end_ofPL6 0818  
                         __end_ofPL8 0352                     ___lbdiv@quotient 0052  
              __size_of_clear_matrix 0016                      ?_putchar_down_s 0057  
                         ??_I2C_Init 004F                           ??_I2C_idle 004F  
                         ??_I2C_stop 0050                            ?_Init7221 0041  
          __end_of_SYSTEM_Initialize 1790               RTOS_SetTask@taskPeriod 0053  
                         __pbssBANK0 0080                           __pbssBANK1 0100  
             __end_ofi2_RTOS_SetTask 0CF4                        ??_DS3231_Read 0052  
                         ??_INT0_ISR 004A                   __size_of_home_temp 0132  
                      ??_DS3231_init 005C                   __size_of_key_press 0044  
                 __size_of_read_byte 0038                    __end_of_Port_Init 17AC  
                       _clear_matrix 1816                      bcd_to_decimal@d 0050  
                         ??_TMR0_ISR 0041                           ??_TMR1_ISR 0041  
                         ??_TMR1Init 004F                      _Timer0Interrupt 0014  
            i2RTOS_SetTask@taskDelay 0043                              _ACKSTAT 007E2E  
                 __size_of_pixel_off 0028                __end_of_Update_Matrix 1464  
                            _INTCON2 000FF1              __size_of_bcd_to_decimal 0016  
                            _Cmd7221 1756                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                           ??_Init7221 0054  
                        setTime@hSet 005E                          setTime@mSet 005C  
                            _SSPSTAT 000FC7                          setTime@sSet 005D  
            __end_of_RTOS_DeleteTask 1054                       setDate@dateSet 005C  
                    ?i2_RTOS_SetTask 0041                              _FillBuf 0742  
                            _GetTime 1626                            ?_read_bit 0041  
                      ??_I2C_restart 0051                   __size_of_write_bit 0024  
                   Update_Matrix@buf 0051                     ?_readTemp_Single 0055  
                   ??_decimal_to_bcd 0057                              __Hparam 0000  
         __size_of_RTOS_DispatchTask 00CA                              __Lparam 0000  
                          _I2C_start 15D2                            _I2C_write 17C8  
                          ?_pixel_on 004F                       setDate@yearSet 005E  
                          ?_time_led 0041                  __end_of_DS3231_Read 169E  
                          ?_ow_reset 0041                  __end_of_DS3231_init 1868  
                            ___lbdiv 150E                              ___lbmod 16C4  
                            ___lwdiv 129A                              ___lwmod 13AE  
                            _i_bchar 0012                              __pcinit 12E4  
                            _getDate 0EE4                              __ramtop 1000  
               __size_of_scroll_left 0054             readTemp_Single@time_flag 0056  
                            __ptext0 1248                              __ptext1 136E  
                            __ptext2 1542                              __ptext3 0F66  
                            _getTime 1194                              __ptext4 1774  
                            __ptext5 18AC                              __ptext6 188C  
                            __ptext7 1790                              __ptext8 18D4  
                            __ptext9 1574                 __size_of_scroll_text 0064  
                  __end_of_home_temp 04BE             readTemp_Single@timer_val 0057  
                          _T1CONbits 000FCD              __size_of_Interrupt_Init 0006  
                         _pic_to_led 112A                    __end_of_key_press 136E  
                            _setDate 1464                    __end_of_read_byte 150E  
                            _setTime 15A4                              _scratch 0001  
               __size_of_time_set_dt 00D6                        putchar_down@i 0064  
               __size_of_time_set_dy 0142                        putchar_down@j 0063  
               __size_of_time_set_hr 0108                        putchar_down@k 0062  
                putchar_b_buf@symbol 0057                 __size_of_time_set_mt 01B6  
                      putchar_down@x 0061                 __size_of_time_set_yr 00E2  
                            _version 136E           __size_of_SYSTEM_Initialize 001C  
                            _sprintf 1542                       __pintcode_body 1054  
               end_of_initialization 131C                        ?_time_set_min 0041  
                       key_press@key 004F                        __Lmediumconst BA9A  
                            int_func 1054                           ??_read_bit 004F  
                  __end_of_pixel_off 1676                     DS3231_Read@value 0053  
             __size_of_default_state 0006                   RTOS_DispatchTask@i 006D  
                 RTOS_DispatchTask@j 006C                        RTOS_SetTask@i 0057  
                         ?_I2C_start 0050                           ?_I2C_write 0041  
                         ??_pixel_on 0050                           ??_time_led 005A  
                         ??_ow_reset 004F                     scroll_left@speed 0058  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                         read_byte@val 0051  
                __end_of_I2C_restart 1626                            _PORTCbits 000F82  
                         _show_digit 0379              __size_of_I2C_read_noack 0012  
                  __end_of_write_bit 170E                     ___lbmod@dividend 0054  
                          _TRISCbits 000F94                    __size_of_I2C_Init 0018  
                          _RTOS_Init 188C                    __size_of_I2C_idle 0010  
                  __size_of_I2C_stop 000C                     ?_RTOS_DeleteTask 004F  
                     ??_time_set_min 005E                          ___lbmod@rem 0056  
                        _DS3231_Read 1676                          _DS3231_init 1856  
                  __size_of_INT0_ISR 0014                     ??_putchar_down_s 0058  
                      __pidataCOMRAM 18E0                           _write_byte 149E  
                  __size_of_TMR0_ISR 000E                    __size_of_TMR1_ISR 0012  
                     __end_of_pic7x8 BAB7                    __size_of_TMR1Init 000E  
                      _default_state 18DA                          ?_pic_to_led 0054  
                        __end_ofPL10 0366                          __end_ofPL20 0D10  
                        __end_ofPL12 0A2A                          __end_ofPL30 083E  
                        __end_ofPL22 0B14                          __end_ofPL14 0822  
                        __end_ofPL40 0F48                          __end_ofPL32 04CE  
                        __end_ofPL24 0832                          __end_ofPL16 0D04  
                        __end_ofPL50 0376                          __end_ofPL42 04DA  
                        __end_ofPL34 0FDA                          __end_ofPL26 0D1C  
                        __end_ofPL18 0B0A                          __end_ofPL60 0D26  
                        __end_ofPL52 0F52                          __end_ofPL44 01CE  
                        __end_ofPL36 164E                          __end_ofPL28 0370  
                        __end_ofPL70 0EE4                          __end_ofPL62 0624  
                        __end_ofPL54 061A                          __end_ofPL46 0FE6  
                        __end_ofPL38 0610                          __end_ofPL80 0D30  
                        __end_ofPL72 01D4                          __end_ofPL64 0A34  
                        __end_ofPL56 0EDA                          __end_ofPL48 0C86  
                        __end_ofPL90 1574                          __end_ofPL82 0F5C  
                        __end_ofPL74 04E4                          __end_ofPL66 11EA  
                        __end_ofPL58 0BD8                          __end_ofPL92 037C  
                        __end_ofPL84 0F66                          __end_ofPL76 04EE  
                        __end_ofPL68 11F4                          __end_ofPL94 0386  
                        __end_ofPL86 01DE                          __end_ofPL78 0C90  
                        __end_ofPL96 0736                          __end_ofPL88 072E  
                        __end_ofPL98 01E4                  start_initialization 12E4  
                     _bcd_to_decimal 182C                           ?_RTOS_Init 0041  
                      ?_putchar_down 005B                        ?_DS3231_Write 005A  
                      ?_RTOS_SetTask 004F                    __size_of_Init7221 0030  
            __size_of_Send_Byte_7221 0024                            _TaskArray 0080  
                        _I2C_restart 15FC                          ??_I2C_start 0051  
                      clear_matrix@i 004F                          ??_I2C_write 0050  
                          _Port_Init 1790                __end_of_putchar_b_buf 112A  
                   __CFG_LPT1OSC$OFF 000000                           read_byte@i 0052  
                     ?_default_state 0041               __end_of_bcd_to_decimal 1842  
                     _Interrupt_Init 18D4                          __pbssCOMRAM 0001  
                   ??i2_RTOS_SetTask 0047                       ??_putchar_down 005C  
          RTOS_DispatchTask@function 006A                             ?_Cmd7221 0051  
                     ??_DS3231_Write 005B                       ??_RTOS_SetTask 0055  
                           ?_FillBuf 0041                             ?_GetTime 0041  
                  __size_of_read_bit 001C                     ___lwdiv@dividend 004F  
                __size_of_pic_to_led 006A                    __CFG_CCP2MX$PORTC 000000  
                          __pintcode 0008                        __pmediumconst BA9A  
                           ?___lbdiv 004F               i2RTOS_SetTask@taskFunc 0041  
                           ?___lbmod 0053                           ?_Port_Init 0041  
                           ?___lwdiv 004F                             ?___lwmod 0056  
                  __size_of_pixel_on 0024                             Cmd7221@i 0053  
                  __size_of_time_led 00A2                    __size_of_ow_reset 003C  
                        ?_write_byte 0041               __end_of_Interrupt_Init 18DA  
                           ?_getDate 0054         ??_INTERRUPT_InterruptManager 004A  
                          _arrayTail 0015                 __end_of_time_set_min 0BCE  
                           ?_getTime 0054                       _I2C_read_noack 1868  
                    ?_bcd_to_decimal 0041                             _I2C_Init 17FE  
                           ?_setDate 005C                             _I2C_idle 189C  
                           ?_setTime 005C             i2RTOS_SetTask@taskPeriod 0045  
                           _I2C_stop 18C8                            _home_temp 038C  
                        ??_RTOS_Init 004F                     ___lwdiv@quotient 0053  
                           ?_version 0041                             ?_sprintf 004F  
                          _key_press 132A                            _read_byte 14D6  
                         Cmd7221@adr 0052                           Cmd7221@val 0051  
                           _INT0_ISR 1842                             _LATDbits 000F8C  
                          getDate@p1 0057                            getDate@p2 0056  
                          getDate@p3 0055                            getDate@p4 0054  
                           _PIE1bits 000F9D                           pixel_off@x 0053  
                         pixel_off@y 004F                     readTemp_Single@i 005B  
             __size_of_Update_Matrix 003C  __size_of_INTERRUPT_InterruptManager 10B8  
                           _PIR1bits 000F9E                             FillBuf@i 0059  
                          _pixel_off 164E                     __CFG_WDTPS$32768 000000  
                          _time_flag 003F                        ??_scroll_left 0055  
                           _TMR0_ISR 18BA                             _TMR1_ISR 187A  
                      ??_scroll_text 004F                             _TMR1Init 18AC  
                          getTime@p1 0056                            getTime@p2 0055  
                          getTime@p3 0054                            _timer_val 0040  
                DS3231_Write@address 005B                      putchar_down_s@i 0060  
                    putchar_down_s@j 005F                      putchar_down_s@k 005E  
                    putchar_down_s@x 005D               __end_of_I2C_read_noack 187A  
           __size_of_readTemp_Single 00FC                      ??_default_state 004F  
                    ?_Interrupt_Init 0041                        ??_time_set_dt 0060  
                      ??_time_set_dy 0060                        ??_time_set_hr 005F  
                      ??_time_set_mt 0060                        ??_time_set_yr 0060  
                        write_byte@i 0054                             _Dis_Buff 0016  
                         ?_home_temp 0041                             _Init7221 1574  
                         ?_key_press 0041                            _write_bit 16EA  
                        _INTCON2bits 000FF1                     __size_of_Cmd7221 001E  
                         ?_read_byte 0041                       _Send_Byte_7221 170E  
                       ?_DS3231_Read 0041                  __size_of_write_byte 0038  
                  Update_Matrix@data 0052                     __size_of_FillBuf 0082  
                   __size_of_GetTime 001A                         ?_DS3231_init 0041  
                           __Hrparam 0000                      setDate@monthSet 005D  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                         ?_pixel_off 004F                 __end_of_putchar_down 0E5E  
                 DS3231_Read@address 0052                          ??_Port_Init 004F  
                  Send_Byte_7221@dat 004F                       key_press@count 0011  
               __end_of_DS3231_Write 17FE                     __size_of___lbdiv 0034  
                   __size_of___lbmod 0026                 __end_of_RTOS_SetTask 0ED0  
                    ?_I2C_read_noack 0041                     __size_of___lwdiv 004A  
                   __size_of___lwmod 003E              __size_of_decimal_to_bcd 0026  
                   __size_of_getDate 005C                     __size_of_getTime 004C  
                __end_of_scroll_left 1248                  readTemp_Single@temp 005C  
                       ??_pic_to_led 0055                  __end_of_scroll_text 0FCA  
                      _Update_Matrix 1428                      ___lwdiv@divisor 0051  
                   __size_of_setDate 003A                      ___lwdiv@counter 0055  
                   __size_of_setTime 002E                             __ptext10 1756  
                           __ptext11 17FE                             __ptext20 18DA  
                           __ptext12 1856                             __ptext21 04FA  
                           __ptext13 0A34                             __ptext30 0742  
                           __ptext22 132A                             __ptext14 038C  
                           __ptext31 11F4                             __ptext23 0BD8  
                           __ptext15 0B14                             __ptext40 1428  
                           __ptext32 083E                             __ptext24 093A  
                           __ptext16 1626                             __ptext41 170E  
                           __ptext33 149E                             __ptext25 15A4  
                           __ptext17 01FC                             __ptext50 0E5E  
                           __ptext42 112A                             __ptext34 16EA  
                           __ptext26 1464                             __ptext18 0638  
                           __ptext51 0FE6                             __ptext43 1732  
                           __ptext35 14D6                             __ptext27 169E  
                           __ptext19 0012                             __ptext60 1868  
                           __ptext52 1194                             __ptext44 164E  
                           __ptext36 17AC                             __ptext28 17E4  
                           __ptext61 189C                             __ptext53 0EE4  
                           __ptext45 1816                             __ptext37 13EC  
                           __ptext29 10C0                             __ptext54 182C  
                           __ptext46 13AE                             __ptext38 0D36  
                           __ptext63 187A                             __ptext55 1676  
                           __ptext47 129A                             __ptext39 0DCA  
                           __ptext64 18BA                             __ptext56 17C8  
                           __ptext48 16C4                             __ptext65 1842  
                           __ptext57 18C8                             __ptext49 150E  
                           __ptext66 0C90                             __ptext58 15D2  
                           __ptext67 0000                             __ptext59 15FC  
             __end_of_Send_Byte_7221 1732                           ?_write_bit 0041  
                __end_of_time_set_dt 070E                  __end_of_time_set_dy 033E  
                __end_of_time_set_hr 0602                  __end_of_time_set_mt 01C8  
                __end_of_time_set_yr 0A1C                     __size_of_version 0040  
                   __size_of_sprintf 0028                       Update_Matrix@i 0054  
                     Update_Matrix@j 0053                        __size_of_main 0052  
                           _read_bit 17AC                    putchar_b_buf@mask 005A  
                     putchar_b_buf@i 005D                       putchar_b_buf@j 005C  
                     putchar_b_buf@x 005B                         ?_I2C_restart 0050  
            RTOS_DeleteTask@taskFunc 004F                            pixel_on@x 0052  
                          pixel_on@y 004F                        ?_clear_matrix 0041  
           __size_of_RTOS_DeleteTask 006E                             _pixel_on 1732  
                 __end_of_pic_to_led 1194                             _time_led 0BD8  
               putchar_down_s@symbol 0057                             _ow_reset 13EC  
              __size_of_time_set_min 00BA                             int$flags 0071  
                           _text_buf 0100   __end_of_INTERRUPT_InterruptManager 10C0  
         _INTERRUPT_InterruptManager 0008                      i2RTOS_SetTask@i 0049  
                     ?_Update_Matrix 0051                           _INTCONbits 000FF2  
                  ??_readTemp_Single 0058                          ??_home_temp 0065  
                       scroll_left@i 0059                         scroll_left@j 0056  
                       scroll_left@k 0057                      ?_Send_Byte_7221 0041  
                        ??_key_press 004F                          ??_read_byte 004F  
                       scroll_text@i 0051                   readTemp_Single@buf 0055  
                           intlevel2 0000                   readTemp_Single@tmp 005A  
                          sprintf@sp 004F                     ___lwmod@dividend 0056  
                       _time_set_min 0B14                       ??_clear_matrix 004F  
                        ??_pixel_off 0050                     ??_bcd_to_decimal 004F  
                        _scroll_left 11F4                          _scroll_text 0F66  
                 putchar_down@symbol 005B                         ??_write_byte 0050  
                           version@i 0056                          _temperature 003D  
                           sprintf@c 0053                             sprintf@f 0051  
                        _time_set_dt 0638                          _time_set_dy 01FC  
                        _time_set_hr 04FA                          _time_set_mt 0012  
                    ___lwmod@divisor 0058                          _time_set_yr 093A  
                    ___lwmod@counter 005A              __size_of_putchar_down_s 0094  
                        ??_write_bit 004F               __size_of_putchar_b_buf 006A  
                 __end_of_write_byte 14D6                __size_of_putchar_down 0094  
              __size_of_DS3231_Write 001A                 __size_of_DS3231_Read 0028  
              __size_of_RTOS_SetTask 0072                 __size_of_DS3231_init 0012  
