

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Fri Mar 31 14:41:57 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18F4525
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes0,global,class=CODE,delta=1
   110  0000                     
   111                           ; Version 1.41
   112                           ; Generated 25/01/2017 GMT
   113                           ; 
   114                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F4525 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     tosu	equ	0xFFF
   146                           tosh	equ	0xFFE
   147                           tosl	equ	0xFFD
   148                           pclath	equ	0xFFA
   149                           tblptru	equ	0xFF8
   150                           tblptrh	equ	0xFF7
   151                           tblptrl	equ	0xFF6
   152                           tablat	equ	0xFF5
   153                           prodh	equ	0xFF4
   154                           prodl	equ	0xFF3
   155                           intcon	equ	0xFF2
   156                           intcon2	equ	0xFF1
   157                           wreg	equ	0xFE8
   158                           indf1	equ	0xFE7
   159                           plusw1	equ	0xFE3
   160                           fsr1h	equ	0xFE2
   161                           fsr1l	equ	0xFE1
   162                           indf2	equ	0xFDF
   163                           postinc2	equ	0xFDE
   164                           postdec2	equ	0xFDD
   165                           plusw2	equ	0xFDB
   166                           fsr2h	equ	0xFDA
   167                           fsr2l	equ	0xFD9
   168                           status	equ	0xFD8
   169                           
   170                           	psect	eeprom_data
   171  F00000  03 00 00 00 00 00 00 00 	db	3,0,0,0,0,0,0,0	;# 
   172  0000                     tosu	equ	0xFFF
   173                           tosh	equ	0xFFE
   174                           tosl	equ	0xFFD
   175                           pclath	equ	0xFFA
   176                           tblptru	equ	0xFF8
   177                           tblptrh	equ	0xFF7
   178                           tblptrl	equ	0xFF6
   179                           tablat	equ	0xFF5
   180                           prodh	equ	0xFF4
   181                           prodl	equ	0xFF3
   182                           intcon	equ	0xFF2
   183                           intcon2	equ	0xFF1
   184                           wreg	equ	0xFE8
   185                           indf1	equ	0xFE7
   186                           plusw1	equ	0xFE3
   187                           fsr1h	equ	0xFE2
   188                           fsr1l	equ	0xFE1
   189                           indf2	equ	0xFDF
   190                           postinc2	equ	0xFDE
   191                           postdec2	equ	0xFDD
   192                           plusw2	equ	0xFDB
   193                           fsr2h	equ	0xFDA
   194                           fsr2l	equ	0xFD9
   195                           status	equ	0xFD8
   196                           
   197                           	psect	idataCOMRAM
   198  002828                     __pidataCOMRAM:
   199                           	opt stack 0
   200                           
   201                           ;initializer for _pFont
   202  002828  8A                 	db	low _dFont1
   203  002829  BF                 	db	high _dFont1
   204                           
   205                           ;initializer for _events
   206  00282A  05                 	db	5
   207                           tosu	equ	0xFFF
   208                           tosh	equ	0xFFE
   209                           tosl	equ	0xFFD
   210                           pclath	equ	0xFFA
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           prodh	equ	0xFF4
   216                           prodl	equ	0xFF3
   217                           intcon	equ	0xFF2
   218                           intcon2	equ	0xFF1
   219                           wreg	equ	0xFE8
   220                           indf1	equ	0xFE7
   221                           plusw1	equ	0xFE3
   222                           fsr1h	equ	0xFE2
   223                           fsr1l	equ	0xFE1
   224                           indf2	equ	0xFDF
   225                           postinc2	equ	0xFDE
   226                           postdec2	equ	0xFDD
   227                           plusw2	equ	0xFDB
   228                           fsr2h	equ	0xFDA
   229                           fsr2l	equ	0xFD9
   230                           status	equ	0xFD8
   231                           
   232                           	psect	mediumconst
   233  00B98E                     __pmediumconst:
   234                           	opt stack 0
   235  00B98E  00                 	db	0
   236  00B98F                     _pic7x8:
   237                           	opt stack 0
   238  00B98F  00                 	db	0
   239  00B990  00                 	db	0
   240  00B991  00                 	db	0
   241  00B992  00                 	db	0
   242  00B993  00                 	db	0
   243  00B994  00                 	db	0
   244  00B995  00                 	db	0
   245  00B996  08                 	db	8
   246  00B997  7C                 	db	124
   247  00B998  4E                 	db	78
   248  00B999  4F                 	db	79
   249  00B99A  4E                 	db	78
   250  00B99B  7C                 	db	124
   251  00B99C  08                 	db	8
   252  00B99D  04                 	db	4
   253  00B99E  26                 	db	38
   254  00B99F  47                 	db	71
   255  00B9A0  3F                 	db	63
   256  00B9A1  07                 	db	7
   257  00B9A2  06                 	db	6
   258  00B9A3  04                 	db	4
   259  00B9A4  20                 	db	32
   260  00B9A5  3E                 	db	62
   261  00B9A6  7F                 	db	127
   262  00B9A7  7F                 	db	127
   263  00B9A8  3F                 	db	63
   264  00B9A9  3E                 	db	62
   265  00B9AA  20                 	db	32
   266  00B9AB  7E                 	db	126
   267  00B9AC  12                 	db	18
   268  00B9AD  1E                 	db	30
   269  00B9AE  00                 	db	0
   270  00B9AF  70                 	db	112
   271  00B9B0  10                 	db	16
   272  00B9B1  00                 	db	0
   273  00B9B2                     __end_of_pic7x8:
   274                           	opt stack 0
   275  00B9B2                     _fract:
   276                           	opt stack 0
   277  00B9B2  00                 	db	0
   278  00B9B3  01                 	db	1
   279  00B9B4  01                 	db	1
   280  00B9B5  02                 	db	2
   281  00B9B6  02                 	db	2
   282  00B9B7  03                 	db	3
   283  00B9B8  04                 	db	4
   284  00B9B9  04                 	db	4
   285  00B9BA  05                 	db	5
   286  00B9BB  06                 	db	6
   287  00B9BC  06                 	db	6
   288  00B9BD  07                 	db	7
   289  00B9BE  07                 	db	7
   290  00B9BF  08                 	db	8
   291  00B9C0  09                 	db	9
   292  00B9C1  09                 	db	9
   293  00B9C2                     __end_of_fract:
   294                           	opt stack 0
   295  00B9C2                     _Font:
   296                           	opt stack 0
   297  00B9C2  00                 	db	0
   298  00B9C3  00                 	db	0
   299  00B9C4  00                 	db	0
   300  00B9C5  00                 	db	0
   301  00B9C6  00                 	db	0
   302  00B9C7  45                 	db	69
   303  00B9C8  51                 	db	81
   304  00B9C9  45                 	db	69
   305  00B9CA  3E                 	db	62
   306  00B9CB  00                 	db	0
   307  00B9CC  6B                 	db	107
   308  00B9CD  6F                 	db	111
   309  00B9CE  6B                 	db	107
   310  00B9CF  3E                 	db	62
   311  00B9D0  00                 	db	0
   312  00B9D1  3E                 	db	62
   313  00B9D2  7C                 	db	124
   314  00B9D3  3E                 	db	62
   315  00B9D4  1C                 	db	28
   316  00B9D5  00                 	db	0
   317  00B9D6  3C                 	db	60
   318  00B9D7  7E                 	db	126
   319  00B9D8  3C                 	db	60
   320  00B9D9  18                 	db	24
   321  00B9DA  00                 	db	0
   322  00B9DB  36                 	db	54
   323  00B9DC  7F                 	db	127
   324  00B9DD  36                 	db	54
   325  00B9DE  30                 	db	48
   326  00B9DF  00                 	db	0
   327  00B9E0  00                 	db	0
   328  00B9E1  00                 	db	0
   329  00B9E2  00                 	db	0
   330  00B9E3  00                 	db	0
   331  00B9E4  00                 	db	0
   332  00B9E5  00                 	db	0
   333  00B9E6  00                 	db	0
   334  00B9E7  00                 	db	0
   335  00B9E8  00                 	db	0
   336  00B9E9  00                 	db	0
   337  00B9EA  00                 	db	0
   338  00B9EB  00                 	db	0
   339  00B9EC  00                 	db	0
   340  00B9ED  00                 	db	0
   341  00B9EE  00                 	db	0
   342  00B9EF  00                 	db	0
   343  00B9F0  00                 	db	0
   344  00B9F1  00                 	db	0
   345  00B9F2  00                 	db	0
   346  00B9F3  00                 	db	0
   347  00B9F4  00                 	db	0
   348  00B9F5  00                 	db	0
   349  00B9F6  00                 	db	0
   350  00B9F7  00                 	db	0
   351  00B9F8  00                 	db	0
   352  00B9F9  00                 	db	0
   353  00B9FA  00                 	db	0
   354  00B9FB  00                 	db	0
   355  00B9FC  00                 	db	0
   356  00B9FD  00                 	db	0
   357  00B9FE  00                 	db	0
   358  00B9FF  00                 	db	0
   359  00BA00  00                 	db	0
   360  00BA01  00                 	db	0
   361  00BA02  00                 	db	0
   362  00BA03  00                 	db	0
   363  00BA04  00                 	db	0
   364  00BA05  00                 	db	0
   365  00BA06  00                 	db	0
   366  00BA07  00                 	db	0
   367  00BA08  00                 	db	0
   368  00BA09  00                 	db	0
   369  00BA0A  00                 	db	0
   370  00BA0B  00                 	db	0
   371  00BA0C  00                 	db	0
   372  00BA0D  00                 	db	0
   373  00BA0E  00                 	db	0
   374  00BA0F  00                 	db	0
   375  00BA10  00                 	db	0
   376  00BA11  00                 	db	0
   377  00BA12  00                 	db	0
   378  00BA13  00                 	db	0
   379  00BA14  00                 	db	0
   380  00BA15  00                 	db	0
   381  00BA16  00                 	db	0
   382  00BA17  00                 	db	0
   383  00BA18  00                 	db	0
   384  00BA19  00                 	db	0
   385  00BA1A  00                 	db	0
   386  00BA1B  00                 	db	0
   387  00BA1C  00                 	db	0
   388  00BA1D  00                 	db	0
   389  00BA1E  00                 	db	0
   390  00BA1F  00                 	db	0
   391  00BA20  00                 	db	0
   392  00BA21  00                 	db	0
   393  00BA22  00                 	db	0
   394  00BA23  00                 	db	0
   395  00BA24  00                 	db	0
   396  00BA25  00                 	db	0
   397  00BA26  00                 	db	0
   398  00BA27  00                 	db	0
   399  00BA28  00                 	db	0
   400  00BA29  00                 	db	0
   401  00BA2A  00                 	db	0
   402  00BA2B  00                 	db	0
   403  00BA2C  00                 	db	0
   404  00BA2D  00                 	db	0
   405  00BA2E  00                 	db	0
   406  00BA2F  00                 	db	0
   407  00BA30  00                 	db	0
   408  00BA31  00                 	db	0
   409  00BA32  00                 	db	0
   410  00BA33  00                 	db	0
   411  00BA34  00                 	db	0
   412  00BA35  00                 	db	0
   413  00BA36  00                 	db	0
   414  00BA37  00                 	db	0
   415  00BA38  00                 	db	0
   416  00BA39  00                 	db	0
   417  00BA3A  7C                 	db	124
   418  00BA3B  4E                 	db	78
   419  00BA3C  4E                 	db	78
   420  00BA3D  7C                 	db	124
   421  00BA3E  08                 	db	8
   422  00BA3F  20                 	db	32
   423  00BA40  34                 	db	52
   424  00BA41  7E                 	db	126
   425  00BA42  34                 	db	52
   426  00BA43  20                 	db	32
   427  00BA44  00                 	db	0
   428  00BA45  00                 	db	0
   429  00BA46  36                 	db	54
   430  00BA47  36                 	db	54
   431  00BA48  00                 	db	0
   432  00BA49  00                 	db	0
   433  00BA4A  00                 	db	0
   434  00BA4B  00                 	db	0
   435  00BA4C  00                 	db	0
   436  00BA4D  00                 	db	0
   437  00BA4E  00                 	db	0
   438  00BA4F  00                 	db	0
   439  00BA50  00                 	db	0
   440  00BA51  00                 	db	0
   441  00BA52  00                 	db	0
   442  00BA53  00                 	db	0
   443  00BA54  00                 	db	0
   444  00BA55  00                 	db	0
   445  00BA56  00                 	db	0
   446  00BA57  00                 	db	0
   447  00BA58  00                 	db	0
   448  00BA59  00                 	db	0
   449  00BA5A  00                 	db	0
   450  00BA5B  00                 	db	0
   451  00BA5C  00                 	db	0
   452  00BA5D  00                 	db	0
   453  00BA5E  00                 	db	0
   454  00BA5F  00                 	db	0
   455  00BA60  00                 	db	0
   456  00BA61  00                 	db	0
   457  00BA62  00                 	db	0
   458  00BA63  00                 	db	0
   459  00BA64  00                 	db	0
   460  00BA65  00                 	db	0
   461  00BA66  00                 	db	0
   462  00BA67  00                 	db	0
   463  00BA68  00                 	db	0
   464  00BA69  5F                 	db	95
   465  00BA6A  00                 	db	0
   466  00BA6B  00                 	db	0
   467  00BA6C  00                 	db	0
   468  00BA6D  07                 	db	7
   469  00BA6E  00                 	db	0
   470  00BA6F  07                 	db	7
   471  00BA70  00                 	db	0
   472  00BA71  14                 	db	20
   473  00BA72  7F                 	db	127
   474  00BA73  14                 	db	20
   475  00BA74  7F                 	db	127
   476  00BA75  14                 	db	20
   477  00BA76  24                 	db	36
   478  00BA77  2A                 	db	42
   479  00BA78  7F                 	db	127
   480  00BA79  2A                 	db	42
   481  00BA7A  12                 	db	18
   482  00BA7B  23                 	db	35
   483  00BA7C  13                 	db	19
   484  00BA7D  08                 	db	8
   485  00BA7E  64                 	db	100
   486  00BA7F  62                 	db	98
   487  00BA80  36                 	db	54
   488  00BA81  49                 	db	73
   489  00BA82  56                 	db	86
   490  00BA83  20                 	db	32
   491  00BA84  50                 	db	80
   492  00BA85  00                 	db	0
   493  00BA86  08                 	db	8
   494  00BA87  07                 	db	7
   495  00BA88  03                 	db	3
   496  00BA89  00                 	db	0
   497  00BA8A  00                 	db	0
   498  00BA8B  1C                 	db	28
   499  00BA8C  22                 	db	34
   500  00BA8D  41                 	db	65
   501  00BA8E  00                 	db	0
   502  00BA8F  00                 	db	0
   503  00BA90  41                 	db	65
   504  00BA91  22                 	db	34
   505  00BA92  1C                 	db	28
   506  00BA93  00                 	db	0
   507  00BA94  2A                 	db	42
   508  00BA95  1C                 	db	28
   509  00BA96  7F                 	db	127
   510  00BA97  1C                 	db	28
   511  00BA98  2A                 	db	42
   512  00BA99  08                 	db	8
   513  00BA9A  08                 	db	8
   514  00BA9B  3E                 	db	62
   515  00BA9C  08                 	db	8
   516  00BA9D  08                 	db	8
   517  00BA9E  00                 	db	0
   518  00BA9F  80                 	db	128
   519  00BAA0  70                 	db	112
   520  00BAA1  30                 	db	48
   521  00BAA2  00                 	db	0
   522  00BAA3  08                 	db	8
   523  00BAA4  08                 	db	8
   524  00BAA5  08                 	db	8
   525  00BAA6  08                 	db	8
   526  00BAA7  08                 	db	8
   527  00BAA8  60                 	db	96
   528  00BAA9  60                 	db	96
   529  00BAAA  00                 	db	0
   530  00BAAB  00                 	db	0
   531  00BAAC  00                 	db	0
   532  00BAAD  20                 	db	32
   533  00BAAE  10                 	db	16
   534  00BAAF  08                 	db	8
   535  00BAB0  04                 	db	4
   536  00BAB1  02                 	db	2
   537  00BAB2  3E                 	db	62
   538  00BAB3  51                 	db	81
   539  00BAB4  49                 	db	73
   540  00BAB5  45                 	db	69
   541  00BAB6  3E                 	db	62
   542  00BAB7  00                 	db	0
   543  00BAB8  42                 	db	66
   544  00BAB9  7F                 	db	127
   545  00BABA  40                 	db	64
   546  00BABB  00                 	db	0
   547  00BABC  42                 	db	66
   548  00BABD  61                 	db	97
   549  00BABE  51                 	db	81
   550  00BABF  49                 	db	73
   551  00BAC0  46                 	db	70
   552  00BAC1  21                 	db	33
   553  00BAC2  41                 	db	65
   554  00BAC3  45                 	db	69
   555  00BAC4  4B                 	db	75
   556  00BAC5  31                 	db	49
   557  00BAC6  18                 	db	24
   558  00BAC7  14                 	db	20
   559  00BAC8  12                 	db	18
   560  00BAC9  7F                 	db	127
   561  00BACA  10                 	db	16
   562  00BACB  27                 	db	39
   563  00BACC  45                 	db	69
   564  00BACD  45                 	db	69
   565  00BACE  45                 	db	69
   566  00BACF  39                 	db	57
   567  00BAD0  3C                 	db	60
   568  00BAD1  4A                 	db	74
   569  00BAD2  49                 	db	73
   570  00BAD3  49                 	db	73
   571  00BAD4  30                 	db	48
   572  00BAD5  01                 	db	1
   573  00BAD6  71                 	db	113
   574  00BAD7  09                 	db	9
   575  00BAD8  05                 	db	5
   576  00BAD9  03                 	db	3
   577  00BADA  36                 	db	54
   578  00BADB  49                 	db	73
   579  00BADC  49                 	db	73
   580  00BADD  49                 	db	73
   581  00BADE  36                 	db	54
   582  00BADF  06                 	db	6
   583  00BAE0  49                 	db	73
   584  00BAE1  49                 	db	73
   585  00BAE2  29                 	db	41
   586  00BAE3  1E                 	db	30
   587  00BAE4  00                 	db	0
   588  00BAE5  00                 	db	0
   589  00BAE6  36                 	db	54
   590  00BAE7  36                 	db	54
   591  00BAE8  00                 	db	0
   592  00BAE9  00                 	db	0
   593  00BAEA  40                 	db	64
   594  00BAEB  34                 	db	52
   595  00BAEC  00                 	db	0
   596  00BAED  00                 	db	0
   597  00BAEE  00                 	db	0
   598  00BAEF  08                 	db	8
   599  00BAF0  14                 	db	20
   600  00BAF1  22                 	db	34
   601  00BAF2  41                 	db	65
   602  00BAF3  14                 	db	20
   603  00BAF4  14                 	db	20
   604  00BAF5  14                 	db	20
   605  00BAF6  14                 	db	20
   606  00BAF7  14                 	db	20
   607  00BAF8  00                 	db	0
   608  00BAF9  41                 	db	65
   609  00BAFA  22                 	db	34
   610  00BAFB  14                 	db	20
   611  00BAFC  08                 	db	8
   612  00BAFD  02                 	db	2
   613  00BAFE  01                 	db	1
   614  00BAFF  59                 	db	89
   615  00BB00  09                 	db	9
   616  00BB01  06                 	db	6
   617  00BB02  3E                 	db	62
   618  00BB03  41                 	db	65
   619  00BB04  5D                 	db	93
   620  00BB05  59                 	db	89
   621  00BB06  4E                 	db	78
   622  00BB07  7C                 	db	124
   623  00BB08  12                 	db	18
   624  00BB09  11                 	db	17
   625  00BB0A  12                 	db	18
   626  00BB0B  7C                 	db	124
   627  00BB0C  7F                 	db	127
   628  00BB0D  49                 	db	73
   629  00BB0E  49                 	db	73
   630  00BB0F  49                 	db	73
   631  00BB10  36                 	db	54
   632  00BB11  3E                 	db	62
   633  00BB12  41                 	db	65
   634  00BB13  41                 	db	65
   635  00BB14  41                 	db	65
   636  00BB15  22                 	db	34
   637  00BB16  7F                 	db	127
   638  00BB17  41                 	db	65
   639  00BB18  41                 	db	65
   640  00BB19  41                 	db	65
   641  00BB1A  3E                 	db	62
   642  00BB1B  7F                 	db	127
   643  00BB1C  49                 	db	73
   644  00BB1D  49                 	db	73
   645  00BB1E  49                 	db	73
   646  00BB1F  41                 	db	65
   647  00BB20  7F                 	db	127
   648  00BB21  09                 	db	9
   649  00BB22  09                 	db	9
   650  00BB23  09                 	db	9
   651  00BB24  01                 	db	1
   652  00BB25  3E                 	db	62
   653  00BB26  41                 	db	65
   654  00BB27  41                 	db	65
   655  00BB28  51                 	db	81
   656  00BB29  72                 	db	114
   657  00BB2A  7F                 	db	127
   658  00BB2B  08                 	db	8
   659  00BB2C  08                 	db	8
   660  00BB2D  08                 	db	8
   661  00BB2E  7F                 	db	127
   662  00BB2F  00                 	db	0
   663  00BB30  41                 	db	65
   664  00BB31  7F                 	db	127
   665  00BB32  41                 	db	65
   666  00BB33  00                 	db	0
   667  00BB34  20                 	db	32
   668  00BB35  40                 	db	64
   669  00BB36  41                 	db	65
   670  00BB37  3F                 	db	63
   671  00BB38  01                 	db	1
   672  00BB39  7F                 	db	127
   673  00BB3A  08                 	db	8
   674  00BB3B  14                 	db	20
   675  00BB3C  22                 	db	34
   676  00BB3D  41                 	db	65
   677  00BB3E  7F                 	db	127
   678  00BB3F  40                 	db	64
   679  00BB40  40                 	db	64
   680  00BB41  40                 	db	64
   681  00BB42  40                 	db	64
   682  00BB43  7F                 	db	127
   683  00BB44  02                 	db	2
   684  00BB45  04                 	db	4
   685  00BB46  02                 	db	2
   686  00BB47  7F                 	db	127
   687  00BB48  7F                 	db	127
   688  00BB49  04                 	db	4
   689  00BB4A  08                 	db	8
   690  00BB4B  10                 	db	16
   691  00BB4C  7F                 	db	127
   692  00BB4D  3E                 	db	62
   693  00BB4E  41                 	db	65
   694  00BB4F  41                 	db	65
   695  00BB50  41                 	db	65
   696  00BB51  3E                 	db	62
   697  00BB52  7F                 	db	127
   698  00BB53  09                 	db	9
   699  00BB54  09                 	db	9
   700  00BB55  09                 	db	9
   701  00BB56  06                 	db	6
   702  00BB57  3E                 	db	62
   703  00BB58  41                 	db	65
   704  00BB59  51                 	db	81
   705  00BB5A  21                 	db	33
   706  00BB5B  5E                 	db	94
   707  00BB5C  7F                 	db	127
   708  00BB5D  09                 	db	9
   709  00BB5E  19                 	db	25
   710  00BB5F  29                 	db	41
   711  00BB60  46                 	db	70
   712  00BB61  26                 	db	38
   713  00BB62  49                 	db	73
   714  00BB63  49                 	db	73
   715  00BB64  49                 	db	73
   716  00BB65  32                 	db	50
   717  00BB66  01                 	db	1
   718  00BB67  01                 	db	1
   719  00BB68  7F                 	db	127
   720  00BB69  01                 	db	1
   721  00BB6A  01                 	db	1
   722  00BB6B  3F                 	db	63
   723  00BB6C  40                 	db	64
   724  00BB6D  40                 	db	64
   725  00BB6E  40                 	db	64
   726  00BB6F  3F                 	db	63
   727  00BB70  1F                 	db	31
   728  00BB71  20                 	db	32
   729  00BB72  40                 	db	64
   730  00BB73  20                 	db	32
   731  00BB74  1F                 	db	31
   732  00BB75  3F                 	db	63
   733  00BB76  40                 	db	64
   734  00BB77  38                 	db	56
   735  00BB78  40                 	db	64
   736  00BB79  3F                 	db	63
   737  00BB7A  63                 	db	99
   738  00BB7B  14                 	db	20
   739  00BB7C  08                 	db	8
   740  00BB7D  14                 	db	20
   741  00BB7E  63                 	db	99
   742  00BB7F  03                 	db	3
   743  00BB80  04                 	db	4
   744  00BB81  78                 	db	120
   745  00BB82  04                 	db	4
   746  00BB83  03                 	db	3
   747  00BB84  61                 	db	97
   748  00BB85  51                 	db	81
   749  00BB86  49                 	db	73
   750  00BB87  45                 	db	69
   751  00BB88  43                 	db	67
   752  00BB89  00                 	db	0
   753  00BB8A  7F                 	db	127
   754  00BB8B  41                 	db	65
   755  00BB8C  41                 	db	65
   756  00BB8D  00                 	db	0
   757  00BB8E  02                 	db	2
   758  00BB8F  04                 	db	4
   759  00BB90  08                 	db	8
   760  00BB91  10                 	db	16
   761  00BB92  20                 	db	32
   762  00BB93  00                 	db	0
   763  00BB94  41                 	db	65
   764  00BB95  41                 	db	65
   765  00BB96  7F                 	db	127
   766  00BB97  00                 	db	0
   767  00BB98  04                 	db	4
   768  00BB99  02                 	db	2
   769  00BB9A  01                 	db	1
   770  00BB9B  02                 	db	2
   771  00BB9C  04                 	db	4
   772  00BB9D  40                 	db	64
   773  00BB9E  40                 	db	64
   774  00BB9F  40                 	db	64
   775  00BBA0  40                 	db	64
   776  00BBA1  40                 	db	64
   777  00BBA2  00                 	db	0
   778  00BBA3  03                 	db	3
   779  00BBA4  07                 	db	7
   780  00BBA5  08                 	db	8
   781  00BBA6  00                 	db	0
   782  00BBA7  20                 	db	32
   783  00BBA8  54                 	db	84
   784  00BBA9  54                 	db	84
   785  00BBAA  78                 	db	120
   786  00BBAB  40                 	db	64
   787  00BBAC  7F                 	db	127
   788  00BBAD  28                 	db	40
   789  00BBAE  44                 	db	68
   790  00BBAF  44                 	db	68
   791  00BBB0  38                 	db	56
   792  00BBB1  38                 	db	56
   793  00BBB2  44                 	db	68
   794  00BBB3  44                 	db	68
   795  00BBB4  44                 	db	68
   796  00BBB5  28                 	db	40
   797  00BBB6  38                 	db	56
   798  00BBB7  44                 	db	68
   799  00BBB8  44                 	db	68
   800  00BBB9  28                 	db	40
   801  00BBBA  7F                 	db	127
   802  00BBBB  38                 	db	56
   803  00BBBC  54                 	db	84
   804  00BBBD  54                 	db	84
   805  00BBBE  54                 	db	84
   806  00BBBF  18                 	db	24
   807  00BBC0  08                 	db	8
   808  00BBC1  7E                 	db	126
   809  00BBC2  09                 	db	9
   810  00BBC3  02                 	db	2
   811  00BBC4  00                 	db	0
   812  00BBC5  18                 	db	24
   813  00BBC6  A4                 	db	164
   814  00BBC7  A4                 	db	164
   815  00BBC8  9C                 	db	156
   816  00BBC9  78                 	db	120
   817  00BBCA  7F                 	db	127
   818  00BBCB  08                 	db	8
   819  00BBCC  04                 	db	4
   820  00BBCD  04                 	db	4
   821  00BBCE  78                 	db	120
   822  00BBCF  00                 	db	0
   823  00BBD0  44                 	db	68
   824  00BBD1  7D                 	db	125
   825  00BBD2  40                 	db	64
   826  00BBD3  00                 	db	0
   827  00BBD4  20                 	db	32
   828  00BBD5  40                 	db	64
   829  00BBD6  40                 	db	64
   830  00BBD7  3D                 	db	61
   831  00BBD8  00                 	db	0
   832  00BBD9  7F                 	db	127
   833  00BBDA  10                 	db	16
   834  00BBDB  28                 	db	40
   835  00BBDC  44                 	db	68
   836  00BBDD  00                 	db	0
   837  00BBDE  00                 	db	0
   838  00BBDF  41                 	db	65
   839  00BBE0  7F                 	db	127
   840  00BBE1  40                 	db	64
   841  00BBE2  00                 	db	0
   842  00BBE3  7C                 	db	124
   843  00BBE4  04                 	db	4
   844  00BBE5  78                 	db	120
   845  00BBE6  04                 	db	4
   846  00BBE7  78                 	db	120
   847  00BBE8  7C                 	db	124
   848  00BBE9  08                 	db	8
   849  00BBEA  04                 	db	4
   850  00BBEB  04                 	db	4
   851  00BBEC  78                 	db	120
   852  00BBED  38                 	db	56
   853  00BBEE  44                 	db	68
   854  00BBEF  44                 	db	68
   855  00BBF0  44                 	db	68
   856  00BBF1  38                 	db	56
   857  00BBF2  FC                 	db	252
   858  00BBF3  18                 	db	24
   859  00BBF4  24                 	db	36
   860  00BBF5  24                 	db	36
   861  00BBF6  18                 	db	24
   862  00BBF7  18                 	db	24
   863  00BBF8  24                 	db	36
   864  00BBF9  24                 	db	36
   865  00BBFA  18                 	db	24
   866  00BBFB  FC                 	db	252
   867  00BBFC  7C                 	db	124
   868  00BBFD  04                 	db	4
   869  00BBFE  04                 	db	4
   870  00BBFF  08                 	db	8
   871  00BC00  00                 	db	0
   872  00BC01  48                 	db	72
   873  00BC02  54                 	db	84
   874  00BC03  54                 	db	84
   875  00BC04  54                 	db	84
   876  00BC05  24                 	db	36
   877  00BC06  00                 	db	0
   878  00BC07  04                 	db	4
   879  00BC08  3F                 	db	63
   880  00BC09  44                 	db	68
   881  00BC0A  20                 	db	32
   882  00BC0B  3C                 	db	60
   883  00BC0C  40                 	db	64
   884  00BC0D  40                 	db	64
   885  00BC0E  20                 	db	32
   886  00BC0F  7C                 	db	124
   887  00BC10  1C                 	db	28
   888  00BC11  20                 	db	32
   889  00BC12  40                 	db	64
   890  00BC13  20                 	db	32
   891  00BC14  1C                 	db	28
   892  00BC15  3C                 	db	60
   893  00BC16  40                 	db	64
   894  00BC17  30                 	db	48
   895  00BC18  40                 	db	64
   896  00BC19  3C                 	db	60
   897  00BC1A  44                 	db	68
   898  00BC1B  28                 	db	40
   899  00BC1C  10                 	db	16
   900  00BC1D  28                 	db	40
   901  00BC1E  44                 	db	68
   902  00BC1F  4C                 	db	76
   903  00BC20  90                 	db	144
   904  00BC21  90                 	db	144
   905  00BC22  90                 	db	144
   906  00BC23  7C                 	db	124
   907  00BC24  44                 	db	68
   908  00BC25  64                 	db	100
   909  00BC26  54                 	db	84
   910  00BC27  4C                 	db	76
   911  00BC28  44                 	db	68
   912  00BC29  00                 	db	0
   913  00BC2A  08                 	db	8
   914  00BC2B  36                 	db	54
   915  00BC2C  41                 	db	65
   916  00BC2D  00                 	db	0
   917  00BC2E  00                 	db	0
   918  00BC2F  00                 	db	0
   919  00BC30  77                 	db	119
   920  00BC31  00                 	db	0
   921  00BC32  00                 	db	0
   922  00BC33  00                 	db	0
   923  00BC34  41                 	db	65
   924  00BC35  36                 	db	54
   925  00BC36  08                 	db	8
   926  00BC37  00                 	db	0
   927  00BC38  02                 	db	2
   928  00BC39  01                 	db	1
   929  00BC3A  02                 	db	2
   930  00BC3B  04                 	db	4
   931  00BC3C  02                 	db	2
   932  00BC3D  00                 	db	0
   933  00BC3E  00                 	db	0
   934  00BC3F  00                 	db	0
   935  00BC40  00                 	db	0
   936  00BC41  00                 	db	0
   937  00BC42  00                 	db	0
   938  00BC43  00                 	db	0
   939  00BC44  00                 	db	0
   940  00BC45  00                 	db	0
   941  00BC46  00                 	db	0
   942  00BC47  00                 	db	0
   943  00BC48  00                 	db	0
   944  00BC49  00                 	db	0
   945  00BC4A  00                 	db	0
   946  00BC4B  00                 	db	0
   947  00BC4C  00                 	db	0
   948  00BC4D  00                 	db	0
   949  00BC4E  00                 	db	0
   950  00BC4F  00                 	db	0
   951  00BC50  00                 	db	0
   952  00BC51  00                 	db	0
   953  00BC52  00                 	db	0
   954  00BC53  00                 	db	0
   955  00BC54  00                 	db	0
   956  00BC55  00                 	db	0
   957  00BC56  00                 	db	0
   958  00BC57  00                 	db	0
   959  00BC58  00                 	db	0
   960  00BC59  00                 	db	0
   961  00BC5A  00                 	db	0
   962  00BC5B  40                 	db	64
   963  00BC5C  00                 	db	0
   964  00BC5D  40                 	db	64
   965  00BC5E  00                 	db	0
   966  00BC5F  40                 	db	64
   967  00BC60  00                 	db	0
   968  00BC61  00                 	db	0
   969  00BC62  00                 	db	0
   970  00BC63  00                 	db	0
   971  00BC64  00                 	db	0
   972  00BC65  00                 	db	0
   973  00BC66  00                 	db	0
   974  00BC67  00                 	db	0
   975  00BC68  00                 	db	0
   976  00BC69  00                 	db	0
   977  00BC6A  3E                 	db	62
   978  00BC6B  55                 	db	85
   979  00BC6C  55                 	db	85
   980  00BC6D  41                 	db	65
   981  00BC6E  22                 	db	34
   982  00BC6F  00                 	db	0
   983  00BC70  00                 	db	0
   984  00BC71  00                 	db	0
   985  00BC72  00                 	db	0
   986  00BC73  00                 	db	0
   987  00BC74  00                 	db	0
   988  00BC75  00                 	db	0
   989  00BC76  00                 	db	0
   990  00BC77  00                 	db	0
   991  00BC78  00                 	db	0
   992  00BC79  00                 	db	0
   993  00BC7A  00                 	db	0
   994  00BC7B  00                 	db	0
   995  00BC7C  00                 	db	0
   996  00BC7D  00                 	db	0
   997  00BC7E  00                 	db	0
   998  00BC7F  00                 	db	0
   999  00BC80  00                 	db	0
  1000  00BC81  00                 	db	0
  1001  00BC82  00                 	db	0
  1002  00BC83  00                 	db	0
  1003  00BC84  00                 	db	0
  1004  00BC85  00                 	db	0
  1005  00BC86  00                 	db	0
  1006  00BC87  00                 	db	0
  1007  00BC88  00                 	db	0
  1008  00BC89  00                 	db	0
  1009  00BC8A  00                 	db	0
  1010  00BC8B  00                 	db	0
  1011  00BC8C  00                 	db	0
  1012  00BC8D  00                 	db	0
  1013  00BC8E  00                 	db	0
  1014  00BC8F  00                 	db	0
  1015  00BC90  00                 	db	0
  1016  00BC91  00                 	db	0
  1017  00BC92  00                 	db	0
  1018  00BC93  00                 	db	0
  1019  00BC94  00                 	db	0
  1020  00BC95  00                 	db	0
  1021  00BC96  00                 	db	0
  1022  00BC97  00                 	db	0
  1023  00BC98  00                 	db	0
  1024  00BC99  00                 	db	0
  1025  00BC9A  00                 	db	0
  1026  00BC9B  00                 	db	0
  1027  00BC9C  00                 	db	0
  1028  00BC9D  00                 	db	0
  1029  00BC9E  00                 	db	0
  1030  00BC9F  00                 	db	0
  1031  00BCA0  00                 	db	0
  1032  00BCA1  00                 	db	0
  1033  00BCA2  00                 	db	0
  1034  00BCA3  00                 	db	0
  1035  00BCA4  00                 	db	0
  1036  00BCA5  00                 	db	0
  1037  00BCA6  00                 	db	0
  1038  00BCA7  00                 	db	0
  1039  00BCA8  00                 	db	0
  1040  00BCA9  00                 	db	0
  1041  00BCAA  00                 	db	0
  1042  00BCAB  00                 	db	0
  1043  00BCAC  0C                 	db	12
  1044  00BCAD  1E                 	db	30
  1045  00BCAE  1E                 	db	30
  1046  00BCAF  0C                 	db	12
  1047  00BCB0  00                 	db	0
  1048  00BCB1  00                 	db	0
  1049  00BCB2  00                 	db	0
  1050  00BCB3  00                 	db	0
  1051  00BCB4  00                 	db	0
  1052  00BCB5  00                 	db	0
  1053  00BCB6  00                 	db	0
  1054  00BCB7  00                 	db	0
  1055  00BCB8  00                 	db	0
  1056  00BCB9  00                 	db	0
  1057  00BCBA  00                 	db	0
  1058  00BCBB  00                 	db	0
  1059  00BCBC  00                 	db	0
  1060  00BCBD  00                 	db	0
  1061  00BCBE  00                 	db	0
  1062  00BCBF  00                 	db	0
  1063  00BCC0  00                 	db	0
  1064  00BCC1  00                 	db	0
  1065  00BCC2  00                 	db	0
  1066  00BCC3  00                 	db	0
  1067  00BCC4  00                 	db	0
  1068  00BCC5  00                 	db	0
  1069  00BCC6  00                 	db	0
  1070  00BCC7  00                 	db	0
  1071  00BCC8  00                 	db	0
  1072  00BCC9  00                 	db	0
  1073  00BCCA  00                 	db	0
  1074  00BCCB  00                 	db	0
  1075  00BCCC  00                 	db	0
  1076  00BCCD  00                 	db	0
  1077  00BCCE  00                 	db	0
  1078  00BCCF  00                 	db	0
  1079  00BCD0  00                 	db	0
  1080  00BCD1  00                 	db	0
  1081  00BCD2  00                 	db	0
  1082  00BCD3  00                 	db	0
  1083  00BCD4  00                 	db	0
  1084  00BCD5  00                 	db	0
  1085  00BCD6  00                 	db	0
  1086  00BCD7  00                 	db	0
  1087  00BCD8  00                 	db	0
  1088  00BCD9  00                 	db	0
  1089  00BCDA  00                 	db	0
  1090  00BCDB  00                 	db	0
  1091  00BCDC  00                 	db	0
  1092  00BCDD  00                 	db	0
  1093  00BCDE  00                 	db	0
  1094  00BCDF  00                 	db	0
  1095  00BCE0  00                 	db	0
  1096  00BCE1  00                 	db	0
  1097  00BCE2  00                 	db	0
  1098  00BCE3  00                 	db	0
  1099  00BCE4  00                 	db	0
  1100  00BCE5  00                 	db	0
  1101  00BCE6  00                 	db	0
  1102  00BCE7  00                 	db	0
  1103  00BCE8  00                 	db	0
  1104  00BCE9  00                 	db	0
  1105  00BCEA  00                 	db	0
  1106  00BCEB  00                 	db	0
  1107  00BCEC  00                 	db	0
  1108  00BCED  00                 	db	0
  1109  00BCEE  00                 	db	0
  1110  00BCEF  00                 	db	0
  1111  00BCF0  00                 	db	0
  1112  00BCF1  00                 	db	0
  1113  00BCF2  00                 	db	0
  1114  00BCF3  00                 	db	0
  1115  00BCF4  00                 	db	0
  1116  00BCF5  00                 	db	0
  1117  00BCF6  00                 	db	0
  1118  00BCF7  00                 	db	0
  1119  00BCF8  00                 	db	0
  1120  00BCF9  00                 	db	0
  1121  00BCFA  00                 	db	0
  1122  00BCFB  7E                 	db	126
  1123  00BCFC  02                 	db	2
  1124  00BCFD  02                 	db	2
  1125  00BCFE  02                 	db	2
  1126  00BCFF  03                 	db	3
  1127  00BD00  00                 	db	0
  1128  00BD01  00                 	db	0
  1129  00BD02  00                 	db	0
  1130  00BD03  00                 	db	0
  1131  00BD04  00                 	db	0
  1132  00BD05  00                 	db	0
  1133  00BD06  00                 	db	0
  1134  00BD07  00                 	db	0
  1135  00BD08  00                 	db	0
  1136  00BD09  00                 	db	0
  1137  00BD0A  7E                 	db	126
  1138  00BD0B  4B                 	db	75
  1139  00BD0C  4A                 	db	74
  1140  00BD0D  4B                 	db	75
  1141  00BD0E  42                 	db	66
  1142  00BD0F  00                 	db	0
  1143  00BD10  00                 	db	0
  1144  00BD11  00                 	db	0
  1145  00BD12  00                 	db	0
  1146  00BD13  00                 	db	0
  1147  00BD14  3E                 	db	62
  1148  00BD15  49                 	db	73
  1149  00BD16  49                 	db	73
  1150  00BD17  49                 	db	73
  1151  00BD18  22                 	db	34
  1152  00BD19  00                 	db	0
  1153  00BD1A  00                 	db	0
  1154  00BD1B  00                 	db	0
  1155  00BD1C  00                 	db	0
  1156  00BD1D  00                 	db	0
  1157  00BD1E  00                 	db	0
  1158  00BD1F  00                 	db	0
  1159  00BD20  00                 	db	0
  1160  00BD21  00                 	db	0
  1161  00BD22  00                 	db	0
  1162  00BD23  00                 	db	0
  1163  00BD24  00                 	db	0
  1164  00BD25  00                 	db	0
  1165  00BD26  00                 	db	0
  1166  00BD27  00                 	db	0
  1167  00BD28  00                 	db	0
  1168  00BD29  00                 	db	0
  1169  00BD2A  00                 	db	0
  1170  00BD2B  00                 	db	0
  1171  00BD2C  00                 	db	0
  1172  00BD2D  00                 	db	0
  1173  00BD2E  41                 	db	65
  1174  00BD2F  7E                 	db	126
  1175  00BD30  41                 	db	65
  1176  00BD31  00                 	db	0
  1177  00BD32  00                 	db	0
  1178  00BD33  06                 	db	6
  1179  00BD34  09                 	db	9
  1180  00BD35  09                 	db	9
  1181  00BD36  06                 	db	6
  1182  00BD37  44                 	db	68
  1183  00BD38  44                 	db	68
  1184  00BD39  5F                 	db	95
  1185  00BD3A  44                 	db	68
  1186  00BD3B  44                 	db	68
  1187  00BD3C  00                 	db	0
  1188  00BD3D  41                 	db	65
  1189  00BD3E  7F                 	db	127
  1190  00BD3F  41                 	db	65
  1191  00BD40  00                 	db	0
  1192  00BD41  00                 	db	0
  1193  00BD42  44                 	db	68
  1194  00BD43  7D                 	db	125
  1195  00BD44  40                 	db	64
  1196  00BD45  00                 	db	0
  1197  00BD46  00                 	db	0
  1198  00BD47  7C                 	db	124
  1199  00BD48  04                 	db	4
  1200  00BD49  04                 	db	4
  1201  00BD4A  06                 	db	6
  1202  00BD4B  00                 	db	0
  1203  00BD4C  00                 	db	0
  1204  00BD4D  00                 	db	0
  1205  00BD4E  00                 	db	0
  1206  00BD4F  00                 	db	0
  1207  00BD50  00                 	db	0
  1208  00BD51  00                 	db	0
  1209  00BD52  00                 	db	0
  1210  00BD53  00                 	db	0
  1211  00BD54  00                 	db	0
  1212  00BD55  00                 	db	0
  1213  00BD56  00                 	db	0
  1214  00BD57  00                 	db	0
  1215  00BD58  00                 	db	0
  1216  00BD59  00                 	db	0
  1217  00BD5A  38                 	db	56
  1218  00BD5B  55                 	db	85
  1219  00BD5C  54                 	db	84
  1220  00BD5D  55                 	db	85
  1221  00BD5E  18                 	db	24
  1222  00BD5F  00                 	db	0
  1223  00BD60  00                 	db	0
  1224  00BD61  00                 	db	0
  1225  00BD62  00                 	db	0
  1226  00BD63  00                 	db	0
  1227  00BD64  38                 	db	56
  1228  00BD65  54                 	db	84
  1229  00BD66  54                 	db	84
  1230  00BD67  54                 	db	84
  1231  00BD68  44                 	db	68
  1232  00BD69  22                 	db	34
  1233  00BD6A  14                 	db	20
  1234  00BD6B  2A                 	db	42
  1235  00BD6C  14                 	db	20
  1236  00BD6D  08                 	db	8
  1237  00BD6E  20                 	db	32
  1238  00BD6F  40                 	db	64
  1239  00BD70  40                 	db	64
  1240  00BD71  3D                 	db	61
  1241  00BD72  00                 	db	0
  1242  00BD73  00                 	db	0
  1243  00BD74  00                 	db	0
  1244  00BD75  00                 	db	0
  1245  00BD76  00                 	db	0
  1246  00BD77  00                 	db	0
  1247  00BD78  00                 	db	0
  1248  00BD79  00                 	db	0
  1249  00BD7A  00                 	db	0
  1250  00BD7B  00                 	db	0
  1251  00BD7C  00                 	db	0
  1252  00BD7D  00                 	db	0
  1253  00BD7E  45                 	db	69
  1254  00BD7F  7C                 	db	124
  1255  00BD80  41                 	db	65
  1256  00BD81  00                 	db	0
  1257  00BD82  7E                 	db	126
  1258  00BD83  11                 	db	17
  1259  00BD84  11                 	db	17
  1260  00BD85  11                 	db	17
  1261  00BD86  7E                 	db	126
  1262  00BD87  7F                 	db	127
  1263  00BD88  49                 	db	73
  1264  00BD89  49                 	db	73
  1265  00BD8A  49                 	db	73
  1266  00BD8B  31                 	db	49
  1267  00BD8C  7F                 	db	127
  1268  00BD8D  49                 	db	73
  1269  00BD8E  49                 	db	73
  1270  00BD8F  49                 	db	73
  1271  00BD90  36                 	db	54
  1272  00BD91  7F                 	db	127
  1273  00BD92  01                 	db	1
  1274  00BD93  01                 	db	1
  1275  00BD94  01                 	db	1
  1276  00BD95  01                 	db	1
  1277  00BD96  C0                 	db	192
  1278  00BD97  7E                 	db	126
  1279  00BD98  41                 	db	65
  1280  00BD99  7E                 	db	126
  1281  00BD9A  C0                 	db	192
  1282  00BD9B  7F                 	db	127
  1283  00BD9C  49                 	db	73
  1284  00BD9D  49                 	db	73
  1285  00BD9E  49                 	db	73
  1286  00BD9F  41                 	db	65
  1287  00BDA0  77                 	db	119
  1288  00BDA1  08                 	db	8
  1289  00BDA2  7F                 	db	127
  1290  00BDA3  08                 	db	8
  1291  00BDA4  77                 	db	119
  1292  00BDA5  22                 	db	34
  1293  00BDA6  41                 	db	65
  1294  00BDA7  49                 	db	73
  1295  00BDA8  49                 	db	73
  1296  00BDA9  36                 	db	54
  1297  00BDAA  7F                 	db	127
  1298  00BDAB  10                 	db	16
  1299  00BDAC  08                 	db	8
  1300  00BDAD  04                 	db	4
  1301  00BDAE  7F                 	db	127
  1302  00BDAF  7E                 	db	126
  1303  00BDB0  11                 	db	17
  1304  00BDB1  09                 	db	9
  1305  00BDB2  05                 	db	5
  1306  00BDB3  7E                 	db	126
  1307  00BDB4  7F                 	db	127
  1308  00BDB5  08                 	db	8
  1309  00BDB6  14                 	db	20
  1310  00BDB7  22                 	db	34
  1311  00BDB8  41                 	db	65
  1312  00BDB9  40                 	db	64
  1313  00BDBA  7E                 	db	126
  1314  00BDBB  01                 	db	1
  1315  00BDBC  01                 	db	1
  1316  00BDBD  7F                 	db	127
  1317  00BDBE  7F                 	db	127
  1318  00BDBF  02                 	db	2
  1319  00BDC0  0C                 	db	12
  1320  00BDC1  02                 	db	2
  1321  00BDC2  7F                 	db	127
  1322  00BDC3  7F                 	db	127
  1323  00BDC4  08                 	db	8
  1324  00BDC5  08                 	db	8
  1325  00BDC6  08                 	db	8
  1326  00BDC7  7F                 	db	127
  1327  00BDC8  3E                 	db	62
  1328  00BDC9  41                 	db	65
  1329  00BDCA  41                 	db	65
  1330  00BDCB  41                 	db	65
  1331  00BDCC  3E                 	db	62
  1332  00BDCD  7F                 	db	127
  1333  00BDCE  01                 	db	1
  1334  00BDCF  01                 	db	1
  1335  00BDD0  01                 	db	1
  1336  00BDD1  7F                 	db	127
  1337  00BDD2  7F                 	db	127
  1338  00BDD3  09                 	db	9
  1339  00BDD4  09                 	db	9
  1340  00BDD5  09                 	db	9
  1341  00BDD6  06                 	db	6
  1342  00BDD7  3E                 	db	62
  1343  00BDD8  41                 	db	65
  1344  00BDD9  41                 	db	65
  1345  00BDDA  41                 	db	65
  1346  00BDDB  22                 	db	34
  1347  00BDDC  01                 	db	1
  1348  00BDDD  01                 	db	1
  1349  00BDDE  7F                 	db	127
  1350  00BDDF  01                 	db	1
  1351  00BDE0  01                 	db	1
  1352  00BDE1  27                 	db	39
  1353  00BDE2  48                 	db	72
  1354  00BDE3  48                 	db	72
  1355  00BDE4  48                 	db	72
  1356  00BDE5  3F                 	db	63
  1357  00BDE6  0E                 	db	14
  1358  00BDE7  11                 	db	17
  1359  00BDE8  7F                 	db	127
  1360  00BDE9  11                 	db	17
  1361  00BDEA  0E                 	db	14
  1362  00BDEB  63                 	db	99
  1363  00BDEC  14                 	db	20
  1364  00BDED  08                 	db	8
  1365  00BDEE  14                 	db	20
  1366  00BDEF  63                 	db	99
  1367  00BDF0  7F                 	db	127
  1368  00BDF1  40                 	db	64
  1369  00BDF2  40                 	db	64
  1370  00BDF3  7F                 	db	127
  1371  00BDF4  C0                 	db	192
  1372  00BDF5  07                 	db	7
  1373  00BDF6  08                 	db	8
  1374  00BDF7  08                 	db	8
  1375  00BDF8  08                 	db	8
  1376  00BDF9  7F                 	db	127
  1377  00BDFA  7F                 	db	127
  1378  00BDFB  40                 	db	64
  1379  00BDFC  7E                 	db	126
  1380  00BDFD  40                 	db	64
  1381  00BDFE  7F                 	db	127
  1382  00BDFF  7F                 	db	127
  1383  00BE00  40                 	db	64
  1384  00BE01  7E                 	db	126
  1385  00BE02  40                 	db	64
  1386  00BE03  FF                 	db	255
  1387  00BE04  01                 	db	1
  1388  00BE05  7F                 	db	127
  1389  00BE06  44                 	db	68
  1390  00BE07  44                 	db	68
  1391  00BE08  38                 	db	56
  1392  00BE09  7F                 	db	127
  1393  00BE0A  44                 	db	68
  1394  00BE0B  38                 	db	56
  1395  00BE0C  00                 	db	0
  1396  00BE0D  7F                 	db	127
  1397  00BE0E  7F                 	db	127
  1398  00BE0F  44                 	db	68
  1399  00BE10  44                 	db	68
  1400  00BE11  44                 	db	68
  1401  00BE12  38                 	db	56
  1402  00BE13  22                 	db	34
  1403  00BE14  41                 	db	65
  1404  00BE15  49                 	db	73
  1405  00BE16  49                 	db	73
  1406  00BE17  3E                 	db	62
  1407  00BE18  7F                 	db	127
  1408  00BE19  08                 	db	8
  1409  00BE1A  3E                 	db	62
  1410  00BE1B  41                 	db	65
  1411  00BE1C  3E                 	db	62
  1412  00BE1D  46                 	db	70
  1413  00BE1E  29                 	db	41
  1414  00BE1F  19                 	db	25
  1415  00BE20  09                 	db	9
  1416  00BE21  7F                 	db	127
  1417  00BE22  20                 	db	32
  1418  00BE23  54                 	db	84
  1419  00BE24  54                 	db	84
  1420  00BE25  54                 	db	84
  1421  00BE26  78                 	db	120
  1422  00BE27  3C                 	db	60
  1423  00BE28  4A                 	db	74
  1424  00BE29  4A                 	db	74
  1425  00BE2A  4A                 	db	74
  1426  00BE2B  31                 	db	49
  1427  00BE2C  7C                 	db	124
  1428  00BE2D  54                 	db	84
  1429  00BE2E  54                 	db	84
  1430  00BE2F  54                 	db	84
  1431  00BE30  28                 	db	40
  1432  00BE31  00                 	db	0
  1433  00BE32  7C                 	db	124
  1434  00BE33  04                 	db	4
  1435  00BE34  04                 	db	4
  1436  00BE35  04                 	db	4
  1437  00BE36  C0                 	db	192
  1438  00BE37  78                 	db	120
  1439  00BE38  44                 	db	68
  1440  00BE39  7C                 	db	124
  1441  00BE3A  C0                 	db	192
  1442  00BE3B  38                 	db	56
  1443  00BE3C  54                 	db	84
  1444  00BE3D  54                 	db	84
  1445  00BE3E  54                 	db	84
  1446  00BE3F  18                 	db	24
  1447  00BE40  6C                 	db	108
  1448  00BE41  10                 	db	16
  1449  00BE42  7C                 	db	124
  1450  00BE43  10                 	db	16
  1451  00BE44  6C                 	db	108
  1452  00BE45  28                 	db	40
  1453  00BE46  44                 	db	68
  1454  00BE47  54                 	db	84
  1455  00BE48  54                 	db	84
  1456  00BE49  28                 	db	40
  1457  00BE4A  7C                 	db	124
  1458  00BE4B  20                 	db	32
  1459  00BE4C  10                 	db	16
  1460  00BE4D  08                 	db	8
  1461  00BE4E  7C                 	db	124
  1462  00BE4F  7C                 	db	124
  1463  00BE50  21                 	db	33
  1464  00BE51  11                 	db	17
  1465  00BE52  09                 	db	9
  1466  00BE53  7C                 	db	124
  1467  00BE54  7C                 	db	124
  1468  00BE55  10                 	db	16
  1469  00BE56  10                 	db	16
  1470  00BE57  28                 	db	40
  1471  00BE58  44                 	db	68
  1472  00BE59  40                 	db	64
  1473  00BE5A  38                 	db	56
  1474  00BE5B  04                 	db	4
  1475  00BE5C  04                 	db	4
  1476  00BE5D  7C                 	db	124
  1477  00BE5E  7C                 	db	124
  1478  00BE5F  08                 	db	8
  1479  00BE60  10                 	db	16
  1480  00BE61  08                 	db	8
  1481  00BE62  7C                 	db	124
  1482  00BE63  7C                 	db	124
  1483  00BE64  10                 	db	16
  1484  00BE65  10                 	db	16
  1485  00BE66  10                 	db	16
  1486  00BE67  7C                 	db	124
  1487  00BE68  38                 	db	56
  1488  00BE69  44                 	db	68
  1489  00BE6A  44                 	db	68
  1490  00BE6B  44                 	db	68
  1491  00BE6C  38                 	db	56
  1492  00BE6D  7C                 	db	124
  1493  00BE6E  04                 	db	4
  1494  00BE6F  04                 	db	4
  1495  00BE70  04                 	db	4
  1496  00BE71  7C                 	db	124
  1497  00BE72  7C                 	db	124
  1498  00BE73  14                 	db	20
  1499  00BE74  14                 	db	20
  1500  00BE75  14                 	db	20
  1501  00BE76  08                 	db	8
  1502  00BE77  38                 	db	56
  1503  00BE78  44                 	db	68
  1504  00BE79  44                 	db	68
  1505  00BE7A  44                 	db	68
  1506  00BE7B  28                 	db	40
  1507  00BE7C  04                 	db	4
  1508  00BE7D  04                 	db	4
  1509  00BE7E  7C                 	db	124
  1510  00BE7F  04                 	db	4
  1511  00BE80  04                 	db	4
  1512  00BE81  4C                 	db	76
  1513  00BE82  50                 	db	80
  1514  00BE83  50                 	db	80
  1515  00BE84  50                 	db	80
  1516  00BE85  3C                 	db	60
  1517  00BE86  18                 	db	24
  1518  00BE87  24                 	db	36
  1519  00BE88  7C                 	db	124
  1520  00BE89  24                 	db	36
  1521  00BE8A  18                 	db	24
  1522  00BE8B  00                 	db	0
  1523  00BE8C  6C                 	db	108
  1524  00BE8D  10                 	db	16
  1525  00BE8E  10                 	db	16
  1526  00BE8F  6C                 	db	108
  1527  00BE90  7C                 	db	124
  1528  00BE91  40                 	db	64
  1529  00BE92  40                 	db	64
  1530  00BE93  7C                 	db	124
  1531  00BE94  C0                 	db	192
  1532  00BE95  0C                 	db	12
  1533  00BE96  10                 	db	16
  1534  00BE97  10                 	db	16
  1535  00BE98  10                 	db	16
  1536  00BE99  7C                 	db	124
  1537  00BE9A  7C                 	db	124
  1538  00BE9B  40                 	db	64
  1539  00BE9C  78                 	db	120
  1540  00BE9D  40                 	db	64
  1541  00BE9E  7C                 	db	124
  1542  00BE9F  7C                 	db	124
  1543  00BEA0  40                 	db	64
  1544  00BEA1  78                 	db	120
  1545  00BEA2  40                 	db	64
  1546  00BEA3  FC                 	db	252
  1547  00BEA4  04                 	db	4
  1548  00BEA5  7C                 	db	124
  1549  00BEA6  50                 	db	80
  1550  00BEA7  50                 	db	80
  1551  00BEA8  20                 	db	32
  1552  00BEA9  7C                 	db	124
  1553  00BEAA  50                 	db	80
  1554  00BEAB  20                 	db	32
  1555  00BEAC  00                 	db	0
  1556  00BEAD  7C                 	db	124
  1557  00BEAE  00                 	db	0
  1558  00BEAF  7C                 	db	124
  1559  00BEB0  50                 	db	80
  1560  00BEB1  50                 	db	80
  1561  00BEB2  20                 	db	32
  1562  00BEB3  44                 	db	68
  1563  00BEB4  54                 	db	84
  1564  00BEB5  54                 	db	84
  1565  00BEB6  54                 	db	84
  1566  00BEB7  38                 	db	56
  1567  00BEB8  7C                 	db	124
  1568  00BEB9  10                 	db	16
  1569  00BEBA  38                 	db	56
  1570  00BEBB  44                 	db	68
  1571  00BEBC  38                 	db	56
  1572  00BEBD  48                 	db	72
  1573  00BEBE  54                 	db	84
  1574  00BEBF  34                 	db	52
  1575  00BEC0  14                 	db	20
  1576  00BEC1  7C                 	db	124
  1577  00BEC2                     __end_of_Font:
  1578                           	opt stack 0
  1579  00BEC2                     _dFont5:
  1580                           	opt stack 0
  1581  00BEC2  3E                 	db	62
  1582  00BEC3  41                 	db	65
  1583  00BEC4  41                 	db	65
  1584  00BEC5  7F                 	db	127
  1585  00BEC6  3E                 	db	62
  1586  00BEC7  00                 	db	0
  1587  00BEC8  02                 	db	2
  1588  00BEC9  7F                 	db	127
  1589  00BECA  7F                 	db	127
  1590  00BECB  00                 	db	0
  1591  00BECC  62                 	db	98
  1592  00BECD  73                 	db	115
  1593  00BECE  59                 	db	89
  1594  00BECF  4F                 	db	79
  1595  00BED0  46                 	db	70
  1596  00BED1  22                 	db	34
  1597  00BED2  63                 	db	99
  1598  00BED3  49                 	db	73
  1599  00BED4  7F                 	db	127
  1600  00BED5  36                 	db	54
  1601  00BED6  18                 	db	24
  1602  00BED7  14                 	db	20
  1603  00BED8  12                 	db	18
  1604  00BED9  7F                 	db	127
  1605  00BEDA  7F                 	db	127
  1606  00BEDB  2F                 	db	47
  1607  00BEDC  45                 	db	69
  1608  00BEDD  45                 	db	69
  1609  00BEDE  7D                 	db	125
  1610  00BEDF  39                 	db	57
  1611  00BEE0  3E                 	db	62
  1612  00BEE1  49                 	db	73
  1613  00BEE2  49                 	db	73
  1614  00BEE3  7B                 	db	123
  1615  00BEE4  32                 	db	50
  1616  00BEE5  03                 	db	3
  1617  00BEE6  71                 	db	113
  1618  00BEE7  79                 	db	121
  1619  00BEE8  0F                 	db	15
  1620  00BEE9  07                 	db	7
  1621  00BEEA  36                 	db	54
  1622  00BEEB  49                 	db	73
  1623  00BEEC  49                 	db	73
  1624  00BEED  7F                 	db	127
  1625  00BEEE  36                 	db	54
  1626  00BEEF  26                 	db	38
  1627  00BEF0  49                 	db	73
  1628  00BEF1  49                 	db	73
  1629  00BEF2  7F                 	db	127
  1630  00BEF3  3E                 	db	62
  1631  00BEF4                     __end_of_dFont5:
  1632                           	opt stack 0
  1633  00BEF4                     _dFont4:
  1634                           	opt stack 0
  1635  00BEF4  3E                 	db	62
  1636  00BEF5  7F                 	db	127
  1637  00BEF6  41                 	db	65
  1638  00BEF7  7F                 	db	127
  1639  00BEF8  3E                 	db	62
  1640  00BEF9  00                 	db	0
  1641  00BEFA  02                 	db	2
  1642  00BEFB  7F                 	db	127
  1643  00BEFC  7F                 	db	127
  1644  00BEFD  00                 	db	0
  1645  00BEFE  62                 	db	98
  1646  00BEFF  73                 	db	115
  1647  00BF00  59                 	db	89
  1648  00BF01  4F                 	db	79
  1649  00BF02  46                 	db	70
  1650  00BF03  22                 	db	34
  1651  00BF04  63                 	db	99
  1652  00BF05  49                 	db	73
  1653  00BF06  7F                 	db	127
  1654  00BF07  36                 	db	54
  1655  00BF08  18                 	db	24
  1656  00BF09  14                 	db	20
  1657  00BF0A  12                 	db	18
  1658  00BF0B  7F                 	db	127
  1659  00BF0C  7F                 	db	127
  1660  00BF0D  2F                 	db	47
  1661  00BF0E  6F                 	db	111
  1662  00BF0F  45                 	db	69
  1663  00BF10  7D                 	db	125
  1664  00BF11  39                 	db	57
  1665  00BF12  3E                 	db	62
  1666  00BF13  7F                 	db	127
  1667  00BF14  49                 	db	73
  1668  00BF15  7B                 	db	123
  1669  00BF16  32                 	db	50
  1670  00BF17  03                 	db	3
  1671  00BF18  73                 	db	115
  1672  00BF19  79                 	db	121
  1673  00BF1A  0F                 	db	15
  1674  00BF1B  07                 	db	7
  1675  00BF1C  36                 	db	54
  1676  00BF1D  7F                 	db	127
  1677  00BF1E  49                 	db	73
  1678  00BF1F  7F                 	db	127
  1679  00BF20  36                 	db	54
  1680  00BF21  26                 	db	38
  1681  00BF22  6F                 	db	111
  1682  00BF23  49                 	db	73
  1683  00BF24  7F                 	db	127
  1684  00BF25  3E                 	db	62
  1685  00BF26                     __end_of_dFont4:
  1686                           	opt stack 0
  1687  00BF26                     _dFont3:
  1688                           	opt stack 0
  1689  00BF26  7F                 	db	127
  1690  00BF27  41                 	db	65
  1691  00BF28  41                 	db	65
  1692  00BF29  7F                 	db	127
  1693  00BF2A  7F                 	db	127
  1694  00BF2B  00                 	db	0
  1695  00BF2C  01                 	db	1
  1696  00BF2D  7F                 	db	127
  1697  00BF2E  7F                 	db	127
  1698  00BF2F  00                 	db	0
  1699  00BF30  71                 	db	113
  1700  00BF31  51                 	db	81
  1701  00BF32  51                 	db	81
  1702  00BF33  5F                 	db	95
  1703  00BF34  5F                 	db	95
  1704  00BF35  41                 	db	65
  1705  00BF36  49                 	db	73
  1706  00BF37  49                 	db	73
  1707  00BF38  7F                 	db	127
  1708  00BF39  7F                 	db	127
  1709  00BF3A  1F                 	db	31
  1710  00BF3B  10                 	db	16
  1711  00BF3C  10                 	db	16
  1712  00BF3D  7F                 	db	127
  1713  00BF3E  7F                 	db	127
  1714  00BF3F  4F                 	db	79
  1715  00BF40  49                 	db	73
  1716  00BF41  49                 	db	73
  1717  00BF42  79                 	db	121
  1718  00BF43  79                 	db	121
  1719  00BF44  7F                 	db	127
  1720  00BF45  49                 	db	73
  1721  00BF46  49                 	db	73
  1722  00BF47  79                 	db	121
  1723  00BF48  79                 	db	121
  1724  00BF49  01                 	db	1
  1725  00BF4A  01                 	db	1
  1726  00BF4B  01                 	db	1
  1727  00BF4C  7F                 	db	127
  1728  00BF4D  7F                 	db	127
  1729  00BF4E  7F                 	db	127
  1730  00BF4F  49                 	db	73
  1731  00BF50  49                 	db	73
  1732  00BF51  7F                 	db	127
  1733  00BF52  7F                 	db	127
  1734  00BF53  4F                 	db	79
  1735  00BF54  49                 	db	73
  1736  00BF55  49                 	db	73
  1737  00BF56  7F                 	db	127
  1738  00BF57  7F                 	db	127
  1739  00BF58                     __end_of_dFont3:
  1740                           	opt stack 0
  1741  00BF58                     _dFont2:
  1742                           	opt stack 0
  1743  00BF58  7F                 	db	127
  1744  00BF59  7F                 	db	127
  1745  00BF5A  41                 	db	65
  1746  00BF5B  7F                 	db	127
  1747  00BF5C  7F                 	db	127
  1748  00BF5D  00                 	db	0
  1749  00BF5E  01                 	db	1
  1750  00BF5F  7F                 	db	127
  1751  00BF60  7F                 	db	127
  1752  00BF61  00                 	db	0
  1753  00BF62  73                 	db	115
  1754  00BF63  73                 	db	115
  1755  00BF64  51                 	db	81
  1756  00BF65  5F                 	db	95
  1757  00BF66  5F                 	db	95
  1758  00BF67  63                 	db	99
  1759  00BF68  6B                 	db	107
  1760  00BF69  49                 	db	73
  1761  00BF6A  7F                 	db	127
  1762  00BF6B  7F                 	db	127
  1763  00BF6C  1F                 	db	31
  1764  00BF6D  1F                 	db	31
  1765  00BF6E  10                 	db	16
  1766  00BF6F  7F                 	db	127
  1767  00BF70  7F                 	db	127
  1768  00BF71  6F                 	db	111
  1769  00BF72  6F                 	db	111
  1770  00BF73  49                 	db	73
  1771  00BF74  79                 	db	121
  1772  00BF75  79                 	db	121
  1773  00BF76  7F                 	db	127
  1774  00BF77  7F                 	db	127
  1775  00BF78  49                 	db	73
  1776  00BF79  7B                 	db	123
  1777  00BF7A  7B                 	db	123
  1778  00BF7B  03                 	db	3
  1779  00BF7C  73                 	db	115
  1780  00BF7D  79                 	db	121
  1781  00BF7E  0F                 	db	15
  1782  00BF7F  07                 	db	7
  1783  00BF80  7F                 	db	127
  1784  00BF81  7F                 	db	127
  1785  00BF82  49                 	db	73
  1786  00BF83  7F                 	db	127
  1787  00BF84  7F                 	db	127
  1788  00BF85  6F                 	db	111
  1789  00BF86  6F                 	db	111
  1790  00BF87  49                 	db	73
  1791  00BF88  7F                 	db	127
  1792  00BF89  7F                 	db	127
  1793  00BF8A                     __end_of_dFont2:
  1794                           	opt stack 0
  1795  00BF8A                     _dFont1:
  1796                           	opt stack 0
  1797  00BF8A  7F                 	db	127
  1798  00BF8B  7F                 	db	127
  1799  00BF8C  41                 	db	65
  1800  00BF8D  7F                 	db	127
  1801  00BF8E  7F                 	db	127
  1802  00BF8F  00                 	db	0
  1803  00BF90  01                 	db	1
  1804  00BF91  7F                 	db	127
  1805  00BF92  7F                 	db	127
  1806  00BF93  00                 	db	0
  1807  00BF94  61                 	db	97
  1808  00BF95  71                 	db	113
  1809  00BF96  59                 	db	89
  1810  00BF97  4F                 	db	79
  1811  00BF98  47                 	db	71
  1812  00BF99  41                 	db	65
  1813  00BF9A  49                 	db	73
  1814  00BF9B  49                 	db	73
  1815  00BF9C  7F                 	db	127
  1816  00BF9D  7F                 	db	127
  1817  00BF9E  1F                 	db	31
  1818  00BF9F  1F                 	db	31
  1819  00BFA0  10                 	db	16
  1820  00BFA1  7F                 	db	127
  1821  00BFA2  7F                 	db	127
  1822  00BFA3  4F                 	db	79
  1823  00BFA4  4F                 	db	79
  1824  00BFA5  49                 	db	73
  1825  00BFA6  79                 	db	121
  1826  00BFA7  79                 	db	121
  1827  00BFA8  7F                 	db	127
  1828  00BFA9  7F                 	db	127
  1829  00BFAA  49                 	db	73
  1830  00BFAB  79                 	db	121
  1831  00BFAC  79                 	db	121
  1832  00BFAD  01                 	db	1
  1833  00BFAE  71                 	db	113
  1834  00BFAF  79                 	db	121
  1835  00BFB0  0F                 	db	15
  1836  00BFB1  07                 	db	7
  1837  00BFB2  7F                 	db	127
  1838  00BFB3  7F                 	db	127
  1839  00BFB4  49                 	db	73
  1840  00BFB5  7F                 	db	127
  1841  00BFB6  7F                 	db	127
  1842  00BFB7  5F                 	db	95
  1843  00BFB8  5F                 	db	95
  1844  00BFB9  51                 	db	81
  1845  00BFBA  7F                 	db	127
  1846  00BFBB  7F                 	db	127
  1847  00BFBC                     __end_of_dFont1:
  1848                           	opt stack 0
  1849  00BFBC                     _FontS:
  1850                           	opt stack 0
  1851  00BFBC  00                 	db	0
  1852  00BFBD  00                 	db	0
  1853  00BFBE  00                 	db	0
  1854  00BFBF  7C                 	db	124
  1855  00BFC0  44                 	db	68
  1856  00BFC1  7C                 	db	124
  1857  00BFC2  00                 	db	0
  1858  00BFC3  7C                 	db	124
  1859  00BFC4  00                 	db	0
  1860  00BFC5  74                 	db	116
  1861  00BFC6  54                 	db	84
  1862  00BFC7  5C                 	db	92
  1863  00BFC8  54                 	db	84
  1864  00BFC9  54                 	db	84
  1865  00BFCA  7C                 	db	124
  1866  00BFCB  1C                 	db	28
  1867  00BFCC  10                 	db	16
  1868  00BFCD  7C                 	db	124
  1869  00BFCE  5C                 	db	92
  1870  00BFCF  54                 	db	84
  1871  00BFD0  74                 	db	116
  1872  00BFD1  7C                 	db	124
  1873  00BFD2  54                 	db	84
  1874  00BFD3  74                 	db	116
  1875  00BFD4  04                 	db	4
  1876  00BFD5  04                 	db	4
  1877  00BFD6  7C                 	db	124
  1878  00BFD7  7C                 	db	124
  1879  00BFD8  54                 	db	84
  1880  00BFD9  7C                 	db	124
  1881  00BFDA  5C                 	db	92
  1882  00BFDB  54                 	db	84
  1883  00BFDC  7C                 	db	124
  1884  00BFDD                     __end_of_FontS:
  1885                           	opt stack 0
  1886  00BFDD                     _OSS:
  1887                           	opt stack 0
  1888  00BFDD  03                 	db	3
  1889  00BFDE                     __end_of_OSS:
  1890                           	opt stack 0
  1891  0000                     _TMR0	set	4054
  1892  0000                     _EECON2	set	4007
  1893  0000                     _EEDATA	set	4008
  1894  0000                     _EEADR	set	4009
  1895  0000                     _EECON1bits	set	4006
  1896  0000                     _SPBRG	set	4015
  1897  0000                     _SPBRGH	set	4016
  1898  0000                     _BAUDCONbits	set	4024
  1899  0000                     _RCSTAbits	set	4011
  1900  0000                     _TXSTAbits	set	4012
  1901  0000                     _TRISCbits	set	3988
  1902  0000                     _PORTB	set	3969
  1903  0000                     _T3CONbits	set	4017
  1904  0000                     _T1CONbits	set	4045
  1905  0000                     _LATDbits	set	3980
  1906  0000                     _TMR3L	set	4018
  1907  0000                     _TMR3H	set	4019
  1908  0000                     _PIR2bits	set	4001
  1909  0000                     _PIE2bits	set	4000
  1910  0000                     _TMR1L	set	4046
  1911  0000                     _TMR1H	set	4047
  1912  0000                     _PIR1bits	set	3998
  1913  0000                     _PIE1bits	set	3997
  1914  0000                     _T0CON	set	4053
  1915  0000                     _SSPBUF	set	4041
  1916  0000                     _SSPCON2	set	4037
  1917  0000                     _SSPADD	set	4040
  1918  0000                     _SSPSTAT	set	4039
  1919  0000                     _SSPCON1	set	4038
  1920  0000                     _PORTCbits	set	3970
  1921  0000                     _INTCON2bits	set	4081
  1922  0000                     _TRISD	set	3989
  1923  0000                     _LATD	set	3980
  1924  0000                     _INTCON2	set	4081
  1925  0000                     _TRISB	set	3987
  1926  0000                     _LATB	set	3978
  1927  0000                     _TRISC	set	3988
  1928  0000                     _LATC	set	3979
  1929  0000                     _INTCONbits	set	4082
  1930  0000                     _ACKEN	set	32300
  1931  0000                     _ACKDT	set	32301
  1932  0000                     _RCEN	set	32299
  1933  0000                     _RSEN	set	32297
  1934  0000                     _SEN	set	32296
  1935  0000                     _PEN	set	32298
  1936  00BFDE  43                 	db	67	;'C'
  1937  00BFDF  6C                 	db	108	;'l'
  1938  00BFE0  6F                 	db	111	;'o'
  1939  00BFE1  63                 	db	99	;'c'
  1940  00BFE2  6B                 	db	107	;'k'
  1941  00BFE3  20                 	db	32
  1942  00BFE4  76                 	db	118	;'v'
  1943  00BFE5  31                 	db	49	;'1'
  1944  00BFE6  2E                 	db	46
  1945  00BFE7  30                 	db	48	;'0'
  1946  00BFE8  20                 	db	32
  1947  00BFE9  62                 	db	98	;'b'
  1948  00BFEA  79                 	db	121	;'y'
  1949  00BFEB  20                 	db	32
  1950  00BFEC  49                 	db	73	;'I'
  1951  00BFED  76                 	db	118	;'v'
  1952  00BFEE  61                 	db	97	;'a'
  1953  00BFEF  6E                 	db	110	;'n'
  1954  00BFF0  5F                 	db	95	;'_'
  1955  00BFF1  66                 	db	102	;'f'
  1956  00BFF2  64                 	db	100	;'d'
  1957  00BFF3  00                 	db	0
  1958  00BFF4                     STR_1:
  1959  00BFF4  EC                 	db	-20
  1960  00BFF5  EC                 	db	-20
  1961  00BFF6  2E                 	db	46
  1962  00BFF7  F0                 	db	-16
  1963  00BFF8  F2                 	db	-14
  1964  00BFF9  2E                 	db	46
  1965  00BFFA  F1                 	db	-15
  1966  00BFFB  F2                 	db	-14
  1967  00BFFC  2E                 	db	46
  1968  00BFFD  00                 	db	0
  1969                           
  1970                           ; #config settings
  1971  00BFFE  00                 	db	0	; dummy byte at the end
  1972  0000                     tosu	equ	0xFFF
  1973                           tosh	equ	0xFFE
  1974                           tosl	equ	0xFFD
  1975                           pclath	equ	0xFFA
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           prodh	equ	0xFF4
  1981                           prodl	equ	0xFF3
  1982                           intcon	equ	0xFF2
  1983                           intcon2	equ	0xFF1
  1984                           wreg	equ	0xFE8
  1985                           indf1	equ	0xFE7
  1986                           plusw1	equ	0xFE3
  1987                           fsr1h	equ	0xFE2
  1988                           fsr1l	equ	0xFE1
  1989                           indf2	equ	0xFDF
  1990                           postinc2	equ	0xFDE
  1991                           postdec2	equ	0xFDD
  1992                           plusw2	equ	0xFDB
  1993                           fsr2h	equ	0xFDA
  1994                           fsr2l	equ	0xFD9
  1995                           status	equ	0xFD8
  1996                           
  1997                           	psect	cinit
  1998  001FC4                     __pcinit:
  1999                           	opt stack 0
  2000  001FC4                     start_initialization:
  2001                           	opt stack 0
  2002  001FC4                     __initialization:
  2003                           	opt stack 0
  2004                           
  2005                           ; Initialize objects allocated to COMRAM (3 bytes)
  2006                           ; load TBLPTR registers with __pidataCOMRAM
  2007  001FC4  0E28               	movlw	low __pidataCOMRAM
  2008  001FC6  6EF6               	movwf	tblptrl,c
  2009  001FC8  0E28               	movlw	high __pidataCOMRAM
  2010  001FCA  6EF7               	movwf	tblptrh,c
  2011  001FCC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2012  001FCE  6EF8               	movwf	tblptru,c
  2013  001FD0  0009               	tblrd		*+	;fetch initializer
  2014  001FD2  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  2015  001FD6  0009               	tblrd		*+	;fetch initializer
  2016  001FD8  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  2017  001FDC  0009               	tblrd		*+	;fetch initializer
  2018  001FDE  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  2019                           
  2020                           ; Clear objects allocated to BANK1 (220 bytes)
  2021  001FE2  EE01  F000         	lfsr	0,__pbssBANK1
  2022  001FE6  0EDC               	movlw	220
  2023  001FE8                     clear_0:
  2024  001FE8  6AEE               	clrf	postinc0,c
  2025  001FEA  06E8               	decf	wreg,f,c
  2026  001FEC  E1FD               	bnz	clear_0
  2027                           
  2028                           ; Clear objects allocated to BANK0 (75 bytes)
  2029  001FEE  EE00  F080         	lfsr	0,__pbssBANK0
  2030  001FF2  0E4B               	movlw	75
  2031  001FF4                     clear_1:
  2032  001FF4  6AEE               	clrf	postinc0,c
  2033  001FF6  06E8               	decf	wreg,f,c
  2034  001FF8  E1FD               	bnz	clear_1
  2035                           
  2036                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  2037  001FFA  6A70               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  2038                           
  2039                           ; Clear objects allocated to COMRAM (46 bytes)
  2040  001FFC  EE00  F03F         	lfsr	0,__pbssCOMRAM
  2041  002000  0E2E               	movlw	46
  2042  002002                     clear_2:
  2043  002002  6AEE               	clrf	postinc0,c
  2044  002004  06E8               	decf	wreg,f,c
  2045  002006  E1FD               	bnz	clear_2
  2046  002008                     end_of_initialization:
  2047                           	opt stack 0
  2048  002008                     __end_of__initialization:
  2049                           	opt stack 0
  2050  002008  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2051  00200A  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2052  00200C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2053  00200E  6EF8               	movwf	tblptru,c
  2054  002010  0100               	movlb	0
  2055  002012  EF0B  F010         	goto	_main	;jump to C main() function
  2056                           tosu	equ	0xFFF
  2057                           tosh	equ	0xFFE
  2058                           tosl	equ	0xFFD
  2059                           pclath	equ	0xFFA
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           prodh	equ	0xFF4
  2065                           prodl	equ	0xFF3
  2066                           intcon	equ	0xFF2
  2067                           intcon2	equ	0xFF1
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           indf1	equ	0xFE7
  2071                           plusw1	equ	0xFE3
  2072                           fsr1h	equ	0xFE2
  2073                           fsr1l	equ	0xFE1
  2074                           indf2	equ	0xFDF
  2075                           postinc2	equ	0xFDE
  2076                           postdec2	equ	0xFDD
  2077                           plusw2	equ	0xFDB
  2078                           fsr2h	equ	0xFDA
  2079                           fsr2l	equ	0xFD9
  2080                           status	equ	0xFD8
  2081                           
  2082                           	psect	bitbssCOMRAM
  2083  000380                     __pbitbssCOMRAM:
  2084                           	opt stack 0
  2085  000380                     _en_put:
  2086                           	opt stack 0
  2087  000380                     	ds	1
  2088  000381                     _show_digit:
  2089                           	opt stack 0
  2090  000381                     	ds	1
  2091                           tosu	equ	0xFFF
  2092                           tosh	equ	0xFFE
  2093                           tosl	equ	0xFFD
  2094                           pclath	equ	0xFFA
  2095                           tblptru	equ	0xFF8
  2096                           tblptrh	equ	0xFF7
  2097                           tblptrl	equ	0xFF6
  2098                           tablat	equ	0xFF5
  2099                           prodh	equ	0xFF4
  2100                           prodl	equ	0xFF3
  2101                           intcon	equ	0xFF2
  2102                           intcon2	equ	0xFF1
  2103                           postinc0	equ	0xFEE
  2104                           wreg	equ	0xFE8
  2105                           indf1	equ	0xFE7
  2106                           plusw1	equ	0xFE3
  2107                           fsr1h	equ	0xFE2
  2108                           fsr1l	equ	0xFE1
  2109                           indf2	equ	0xFDF
  2110                           postinc2	equ	0xFDE
  2111                           postdec2	equ	0xFDD
  2112                           plusw2	equ	0xFDB
  2113                           fsr2h	equ	0xFDA
  2114                           fsr2l	equ	0xFD9
  2115                           status	equ	0xFD8
  2116                           
  2117                           	psect	bssCOMRAM
  2118  00003F                     __pbssCOMRAM:
  2119                           	opt stack 0
  2120  00003F                     _TSTime:
  2121                           	opt stack 0
  2122  00003F                     	ds	7
  2123  000046                     _B7:
  2124                           	opt stack 0
  2125  000046                     	ds	4
  2126  00004A                     _B6:
  2127                           	opt stack 0
  2128  00004A                     	ds	4
  2129  00004E                     _X2:
  2130                           	opt stack 0
  2131  00004E                     	ds	4
  2132  000052                     _X1:
  2133                           	opt stack 0
  2134  000052                     	ds	4
  2135  000056                     _ac1:
  2136                           	opt stack 0
  2137  000056                     	ds	2
  2138  000058                     _press:
  2139                           	opt stack 0
  2140  000058                     	ds	2
  2141  00005A                     _count_sound:
  2142                           	opt stack 0
  2143  00005A                     	ds	1
  2144  00005B                     key_press@count:
  2145                           	opt stack 0
  2146  00005B                     	ds	1
  2147  00005C                     _play_sound:
  2148                           	opt stack 0
  2149  00005C                     	ds	1
  2150  00005D                     _i_bchar:
  2151                           	opt stack 0
  2152  00005D                     	ds	1
  2153  00005E                     _i_char:
  2154                           	opt stack 0
  2155  00005E                     	ds	1
  2156  00005F                     _Timer0Interrupt:
  2157                           	opt stack 0
  2158  00005F                     	ds	1
  2159  000060                     _arrayTail:
  2160                           	opt stack 0
  2161  000060                     	ds	1
  2162  000061                     _type_font:
  2163                           	opt stack 0
  2164  000061                     	ds	1
  2165  000062                     _TTime:
  2166                           	opt stack 0
  2167  000062                     	ds	7
  2168  000069                     _temperature:
  2169                           	opt stack 0
  2170  000069                     	ds	2
  2171  00006B                     _time_flag:
  2172                           	opt stack 0
  2173  00006B                     	ds	1
  2174  00006C                     _timer_val:
  2175                           	opt stack 0
  2176  00006C                     	ds	1
  2177                           tosu	equ	0xFFF
  2178                           tosh	equ	0xFFE
  2179                           tosl	equ	0xFFD
  2180                           pclath	equ	0xFFA
  2181                           tblptru	equ	0xFF8
  2182                           tblptrh	equ	0xFF7
  2183                           tblptrl	equ	0xFF6
  2184                           tablat	equ	0xFF5
  2185                           prodh	equ	0xFF4
  2186                           prodl	equ	0xFF3
  2187                           intcon	equ	0xFF2
  2188                           intcon2	equ	0xFF1
  2189                           postinc0	equ	0xFEE
  2190                           wreg	equ	0xFE8
  2191                           indf1	equ	0xFE7
  2192                           plusw1	equ	0xFE3
  2193                           fsr1h	equ	0xFE2
  2194                           fsr1l	equ	0xFE1
  2195                           indf2	equ	0xFDF
  2196                           postinc2	equ	0xFDE
  2197                           postdec2	equ	0xFDD
  2198                           plusw2	equ	0xFDB
  2199                           fsr2h	equ	0xFDA
  2200                           fsr2l	equ	0xFD9
  2201                           status	equ	0xFD8
  2202                           
  2203                           	psect	dataCOMRAM
  2204  00006D                     __pdataCOMRAM:
  2205                           	opt stack 0
  2206  00006D                     _pFont:
  2207                           	opt stack 0
  2208  00006D                     	ds	2
  2209  00006F                     _events:
  2210                           	opt stack 0
  2211  00006F                     	ds	1
  2212                           tosu	equ	0xFFF
  2213                           tosh	equ	0xFFE
  2214                           tosl	equ	0xFFD
  2215                           pclath	equ	0xFFA
  2216                           tblptru	equ	0xFF8
  2217                           tblptrh	equ	0xFF7
  2218                           tblptrl	equ	0xFF6
  2219                           tablat	equ	0xFF5
  2220                           prodh	equ	0xFF4
  2221                           prodl	equ	0xFF3
  2222                           intcon	equ	0xFF2
  2223                           intcon2	equ	0xFF1
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           indf1	equ	0xFE7
  2227                           plusw1	equ	0xFE3
  2228                           fsr1h	equ	0xFE2
  2229                           fsr1l	equ	0xFE1
  2230                           indf2	equ	0xFDF
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           plusw2	equ	0xFDB
  2234                           fsr2h	equ	0xFDA
  2235                           fsr2l	equ	0xFD9
  2236                           status	equ	0xFD8
  2237                           
  2238                           	psect	bssBANK0
  2239  000080                     __pbssBANK0:
  2240                           	opt stack 0
  2241  000080                     _scratch:
  2242                           	opt stack 0
  2243  000080                     	ds	9
  2244  000089                     _B5:
  2245                           	opt stack 0
  2246  000089                     	ds	4
  2247  00008D                     _B4:
  2248                           	opt stack 0
  2249  00008D                     	ds	4
  2250  000091                     _B3:
  2251                           	opt stack 0
  2252  000091                     	ds	4
  2253  000095                     _X3:
  2254                           	opt stack 0
  2255  000095                     	ds	4
  2256  000099                     _md:
  2257                           	opt stack 0
  2258  000099                     	ds	2
  2259  00009B                     _mc:
  2260                           	opt stack 0
  2261  00009B                     	ds	2
  2262  00009D                     _b2:
  2263                           	opt stack 0
  2264  00009D                     	ds	2
  2265  00009F                     _b1:
  2266                           	opt stack 0
  2267  00009F                     	ds	2
  2268  0000A1                     _ac6:
  2269                           	opt stack 0
  2270  0000A1                     	ds	2
  2271  0000A3                     _ac5:
  2272                           	opt stack 0
  2273  0000A3                     	ds	2
  2274  0000A5                     _ac4:
  2275                           	opt stack 0
  2276  0000A5                     	ds	2
  2277  0000A7                     _ac3:
  2278                           	opt stack 0
  2279  0000A7                     	ds	2
  2280  0000A9                     _ac2:
  2281                           	opt stack 0
  2282  0000A9                     	ds	2
  2283  0000AB                     _Dis_Buff:
  2284                           	opt stack 0
  2285  0000AB                     	ds	32
  2286                           tosu	equ	0xFFF
  2287                           tosh	equ	0xFFE
  2288                           tosl	equ	0xFFD
  2289                           pclath	equ	0xFFA
  2290                           tblptru	equ	0xFF8
  2291                           tblptrh	equ	0xFF7
  2292                           tblptrl	equ	0xFF6
  2293                           tablat	equ	0xFF5
  2294                           prodh	equ	0xFF4
  2295                           prodl	equ	0xFF3
  2296                           intcon	equ	0xFF2
  2297                           intcon2	equ	0xFF1
  2298                           postinc0	equ	0xFEE
  2299                           wreg	equ	0xFE8
  2300                           indf1	equ	0xFE7
  2301                           plusw1	equ	0xFE3
  2302                           fsr1h	equ	0xFE2
  2303                           fsr1l	equ	0xFE1
  2304                           indf2	equ	0xFDF
  2305                           postinc2	equ	0xFDE
  2306                           postdec2	equ	0xFDD
  2307                           plusw2	equ	0xFDB
  2308                           fsr2h	equ	0xFDA
  2309                           fsr2l	equ	0xFD9
  2310                           status	equ	0xFD8
  2311                           
  2312                           	psect	bssBANK1
  2313  000100                     __pbssBANK1:
  2314                           	opt stack 0
  2315  000100                     _TaskArray:
  2316                           	opt stack 0
  2317  000100                     	ds	120
  2318  000178                     _text_buf:
  2319                           	opt stack 0
  2320  000178                     	ds	100
  2321                           tosu	equ	0xFFF
  2322                           tosh	equ	0xFFE
  2323                           tosl	equ	0xFFD
  2324                           pclath	equ	0xFFA
  2325                           tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           prodh	equ	0xFF4
  2330                           prodl	equ	0xFF3
  2331                           intcon	equ	0xFF2
  2332                           intcon2	equ	0xFF1
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           indf1	equ	0xFE7
  2336                           plusw1	equ	0xFE3
  2337                           fsr1h	equ	0xFE2
  2338                           fsr1l	equ	0xFE1
  2339                           indf2	equ	0xFDF
  2340                           postinc2	equ	0xFDE
  2341                           postdec2	equ	0xFDD
  2342                           plusw2	equ	0xFDB
  2343                           fsr2h	equ	0xFDA
  2344                           fsr2l	equ	0xFD9
  2345                           status	equ	0xFD8
  2346                           
  2347                           	psect	cstackBANK0
  2348  0000CB                     __pcstackBANK0:
  2349                           	opt stack 0
  2350  0000CB                     BMP085Pressure@getTemp:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x0
  2354  0000CB                     	ds	1
  2355  0000CC                     BMP085Pressure@press:
  2356                           	opt stack 0
  2357                           
  2358                           ; 4 bytes @ 0x1
  2359  0000CC                     	ds	4
  2360  0000D0                     ??_RTOS_DispatchTask:
  2361                           
  2362                           ; 1 bytes @ 0x5
  2363  0000D0                     	ds	4
  2364  0000D4                     RTOS_DispatchTask@function:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x9
  2368  0000D4                     	ds	2
  2369  0000D6                     RTOS_DispatchTask@j:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0xB
  2373  0000D6                     	ds	1
  2374  0000D7                     RTOS_DispatchTask@i:
  2375                           	opt stack 0
  2376                           
  2377                           ; 1 bytes @ 0xC
  2378  0000D7                     	ds	1
  2379  0000D8                     ??_main:
  2380                           
  2381                           ; 1 bytes @ 0xD
  2382  0000D8                     	ds	1
  2383                           tosu	equ	0xFFF
  2384                           tosh	equ	0xFFE
  2385                           tosl	equ	0xFFD
  2386                           pclath	equ	0xFFA
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           prodh	equ	0xFF4
  2392                           prodl	equ	0xFF3
  2393                           intcon	equ	0xFF2
  2394                           intcon2	equ	0xFF1
  2395                           postinc0	equ	0xFEE
  2396                           wreg	equ	0xFE8
  2397                           indf1	equ	0xFE7
  2398                           plusw1	equ	0xFE3
  2399                           fsr1h	equ	0xFE2
  2400                           fsr1l	equ	0xFE1
  2401                           indf2	equ	0xFDF
  2402                           postinc2	equ	0xFDE
  2403                           postdec2	equ	0xFDD
  2404                           plusw2	equ	0xFDB
  2405                           fsr2h	equ	0xFDA
  2406                           fsr2l	equ	0xFD9
  2407                           status	equ	0xFD8
  2408                           
  2409                           	psect	cstackCOMRAM
  2410  000001                     __pcstackCOMRAM:
  2411                           	opt stack 0
  2412  000001                     i2RTOS_SetTask@taskFunc:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x0
  2416  000001                     	ds	2
  2417  000003                     i2RTOS_SetTask@taskDelay:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x2
  2421  000003                     	ds	2
  2422  000005                     i2RTOS_SetTask@taskPeriod:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0x4
  2426  000005                     	ds	2
  2427  000007                     
  2428                           ; 1 bytes @ 0x6
  2429  000007                     	ds	2
  2430  000009                     i2RTOS_SetTask@i:
  2431                           	opt stack 0
  2432                           
  2433                           ; 1 bytes @ 0x8
  2434  000009                     	ds	1
  2435  00000A                     ??_INTERRUPT_InterruptManager:
  2436                           
  2437                           ; 1 bytes @ 0x9
  2438  00000A                     	ds	5
  2439  00000F                     ??_ow_reset:
  2440  00000F                     ??_read_byte:
  2441  00000F                     ??_I2C_Master_Wait:
  2442  00000F                     ??_scroll_text:
  2443  00000F                     ??_bcd_to_decimal:
  2444  00000F                     ?_sprintf:
  2445                           	opt stack 0
  2446  00000F                     ?___lwdiv:
  2447                           	opt stack 0
  2448  00000F                     ?___lmul:
  2449                           	opt stack 0
  2450  00000F                     ?___lldiv:
  2451                           	opt stack 0
  2452  00000F                     Send_Byte_7221@dat:
  2453                           	opt stack 0
  2454  00000F                     pixel_on@y:
  2455                           	opt stack 0
  2456  00000F                     pixel_off@y:
  2457                           	opt stack 0
  2458  00000F                     clear_matrix@i:
  2459                           	opt stack 0
  2460  00000F                     key_press@key:
  2461                           	opt stack 0
  2462  00000F                     write_bit@bitval:
  2463                           	opt stack 0
  2464  00000F                     write_eep@data:
  2465                           	opt stack 0
  2466  00000F                     ___lbdiv@divisor:
  2467                           	opt stack 0
  2468  00000F                     RTOS_SetTask@taskFunc:
  2469                           	opt stack 0
  2470  00000F                     RTOS_DeleteTask@taskFunc:
  2471                           	opt stack 0
  2472  00000F                     read_eep@address:
  2473                           	opt stack 0
  2474  00000F                     sprintf@sp:
  2475                           	opt stack 0
  2476  00000F                     ___lwdiv@dividend:
  2477                           	opt stack 0
  2478  00000F                     ___lmul@multiplier:
  2479                           	opt stack 0
  2480  00000F                     ___lldiv@dividend:
  2481                           	opt stack 0
  2482                           
  2483                           ; 4 bytes @ 0xE
  2484  00000F                     	ds	1
  2485  000010                     ??_write_byte:
  2486  000010                     ??_pixel_on:
  2487  000010                     ??_pixel_off:
  2488  000010                     I2C_Master_Write@d:
  2489                           	opt stack 0
  2490  000010                     I2C_Master_Read@a:
  2491                           	opt stack 0
  2492  000010                     Send_Byte_7221@i:
  2493                           	opt stack 0
  2494  000010                     bcd_to_decimal@d:
  2495                           	opt stack 0
  2496  000010                     ow_reset@presence:
  2497                           	opt stack 0
  2498  000010                     write_eep@address:
  2499                           	opt stack 0
  2500  000010                     ___lbdiv@dividend:
  2501                           	opt stack 0
  2502                           
  2503                           ; 1 bytes @ 0xF
  2504  000010                     	ds	1
  2505  000011                     ??_RTOS_DeleteTask:
  2506  000011                     I2C_Master_Read@temp:
  2507                           	opt stack 0
  2508  000011                     Cmd7221@val:
  2509                           	opt stack 0
  2510  000011                     Update_Matrix@buf:
  2511                           	opt stack 0
  2512  000011                     scroll_text@i:
  2513                           	opt stack 0
  2514  000011                     read_byte@val:
  2515                           	opt stack 0
  2516  000011                     BMP085WriteByte@data:
  2517                           	opt stack 0
  2518  000011                     ___lbdiv@counter:
  2519                           	opt stack 0
  2520  000011                     RTOS_SetTask@taskDelay:
  2521                           	opt stack 0
  2522  000011                     sprintf@f:
  2523                           	opt stack 0
  2524  000011                     ___lwdiv@divisor:
  2525                           	opt stack 0
  2526                           
  2527                           ; 2 bytes @ 0x10
  2528  000011                     	ds	1
  2529  000012                     ?_bmp085ReadInt:
  2530                           	opt stack 0
  2531  000012                     Cmd7221@adr:
  2532                           	opt stack 0
  2533  000012                     Update_Matrix@data:
  2534                           	opt stack 0
  2535  000012                     pixel_on@x:
  2536                           	opt stack 0
  2537  000012                     DS3231_Read@address:
  2538                           	opt stack 0
  2539  000012                     read_byte@i:
  2540                           	opt stack 0
  2541  000012                     write_byte@val:
  2542                           	opt stack 0
  2543  000012                     BMP085ReadByte@address:
  2544                           	opt stack 0
  2545  000012                     BMP085WriteByte@address:
  2546                           	opt stack 0
  2547  000012                     ___lbdiv@quotient:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x11
  2551  000012                     	ds	1
  2552  000013                     Cmd7221@i:
  2553                           	opt stack 0
  2554  000013                     Update_Matrix@j:
  2555                           	opt stack 0
  2556  000013                     pixel_off@x:
  2557                           	opt stack 0
  2558  000013                     DS3231_Read@value:
  2559                           	opt stack 0
  2560  000013                     write_byte@temp:
  2561                           	opt stack 0
  2562  000013                     BMP085ReadByte@data:
  2563                           	opt stack 0
  2564  000013                     sprintf@c:
  2565                           	opt stack 0
  2566  000013                     ___lbmod@divisor:
  2567                           	opt stack 0
  2568  000013                     ___lwdiv@counter:
  2569                           	opt stack 0
  2570  000013                     RTOS_SetTask@taskPeriod:
  2571                           	opt stack 0
  2572  000013                     ___lmul@multiplicand:
  2573                           	opt stack 0
  2574  000013                     ___lldiv@divisor:
  2575                           	opt stack 0
  2576                           
  2577                           ; 4 bytes @ 0x12
  2578  000013                     	ds	1
  2579  000014                     ??_bmp085ReadInt:
  2580  000014                     ?_bmp085ReadUP:
  2581                           	opt stack 0
  2582  000014                     Update_Matrix@i:
  2583                           	opt stack 0
  2584  000014                     pic_to_led@pic:
  2585                           	opt stack 0
  2586  000014                     getTime@p3:
  2587                           	opt stack 0
  2588  000014                     getDate@p4:
  2589                           	opt stack 0
  2590  000014                     write_byte@i:
  2591                           	opt stack 0
  2592  000014                     ___lbmod@dividend:
  2593                           	opt stack 0
  2594  000014                     ___lwdiv@quotient:
  2595                           	opt stack 0
  2596                           
  2597                           ; 2 bytes @ 0x13
  2598  000014                     	ds	1
  2599  000015                     ??_pic_to_led:
  2600  000015                     ??_scroll_left:
  2601  000015                     ??_interval_scroll_text:
  2602  000015                     getTime@p2:
  2603                           	opt stack 0
  2604  000015                     getDate@p3:
  2605                           	opt stack 0
  2606  000015                     ___lbmod@counter:
  2607                           	opt stack 0
  2608                           
  2609                           ; 1 bytes @ 0x14
  2610  000015                     	ds	1
  2611  000016                     ?___lwmod:
  2612                           	opt stack 0
  2613  000016                     scroll_left@j:
  2614                           	opt stack 0
  2615  000016                     interval_scroll_text@i:
  2616                           	opt stack 0
  2617  000016                     getTime@p1:
  2618                           	opt stack 0
  2619  000016                     getDate@p2:
  2620                           	opt stack 0
  2621  000016                     bmp085ReadInt@address:
  2622                           	opt stack 0
  2623  000016                     ___lbmod@rem:
  2624                           	opt stack 0
  2625  000016                     ___lwmod@dividend:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x15
  2629  000016                     	ds	1
  2630  000017                     ??_FillBuf:
  2631  000017                     ??_decimal_to_bcd:
  2632  000017                     RTOS_SetTask@i:
  2633                           	opt stack 0
  2634  000017                     RTOS_DeleteTask@i:
  2635                           	opt stack 0
  2636  000017                     pic_to_led@mask:
  2637                           	opt stack 0
  2638  000017                     putchar_b_buf@symbol:
  2639                           	opt stack 0
  2640  000017                     putchar_down_s@symbol:
  2641                           	opt stack 0
  2642  000017                     scroll_left@k:
  2643                           	opt stack 0
  2644  000017                     getDate@p1:
  2645                           	opt stack 0
  2646  000017                     bmp085ReadInt@msb:
  2647                           	opt stack 0
  2648  000017                     ___lmul@product:
  2649                           	opt stack 0
  2650  000017                     ___lldiv@quotient:
  2651                           	opt stack 0
  2652                           
  2653                           ; 4 bytes @ 0x16
  2654  000017                     	ds	1
  2655  000018                     ??_putchar_down_s:
  2656  000018                     ??_bmp085ReadUP:
  2657  000018                     pic_to_led@x:
  2658                           	opt stack 0
  2659  000018                     scroll_left@speed:
  2660                           	opt stack 0
  2661  000018                     putchar_b_buf@pF:
  2662                           	opt stack 0
  2663  000018                     ___lwmod@divisor:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x17
  2667  000018                     	ds	1
  2668  000019                     pic_to_led@j:
  2669                           	opt stack 0
  2670  000019                     FillBuf@i:
  2671                           	opt stack 0
  2672  000019                     scroll_left@i:
  2673                           	opt stack 0
  2674  000019                     decimal_to_bcd@d:
  2675                           	opt stack 0
  2676  000019                     bmp085ReadInt@lsb:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0x18
  2680  000019                     	ds	1
  2681  00001A                     ??_putchar_b_buf:
  2682  00001A                     pic_to_led@i:
  2683                           	opt stack 0
  2684  00001A                     DS3231_Write@value:
  2685                           	opt stack 0
  2686  00001A                     ___lwmod@counter:
  2687                           	opt stack 0
  2688                           
  2689                           ; 1 bytes @ 0x19
  2690  00001A                     	ds	1
  2691  00001B                     ?_BMP085ReadUT:
  2692                           	opt stack 0
  2693  00001B                     ?___aldiv:
  2694                           	opt stack 0
  2695  00001B                     putchar_down@symbol:
  2696                           	opt stack 0
  2697  00001B                     DS3231_Write@address:
  2698                           	opt stack 0
  2699  00001B                     readTemp_Single@buf:
  2700                           	opt stack 0
  2701  00001B                     ___lldiv@counter:
  2702                           	opt stack 0
  2703  00001B                     ___aldiv@dividend:
  2704                           	opt stack 0
  2705                           
  2706                           ; 4 bytes @ 0x1A
  2707  00001B                     	ds	1
  2708  00001C                     putchar_b_buf@mask:
  2709                           	opt stack 0
  2710  00001C                     setTime@mSet:
  2711                           	opt stack 0
  2712  00001C                     setDate@dateSet:
  2713                           	opt stack 0
  2714  00001C                     readTemp_Single@time_flag:
  2715                           	opt stack 0
  2716  00001C                     putchar_down@pF:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x1B
  2720  00001C                     	ds	1
  2721  00001D                     putchar_b_buf@x:
  2722                           	opt stack 0
  2723  00001D                     putchar_down_s@x:
  2724                           	opt stack 0
  2725  00001D                     setTime@sSet:
  2726                           	opt stack 0
  2727  00001D                     setDate@monthSet:
  2728                           	opt stack 0
  2729  00001D                     readTemp_Single@timer_val:
  2730                           	opt stack 0
  2731                           
  2732                           ; 1 bytes @ 0x1C
  2733  00001D                     	ds	1
  2734  00001E                     ??_readTemp_Single:
  2735  00001E                     ??_putchar_down:
  2736  00001E                     putchar_b_buf@j:
  2737                           	opt stack 0
  2738  00001E                     putchar_down_s@k:
  2739                           	opt stack 0
  2740  00001E                     setTime@hSet:
  2741                           	opt stack 0
  2742  00001E                     setDate@yearSet:
  2743                           	opt stack 0
  2744                           
  2745                           ; 1 bytes @ 0x1D
  2746  00001E                     	ds	1
  2747  00001F                     ??_BMP085ReadUT:
  2748  00001F                     putchar_b_buf@i:
  2749                           	opt stack 0
  2750  00001F                     putchar_down_s@j:
  2751                           	opt stack 0
  2752  00001F                     setDate@daySet:
  2753                           	opt stack 0
  2754  00001F                     ___aldiv@divisor:
  2755                           	opt stack 0
  2756                           
  2757                           ; 4 bytes @ 0x1E
  2758  00001F                     	ds	1
  2759  000020                     putchar_down_s@i:
  2760                           	opt stack 0
  2761  000020                     readTemp_Single@fptmp:
  2762                           	opt stack 0
  2763                           
  2764                           ; 1 bytes @ 0x1F
  2765  000020                     	ds	1
  2766  000021                     readTemp_Single@tmp:
  2767                           	opt stack 0
  2768                           
  2769                           ; 1 bytes @ 0x20
  2770  000021                     	ds	1
  2771  000022                     readTemp_Single@i:
  2772                           	opt stack 0
  2773                           
  2774                           ; 1 bytes @ 0x21
  2775  000022                     	ds	1
  2776  000023                     putchar_down@x:
  2777                           	opt stack 0
  2778  000023                     ___aldiv@counter:
  2779                           	opt stack 0
  2780  000023                     readTemp_Single@temp:
  2781                           	opt stack 0
  2782                           
  2783                           ; 2 bytes @ 0x22
  2784  000023                     	ds	1
  2785  000024                     putchar_down@k:
  2786                           	opt stack 0
  2787  000024                     ___aldiv@sign:
  2788                           	opt stack 0
  2789                           
  2790                           ; 1 bytes @ 0x23
  2791  000024                     	ds	1
  2792  000025                     putchar_down@j:
  2793                           	opt stack 0
  2794  000025                     ___aldiv@quotient:
  2795                           	opt stack 0
  2796                           
  2797                           ; 4 bytes @ 0x24
  2798  000025                     	ds	1
  2799  000026                     putchar_down@i:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0x25
  2803  000026                     	ds	1
  2804  000027                     ??_home_temp:
  2805  000027                     ??_pressure:
  2806                           
  2807                           ; 1 bytes @ 0x26
  2808  000027                     	ds	1
  2809  000028                     bmp085ReadUP@p:
  2810                           	opt stack 0
  2811                           
  2812                           ; 4 bytes @ 0x27
  2813  000028                     	ds	1
  2814  000029                     ?_BMP085GetPressure:
  2815                           	opt stack 0
  2816  000029                     ?_BMP085GetTemp:
  2817                           	opt stack 0
  2818  000029                     BMP085GetTemp@_tu:
  2819                           	opt stack 0
  2820  000029                     BMP085GetPressure@_pu:
  2821                           	opt stack 0
  2822                           
  2823                           ; 4 bytes @ 0x28
  2824  000029                     	ds	3
  2825  00002C                     bmp085ReadUP@msb:
  2826                           	opt stack 0
  2827                           
  2828                           ; 4 bytes @ 0x2B
  2829  00002C                     	ds	1
  2830  00002D                     ??_BMP085GetTemp:
  2831  00002D                     ??_BMP085GetPressure:
  2832                           
  2833                           ; 1 bytes @ 0x2C
  2834  00002D                     	ds	3
  2835  000030                     bmp085ReadUP@lsb:
  2836                           	opt stack 0
  2837                           
  2838                           ; 4 bytes @ 0x2F
  2839  000030                     	ds	4
  2840  000034                     bmp085ReadUP@xlsb:
  2841                           	opt stack 0
  2842                           
  2843                           ; 4 bytes @ 0x33
  2844  000034                     	ds	1
  2845  000035                     BMP085GetTemp@Tt:
  2846                           	opt stack 0
  2847  000035                     _BMP085GetPressure$2693:
  2848                           	opt stack 0
  2849                           
  2850                           ; 4 bytes @ 0x34
  2851  000035                     	ds	4
  2852  000039                     BMP085GetPressure@Pp:
  2853                           	opt stack 0
  2854                           
  2855                           ; 4 bytes @ 0x38
  2856  000039                     	ds	4
  2857  00003D                     ?_BMP085Pressure:
  2858                           	opt stack 0
  2859                           
  2860                           ; 2 bytes @ 0x3C
  2861  00003D                     	ds	2
  2862  00003F                     tosu	equ	0xFFF
  2863                           tosh	equ	0xFFE
  2864                           tosl	equ	0xFFD
  2865                           pclath	equ	0xFFA
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           intcon	equ	0xFF2
  2873                           intcon2	equ	0xFF1
  2874                           postinc0	equ	0xFEE
  2875                           wreg	equ	0xFE8
  2876                           indf1	equ	0xFE7
  2877                           plusw1	equ	0xFE3
  2878                           fsr1h	equ	0xFE2
  2879                           fsr1l	equ	0xFE1
  2880                           indf2	equ	0xFDF
  2881                           postinc2	equ	0xFDE
  2882                           postdec2	equ	0xFDD
  2883                           plusw2	equ	0xFDB
  2884                           fsr2h	equ	0xFDA
  2885                           fsr2l	equ	0xFD9
  2886                           status	equ	0xFD8
  2887                           
  2888                           ; 1 bytes @ 0x3E
  2889 ;;
  2890 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2891 ;;
  2892 ;; *************** function _main *****************
  2893 ;; Defined at:
  2894 ;;		line 18 in file "main.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 3F/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;Total ram usage:        1 bytes
  2913 ;; Hardware stack levels required when called:   10
  2914 ;; This function calls:
  2915 ;;		_RTOS_DispatchTask
  2916 ;;		_RTOS_SetTask
  2917 ;;		_SYSTEM_Initialize
  2918 ;;		_clear_matrix
  2919 ;; This function is called by:
  2920 ;;		Startup code after reset
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text0
  2925  002016                     __ptext0:
  2926                           	opt stack 0
  2927  002016                     _main:
  2928                           	opt stack 21
  2929                           
  2930                           ;main.c: 20: _delay((unsigned long)((10)*(40000000/4000.0)));
  2931                           
  2932                           ;incstack = 0
  2933  002016  0E82               	movlw	130
  2934  002018  0100               	movlb	0	; () banked
  2935  00201A  6FD8               	movwf	??_main& (0+255),b
  2936  00201C  0EDD               	movlw	221
  2937  00201E                     u4837:
  2938  00201E  2EE8               	decfsz	wreg,f,c
  2939  002020  D7FE               	bra	u4837
  2940  002022  2FD8               	decfsz	??_main& (0+255),f,b
  2941  002024  D7FC               	bra	u4837
  2942  002026  D000               	nop2	
  2943                           
  2944                           ;main.c: 22: SYSTEM_Initialize();
  2945  002028  EC48  F011         	call	_SYSTEM_Initialize	;wreg free
  2946                           
  2947                           ;main.c: 27: clear_matrix();
  2948  00202C  ECD0  F013         	call	_clear_matrix	;wreg free
  2949                           
  2950                           ;main.c: 30: (INTCONbits.GIE = 0);
  2951  002030  9EF2               	bcf	intcon,7,c	;volatile
  2952                           
  2953                           ;main.c: 31: RTOS_SetTask(time_led, 100, 20);
  2954  002032  0EBE               	movlw	low _time_led
  2955  002034  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  2956  002036  0E12               	movlw	high _time_led
  2957  002038  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  2958  00203A  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  2959  00203C  0E64               	movlw	100
  2960  00203E  6E11               	movwf	RTOS_SetTask@taskDelay,c
  2961  002040  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  2962  002042  0E14               	movlw	20
  2963  002044  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  2964  002046  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  2965                           
  2966                           ;main.c: 32: RTOS_SetTask(key_press,0,1);
  2967  00204A  0E4A               	movlw	low _key_press
  2968  00204C  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  2969  00204E  0E21               	movlw	high _key_press
  2970  002050  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  2971  002052  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  2972  002054  6A11               	clrf	RTOS_SetTask@taskDelay,c
  2973  002056  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  2974  002058  0E01               	movlw	1
  2975  00205A  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  2976  00205C  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  2977                           
  2978                           ;main.c: 33: (INTCONbits.GIE = 1);
  2979  002060  8EF2               	bsf	intcon,7,c	;volatile
  2980  002062                     l6819:
  2981                           
  2982                           ;main.c: 36: {
  2983                           ;main.c: 37: RTOS_DispatchTask();
  2984  002062  ECE0  F00A         	call	_RTOS_DispatchTask	;wreg free
  2985  002066  D7FD               	goto	l6819
  2986  002068                     __end_of_main:
  2987                           	opt stack 0
  2988                           tosu	equ	0xFFF
  2989                           tosh	equ	0xFFE
  2990                           tosl	equ	0xFFD
  2991                           pclath	equ	0xFFA
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           prodh	equ	0xFF4
  2997                           prodl	equ	0xFF3
  2998                           intcon	equ	0xFF2
  2999                           intcon2	equ	0xFF1
  3000                           postinc0	equ	0xFEE
  3001                           wreg	equ	0xFE8
  3002                           indf1	equ	0xFE7
  3003                           plusw1	equ	0xFE3
  3004                           fsr1h	equ	0xFE2
  3005                           fsr1l	equ	0xFE1
  3006                           indf2	equ	0xFDF
  3007                           postinc2	equ	0xFDE
  3008                           postdec2	equ	0xFDD
  3009                           plusw2	equ	0xFDB
  3010                           fsr2h	equ	0xFDA
  3011                           fsr2l	equ	0xFD9
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _SYSTEM_Initialize *****************
  3015 ;; Defined at:
  3016 ;;		line 65 in file "init.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, status,2, status,0, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;Total ram usage:        0 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    7
  3037 ;; This function calls:
  3038 ;;		_DS3231_init
  3039 ;;		_I2C_Init
  3040 ;;		_Init7221
  3041 ;;		_Interrupt_Init
  3042 ;;		_Port_Init
  3043 ;;		_RTOS_Init
  3044 ;;		_TMRInit
  3045 ;;		_bmp085Calibration
  3046 ;;		_init_ds18b20
  3047 ;;		_init_uart
  3048 ;;		_read_eep
  3049 ;;		_set_font
  3050 ;;		_sound_init
  3051 ;; This function is called by:
  3052 ;;		_main
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text1
  3057  002290                     __ptext1:
  3058                           	opt stack 0
  3059  002290                     _SYSTEM_Initialize:
  3060                           	opt stack 23
  3061                           
  3062                           ;init.c: 68: Port_Init();
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;incstack = 0
  3066  002290  EC3D  F013         	call	_Port_Init	;wreg free
  3067                           
  3068                           ;init.c: 69: I2C_Init();
  3069  002294  EC9E  F013         	call	_I2C_Init	;wreg free
  3070                           
  3071                           ;init.c: 70: Init7221();
  3072  002298  EC07  F012         	call	_Init7221	;wreg free
  3073                           
  3074                           ;init.c: 71: TMRInit();
  3075  00229C  EC2F  F013         	call	_TMRInit	;wreg free
  3076                           
  3077                           ;init.c: 72: Interrupt_Init();
  3078  0022A0  EC0E  F014         	call	_Interrupt_Init	;wreg free
  3079                           
  3080                           ;init.c: 73: DS3231_init();
  3081  0022A4  ECC7  F013         	call	_DS3231_init	;wreg free
  3082                           
  3083                           ;init.c: 74: init_ds18b20();
  3084  0022A8  EC78  F012         	call	_init_ds18b20	;wreg free
  3085                           
  3086                           ;init.c: 75: RTOS_Init();
  3087  0022AC  ECE2  F013         	call	_RTOS_Init	;wreg free
  3088                           
  3089                           ;init.c: 76: init_uart();
  3090  0022B0  EC91  F013         	call	_init_uart	;wreg free
  3091                           
  3092                           ;init.c: 77: bmp085Calibration();
  3093  0022B4  EC86  F00C         	call	_bmp085Calibration	;wreg free
  3094                           
  3095                           ;init.c: 78: type_font = read_eep(0);
  3096  0022B8  6A10               	clrf	read_eep@address+1,c
  3097  0022BA  6A0F               	clrf	read_eep@address,c
  3098  0022BC  ECBE  F013         	call	_read_eep	;wreg free
  3099  0022C0  6E61               	movwf	_type_font,c
  3100                           
  3101                           ;init.c: 79: set_font();
  3102  0022C2  EC5A  F010         	call	_set_font	;wreg free
  3103                           
  3104                           ;init.c: 80: sound_init();
  3105  0022C6  EF0B  F014         	goto	_sound_init	;wreg free
  3106  0022CA                     __end_of_SYSTEM_Initialize:
  3107                           	opt stack 0
  3108                           tosu	equ	0xFFF
  3109                           tosh	equ	0xFFE
  3110                           tosl	equ	0xFFD
  3111                           pclath	equ	0xFFA
  3112                           tblptru	equ	0xFF8
  3113                           tblptrh	equ	0xFF7
  3114                           tblptrl	equ	0xFF6
  3115                           tablat	equ	0xFF5
  3116                           prodh	equ	0xFF4
  3117                           prodl	equ	0xFF3
  3118                           intcon	equ	0xFF2
  3119                           intcon2	equ	0xFF1
  3120                           postinc0	equ	0xFEE
  3121                           wreg	equ	0xFE8
  3122                           indf1	equ	0xFE7
  3123                           plusw1	equ	0xFE3
  3124                           fsr1h	equ	0xFE2
  3125                           fsr1l	equ	0xFE1
  3126                           indf2	equ	0xFDF
  3127                           postinc2	equ	0xFDE
  3128                           postdec2	equ	0xFDD
  3129                           plusw2	equ	0xFDB
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _sound_init *****************
  3135 ;; Defined at:
  3136 ;;		line 7 in file "sound.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;		None
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		status,2, status,0
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;Total ram usage:        0 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    3
  3157 ;; This function calls:
  3158 ;;		Nothing
  3159 ;; This function is called by:
  3160 ;;		_SYSTEM_Initialize
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text2
  3165  002816                     __ptext2:
  3166                           	opt stack 0
  3167  002816                     _sound_init:
  3168                           	opt stack 26
  3169                           
  3170                           ;sound.c: 9: TRISD &= ~(1<<7);
  3171                           
  3172                           ;incstack = 0
  3173  002816  9E95               	bcf	3989,7,c	;volatile
  3174                           
  3175                           ;sound.c: 10: LATD &= ~(1<<7);
  3176  002818  9E8C               	bcf	3980,7,c	;volatile
  3177  00281A  0012               	return		;funcret
  3178  00281C                     __end_of_sound_init:
  3179                           	opt stack 0
  3180                           tosu	equ	0xFFF
  3181                           tosh	equ	0xFFE
  3182                           tosl	equ	0xFFD
  3183                           pclath	equ	0xFFA
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           prodh	equ	0xFF4
  3189                           prodl	equ	0xFF3
  3190                           intcon	equ	0xFF2
  3191                           intcon2	equ	0xFF1
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           indf1	equ	0xFE7
  3195                           plusw1	equ	0xFE3
  3196                           fsr1h	equ	0xFE2
  3197                           fsr1l	equ	0xFE1
  3198                           indf2	equ	0xFDF
  3199                           postinc2	equ	0xFDE
  3200                           postdec2	equ	0xFDD
  3201                           plusw2	equ	0xFDB
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function _read_eep *****************
  3207 ;; Defined at:
  3208 ;;		line 25 in file "eeprom.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  address         2   14[COMRAM] unsigned short 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      unsigned char 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3222 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;Total ram usage:        2 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    3
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_SYSTEM_Initialize
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text3
  3237  00277C                     __ptext3:
  3238                           	opt stack 0
  3239  00277C                     _read_eep:
  3240                           	opt stack 26
  3241  00277C                     l1245:
  3242  00277C  B2A6               	btfsc	4006,1,c	;volatile
  3243  00277E  D7FE               	goto	l1245
  3244                           
  3245                           ;eeprom.c: 30: EEADR = address;
  3246  002780  C00F  FFA9         	movff	read_eep@address,4009	;volatile
  3247                           
  3248                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  3249  002784  9EA6               	bcf	4006,7,c	;volatile
  3250                           
  3251                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  3252  002786  9CA6               	bcf	4006,6,c	;volatile
  3253                           
  3254                           ;eeprom.c: 33: EECON1bits.RD = 1;
  3255  002788  80A6               	bsf	4006,0,c	;volatile
  3256                           
  3257                           ;eeprom.c: 34: return( EEDATA );
  3258  00278A  50A8               	movf	4008,w,c	;volatile
  3259  00278C  0012               	return		;funcret
  3260  00278E                     __end_of_read_eep:
  3261                           	opt stack 0
  3262                           tosu	equ	0xFFF
  3263                           tosh	equ	0xFFE
  3264                           tosl	equ	0xFFD
  3265                           pclath	equ	0xFFA
  3266                           tblptru	equ	0xFF8
  3267                           tblptrh	equ	0xFF7
  3268                           tblptrl	equ	0xFF6
  3269                           tablat	equ	0xFF5
  3270                           prodh	equ	0xFF4
  3271                           prodl	equ	0xFF3
  3272                           intcon	equ	0xFF2
  3273                           intcon2	equ	0xFF1
  3274                           postinc0	equ	0xFEE
  3275                           wreg	equ	0xFE8
  3276                           indf1	equ	0xFE7
  3277                           plusw1	equ	0xFE3
  3278                           fsr1h	equ	0xFE2
  3279                           fsr1l	equ	0xFE1
  3280                           indf2	equ	0xFDF
  3281                           postinc2	equ	0xFDE
  3282                           postdec2	equ	0xFDD
  3283                           plusw2	equ	0xFDB
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function _init_uart *****************
  3289 ;; Defined at:
  3290 ;;		line 13 in file "eusart.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;		None
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;		None
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;Total ram usage:        0 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    3
  3311 ;; This function calls:
  3312 ;;		Nothing
  3313 ;; This function is called by:
  3314 ;;		_SYSTEM_Initialize
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text4
  3319  002722                     __ptext4:
  3320                           	opt stack 0
  3321  002722                     _init_uart:
  3322                           	opt stack 26
  3323                           
  3324                           ;eusart.c: 15: TRISCbits.RC6 = 1;
  3325                           
  3326                           ;incstack = 0
  3327  002722  8C94               	bsf	3988,6,c	;volatile
  3328                           
  3329                           ;eusart.c: 16: TRISCbits.RC7 = 1;
  3330  002724  8E94               	bsf	3988,7,c	;volatile
  3331                           
  3332                           ;eusart.c: 17: TXSTAbits.BRGH = 1;
  3333  002726  84AC               	bsf	4012,2,c	;volatile
  3334                           
  3335                           ;eusart.c: 18: TXSTAbits.SYNC = 0;
  3336  002728  98AC               	bcf	4012,4,c	;volatile
  3337                           
  3338                           ;eusart.c: 19: TXSTAbits.TXEN = 1;
  3339  00272A  8AAC               	bsf	4012,5,c	;volatile
  3340                           
  3341                           ;eusart.c: 20: RCSTAbits.CREN = 1;
  3342  00272C  88AB               	bsf	4011,4,c	;volatile
  3343                           
  3344                           ;eusart.c: 21: RCSTAbits.SPEN = 1;
  3345  00272E  8EAB               	bsf	4011,7,c	;volatile
  3346                           
  3347                           ;eusart.c: 22: BAUDCONbits.BRG16 = 1;
  3348  002730  86B8               	bsf	4024,3,c	;volatile
  3349                           
  3350                           ;eusart.c: 30: SPBRGH = 0x04;
  3351  002732  0E04               	movlw	4
  3352  002734  6EB0               	movwf	4016,c	;volatile
  3353                           
  3354                           ;eusart.c: 31: SPBRG = 0x10;
  3355  002736  0E10               	movlw	16
  3356  002738  6EAF               	movwf	4015,c	;volatile
  3357  00273A  0C10               	retlw	16	;funcret
  3358  00273C                     __end_of_init_uart:
  3359                           	opt stack 0
  3360                           tosu	equ	0xFFF
  3361                           tosh	equ	0xFFE
  3362                           tosl	equ	0xFFD
  3363                           pclath	equ	0xFFA
  3364                           tblptru	equ	0xFF8
  3365                           tblptrh	equ	0xFF7
  3366                           tblptrl	equ	0xFF6
  3367                           tablat	equ	0xFF5
  3368                           prodh	equ	0xFF4
  3369                           prodl	equ	0xFF3
  3370                           intcon	equ	0xFF2
  3371                           intcon2	equ	0xFF1
  3372                           postinc0	equ	0xFEE
  3373                           wreg	equ	0xFE8
  3374                           indf1	equ	0xFE7
  3375                           plusw1	equ	0xFE3
  3376                           fsr1h	equ	0xFE2
  3377                           fsr1l	equ	0xFE1
  3378                           indf2	equ	0xFDF
  3379                           postinc2	equ	0xFDE
  3380                           postdec2	equ	0xFDD
  3381                           plusw2	equ	0xFDB
  3382                           fsr2h	equ	0xFDA
  3383                           fsr2l	equ	0xFD9
  3384                           status	equ	0xFD8
  3385                           
  3386 ;; *************** function _init_ds18b20 *****************
  3387 ;; Defined at:
  3388 ;;		line 12 in file "ds18b20.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;		None
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;		None
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;Total ram usage:        0 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    5
  3409 ;; This function calls:
  3410 ;;		_ow_reset
  3411 ;;		_write_byte
  3412 ;; This function is called by:
  3413 ;;		_SYSTEM_Initialize
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text5
  3418  0024F0                     __ptext5:
  3419                           	opt stack 0
  3420  0024F0                     _init_ds18b20:
  3421                           	opt stack 24
  3422                           
  3423                           ;ds18b20.c: 15: if (!ow_reset())
  3424                           
  3425                           ;incstack = 0
  3426  0024F0  EC0C  F011         	call	_ow_reset	;wreg free
  3427  0024F4  0900               	iorlw	0
  3428  0024F6  A4D8               	btfss	status,2,c
  3429  0024F8  0012               	return	
  3430                           
  3431                           ;ds18b20.c: 16: {
  3432                           ;ds18b20.c: 18: write_byte(0xCC);
  3433  0024FA  0ECC               	movlw	204
  3434  0024FC  EC82  F011         	call	_write_byte
  3435                           
  3436                           ;ds18b20.c: 19: write_byte(0x4E);
  3437  002500  0E4E               	movlw	78
  3438  002502  EC82  F011         	call	_write_byte
  3439                           
  3440                           ;ds18b20.c: 20: write_byte(0x00);
  3441  002506  0E00               	movlw	0
  3442  002508  EC82  F011         	call	_write_byte
  3443                           
  3444                           ;ds18b20.c: 21: write_byte(0x00);
  3445  00250C  0E00               	movlw	0
  3446  00250E  EC82  F011         	call	_write_byte
  3447                           
  3448                           ;ds18b20.c: 22: write_byte(0x7F);
  3449  002512  0E7F               	movlw	127
  3450  002514  EF82  F011         	goto	_write_byte
  3451  002518                     __end_of_init_ds18b20:
  3452                           	opt stack 0
  3453                           tosu	equ	0xFFF
  3454                           tosh	equ	0xFFE
  3455                           tosl	equ	0xFFD
  3456                           pclath	equ	0xFFA
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           prodh	equ	0xFF4
  3462                           prodl	equ	0xFF3
  3463                           intcon	equ	0xFF2
  3464                           intcon2	equ	0xFF1
  3465                           postinc0	equ	0xFEE
  3466                           wreg	equ	0xFE8
  3467                           indf1	equ	0xFE7
  3468                           plusw1	equ	0xFE3
  3469                           fsr1h	equ	0xFE2
  3470                           fsr1l	equ	0xFE1
  3471                           indf2	equ	0xFDF
  3472                           postinc2	equ	0xFDE
  3473                           postdec2	equ	0xFDD
  3474                           plusw2	equ	0xFDB
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function _bmp085Calibration *****************
  3480 ;; Defined at:
  3481 ;;		line 107 in file "bmp180.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;Total ram usage:        0 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    6
  3502 ;; This function calls:
  3503 ;;		_bmp085ReadInt
  3504 ;; This function is called by:
  3505 ;;		_SYSTEM_Initialize
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text6
  3510  00190C                     __ptext6:
  3511                           	opt stack 0
  3512  00190C                     _bmp085Calibration:
  3513                           	opt stack 23
  3514                           
  3515                           ;bmp180.c: 111: ac1 = bmp085ReadInt(0xAA);
  3516                           
  3517                           ;incstack = 0
  3518  00190C  0EAA               	movlw	170
  3519  00190E  ECC9  F010         	call	_bmp085ReadInt
  3520  001912  C012  F056         	movff	?_bmp085ReadInt,_ac1
  3521  001916  C013  F057         	movff	?_bmp085ReadInt+1,_ac1+1
  3522                           
  3523                           ;bmp180.c: 112: ac2 = bmp085ReadInt(0xAC);
  3524  00191A  0EAC               	movlw	172
  3525  00191C  ECC9  F010         	call	_bmp085ReadInt
  3526  001920  C012  F0A9         	movff	?_bmp085ReadInt,_ac2
  3527  001924  C013  F0AA         	movff	?_bmp085ReadInt+1,_ac2+1
  3528                           
  3529                           ;bmp180.c: 113: ac3 = bmp085ReadInt(0xAE);
  3530  001928  0EAE               	movlw	174
  3531  00192A  ECC9  F010         	call	_bmp085ReadInt
  3532  00192E  C012  F0A7         	movff	?_bmp085ReadInt,_ac3
  3533  001932  C013  F0A8         	movff	?_bmp085ReadInt+1,_ac3+1
  3534                           
  3535                           ;bmp180.c: 114: ac4 = bmp085ReadInt(0xB0);
  3536  001936  0EB0               	movlw	176
  3537  001938  ECC9  F010         	call	_bmp085ReadInt
  3538  00193C  C012  F0A5         	movff	?_bmp085ReadInt,_ac4
  3539  001940  C013  F0A6         	movff	?_bmp085ReadInt+1,_ac4+1
  3540                           
  3541                           ;bmp180.c: 115: ac5 = bmp085ReadInt(0xB2);
  3542  001944  0EB2               	movlw	178
  3543  001946  ECC9  F010         	call	_bmp085ReadInt
  3544  00194A  C012  F0A3         	movff	?_bmp085ReadInt,_ac5
  3545  00194E  C013  F0A4         	movff	?_bmp085ReadInt+1,_ac5+1
  3546                           
  3547                           ;bmp180.c: 116: ac6 = bmp085ReadInt(0xB4);
  3548  001952  0EB4               	movlw	180
  3549  001954  ECC9  F010         	call	_bmp085ReadInt
  3550  001958  C012  F0A1         	movff	?_bmp085ReadInt,_ac6
  3551  00195C  C013  F0A2         	movff	?_bmp085ReadInt+1,_ac6+1
  3552                           
  3553                           ;bmp180.c: 117: b1 = bmp085ReadInt(0xB6);
  3554  001960  0EB6               	movlw	182
  3555  001962  ECC9  F010         	call	_bmp085ReadInt
  3556  001966  C012  F09F         	movff	?_bmp085ReadInt,_b1
  3557  00196A  C013  F0A0         	movff	?_bmp085ReadInt+1,_b1+1
  3558                           
  3559                           ;bmp180.c: 118: b2 = bmp085ReadInt(0xB8);
  3560  00196E  0EB8               	movlw	184
  3561  001970  ECC9  F010         	call	_bmp085ReadInt
  3562  001974  C012  F09D         	movff	?_bmp085ReadInt,_b2
  3563  001978  C013  F09E         	movff	?_bmp085ReadInt+1,_b2+1
  3564                           
  3565                           ;bmp180.c: 119: mb = bmp085ReadInt(0xBA);
  3566  00197C  0EBA               	movlw	186
  3567  00197E  ECC9  F010         	call	_bmp085ReadInt
  3568                           
  3569                           ;bmp180.c: 120: mc = bmp085ReadInt(0xBC);
  3570  001982  0EBC               	movlw	188
  3571  001984  ECC9  F010         	call	_bmp085ReadInt
  3572  001988  C012  F09B         	movff	?_bmp085ReadInt,_mc
  3573  00198C  C013  F09C         	movff	?_bmp085ReadInt+1,_mc+1
  3574                           
  3575                           ;bmp180.c: 121: md = bmp085ReadInt(0xBE);
  3576  001990  0EBE               	movlw	190
  3577  001992  ECC9  F010         	call	_bmp085ReadInt
  3578  001996  C012  F099         	movff	?_bmp085ReadInt,_md
  3579  00199A  C013  F09A         	movff	?_bmp085ReadInt+1,_md+1
  3580  00199E  0012               	return		;funcret
  3581  0019A0                     __end_of_bmp085Calibration:
  3582                           	opt stack 0
  3583                           tosu	equ	0xFFF
  3584                           tosh	equ	0xFFE
  3585                           tosl	equ	0xFFD
  3586                           pclath	equ	0xFFA
  3587                           tblptru	equ	0xFF8
  3588                           tblptrh	equ	0xFF7
  3589                           tblptrl	equ	0xFF6
  3590                           tablat	equ	0xFF5
  3591                           prodh	equ	0xFF4
  3592                           prodl	equ	0xFF3
  3593                           intcon	equ	0xFF2
  3594                           intcon2	equ	0xFF1
  3595                           postinc0	equ	0xFEE
  3596                           wreg	equ	0xFE8
  3597                           indf1	equ	0xFE7
  3598                           plusw1	equ	0xFE3
  3599                           fsr1h	equ	0xFE2
  3600                           fsr1l	equ	0xFE1
  3601                           indf2	equ	0xFDF
  3602                           postinc2	equ	0xFDE
  3603                           postdec2	equ	0xFDD
  3604                           plusw2	equ	0xFDB
  3605                           fsr2h	equ	0xFDA
  3606                           fsr2l	equ	0xFD9
  3607                           status	equ	0xFD8
  3608                           
  3609 ;; *************** function _TMRInit *****************
  3610 ;; Defined at:
  3611 ;;		line 5 in file "timer.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;		None
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;		None
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  1    wreg      void 
  3618 ;; Registers used:
  3619 ;;		wreg, status,2
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;Total ram usage:        0 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    3
  3632 ;; This function calls:
  3633 ;;		Nothing
  3634 ;; This function is called by:
  3635 ;;		_SYSTEM_Initialize
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	text7
  3640  00265E                     __ptext7:
  3641                           	opt stack 0
  3642  00265E                     _TMRInit:
  3643                           	opt stack 26
  3644                           
  3645                           ;timer.c: 7: T1CONbits.TMR1ON = 0;
  3646                           
  3647                           ;incstack = 0
  3648  00265E  90CD               	bcf	4045,0,c	;volatile
  3649                           
  3650                           ;timer.c: 8: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  3651  002660  0E3C               	movlw	60
  3652  002662  6ECF               	movwf	4047,c	;volatile
  3653                           
  3654                           ;timer.c: 9: TMR1L = ((unsigned char)((15536)&0xFF));
  3655  002664  0EB0               	movlw	176
  3656  002666  6ECE               	movwf	4046,c	;volatile
  3657                           
  3658                           ;timer.c: 10: PIE1bits.TMR1IE = 1;
  3659  002668  809D               	bsf	3997,0,c	;volatile
  3660                           
  3661                           ;timer.c: 12: T3CONbits.TMR3CS = 0;
  3662  00266A  92B1               	bcf	4017,1,c	;volatile
  3663                           
  3664                           ;timer.c: 13: T3CONbits.TMR3ON = 1;
  3665  00266C  80B1               	bsf	4017,0,c	;volatile
  3666                           
  3667                           ;timer.c: 14: PIE2bits.TMR3IE = 1;
  3668  00266E  82A0               	bsf	4000,1,c	;volatile
  3669                           
  3670                           ;timer.c: 15: TMR3H = ((unsigned char)(((60536)>>8)&0xFF));
  3671  002670  0EEC               	movlw	236
  3672  002672  6EB3               	movwf	4019,c	;volatile
  3673                           
  3674                           ;timer.c: 16: TMR3L = ((unsigned char)((60536)&0xFF));
  3675  002674  0E78               	movlw	120
  3676  002676  6EB2               	movwf	4018,c	;volatile
  3677  002678  0C78               	retlw	120	;funcret
  3678  00267A                     __end_of_TMRInit:
  3679                           	opt stack 0
  3680                           tosu	equ	0xFFF
  3681                           tosh	equ	0xFFE
  3682                           tosl	equ	0xFFD
  3683                           pclath	equ	0xFFA
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           prodh	equ	0xFF4
  3689                           prodl	equ	0xFF3
  3690                           intcon	equ	0xFF2
  3691                           intcon2	equ	0xFF1
  3692                           postinc0	equ	0xFEE
  3693                           wreg	equ	0xFE8
  3694                           indf1	equ	0xFE7
  3695                           plusw1	equ	0xFE3
  3696                           fsr1h	equ	0xFE2
  3697                           fsr1l	equ	0xFE1
  3698                           indf2	equ	0xFDF
  3699                           postinc2	equ	0xFDE
  3700                           postdec2	equ	0xFDD
  3701                           plusw2	equ	0xFDB
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function _RTOS_Init *****************
  3707 ;; Defined at:
  3708 ;;		line 10 in file "dispatcher.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;		None
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      void 
  3715 ;; Registers used:
  3716 ;;		wreg, status,2
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;Total ram usage:        0 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    3
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_SYSTEM_Initialize
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text8
  3737  0027C4                     __ptext8:
  3738                           	opt stack 0
  3739  0027C4                     _RTOS_Init:
  3740                           	opt stack 26
  3741                           
  3742                           ;dispatcher.c: 12: T0CON = 0b11000111;
  3743                           
  3744                           ;incstack = 0
  3745  0027C4  0EC7               	movlw	199
  3746  0027C6  6ED5               	movwf	4053,c	;volatile
  3747                           
  3748                           ;dispatcher.c: 13: INTCONbits.TMR0IE = 1;
  3749  0027C8  8AF2               	bsf	intcon,5,c	;volatile
  3750                           
  3751                           ;dispatcher.c: 14: TMR0 = 61;
  3752  0027CA  6AD7               	clrf	4055,c	;volatile
  3753  0027CC  0E3D               	movlw	61
  3754  0027CE  6ED6               	movwf	4054,c	;volatile
  3755                           
  3756                           ;dispatcher.c: 16: arrayTail = 0;
  3757  0027D0  6A60               	clrf	_arrayTail,c	;volatile
  3758  0027D2  0012               	return		;funcret
  3759  0027D4                     __end_of_RTOS_Init:
  3760                           	opt stack 0
  3761                           tosu	equ	0xFFF
  3762                           tosh	equ	0xFFE
  3763                           tosl	equ	0xFFD
  3764                           pclath	equ	0xFFA
  3765                           tblptru	equ	0xFF8
  3766                           tblptrh	equ	0xFF7
  3767                           tblptrl	equ	0xFF6
  3768                           tablat	equ	0xFF5
  3769                           prodh	equ	0xFF4
  3770                           prodl	equ	0xFF3
  3771                           intcon	equ	0xFF2
  3772                           intcon2	equ	0xFF1
  3773                           postinc0	equ	0xFEE
  3774                           wreg	equ	0xFE8
  3775                           indf1	equ	0xFE7
  3776                           plusw1	equ	0xFE3
  3777                           fsr1h	equ	0xFE2
  3778                           fsr1l	equ	0xFE1
  3779                           indf2	equ	0xFDF
  3780                           postinc2	equ	0xFDE
  3781                           postdec2	equ	0xFDD
  3782                           plusw2	equ	0xFDB
  3783                           fsr2h	equ	0xFDA
  3784                           fsr2l	equ	0xFD9
  3785                           status	equ	0xFD8
  3786                           
  3787 ;; *************** function _Port_Init *****************
  3788 ;; Defined at:
  3789 ;;		line 84 in file "init.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;		None
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;		None
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, status,2, status,0
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;Total ram usage:        0 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; Hardware stack levels required when called:    3
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_SYSTEM_Initialize
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text9
  3818  00267A                     __ptext9:
  3819                           	opt stack 0
  3820  00267A                     _Port_Init:
  3821                           	opt stack 26
  3822                           
  3823                           ;init.c: 86: LATC = 0x00;
  3824                           
  3825                           ;incstack = 0
  3826  00267A  6A8B               	clrf	3979,c	;volatile
  3827                           
  3828                           ;init.c: 87: TRISC = 0b00011000;
  3829  00267C  0E18               	movlw	24
  3830  00267E  6E94               	movwf	3988,c	;volatile
  3831                           
  3832                           ;init.c: 88: LATB = 0x00;
  3833  002680  6A8A               	clrf	3978,c	;volatile
  3834                           
  3835                           ;init.c: 89: TRISB = 0b00011111;
  3836  002682  0E1F               	movlw	31
  3837  002684  6E93               	movwf	3987,c	;volatile
  3838                           
  3839                           ;init.c: 90: INTCON2 &= (~(1<<7));
  3840  002686  9EF1               	bcf	intcon2,7,c	;volatile
  3841                           
  3842                           ;init.c: 91: LATD = 0x00;
  3843  002688  6A8C               	clrf	3980,c	;volatile
  3844                           
  3845                           ;init.c: 92: TRISD = 0x00;
  3846  00268A  6A95               	clrf	3989,c	;volatile
  3847                           
  3848                           ;init.c: 93: INTCON2bits.INTEDG0 = 1;
  3849  00268C  8CF1               	bsf	intcon2,6,c	;volatile
  3850                           
  3851                           ;init.c: 94: INTCONbits.INT0IF = 0;
  3852  00268E  92F2               	bcf	intcon,1,c	;volatile
  3853                           
  3854                           ;init.c: 95: INTCONbits.INT0IE = 1;
  3855  002690  88F2               	bsf	intcon,4,c	;volatile
  3856                           
  3857                           ;init.c: 96: PORTCbits.RC0 = 1;
  3858  002692  8082               	bsf	3970,0,c	;volatile
  3859  002694  0012               	return		;funcret
  3860  002696                     __end_of_Port_Init:
  3861                           	opt stack 0
  3862                           tosu	equ	0xFFF
  3863                           tosh	equ	0xFFE
  3864                           tosl	equ	0xFFD
  3865                           pclath	equ	0xFFA
  3866                           tblptru	equ	0xFF8
  3867                           tblptrh	equ	0xFF7
  3868                           tblptrl	equ	0xFF6
  3869                           tablat	equ	0xFF5
  3870                           prodh	equ	0xFF4
  3871                           prodl	equ	0xFF3
  3872                           intcon	equ	0xFF2
  3873                           intcon2	equ	0xFF1
  3874                           postinc0	equ	0xFEE
  3875                           wreg	equ	0xFE8
  3876                           indf1	equ	0xFE7
  3877                           plusw1	equ	0xFE3
  3878                           fsr1h	equ	0xFE2
  3879                           fsr1l	equ	0xFE1
  3880                           indf2	equ	0xFDF
  3881                           postinc2	equ	0xFDE
  3882                           postdec2	equ	0xFDD
  3883                           plusw2	equ	0xFDB
  3884                           fsr2h	equ	0xFDA
  3885                           fsr2l	equ	0xFD9
  3886                           status	equ	0xFD8
  3887                           
  3888 ;; *************** function _Interrupt_Init *****************
  3889 ;; Defined at:
  3890 ;;		line 99 in file "init.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		None
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    3
  3911 ;; This function calls:
  3912 ;;		Nothing
  3913 ;; This function is called by:
  3914 ;;		_SYSTEM_Initialize
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text10
  3919  00281C                     __ptext10:
  3920                           	opt stack 0
  3921  00281C                     _Interrupt_Init:
  3922                           	opt stack 26
  3923                           
  3924                           ;init.c: 101: (INTCONbits.GIE = 1);
  3925                           
  3926                           ;incstack = 0
  3927  00281C  8EF2               	bsf	intcon,7,c	;volatile
  3928                           
  3929                           ;init.c: 102: (INTCONbits.PEIE = 1);
  3930  00281E  8CF2               	bsf	intcon,6,c	;volatile
  3931  002820  0012               	return		;funcret
  3932  002822                     __end_of_Interrupt_Init:
  3933                           	opt stack 0
  3934                           tosu	equ	0xFFF
  3935                           tosh	equ	0xFFE
  3936                           tosl	equ	0xFFD
  3937                           pclath	equ	0xFFA
  3938                           tblptru	equ	0xFF8
  3939                           tblptrh	equ	0xFF7
  3940                           tblptrl	equ	0xFF6
  3941                           tablat	equ	0xFF5
  3942                           prodh	equ	0xFF4
  3943                           prodl	equ	0xFF3
  3944                           intcon	equ	0xFF2
  3945                           intcon2	equ	0xFF1
  3946                           postinc0	equ	0xFEE
  3947                           wreg	equ	0xFE8
  3948                           indf1	equ	0xFE7
  3949                           plusw1	equ	0xFE3
  3950                           fsr1h	equ	0xFE2
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           postinc2	equ	0xFDE
  3954                           postdec2	equ	0xFDD
  3955                           plusw2	equ	0xFDB
  3956                           fsr2h	equ	0xFDA
  3957                           fsr2l	equ	0xFD9
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function _Init7221 *****************
  3961 ;; Defined at:
  3962 ;;		line 77 in file "max7221.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, status,0, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;Total ram usage:        0 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    5
  3983 ;; This function calls:
  3984 ;;		_Cmd7221
  3985 ;; This function is called by:
  3986 ;;		_SYSTEM_Initialize
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text11
  3991  00240E                     __ptext11:
  3992                           	opt stack 0
  3993  00240E                     _Init7221:
  3994                           	opt stack 24
  3995                           
  3996                           ;max7221.c: 79: LATDbits.LD0 = 1;
  3997                           
  3998                           ;incstack = 0
  3999  00240E  808C               	bsf	3980,0,c	;volatile
  4000                           
  4001                           ;max7221.c: 81: Cmd7221(0x0C,1);
  4002  002410  0E01               	movlw	1
  4003  002412  6E11               	movwf	Cmd7221@val,c
  4004  002414  0E0C               	movlw	12
  4005  002416  EC20  F013         	call	_Cmd7221
  4006                           
  4007                           ;max7221.c: 82: Cmd7221(0x09,0);
  4008  00241A  6A11               	clrf	Cmd7221@val,c
  4009  00241C  0E09               	movlw	9
  4010  00241E  EC20  F013         	call	_Cmd7221
  4011                           
  4012                           ;max7221.c: 83: Cmd7221(0x0B,7);
  4013  002422  0E07               	movlw	7
  4014  002424  6E11               	movwf	Cmd7221@val,c
  4015  002426  0E0B               	movlw	11
  4016  002428  EC20  F013         	call	_Cmd7221
  4017                           
  4018                           ;max7221.c: 84: Cmd7221(0x0A,0x01);
  4019  00242C  0E01               	movlw	1
  4020  00242E  6E11               	movwf	Cmd7221@val,c
  4021  002430  0E0A               	movlw	10
  4022  002432  EC20  F013         	call	_Cmd7221
  4023                           
  4024                           ;max7221.c: 85: Cmd7221(0x0F,0);
  4025  002436  6A11               	clrf	Cmd7221@val,c
  4026  002438  0E0F               	movlw	15
  4027  00243A  EF20  F013         	goto	_Cmd7221
  4028  00243E                     __end_of_Init7221:
  4029                           	opt stack 0
  4030                           tosu	equ	0xFFF
  4031                           tosh	equ	0xFFE
  4032                           tosl	equ	0xFFD
  4033                           pclath	equ	0xFFA
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodh	equ	0xFF4
  4039                           prodl	equ	0xFF3
  4040                           intcon	equ	0xFF2
  4041                           intcon2	equ	0xFF1
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           indf1	equ	0xFE7
  4045                           plusw1	equ	0xFE3
  4046                           fsr1h	equ	0xFE2
  4047                           fsr1l	equ	0xFE1
  4048                           indf2	equ	0xFDF
  4049                           postinc2	equ	0xFDE
  4050                           postdec2	equ	0xFDD
  4051                           plusw2	equ	0xFDB
  4052                           fsr2h	equ	0xFDA
  4053                           fsr2l	equ	0xFD9
  4054                           status	equ	0xFD8
  4055                           
  4056 ;; *************** function _Cmd7221 *****************
  4057 ;; Defined at:
  4058 ;;		line 33 in file "max7221.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  adr             1    wreg     unsigned char 
  4061 ;;  val             1   16[COMRAM] unsigned char 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  adr             1   17[COMRAM] unsigned char 
  4064 ;;  i               1   18[COMRAM] unsigned char 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4074 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;Total ram usage:        3 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    4
  4081 ;; This function calls:
  4082 ;;		_Send_Byte_7221
  4083 ;; This function is called by:
  4084 ;;		_Init7221
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           	psect	text12
  4089  002640                     __ptext12:
  4090                           	opt stack 0
  4091  002640                     _Cmd7221:
  4092                           	opt stack 24
  4093                           
  4094                           ;incstack = 0
  4095                           ;Cmd7221@adr stored from wreg
  4096  002640  6E12               	movwf	Cmd7221@adr,c
  4097                           
  4098                           ;max7221.c: 35: uint8_t i;
  4099                           ;max7221.c: 36: LATDbits.LD0 = 0;
  4100  002642  908C               	bcf	3980,0,c	;volatile
  4101                           
  4102                           ;max7221.c: 37: for (i = 0; i < 4; i++ )
  4103  002644  6A13               	clrf	Cmd7221@i,c
  4104  002646                     l5765:
  4105                           
  4106                           ;max7221.c: 38: {
  4107                           ;max7221.c: 39: Send_Byte_7221(adr);
  4108  002646  5012               	movf	Cmd7221@adr,w,c
  4109  002648  ECEA  F012         	call	_Send_Byte_7221
  4110                           
  4111                           ;max7221.c: 40: Send_Byte_7221(val);
  4112  00264C  5011               	movf	Cmd7221@val,w,c
  4113  00264E  ECEA  F012         	call	_Send_Byte_7221
  4114  002652  2A13               	incf	Cmd7221@i,f,c
  4115  002654  0E03               	movlw	3
  4116  002656  6413               	cpfsgt	Cmd7221@i,c
  4117  002658  D7F6               	goto	l5765
  4118                           
  4119                           ;max7221.c: 42: }
  4120                           ;max7221.c: 44: LATDbits.LD0 = 1;
  4121  00265A  808C               	bsf	3980,0,c	;volatile
  4122  00265C  0C03               	retlw	3	;funcret
  4123  00265E                     __end_of_Cmd7221:
  4124                           	opt stack 0
  4125                           tosu	equ	0xFFF
  4126                           tosh	equ	0xFFE
  4127                           tosl	equ	0xFFD
  4128                           pclath	equ	0xFFA
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           intcon	equ	0xFF2
  4136                           intcon2	equ	0xFF1
  4137                           postinc0	equ	0xFEE
  4138                           wreg	equ	0xFE8
  4139                           indf1	equ	0xFE7
  4140                           plusw1	equ	0xFE3
  4141                           fsr1h	equ	0xFE2
  4142                           fsr1l	equ	0xFE1
  4143                           indf2	equ	0xFDF
  4144                           postinc2	equ	0xFDE
  4145                           postdec2	equ	0xFDD
  4146                           plusw2	equ	0xFDB
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           
  4151 ;; *************** function _I2C_Init *****************
  4152 ;; Defined at:
  4153 ;;		line 11 in file "i2c.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  2   50[None  ] int 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2, status,0
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;Total ram usage:        0 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    3
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_SYSTEM_Initialize
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text13
  4182  00273C                     __ptext13:
  4183                           	opt stack 0
  4184  00273C                     _I2C_Init:
  4185                           	opt stack 26
  4186                           
  4187                           ;i2c.c: 13: TRISC |= 0b00011000;
  4188                           
  4189                           ;incstack = 0
  4190  00273C  0E18               	movlw	24
  4191  00273E  1294               	iorwf	3988,f,c	;volatile
  4192                           
  4193                           ;i2c.c: 14: SSPCON1 = 0b00101000;
  4194  002740  0E28               	movlw	40
  4195  002742  6EC6               	movwf	4038,c	;volatile
  4196                           
  4197                           ;i2c.c: 15: SSPSTAT = 0b00000000;
  4198  002744  6AC7               	clrf	4039,c	;volatile
  4199                           
  4200                           ;i2c.c: 16: SSPADD = 0x63;
  4201  002746  0E63               	movlw	99
  4202  002748  6EC8               	movwf	4040,c	;volatile
  4203                           
  4204                           ;i2c.c: 18: PEN = 1;
  4205  00274A  84C5               	bsf	4037,2,c	;volatile
  4206  00274C                     l178:
  4207  00274C  A4C5               	btfss	4037,2,c	;volatile
  4208  00274E  0012               	return		;funcret
  4209  002750  D7FD               	goto	l178
  4210  002752                     __end_of_I2C_Init:
  4211                           	opt stack 0
  4212                           tosu	equ	0xFFF
  4213                           tosh	equ	0xFFE
  4214                           tosl	equ	0xFFD
  4215                           pclath	equ	0xFFA
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           prodh	equ	0xFF4
  4221                           prodl	equ	0xFF3
  4222                           intcon	equ	0xFF2
  4223                           intcon2	equ	0xFF1
  4224                           postinc0	equ	0xFEE
  4225                           wreg	equ	0xFE8
  4226                           indf1	equ	0xFE7
  4227                           plusw1	equ	0xFE3
  4228                           fsr1h	equ	0xFE2
  4229                           fsr1l	equ	0xFE1
  4230                           indf2	equ	0xFDF
  4231                           postinc2	equ	0xFDE
  4232                           postdec2	equ	0xFDD
  4233                           plusw2	equ	0xFDB
  4234                           fsr2h	equ	0xFDA
  4235                           fsr2l	equ	0xFD9
  4236                           status	equ	0xFD8
  4237                           
  4238 ;; *************** function _DS3231_init *****************
  4239 ;; Defined at:
  4240 ;;		line 40 in file "ds3231.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;		None
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;		None
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, status,2, status,0, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;Total ram usage:        0 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    6
  4261 ;; This function calls:
  4262 ;;		_DS3231_Write
  4263 ;; This function is called by:
  4264 ;;		_SYSTEM_Initialize
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           	psect	text14
  4269  00278E                     __ptext14:
  4270                           	opt stack 0
  4271  00278E                     _DS3231_init:
  4272                           	opt stack 23
  4273                           
  4274                           ;ds3231.c: 42: DS3231_Write(0x0E, 0x00);
  4275                           
  4276                           ;incstack = 0
  4277  00278E  6A1A               	clrf	DS3231_Write@value,c
  4278  002790  0E0E               	movlw	14
  4279  002792  EC59  F013         	call	_DS3231_Write
  4280                           
  4281                           ;ds3231.c: 43: DS3231_Write(0x0F, 0x08);
  4282  002796  0E08               	movlw	8
  4283  002798  6E1A               	movwf	DS3231_Write@value,c
  4284  00279A  0E0F               	movlw	15
  4285  00279C  EF59  F013         	goto	_DS3231_Write
  4286  0027A0                     __end_of_DS3231_init:
  4287                           	opt stack 0
  4288                           tosu	equ	0xFFF
  4289                           tosh	equ	0xFFE
  4290                           tosl	equ	0xFFD
  4291                           pclath	equ	0xFFA
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           intcon	equ	0xFF2
  4299                           intcon2	equ	0xFF1
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           indf1	equ	0xFE7
  4303                           plusw1	equ	0xFE3
  4304                           fsr1h	equ	0xFE2
  4305                           fsr1l	equ	0xFE1
  4306                           indf2	equ	0xFDF
  4307                           postinc2	equ	0xFDE
  4308                           postdec2	equ	0xFDD
  4309                           plusw2	equ	0xFDB
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _RTOS_DispatchTask *****************
  4315 ;; Defined at:
  4316 ;;		line 84 in file "dispatcher.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  function        2    9[BANK0 ] PTR FTN()void 
  4321 ;;		 -> pressure(1), home_temp(1), set_font_set(1), time_set_dy(1), 
  4322 ;;		 -> time_set_dt(1), time_set_mt(1), time_set_yr(1), default_state(1), 
  4323 ;;		 -> time_set_hr(1), time_set_min(1), GetTime(1), key_press(1), 
  4324 ;;		 -> time_led(1), 
  4325 ;;  i               1   12[BANK0 ] unsigned char 
  4326 ;;  j               1   11[BANK0 ] unsigned char 
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  1    wreg      void 
  4329 ;; Registers used:
  4330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 3F/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;Total ram usage:        8 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; Hardware stack levels required when called:    9
  4343 ;; This function calls:
  4344 ;;		_GetTime
  4345 ;;		_RTOS_DeleteTask
  4346 ;;		_default_state
  4347 ;;		_home_temp
  4348 ;;		_key_press
  4349 ;;		_pressure
  4350 ;;		_set_font_set
  4351 ;;		_time_led
  4352 ;;		_time_set_dt
  4353 ;;		_time_set_dy
  4354 ;;		_time_set_hr
  4355 ;;		_time_set_min
  4356 ;;		_time_set_mt
  4357 ;;		_time_set_yr
  4358 ;; This function is called by:
  4359 ;;		_main
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text15
  4364  0015C0                     __ptext15:
  4365                           	opt stack 0
  4366  0015C0                     _RTOS_DispatchTask:
  4367                           	opt stack 21
  4368                           
  4369                           ;dispatcher.c: 86: uint8_t i, j;
  4370                           ;dispatcher.c: 87: void (*function) (void);
  4371                           ;dispatcher.c: 89: if (Timer0Interrupt)
  4372                           
  4373                           ;incstack = 0
  4374  0015C0  505F               	movf	_Timer0Interrupt,w,c
  4375  0015C2  E019               	bz	l261
  4376                           
  4377                           ;dispatcher.c: 90: {
  4378                           ;dispatcher.c: 91: Timer0Interrupt = 0;
  4379  0015C4  6A5F               	clrf	_Timer0Interrupt,c
  4380                           
  4381                           ;dispatcher.c: 92: for (j=0; j<arrayTail; j++)
  4382  0015C6  0100               	movlb	0	; () banked
  4383  0015C8  6BD6               	clrf	RTOS_DispatchTask@j& (0+255),b
  4384  0015CA  D012               	goto	l6785
  4385  0015CC                     l6777:
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;dispatcher.c: 93: {
  4389                           ;dispatcher.c: 94: if (TaskArray[j].delay == 0)
  4390  0015CC  51D6               	movf	RTOS_DispatchTask@j& (0+255),w,b
  4391  0015CE  D861               	call	PL22	;call to abstracted procedure
  4392  0015D0  50DE               	movf	postinc2,w,c
  4393  0015D2  10DE               	iorwf	postinc2,w,c
  4394  0015D4  E107               	bnz	l6781
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;dispatcher.c: 95: TaskArray[j].run = 1;
  4398  0015D6  51D6               	movf	RTOS_DispatchTask@j& (0+255),w,b
  4399  0015D8  0D08               	mullw	8
  4400  0015DA  D863               	call	PL36	;call to abstracted procedure
  4401  0015DC  0E01               	movlw	1
  4402  0015DE  6EDE               	movwf	postinc2,c
  4403  0015E0  6ADD               	clrf	postdec2,c
  4404  0015E2  D005               	goto	l6783
  4405  0015E4                     l6781:
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;dispatcher.c: 96: else TaskArray[j].delay--;
  4409  0015E4  51D6               	movf	RTOS_DispatchTask@j& (0+255),w,b
  4410  0015E6  D855               	call	PL22	;call to abstracted procedure
  4411  0015E8  06DE               	decf	postinc2,f,c
  4412  0015EA  0E00               	movlw	0
  4413  0015EC  5ADD               	subwfb	postdec2,f,c
  4414  0015EE                     l6783:
  4415                           
  4416                           ; BSR set to: 0
  4417  0015EE  2BD6               	incf	RTOS_DispatchTask@j& (0+255),f,b
  4418  0015F0                     l6785:
  4419                           
  4420                           ; BSR set to: 0
  4421  0015F0  5060               	movf	_arrayTail,w,c	;volatile
  4422  0015F2  5DD6               	subwf	RTOS_DispatchTask@j& (0+255),w,b
  4423  0015F4  E3EB               	bnc	l6777
  4424  0015F6                     l261:
  4425                           
  4426                           ;dispatcher.c: 97: }
  4427                           ;dispatcher.c: 98: }
  4428                           ;dispatcher.c: 100: for (i=0; i<arrayTail; i++)
  4429  0015F6  0100               	movlb	0	; () banked
  4430  0015F8  6BD7               	clrf	RTOS_DispatchTask@i& (0+255),b
  4431  0015FA  D047               	goto	l6801
  4432  0015FC                     l6787:
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;dispatcher.c: 101: {
  4436                           ;dispatcher.c: 102: if (TaskArray[i].run == 1)
  4437  0015FC  51D7               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4438  0015FE  0D08               	mullw	8
  4439  001600  D850               	call	PL36	;call to abstracted procedure
  4440  001602  04DE               	decf	postinc2,w,c
  4441  001604  10DE               	iorwf	postinc2,w,c
  4442  001606  E13F               	bnz	l6799
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;dispatcher.c: 103: {
  4446                           ;dispatcher.c: 104: function = TaskArray[i].pFunc;
  4447  001608  51D7               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4448  00160A  EC5F  F00C         	call	PL26	;call to abstracted procedure
  4449  00160E  CFDE F0D4          	movff	postinc2,RTOS_DispatchTask@function
  4450  001612  CFDD F0D5          	movff	postdec2,RTOS_DispatchTask@function+1
  4451                           
  4452                           ;dispatcher.c: 106: if(TaskArray[i].period == 0)
  4453  001616  51D7               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4454  001618  EC71  F00C         	call	PL32	;call to abstracted procedure
  4455  00161C  50DE               	movf	postinc2,w,c
  4456  00161E  10DE               	iorwf	postinc2,w,c
  4457  001620  E10A               	bnz	l6793
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;dispatcher.c: 107: {
  4461                           ;dispatcher.c: 108: RTOS_DeleteTask(TaskArray[i].pFunc);
  4462  001622  51D7               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4463  001624  EC5F  F00C         	call	PL26	;call to abstracted procedure
  4464  001628  CFDE F00F          	movff	postinc2,RTOS_DeleteTask@taskFunc
  4465  00162C  CFDD F010          	movff	postdec2,RTOS_DeleteTask@taskFunc+1
  4466  001630  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  4467                           
  4468                           ;dispatcher.c: 110: }
  4469  001634  D01B               	goto	l6797
  4470  001636                     l6793:
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;dispatcher.c: 111: else
  4474                           ;dispatcher.c: 112: {
  4475                           ;dispatcher.c: 113: TaskArray[i].run = 0;
  4476  001636  51D7               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4477  001638  EC67  F00C         	call	PL28	;call to abstracted procedure
  4478                           
  4479                           ;dispatcher.c: 114: if(!TaskArray[i].delay)
  4480  00163C  51D7               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4481  00163E  D829               	call	PL22	;call to abstracted procedure
  4482  001640  50DE               	movf	postinc2,w,c
  4483  001642  10DE               	iorwf	postinc2,w,c
  4484  001644  E113               	bnz	l6797
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;dispatcher.c: 115: {
  4488                           ;dispatcher.c: 116: TaskArray[i].delay = TaskArray[i].period-1;
  4489  001646  69D0               	setf	??_RTOS_DispatchTask& (0+255),b
  4490  001648  69D1               	setf	(??_RTOS_DispatchTask+1)& (0+255),b
  4491  00164A  51D7               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4492  00164C  EC71  F00C         	call	PL32	;call to abstracted procedure
  4493  001650  CFDE F0D2          	movff	postinc2,??_RTOS_DispatchTask+2
  4494  001654  CFDD F0D3          	movff	postdec2,??_RTOS_DispatchTask+3
  4495  001658  51D0               	movf	??_RTOS_DispatchTask& (0+255),w,b
  4496  00165A  27D2               	addwf	(??_RTOS_DispatchTask+2)& (0+255),f,b
  4497  00165C  51D1               	movf	(??_RTOS_DispatchTask+1)& (0+255),w,b
  4498  00165E  23D3               	addwfc	(??_RTOS_DispatchTask+3)& (0+255),f,b
  4499  001660  51D7               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4500  001662  D817               	call	PL22	;call to abstracted procedure
  4501  001664  C0D2  FFDE         	movff	??_RTOS_DispatchTask+2,postinc2
  4502  001668  C0D3  FFDD         	movff	??_RTOS_DispatchTask+3,postdec2
  4503  00166C                     l6797:
  4504                           
  4505                           ;dispatcher.c: 117: }
  4506                           ;dispatcher.c: 118: }
  4507                           ;dispatcher.c: 119: (*function)();
  4508  00166C  D801               	call	u4728
  4509  00166E  D00B               	goto	l6799
  4510  001670                     u4728:
  4511  001670  0005               	push	
  4512  001672  0100               	movlb	0	; () banked
  4513  001674  6EFA               	movwf	pclath,c
  4514  001676  51D4               	movf	RTOS_DispatchTask@function& (0+255),w,b
  4515  001678  6EFD               	movwf	tosl,c
  4516  00167A  51D5               	movf	(RTOS_DispatchTask@function+1)& (0+255),w,b
  4517  00167C  6EFE               	movwf	tosh,c
  4518  00167E  50F8               	movf	tblptru,w,c
  4519  001680  6EFF               	movwf	tosu,c
  4520  001682  50FA               	movf	pclath,w,c
  4521  001684  0012               	return		;indir
  4522  001686                     l6799:
  4523  001686  0100               	movlb	0	; () banked
  4524  001688  2BD7               	incf	RTOS_DispatchTask@i& (0+255),f,b
  4525  00168A                     l6801:
  4526                           
  4527                           ; BSR set to: 0
  4528  00168A  5060               	movf	_arrayTail,w,c	;volatile
  4529  00168C  5DD7               	subwf	RTOS_DispatchTask@i& (0+255),w,b
  4530  00168E  E3B6               	bnc	l6787
  4531                           
  4532                           ; BSR set to: 0
  4533  001690  0012               	return		;funcret
  4534  001692                     __end_of_RTOS_DispatchTask:
  4535                           	opt stack 0
  4536  001692                     PL22:
  4537                           	opt stack 27
  4538  001692  0D08               	mullw	8
  4539  001694  0E02               	movlw	low (_TaskArray+2)
  4540  001696  24F3               	addwf	prodl,w,c
  4541  001698  6ED9               	movwf	fsr2l,c
  4542  00169A  0E01               	movlw	high (_TaskArray+2)
  4543  00169C  20F4               	addwfc	prodh,w,c
  4544  00169E  6EDA               	movwf	fsr2h,c
  4545  0016A0  0012               	return	
  4546  0016A2                     __end_ofPL22:
  4547                           	opt stack 0
  4548  0016A2                     PL36:
  4549                           	opt stack 21
  4550  0016A2  0E06               	movlw	low (_TaskArray+6)
  4551  0016A4  24F3               	addwf	prodl,w,c
  4552  0016A6  6ED9               	movwf	fsr2l,c
  4553  0016A8  0E01               	movlw	high (_TaskArray+6)
  4554  0016AA  20F4               	addwfc	prodh,w,c
  4555  0016AC  6EDA               	movwf	fsr2h,c
  4556  0016AE  0012               	return	
  4557  0016B0                     __end_ofPL36:
  4558                           	opt stack 0
  4559                           tosu	equ	0xFFF
  4560                           tosh	equ	0xFFE
  4561                           tosl	equ	0xFFD
  4562                           pclath	equ	0xFFA
  4563                           tblptru	equ	0xFF8
  4564                           tblptrh	equ	0xFF7
  4565                           tblptrl	equ	0xFF6
  4566                           tablat	equ	0xFF5
  4567                           prodh	equ	0xFF4
  4568                           prodl	equ	0xFF3
  4569                           intcon	equ	0xFF2
  4570                           intcon2	equ	0xFF1
  4571                           postinc0	equ	0xFEE
  4572                           wreg	equ	0xFE8
  4573                           indf1	equ	0xFE7
  4574                           plusw1	equ	0xFE3
  4575                           fsr1h	equ	0xFE2
  4576                           fsr1l	equ	0xFE1
  4577                           indf2	equ	0xFDF
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           plusw2	equ	0xFDB
  4581                           fsr2h	equ	0xFDA
  4582                           fsr2l	equ	0xFD9
  4583                           status	equ	0xFD8
  4584                           
  4585 ;; *************** function _pressure *****************
  4586 ;; Defined at:
  4587 ;;		line 559 in file "common.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 3F/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;Total ram usage:        1 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    7
  4608 ;; This function calls:
  4609 ;;		_RTOS_DeleteTask
  4610 ;;		_RTOS_SetTask
  4611 ;;		___lbdiv
  4612 ;;		___lbmod
  4613 ;;		___lwdiv
  4614 ;;		___lwmod
  4615 ;;		_clear_matrix
  4616 ;;		_getTime
  4617 ;;		_interval_scroll_text
  4618 ;;		_pic_to_led
  4619 ;;		_putchar_down
  4620 ;;		_putchar_down_s
  4621 ;;		_scroll_left
  4622 ;;		_sprintf
  4623 ;; This function is called by:
  4624 ;;		_time_led
  4625 ;;		_RTOS_DispatchTask
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text16
  4630  000854                     __ptext16:
  4631                           	opt stack 0
  4632  000854                     _pressure:
  4633                           	opt stack 22
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;common.c: 562: switch (events)
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;incstack = 0
  4640  000854  D0C2               	goto	l6669
  4641  000856                     l6615:
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;common.c: 565: clear_matrix();
  4645  000856  ECD0  F013         	call	_clear_matrix	;wreg free
  4646                           
  4647                           ;common.c: 566: if (press)
  4648  00085A  5058               	movf	_press,w,c
  4649  00085C  1059               	iorwf	_press+1,w,c
  4650  00085E  E030               	bz	l6627
  4651                           
  4652                           ;common.c: 567: {
  4653                           ;common.c: 568: pic_to_led(3,4);
  4654  000860  D8D0               	call	PL166	;call to abstracted procedure
  4655  000862  EC1B  F00F         	call	_pic_to_led
  4656                           
  4657                           ;common.c: 569: putchar_down(11,(press / 100) % 10, pFont);
  4658  000866  6A12               	clrf	___lwdiv@divisor+1,c
  4659  000868  0E64               	movlw	100
  4660  00086A  D8C5               	call	PL102	;call to abstracted procedure
  4661  00086C  EC80  F010         	call	___lwdiv	;wreg free
  4662  000870  ECDD  F003         	call	PL48	;call to abstracted procedure
  4663  000874  ECED  F010         	call	___lwmod	;wreg free
  4664  000878  5016               	movf	?___lwmod,w,c
  4665  00087A  ECD7  F003         	call	PL20	;call to abstracted procedure
  4666  00087E  0E0B               	movlw	11
  4667  000880  EC1A  F00D         	call	_putchar_down
  4668                           
  4669                           ;common.c: 570: putchar_down(17,(press / 10) % 10, pFont);
  4670  000884  6A12               	clrf	___lwdiv@divisor+1,c
  4671  000886  0E0A               	movlw	10
  4672  000888  D8B6               	call	PL102	;call to abstracted procedure
  4673  00088A  EC80  F010         	call	___lwdiv	;wreg free
  4674  00088E  ECDD  F003         	call	PL48	;call to abstracted procedure
  4675  000892  ECED  F010         	call	___lwmod	;wreg free
  4676  000896  5016               	movf	?___lwmod,w,c
  4677  000898  ECD7  F003         	call	PL20	;call to abstracted procedure
  4678  00089C  0E11               	movlw	17
  4679  00089E  EC1A  F00D         	call	_putchar_down
  4680                           
  4681                           ;common.c: 571: putchar_down(23,press % 10, pFont);
  4682  0008A2  C058  F016         	movff	_press,___lwmod@dividend
  4683  0008A6  C059  F017         	movff	_press+1,___lwmod@dividend+1
  4684  0008AA  ECC8  F007         	call	PL92	;call to abstracted procedure
  4685  0008AE  ECED  F010         	call	___lwmod	;wreg free
  4686  0008B2  5016               	movf	?___lwmod,w,c
  4687  0008B4  ECD7  F003         	call	PL20	;call to abstracted procedure
  4688  0008B8  0E17               	movlw	23
  4689  0008BA  EC1A  F00D         	call	_putchar_down
  4690                           
  4691                           ;common.c: 572: } else
  4692  0008BE  D012               	goto	l6635
  4693  0008C0                     l6627:
  4694                           
  4695                           ;common.c: 573: {
  4696                           ;common.c: 574: pic_to_led(3,4);
  4697  0008C0  D8A0               	call	PL166	;call to abstracted procedure
  4698  0008C2  EC1B  F00F         	call	_pic_to_led
  4699                           
  4700                           ;common.c: 575: putchar_down(11,'E', &Font);
  4701  0008C6  0E45               	movlw	69
  4702  0008C8  D890               	call	PL58	;call to abstracted procedure
  4703  0008CA  0E0B               	movlw	11
  4704  0008CC  EC1A  F00D         	call	_putchar_down
  4705                           
  4706                           ;common.c: 576: putchar_down(17,'R', &Font);
  4707  0008D0  0E52               	movlw	82
  4708  0008D2  D88B               	call	PL58	;call to abstracted procedure
  4709  0008D4  0E11               	movlw	17
  4710  0008D6  EC1A  F00D         	call	_putchar_down
  4711                           
  4712                           ;common.c: 577: putchar_down(23,'R', &Font);
  4713  0008DA  0E52               	movlw	82
  4714  0008DC  D886               	call	PL58	;call to abstracted procedure
  4715  0008DE  0E17               	movlw	23
  4716  0008E0  EC1A  F00D         	call	_putchar_down
  4717  0008E4                     l6635:
  4718                           
  4719                           ;common.c: 579: }
  4720                           ;common.c: 581: events = 6;
  4721                           
  4722                           ;common.c: 582: RTOS_SetTask(default_state, 400, 0);
  4723  0008E4  EC0A  F004         	call	PL90	;call to abstracted procedure
  4724  0008E8  0E01               	movlw	1
  4725  0008EA  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  4726  0008EC  0E90               	movlw	144
  4727  0008EE  ECE5  F003         	call	PL52	;call to abstracted procedure
  4728  0008F2  EFA9  F00D         	goto	_RTOS_SetTask	;wreg free
  4729  0008F6                     l6639:
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;common.c: 590: events = 5;
  4733  0008F6  0E05               	movlw	5
  4734  0008F8  6E6F               	movwf	_events,c
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;common.c: 592: if (press)
  4738  0008FA  5058               	movf	_press,w,c
  4739  0008FC  1059               	iorwf	_press+1,w,c
  4740  0008FE  E00D               	bz	l6647
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;common.c: 593: {
  4744                           ;common.c: 594: sprintf(text_buf, "ìì.ðò.ñò.");
  4745  000900  0E78               	movlw	low _text_buf
  4746  000902  6E0F               	movwf	sprintf@sp,c
  4747  000904  0E01               	movlw	high _text_buf
  4748  000906  6E10               	movwf	sprintf@sp+1,c
  4749  000908  0EF4               	movlw	low STR_1
  4750  00090A  6E11               	movwf	sprintf@f,c
  4751  00090C  0EBF               	movlw	high STR_1
  4752  00090E  6E12               	movwf	sprintf@f+1,c
  4753  000910  ECEE  F011         	call	_sprintf	;wreg free
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;common.c: 595: interval_scroll_text();
  4757  000914  EC4C  F012         	call	_interval_scroll_text	;wreg free
  4758                           
  4759                           ;common.c: 596: }else scroll_left();
  4760  000918  D002               	goto	l6649
  4761  00091A                     l6647:
  4762                           
  4763                           ; BSR set to: 0
  4764  00091A  EC82  F00F         	call	_scroll_left	;wreg free
  4765  00091E                     l6649:
  4766                           
  4767                           ;common.c: 597: if((TTime.Thr/10) % 10)
  4768  00091E  ECEE  F003         	call	PL64	;call to abstracted procedure
  4769  000922  ECD4  F011         	call	___lbdiv
  4770  000926  ECB3  F012         	call	___lbmod
  4771  00092A  0900               	iorlw	0
  4772  00092C  E00C               	bz	l6653
  4773                           
  4774                           ;common.c: 598: putchar_down(0, (TTime.Thr/10) % 10, pFont);
  4775  00092E  ECEE  F003         	call	PL64	;call to abstracted procedure
  4776  000932  ECD4  F011         	call	___lbdiv
  4777  000936  ECB3  F012         	call	___lbmod
  4778  00093A  ECD7  F003         	call	PL20	;call to abstracted procedure
  4779  00093E  0E00               	movlw	0
  4780  000940  EC1A  F00D         	call	_putchar_down
  4781  000944  D005               	goto	l899
  4782  000946                     l6653:
  4783                           
  4784                           ;common.c: 599: else putchar_down(0, 0, &Font);
  4785  000946  6A1B               	clrf	putchar_down@symbol,c
  4786  000948  ECE9  F003         	call	PL60	;call to abstracted procedure
  4787  00094C  EC1A  F00D         	call	_putchar_down
  4788  000950                     l899:
  4789                           
  4790                           ;common.c: 600: putchar_down(6, TTime.Thr % 10, pFont);
  4791  000950  EC23  F004         	call	PL158	;call to abstracted procedure
  4792  000954  ECB3  F012         	call	___lbmod
  4793  000958  ECD7  F003         	call	PL20	;call to abstracted procedure
  4794  00095C  0E06               	movlw	6
  4795  00095E  EC1A  F00D         	call	_putchar_down
  4796                           
  4797                           ;common.c: 601: putchar_down(13, (TTime.Tmin/10) % 10, pFont);
  4798  000962  EC11  F004         	call	PL94	;call to abstracted procedure
  4799  000966  ECD4  F011         	call	___lbdiv
  4800  00096A  ECB3  F012         	call	___lbmod
  4801  00096E  ECD7  F003         	call	PL20	;call to abstracted procedure
  4802  000972  0E0D               	movlw	13
  4803  000974  EC1A  F00D         	call	_putchar_down
  4804                           
  4805                           ;common.c: 602: putchar_down(19, TTime.Tmin % 10, pFont);
  4806  000978  EC1B  F004         	call	PL152	;call to abstracted procedure
  4807  00097C  ECB3  F012         	call	___lbmod
  4808  000980  ECD7  F003         	call	PL20	;call to abstracted procedure
  4809  000984  0E13               	movlw	19
  4810  000986  EC1A  F00D         	call	_putchar_down
  4811                           
  4812                           ;common.c: 603: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  4813  00098A  ECF3  F003         	call	PL66	;call to abstracted procedure
  4814  00098E  ECB2  F00F         	call	_getTime	;wreg free
  4815                           
  4816                           ;common.c: 604: putchar_down_s(25, (TTime.Ts/10) % 10 + 1);
  4817  000992  EC16  F004         	call	PL98	;call to abstracted procedure
  4818  000996  ECD4  F011         	call	___lbdiv
  4819  00099A  ECB3  F012         	call	___lbmod
  4820  00099E  6E27               	movwf	??_pressure& (0+255),c
  4821  0009A0  2827               	incf	??_pressure,w,c
  4822  0009A2  6E17               	movwf	putchar_down_s@symbol,c
  4823  0009A4  0E19               	movlw	25
  4824  0009A6  ECD0  F00C         	call	_putchar_down_s
  4825                           
  4826                           ;common.c: 605: putchar_down_s(29, TTime.Ts % 10 + 1);
  4827  0009AA  EC1F  F004         	call	PL156	;call to abstracted procedure
  4828  0009AE  ECB3  F012         	call	___lbmod
  4829  0009B2  6E27               	movwf	??_pressure& (0+255),c
  4830  0009B4  2827               	incf	??_pressure,w,c
  4831  0009B6  6E17               	movwf	putchar_down_s@symbol,c
  4832  0009B8  0E1D               	movlw	29
  4833  0009BA  ECD0  F00C         	call	_putchar_down_s
  4834                           
  4835                           ;common.c: 606: RTOS_DeleteTask(default_state);
  4836  0009BE  EC53  F00A         	call	PL46	;call to abstracted procedure
  4837  0009C2  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  4838                           
  4839                           ;common.c: 607: RTOS_DeleteTask(pressure);
  4840  0009C6  0E54               	movlw	low _pressure
  4841  0009C8  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  4842  0009CA  0E08               	movlw	high _pressure
  4843  0009CC  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4844  0009CE  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  4845                           
  4846                           ;common.c: 608: RTOS_SetTask(time_led,0,20);
  4847  0009D2  EC49  F00A         	call	PL8	;call to abstracted procedure
  4848  0009D6  EFA9  F00D         	goto	_RTOS_SetTask	;wreg free
  4849  0009DA                     l6669:
  4850                           
  4851                           ; BSR set to: 0
  4852  0009DA  506F               	movf	_events,w,c
  4853                           
  4854                           ; Switch size 1, requested type "space"
  4855                           ; Number of cases is 3, Range of values is 4 to 6
  4856                           ; switch strategies available:
  4857                           ; Name         Instructions Cycles
  4858                           ; simple_byte           10     6 (average)
  4859                           ;	Chosen strategy is simple_byte
  4860  0009DC  0A04               	xorlw	4	; case 4
  4861  0009DE  E08B               	bz	l6639
  4862  0009E0  0A01               	xorlw	1	; case 5
  4863  0009E2  E101 D738          	bz	l6615
  4864  0009E6  0A03               	xorlw	3	; case 6
  4865  0009E8  0012               	return	
  4866  0009EA                     __end_of_pressure:
  4867                           	opt stack 0
  4868  0009EA                     PL58:
  4869                           	opt stack 22
  4870  0009EA  6E1B               	movwf	putchar_down@symbol,c
  4871  0009EC  0EC2               	movlw	low _Font
  4872  0009EE  6E1C               	movwf	putchar_down@pF,c
  4873  0009F0  0EB9               	movlw	high _Font
  4874  0009F2  6E1D               	movwf	putchar_down@pF+1,c
  4875  0009F4  0012               	return	
  4876  0009F6                     __end_ofPL58:
  4877                           	opt stack 0
  4878  0009F6                     PL102:
  4879                           	opt stack 22
  4880  0009F6  6E11               	movwf	___lwdiv@divisor,c
  4881  0009F8  C058  F00F         	movff	_press,___lwdiv@dividend
  4882  0009FC  C059  F010         	movff	_press+1,___lwdiv@dividend+1
  4883  000A00  0012               	return	
  4884  000A02                     __end_ofPL102:
  4885                           	opt stack 0
  4886  000A02                     PL166:
  4887                           	opt stack 22
  4888  000A02  0E04               	movlw	4
  4889  000A04  6E14               	movwf	pic_to_led@pic,c
  4890  000A06  0C03               	retlw	3
  4891  000A08                     __end_ofPL166:
  4892                           	opt stack 0
  4893                           tosu	equ	0xFFF
  4894                           tosh	equ	0xFFE
  4895                           tosl	equ	0xFFD
  4896                           pclath	equ	0xFFA
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           prodh	equ	0xFF4
  4902                           prodl	equ	0xFF3
  4903                           intcon	equ	0xFF2
  4904                           intcon2	equ	0xFF1
  4905                           postinc0	equ	0xFEE
  4906                           wreg	equ	0xFE8
  4907                           indf1	equ	0xFE7
  4908                           plusw1	equ	0xFE3
  4909                           fsr1h	equ	0xFE2
  4910                           fsr1l	equ	0xFE1
  4911                           indf2	equ	0xFDF
  4912                           postinc2	equ	0xFDE
  4913                           postdec2	equ	0xFDD
  4914                           plusw2	equ	0xFDB
  4915                           fsr2h	equ	0xFDA
  4916                           fsr2l	equ	0xFD9
  4917                           status	equ	0xFD8
  4918                           
  4919 ;; *************** function _home_temp *****************
  4920 ;; Defined at:
  4921 ;;		line 482 in file "common.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;		None
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;		None
  4926 ;; Return value:  Size  Location     Type
  4927 ;;                  1    wreg      void 
  4928 ;; Registers used:
  4929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4930 ;; Tracked objects:
  4931 ;;		On entry : 3F/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;Total ram usage:        1 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    7
  4942 ;; This function calls:
  4943 ;;		_RTOS_DeleteTask
  4944 ;;		_RTOS_SetTask
  4945 ;;		___lbdiv
  4946 ;;		___lbmod
  4947 ;;		___lwdiv
  4948 ;;		___lwmod
  4949 ;;		_clear_matrix
  4950 ;;		_getTime
  4951 ;;		_pic_to_led
  4952 ;;		_putchar_down
  4953 ;;		_putchar_down_s
  4954 ;;		_scroll_left
  4955 ;; This function is called by:
  4956 ;;		_time_led
  4957 ;;		_RTOS_DispatchTask
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text17
  4962  000672                     __ptext17:
  4963                           	opt stack 0
  4964  000672                     _home_temp:
  4965                           	opt stack 22
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;common.c: 484: switch (events)
  4969                           
  4970                           ;incstack = 0
  4971  000672  D095               	goto	l6611
  4972  000674                     l6565:
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;common.c: 489: clear_matrix();
  4976  000674  ECD0  F013         	call	_clear_matrix	;wreg free
  4977                           
  4978                           ;common.c: 490: if (!((temperature/10) % 10))
  4979  000678  D8C5               	call	PL84	;call to abstracted procedure
  4980  00067A  EC80  F010         	call	___lwdiv	;wreg free
  4981  00067E  D89D               	call	PL48	;call to abstracted procedure
  4982  000680  ECED  F010         	call	___lwmod	;wreg free
  4983  000684  5016               	movf	?___lwmod,w,c
  4984  000686  1017               	iorwf	?___lwmod+1,w,c
  4985  000688  E112               	bnz	l6575
  4986                           
  4987                           ;common.c: 491: {
  4988                           ;common.c: 492: pic_to_led(3,1);
  4989  00068A  D8E1               	call	PL164	;call to abstracted procedure
  4990  00068C  EC1B  F00F         	call	_pic_to_led
  4991                           
  4992                           ;common.c: 494: putchar_down(13,temperature % 10, pFont);
  4993  000690  D8B1               	call	PL80	;call to abstracted procedure
  4994  000692  ECED  F010         	call	___lwmod	;wreg free
  4995  000696  5016               	movf	?___lwmod,w,c
  4996  000698  D88A               	call	PL20	;call to abstracted procedure
  4997  00069A  0E0D               	movlw	13
  4998  00069C  EC1A  F00D         	call	_putchar_down
  4999                           
  5000                           ;common.c: 495: putchar_down(19,176, &Font);
  5001  0006A0  0EB0               	movlw	176
  5002  0006A2  ECF5  F004         	call	PL58	;call to abstracted procedure
  5003  0006A6  0E13               	movlw	19
  5004  0006A8  EC1A  F00D         	call	_putchar_down
  5005                           
  5006                           ;common.c: 496: }else
  5007  0006AC  D01C               	goto	l6583
  5008  0006AE                     l6575:
  5009                           
  5010                           ;common.c: 497: {
  5011                           ;common.c: 498: pic_to_led(3,1);
  5012  0006AE  D8CF               	call	PL164	;call to abstracted procedure
  5013  0006B0  EC1B  F00F         	call	_pic_to_led
  5014                           
  5015                           ;common.c: 499: putchar_down(13,(temperature/10) % 10, pFont);
  5016  0006B4  D8A7               	call	PL84	;call to abstracted procedure
  5017  0006B6  EC80  F010         	call	___lwdiv	;wreg free
  5018  0006BA  D87F               	call	PL48	;call to abstracted procedure
  5019  0006BC  ECED  F010         	call	___lwmod	;wreg free
  5020  0006C0  5016               	movf	?___lwmod,w,c
  5021  0006C2  D875               	call	PL20	;call to abstracted procedure
  5022  0006C4  0E0D               	movlw	13
  5023  0006C6  EC1A  F00D         	call	_putchar_down
  5024                           
  5025                           ;common.c: 500: putchar_down(19,temperature % 10, pFont);
  5026  0006CA  D894               	call	PL80	;call to abstracted procedure
  5027  0006CC  ECED  F010         	call	___lwmod	;wreg free
  5028  0006D0  5016               	movf	?___lwmod,w,c
  5029  0006D2  D86D               	call	PL20	;call to abstracted procedure
  5030  0006D4  0E13               	movlw	19
  5031  0006D6  EC1A  F00D         	call	_putchar_down
  5032                           
  5033                           ;common.c: 501: putchar_down(25,176, &Font);
  5034  0006DA  0EB0               	movlw	176
  5035  0006DC  ECF5  F004         	call	PL58	;call to abstracted procedure
  5036  0006E0  0E19               	movlw	25
  5037  0006E2  EC1A  F00D         	call	_putchar_down
  5038  0006E6                     l6583:
  5039                           
  5040                           ;common.c: 503: }
  5041                           ;common.c: 504: events = 6;
  5042                           
  5043                           ;common.c: 505: RTOS_SetTask(default_state, 750, 0);
  5044  0006E6  D896               	call	PL90	;call to abstracted procedure
  5045  0006E8  0E02               	movlw	2
  5046  0006EA  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  5047  0006EC  0EEE               	movlw	238
  5048  0006EE  D86D               	call	PL52	;call to abstracted procedure
  5049  0006F0  EFA9  F00D         	goto	_RTOS_SetTask	;wreg free
  5050  0006F4                     l6587:
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;common.c: 513: events = 5;
  5054  0006F4  0E05               	movlw	5
  5055  0006F6  6E6F               	movwf	_events,c
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;common.c: 514: scroll_left();
  5059  0006F8  EC82  F00F         	call	_scroll_left	;wreg free
  5060                           
  5061                           ;common.c: 515: if((TTime.Thr/10) % 10)
  5062  0006FC  D86F               	call	PL64	;call to abstracted procedure
  5063  0006FE  ECD4  F011         	call	___lbdiv
  5064  000702  ECB3  F012         	call	___lbmod
  5065  000706  0900               	iorlw	0
  5066  000708  E00A               	bz	l6595
  5067                           
  5068                           ;common.c: 516: putchar_down(0, (TTime.Thr/10) % 10, pFont);
  5069  00070A  D868               	call	PL64	;call to abstracted procedure
  5070  00070C  ECD4  F011         	call	___lbdiv
  5071  000710  ECB3  F012         	call	___lbmod
  5072  000714  D84C               	call	PL20	;call to abstracted procedure
  5073  000716  0E00               	movlw	0
  5074  000718  EC1A  F00D         	call	_putchar_down
  5075  00071C  D004               	goto	l875
  5076  00071E                     l6595:
  5077                           
  5078                           ;common.c: 517: else putchar_down(0, 0, &Font);
  5079  00071E  6A1B               	clrf	putchar_down@symbol,c
  5080  000720  D858               	call	PL60	;call to abstracted procedure
  5081  000722  EC1A  F00D         	call	_putchar_down
  5082  000726                     l875:
  5083                           
  5084                           ;common.c: 518: putchar_down(6, TTime.Thr % 10, pFont);
  5085  000726  D88F               	call	PL158	;call to abstracted procedure
  5086  000728  ECB3  F012         	call	___lbmod
  5087  00072C  D840               	call	PL20	;call to abstracted procedure
  5088  00072E  0E06               	movlw	6
  5089  000730  EC1A  F00D         	call	_putchar_down
  5090                           
  5091                           ;common.c: 519: putchar_down(13, (TTime.Tmin/10) % 10, pFont);
  5092  000734  D876               	call	PL94	;call to abstracted procedure
  5093  000736  ECD4  F011         	call	___lbdiv
  5094  00073A  ECB3  F012         	call	___lbmod
  5095  00073E  D837               	call	PL20	;call to abstracted procedure
  5096  000740  0E0D               	movlw	13
  5097  000742  EC1A  F00D         	call	_putchar_down
  5098                           
  5099                           ;common.c: 520: putchar_down(19, TTime.Tmin % 10, pFont);
  5100  000746  D877               	call	PL152	;call to abstracted procedure
  5101  000748  ECB3  F012         	call	___lbmod
  5102  00074C  D830               	call	PL20	;call to abstracted procedure
  5103  00074E  0E13               	movlw	19
  5104  000750  EC1A  F00D         	call	_putchar_down
  5105                           
  5106                           ;common.c: 521: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  5107  000754  D848               	call	PL66	;call to abstracted procedure
  5108  000756  ECB2  F00F         	call	_getTime	;wreg free
  5109                           
  5110                           ;common.c: 522: putchar_down_s(25, (TTime.Ts/10) % 10 + 1);
  5111  00075A  D868               	call	PL98	;call to abstracted procedure
  5112  00075C  ECD4  F011         	call	___lbdiv
  5113  000760  ECB3  F012         	call	___lbmod
  5114  000764  6E27               	movwf	??_home_temp& (0+255),c
  5115  000766  2827               	incf	??_home_temp,w,c
  5116  000768  6E17               	movwf	putchar_down_s@symbol,c
  5117  00076A  0E19               	movlw	25
  5118  00076C  ECD0  F00C         	call	_putchar_down_s
  5119                           
  5120                           ;common.c: 523: putchar_down_s(29, TTime.Ts % 10 + 1);
  5121  000770  D866               	call	PL156	;call to abstracted procedure
  5122  000772  ECB3  F012         	call	___lbmod
  5123  000776  6E27               	movwf	??_home_temp& (0+255),c
  5124  000778  2827               	incf	??_home_temp,w,c
  5125  00077A  6E17               	movwf	putchar_down_s@symbol,c
  5126  00077C  0E1D               	movlw	29
  5127  00077E  ECD0  F00C         	call	_putchar_down_s
  5128                           
  5129                           ;common.c: 524: RTOS_DeleteTask(default_state);
  5130  000782  EC53  F00A         	call	PL46	;call to abstracted procedure
  5131  000786  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5132                           
  5133                           ;common.c: 525: RTOS_DeleteTask(home_temp);
  5134  00078A  0E72               	movlw	low _home_temp
  5135  00078C  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5136  00078E  0E06               	movlw	high _home_temp
  5137  000790  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5138  000792  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5139                           
  5140                           ;common.c: 526: RTOS_SetTask(time_led,0,20);
  5141  000796  EC49  F00A         	call	PL8	;call to abstracted procedure
  5142  00079A  EFA9  F00D         	goto	_RTOS_SetTask	;wreg free
  5143  00079E                     l6611:
  5144                           
  5145                           ; BSR set to: 0
  5146  00079E  506F               	movf	_events,w,c
  5147                           
  5148                           ; Switch size 1, requested type "space"
  5149                           ; Number of cases is 3, Range of values is 4 to 6
  5150                           ; switch strategies available:
  5151                           ; Name         Instructions Cycles
  5152                           ; simple_byte           10     6 (average)
  5153                           ;	Chosen strategy is simple_byte
  5154  0007A0  0A04               	xorlw	4	; case 4
  5155  0007A2  E0A8               	bz	l6587
  5156  0007A4  0A01               	xorlw	1	; case 5
  5157  0007A6  E101 D765          	bz	l6565
  5158  0007AA  0A03               	xorlw	3	; case 6
  5159  0007AC  0012               	return	
  5160  0007AE                     __end_of_home_temp:
  5161                           	opt stack 0
  5162  0007AE                     PL20:
  5163                           	opt stack 22
  5164  0007AE  6E1B               	movwf	putchar_down@symbol,c
  5165  0007B0  C06D  F01C         	movff	_pFont,putchar_down@pF
  5166  0007B4  C06E  F01D         	movff	_pFont+1,putchar_down@pF+1
  5167  0007B8  0012               	return	
  5168  0007BA                     __end_ofPL20:
  5169                           	opt stack 0
  5170  0007BA                     PL48:
  5171                           	opt stack 22
  5172  0007BA  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  5173  0007BE  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  5174  0007C2  6A19               	clrf	___lwmod@divisor+1,c
  5175  0007C4  0E0A               	movlw	10
  5176  0007C6  6E18               	movwf	___lwmod@divisor,c
  5177  0007C8  0C0A               	retlw	10
  5178  0007CA                     __end_ofPL48:
  5179                           	opt stack 0
  5180  0007CA                     PL52:
  5181                           	opt stack 22
  5182  0007CA  6E11               	movwf	RTOS_SetTask@taskDelay,c
  5183  0007CC  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5184  0007CE  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  5185  0007D0  0012               	return	
  5186  0007D2                     __end_ofPL52:
  5187                           	opt stack 0
  5188  0007D2                     PL60:
  5189                           	opt stack 22
  5190  0007D2  0EC2               	movlw	low _Font
  5191  0007D4  6E1C               	movwf	putchar_down@pF,c
  5192  0007D6  0EB9               	movlw	high _Font
  5193  0007D8  6E1D               	movwf	putchar_down@pF+1,c
  5194  0007DA  0C00               	retlw	0
  5195  0007DC                     __end_ofPL60:
  5196                           	opt stack 0
  5197  0007DC                     PL64:
  5198                           	opt stack 22
  5199  0007DC  0E0A               	movlw	10
  5200  0007DE  6E13               	movwf	___lbmod@divisor,c
  5201  0007E0  6E0F               	movwf	___lbdiv@divisor,c
  5202  0007E2  5064               	movf	_TTime+2,w,c
  5203  0007E4  0012               	return	
  5204  0007E6                     __end_ofPL64:
  5205                           	opt stack 0
  5206  0007E6                     PL66:
  5207                           	opt stack 22
  5208  0007E6  0E64               	movlw	low (_TTime+2)
  5209  0007E8  6E14               	movwf	getTime@p3,c
  5210  0007EA  0E63               	movlw	low (_TTime+1)
  5211  0007EC  6E15               	movwf	getTime@p2,c
  5212  0007EE  0E62               	movlw	low _TTime
  5213  0007F0  6E16               	movwf	getTime@p1,c
  5214  0007F2  0012               	return	
  5215  0007F4                     __end_ofPL66:
  5216                           	opt stack 0
  5217  0007F4                     PL80:
  5218                           	opt stack 22
  5219  0007F4  C069  F016         	movff	_temperature,___lwmod@dividend
  5220  0007F8  C06A  F017         	movff	_temperature+1,___lwmod@dividend+1
  5221  0007FC  6A19               	clrf	___lwmod@divisor+1,c
  5222  0007FE  0E0A               	movlw	10
  5223  000800  6E18               	movwf	___lwmod@divisor,c
  5224  000802  0C0A               	retlw	10
  5225  000804                     __end_ofPL80:
  5226                           	opt stack 0
  5227  000804                     PL84:
  5228                           	opt stack 22
  5229  000804  6A12               	clrf	___lwdiv@divisor+1,c
  5230  000806  0E0A               	movlw	10
  5231  000808  6E11               	movwf	___lwdiv@divisor,c
  5232  00080A  C069  F00F         	movff	_temperature,___lwdiv@dividend
  5233  00080E  C06A  F010         	movff	_temperature+1,___lwdiv@dividend+1
  5234  000812  0C0A               	retlw	10
  5235  000814                     __end_ofPL84:
  5236                           	opt stack 0
  5237  000814                     PL90:
  5238                           	opt stack 22
  5239  000814  0E06               	movlw	6
  5240  000816  6E6F               	movwf	_events,c
  5241  000818  0E22               	movlw	low _default_state
  5242  00081A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5243  00081C  0E28               	movlw	high _default_state
  5244  00081E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5245  000820  0012               	return	
  5246  000822                     __end_ofPL90:
  5247                           	opt stack 0
  5248  000822                     PL94:
  5249                           	opt stack 22
  5250  000822  0E0A               	movlw	10
  5251  000824  6E13               	movwf	___lbmod@divisor,c
  5252  000826  6E0F               	movwf	___lbdiv@divisor,c
  5253  000828  5063               	movf	_TTime+1,w,c
  5254  00082A  0012               	return	
  5255  00082C                     __end_ofPL94:
  5256                           	opt stack 0
  5257  00082C                     PL98:
  5258                           	opt stack 22
  5259  00082C  0E0A               	movlw	10
  5260  00082E  6E13               	movwf	___lbmod@divisor,c
  5261  000830  6E0F               	movwf	___lbdiv@divisor,c
  5262  000832  5062               	movf	_TTime,w,c
  5263  000834  0012               	return	
  5264  000836                     __end_ofPL98:
  5265                           	opt stack 0
  5266  000836                     PL152:
  5267                           	opt stack 22
  5268  000836  0E0A               	movlw	10
  5269  000838  6E13               	movwf	___lbmod@divisor,c
  5270  00083A  5063               	movf	_TTime+1,w,c
  5271  00083C  0012               	return	
  5272  00083E                     __end_ofPL152:
  5273                           	opt stack 0
  5274  00083E                     PL156:
  5275                           	opt stack 22
  5276  00083E  0E0A               	movlw	10
  5277  000840  6E13               	movwf	___lbmod@divisor,c
  5278  000842  5062               	movf	_TTime,w,c
  5279  000844  0012               	return	
  5280  000846                     __end_ofPL156:
  5281                           	opt stack 0
  5282  000846                     PL158:
  5283                           	opt stack 22
  5284  000846  0E0A               	movlw	10
  5285  000848  6E13               	movwf	___lbmod@divisor,c
  5286  00084A  5064               	movf	_TTime+2,w,c
  5287  00084C  0012               	return	
  5288  00084E                     __end_ofPL158:
  5289                           	opt stack 0
  5290  00084E                     PL164:
  5291                           	opt stack 22
  5292  00084E  0E01               	movlw	1
  5293  000850  6E14               	movwf	pic_to_led@pic,c
  5294  000852  0C03               	retlw	3
  5295  000854                     __end_ofPL164:
  5296                           	opt stack 0
  5297                           tosu	equ	0xFFF
  5298                           tosh	equ	0xFFE
  5299                           tosl	equ	0xFFD
  5300                           pclath	equ	0xFFA
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           intcon2	equ	0xFF1
  5309                           postinc0	equ	0xFEE
  5310                           wreg	equ	0xFE8
  5311                           indf1	equ	0xFE7
  5312                           plusw1	equ	0xFE3
  5313                           fsr1h	equ	0xFE2
  5314                           fsr1l	equ	0xFE1
  5315                           indf2	equ	0xFDF
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           plusw2	equ	0xFDB
  5319                           fsr2h	equ	0xFDA
  5320                           fsr2l	equ	0xFD9
  5321                           status	equ	0xFD8
  5322                           
  5323 ;; *************** function _time_set_min *****************
  5324 ;; Defined at:
  5325 ;;		line 31 in file "common.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;		None
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;		None
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  1    wreg      void 
  5332 ;; Registers used:
  5333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 3F/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;Total ram usage:        0 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    7
  5346 ;; This function calls:
  5347 ;;		_RTOS_DeleteTask
  5348 ;;		_RTOS_SetTask
  5349 ;;		_Update_Matrix
  5350 ;;		___lbdiv
  5351 ;;		___lbmod
  5352 ;;		_putchar_b_buf
  5353 ;;		_setTime
  5354 ;; This function is called by:
  5355 ;;		_time_led
  5356 ;;		_RTOS_DispatchTask
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text18
  5361  0016B0                     __ptext18:
  5362                           	opt stack 0
  5363  0016B0                     _time_set_min:
  5364                           	opt stack 22
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;common.c: 33: show_digit = ~show_digit;
  5368                           
  5369                           ;incstack = 0
  5370  0016B0  B270               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  5371  0016B2  D002               	goto	u4200
  5372  0016B4  8270               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  5373  0016B6  D03B               	goto	l6181
  5374  0016B8                     u4200:
  5375  0016B8  9270               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  5376                           
  5377                           ;common.c: 34: switch (events)
  5378  0016BA  D039               	goto	l6181
  5379  0016BC                     l6141:
  5380                           
  5381                           ;common.c: 41: RTOS_DeleteTask(time_set_min);
  5382  0016BC  D86B               	call	PL134	;call to abstracted procedure
  5383  0016BE  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5384                           
  5385                           ;common.c: 42: RTOS_SetTask(time_set_hr, 0, 50);
  5386  0016C2  0EBC               	movlw	low _time_set_hr
  5387  0016C4  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5388  0016C6  0E0B               	movlw	high _time_set_hr
  5389  0016C8  ECCF  F009         	call	PL10	;call to abstracted procedure
  5390  0016CC  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5391                           
  5392                           ;common.c: 43: RTOS_SetTask(default_state, 2000, 0);
  5393  0016D0  ECCE  F005         	call	PL2	;call to abstracted procedure
  5394  0016D4  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5395  0016D8                     l6147:
  5396                           
  5397                           ;common.c: 44: events = 5;
  5398  0016D8  0E05               	movlw	5
  5399  0016DA  6E6F               	movwf	_events,c
  5400                           
  5401                           ;common.c: 45: break;
  5402  0016DC  D032               	goto	l750
  5403  0016DE                     l6149:
  5404                           
  5405                           ;common.c: 47: RTOS_DeleteTask(time_set_min);
  5406  0016DE  D85A               	call	PL134	;call to abstracted procedure
  5407  0016E0  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5408                           
  5409                           ;common.c: 48: RTOS_DeleteTask(default_state);
  5410  0016E4  EC53  F00A         	call	PL46	;call to abstracted procedure
  5411  0016E8  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5412                           
  5413                           ;common.c: 49: RTOS_SetTask(time_led, 0, 20);
  5414  0016EC  EC49  F00A         	call	PL8	;call to abstracted procedure
  5415  0016F0  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5416  0016F4  D7F1               	goto	l6147
  5417  0016F6                     l6155:
  5418                           
  5419                           ;common.c: 53: TSTime.Tmin++;
  5420  0016F6  2A40               	incf	_TSTime+1,f,c
  5421                           
  5422                           ;common.c: 54: if(TSTime.Tmin > 59) TSTime.Tmin = 0;
  5423  0016F8  0E3B               	movlw	59
  5424  0016FA  6440               	cpfsgt	_TSTime+1,c
  5425  0016FC  D001               	goto	l6161
  5426  0016FE  6A40               	clrf	_TSTime+1,c
  5427  001700                     l6161:
  5428                           
  5429                           ;common.c: 55: RTOS_SetTask(default_state, 2000, 0);
  5430  001700  ECCE  F005         	call	PL2	;call to abstracted procedure
  5431  001704  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5432                           
  5433                           ;common.c: 56: setTime(TSTime.Thr,TSTime.Tmin,0);
  5434  001708  EC81  F006         	call	PL82	;call to abstracted procedure
  5435  00170C  EC1F  F012         	call	_setTime
  5436  001710  D7E3               	goto	l6147
  5437  001712                     l6167:
  5438                           
  5439                           ;common.c: 60: TSTime.Tmin--;
  5440  001712  0640               	decf	_TSTime+1,f,c
  5441                           
  5442                           ;common.c: 61: if(TSTime.Tmin == 255) TSTime.Tmin = 59;
  5443  001714  2840               	incf	_TSTime+1,w,c
  5444  001716  E102               	bnz	l6173
  5445  001718  0E3B               	movlw	59
  5446  00171A  6E40               	movwf	_TSTime+1,c
  5447  00171C                     l6173:
  5448                           
  5449                           ;common.c: 62: RTOS_SetTask(default_state, 2000, 0);
  5450  00171C  ECCE  F005         	call	PL2	;call to abstracted procedure
  5451  001720  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5452                           
  5453                           ;common.c: 63: setTime(TSTime.Thr,TSTime.Tmin,0);
  5454  001724  EC81  F006         	call	PL82	;call to abstracted procedure
  5455  001728  EC1F  F012         	call	_setTime
  5456  00172C  D7D5               	goto	l6147
  5457  00172E                     l6181:
  5458  00172E  506F               	movf	_events,w,c
  5459                           
  5460                           ; Switch size 1, requested type "space"
  5461                           ; Number of cases is 5, Range of values is 1 to 5
  5462                           ; switch strategies available:
  5463                           ; Name         Instructions Cycles
  5464                           ; simple_byte           16     9 (average)
  5465                           ;	Chosen strategy is simple_byte
  5466  001730  0A01               	xorlw	1	; case 1
  5467  001732  E0C4               	bz	l6141
  5468  001734  0A03               	xorlw	3	; case 2
  5469  001736  E0DF               	bz	l6155
  5470  001738  0A01               	xorlw	1	; case 3
  5471  00173A  E0EB               	bz	l6167
  5472  00173C  0A07               	xorlw	7	; case 4
  5473  00173E  E0CF               	bz	l6149
  5474  001740  0A01               	xorlw	1	; case 5
  5475  001742                     l750:
  5476                           
  5477                           ;common.c: 68: if(show_digit)
  5478  001742  A270               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  5479  001744  D015               	goto	l6185
  5480                           
  5481                           ;common.c: 69: {
  5482                           ;common.c: 70: putchar_b_buf(13,(TSTime.Tmin/10) % 10 , pFont);
  5483  001746  EC86  F006         	call	PL130	;call to abstracted procedure
  5484  00174A  ECD4  F011         	call	___lbdiv
  5485  00174E  ECB3  F012         	call	___lbmod
  5486  001752  EC7B  F006         	call	PL30	;call to abstracted procedure
  5487  001756  0E0D               	movlw	13
  5488  001758  ECE6  F00E         	call	_putchar_b_buf
  5489                           
  5490                           ;common.c: 71: putchar_b_buf(19,TSTime.Tmin % 10 , pFont);
  5491  00175C  EC95  F006         	call	PL168	;call to abstracted procedure
  5492  001760  ECB3  F012         	call	___lbmod
  5493  001764  EC7B  F006         	call	PL30	;call to abstracted procedure
  5494  001768  0E13               	movlw	19
  5495  00176A  ECE6  F00E         	call	_putchar_b_buf
  5496                           
  5497                           ;common.c: 72: }
  5498  00176E  D00C               	goto	l6187
  5499  001770                     l6185:
  5500                           
  5501                           ;common.c: 73: else
  5502                           ;common.c: 74: {
  5503                           ;common.c: 75: putchar_b_buf(13,0, &Font);
  5504  001770  6A17               	clrf	putchar_b_buf@symbol,c
  5505  001772  EC76  F006         	call	PL6	;call to abstracted procedure
  5506  001776  0E0D               	movlw	13
  5507  001778  ECE6  F00E         	call	_putchar_b_buf
  5508                           
  5509                           ;common.c: 76: putchar_b_buf(19,0, &Font);
  5510  00177C  6A17               	clrf	putchar_b_buf@symbol,c
  5511  00177E  EC76  F006         	call	PL6	;call to abstracted procedure
  5512  001782  0E13               	movlw	19
  5513  001784  ECE6  F00E         	call	_putchar_b_buf
  5514  001788                     l6187:
  5515                           
  5516                           ;common.c: 77: }
  5517                           ;common.c: 78: Update_Matrix(Dis_Buff);
  5518  001788  0EAB               	movlw	low _Dis_Buff
  5519  00178A  6E11               	movwf	Update_Matrix@buf,c
  5520  00178C  EC2A  F011         	call	_Update_Matrix	;wreg free
  5521                           
  5522                           ;common.c: 79: en_put = 1;
  5523  001790  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5524  001792  0012               	return		;funcret
  5525  001794                     __end_of_time_set_min:
  5526                           	opt stack 0
  5527  001794                     PL134:
  5528                           	opt stack 22
  5529  001794  0EB0               	movlw	low _time_set_min
  5530  001796  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5531  001798  0E16               	movlw	high _time_set_min
  5532  00179A  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5533  00179C  0012               	return	
  5534  00179E                     __end_ofPL134:
  5535                           	opt stack 0
  5536                           tosu	equ	0xFFF
  5537                           tosh	equ	0xFFE
  5538                           tosl	equ	0xFFD
  5539                           pclath	equ	0xFFA
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon	equ	0xFF2
  5547                           intcon2	equ	0xFF1
  5548                           postinc0	equ	0xFEE
  5549                           wreg	equ	0xFE8
  5550                           indf1	equ	0xFE7
  5551                           plusw1	equ	0xFE3
  5552                           fsr1h	equ	0xFE2
  5553                           fsr1l	equ	0xFE1
  5554                           indf2	equ	0xFDF
  5555                           postinc2	equ	0xFDE
  5556                           postdec2	equ	0xFDD
  5557                           plusw2	equ	0xFDB
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function _GetTime *****************
  5563 ;; Defined at:
  5564 ;;		line 22 in file "common.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;		None
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;		None
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  1    wreg      void 
  5571 ;; Registers used:
  5572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5573 ;; Tracked objects:
  5574 ;;		On entry : 3F/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;Total ram usage:        0 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    7
  5585 ;; This function calls:
  5586 ;;		_getDate
  5587 ;;		_getTime
  5588 ;; This function is called by:
  5589 ;;		_INT0_ISR
  5590 ;;		_RTOS_DispatchTask
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text19
  5595  002696                     __ptext19:
  5596                           	opt stack 0
  5597  002696                     _GetTime:
  5598                           	opt stack 0
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;common.c: 24: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  5602                           
  5603                           ;incstack = 0
  5604  002696  ECF3  F003         	call	PL66	;call to abstracted procedure
  5605  00269A  ECB2  F00F         	call	_getTime	;wreg free
  5606                           
  5607                           ;common.c: 25: getDate(&TTime.Tdy,&TTime.Tdt,&TTime.Tmt,&TTime.Tyr);
  5608  00269E  0E65               	movlw	low (_TTime+3)
  5609  0026A0  6E14               	movwf	getDate@p4,c
  5610  0026A2  0E66               	movlw	low (_TTime+4)
  5611  0026A4  6E15               	movwf	getDate@p3,c
  5612  0026A6  0E67               	movlw	low (_TTime+5)
  5613  0026A8  6E16               	movwf	getDate@p2,c
  5614  0026AA  0E68               	movlw	low (_TTime+6)
  5615  0026AC  6E17               	movwf	getDate@p1,c
  5616  0026AE  EF2E  F00E         	goto	_getDate	;wreg free
  5617  0026B2                     __end_of_GetTime:
  5618                           	opt stack 0
  5619                           tosu	equ	0xFFF
  5620                           tosh	equ	0xFFE
  5621                           tosl	equ	0xFFD
  5622                           pclath	equ	0xFFA
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           intcon	equ	0xFF2
  5630                           intcon2	equ	0xFF1
  5631                           postinc0	equ	0xFEE
  5632                           wreg	equ	0xFE8
  5633                           indf1	equ	0xFE7
  5634                           plusw1	equ	0xFE3
  5635                           fsr1h	equ	0xFE2
  5636                           fsr1l	equ	0xFE1
  5637                           indf2	equ	0xFDF
  5638                           postinc2	equ	0xFDE
  5639                           postdec2	equ	0xFDD
  5640                           plusw2	equ	0xFDB
  5641                           fsr2h	equ	0xFDA
  5642                           fsr2l	equ	0xFD9
  5643                           status	equ	0xFD8
  5644                           
  5645 ;; *************** function _set_font_set *****************
  5646 ;; Defined at:
  5647 ;;		line 430 in file "common.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;		None
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;		None
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      void 
  5654 ;; Registers used:
  5655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 3F/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5665 ;;Total ram usage:        0 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    5
  5668 ;; This function calls:
  5669 ;;		_RTOS_DeleteTask
  5670 ;;		_RTOS_SetTask
  5671 ;;		_Update_Matrix
  5672 ;;		___lbmod
  5673 ;;		_putchar_b_buf
  5674 ;;		_set_font
  5675 ;;		_write_eep
  5676 ;; This function is called by:
  5677 ;;		_time_set_dy
  5678 ;;		_RTOS_DispatchTask
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text20
  5683  0013C2                     __ptext20:
  5684                           	opt stack 0
  5685  0013C2                     _set_font_set:
  5686                           	opt stack 24
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;common.c: 432: switch (events)
  5690                           
  5691                           ;incstack = 0
  5692  0013C2  D033               	goto	l6555
  5693  0013C4                     l6511:
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;common.c: 438: RTOS_DeleteTask(set_font_set);
  5697  0013C4  D87A               	call	PL128	;call to abstracted procedure
  5698  0013C6  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5699                           
  5700                           ;common.c: 439: RTOS_SetTask(time_led, 0, 20);
  5701  0013CA  D863               	call	PL8	;call to abstracted procedure
  5702  0013CC  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5703                           
  5704                           ;common.c: 440: RTOS_DeleteTask(default_state);
  5705  0013D0  D86A               	call	PL46	;call to abstracted procedure
  5706  0013D2  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5707  0013D6                     l6517:
  5708                           
  5709                           ;common.c: 441: events = 5;
  5710  0013D6  0E05               	movlw	5
  5711  0013D8  6E6F               	movwf	_events,c
  5712                           
  5713                           ;common.c: 442: break;
  5714  0013DA  D031               	goto	l856
  5715  0013DC                     l6519:
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;common.c: 444: RTOS_DeleteTask(set_font_set);
  5719  0013DC  D86E               	call	PL128	;call to abstracted procedure
  5720  0013DE  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5721                           
  5722                           ;common.c: 445: RTOS_DeleteTask(default_state);
  5723  0013E2  D861               	call	PL46	;call to abstracted procedure
  5724  0013E4  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5725                           
  5726                           ;common.c: 446: RTOS_SetTask(time_led, 0, 20);
  5727  0013E8  D854               	call	PL8	;call to abstracted procedure
  5728  0013EA  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5729  0013EE  D7F3               	goto	l6517
  5730  0013F0                     l6525:
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;common.c: 450: type_font++;
  5734  0013F0  2A61               	incf	_type_font,f,c
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;common.c: 451: if(type_font > 5) type_font = 1;
  5738  0013F2  0E05               	movlw	5
  5739  0013F4  6461               	cpfsgt	_type_font,c
  5740  0013F6  D002               	goto	l6531
  5741                           
  5742                           ; BSR set to: 0
  5743  0013F8  0E01               	movlw	1
  5744  0013FA  6E61               	movwf	_type_font,c
  5745  0013FC                     l6531:
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;common.c: 452: RTOS_SetTask(default_state, 2000, 0);
  5749  0013FC  ECCE  F005         	call	PL2	;call to abstracted procedure
  5750  001400  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5751                           
  5752                           ;common.c: 453: events = 5;
  5753                           
  5754                           ;common.c: 454: write_eep(0,type_font);
  5755  001404  D855               	call	PL106	;call to abstracted procedure
  5756  001406  ECD8  F012         	call	_write_eep
  5757  00140A                     l6537:
  5758                           
  5759                           ;common.c: 455: set_font();
  5760  00140A  EC5A  F010         	call	_set_font	;wreg free
  5761                           
  5762                           ;common.c: 456: break;
  5763  00140E  D017               	goto	l856
  5764  001410                     l6539:
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;common.c: 458: type_font--;
  5768  001410  0661               	decf	_type_font,f,c
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;common.c: 459: if(type_font == 0) type_font = 5;
  5772  001412  5061               	movf	_type_font,w,c
  5773  001414  E102               	bnz	l6545
  5774                           
  5775                           ; BSR set to: 0
  5776  001416  0E05               	movlw	5
  5777  001418  6E61               	movwf	_type_font,c
  5778  00141A                     l6545:
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;common.c: 460: RTOS_SetTask(default_state, 2000, 0);
  5782  00141A  ECCE  F005         	call	PL2	;call to abstracted procedure
  5783  00141E  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5784                           
  5785                           ;common.c: 461: events = 5;
  5786                           
  5787                           ;common.c: 462: write_eep(0,type_font);
  5788  001422  D846               	call	PL106	;call to abstracted procedure
  5789  001424  ECD8  F012         	call	_write_eep
  5790  001428  D7F0               	goto	l6537
  5791  00142A                     l6555:
  5792                           
  5793                           ; BSR set to: 0
  5794  00142A  506F               	movf	_events,w,c
  5795                           
  5796                           ; Switch size 1, requested type "space"
  5797                           ; Number of cases is 5, Range of values is 1 to 5
  5798                           ; switch strategies available:
  5799                           ; Name         Instructions Cycles
  5800                           ; simple_byte           16     9 (average)
  5801                           ;	Chosen strategy is simple_byte
  5802  00142C  0A01               	xorlw	1	; case 1
  5803  00142E  E0CA               	bz	l6511
  5804  001430  0A03               	xorlw	3	; case 2
  5805  001432  E0DE               	bz	l6525
  5806  001434  0A01               	xorlw	1	; case 3
  5807  001436  E0EC               	bz	l6539
  5808  001438  0A07               	xorlw	7	; case 4
  5809  00143A  E0D0               	bz	l6519
  5810  00143C  0A01               	xorlw	1	; case 5
  5811  00143E                     l856:
  5812                           
  5813                           ;common.c: 466: if(en_put)
  5814  00143E  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5815  001440  D022               	goto	l6559
  5816                           
  5817                           ;common.c: 467: {
  5818                           ;common.c: 468: putchar_b_buf(0,'Ø', &Font);
  5819  001442  0ED8               	movlw	216
  5820  001444  EC2E  F003         	call	PL4	;call to abstracted procedure
  5821  001448  0E00               	movlw	0
  5822  00144A  ECE6  F00E         	call	_putchar_b_buf
  5823                           
  5824                           ;common.c: 469: putchar_b_buf(6,'ð', &Font);
  5825  00144E  0EF0               	movlw	240
  5826  001450  EC2E  F003         	call	PL4	;call to abstracted procedure
  5827  001454  0E06               	movlw	6
  5828  001456  ECE6  F00E         	call	_putchar_b_buf
  5829                           
  5830                           ;common.c: 470: putchar_b_buf(12,':', &Font);
  5831  00145A  0E3A               	movlw	58
  5832  00145C  EC2E  F003         	call	PL4	;call to abstracted procedure
  5833  001460  0E0C               	movlw	12
  5834  001462  ECE6  F00E         	call	_putchar_b_buf
  5835                           
  5836                           ;common.c: 471: putchar_b_buf(18,type_font % 10, pFont);
  5837  001466  0E0A               	movlw	10
  5838  001468  6E13               	movwf	___lbmod@divisor,c
  5839  00146A  5061               	movf	_type_font,w,c
  5840  00146C  ECB3  F012         	call	___lbmod
  5841  001470  EC7B  F006         	call	PL30	;call to abstracted procedure
  5842  001474  0E12               	movlw	18
  5843  001476  ECE6  F00E         	call	_putchar_b_buf
  5844                           
  5845                           ;common.c: 472: putchar_b_buf(24,0, &Font);
  5846  00147A  6A17               	clrf	putchar_b_buf@symbol,c
  5847  00147C  EC76  F006         	call	PL6	;call to abstracted procedure
  5848  001480  0E18               	movlw	24
  5849  001482  ECE6  F00E         	call	_putchar_b_buf
  5850  001486                     l6559:
  5851                           
  5852                           ;common.c: 473: }
  5853                           ;common.c: 474: Update_Matrix(Dis_Buff);
  5854  001486  0EAB               	movlw	low _Dis_Buff
  5855  001488  6E11               	movwf	Update_Matrix@buf,c
  5856  00148A  EC2A  F011         	call	_Update_Matrix	;wreg free
  5857                           
  5858                           ;common.c: 475: en_put=1;
  5859  00148E  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5860  001490  0012               	return		;funcret
  5861  001492                     __end_of_set_font_set:
  5862                           	opt stack 0
  5863  001492                     PL8:
  5864                           	opt stack 22
  5865  001492  0EBE               	movlw	low _time_led
  5866  001494  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5867  001496  0E12               	movlw	high _time_led
  5868  001498  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5869  00149A  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  5870  00149C  6A11               	clrf	RTOS_SetTask@taskDelay,c
  5871  00149E  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5872  0014A0  0E14               	movlw	20
  5873  0014A2  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  5874  0014A4  0C14               	retlw	20
  5875  0014A6                     __end_ofPL8:
  5876                           	opt stack 0
  5877  0014A6                     PL46:
  5878                           	opt stack 22
  5879  0014A6  0E22               	movlw	low _default_state
  5880  0014A8  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5881  0014AA  0E28               	movlw	high _default_state
  5882  0014AC  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5883  0014AE  0012               	return	
  5884  0014B0                     __end_ofPL46:
  5885                           	opt stack 0
  5886  0014B0                     PL106:
  5887                           	opt stack 24
  5888  0014B0  0E05               	movlw	5
  5889  0014B2  6E6F               	movwf	_events,c
  5890  0014B4  C061  F00F         	movff	_type_font,write_eep@data
  5891  0014B8  0C00               	retlw	0
  5892  0014BA                     __end_ofPL106:
  5893                           	opt stack 0
  5894  0014BA                     PL128:
  5895                           	opt stack 24
  5896  0014BA  0EC2               	movlw	low _set_font_set
  5897  0014BC  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5898  0014BE  0E13               	movlw	high _set_font_set
  5899  0014C0  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5900  0014C2  0012               	return	
  5901  0014C4                     __end_ofPL128:
  5902                           	opt stack 0
  5903                           tosu	equ	0xFFF
  5904                           tosh	equ	0xFFE
  5905                           tosl	equ	0xFFD
  5906                           pclath	equ	0xFFA
  5907                           tblptru	equ	0xFF8
  5908                           tblptrh	equ	0xFF7
  5909                           tblptrl	equ	0xFF6
  5910                           tablat	equ	0xFF5
  5911                           prodh	equ	0xFF4
  5912                           prodl	equ	0xFF3
  5913                           intcon	equ	0xFF2
  5914                           intcon2	equ	0xFF1
  5915                           postinc0	equ	0xFEE
  5916                           wreg	equ	0xFE8
  5917                           indf1	equ	0xFE7
  5918                           plusw1	equ	0xFE3
  5919                           fsr1h	equ	0xFE2
  5920                           fsr1l	equ	0xFE1
  5921                           indf2	equ	0xFDF
  5922                           postinc2	equ	0xFDE
  5923                           postdec2	equ	0xFDD
  5924                           plusw2	equ	0xFDB
  5925                           fsr2h	equ	0xFDA
  5926                           fsr2l	equ	0xFD9
  5927                           status	equ	0xFD8
  5928                           
  5929 ;; *************** function _time_set_dy *****************
  5930 ;; Defined at:
  5931 ;;		line 351 in file "common.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 3F/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;Total ram usage:        0 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    7
  5952 ;; This function calls:
  5953 ;;		_RTOS_DeleteTask
  5954 ;;		_RTOS_SetTask
  5955 ;;		_Update_Matrix
  5956 ;;		_putchar_b_buf
  5957 ;;		_setDate
  5958 ;; This function is called by:
  5959 ;;		_time_set_dt
  5960 ;;		_RTOS_DispatchTask
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text21
  5965  000A08                     __ptext21:
  5966                           	opt stack 0
  5967  000A08                     _time_set_dy:
  5968                           	opt stack 22
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;common.c: 353: switch (events)
  5972                           
  5973                           ;incstack = 0
  5974  000A08  D03A               	goto	l6483
  5975  000A0A                     l6441:
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;common.c: 359: RTOS_DeleteTask(time_set_dy);
  5979  000A0A  D8D3               	call	PL124	;call to abstracted procedure
  5980  000A0C  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  5981                           
  5982                           ;common.c: 360: RTOS_SetTask(set_font_set, 0, 20);
  5983  000A10  0EC2               	movlw	low _set_font_set
  5984  000A12  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5985  000A14  0E13               	movlw	high _set_font_set
  5986  000A16  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5987  000A18  ECD6  F009         	call	PL18	;call to abstracted procedure
  5988  000A1C  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5989                           
  5990                           ;common.c: 361: RTOS_SetTask(default_state, 2000, 0);
  5991  000A20  D8BD               	call	PL2	;call to abstracted procedure
  5992  000A22  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  5993                           
  5994                           ;common.c: 362: events = 5;
  5995                           
  5996                           ;common.c: 363: en_put=1;
  5997  000A26  EC51  F008         	call	PL154	;call to abstracted procedure
  5998                           
  5999                           ;common.c: 364: break;
  6000  000A2A  D033               	goto	l834
  6001  000A2C                     l6451:
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;common.c: 366: RTOS_DeleteTask(time_set_dy);
  6005  000A2C  D8C2               	call	PL124	;call to abstracted procedure
  6006  000A2E  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  6007                           
  6008                           ;common.c: 367: RTOS_DeleteTask(default_state);
  6009  000A32  EC53  F00A         	call	PL46	;call to abstracted procedure
  6010  000A36  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  6011                           
  6012                           ;common.c: 368: RTOS_SetTask(time_led, 0, 20);
  6013  000A3A  EC49  F00A         	call	PL8	;call to abstracted procedure
  6014  000A3E  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6015                           
  6016                           ;common.c: 369: events = 5;
  6017  000A42  0E05               	movlw	5
  6018  000A44  6E6F               	movwf	_events,c
  6019                           
  6020                           ;common.c: 370: break;
  6021  000A46  D025               	goto	l834
  6022  000A48                     l6457:
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;common.c: 372: TSTime.Tdy++;
  6026  000A48  2A42               	incf	_TSTime+3,f,c
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;common.c: 373: if(TSTime.Tdy > 7) TSTime.Tdy = 1;
  6030  000A4A  0E07               	movlw	7
  6031  000A4C  6442               	cpfsgt	_TSTime+3,c
  6032  000A4E  D002               	goto	l6463
  6033                           
  6034                           ; BSR set to: 0
  6035  000A50  0E01               	movlw	1
  6036  000A52  6E42               	movwf	_TSTime+3,c
  6037  000A54                     l6463:
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;common.c: 374: RTOS_SetTask(default_state, 2000, 0);
  6041  000A54  D8A3               	call	PL2	;call to abstracted procedure
  6042  000A56  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6043                           
  6044                           ;common.c: 375: events = 5;
  6045                           
  6046                           ;common.c: 376: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6047  000A5A  EC42  F008         	call	PL16	;call to abstracted procedure
  6048  000A5E  EC65  F011         	call	_setDate
  6049                           
  6050                           ;common.c: 377: break;
  6051  000A62  D017               	goto	l834
  6052  000A64                     l6469:
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;common.c: 379: TSTime.Tdy--;
  6056  000A64  0642               	decf	_TSTime+3,f,c
  6057                           
  6058                           ; BSR set to: 0
  6059                           ;common.c: 380: if(TSTime.Tdy == 0) TSTime.Tdy = 7;
  6060  000A66  5042               	movf	_TSTime+3,w,c
  6061  000A68  E102               	bnz	l6475
  6062                           
  6063                           ; BSR set to: 0
  6064  000A6A  0E07               	movlw	7
  6065  000A6C  6E42               	movwf	_TSTime+3,c
  6066  000A6E                     l6475:
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;common.c: 381: RTOS_SetTask(default_state, 2000, 0);
  6070  000A6E  D896               	call	PL2	;call to abstracted procedure
  6071  000A70  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6072                           
  6073                           ;common.c: 382: events = 5;
  6074                           
  6075                           ;common.c: 383: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6076  000A74  EC42  F008         	call	PL16	;call to abstracted procedure
  6077  000A78  EC65  F011         	call	_setDate
  6078                           
  6079                           ;common.c: 384: break;
  6080  000A7C  D00A               	goto	l834
  6081  000A7E                     l6483:
  6082                           
  6083                           ; BSR set to: 0
  6084  000A7E  506F               	movf	_events,w,c
  6085                           
  6086                           ; Switch size 1, requested type "space"
  6087                           ; Number of cases is 5, Range of values is 1 to 5
  6088                           ; switch strategies available:
  6089                           ; Name         Instructions Cycles
  6090                           ; simple_byte           16     9 (average)
  6091                           ;	Chosen strategy is simple_byte
  6092  000A80  0A01               	xorlw	1	; case 1
  6093  000A82  E0C3               	bz	l6441
  6094  000A84  0A03               	xorlw	3	; case 2
  6095  000A86  E0E0               	bz	l6457
  6096  000A88  0A01               	xorlw	1	; case 3
  6097  000A8A  E0EC               	bz	l6469
  6098  000A8C  0A07               	xorlw	7	; case 4
  6099  000A8E  E0CE               	bz	l6451
  6100  000A90  0A01               	xorlw	1	; case 5
  6101  000A92                     l834:
  6102                           
  6103                           ;common.c: 386: if(en_put)
  6104  000A92  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6105  000A94  D07D               	goto	l6505
  6106                           
  6107                           ;common.c: 387: {
  6108                           ;common.c: 388: putchar_b_buf(0,'Ä', &Font);
  6109  000A96  0EC4               	movlw	196
  6110  000A98  EC2E  F003         	call	PL4	;call to abstracted procedure
  6111  000A9C  0E00               	movlw	0
  6112  000A9E  ECE6  F00E         	call	_putchar_b_buf
  6113                           
  6114                           ;common.c: 389: putchar_b_buf(6,'í', &Font);
  6115  000AA2  0EED               	movlw	237
  6116  000AA4  EC2E  F003         	call	PL4	;call to abstracted procedure
  6117  000AA8  0E06               	movlw	6
  6118  000AAA  ECE6  F00E         	call	_putchar_b_buf
  6119                           
  6120                           ;common.c: 390: putchar_b_buf(12,':', &Font);
  6121  000AAE  0E3A               	movlw	58
  6122  000AB0  EC2E  F003         	call	PL4	;call to abstracted procedure
  6123  000AB4  0E0C               	movlw	12
  6124  000AB6  ECE6  F00E         	call	_putchar_b_buf
  6125                           
  6126                           ;common.c: 391: switch(TSTime.Tdy)
  6127  000ABA  D05B               	goto	l6503
  6128  000ABC                     l6487:
  6129                           
  6130                           ;common.c: 394: putchar_b_buf(18,'Ï', &Font);
  6131  000ABC  0ECF               	movlw	207
  6132  000ABE  EC2E  F003         	call	PL4	;call to abstracted procedure
  6133  000AC2  0E12               	movlw	18
  6134  000AC4  ECE6  F00E         	call	_putchar_b_buf
  6135                           
  6136                           ;common.c: 395: putchar_b_buf(24,'í', &Font);
  6137  000AC8  0EED               	movlw	237
  6138  000ACA  EC2E  F003         	call	PL4	;call to abstracted procedure
  6139  000ACE  0E18               	movlw	24
  6140  000AD0  ECE6  F00E         	call	_putchar_b_buf
  6141                           
  6142                           ;common.c: 396: break;
  6143  000AD4  D05D               	goto	l6505
  6144  000AD6                     l6489:
  6145                           
  6146                           ;common.c: 398: putchar_b_buf(18,'Â', &Font);
  6147  000AD6  0EC2               	movlw	194
  6148  000AD8  EC2E  F003         	call	PL4	;call to abstracted procedure
  6149  000ADC  0E12               	movlw	18
  6150  000ADE  ECE6  F00E         	call	_putchar_b_buf
  6151                           
  6152                           ;common.c: 399: putchar_b_buf(24,'ò', &Font);
  6153  000AE2  0EF2               	movlw	242
  6154  000AE4  EC2E  F003         	call	PL4	;call to abstracted procedure
  6155  000AE8  0E18               	movlw	24
  6156  000AEA  ECE6  F00E         	call	_putchar_b_buf
  6157                           
  6158                           ;common.c: 400: break;
  6159  000AEE  D050               	goto	l6505
  6160  000AF0                     l6491:
  6161                           
  6162                           ;common.c: 402: putchar_b_buf(18,'Ñ', &Font);
  6163  000AF0  0ED1               	movlw	209
  6164  000AF2  EC2E  F003         	call	PL4	;call to abstracted procedure
  6165  000AF6  0E12               	movlw	18
  6166  000AF8  ECE6  F00E         	call	_putchar_b_buf
  6167                           
  6168                           ;common.c: 403: putchar_b_buf(24,'ð', &Font);
  6169  000AFC  0EF0               	movlw	240
  6170  000AFE  EC2E  F003         	call	PL4	;call to abstracted procedure
  6171  000B02  0E18               	movlw	24
  6172  000B04  ECE6  F00E         	call	_putchar_b_buf
  6173                           
  6174                           ;common.c: 404: break;
  6175  000B08  D043               	goto	l6505
  6176  000B0A                     l6493:
  6177                           
  6178                           ;common.c: 406: putchar_b_buf(18,'×', &Font);
  6179  000B0A  0ED7               	movlw	215
  6180  000B0C  EC2E  F003         	call	PL4	;call to abstracted procedure
  6181  000B10  0E12               	movlw	18
  6182  000B12  ECE6  F00E         	call	_putchar_b_buf
  6183                           
  6184                           ;common.c: 407: putchar_b_buf(24,'ò', &Font);
  6185  000B16  0EF2               	movlw	242
  6186  000B18  EC2E  F003         	call	PL4	;call to abstracted procedure
  6187  000B1C  0E18               	movlw	24
  6188  000B1E  ECE6  F00E         	call	_putchar_b_buf
  6189                           
  6190                           ;common.c: 408: break;
  6191  000B22  D036               	goto	l6505
  6192  000B24                     l6495:
  6193                           
  6194                           ;common.c: 410: putchar_b_buf(18,'Ï', &Font);
  6195  000B24  0ECF               	movlw	207
  6196  000B26  EC2E  F003         	call	PL4	;call to abstracted procedure
  6197  000B2A  0E12               	movlw	18
  6198  000B2C  ECE6  F00E         	call	_putchar_b_buf
  6199                           
  6200                           ;common.c: 411: putchar_b_buf(24,'ò', &Font);
  6201  000B30  0EF2               	movlw	242
  6202  000B32  EC2E  F003         	call	PL4	;call to abstracted procedure
  6203  000B36  0E18               	movlw	24
  6204  000B38  ECE6  F00E         	call	_putchar_b_buf
  6205                           
  6206                           ;common.c: 412: break;
  6207  000B3C  D029               	goto	l6505
  6208  000B3E                     l6497:
  6209                           
  6210                           ;common.c: 414: putchar_b_buf(18,'Ñ', &Font);
  6211  000B3E  0ED1               	movlw	209
  6212  000B40  EC2E  F003         	call	PL4	;call to abstracted procedure
  6213  000B44  0E12               	movlw	18
  6214  000B46  ECE6  F00E         	call	_putchar_b_buf
  6215                           
  6216                           ;common.c: 415: putchar_b_buf(24,'á', &Font);
  6217  000B4A  0EE1               	movlw	225
  6218  000B4C  EC2E  F003         	call	PL4	;call to abstracted procedure
  6219  000B50  0E18               	movlw	24
  6220  000B52  ECE6  F00E         	call	_putchar_b_buf
  6221                           
  6222                           ;common.c: 416: break;
  6223  000B56  D01C               	goto	l6505
  6224  000B58                     l6499:
  6225                           
  6226                           ;common.c: 418: putchar_b_buf(18,'Í', &Font);
  6227  000B58  0ECD               	movlw	205
  6228  000B5A  EC2E  F003         	call	PL4	;call to abstracted procedure
  6229  000B5E  0E12               	movlw	18
  6230  000B60  ECE6  F00E         	call	_putchar_b_buf
  6231                           
  6232                           ;common.c: 419: putchar_b_buf(24,'ä', &Font);
  6233  000B64  0EE4               	movlw	228
  6234  000B66  EC2E  F003         	call	PL4	;call to abstracted procedure
  6235  000B6A  0E18               	movlw	24
  6236  000B6C  ECE6  F00E         	call	_putchar_b_buf
  6237                           
  6238                           ;common.c: 420: break;
  6239  000B70  D00F               	goto	l6505
  6240  000B72                     l6503:
  6241  000B72  5042               	movf	_TSTime+3,w,c
  6242                           
  6243                           ; Switch size 1, requested type "space"
  6244                           ; Number of cases is 7, Range of values is 1 to 7
  6245                           ; switch strategies available:
  6246                           ; Name         Instructions Cycles
  6247                           ; simple_byte           22    12 (average)
  6248                           ;	Chosen strategy is simple_byte
  6249  000B74  0A01               	xorlw	1	; case 1
  6250  000B76  E0F0               	bz	l6499
  6251  000B78  0A03               	xorlw	3	; case 2
  6252  000B7A  E0A0               	bz	l6487
  6253  000B7C  0A01               	xorlw	1	; case 3
  6254  000B7E  E0AB               	bz	l6489
  6255  000B80  0A07               	xorlw	7	; case 4
  6256  000B82  E0B6               	bz	l6491
  6257  000B84  0A01               	xorlw	1	; case 5
  6258  000B86  E0C1               	bz	l6493
  6259  000B88  0A03               	xorlw	3	; case 6
  6260  000B8A  E0CC               	bz	l6495
  6261  000B8C  0A01               	xorlw	1	; case 7
  6262  000B8E  E0D7               	bz	l6497
  6263  000B90                     l6505:
  6264                           
  6265                           ;common.c: 422: }
  6266                           ;common.c: 423: Update_Matrix(Dis_Buff);
  6267  000B90  0EAB               	movlw	low _Dis_Buff
  6268  000B92  6E11               	movwf	Update_Matrix@buf,c
  6269  000B94  EC2A  F011         	call	_Update_Matrix	;wreg free
  6270                           
  6271                           ;common.c: 424: en_put=1;
  6272  000B98  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6273  000B9A  0012               	return		;funcret
  6274  000B9C                     __end_of_time_set_dy:
  6275                           	opt stack 0
  6276  000B9C                     PL2:
  6277                           	opt stack 22
  6278  000B9C  0E22               	movlw	low _default_state
  6279  000B9E  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6280  000BA0  0E28               	movlw	high _default_state
  6281  000BA2  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6282  000BA4  0E07               	movlw	7
  6283  000BA6  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  6284  000BA8  0ED0               	movlw	208
  6285  000BAA  6E11               	movwf	RTOS_SetTask@taskDelay,c
  6286  000BAC  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  6287  000BAE  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  6288  000BB0  0CD0               	retlw	208
  6289  000BB2                     __end_ofPL2:
  6290                           	opt stack 0
  6291  000BB2                     PL124:
  6292                           	opt stack 22
  6293  000BB2  0E08               	movlw	low _time_set_dy
  6294  000BB4  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6295  000BB6  0E0A               	movlw	high _time_set_dy
  6296  000BB8  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6297  000BBA  0012               	return	
  6298  000BBC                     __end_ofPL124:
  6299                           	opt stack 0
  6300                           tosu	equ	0xFFF
  6301                           tosh	equ	0xFFE
  6302                           tosl	equ	0xFFD
  6303                           pclath	equ	0xFFA
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           intcon	equ	0xFF2
  6311                           intcon2	equ	0xFF1
  6312                           postinc0	equ	0xFEE
  6313                           wreg	equ	0xFE8
  6314                           indf1	equ	0xFE7
  6315                           plusw1	equ	0xFE3
  6316                           fsr1h	equ	0xFE2
  6317                           fsr1l	equ	0xFE1
  6318                           indf2	equ	0xFDF
  6319                           postinc2	equ	0xFDE
  6320                           postdec2	equ	0xFDD
  6321                           plusw2	equ	0xFDB
  6322                           fsr2h	equ	0xFDA
  6323                           fsr2l	equ	0xFD9
  6324                           status	equ	0xFD8
  6325                           
  6326 ;; *************** function _time_set_dt *****************
  6327 ;; Defined at:
  6328 ;;		line 300 in file "common.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;		None
  6331 ;; Auto vars:     Size  Location     Type
  6332 ;;		None
  6333 ;; Return value:  Size  Location     Type
  6334 ;;                  1    wreg      void 
  6335 ;; Registers used:
  6336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6337 ;; Tracked objects:
  6338 ;;		On entry : 3F/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;Total ram usage:        0 bytes
  6347 ;; Hardware stack levels used:    1
  6348 ;; Hardware stack levels required when called:    7
  6349 ;; This function calls:
  6350 ;;		_RTOS_DeleteTask
  6351 ;;		_RTOS_SetTask
  6352 ;;		_Update_Matrix
  6353 ;;		___lbdiv
  6354 ;;		___lbmod
  6355 ;;		_putchar_b_buf
  6356 ;;		_setDate
  6357 ;; This function is called by:
  6358 ;;		_time_set_mt
  6359 ;;		_RTOS_DispatchTask
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           	psect	text22
  6364  000F98                     __ptext22:
  6365                           	opt stack 0
  6366  000F98                     _time_set_dt:
  6367                           	opt stack 22
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;common.c: 302: switch (events)
  6371                           
  6372                           ;incstack = 0
  6373  000F98  D03A               	goto	l6431
  6374  000F9A                     l6389:
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;common.c: 308: RTOS_DeleteTask(time_set_dt);
  6378  000F9A  D87E               	call	PL120	;call to abstracted procedure
  6379  000F9C  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  6380                           
  6381                           ;common.c: 309: RTOS_SetTask(time_set_dy, 0, 20);
  6382  000FA0  0E08               	movlw	low _time_set_dy
  6383  000FA2  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6384  000FA4  0E0A               	movlw	high _time_set_dy
  6385  000FA6  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6386  000FA8  ECD6  F009         	call	PL18	;call to abstracted procedure
  6387  000FAC  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6388                           
  6389                           ;common.c: 310: RTOS_SetTask(default_state, 2000, 0);
  6390  000FB0  ECCE  F005         	call	PL2	;call to abstracted procedure
  6391  000FB4  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6392                           
  6393                           ;common.c: 311: events = 5;
  6394                           
  6395                           ;common.c: 312: en_put=1;
  6396  000FB8  D874               	call	PL154	;call to abstracted procedure
  6397                           
  6398                           ;common.c: 313: break;
  6399  000FBA  D033               	goto	l821
  6400  000FBC                     l6399:
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;common.c: 315: RTOS_DeleteTask(time_set_dt);
  6404  000FBC  D86D               	call	PL120	;call to abstracted procedure
  6405  000FBE  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  6406                           
  6407                           ;common.c: 316: RTOS_DeleteTask(default_state);
  6408  000FC2  EC53  F00A         	call	PL46	;call to abstracted procedure
  6409  000FC6  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  6410                           
  6411                           ;common.c: 317: RTOS_SetTask(time_led, 0, 20);
  6412  000FCA  EC49  F00A         	call	PL8	;call to abstracted procedure
  6413  000FCE  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6414                           
  6415                           ;common.c: 318: events = 5;
  6416  000FD2  0E05               	movlw	5
  6417  000FD4  6E6F               	movwf	_events,c
  6418                           
  6419                           ;common.c: 319: break;
  6420  000FD6  D025               	goto	l821
  6421  000FD8                     l6405:
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;common.c: 321: TSTime.Tdt++;
  6425  000FD8  2A43               	incf	_TSTime+4,f,c
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;common.c: 322: if(TSTime.Tdt > 31) TSTime.Tdt = 1;
  6429  000FDA  0E1F               	movlw	31
  6430  000FDC  6443               	cpfsgt	_TSTime+4,c
  6431  000FDE  D002               	goto	l6411
  6432                           
  6433                           ; BSR set to: 0
  6434  000FE0  0E01               	movlw	1
  6435  000FE2  6E43               	movwf	_TSTime+4,c
  6436  000FE4                     l6411:
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;common.c: 323: RTOS_SetTask(default_state, 2000, 0);
  6440  000FE4  ECCE  F005         	call	PL2	;call to abstracted procedure
  6441  000FE8  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6442                           
  6443                           ;common.c: 324: events = 5;
  6444                           
  6445                           ;common.c: 325: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6446  000FEC  D84B               	call	PL16	;call to abstracted procedure
  6447  000FEE  EC65  F011         	call	_setDate
  6448                           
  6449                           ;common.c: 326: break;
  6450  000FF2  D017               	goto	l821
  6451  000FF4                     l6417:
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;common.c: 328: TSTime.Tdt--;
  6455  000FF4  0643               	decf	_TSTime+4,f,c
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;common.c: 329: if(TSTime.Tdt == 0) TSTime.Tdt = 31;
  6459  000FF6  5043               	movf	_TSTime+4,w,c
  6460  000FF8  E102               	bnz	l6423
  6461                           
  6462                           ; BSR set to: 0
  6463  000FFA  0E1F               	movlw	31
  6464  000FFC  6E43               	movwf	_TSTime+4,c
  6465  000FFE                     l6423:
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;common.c: 330: RTOS_SetTask(default_state, 2000, 0);
  6469  000FFE  ECCE  F005         	call	PL2	;call to abstracted procedure
  6470  001002  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6471                           
  6472                           ;common.c: 331: events = 5;
  6473                           
  6474                           ;common.c: 332: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6475  001006  D83E               	call	PL16	;call to abstracted procedure
  6476  001008  EC65  F011         	call	_setDate
  6477                           
  6478                           ;common.c: 333: break;
  6479  00100C  D00A               	goto	l821
  6480  00100E                     l6431:
  6481                           
  6482                           ; BSR set to: 0
  6483  00100E  506F               	movf	_events,w,c
  6484                           
  6485                           ; Switch size 1, requested type "space"
  6486                           ; Number of cases is 5, Range of values is 1 to 5
  6487                           ; switch strategies available:
  6488                           ; Name         Instructions Cycles
  6489                           ; simple_byte           16     9 (average)
  6490                           ;	Chosen strategy is simple_byte
  6491  001010  0A01               	xorlw	1	; case 1
  6492  001012  E0C3               	bz	l6389
  6493  001014  0A03               	xorlw	3	; case 2
  6494  001016  E0E0               	bz	l6405
  6495  001018  0A01               	xorlw	1	; case 3
  6496  00101A  E0EC               	bz	l6417
  6497  00101C  0A07               	xorlw	7	; case 4
  6498  00101E  E0CE               	bz	l6399
  6499  001020  0A01               	xorlw	1	; case 5
  6500  001022                     l821:
  6501                           
  6502                           ;common.c: 335: if(en_put)
  6503  001022  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6504  001024  D029               	goto	l6435
  6505                           
  6506                           ;common.c: 336: {
  6507                           ;common.c: 337: putchar_b_buf(0,'×', &Font);
  6508  001026  0ED7               	movlw	215
  6509  001028  EC2E  F003         	call	PL4	;call to abstracted procedure
  6510  00102C  0E00               	movlw	0
  6511  00102E  ECE6  F00E         	call	_putchar_b_buf
  6512                           
  6513                           ;common.c: 338: putchar_b_buf(6,'ñ', &Font);
  6514  001032  0EF1               	movlw	241
  6515  001034  EC2E  F003         	call	PL4	;call to abstracted procedure
  6516  001038  0E06               	movlw	6
  6517  00103A  ECE6  F00E         	call	_putchar_b_buf
  6518                           
  6519                           ;common.c: 339: putchar_b_buf(12,':', &Font);
  6520  00103E  0E3A               	movlw	58
  6521  001040  EC2E  F003         	call	PL4	;call to abstracted procedure
  6522  001044  0E0C               	movlw	12
  6523  001046  ECE6  F00E         	call	_putchar_b_buf
  6524                           
  6525                           ;common.c: 340: putchar_b_buf(18,(TSTime.Tdt/10) % 10, pFont);
  6526  00104A  0E0A               	movlw	10
  6527  00104C  6E13               	movwf	___lbmod@divisor,c
  6528  00104E  6E0F               	movwf	___lbdiv@divisor,c
  6529  001050  5043               	movf	_TSTime+4,w,c
  6530  001052  ECD4  F011         	call	___lbdiv
  6531  001056  ECB3  F012         	call	___lbmod
  6532  00105A  EC7B  F006         	call	PL30	;call to abstracted procedure
  6533  00105E  0E12               	movlw	18
  6534  001060  ECE6  F00E         	call	_putchar_b_buf
  6535                           
  6536                           ;common.c: 341: putchar_b_buf(24,TSTime.Tdt % 10 , pFont);
  6537  001064  0E0A               	movlw	10
  6538  001066  6E13               	movwf	___lbmod@divisor,c
  6539  001068  5043               	movf	_TSTime+4,w,c
  6540  00106A  ECB3  F012         	call	___lbmod
  6541  00106E  EC7B  F006         	call	PL30	;call to abstracted procedure
  6542  001072  0E18               	movlw	24
  6543  001074  ECE6  F00E         	call	_putchar_b_buf
  6544  001078                     l6435:
  6545                           
  6546                           ;common.c: 342: }
  6547                           ;common.c: 343: Update_Matrix(Dis_Buff);
  6548  001078  0EAB               	movlw	low _Dis_Buff
  6549  00107A  6E11               	movwf	Update_Matrix@buf,c
  6550  00107C  EC2A  F011         	call	_Update_Matrix	;wreg free
  6551                           
  6552                           ;common.c: 344: en_put=1;
  6553  001080  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6554  001082  0012               	return		;funcret
  6555  001084                     __end_of_time_set_dt:
  6556                           	opt stack 0
  6557  001084                     PL16:
  6558                           	opt stack 22
  6559  001084  0E05               	movlw	5
  6560  001086  6E6F               	movwf	_events,c
  6561  001088  C043  F01C         	movff	_TSTime+4,setDate@dateSet
  6562  00108C  C044  F01D         	movff	_TSTime+5,setDate@monthSet
  6563  001090  C045  F01E         	movff	_TSTime+6,setDate@yearSet
  6564  001094  5042               	movf	_TSTime+3,w,c
  6565  001096  0012               	return	
  6566  001098                     __end_ofPL16:
  6567                           	opt stack 0
  6568  001098                     PL120:
  6569                           	opt stack 22
  6570  001098  0E98               	movlw	low _time_set_dt
  6571  00109A  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6572  00109C  0E0F               	movlw	high _time_set_dt
  6573  00109E  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6574  0010A0  0012               	return	
  6575  0010A2                     __end_ofPL120:
  6576                           	opt stack 0
  6577  0010A2                     PL154:
  6578                           	opt stack 22
  6579  0010A2  0E05               	movlw	5
  6580  0010A4  6E6F               	movwf	_events,c
  6581  0010A6  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6582  0010A8  0C05               	retlw	5
  6583  0010AA                     __end_ofPL154:
  6584                           	opt stack 0
  6585                           tosu	equ	0xFFF
  6586                           tosh	equ	0xFFE
  6587                           tosl	equ	0xFFD
  6588                           pclath	equ	0xFFA
  6589                           tblptru	equ	0xFF8
  6590                           tblptrh	equ	0xFF7
  6591                           tblptrl	equ	0xFF6
  6592                           tablat	equ	0xFF5
  6593                           prodh	equ	0xFF4
  6594                           prodl	equ	0xFF3
  6595                           intcon	equ	0xFF2
  6596                           intcon2	equ	0xFF1
  6597                           postinc0	equ	0xFEE
  6598                           wreg	equ	0xFE8
  6599                           indf1	equ	0xFE7
  6600                           plusw1	equ	0xFE3
  6601                           fsr1h	equ	0xFE2
  6602                           fsr1l	equ	0xFE1
  6603                           indf2	equ	0xFDF
  6604                           postinc2	equ	0xFDE
  6605                           postdec2	equ	0xFDD
  6606                           plusw2	equ	0xFDB
  6607                           fsr2h	equ	0xFDA
  6608                           fsr2l	equ	0xFD9
  6609                           status	equ	0xFD8
  6610                           
  6611 ;; *************** function _time_set_mt *****************
  6612 ;; Defined at:
  6613 ;;		line 200 in file "common.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;		None
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;		None
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  1    wreg      void 
  6620 ;; Registers used:
  6621 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 3F/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;Total ram usage:        0 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    7
  6634 ;; This function calls:
  6635 ;;		_RTOS_DeleteTask
  6636 ;;		_RTOS_SetTask
  6637 ;;		_Update_Matrix
  6638 ;;		_putchar_b_buf
  6639 ;;		_setDate
  6640 ;; This function is called by:
  6641 ;;		_time_set_yr
  6642 ;;		_RTOS_DispatchTask
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text23
  6647  000460                     __ptext23:
  6648                           	opt stack 0
  6649  000460                     _time_set_mt:
  6650                           	opt stack 22
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;common.c: 202: switch (events)
  6654                           
  6655                           ;incstack = 0
  6656  000460  D03D               	goto	l6351
  6657  000462                     l6309:
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;common.c: 208: RTOS_DeleteTask(time_set_mt);
  6661  000462  D902               	call	PL118	;call to abstracted procedure
  6662  000464  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  6663                           
  6664                           ;common.c: 209: RTOS_SetTask(time_set_dt, 0, 20);
  6665  000468  0E98               	movlw	low _time_set_dt
  6666  00046A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6667  00046C  0E0F               	movlw	high _time_set_dt
  6668  00046E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6669  000470  ECD6  F009         	call	PL18	;call to abstracted procedure
  6670  000474  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6671                           
  6672                           ;common.c: 210: RTOS_SetTask(default_state, 2000, 0);
  6673  000478  ECCE  F005         	call	PL2	;call to abstracted procedure
  6674  00047C  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6675                           
  6676                           ;common.c: 211: events = 5;
  6677                           
  6678                           ;common.c: 212: en_put=1;
  6679  000480  EC51  F008         	call	PL154	;call to abstracted procedure
  6680                           
  6681                           ;common.c: 213: break;
  6682  000484  D035               	goto	l794
  6683  000486                     l6319:
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;common.c: 215: RTOS_DeleteTask(time_set_mt);
  6687  000486  D8F0               	call	PL118	;call to abstracted procedure
  6688  000488  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  6689                           
  6690                           ;common.c: 216: RTOS_DeleteTask(default_state);
  6691  00048C  EC53  F00A         	call	PL46	;call to abstracted procedure
  6692  000490  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  6693                           
  6694                           ;common.c: 217: RTOS_SetTask(time_led, 0, 20);
  6695  000494  EC49  F00A         	call	PL8	;call to abstracted procedure
  6696  000498  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6697                           
  6698                           ;common.c: 218: events = 5;
  6699  00049C  0E05               	movlw	5
  6700  00049E  6E6F               	movwf	_events,c
  6701                           
  6702                           ;common.c: 219: break;
  6703  0004A0  D027               	goto	l794
  6704  0004A2                     l6325:
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;common.c: 221: TSTime.Tmt++;
  6708  0004A2  2A44               	incf	_TSTime+5,f,c
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;common.c: 222: if(TSTime.Tmt > 12) TSTime.Tmt = 1;
  6712  0004A4  0E0C               	movlw	12
  6713  0004A6  6444               	cpfsgt	_TSTime+5,c
  6714  0004A8  D002               	goto	l6331
  6715                           
  6716                           ; BSR set to: 0
  6717  0004AA  0E01               	movlw	1
  6718  0004AC  6E44               	movwf	_TSTime+5,c
  6719  0004AE                     l6331:
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;common.c: 223: RTOS_SetTask(default_state, 2000, 0);
  6723  0004AE  ECCE  F005         	call	PL2	;call to abstracted procedure
  6724  0004B2  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6725                           
  6726                           ;common.c: 224: events = 5;
  6727                           
  6728                           ;common.c: 225: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6729  0004B6  EC42  F008         	call	PL16	;call to abstracted procedure
  6730  0004BA  EC65  F011         	call	_setDate
  6731                           
  6732                           ;common.c: 226: break;
  6733  0004BE  D018               	goto	l794
  6734  0004C0                     l6337:
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;common.c: 228: TSTime.Tmt--;
  6738  0004C0  0644               	decf	_TSTime+5,f,c
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;common.c: 229: if(TSTime.Tmt == 0) TSTime.Tmt = 12;
  6742  0004C2  5044               	movf	_TSTime+5,w,c
  6743  0004C4  E102               	bnz	l6343
  6744                           
  6745                           ; BSR set to: 0
  6746  0004C6  0E0C               	movlw	12
  6747  0004C8  6E44               	movwf	_TSTime+5,c
  6748  0004CA                     l6343:
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;common.c: 230: RTOS_SetTask(default_state, 2000, 0);
  6752  0004CA  ECCE  F005         	call	PL2	;call to abstracted procedure
  6753  0004CE  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  6754                           
  6755                           ;common.c: 231: events = 5;
  6756                           
  6757                           ;common.c: 232: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6758  0004D2  EC42  F008         	call	PL16	;call to abstracted procedure
  6759  0004D6  EC65  F011         	call	_setDate
  6760                           
  6761                           ;common.c: 233: break;
  6762  0004DA  D00A               	goto	l794
  6763  0004DC                     l6351:
  6764                           
  6765                           ; BSR set to: 0
  6766  0004DC  506F               	movf	_events,w,c
  6767                           
  6768                           ; Switch size 1, requested type "space"
  6769                           ; Number of cases is 5, Range of values is 1 to 5
  6770                           ; switch strategies available:
  6771                           ; Name         Instructions Cycles
  6772                           ; simple_byte           16     9 (average)
  6773                           ;	Chosen strategy is simple_byte
  6774  0004DE  0A01               	xorlw	1	; case 1
  6775  0004E0  E0C0               	bz	l6309
  6776  0004E2  0A03               	xorlw	3	; case 2
  6777  0004E4  E0DE               	bz	l6325
  6778  0004E6  0A01               	xorlw	1	; case 3
  6779  0004E8  E0EB               	bz	l6337
  6780  0004EA  0A07               	xorlw	7	; case 4
  6781  0004EC  E0CC               	bz	l6319
  6782  0004EE  0A01               	xorlw	1	; case 5
  6783  0004F0                     l794:
  6784                           
  6785                           ;common.c: 235: if(en_put)
  6786  0004F0  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6787  0004F2  D0AE               	goto	l6383
  6788                           
  6789                           ;common.c: 236: {
  6790                           ;common.c: 237: putchar_b_buf(0,'Ì', &Font);
  6791  0004F4  0ECC               	movlw	204
  6792  0004F6  D8B2               	call	PL4	;call to abstracted procedure
  6793  0004F8  0E00               	movlw	0
  6794  0004FA  ECE6  F00E         	call	_putchar_b_buf
  6795                           
  6796                           ;common.c: 238: putchar_b_buf(6,'ñ', &Font);
  6797  0004FE  0EF1               	movlw	241
  6798  000500  D8AD               	call	PL4	;call to abstracted procedure
  6799  000502  0E06               	movlw	6
  6800  000504  ECE6  F00E         	call	_putchar_b_buf
  6801                           
  6802                           ;common.c: 239: putchar_b_buf(12,':', &Font);
  6803  000508  0E3A               	movlw	58
  6804  00050A  D8A8               	call	PL4	;call to abstracted procedure
  6805  00050C  0E0C               	movlw	12
  6806  00050E  ECE6  F00E         	call	_putchar_b_buf
  6807                           
  6808                           ;common.c: 240: switch(TSTime.Tmt)
  6809  000512  D084               	goto	l6381
  6810  000514                     l6355:
  6811                           
  6812                           ;common.c: 243: putchar_b_buf(18,'Ñ', &Font);
  6813  000514  0ED1               	movlw	209
  6814  000516  D8A2               	call	PL4	;call to abstracted procedure
  6815  000518  0E12               	movlw	18
  6816  00051A  ECE6  F00E         	call	_putchar_b_buf
  6817                           
  6818                           ;common.c: 244: putchar_b_buf(24,'÷', &Font);
  6819  00051E  0EF7               	movlw	247
  6820  000520  D89D               	call	PL4	;call to abstracted procedure
  6821  000522  0E18               	movlw	24
  6822  000524  ECE6  F00E         	call	_putchar_b_buf
  6823                           
  6824                           ;common.c: 245: break;
  6825  000528  D093               	goto	l6383
  6826  00052A                     l6357:
  6827                           
  6828                           ;common.c: 247: putchar_b_buf(18,'Ë', &Font);
  6829  00052A  0ECB               	movlw	203
  6830  00052C  D897               	call	PL4	;call to abstracted procedure
  6831  00052E  0E12               	movlw	18
  6832  000530  ECE6  F00E         	call	_putchar_b_buf
  6833                           
  6834                           ;common.c: 248: putchar_b_buf(24,'ò', &Font);
  6835  000534  0EF2               	movlw	242
  6836  000536  D892               	call	PL4	;call to abstracted procedure
  6837  000538  0E18               	movlw	24
  6838  00053A  ECE6  F00E         	call	_putchar_b_buf
  6839                           
  6840                           ;common.c: 249: break;
  6841  00053E  D088               	goto	l6383
  6842  000540                     l6359:
  6843                           
  6844                           ;common.c: 251: putchar_b_buf(18,'Á', &Font);
  6845  000540  0EC1               	movlw	193
  6846  000542  D88C               	call	PL4	;call to abstracted procedure
  6847  000544  0E12               	movlw	18
  6848  000546  ECE6  F00E         	call	_putchar_b_buf
  6849                           
  6850                           ;common.c: 252: putchar_b_buf(24,'ð', &Font);
  6851  00054A  0EF0               	movlw	240
  6852  00054C  D887               	call	PL4	;call to abstracted procedure
  6853  00054E  0E18               	movlw	24
  6854  000550  ECE6  F00E         	call	_putchar_b_buf
  6855                           
  6856                           ;common.c: 253: break;
  6857  000554  D07D               	goto	l6383
  6858  000556                     l6361:
  6859                           
  6860                           ;common.c: 255: putchar_b_buf(18,'Ê', &Font);
  6861  000556  0ECA               	movlw	202
  6862  000558  D881               	call	PL4	;call to abstracted procedure
  6863  00055A  0E12               	movlw	18
  6864  00055C  ECE6  F00E         	call	_putchar_b_buf
  6865                           
  6866                           ;common.c: 256: putchar_b_buf(24,'â', &Font);
  6867  000560  0EE2               	movlw	226
  6868  000562  D87C               	call	PL4	;call to abstracted procedure
  6869  000564  0E18               	movlw	24
  6870  000566  ECE6  F00E         	call	_putchar_b_buf
  6871                           
  6872                           ;common.c: 257: break;
  6873  00056A  D072               	goto	l6383
  6874  00056C                     l6363:
  6875                           
  6876                           ;common.c: 259: putchar_b_buf(18,'Ò', &Font);
  6877  00056C  0ED2               	movlw	210
  6878  00056E  D876               	call	PL4	;call to abstracted procedure
  6879  000570  0E12               	movlw	18
  6880  000572  ECE6  F00E         	call	_putchar_b_buf
  6881                           
  6882                           ;common.c: 260: putchar_b_buf(24,'ð', &Font);
  6883  000576  0EF0               	movlw	240
  6884  000578  D871               	call	PL4	;call to abstracted procedure
  6885  00057A  0E18               	movlw	24
  6886  00057C  ECE6  F00E         	call	_putchar_b_buf
  6887                           
  6888                           ;common.c: 261: break;
  6889  000580  D067               	goto	l6383
  6890  000582                     l6365:
  6891                           
  6892                           ;common.c: 263: putchar_b_buf(18,'×', &Font);
  6893  000582  0ED7               	movlw	215
  6894  000584  D86B               	call	PL4	;call to abstracted procedure
  6895  000586  0E12               	movlw	18
  6896  000588  ECE6  F00E         	call	_putchar_b_buf
  6897                           
  6898                           ;common.c: 264: putchar_b_buf(24,'ð', &Font);
  6899  00058C  0EF0               	movlw	240
  6900  00058E  D866               	call	PL4	;call to abstracted procedure
  6901  000590  0E18               	movlw	24
  6902  000592  ECE6  F00E         	call	_putchar_b_buf
  6903                           
  6904                           ;common.c: 265: break;
  6905  000596  D05C               	goto	l6383
  6906  000598                     l6367:
  6907                           
  6908                           ;common.c: 267: putchar_b_buf(18,'Ë', &Font);
  6909  000598  0ECB               	movlw	203
  6910  00059A  D860               	call	PL4	;call to abstracted procedure
  6911  00059C  0E12               	movlw	18
  6912  00059E  ECE6  F00E         	call	_putchar_b_buf
  6913                           
  6914                           ;common.c: 268: putchar_b_buf(24,'ï', &Font);
  6915  0005A2  0EEF               	movlw	239
  6916  0005A4  D85B               	call	PL4	;call to abstracted procedure
  6917  0005A6  0E18               	movlw	24
  6918  0005A8  ECE6  F00E         	call	_putchar_b_buf
  6919                           
  6920                           ;common.c: 269: break;
  6921  0005AC  D051               	goto	l6383
  6922  0005AE                     l6369:
  6923                           
  6924                           ;common.c: 271: putchar_b_buf(18,'Ñ', &Font);
  6925  0005AE  0ED1               	movlw	209
  6926  0005B0  D855               	call	PL4	;call to abstracted procedure
  6927  0005B2  0E12               	movlw	18
  6928  0005B4  ECE6  F00E         	call	_putchar_b_buf
  6929                           
  6930                           ;common.c: 272: putchar_b_buf(24,'ï', &Font);
  6931  0005B8  0EEF               	movlw	239
  6932  0005BA  D850               	call	PL4	;call to abstracted procedure
  6933  0005BC  0E18               	movlw	24
  6934  0005BE  ECE6  F00E         	call	_putchar_b_buf
  6935                           
  6936                           ;common.c: 273: break;
  6937  0005C2  D046               	goto	l6383
  6938  0005C4                     l6371:
  6939                           
  6940                           ;common.c: 275: putchar_b_buf(18,'Â', &Font);
  6941  0005C4  0EC2               	movlw	194
  6942  0005C6  D84A               	call	PL4	;call to abstracted procedure
  6943  0005C8  0E12               	movlw	18
  6944  0005CA  ECE6  F00E         	call	_putchar_b_buf
  6945                           
  6946                           ;common.c: 276: putchar_b_buf(24,'ð', &Font);
  6947  0005CE  0EF0               	movlw	240
  6948  0005D0  D845               	call	PL4	;call to abstracted procedure
  6949  0005D2  0E18               	movlw	24
  6950  0005D4  ECE6  F00E         	call	_putchar_b_buf
  6951                           
  6952                           ;common.c: 277: break;
  6953  0005D8  D03B               	goto	l6383
  6954  0005DA                     l6373:
  6955                           
  6956                           ;common.c: 279: putchar_b_buf(18,'Æ', &Font);
  6957  0005DA  0EC6               	movlw	198
  6958  0005DC  D83F               	call	PL4	;call to abstracted procedure
  6959  0005DE  0E12               	movlw	18
  6960  0005E0  ECE6  F00E         	call	_putchar_b_buf
  6961                           
  6962                           ;common.c: 280: putchar_b_buf(24,'ò', &Font);
  6963  0005E4  0EF2               	movlw	242
  6964  0005E6  D83A               	call	PL4	;call to abstracted procedure
  6965  0005E8  0E18               	movlw	24
  6966  0005EA  ECE6  F00E         	call	_putchar_b_buf
  6967                           
  6968                           ;common.c: 281: break;
  6969  0005EE  D030               	goto	l6383
  6970  0005F0                     l6375:
  6971                           
  6972                           ;common.c: 283: putchar_b_buf(18,'Ë', &Font);
  6973  0005F0  0ECB               	movlw	203
  6974  0005F2  D834               	call	PL4	;call to abstracted procedure
  6975  0005F4  0E12               	movlw	18
  6976  0005F6  ECE6  F00E         	call	_putchar_b_buf
  6977                           
  6978                           ;common.c: 284: putchar_b_buf(24,'ñ', &Font);
  6979  0005FA  0EF1               	movlw	241
  6980  0005FC  D82F               	call	PL4	;call to abstracted procedure
  6981  0005FE  0E18               	movlw	24
  6982  000600  ECE6  F00E         	call	_putchar_b_buf
  6983                           
  6984                           ;common.c: 285: break;
  6985  000604  D025               	goto	l6383
  6986  000606                     l6377:
  6987                           
  6988                           ;common.c: 287: putchar_b_buf(18,'Ã', &Font);
  6989  000606  0EC3               	movlw	195
  6990  000608  D829               	call	PL4	;call to abstracted procedure
  6991  00060A  0E12               	movlw	18
  6992  00060C  ECE6  F00E         	call	_putchar_b_buf
  6993                           
  6994                           ;common.c: 288: putchar_b_buf(24,'ð', &Font);
  6995  000610  0EF0               	movlw	240
  6996  000612  D824               	call	PL4	;call to abstracted procedure
  6997  000614  0E18               	movlw	24
  6998  000616  ECE6  F00E         	call	_putchar_b_buf
  6999                           
  7000                           ;common.c: 289: break;
  7001  00061A  D01A               	goto	l6383
  7002  00061C                     l6381:
  7003  00061C  5044               	movf	_TSTime+5,w,c
  7004                           
  7005                           ; Switch size 1, requested type "space"
  7006                           ; Number of cases is 12, Range of values is 1 to 12
  7007                           ; switch strategies available:
  7008                           ; Name         Instructions Cycles
  7009                           ; simple_byte           37    19 (average)
  7010                           ;	Chosen strategy is simple_byte
  7011  00061E  0A01               	xorlw	1	; case 1
  7012  000620  E101 D778          	bz	l6355
  7013  000624  0A03               	xorlw	3	; case 2
  7014  000626  E081               	bz	l6357
  7015  000628  0A01               	xorlw	1	; case 3
  7016  00062A  E08A               	bz	l6359
  7017  00062C  0A07               	xorlw	7	; case 4
  7018  00062E  E093               	bz	l6361
  7019  000630  0A01               	xorlw	1	; case 5
  7020  000632  E09C               	bz	l6363
  7021  000634  0A03               	xorlw	3	; case 6
  7022  000636  E0A5               	bz	l6365
  7023  000638  0A01               	xorlw	1	; case 7
  7024  00063A  E0AE               	bz	l6367
  7025  00063C  0A0F               	xorlw	15	; case 8
  7026  00063E  E0B7               	bz	l6369
  7027  000640  0A01               	xorlw	1	; case 9
  7028  000642  E0C0               	bz	l6371
  7029  000644  0A03               	xorlw	3	; case 10
  7030  000646  E0C9               	bz	l6373
  7031  000648  0A01               	xorlw	1	; case 11
  7032  00064A  E0D2               	bz	l6375
  7033  00064C  0A07               	xorlw	7	; case 12
  7034  00064E  E0DB               	bz	l6377
  7035  000650                     l6383:
  7036                           
  7037                           ;common.c: 292: }
  7038                           ;common.c: 293: Update_Matrix(Dis_Buff);
  7039  000650  0EAB               	movlw	low _Dis_Buff
  7040  000652  6E11               	movwf	Update_Matrix@buf,c
  7041  000654  EC2A  F011         	call	_Update_Matrix	;wreg free
  7042                           
  7043                           ;common.c: 294: en_put=1;
  7044  000658  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  7045  00065A  0012               	return		;funcret
  7046  00065C                     __end_of_time_set_mt:
  7047                           	opt stack 0
  7048  00065C                     PL4:
  7049                           	opt stack 24
  7050  00065C  6E17               	movwf	putchar_b_buf@symbol,c
  7051  00065E  0EC2               	movlw	low _Font
  7052  000660  6E18               	movwf	putchar_b_buf@pF,c
  7053  000662  0EB9               	movlw	high _Font
  7054  000664  6E19               	movwf	putchar_b_buf@pF+1,c
  7055  000666  0012               	return	
  7056  000668                     __end_ofPL4:
  7057                           	opt stack 0
  7058  000668                     PL118:
  7059                           	opt stack 22
  7060  000668  0E60               	movlw	low _time_set_mt
  7061  00066A  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  7062  00066C  0E04               	movlw	high _time_set_mt
  7063  00066E  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  7064  000670  0012               	return	
  7065  000672                     __end_ofPL118:
  7066                           	opt stack 0
  7067                           tosu	equ	0xFFF
  7068                           tosh	equ	0xFFE
  7069                           tosl	equ	0xFFD
  7070                           pclath	equ	0xFFA
  7071                           tblptru	equ	0xFF8
  7072                           tblptrh	equ	0xFF7
  7073                           tblptrl	equ	0xFF6
  7074                           tablat	equ	0xFF5
  7075                           prodh	equ	0xFF4
  7076                           prodl	equ	0xFF3
  7077                           intcon	equ	0xFF2
  7078                           intcon2	equ	0xFF1
  7079                           postinc0	equ	0xFEE
  7080                           wreg	equ	0xFE8
  7081                           indf1	equ	0xFE7
  7082                           plusw1	equ	0xFE3
  7083                           fsr1h	equ	0xFE2
  7084                           fsr1l	equ	0xFE1
  7085                           indf2	equ	0xFDF
  7086                           postinc2	equ	0xFDE
  7087                           postdec2	equ	0xFDD
  7088                           plusw2	equ	0xFDB
  7089                           fsr2h	equ	0xFDA
  7090                           fsr2l	equ	0xFD9
  7091                           status	equ	0xFD8
  7092                           
  7093 ;; *************** function _default_state *****************
  7094 ;; Defined at:
  7095 ;;		line 691 in file "common.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;		None
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;		None
  7100 ;; Return value:  Size  Location     Type
  7101 ;;                  1    wreg      void 
  7102 ;; Registers used:
  7103 ;;		wreg, status,2
  7104 ;; Tracked objects:
  7105 ;;		On entry : 3F/0
  7106 ;;		On exit  : 3F/0
  7107 ;;		Unchanged: 3F/0
  7108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;Total ram usage:        0 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; Hardware stack levels required when called:    3
  7116 ;; This function calls:
  7117 ;;		Nothing
  7118 ;; This function is called by:
  7119 ;;		_time_set_min
  7120 ;;		_time_set_hr
  7121 ;;		_time_set_yr
  7122 ;;		_time_set_mt
  7123 ;;		_time_set_dt
  7124 ;;		_time_set_dy
  7125 ;;		_set_font_set
  7126 ;;		_home_temp
  7127 ;;		_pressure
  7128 ;;		_time_led
  7129 ;;		_RTOS_DispatchTask
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           	psect	text24
  7134  002822                     __ptext24:
  7135                           	opt stack 0
  7136  002822                     _default_state:
  7137                           	opt stack 26
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;common.c: 693: events = 4;
  7141                           
  7142                           ;incstack = 0
  7143  002822  0E04               	movlw	4
  7144  002824  6E6F               	movwf	_events,c
  7145                           
  7146                           ; BSR set to: 0
  7147  002826  0C04               	retlw	4	;funcret
  7148  002828                     __end_of_default_state:
  7149                           	opt stack 0
  7150                           tosu	equ	0xFFF
  7151                           tosh	equ	0xFFE
  7152                           tosl	equ	0xFFD
  7153                           pclath	equ	0xFFA
  7154                           tblptru	equ	0xFF8
  7155                           tblptrh	equ	0xFF7
  7156                           tblptrl	equ	0xFF6
  7157                           tablat	equ	0xFF5
  7158                           prodh	equ	0xFF4
  7159                           prodl	equ	0xFF3
  7160                           intcon	equ	0xFF2
  7161                           intcon2	equ	0xFF1
  7162                           postinc0	equ	0xFEE
  7163                           wreg	equ	0xFE8
  7164                           indf1	equ	0xFE7
  7165                           plusw1	equ	0xFE3
  7166                           fsr1h	equ	0xFE2
  7167                           fsr1l	equ	0xFE1
  7168                           indf2	equ	0xFDF
  7169                           postinc2	equ	0xFDE
  7170                           postdec2	equ	0xFDD
  7171                           plusw2	equ	0xFDB
  7172                           fsr2h	equ	0xFDA
  7173                           fsr2l	equ	0xFD9
  7174                           status	equ	0xFD8
  7175                           
  7176 ;; *************** function _time_set_hr *****************
  7177 ;; Defined at:
  7178 ;;		line 85 in file "common.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;		None
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;		None
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      void 
  7185 ;; Registers used:
  7186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7187 ;; Tracked objects:
  7188 ;;		On entry : 3F/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;Total ram usage:        0 bytes
  7197 ;; Hardware stack levels used:    1
  7198 ;; Hardware stack levels required when called:    7
  7199 ;; This function calls:
  7200 ;;		_RTOS_DeleteTask
  7201 ;;		_RTOS_SetTask
  7202 ;;		_Update_Matrix
  7203 ;;		___lbdiv
  7204 ;;		___lbmod
  7205 ;;		_clear_matrix
  7206 ;;		_putchar_b_buf
  7207 ;;		_setTime
  7208 ;; This function is called by:
  7209 ;;		_time_set_min
  7210 ;;		_RTOS_DispatchTask
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           	psect	text25
  7215  000BBC                     __ptext25:
  7216                           	opt stack 0
  7217  000BBC                     _time_set_hr:
  7218                           	opt stack 22
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;common.c: 87: show_digit = ~show_digit;
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;incstack = 0
  7225  000BBC  B270               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  7226  000BBE  D002               	goto	u4250
  7227  000BC0  8270               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  7228  000BC2  D043               	goto	l6237
  7229  000BC4                     u4250:
  7230  000BC4  9270               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  7231                           
  7232                           ;common.c: 88: switch (events)
  7233  000BC6  D041               	goto	l6237
  7234  000BC8                     l6193:
  7235                           
  7236                           ;common.c: 94: RTOS_DeleteTask(time_set_hr);
  7237  000BC8  D8A6               	call	PL140	;call to abstracted procedure
  7238  000BCA  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  7239                           
  7240                           ;common.c: 95: RTOS_SetTask(time_set_yr, 0, 20);
  7241  000BCE  0EC4               	movlw	low _time_set_yr
  7242  000BD0  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7243  000BD2  0E14               	movlw	high _time_set_yr
  7244  000BD4  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7245  000BD6  ECD6  F009         	call	PL18	;call to abstracted procedure
  7246  000BDA  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  7247                           
  7248                           ;common.c: 96: RTOS_SetTask(default_state, 2000, 0);
  7249  000BDE  ECCE  F005         	call	PL2	;call to abstracted procedure
  7250  000BE2  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  7251                           
  7252                           ;common.c: 98: events = 5;
  7253  000BE6  0E05               	movlw	5
  7254  000BE8  6E6F               	movwf	_events,c
  7255                           
  7256                           ;common.c: 99: clear_matrix();
  7257  000BEA  ECD0  F013         	call	_clear_matrix	;wreg free
  7258                           
  7259                           ;common.c: 100: en_put = 0;
  7260  000BEE  9070               	bcf	_en_put/(0+8),_en_put& (0+7),c
  7261                           
  7262                           ;common.c: 101: break;
  7263  000BF0  D036               	goto	l764
  7264  000BF2                     l6205:
  7265                           
  7266                           ;common.c: 103: RTOS_DeleteTask(time_set_hr);
  7267  000BF2  D891               	call	PL140	;call to abstracted procedure
  7268  000BF4  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  7269                           
  7270                           ;common.c: 104: RTOS_DeleteTask(default_state);
  7271  000BF8  EC53  F00A         	call	PL46	;call to abstracted procedure
  7272  000BFC  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  7273                           
  7274                           ;common.c: 105: RTOS_SetTask(time_led, 0, 20);
  7275  000C00  EC49  F00A         	call	PL8	;call to abstracted procedure
  7276  000C04  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  7277                           
  7278                           ;common.c: 106: events = 5;
  7279  000C08  0E05               	movlw	5
  7280  000C0A  6E6F               	movwf	_events,c
  7281                           
  7282                           ;common.c: 107: break;
  7283  000C0C  D028               	goto	l764
  7284  000C0E                     l6211:
  7285                           
  7286                           ;common.c: 109: TSTime.Thr++;
  7287  000C0E  2A41               	incf	_TSTime+2,f,c
  7288                           
  7289                           ;common.c: 110: if(TSTime.Thr > 23) TSTime.Thr = 0;
  7290  000C10  0E17               	movlw	23
  7291  000C12  6441               	cpfsgt	_TSTime+2,c
  7292  000C14  D001               	goto	l6217
  7293  000C16  6A41               	clrf	_TSTime+2,c
  7294  000C18                     l6217:
  7295                           
  7296                           ;common.c: 111: RTOS_SetTask(default_state, 2000, 0);
  7297  000C18  ECCE  F005         	call	PL2	;call to abstracted procedure
  7298  000C1C  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  7299                           
  7300                           ;common.c: 112: events = 5;
  7301  000C20  0E05               	movlw	5
  7302  000C22  6E6F               	movwf	_events,c
  7303                           
  7304                           ;common.c: 113: setTime(TSTime.Thr,TSTime.Tmin,0);
  7305  000C24  D86E               	call	PL82	;call to abstracted procedure
  7306  000C26  EC1F  F012         	call	_setTime
  7307                           
  7308                           ;common.c: 114: break;
  7309  000C2A  D019               	goto	l764
  7310  000C2C                     l6223:
  7311                           
  7312                           ;common.c: 116: TSTime.Thr--;
  7313  000C2C  0641               	decf	_TSTime+2,f,c
  7314                           
  7315                           ;common.c: 117: if(TSTime.Thr == 255) TSTime.Thr = 23;
  7316  000C2E  2841               	incf	_TSTime+2,w,c
  7317  000C30  E102               	bnz	l6229
  7318  000C32  0E17               	movlw	23
  7319  000C34  6E41               	movwf	_TSTime+2,c
  7320  000C36                     l6229:
  7321                           
  7322                           ;common.c: 118: RTOS_SetTask(default_state, 2000, 0);
  7323  000C36  ECCE  F005         	call	PL2	;call to abstracted procedure
  7324  000C3A  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  7325                           
  7326                           ;common.c: 119: events = 5;
  7327  000C3E  0E05               	movlw	5
  7328  000C40  6E6F               	movwf	_events,c
  7329                           
  7330                           ;common.c: 120: setTime(TSTime.Thr,TSTime.Tmin,0);
  7331  000C42  D85F               	call	PL82	;call to abstracted procedure
  7332  000C44  EC1F  F012         	call	_setTime
  7333                           
  7334                           ;common.c: 121: break;
  7335  000C48  D00A               	goto	l764
  7336  000C4A                     l6237:
  7337  000C4A  506F               	movf	_events,w,c
  7338                           
  7339                           ; Switch size 1, requested type "space"
  7340                           ; Number of cases is 5, Range of values is 1 to 5
  7341                           ; switch strategies available:
  7342                           ; Name         Instructions Cycles
  7343                           ; simple_byte           16     9 (average)
  7344                           ;	Chosen strategy is simple_byte
  7345  000C4C  0A01               	xorlw	1	; case 1
  7346  000C4E  E0BC               	bz	l6193
  7347  000C50  0A03               	xorlw	3	; case 2
  7348  000C52  E0DD               	bz	l6211
  7349  000C54  0A01               	xorlw	1	; case 3
  7350  000C56  E0EA               	bz	l6223
  7351  000C58  0A07               	xorlw	7	; case 4
  7352  000C5A  E0CB               	bz	l6205
  7353  000C5C  0A01               	xorlw	1	; case 5
  7354  000C5E                     l764:
  7355                           
  7356                           ;common.c: 123: if(en_put)
  7357  000C5E  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  7358  000C60  D03F               	goto	l6251
  7359                           
  7360                           ;common.c: 124: {
  7361                           ;common.c: 125: if(show_digit)
  7362  000C62  A270               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  7363  000C64  D033               	goto	l6249
  7364                           
  7365                           ;common.c: 126: {
  7366                           ;common.c: 128: putchar_b_buf(13,(TSTime.Tmin/10) % 10, pFont);
  7367  000C66  D852               	call	PL130	;call to abstracted procedure
  7368  000C68  ECD4  F011         	call	___lbdiv
  7369  000C6C  ECB3  F012         	call	___lbmod
  7370  000C70  D842               	call	PL30	;call to abstracted procedure
  7371  000C72  0E0D               	movlw	13
  7372  000C74  ECE6  F00E         	call	_putchar_b_buf
  7373                           
  7374                           ;common.c: 129: putchar_b_buf(19,TSTime.Tmin % 10, pFont);
  7375  000C78  D858               	call	PL168	;call to abstracted procedure
  7376  000C7A  ECB3  F012         	call	___lbmod
  7377  000C7E  D83B               	call	PL30	;call to abstracted procedure
  7378  000C80  0E13               	movlw	19
  7379  000C82  ECE6  F00E         	call	_putchar_b_buf
  7380                           
  7381                           ;common.c: 131: if((TSTime.Thr/10) % 10)
  7382  000C86  D84C               	call	PL146	;call to abstracted procedure
  7383  000C88  ECD4  F011         	call	___lbdiv
  7384  000C8C  ECB3  F012         	call	___lbmod
  7385  000C90  0900               	iorlw	0
  7386  000C92  E00A               	bz	l6247
  7387                           
  7388                           ;common.c: 132: putchar_b_buf(0,(TSTime.Thr/10) % 10, pFont);
  7389  000C94  D845               	call	PL146	;call to abstracted procedure
  7390  000C96  ECD4  F011         	call	___lbdiv
  7391  000C9A  ECB3  F012         	call	___lbmod
  7392  000C9E  D82B               	call	PL30	;call to abstracted procedure
  7393  000CA0  0E00               	movlw	0
  7394  000CA2  ECE6  F00E         	call	_putchar_b_buf
  7395  000CA6  D008               	goto	l774
  7396  000CA8                     l6247:
  7397                           
  7398                           ;common.c: 133: else
  7399                           ;common.c: 134: putchar_b_buf(0,0, pFont);
  7400  000CA8  0E00               	movlw	0
  7401  000CAA  6A17               	clrf	putchar_b_buf@symbol,c
  7402  000CAC  C06D  F018         	movff	_pFont,putchar_b_buf@pF
  7403  000CB0  C06E  F019         	movff	_pFont+1,putchar_b_buf@pF+1
  7404  000CB4  ECE6  F00E         	call	_putchar_b_buf
  7405  000CB8                     l774:
  7406                           
  7407                           ;common.c: 135: putchar_b_buf(6,TSTime.Thr % 10, pFont);
  7408  000CB8  0E0A               	movlw	10
  7409  000CBA  6E13               	movwf	___lbmod@divisor,c
  7410  000CBC  5041               	movf	_TSTime+2,w,c
  7411  000CBE  ECB3  F012         	call	___lbmod
  7412  000CC2  D819               	call	PL30	;call to abstracted procedure
  7413  000CC4  0E06               	movlw	6
  7414  000CC6  ECE6  F00E         	call	_putchar_b_buf
  7415                           
  7416                           ;common.c: 136: }
  7417  000CCA  D00A               	goto	l6251
  7418  000CCC                     l6249:
  7419                           
  7420                           ;common.c: 137: else
  7421                           ;common.c: 138: {
  7422                           ;common.c: 140: putchar_b_buf(0,0, &Font);
  7423  000CCC  6A17               	clrf	putchar_b_buf@symbol,c
  7424  000CCE  D80E               	call	PL6	;call to abstracted procedure
  7425  000CD0  0E00               	movlw	0
  7426  000CD2  ECE6  F00E         	call	_putchar_b_buf
  7427                           
  7428                           ;common.c: 141: putchar_b_buf(6,0, &Font);
  7429  000CD6  6A17               	clrf	putchar_b_buf@symbol,c
  7430  000CD8  D809               	call	PL6	;call to abstracted procedure
  7431  000CDA  0E06               	movlw	6
  7432  000CDC  ECE6  F00E         	call	_putchar_b_buf
  7433  000CE0                     l6251:
  7434                           
  7435                           ;common.c: 142: }
  7436                           ;common.c: 143: }
  7437                           ;common.c: 144: Update_Matrix(Dis_Buff);
  7438  000CE0  0EAB               	movlw	low _Dis_Buff
  7439  000CE2  6E11               	movwf	Update_Matrix@buf,c
  7440  000CE4  EC2A  F011         	call	_Update_Matrix	;wreg free
  7441                           
  7442                           ;common.c: 145: en_put = 1;
  7443  000CE8  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  7444  000CEA  0012               	return		;funcret
  7445  000CEC                     __end_of_time_set_hr:
  7446                           	opt stack 0
  7447  000CEC                     PL6:
  7448                           	opt stack 22
  7449  000CEC  0EC2               	movlw	low _Font
  7450  000CEE  6E18               	movwf	putchar_b_buf@pF,c
  7451  000CF0  0EB9               	movlw	high _Font
  7452  000CF2  6E19               	movwf	putchar_b_buf@pF+1,c
  7453  000CF4  0012               	return	
  7454  000CF6                     __end_ofPL6:
  7455                           	opt stack 0
  7456  000CF6                     PL30:
  7457                           	opt stack 22
  7458  000CF6  6E17               	movwf	putchar_b_buf@symbol,c
  7459  000CF8  C06D  F018         	movff	_pFont,putchar_b_buf@pF
  7460  000CFC  C06E  F019         	movff	_pFont+1,putchar_b_buf@pF+1
  7461  000D00  0012               	return	
  7462  000D02                     __end_ofPL30:
  7463                           	opt stack 0
  7464  000D02                     PL82:
  7465                           	opt stack 22
  7466  000D02  C040  F01C         	movff	_TSTime+1,setTime@mSet
  7467  000D06  6A1D               	clrf	setTime@sSet,c
  7468  000D08  5041               	movf	_TSTime+2,w,c
  7469  000D0A  0012               	return	
  7470  000D0C                     __end_ofPL82:
  7471                           	opt stack 0
  7472  000D0C                     PL130:
  7473                           	opt stack 22
  7474  000D0C  0E0A               	movlw	10
  7475  000D0E  6E13               	movwf	___lbmod@divisor,c
  7476  000D10  6E0F               	movwf	___lbdiv@divisor,c
  7477  000D12  5040               	movf	_TSTime+1,w,c
  7478  000D14  0012               	return	
  7479  000D16                     __end_ofPL130:
  7480                           	opt stack 0
  7481  000D16                     PL140:
  7482                           	opt stack 22
  7483  000D16  0EBC               	movlw	low _time_set_hr
  7484  000D18  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  7485  000D1A  0E0B               	movlw	high _time_set_hr
  7486  000D1C  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  7487  000D1E  0012               	return	
  7488  000D20                     __end_ofPL140:
  7489                           	opt stack 0
  7490  000D20                     PL146:
  7491                           	opt stack 22
  7492  000D20  0E0A               	movlw	10
  7493  000D22  6E13               	movwf	___lbmod@divisor,c
  7494  000D24  6E0F               	movwf	___lbdiv@divisor,c
  7495  000D26  5041               	movf	_TSTime+2,w,c
  7496  000D28  0012               	return	
  7497  000D2A                     __end_ofPL146:
  7498                           	opt stack 0
  7499  000D2A                     PL168:
  7500                           	opt stack 22
  7501  000D2A  0E0A               	movlw	10
  7502  000D2C  6E13               	movwf	___lbmod@divisor,c
  7503  000D2E  5040               	movf	_TSTime+1,w,c
  7504  000D30  0012               	return	
  7505  000D32                     __end_ofPL168:
  7506                           	opt stack 0
  7507                           tosu	equ	0xFFF
  7508                           tosh	equ	0xFFE
  7509                           tosl	equ	0xFFD
  7510                           pclath	equ	0xFFA
  7511                           tblptru	equ	0xFF8
  7512                           tblptrh	equ	0xFF7
  7513                           tblptrl	equ	0xFF6
  7514                           tablat	equ	0xFF5
  7515                           prodh	equ	0xFF4
  7516                           prodl	equ	0xFF3
  7517                           intcon	equ	0xFF2
  7518                           intcon2	equ	0xFF1
  7519                           postinc0	equ	0xFEE
  7520                           wreg	equ	0xFE8
  7521                           indf1	equ	0xFE7
  7522                           plusw1	equ	0xFE3
  7523                           fsr1h	equ	0xFE2
  7524                           fsr1l	equ	0xFE1
  7525                           indf2	equ	0xFDF
  7526                           postinc2	equ	0xFDE
  7527                           postdec2	equ	0xFDD
  7528                           plusw2	equ	0xFDB
  7529                           fsr2h	equ	0xFDA
  7530                           fsr2l	equ	0xFD9
  7531                           status	equ	0xFD8
  7532                           
  7533 ;; *************** function _key_press *****************
  7534 ;; Defined at:
  7535 ;;		line 6 in file "key.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;		None
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;  key             1   14[COMRAM] unsigned char 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      void 
  7542 ;; Registers used:
  7543 ;;		wreg, status,2, status,0
  7544 ;; Tracked objects:
  7545 ;;		On entry : 3F/0
  7546 ;;		On exit  : 3F/0
  7547 ;;		Unchanged: 3F/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;Total ram usage:        1 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    3
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_main
  7560 ;;		_RTOS_DispatchTask
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text26
  7565  00214A                     __ptext26:
  7566                           	opt stack 0
  7567  00214A                     _key_press:
  7568                           	opt stack 26
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;key.c: 8: static uint8_t count = 0;
  7572                           ;key.c: 9: uint8_t key;
  7573                           ;key.c: 11: if ((PORTB & (1<<4))==0)
  7574                           
  7575                           ;incstack = 0
  7576  00214A  B881               	btfsc	3969,4,c	;volatile
  7577  00214C  D002               	goto	l965
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;key.c: 12: key = 1;
  7581  00214E  0E01               	movlw	1
  7582  002150  D00B               	goto	L3
  7583  002152                     l965:
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;key.c: 13: else if ((PORTB & (1<<1))==0)
  7587  002152  B281               	btfsc	3969,1,c	;volatile
  7588  002154  D002               	goto	l967
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;key.c: 14: key = 2;
  7592  002156  0E02               	movlw	2
  7593  002158  D007               	goto	L3
  7594  00215A                     l967:
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;key.c: 15: else if ((PORTB & (1<<2))==0)
  7598  00215A  B481               	btfsc	3969,2,c	;volatile
  7599  00215C  D002               	goto	l969
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;key.c: 16: key = 3;
  7603  00215E  0E03               	movlw	3
  7604  002160  D003               	goto	L3
  7605  002162                     l969:
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;key.c: 17: else if ((PORTB & (1<<3))==0)
  7609  002162  B681               	btfsc	3969,3,c	;volatile
  7610  002164  D003               	goto	l971
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;key.c: 18: key = 4;
  7614  002166  0E04               	movlw	4
  7615  002168                     L3:
  7616  002168  6E0F               	movwf	key_press@key,c
  7617  00216A  D001               	goto	l6739
  7618  00216C                     l971:
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;key.c: 19: else
  7622                           ;key.c: 20: key = (0);
  7623  00216C  6A0F               	clrf	key_press@key,c
  7624  00216E                     l6739:
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;key.c: 23: if(key){
  7628  00216E  500F               	movf	key_press@key,w,c
  7629  002170  E00E               	bz	l973
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;key.c: 24: if(count <= 30)
  7633  002172  0E1F               	movlw	31
  7634  002174  605B               	cpfslt	key_press@count,c
  7635  002176  0C1F               	retlw	31
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;key.c: 25: {
  7639                           ;key.c: 26: count++;
  7640  002178  2A5B               	incf	key_press@count,f,c
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;key.c: 27: if(count == 30)
  7644  00217A  0E1E               	movlw	30
  7645  00217C  185B               	xorwf	key_press@count,w,c
  7646  00217E  A4D8               	btfss	status,2,c
  7647  002180  0012               	return	
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;key.c: 28: {
  7651                           ;key.c: 30: events = key;
  7652  002182  C00F  F06F         	movff	key_press@key,_events
  7653                           
  7654                           ;key.c: 31: count = 0;
  7655  002186  6A5B               	clrf	key_press@count,c
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;key.c: 32: play_sound = 1;
  7659  002188  0E01               	movlw	1
  7660  00218A  6E5C               	movwf	_play_sound,c
  7661  00218C  0C01               	retlw	1
  7662  00218E                     l973:
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;key.c: 36: else
  7666                           ;key.c: 37: {
  7667                           ;key.c: 38: count = 0;
  7668  00218E  6A5B               	clrf	key_press@count,c
  7669                           
  7670                           ; BSR set to: 0
  7671  002190  0012               	return		;funcret
  7672  002192                     __end_of_key_press:
  7673                           	opt stack 0
  7674                           tosu	equ	0xFFF
  7675                           tosh	equ	0xFFE
  7676                           tosl	equ	0xFFD
  7677                           pclath	equ	0xFFA
  7678                           tblptru	equ	0xFF8
  7679                           tblptrh	equ	0xFF7
  7680                           tblptrl	equ	0xFF6
  7681                           tablat	equ	0xFF5
  7682                           prodh	equ	0xFF4
  7683                           prodl	equ	0xFF3
  7684                           intcon	equ	0xFF2
  7685                           intcon2	equ	0xFF1
  7686                           postinc0	equ	0xFEE
  7687                           wreg	equ	0xFE8
  7688                           indf1	equ	0xFE7
  7689                           plusw1	equ	0xFE3
  7690                           fsr1h	equ	0xFE2
  7691                           fsr1l	equ	0xFE1
  7692                           indf2	equ	0xFDF
  7693                           postinc2	equ	0xFDE
  7694                           postdec2	equ	0xFDD
  7695                           plusw2	equ	0xFDB
  7696                           fsr2h	equ	0xFDA
  7697                           fsr2l	equ	0xFD9
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function _time_led *****************
  7701 ;; Defined at:
  7702 ;;		line 617 in file "common.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;		None
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      void 
  7709 ;; Registers used:
  7710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : 3F/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7720 ;;Total ram usage:        0 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:    8
  7723 ;; This function calls:
  7724 ;;		_BMP085Pressure
  7725 ;;		_FillBuf
  7726 ;;		_RTOS_DeleteTask
  7727 ;;		_RTOS_SetTask
  7728 ;;		_Update_Matrix
  7729 ;;		_readTemp_Single
  7730 ;;		_scroll_left
  7731 ;; This function is called by:
  7732 ;;		_main
  7733 ;;		_time_set_min
  7734 ;;		_time_set_hr
  7735 ;;		_time_set_yr
  7736 ;;		_time_set_mt
  7737 ;;		_time_set_dt
  7738 ;;		_time_set_dy
  7739 ;;		_set_font_set
  7740 ;;		_home_temp
  7741 ;;		_pressure
  7742 ;;		_RTOS_DispatchTask
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           	psect	text27
  7747  0012BE                     __ptext27:
  7748                           	opt stack 0
  7749  0012BE                     _time_led:
  7750                           	opt stack 21
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;common.c: 621: switch (events)
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;incstack = 0
  7757  0012BE  D05F               	goto	l6723
  7758  0012C0                     l6673:
  7759                           
  7760                           ; BSR set to: 0
  7761                           ;common.c: 624: FillBuf();
  7762  0012C0  EC55  F008         	call	_FillBuf	;wreg free
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;common.c: 625: if((TTime.Ts>5)&&(TTime.Ts<7))
  7766  0012C4  0E05               	movlw	5
  7767  0012C6  6462               	cpfsgt	_TTime,c
  7768  0012C8  D00B               	goto	l6681
  7769                           
  7770                           ; BSR set to: 0
  7771  0012CA  0E07               	movlw	7
  7772  0012CC  6062               	cpfslt	_TTime,c
  7773  0012CE  D008               	goto	l6681
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;common.c: 626: {
  7777                           ;common.c: 627: readTemp_Single(&temperature, &time_flag, &timer_val);
  7778  0012D0  0E69               	movlw	low _temperature
  7779  0012D2  6E1B               	movwf	readTemp_Single@buf,c
  7780  0012D4  0E6B               	movlw	low _time_flag
  7781  0012D6  6E1C               	movwf	readTemp_Single@time_flag,c
  7782  0012D8  0E6C               	movlw	low _timer_val
  7783  0012DA  6E1D               	movwf	readTemp_Single@timer_val,c
  7784  0012DC  EC40  F007         	call	_readTemp_Single	;wreg free
  7785  0012E0                     l6681:
  7786                           
  7787                           ;common.c: 628: }
  7788                           ;common.c: 629: if(((TTime.Ts>14)&&(TTime.Ts<16))||((TTime.Ts>45)&&(TTime.Ts<47)))
  7789  0012E0  0E0E               	movlw	14
  7790  0012E2  6462               	cpfsgt	_TTime,c
  7791  0012E4  D003               	goto	l6685
  7792  0012E6  0E0F               	movlw	15
  7793  0012E8  6462               	cpfsgt	_TTime,c
  7794  0012EA  D006               	goto	l6689
  7795  0012EC                     l6685:
  7796  0012EC  0E2D               	movlw	45
  7797  0012EE  6462               	cpfsgt	_TTime,c
  7798  0012F0  D052               	goto	l6725
  7799  0012F2  0E2F               	movlw	47
  7800  0012F4  6062               	cpfslt	_TTime,c
  7801  0012F6  D04F               	goto	l6725
  7802  0012F8                     l6689:
  7803                           
  7804                           ;common.c: 630: events = 3;
  7805  0012F8  0E03               	movlw	3
  7806  0012FA  D017               	goto	L4
  7807  0012FC                     l6691:
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;common.c: 633: RTOS_DeleteTask(time_led);
  7811  0012FC  D85D               	call	PL100	;call to abstracted procedure
  7812  0012FE  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  7813                           
  7814                           ;common.c: 634: RTOS_SetTask(time_set_min, 0, 50);
  7815  001302  0EB0               	movlw	low _time_set_min
  7816  001304  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7817  001306  0E16               	movlw	high _time_set_min
  7818  001308  D84A               	call	PL10	;call to abstracted procedure
  7819  00130A  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  7820                           
  7821                           ;common.c: 635: RTOS_SetTask(default_state, 2000, 0);
  7822  00130E  ECCE  F005         	call	PL2	;call to abstracted procedure
  7823  001312  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  7824                           
  7825                           ;common.c: 636: TSTime = TTime;
  7826  001316  EE20  F062         	lfsr	2,_TTime
  7827  00131A  EE10  F03F         	lfsr	1,_TSTime
  7828  00131E  0E06               	movlw	6
  7829  001320                     u4581:
  7830  001320  CFDB FFE3          	movff	plusw2,plusw1
  7831  001324  06E8               	decf	wreg,f,c
  7832  001326  E2FC               	bc	u4581
  7833  001328                     l6699:
  7834                           
  7835                           ;common.c: 637: events = 5;
  7836  001328  0E05               	movlw	5
  7837  00132A                     L4:
  7838  00132A  6E6F               	movwf	_events,c
  7839                           
  7840                           ;common.c: 638: break;
  7841  00132C  D034               	goto	l6725
  7842  00132E                     l6701:
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;common.c: 642: press = BMP085Pressure(1);
  7846  00132E  0E01               	movlw	1
  7847  001330  EC50  F00F         	call	_BMP085Pressure
  7848  001334  C03D  F058         	movff	?_BMP085Pressure,_press
  7849  001338  C03E  F059         	movff	?_BMP085Pressure+1,_press+1
  7850                           
  7851                           ;common.c: 643: scroll_left();
  7852  00133C  EC82  F00F         	call	_scroll_left	;wreg free
  7853                           
  7854                           ;common.c: 644: RTOS_DeleteTask(time_led);
  7855  001340  D83B               	call	PL100	;call to abstracted procedure
  7856  001342  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  7857                           
  7858                           ;common.c: 645: RTOS_SetTask(pressure, 0, 20);
  7859  001346  0E54               	movlw	low _pressure
  7860  001348  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7861  00134A  0E08               	movlw	high _pressure
  7862  00134C  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7863  00134E  D82E               	call	PL18	;call to abstracted procedure
  7864  001350  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  7865  001354  D7E9               	goto	l6699
  7866  001356                     l6711:
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;common.c: 656: scroll_left();
  7870  001356  EC82  F00F         	call	_scroll_left	;wreg free
  7871                           
  7872                           ;common.c: 657: RTOS_DeleteTask(time_led);
  7873  00135A  D82E               	call	PL100	;call to abstracted procedure
  7874  00135C  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  7875                           
  7876                           ;common.c: 658: RTOS_SetTask(home_temp, 0, 20);
  7877  001360  0E72               	movlw	low _home_temp
  7878  001362  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7879  001364  0E06               	movlw	high _home_temp
  7880  001366  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7881  001368  D821               	call	PL18	;call to abstracted procedure
  7882  00136A  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  7883  00136E  D7DC               	goto	l6699
  7884  001370                     l6717:
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;common.c: 662: events = 5;
  7888  001370  0E05               	movlw	5
  7889  001372  6E6F               	movwf	_events,c
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;common.c: 663: RTOS_DeleteTask(default_state);
  7893  001374  EC53  F00A         	call	PL46	;call to abstracted procedure
  7894  001378  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  7895                           
  7896                           ;common.c: 664: break;
  7897  00137C  D00C               	goto	l6725
  7898  00137E                     l6723:
  7899                           
  7900                           ; BSR set to: 0
  7901  00137E  506F               	movf	_events,w,c
  7902                           
  7903                           ; Switch size 1, requested type "space"
  7904                           ; Number of cases is 6, Range of values is 1 to 6
  7905                           ; switch strategies available:
  7906                           ; Name         Instructions Cycles
  7907                           ; simple_byte           19    10 (average)
  7908                           ;	Chosen strategy is simple_byte
  7909  001380  0A01               	xorlw	1	; case 1
  7910  001382  E0BC               	bz	l6691
  7911  001384  0A03               	xorlw	3	; case 2
  7912  001386  E0D3               	bz	l6701
  7913  001388  0A01               	xorlw	1	; case 3
  7914  00138A  E0E5               	bz	l6711
  7915  00138C  0A07               	xorlw	7	; case 4
  7916  00138E  E0F0               	bz	l6717
  7917  001390  0A01               	xorlw	1	; case 5
  7918  001392  E096               	bz	l6673
  7919  001394  0A03               	xorlw	3	; case 6
  7920  001396                     l6725:
  7921                           
  7922                           ;common.c: 669: Update_Matrix(Dis_Buff);
  7923  001396  0EAB               	movlw	low _Dis_Buff
  7924  001398  6E11               	movwf	Update_Matrix@buf,c
  7925  00139A  EF2A  F011         	goto	_Update_Matrix	;wreg free
  7926  00139E                     __end_of_time_led:
  7927                           	opt stack 0
  7928  00139E                     PL10:
  7929                           	opt stack 22
  7930  00139E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7931  0013A0  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  7932  0013A2  6A11               	clrf	RTOS_SetTask@taskDelay,c
  7933  0013A4  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  7934  0013A6  0E32               	movlw	50
  7935  0013A8  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  7936  0013AA  0C32               	retlw	50
  7937  0013AC                     __end_ofPL10:
  7938                           	opt stack 0
  7939  0013AC                     PL18:
  7940                           	opt stack 22
  7941  0013AC  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  7942  0013AE  6A11               	clrf	RTOS_SetTask@taskDelay,c
  7943  0013B0  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  7944  0013B2  0E14               	movlw	20
  7945  0013B4  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  7946  0013B6  0C14               	retlw	20
  7947  0013B8                     __end_ofPL18:
  7948                           	opt stack 0
  7949  0013B8                     PL100:
  7950                           	opt stack 21
  7951  0013B8  0EBE               	movlw	low _time_led
  7952  0013BA  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  7953  0013BC  0E12               	movlw	high _time_led
  7954  0013BE  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  7955  0013C0  0012               	return	
  7956  0013C2                     __end_ofPL100:
  7957                           	opt stack 0
  7958                           tosu	equ	0xFFF
  7959                           tosh	equ	0xFFE
  7960                           tosl	equ	0xFFD
  7961                           pclath	equ	0xFFA
  7962                           tblptru	equ	0xFF8
  7963                           tblptrh	equ	0xFF7
  7964                           tblptrl	equ	0xFF6
  7965                           tablat	equ	0xFF5
  7966                           prodh	equ	0xFF4
  7967                           prodl	equ	0xFF3
  7968                           intcon	equ	0xFF2
  7969                           intcon2	equ	0xFF1
  7970                           postinc0	equ	0xFEE
  7971                           wreg	equ	0xFE8
  7972                           indf1	equ	0xFE7
  7973                           plusw1	equ	0xFE3
  7974                           fsr1h	equ	0xFE2
  7975                           fsr1l	equ	0xFE1
  7976                           indf2	equ	0xFDF
  7977                           postinc2	equ	0xFDE
  7978                           postdec2	equ	0xFDD
  7979                           plusw2	equ	0xFDB
  7980                           fsr2h	equ	0xFDA
  7981                           fsr2l	equ	0xFD9
  7982                           status	equ	0xFD8
  7983                           
  7984 ;; *************** function _time_set_yr *****************
  7985 ;; Defined at:
  7986 ;;		line 150 in file "common.c"
  7987 ;; Parameters:    Size  Location     Type
  7988 ;;		None
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;		None
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  1    wreg      void 
  7993 ;; Registers used:
  7994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 3F/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8004 ;;Total ram usage:        0 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    7
  8007 ;; This function calls:
  8008 ;;		_RTOS_DeleteTask
  8009 ;;		_RTOS_SetTask
  8010 ;;		_Update_Matrix
  8011 ;;		___lbdiv
  8012 ;;		___lbmod
  8013 ;;		_putchar_b_buf
  8014 ;;		_setDate
  8015 ;; This function is called by:
  8016 ;;		_time_set_hr
  8017 ;;		_RTOS_DispatchTask
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           	psect	text28
  8022  0014C4                     __ptext28:
  8023                           	opt stack 0
  8024  0014C4                     _time_set_yr:
  8025                           	opt stack 22
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;common.c: 152: switch (events)
  8029                           
  8030                           ;incstack = 0
  8031  0014C4  D03D               	goto	l6299
  8032  0014C6                     l6257:
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;common.c: 158: RTOS_DeleteTask(time_set_yr);
  8036  0014C6  D877               	call	PL142	;call to abstracted procedure
  8037  0014C8  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  8038                           
  8039                           ;common.c: 159: RTOS_SetTask(time_set_mt, 0, 20);
  8040  0014CC  0E60               	movlw	low _time_set_mt
  8041  0014CE  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  8042  0014D0  0E04               	movlw	high _time_set_mt
  8043  0014D2  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  8044  0014D4  ECD6  F009         	call	PL18	;call to abstracted procedure
  8045  0014D8  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  8046                           
  8047                           ;common.c: 160: RTOS_SetTask(default_state, 2000, 0);
  8048  0014DC  ECCE  F005         	call	PL2	;call to abstracted procedure
  8049  0014E0  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  8050                           
  8051                           ;common.c: 161: events = 5;
  8052  0014E4  0E05               	movlw	5
  8053  0014E6  6E6F               	movwf	_events,c
  8054                           
  8055                           ;common.c: 162: en_put=0;
  8056  0014E8  9070               	bcf	_en_put/(0+8),_en_put& (0+7),c
  8057                           
  8058                           ;common.c: 163: break;
  8059  0014EA  D034               	goto	l781
  8060  0014EC                     l6267:
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;common.c: 165: RTOS_DeleteTask(time_set_yr);
  8064  0014EC  D864               	call	PL142	;call to abstracted procedure
  8065  0014EE  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  8066                           
  8067                           ;common.c: 166: RTOS_DeleteTask(default_state);
  8068  0014F2  EC53  F00A         	call	PL46	;call to abstracted procedure
  8069  0014F6  EC64  F00D         	call	_RTOS_DeleteTask	;wreg free
  8070                           
  8071                           ;common.c: 167: RTOS_SetTask(time_led, 0, 20);
  8072  0014FA  EC49  F00A         	call	PL8	;call to abstracted procedure
  8073  0014FE  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  8074                           
  8075                           ;common.c: 168: events = 5;
  8076  001502  0E05               	movlw	5
  8077  001504  6E6F               	movwf	_events,c
  8078                           
  8079                           ;common.c: 169: break;
  8080  001506  D026               	goto	l781
  8081  001508                     l6273:
  8082                           
  8083                           ; BSR set to: 0
  8084                           ;common.c: 171: TSTime.Tyr++;
  8085  001508  2A45               	incf	_TSTime+6,f,c
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;common.c: 172: if(TSTime.Tyr > 99) TSTime.Tyr = 0;
  8089  00150A  0E63               	movlw	99
  8090  00150C  6445               	cpfsgt	_TSTime+6,c
  8091  00150E  D001               	goto	l6279
  8092                           
  8093                           ; BSR set to: 0
  8094  001510  6A45               	clrf	_TSTime+6,c
  8095  001512                     l6279:
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;common.c: 173: RTOS_SetTask(default_state, 2000, 0);
  8099  001512  ECCE  F005         	call	PL2	;call to abstracted procedure
  8100  001516  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  8101                           
  8102                           ;common.c: 174: events = 5;
  8103                           
  8104                           ;common.c: 175: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  8105  00151A  EC42  F008         	call	PL16	;call to abstracted procedure
  8106  00151E  EC65  F011         	call	_setDate
  8107                           
  8108                           ;common.c: 176: break;
  8109  001522  D018               	goto	l781
  8110  001524                     l6285:
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;common.c: 178: TSTime.Tyr--;
  8114  001524  0645               	decf	_TSTime+6,f,c
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;common.c: 179: if(TSTime.Tyr == 255) TSTime.Tyr = 99;
  8118  001526  2845               	incf	_TSTime+6,w,c
  8119  001528  E102               	bnz	l6291
  8120                           
  8121                           ; BSR set to: 0
  8122  00152A  0E63               	movlw	99
  8123  00152C  6E45               	movwf	_TSTime+6,c
  8124  00152E                     l6291:
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;common.c: 180: RTOS_SetTask(default_state, 2000, 0);
  8128  00152E  ECCE  F005         	call	PL2	;call to abstracted procedure
  8129  001532  ECA9  F00D         	call	_RTOS_SetTask	;wreg free
  8130                           
  8131                           ;common.c: 181: events = 5;
  8132                           
  8133                           ;common.c: 182: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  8134  001536  EC42  F008         	call	PL16	;call to abstracted procedure
  8135  00153A  EC65  F011         	call	_setDate
  8136                           
  8137                           ;common.c: 183: break;
  8138  00153E  D00A               	goto	l781
  8139  001540                     l6299:
  8140                           
  8141                           ; BSR set to: 0
  8142  001540  506F               	movf	_events,w,c
  8143                           
  8144                           ; Switch size 1, requested type "space"
  8145                           ; Number of cases is 5, Range of values is 1 to 5
  8146                           ; switch strategies available:
  8147                           ; Name         Instructions Cycles
  8148                           ; simple_byte           16     9 (average)
  8149                           ;	Chosen strategy is simple_byte
  8150  001542  0A01               	xorlw	1	; case 1
  8151  001544  E0C0               	bz	l6257
  8152  001546  0A03               	xorlw	3	; case 2
  8153  001548  E0DF               	bz	l6273
  8154  00154A  0A01               	xorlw	1	; case 3
  8155  00154C  E0EB               	bz	l6285
  8156  00154E  0A07               	xorlw	7	; case 4
  8157  001550  E0CD               	bz	l6267
  8158  001552  0A01               	xorlw	1	; case 5
  8159  001554                     l781:
  8160                           
  8161                           ;common.c: 185: if(en_put)
  8162  001554  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  8163  001556  D029               	goto	l6303
  8164                           
  8165                           ;common.c: 186: {
  8166                           ;common.c: 187: putchar_b_buf(0,'Ð', &Font);
  8167  001558  0ED0               	movlw	208
  8168  00155A  EC2E  F003         	call	PL4	;call to abstracted procedure
  8169  00155E  0E00               	movlw	0
  8170  001560  ECE6  F00E         	call	_putchar_b_buf
  8171                           
  8172                           ;common.c: 188: putchar_b_buf(6,'ê', &Font);
  8173  001564  0EEA               	movlw	234
  8174  001566  EC2E  F003         	call	PL4	;call to abstracted procedure
  8175  00156A  0E06               	movlw	6
  8176  00156C  ECE6  F00E         	call	_putchar_b_buf
  8177                           
  8178                           ;common.c: 189: putchar_b_buf(12,':', &Font);
  8179  001570  0E3A               	movlw	58
  8180  001572  EC2E  F003         	call	PL4	;call to abstracted procedure
  8181  001576  0E0C               	movlw	12
  8182  001578  ECE6  F00E         	call	_putchar_b_buf
  8183                           
  8184                           ;common.c: 190: putchar_b_buf(18,(TSTime.Tyr/10) % 10, pFont);
  8185  00157C  0E0A               	movlw	10
  8186  00157E  6E13               	movwf	___lbmod@divisor,c
  8187  001580  6E0F               	movwf	___lbdiv@divisor,c
  8188  001582  5045               	movf	_TSTime+6,w,c
  8189  001584  ECD4  F011         	call	___lbdiv
  8190  001588  ECB3  F012         	call	___lbmod
  8191  00158C  EC7B  F006         	call	PL30	;call to abstracted procedure
  8192  001590  0E12               	movlw	18
  8193  001592  ECE6  F00E         	call	_putchar_b_buf
  8194                           
  8195                           ;common.c: 191: putchar_b_buf(24,TSTime.Tyr % 10, pFont);
  8196  001596  0E0A               	movlw	10
  8197  001598  6E13               	movwf	___lbmod@divisor,c
  8198  00159A  5045               	movf	_TSTime+6,w,c
  8199  00159C  ECB3  F012         	call	___lbmod
  8200  0015A0  EC7B  F006         	call	PL30	;call to abstracted procedure
  8201  0015A4  0E18               	movlw	24
  8202  0015A6  ECE6  F00E         	call	_putchar_b_buf
  8203  0015AA                     l6303:
  8204                           
  8205                           ;common.c: 192: }
  8206                           ;common.c: 193: Update_Matrix(Dis_Buff);
  8207  0015AA  0EAB               	movlw	low _Dis_Buff
  8208  0015AC  6E11               	movwf	Update_Matrix@buf,c
  8209  0015AE  EC2A  F011         	call	_Update_Matrix	;wreg free
  8210                           
  8211                           ;common.c: 194: en_put=1;
  8212  0015B2  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  8213  0015B4  0012               	return		;funcret
  8214  0015B6                     __end_of_time_set_yr:
  8215                           	opt stack 0
  8216  0015B6                     PL142:
  8217                           	opt stack 22
  8218  0015B6  0EC4               	movlw	low _time_set_yr
  8219  0015B8  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  8220  0015BA  0E14               	movlw	high _time_set_yr
  8221  0015BC  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  8222  0015BE  0012               	return	
  8223  0015C0                     __end_ofPL142:
  8224                           	opt stack 0
  8225                           tosu	equ	0xFFF
  8226                           tosh	equ	0xFFE
  8227                           tosl	equ	0xFFD
  8228                           pclath	equ	0xFFA
  8229                           tblptru	equ	0xFF8
  8230                           tblptrh	equ	0xFF7
  8231                           tblptrl	equ	0xFF6
  8232                           tablat	equ	0xFF5
  8233                           prodh	equ	0xFF4
  8234                           prodl	equ	0xFF3
  8235                           intcon	equ	0xFF2
  8236                           intcon2	equ	0xFF1
  8237                           postinc0	equ	0xFEE
  8238                           wreg	equ	0xFE8
  8239                           indf1	equ	0xFE7
  8240                           plusw1	equ	0xFE3
  8241                           fsr1h	equ	0xFE2
  8242                           fsr1l	equ	0xFE1
  8243                           indf2	equ	0xFDF
  8244                           postinc2	equ	0xFDE
  8245                           postdec2	equ	0xFDD
  8246                           plusw2	equ	0xFDB
  8247                           fsr2h	equ	0xFDA
  8248                           fsr2l	equ	0xFD9
  8249                           status	equ	0xFD8
  8250                           
  8251 ;; *************** function _setTime *****************
  8252 ;; Defined at:
  8253 ;;		line 74 in file "ds3231.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;  hSet            1    wreg     unsigned char 
  8256 ;;  mSet            1   27[COMRAM] unsigned char 
  8257 ;;  sSet            1   28[COMRAM] unsigned char 
  8258 ;; Auto vars:     Size  Location     Type
  8259 ;;  hSet            1   29[COMRAM] unsigned char 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  1    wreg      void 
  8262 ;; Registers used:
  8263 ;;		wreg, status,2, status,0, cstack
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8269 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8272 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8273 ;;Total ram usage:        3 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    6
  8276 ;; This function calls:
  8277 ;;		_DS3231_Write
  8278 ;;		_decimal_to_bcd
  8279 ;; This function is called by:
  8280 ;;		_time_set_min
  8281 ;;		_time_set_hr
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           	psect	text29
  8286  00243E                     __ptext29:
  8287                           	opt stack 0
  8288  00243E                     _setTime:
  8289                           	opt stack 22
  8290                           
  8291                           ;incstack = 0
  8292                           ;setTime@hSet stored from wreg
  8293  00243E  6E1E               	movwf	setTime@hSet,c
  8294                           
  8295                           ;ds3231.c: 76: DS3231_Write(0x00, (decimal_to_bcd(sSet)));
  8296  002440  501D               	movf	setTime@sSet,w,c
  8297  002442  ECA0  F012         	call	_decimal_to_bcd
  8298  002446  6E1A               	movwf	DS3231_Write@value,c
  8299  002448  0E00               	movlw	0
  8300  00244A  EC59  F013         	call	_DS3231_Write
  8301                           
  8302                           ;ds3231.c: 77: DS3231_Write(0x01, (decimal_to_bcd(mSet)));
  8303  00244E  501C               	movf	setTime@mSet,w,c
  8304  002450  ECA0  F012         	call	_decimal_to_bcd
  8305  002454  6E1A               	movwf	DS3231_Write@value,c
  8306  002456  0E01               	movlw	1
  8307  002458  EC59  F013         	call	_DS3231_Write
  8308                           
  8309                           ;ds3231.c: 78: DS3231_Write(0x02, (0x3F & (decimal_to_bcd(hSet))));
  8310  00245C  501E               	movf	setTime@hSet,w,c
  8311  00245E  ECA0  F012         	call	_decimal_to_bcd
  8312  002462  0B3F               	andlw	63
  8313  002464  6E1A               	movwf	DS3231_Write@value,c
  8314  002466  0E02               	movlw	2
  8315  002468  EF59  F013         	goto	_DS3231_Write
  8316  00246C                     __end_of_setTime:
  8317                           	opt stack 0
  8318                           tosu	equ	0xFFF
  8319                           tosh	equ	0xFFE
  8320                           tosl	equ	0xFFD
  8321                           pclath	equ	0xFFA
  8322                           tblptru	equ	0xFF8
  8323                           tblptrh	equ	0xFF7
  8324                           tblptrl	equ	0xFF6
  8325                           tablat	equ	0xFF5
  8326                           prodh	equ	0xFF4
  8327                           prodl	equ	0xFF3
  8328                           intcon	equ	0xFF2
  8329                           intcon2	equ	0xFF1
  8330                           postinc0	equ	0xFEE
  8331                           wreg	equ	0xFE8
  8332                           indf1	equ	0xFE7
  8333                           plusw1	equ	0xFE3
  8334                           fsr1h	equ	0xFE2
  8335                           fsr1l	equ	0xFE1
  8336                           indf2	equ	0xFDF
  8337                           postinc2	equ	0xFDE
  8338                           postdec2	equ	0xFDD
  8339                           plusw2	equ	0xFDB
  8340                           fsr2h	equ	0xFDA
  8341                           fsr2l	equ	0xFD9
  8342                           status	equ	0xFD8
  8343                           
  8344 ;; *************** function _setDate *****************
  8345 ;; Defined at:
  8346 ;;		line 82 in file "ds3231.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;  daySet          1    wreg     unsigned char 
  8349 ;;  dateSet         1   27[COMRAM] unsigned char 
  8350 ;;  monthSet        1   28[COMRAM] unsigned char 
  8351 ;;  yearSet         1   29[COMRAM] unsigned char 
  8352 ;; Auto vars:     Size  Location     Type
  8353 ;;  daySet          1   30[COMRAM] unsigned char 
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  1    wreg      void 
  8356 ;; Registers used:
  8357 ;;		wreg, status,2, status,0, cstack
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8363 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;Total ram usage:        4 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    6
  8370 ;; This function calls:
  8371 ;;		_DS3231_Write
  8372 ;;		_decimal_to_bcd
  8373 ;; This function is called by:
  8374 ;;		_time_set_yr
  8375 ;;		_time_set_mt
  8376 ;;		_time_set_dt
  8377 ;;		_time_set_dy
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           	psect	text30
  8382  0022CA                     __ptext30:
  8383                           	opt stack 0
  8384  0022CA                     _setDate:
  8385                           	opt stack 22
  8386                           
  8387                           ;incstack = 0
  8388                           ;setDate@daySet stored from wreg
  8389  0022CA  6E1F               	movwf	setDate@daySet,c
  8390                           
  8391                           ;ds3231.c: 84: DS3231_Write(0x03, (decimal_to_bcd(daySet)));
  8392  0022CC  501F               	movf	setDate@daySet,w,c
  8393  0022CE  ECA0  F012         	call	_decimal_to_bcd
  8394  0022D2  6E1A               	movwf	DS3231_Write@value,c
  8395  0022D4  0E03               	movlw	3
  8396  0022D6  EC59  F013         	call	_DS3231_Write
  8397                           
  8398                           ;ds3231.c: 85: DS3231_Write(0x04, (decimal_to_bcd(dateSet)));
  8399  0022DA  501C               	movf	setDate@dateSet,w,c
  8400  0022DC  ECA0  F012         	call	_decimal_to_bcd
  8401  0022E0  6E1A               	movwf	DS3231_Write@value,c
  8402  0022E2  0E04               	movlw	4
  8403  0022E4  EC59  F013         	call	_DS3231_Write
  8404                           
  8405                           ;ds3231.c: 86: DS3231_Write(0x05, (decimal_to_bcd(monthSet)));
  8406  0022E8  501D               	movf	setDate@monthSet,w,c
  8407  0022EA  ECA0  F012         	call	_decimal_to_bcd
  8408  0022EE  6E1A               	movwf	DS3231_Write@value,c
  8409  0022F0  0E05               	movlw	5
  8410  0022F2  EC59  F013         	call	_DS3231_Write
  8411                           
  8412                           ;ds3231.c: 87: DS3231_Write(0x06, (decimal_to_bcd(yearSet)));
  8413  0022F6  501E               	movf	setDate@yearSet,w,c
  8414  0022F8  ECA0  F012         	call	_decimal_to_bcd
  8415  0022FC  6E1A               	movwf	DS3231_Write@value,c
  8416  0022FE  0E06               	movlw	6
  8417  002300  EF59  F013         	goto	_DS3231_Write
  8418  002304                     __end_of_setDate:
  8419                           	opt stack 0
  8420                           tosu	equ	0xFFF
  8421                           tosh	equ	0xFFE
  8422                           tosl	equ	0xFFD
  8423                           pclath	equ	0xFFA
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodh	equ	0xFF4
  8429                           prodl	equ	0xFF3
  8430                           intcon	equ	0xFF2
  8431                           intcon2	equ	0xFF1
  8432                           postinc0	equ	0xFEE
  8433                           wreg	equ	0xFE8
  8434                           indf1	equ	0xFE7
  8435                           plusw1	equ	0xFE3
  8436                           fsr1h	equ	0xFE2
  8437                           fsr1l	equ	0xFE1
  8438                           indf2	equ	0xFDF
  8439                           postinc2	equ	0xFDE
  8440                           postdec2	equ	0xFDD
  8441                           plusw2	equ	0xFDB
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           
  8446 ;; *************** function _decimal_to_bcd *****************
  8447 ;; Defined at:
  8448 ;;		line 10 in file "ds3231.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  d               1    wreg     unsigned char 
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  d               1   24[COMRAM] unsigned char 
  8453 ;; Return value:  Size  Location     Type
  8454 ;;                  1    wreg      unsigned char 
  8455 ;; Registers used:
  8456 ;;		wreg, status,2, status,0, cstack
  8457 ;; Tracked objects:
  8458 ;;		On entry : 0/0
  8459 ;;		On exit  : 0/0
  8460 ;;		Unchanged: 0/0
  8461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;Total ram usage:        3 bytes
  8467 ;; Hardware stack levels used:    1
  8468 ;; Hardware stack levels required when called:    4
  8469 ;; This function calls:
  8470 ;;		___lbdiv
  8471 ;;		___lbmod
  8472 ;; This function is called by:
  8473 ;;		_setTime
  8474 ;;		_setDate
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text31
  8479  002540                     __ptext31:
  8480                           	opt stack 0
  8481  002540                     _decimal_to_bcd:
  8482                           	opt stack 23
  8483                           
  8484                           ;incstack = 0
  8485                           ;decimal_to_bcd@d stored from wreg
  8486  002540  6E19               	movwf	decimal_to_bcd@d,c
  8487                           
  8488                           ;ds3231.c: 12: return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
  8489  002542  0E0A               	movlw	10
  8490  002544  6E13               	movwf	___lbmod@divisor,c
  8491  002546  5019               	movf	decimal_to_bcd@d,w,c
  8492  002548  ECB3  F012         	call	___lbmod
  8493  00254C  6E17               	movwf	??_decimal_to_bcd& (0+255),c
  8494  00254E  0E0F               	movlw	15
  8495  002550  1617               	andwf	??_decimal_to_bcd,f,c
  8496  002552  0E0A               	movlw	10
  8497  002554  6E0F               	movwf	___lbdiv@divisor,c
  8498  002556  5019               	movf	decimal_to_bcd@d,w,c
  8499  002558  ECD4  F011         	call	___lbdiv
  8500  00255C  6E18               	movwf	(??_decimal_to_bcd+1)& (0+255),c
  8501  00255E  3818               	swapf	??_decimal_to_bcd+1,w,c
  8502  002560  0BF0               	andlw	240
  8503  002562  1017               	iorwf	??_decimal_to_bcd,w,c
  8504  002564  0012               	return		;funcret
  8505  002566                     __end_of_decimal_to_bcd:
  8506                           	opt stack 0
  8507                           tosu	equ	0xFFF
  8508                           tosh	equ	0xFFE
  8509                           tosl	equ	0xFFD
  8510                           pclath	equ	0xFFA
  8511                           tblptru	equ	0xFF8
  8512                           tblptrh	equ	0xFF7
  8513                           tblptrl	equ	0xFF6
  8514                           tablat	equ	0xFF5
  8515                           prodh	equ	0xFF4
  8516                           prodl	equ	0xFF3
  8517                           intcon	equ	0xFF2
  8518                           intcon2	equ	0xFF1
  8519                           postinc0	equ	0xFEE
  8520                           wreg	equ	0xFE8
  8521                           indf1	equ	0xFE7
  8522                           plusw1	equ	0xFE3
  8523                           fsr1h	equ	0xFE2
  8524                           fsr1l	equ	0xFE1
  8525                           indf2	equ	0xFDF
  8526                           postinc2	equ	0xFDE
  8527                           postdec2	equ	0xFDD
  8528                           plusw2	equ	0xFDB
  8529                           fsr2h	equ	0xFDA
  8530                           fsr2l	equ	0xFD9
  8531                           status	equ	0xFD8
  8532                           
  8533 ;; *************** function _DS3231_Write *****************
  8534 ;; Defined at:
  8535 ;;		line 30 in file "ds3231.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;  address         1    wreg     unsigned char 
  8538 ;;  value           1   25[COMRAM] unsigned char 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  address         1   26[COMRAM] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, status,0, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8550 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;Total ram usage:        2 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    5
  8557 ;; This function calls:
  8558 ;;		_I2C_Master_Start
  8559 ;;		_I2C_Master_Stop
  8560 ;;		_I2C_Master_Write
  8561 ;; This function is called by:
  8562 ;;		_DS3231_init
  8563 ;;		_setTime
  8564 ;;		_setDate
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           	psect	text32
  8569  0026B2                     __ptext32:
  8570                           	opt stack 0
  8571  0026B2                     _DS3231_Write:
  8572                           	opt stack 23
  8573                           
  8574                           ;incstack = 0
  8575                           ;DS3231_Write@address stored from wreg
  8576  0026B2  6E1B               	movwf	DS3231_Write@address,c
  8577                           
  8578                           ;ds3231.c: 32: I2C_Master_Start();
  8579  0026B4  EC03  F014         	call	_I2C_Master_Start	;wreg free
  8580                           
  8581                           ;ds3231.c: 33: I2C_Master_Write(0xD0);
  8582  0026B8  0ED0               	movlw	208
  8583  0026BA  ECF9  F013         	call	_I2C_Master_Write
  8584                           
  8585                           ;ds3231.c: 34: I2C_Master_Write(address);
  8586  0026BE  501B               	movf	DS3231_Write@address,w,c
  8587  0026C0  ECF9  F013         	call	_I2C_Master_Write
  8588                           
  8589                           ;ds3231.c: 35: I2C_Master_Write(value);
  8590  0026C4  501A               	movf	DS3231_Write@value,w,c
  8591  0026C6  ECF9  F013         	call	_I2C_Master_Write
  8592                           
  8593                           ;ds3231.c: 36: I2C_Master_Stop();
  8594  0026CA  EFFF  F013         	goto	_I2C_Master_Stop	;wreg free
  8595  0026CE                     __end_of_DS3231_Write:
  8596                           	opt stack 0
  8597                           tosu	equ	0xFFF
  8598                           tosh	equ	0xFFE
  8599                           tosl	equ	0xFFD
  8600                           pclath	equ	0xFFA
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           intcon	equ	0xFF2
  8608                           intcon2	equ	0xFF1
  8609                           postinc0	equ	0xFEE
  8610                           wreg	equ	0xFE8
  8611                           indf1	equ	0xFE7
  8612                           plusw1	equ	0xFE3
  8613                           fsr1h	equ	0xFE2
  8614                           fsr1l	equ	0xFE1
  8615                           indf2	equ	0xFDF
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           plusw2	equ	0xFDB
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function _readTemp_Single *****************
  8624 ;; Defined at:
  8625 ;;		line 32 in file "ds18b20.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  buf             1   26[COMRAM] PTR unsigned int 
  8628 ;;		 -> temperature(2), 
  8629 ;;  time_flag       1   27[COMRAM] PTR unsigned char 
  8630 ;;		 -> time_flag(1), 
  8631 ;;  timer_val       1   28[COMRAM] PTR unsigned char 
  8632 ;;		 -> timer_val(1), 
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;  temp            2   34[COMRAM] unsigned int 
  8635 ;;  i               1   33[COMRAM] unsigned char 
  8636 ;;  tmp             1   32[COMRAM] unsigned char 
  8637 ;;  fptmp           1   31[COMRAM] unsigned char 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      unsigned char 
  8640 ;; Registers used:
  8641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 3F/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8647 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;Total ram usage:       10 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    5
  8654 ;; This function calls:
  8655 ;;		___lwdiv
  8656 ;;		___lwmod
  8657 ;;		_ow_reset
  8658 ;;		_read_byte
  8659 ;;		_write_byte
  8660 ;; This function is called by:
  8661 ;;		_time_led
  8662 ;; This function uses a non-reentrant model
  8663 ;;
  8664                           
  8665                           	psect	text33
  8666  000E80                     __ptext33:
  8667                           	opt stack 0
  8668  000E80                     _readTemp_Single:
  8669                           	opt stack 23
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;ds18b20.c: 36: uint8_t i, tmp, fptmp;
  8673                           ;ds18b20.c: 38: switch(*time_flag)
  8674                           
  8675                           ;incstack = 0
  8676  000E80  D07D               	goto	l6109
  8677  000E82                     l6043:
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;ds18b20.c: 41: if (!ow_reset())
  8681  000E82  EC0C  F011         	call	_ow_reset	;wreg free
  8682  000E86  0900               	iorlw	0
  8683  000E88  A4D8               	btfss	status,2,c
  8684  000E8A  0012               	return	
  8685                           
  8686                           ;ds18b20.c: 42: {
  8687                           ;ds18b20.c: 49: write_byte(0xCC);
  8688  000E8C  0ECC               	movlw	204
  8689  000E8E  EC82  F011         	call	_write_byte
  8690                           
  8691                           ;ds18b20.c: 50: write_byte(0x44);
  8692  000E92  0E44               	movlw	68
  8693  000E94  EC82  F011         	call	_write_byte
  8694                           
  8695                           ;ds18b20.c: 51: *timer_val = 0;
  8696  000E98  501D               	movf	readTemp_Single@timer_val,w,c
  8697  000E9A  6ED9               	movwf	fsr2l,c
  8698  000E9C  6ADA               	clrf	fsr2h,c
  8699  000E9E  6ADF               	clrf	indf2,c
  8700                           
  8701                           ;ds18b20.c: 52: *time_flag = 2;
  8702  000EA0  501C               	movf	readTemp_Single@time_flag,w,c
  8703  000EA2  6ED9               	movwf	fsr2l,c
  8704  000EA4  6ADA               	clrf	fsr2h,c
  8705  000EA6  0E02               	movlw	2
  8706  000EA8  6EDF               	movwf	indf2,c
  8707                           
  8708                           ;ds18b20.c: 53: T1CONbits.TMR1ON = 1;
  8709  000EAA  80CD               	bsf	4045,0,c	;volatile
  8710  000EAC  0C02               	retlw	2
  8711  000EAE                     l6055:
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;ds18b20.c: 72: ow_reset();
  8715  000EAE  EC0C  F011         	call	_ow_reset	;wreg free
  8716                           
  8717                           ;ds18b20.c: 73: write_byte(0xCC);
  8718  000EB2  0ECC               	movlw	204
  8719  000EB4  EC82  F011         	call	_write_byte
  8720                           
  8721                           ;ds18b20.c: 74: write_byte(0xBE);
  8722  000EB8  0EBE               	movlw	190
  8723  000EBA  EC82  F011         	call	_write_byte
  8724                           
  8725                           ;ds18b20.c: 75: for(i=0; i<2; i++)
  8726  000EBE  6A22               	clrf	readTemp_Single@i,c
  8727  000EC0                     l6067:
  8728                           
  8729                           ;ds18b20.c: 76: {
  8730                           ;ds18b20.c: 77: scratch[i]= read_byte();
  8731  000EC0  5022               	movf	readTemp_Single@i,w,c
  8732  000EC2  0F80               	addlw	low _scratch
  8733  000EC4  6ED9               	movwf	fsr2l,c
  8734  000EC6  6ADA               	clrf	fsr2h,c
  8735  000EC8  EC9E  F011         	call	_read_byte	;wreg free
  8736  000ECC  6EDF               	movwf	indf2,c
  8737  000ECE  2A22               	incf	readTemp_Single@i,f,c
  8738  000ED0  0E01               	movlw	1
  8739  000ED2  6422               	cpfsgt	readTemp_Single@i,c
  8740  000ED4  D7F5               	goto	l6067
  8741                           
  8742                           ;ds18b20.c: 78: }
  8743                           ;ds18b20.c: 80: temp =(((uint16_t)scratch[1])<<8)|((uint16_t)scratch[0]);
  8744  000ED6  0100               	movlb	0	; () banked
  8745  000ED8  5181               	movf	(_scratch+1)& (0+255),w,b
  8746  000EDA  6E1E               	movwf	??_readTemp_Single& (0+255),c
  8747  000EDC  5180               	movf	_scratch& (0+255),w,b
  8748  000EDE  6E23               	movwf	readTemp_Single@temp,c
  8749  000EE0  C01E  F024         	movff	??_readTemp_Single,readTemp_Single@temp+1
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;ds18b20.c: 83: if (temp & 0x8000)
  8753  000EE4  AE24               	btfss	readTemp_Single@temp+1,7,c
  8754  000EE6  D004               	goto	l6079
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;ds18b20.c: 86: minus=1;
  8758  000EE8  6C23               	negf	readTemp_Single@temp,c
  8759  000EEA  1E24               	comf	readTemp_Single@temp+1,f,c
  8760  000EEC  B0D8               	btfsc	status,0,c
  8761  000EEE  2A24               	incf	readTemp_Single@temp+1,f,c
  8762  000EF0                     l6079:
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;ds18b20.c: 87: }
  8766                           ;ds18b20.c: 89: tmp = temp & 0x0f;
  8767  000EF0  5023               	movf	readTemp_Single@temp,w,c
  8768  000EF2  0B0F               	andlw	15
  8769  000EF4  6E21               	movwf	readTemp_Single@tmp,c
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;ds18b20.c: 90: tmp = fract[tmp];
  8773  000EF6  0EB2               	movlw	low _fract
  8774  000EF8  2421               	addwf	readTemp_Single@tmp,w,c
  8775  000EFA  6EF6               	movwf	tblptrl,c
  8776  000EFC  6AF7               	clrf	tblptrh,c
  8777  000EFE  0EB9               	movlw	high _fract
  8778  000F00  22F7               	addwfc	tblptrh,f,c
  8779  000F02                     	if	0	;There are less than 3 active tblptr bytes
  8780  000F02                     	endif
  8781  000F02  0008               	tblrd		*
  8782  000F04  CFF5 F021          	movff	tablat,readTemp_Single@tmp
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;ds18b20.c: 91: temp = temp>>4;
  8786  000F08  3A23               	swapf	readTemp_Single@temp,f,c
  8787  000F0A  3A24               	swapf	readTemp_Single@temp+1,f,c
  8788  000F0C  0E0F               	movlw	15
  8789  000F0E  1623               	andwf	readTemp_Single@temp,f,c
  8790  000F10  5024               	movf	readTemp_Single@temp+1,w,c
  8791  000F12  0BF0               	andlw	240
  8792  000F14  1223               	iorwf	readTemp_Single@temp,f,c
  8793  000F16  0E0F               	movlw	15
  8794  000F18  1624               	andwf	readTemp_Single@temp+1,f,c
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;ds18b20.c: 92: temp = (temp & 0x00ff) * 10;
  8798  000F1A  5023               	movf	readTemp_Single@temp,w,c
  8799  000F1C  0D0A               	mullw	10
  8800  000F1E  CFF3 F023          	movff	prodl,readTemp_Single@temp
  8801  000F22  CFF4 F024          	movff	prodh,readTemp_Single@temp+1
  8802                           
  8803                           ; BSR set to: 0
  8804                           ;ds18b20.c: 93: temp = temp + tmp;
  8805  000F26  5021               	movf	readTemp_Single@tmp,w,c
  8806  000F28  2623               	addwf	readTemp_Single@temp,f,c
  8807  000F2A  0E00               	movlw	0
  8808  000F2C  2224               	addwfc	readTemp_Single@temp+1,f,c
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;ds18b20.c: 99: fptmp = temp % 10;
  8812  000F2E  C023  F016         	movff	readTemp_Single@temp,___lwmod@dividend
  8813  000F32  C024  F017         	movff	readTemp_Single@temp+1,___lwmod@dividend+1
  8814  000F36  D82C               	call	PL92	;call to abstracted procedure
  8815  000F38  ECED  F010         	call	___lwmod	;wreg free
  8816  000F3C  5016               	movf	?___lwmod,w,c
  8817  000F3E  6E20               	movwf	readTemp_Single@fptmp,c
  8818                           
  8819                           ;ds18b20.c: 100: temp = temp / 10;
  8820  000F40  C023  F00F         	movff	readTemp_Single@temp,___lwdiv@dividend
  8821  000F44  C024  F010         	movff	readTemp_Single@temp+1,___lwdiv@dividend+1
  8822  000F48  6A12               	clrf	___lwdiv@divisor+1,c
  8823  000F4A  0E0A               	movlw	10
  8824  000F4C  6E11               	movwf	___lwdiv@divisor,c
  8825  000F4E  EC80  F010         	call	___lwdiv	;wreg free
  8826  000F52  C00F  F023         	movff	?___lwdiv,readTemp_Single@temp
  8827  000F56  C010  F024         	movff	?___lwdiv+1,readTemp_Single@temp+1
  8828                           
  8829                           ;ds18b20.c: 102: if (fptmp >=6) temp += 1;
  8830  000F5A  0E05               	movlw	5
  8831  000F5C  6420               	cpfsgt	readTemp_Single@fptmp,c
  8832  000F5E  D002               	goto	l6097
  8833  000F60  4A23               	infsnz	readTemp_Single@temp,f,c
  8834  000F62  2A24               	incf	readTemp_Single@temp+1,f,c
  8835  000F64                     l6097:
  8836                           
  8837                           ;ds18b20.c: 105: *buf = temp;
  8838  000F64  501B               	movf	readTemp_Single@buf,w,c
  8839  000F66  6ED9               	movwf	fsr2l,c
  8840  000F68  6ADA               	clrf	fsr2h,c
  8841  000F6A  C023  FFDE         	movff	readTemp_Single@temp,postinc2
  8842  000F6E  C024  FFDD         	movff	readTemp_Single@temp+1,postdec2
  8843                           
  8844                           ;ds18b20.c: 106: *time_flag = 0;
  8845  000F72  501C               	movf	readTemp_Single@time_flag,w,c
  8846  000F74  6ED9               	movwf	fsr2l,c
  8847  000F76  6ADA               	clrf	fsr2h,c
  8848  000F78  6ADF               	clrf	indf2,c
  8849  000F7A  0C00               	retlw	0
  8850  000F7C                     l6109:
  8851                           
  8852                           ; BSR set to: 0
  8853  000F7C  501C               	movf	readTemp_Single@time_flag,w,c
  8854  000F7E  6ED9               	movwf	fsr2l,c
  8855  000F80  6ADA               	clrf	fsr2h,c
  8856  000F82  50DF               	movf	indf2,w,c
  8857                           
  8858                           ; Switch size 1, requested type "space"
  8859                           ; Number of cases is 3, Range of values is 0 to 2
  8860                           ; switch strategies available:
  8861                           ; Name         Instructions Cycles
  8862                           ; simple_byte           10     6 (average)
  8863                           ;	Chosen strategy is simple_byte
  8864  000F84  E101 D77D          	bz	l6043
  8865  000F88  0A01               	xorlw	1	; case 1
  8866  000F8A  E091               	bz	l6055
  8867  000F8C  0A03               	xorlw	3	; case 2
  8868  000F8E  0012               	return	
  8869  000F90                     __end_of_readTemp_Single:
  8870                           	opt stack 0
  8871  000F90                     PL92:
  8872                           	opt stack 22
  8873  000F90  6A19               	clrf	___lwmod@divisor+1,c
  8874  000F92  0E0A               	movlw	10
  8875  000F94  6E18               	movwf	___lwmod@divisor,c
  8876  000F96  0C0A               	retlw	10
  8877  000F98                     __end_ofPL92:
  8878                           	opt stack 0
  8879                           tosu	equ	0xFFF
  8880                           tosh	equ	0xFFE
  8881                           tosl	equ	0xFFD
  8882                           pclath	equ	0xFFA
  8883                           tblptru	equ	0xFF8
  8884                           tblptrh	equ	0xFF7
  8885                           tblptrl	equ	0xFF6
  8886                           tablat	equ	0xFF5
  8887                           prodh	equ	0xFF4
  8888                           prodl	equ	0xFF3
  8889                           intcon	equ	0xFF2
  8890                           intcon2	equ	0xFF1
  8891                           postinc0	equ	0xFEE
  8892                           wreg	equ	0xFE8
  8893                           indf1	equ	0xFE7
  8894                           plusw1	equ	0xFE3
  8895                           fsr1h	equ	0xFE2
  8896                           fsr1l	equ	0xFE1
  8897                           indf2	equ	0xFDF
  8898                           postinc2	equ	0xFDE
  8899                           postdec2	equ	0xFDD
  8900                           plusw2	equ	0xFDB
  8901                           fsr2h	equ	0xFDA
  8902                           fsr2l	equ	0xFD9
  8903                           status	equ	0xFD8
  8904                           
  8905 ;; *************** function _write_byte *****************
  8906 ;; Defined at:
  8907 ;;		line 66 in file "onewire.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  val             1    wreg     unsigned char 
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;  val             1   17[COMRAM] unsigned char 
  8912 ;;  i               1   19[COMRAM] unsigned char 
  8913 ;;  temp            1   18[COMRAM] unsigned char 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      void 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;Total ram usage:        5 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    4
  8930 ;; This function calls:
  8931 ;;		_write_bit
  8932 ;; This function is called by:
  8933 ;;		_init_ds18b20
  8934 ;;		_readTemp_Single
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           	psect	text34
  8939  002304                     __ptext34:
  8940                           	opt stack 0
  8941  002304                     _write_byte:
  8942                           	opt stack 24
  8943                           
  8944                           ;incstack = 0
  8945                           ;write_byte@val stored from wreg
  8946  002304  6E12               	movwf	write_byte@val,c
  8947                           
  8948                           ;onewire.c: 68: uint8_t i;
  8949                           ;onewire.c: 69: uint8_t temp;
  8950                           ;onewire.c: 71: for (i=0;i<8;i++)
  8951  002306  6A14               	clrf	write_byte@i,c
  8952  002308                     l5549:
  8953                           
  8954                           ;onewire.c: 72: {
  8955                           ;onewire.c: 73: temp = val >> i;
  8956  002308  C014  F010         	movff	write_byte@i,??_write_byte
  8957  00230C  C012  F011         	movff	write_byte@val,??_write_byte+1
  8958  002310  2A10               	incf	??_write_byte,f,c
  8959  002312  D002               	goto	u3584
  8960  002314                     u3585:
  8961  002314  90D8               	bcf	status,0,c
  8962  002316  3211               	rrcf	??_write_byte+1,f,c
  8963  002318                     u3584:
  8964  002318  2E10               	decfsz	??_write_byte,f,c
  8965  00231A  D7FC               	goto	u3585
  8966  00231C  5011               	movf	??_write_byte+1,w,c
  8967  00231E  6E13               	movwf	write_byte@temp,c
  8968                           
  8969                           ;onewire.c: 74: temp &= 0x01;
  8970  002320  0E01               	movlw	1
  8971  002322  1613               	andwf	write_byte@temp,f,c
  8972                           
  8973                           ;onewire.c: 75: write_bit(temp);
  8974  002324  5013               	movf	write_byte@temp,w,c
  8975  002326  ECC6  F012         	call	_write_bit
  8976  00232A  2A14               	incf	write_byte@i,f,c
  8977  00232C  0E07               	movlw	7
  8978  00232E  6414               	cpfsgt	write_byte@i,c
  8979  002330  D7EB               	goto	l5549
  8980                           
  8981                           ;onewire.c: 76: }
  8982                           ;onewire.c: 78: _delay((unsigned long)((105)*(40000000/4000000.0)));
  8983  002332  0ED2               	movlw	210
  8984  002334                     u4847:
  8985  002334  D000               	nop2	
  8986  002336  2EE8               	decfsz	wreg,f,c
  8987  002338  D7FD               	bra	u4847
  8988  00233A  0012               	return		;funcret
  8989  00233C                     __end_of_write_byte:
  8990                           	opt stack 0
  8991                           tosu	equ	0xFFF
  8992                           tosh	equ	0xFFE
  8993                           tosl	equ	0xFFD
  8994                           pclath	equ	0xFFA
  8995                           tblptru	equ	0xFF8
  8996                           tblptrh	equ	0xFF7
  8997                           tblptrl	equ	0xFF6
  8998                           tablat	equ	0xFF5
  8999                           prodh	equ	0xFF4
  9000                           prodl	equ	0xFF3
  9001                           intcon	equ	0xFF2
  9002                           intcon2	equ	0xFF1
  9003                           postinc0	equ	0xFEE
  9004                           wreg	equ	0xFE8
  9005                           indf1	equ	0xFE7
  9006                           plusw1	equ	0xFE3
  9007                           fsr1h	equ	0xFE2
  9008                           fsr1l	equ	0xFE1
  9009                           indf2	equ	0xFDF
  9010                           postinc2	equ	0xFDE
  9011                           postdec2	equ	0xFDD
  9012                           plusw2	equ	0xFDB
  9013                           fsr2h	equ	0xFDA
  9014                           fsr2l	equ	0xFD9
  9015                           status	equ	0xFD8
  9016                           
  9017 ;; *************** function _write_bit *****************
  9018 ;; Defined at:
  9019 ;;		line 34 in file "onewire.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  bitval          1    wreg     unsigned char 
  9022 ;; Auto vars:     Size  Location     Type
  9023 ;;  bitval          1   14[COMRAM] unsigned char 
  9024 ;; Return value:  Size  Location     Type
  9025 ;;                  1    wreg      void 
  9026 ;; Registers used:
  9027 ;;		wreg, status,2, status,0, cstack
  9028 ;; Tracked objects:
  9029 ;;		On entry : 0/0
  9030 ;;		On exit  : 0/0
  9031 ;;		Unchanged: 0/0
  9032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9037 ;;Total ram usage:        1 bytes
  9038 ;; Hardware stack levels used:    1
  9039 ;; Hardware stack levels required when called:    3
  9040 ;; This function calls:
  9041 ;;		Nothing
  9042 ;; This function is called by:
  9043 ;;		_write_byte
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           	psect	text35
  9048  00258C                     __ptext35:
  9049                           	opt stack 0
  9050  00258C                     _write_bit:
  9051                           	opt stack 24
  9052                           
  9053                           ;incstack = 0
  9054                           ;write_bit@bitval stored from wreg
  9055  00258C  6E0F               	movwf	write_bit@bitval,c
  9056                           
  9057                           ;onewire.c: 36: PORTCbits.RC0 = 0;
  9058  00258E  9082               	bcf	3970,0,c	;volatile
  9059                           
  9060                           ;onewire.c: 37: TRISCbits.RC0 = 0;
  9061  002590  9094               	bcf	3988,0,c	;volatile
  9062                           
  9063                           ;onewire.c: 38: if(bitval == 1) {
  9064  002592  040F               	decf	write_bit@bitval,w,c
  9065  002594  E106               	bnz	l1069
  9066                           
  9067                           ;onewire.c: 39: _delay((unsigned long)((2)*(40000000/4000000.0)));
  9068  002596  0E06               	movlw	6
  9069  002598                     u4857:
  9070  002598  2EE8               	decfsz	wreg,f,c
  9071  00259A  D7FE               	bra	u4857
  9072  00259C  D000               	nop2	
  9073                           
  9074                           ;onewire.c: 40: PORTCbits.RC0 = 1;
  9075  00259E  8082               	bsf	3970,0,c	;volatile
  9076                           
  9077                           ;onewire.c: 41: TRISCbits.RC0 = 1;
  9078  0025A0  8094               	bsf	3988,0,c	;volatile
  9079  0025A2                     l1069:
  9080                           
  9081                           ;onewire.c: 42: }
  9082                           ;onewire.c: 43: _delay((unsigned long)((105)*(40000000/4000000.0)));
  9083  0025A2  0ED2               	movlw	210
  9084  0025A4                     u4867:
  9085  0025A4  D000               	nop2	
  9086  0025A6  2EE8               	decfsz	wreg,f,c
  9087  0025A8  D7FD               	bra	u4867
  9088                           
  9089                           ;onewire.c: 44: PORTCbits.RC0 = 1;
  9090  0025AA  8082               	bsf	3970,0,c	;volatile
  9091                           
  9092                           ;onewire.c: 45: TRISCbits.RC0 = 1;
  9093  0025AC  8094               	bsf	3988,0,c	;volatile
  9094  0025AE  0012               	return		;funcret
  9095  0025B0                     __end_of_write_bit:
  9096                           	opt stack 0
  9097                           tosu	equ	0xFFF
  9098                           tosh	equ	0xFFE
  9099                           tosl	equ	0xFFD
  9100                           pclath	equ	0xFFA
  9101                           tblptru	equ	0xFF8
  9102                           tblptrh	equ	0xFF7
  9103                           tblptrl	equ	0xFF6
  9104                           tablat	equ	0xFF5
  9105                           prodh	equ	0xFF4
  9106                           prodl	equ	0xFF3
  9107                           intcon	equ	0xFF2
  9108                           intcon2	equ	0xFF1
  9109                           postinc0	equ	0xFEE
  9110                           wreg	equ	0xFE8
  9111                           indf1	equ	0xFE7
  9112                           plusw1	equ	0xFE3
  9113                           fsr1h	equ	0xFE2
  9114                           fsr1l	equ	0xFE1
  9115                           indf2	equ	0xFDF
  9116                           postinc2	equ	0xFDE
  9117                           postdec2	equ	0xFDD
  9118                           plusw2	equ	0xFDB
  9119                           fsr2h	equ	0xFDA
  9120                           fsr2l	equ	0xFD9
  9121                           status	equ	0xFD8
  9122                           
  9123 ;; *************** function _read_byte *****************
  9124 ;; Defined at:
  9125 ;;		line 50 in file "onewire.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  i               1   17[COMRAM] unsigned char 
  9130 ;;  val             1   16[COMRAM] unsigned char 
  9131 ;; Return value:  Size  Location     Type
  9132 ;;                  1    wreg      unsigned char 
  9133 ;; Registers used:
  9134 ;;		wreg, status,2, status,0, cstack
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9142 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;Total ram usage:        4 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    4
  9147 ;; This function calls:
  9148 ;;		_read_bit
  9149 ;; This function is called by:
  9150 ;;		_readTemp_Single
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           	psect	text36
  9155  00233C                     __ptext36:
  9156                           	opt stack 0
  9157  00233C                     _read_byte:
  9158                           	opt stack 23
  9159                           
  9160                           ;onewire.c: 52: uint8_t i;
  9161                           ;onewire.c: 53: uint8_t val = 0;
  9162                           
  9163                           ;incstack = 0
  9164  00233C  6A11               	clrf	read_byte@val,c
  9165                           
  9166                           ;onewire.c: 55: for(i=0;i<8;i++)
  9167  00233E  6A12               	clrf	read_byte@i,c
  9168  002340                     l5565:
  9169                           
  9170                           ;onewire.c: 56: {
  9171                           ;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  9172  002340  EC67  F013         	call	_read_bit	;wreg free
  9173  002344  0900               	iorlw	0
  9174  002346  E00C               	bz	l5569
  9175  002348  C012  F00F         	movff	read_byte@i,??_read_byte
  9176  00234C  0E01               	movlw	1
  9177  00234E  6E10               	movwf	(??_read_byte+1)& (0+255),c
  9178  002350  2A0F               	incf	??_read_byte,f,c
  9179  002352  D002               	goto	u3614
  9180  002354                     u3615:
  9181  002354  90D8               	bcf	status,0,c
  9182  002356  3610               	rlcf	??_read_byte+1,f,c
  9183  002358                     u3614:
  9184  002358  2E0F               	decfsz	??_read_byte,f,c
  9185  00235A  D7FC               	goto	u3615
  9186  00235C  5010               	movf	??_read_byte+1,w,c
  9187  00235E  1211               	iorwf	read_byte@val,f,c
  9188  002360                     l5569:
  9189                           
  9190                           ;onewire.c: 58: _delay((unsigned long)((120)*(40000000/4000000.0)));
  9191  002360  0EF0               	movlw	240
  9192  002362                     u4877:
  9193  002362  D000               	nop2	
  9194  002364  2EE8               	decfsz	wreg,f,c
  9195  002366  D7FD               	bra	u4877
  9196  002368  2A12               	incf	read_byte@i,f,c
  9197  00236A  0E07               	movlw	7
  9198  00236C  6412               	cpfsgt	read_byte@i,c
  9199  00236E  D7E8               	goto	l5565
  9200                           
  9201                           ;onewire.c: 59: }
  9202                           ;onewire.c: 61: return val;
  9203  002370  5011               	movf	read_byte@val,w,c
  9204  002372  0012               	return		;funcret
  9205  002374                     __end_of_read_byte:
  9206                           	opt stack 0
  9207                           tosu	equ	0xFFF
  9208                           tosh	equ	0xFFE
  9209                           tosl	equ	0xFFD
  9210                           pclath	equ	0xFFA
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           intcon	equ	0xFF2
  9218                           intcon2	equ	0xFF1
  9219                           postinc0	equ	0xFEE
  9220                           wreg	equ	0xFE8
  9221                           indf1	equ	0xFE7
  9222                           plusw1	equ	0xFE3
  9223                           fsr1h	equ	0xFE2
  9224                           fsr1l	equ	0xFE1
  9225                           indf2	equ	0xFDF
  9226                           postinc2	equ	0xFDE
  9227                           postdec2	equ	0xFDD
  9228                           plusw2	equ	0xFDB
  9229                           fsr2h	equ	0xFDA
  9230                           fsr2l	equ	0xFD9
  9231                           status	equ	0xFD8
  9232                           
  9233 ;; *************** function _read_bit *****************
  9234 ;; Defined at:
  9235 ;;		line 22 in file "onewire.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;		None
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;		None
  9240 ;; Return value:  Size  Location     Type
  9241 ;;                  1    wreg      unsigned char 
  9242 ;; Registers used:
  9243 ;;		wreg
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/0
  9246 ;;		On exit  : 0/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;Total ram usage:        0 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    3
  9256 ;; This function calls:
  9257 ;;		Nothing
  9258 ;; This function is called by:
  9259 ;;		_read_byte
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           	psect	text37
  9264  0026CE                     __ptext37:
  9265                           	opt stack 0
  9266  0026CE                     _read_bit:
  9267                           	opt stack 23
  9268                           
  9269                           ;onewire.c: 24: PORTCbits.RC0 = 0;
  9270                           
  9271                           ;incstack = 0
  9272  0026CE  9082               	bcf	3970,0,c	;volatile
  9273                           
  9274                           ;onewire.c: 25: TRISCbits.RC0 = 0;
  9275  0026D0  9094               	bcf	3988,0,c	;volatile
  9276                           
  9277                           ;onewire.c: 26: _delay((unsigned long)((1)*(40000000/4000000.0)));
  9278  0026D2  0E03               	movlw	3
  9279  0026D4                     u4887:
  9280  0026D4  2EE8               	decfsz	wreg,f,c
  9281  0026D6  D7FE               	bra	u4887
  9282  0026D8  F000               	nop	
  9283                           
  9284                           ;onewire.c: 27: PORTCbits.RC0 = 1;
  9285  0026DA  8082               	bsf	3970,0,c	;volatile
  9286                           
  9287                           ;onewire.c: 28: TRISCbits.RC0 = 1;
  9288  0026DC  8094               	bsf	3988,0,c	;volatile
  9289                           
  9290                           ;onewire.c: 29: _delay((unsigned long)((6)*(40000000/4000000.0)));
  9291  0026DE  0E14               	movlw	20
  9292  0026E0                     u4897:
  9293  0026E0  2EE8               	decfsz	wreg,f,c
  9294  0026E2  D7FE               	bra	u4897
  9295                           
  9296                           ;onewire.c: 30: return(PORTCbits.RC0);
  9297  0026E4  B082               	btfsc	3970,0,c	;volatile
  9298  0026E6  0C01               	retlw	1
  9299  0026E8  0C00               	retlw	0	;funcret
  9300  0026EA                     __end_of_read_bit:
  9301                           	opt stack 0
  9302                           tosu	equ	0xFFF
  9303                           tosh	equ	0xFFE
  9304                           tosl	equ	0xFFD
  9305                           pclath	equ	0xFFA
  9306                           tblptru	equ	0xFF8
  9307                           tblptrh	equ	0xFF7
  9308                           tblptrl	equ	0xFF6
  9309                           tablat	equ	0xFF5
  9310                           prodh	equ	0xFF4
  9311                           prodl	equ	0xFF3
  9312                           intcon	equ	0xFF2
  9313                           intcon2	equ	0xFF1
  9314                           postinc0	equ	0xFEE
  9315                           wreg	equ	0xFE8
  9316                           indf1	equ	0xFE7
  9317                           plusw1	equ	0xFE3
  9318                           fsr1h	equ	0xFE2
  9319                           fsr1l	equ	0xFE1
  9320                           indf2	equ	0xFDF
  9321                           postinc2	equ	0xFDE
  9322                           postdec2	equ	0xFDD
  9323                           plusw2	equ	0xFDB
  9324                           fsr2h	equ	0xFDA
  9325                           fsr2l	equ	0xFD9
  9326                           status	equ	0xFD8
  9327                           
  9328 ;; *************** function _ow_reset *****************
  9329 ;; Defined at:
  9330 ;;		line 5 in file "onewire.c"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;		None
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;  presence        1   15[COMRAM] unsigned char 
  9335 ;; Return value:  Size  Location     Type
  9336 ;;                  1    wreg      unsigned char 
  9337 ;; Registers used:
  9338 ;;		wreg, status,2
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;Total ram usage:        2 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    3
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		_init_ds18b20
  9355 ;;		_readTemp_Single
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           	psect	text38
  9360  002218                     __ptext38:
  9361                           	opt stack 0
  9362  002218                     _ow_reset:
  9363                           	opt stack 25
  9364                           
  9365                           ;onewire.c: 7: uint8_t presence;
  9366                           ;onewire.c: 8: PORTCbits.RC0 = 0;
  9367                           
  9368                           ;incstack = 0
  9369  002218  9082               	bcf	3970,0,c	;volatile
  9370                           
  9371                           ;onewire.c: 9: TRISCbits.RC0 = 0;
  9372  00221A  9094               	bcf	3988,0,c	;volatile
  9373                           
  9374                           ;onewire.c: 10: _delay((unsigned long)((500)*(40000000/4000000.0)));
  9375  00221C  0E07               	movlw	7
  9376  00221E  6E0F               	movwf	??_ow_reset& (0+255),c
  9377  002220  0E7D               	movlw	125
  9378  002222                     u4907:
  9379  002222  2EE8               	decfsz	wreg,f,c
  9380  002224  D7FE               	bra	u4907
  9381  002226  2E0F               	decfsz	??_ow_reset& (0+255),f,c
  9382  002228  D7FC               	bra	u4907
  9383  00222A  F000               	nop	
  9384                           
  9385                           ;onewire.c: 11: PORTCbits.RC0 = 1;
  9386  00222C  8082               	bsf	3970,0,c	;volatile
  9387                           
  9388                           ;onewire.c: 12: TRISCbits.RC0 = 1;
  9389  00222E  8094               	bsf	3988,0,c	;volatile
  9390                           
  9391                           ;onewire.c: 13: _delay((unsigned long)((100)*(40000000/4000000.0)));
  9392  002230  0EC8               	movlw	200
  9393  002232                     u4917:
  9394  002232  D000               	nop2	
  9395  002234  2EE8               	decfsz	wreg,f,c
  9396  002236  D7FD               	bra	u4917
  9397                           
  9398                           ;onewire.c: 14: presence = PORTCbits.RC0;
  9399  002238  0E00               	movlw	0
  9400  00223A  B082               	btfsc	3970,0,c	;volatile
  9401  00223C  0E01               	movlw	1
  9402  00223E  6E10               	movwf	ow_reset@presence,c
  9403                           
  9404                           ;onewire.c: 15: _delay((unsigned long)((424)*(40000000/4000000.0)));
  9405  002240  0E06               	movlw	6
  9406  002242  6E0F               	movwf	??_ow_reset& (0+255),c
  9407  002244  0E80               	movlw	128
  9408  002246                     u4927:
  9409  002246  2EE8               	decfsz	wreg,f,c
  9410  002248  D7FE               	bra	u4927
  9411  00224A  2E0F               	decfsz	??_ow_reset& (0+255),f,c
  9412  00224C  D7FC               	bra	u4927
  9413  00224E  D000               	nop2	
  9414                           
  9415                           ;onewire.c: 16: return(presence);
  9416  002250  5010               	movf	ow_reset@presence,w,c
  9417  002252  0012               	return		;funcret
  9418  002254                     __end_of_ow_reset:
  9419                           	opt stack 0
  9420                           tosu	equ	0xFFF
  9421                           tosh	equ	0xFFE
  9422                           tosl	equ	0xFFD
  9423                           pclath	equ	0xFFA
  9424                           tblptru	equ	0xFF8
  9425                           tblptrh	equ	0xFF7
  9426                           tblptrl	equ	0xFF6
  9427                           tablat	equ	0xFF5
  9428                           prodh	equ	0xFF4
  9429                           prodl	equ	0xFF3
  9430                           intcon	equ	0xFF2
  9431                           intcon2	equ	0xFF1
  9432                           postinc0	equ	0xFEE
  9433                           wreg	equ	0xFE8
  9434                           indf1	equ	0xFE7
  9435                           plusw1	equ	0xFE3
  9436                           fsr1h	equ	0xFE2
  9437                           fsr1l	equ	0xFE1
  9438                           indf2	equ	0xFDF
  9439                           postinc2	equ	0xFDE
  9440                           postdec2	equ	0xFDD
  9441                           plusw2	equ	0xFDB
  9442                           fsr2h	equ	0xFDA
  9443                           fsr2l	equ	0xFD9
  9444                           status	equ	0xFD8
  9445                           
  9446 ;; *************** function _FillBuf *****************
  9447 ;; Defined at:
  9448 ;;		line 157 in file "display.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;  i               1   24[COMRAM] unsigned char 
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      void 
  9455 ;; Registers used:
  9456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 3F/0
  9459 ;;		On exit  : 3F/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;Total ram usage:        3 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    4
  9469 ;; This function calls:
  9470 ;;		___lbdiv
  9471 ;;		___lbmod
  9472 ;; This function is called by:
  9473 ;;		_time_led
  9474 ;; This function uses a non-reentrant model
  9475 ;;
  9476                           
  9477                           	psect	text39
  9478  0010AA                     __ptext39:
  9479                           	opt stack 0
  9480  0010AA                     _FillBuf:
  9481                           	opt stack 24
  9482                           
  9483                           ; BSR set to: 0
  9484                           ;display.c: 159: uint8_t i;
  9485                           ;display.c: 161: for(i=0; i<5; ++i)
  9486                           
  9487                           ;incstack = 0
  9488  0010AA  6A19               	clrf	FillBuf@i,c
  9489  0010AC                     l5897:
  9490                           
  9491                           ;display.c: 162: {
  9492                           ;display.c: 163: if((TTime.Thr/10) % 10)
  9493  0010AC  ECEE  F003         	call	PL64	;call to abstracted procedure
  9494  0010B0  ECD4  F011         	call	___lbdiv
  9495  0010B4  ECB3  F012         	call	___lbmod
  9496  0010B8  0900               	iorlw	0
  9497  0010BA  E00A               	bz	l5901
  9498                           
  9499                           ;display.c: 164: Dis_Buff[i] = (*pFont)[(TTime.Thr/10) % 10][i];
  9500  0010BC  ECEE  F003         	call	PL64	;call to abstracted procedure
  9501  0010C0  ECD4  F011         	call	___lbdiv
  9502  0010C4  ECB3  F012         	call	___lbmod
  9503  0010C8  D840               	call	PL14	;call to abstracted procedure
  9504  0010CA  0FAB               	addlw	low _Dis_Buff
  9505  0010CC  D869               	call	PL50	;call to abstracted procedure
  9506  0010CE  D002               	goto	l5903
  9507  0010D0                     l5901:
  9508                           
  9509                           ;display.c: 165: else
  9510                           ;display.c: 166: Dis_Buff[i] = 0x00;
  9511  0010D0  5019               	movf	FillBuf@i,w,c
  9512  0010D2  D86C               	call	PL136	;call to abstracted procedure
  9513  0010D4                     l5903:
  9514                           
  9515                           ;display.c: 169: Dis_Buff[i + 6] = (*pFont)[TTime.Thr % 10 ][i];
  9516  0010D4  EC23  F004         	call	PL158	;call to abstracted procedure
  9517  0010D8  ECB3  F012         	call	___lbmod
  9518  0010DC  D836               	call	PL14	;call to abstracted procedure
  9519  0010DE  0FB1               	addlw	low (_Dis_Buff+6)
  9520  0010E0  D85F               	call	PL50	;call to abstracted procedure
  9521                           
  9522                           ;display.c: 170: Dis_Buff[i + 13] = (*pFont)[(TTime.Tmin/10) % 10 ][i];
  9523  0010E2  EC11  F004         	call	PL94	;call to abstracted procedure
  9524  0010E6  ECD4  F011         	call	___lbdiv
  9525  0010EA  ECB3  F012         	call	___lbmod
  9526  0010EE  D82D               	call	PL14	;call to abstracted procedure
  9527  0010F0  0FB8               	addlw	low (_Dis_Buff+13)
  9528  0010F2  D856               	call	PL50	;call to abstracted procedure
  9529                           
  9530                           ;display.c: 171: Dis_Buff[i + 19] = (*pFont)[TTime.Tmin % 10 ][i];
  9531  0010F4  EC1B  F004         	call	PL152	;call to abstracted procedure
  9532  0010F8  ECB3  F012         	call	___lbmod
  9533  0010FC  D826               	call	PL14	;call to abstracted procedure
  9534  0010FE  0FBE               	addlw	low (_Dis_Buff+19)
  9535  001100  D84F               	call	PL50	;call to abstracted procedure
  9536  001102  2A19               	incf	FillBuf@i,f,c
  9537  001104  0E04               	movlw	4
  9538  001106  6419               	cpfsgt	FillBuf@i,c
  9539  001108  D7D1               	goto	l5897
  9540                           
  9541                           ;display.c: 173: }
  9542                           ;display.c: 175: for (i=0; i<3; ++i)
  9543  00110A  6A19               	clrf	FillBuf@i,c
  9544  00110C                     l5917:
  9545                           
  9546                           ;display.c: 176: {
  9547                           ;display.c: 177: Dis_Buff[i + 25] = FontS[(TTime.Ts/10) % 10 + 1][i];
  9548  00110C  EC16  F004         	call	PL98	;call to abstracted procedure
  9549  001110  ECD4  F011         	call	___lbdiv
  9550  001114  ECB3  F012         	call	___lbmod
  9551  001118  D83D               	call	PL38	;call to abstracted procedure
  9552  00111A  D82A               	call	PL24	;call to abstracted procedure
  9553  00111C  0FC4               	addlw	low (_Dis_Buff+25)
  9554  00111E  D840               	call	PL50	;call to abstracted procedure
  9555                           
  9556                           ;display.c: 178: Dis_Buff[i + 29] = FontS[TTime.Ts % 10 + 1][i];
  9557  001120  EC1F  F004         	call	PL156	;call to abstracted procedure
  9558  001124  ECB3  F012         	call	___lbmod
  9559  001128  D835               	call	PL38	;call to abstracted procedure
  9560  00112A  D822               	call	PL24	;call to abstracted procedure
  9561  00112C  0FC8               	addlw	low (_Dis_Buff+29)
  9562  00112E  D838               	call	PL50	;call to abstracted procedure
  9563  001130  2A19               	incf	FillBuf@i,f,c
  9564  001132  0E02               	movlw	2
  9565  001134  6419               	cpfsgt	FillBuf@i,c
  9566  001136  D7EA               	goto	l5917
  9567                           
  9568                           ;display.c: 179: }
  9569                           ;display.c: 181: Dis_Buff[5] = 0;
  9570  001138  0100               	movlb	0	; () banked
  9571  00113A  6BB0               	clrf	(_Dis_Buff+5)& (0+255),b
  9572                           
  9573                           ; BSR set to: 0
  9574                           ;display.c: 182: Dis_Buff[11] = 0x80;
  9575  00113C  0E80               	movlw	128
  9576  00113E  6FB6               	movwf	(_Dis_Buff+11)& (0+255),b
  9577                           
  9578                           ;display.c: 183: Dis_Buff[12] = 0x80;
  9579  001140  6FB7               	movwf	(_Dis_Buff+12)& (0+255),b
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;display.c: 184: Dis_Buff[18] = 0;
  9583  001142  6BBD               	clrf	(_Dis_Buff+18)& (0+255),b
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;display.c: 185: Dis_Buff[24] = 0;
  9587  001144  6BC3               	clrf	(_Dis_Buff+24)& (0+255),b
  9588                           
  9589                           ; BSR set to: 0
  9590                           ;display.c: 186: Dis_Buff[28] = 0;
  9591  001146  6BC7               	clrf	(_Dis_Buff+28)& (0+255),b
  9592                           
  9593                           ; BSR set to: 0
  9594  001148  0012               	return		;funcret
  9595  00114A                     __end_of_FillBuf:
  9596                           	opt stack 0
  9597  00114A                     PL14:
  9598                           	opt stack 24
  9599  00114A  0D05               	mullw	5
  9600  00114C  C06D  F017         	movff	_pFont,??_FillBuf
  9601  001150  C06E  F018         	movff	_pFont+1,??_FillBuf+1
  9602  001154  50F3               	movf	prodl,w,c
  9603  001156  2617               	addwf	??_FillBuf,f,c
  9604  001158  50F4               	movf	prodh,w,c
  9605  00115A  2218               	addwfc	??_FillBuf+1,f,c
  9606  00115C  5019               	movf	FillBuf@i,w,c
  9607  00115E  2617               	addwf	??_FillBuf,f,c
  9608  001160  0E00               	movlw	0
  9609  001162  2218               	addwfc	??_FillBuf+1,f,c
  9610  001164  C017  FFF6         	movff	??_FillBuf,tblptrl
  9611  001168  C018  FFF7         	movff	??_FillBuf+1,tblptrh
  9612  00116C                     	if	0	;tblptru may be non-zero
  9613  00116C                     	endif
  9614  00116C                     	if	0	;tblptru may be non-zero
  9615  00116C                     	endif
  9616  00116C  5019               	movf	FillBuf@i,w,c
  9617  00116E  0012               	return	
  9618  001170                     __end_ofPL14:
  9619                           	opt stack 0
  9620  001170                     PL24:
  9621                           	opt stack 24
  9622  001170  50F3               	movf	prodl,w,c
  9623  001172  2617               	addwf	??_FillBuf,f,c
  9624  001174  50F4               	movf	prodh,w,c
  9625  001176  2218               	addwfc	??_FillBuf+1,f,c
  9626  001178  5019               	movf	FillBuf@i,w,c
  9627  00117A  2617               	addwf	??_FillBuf,f,c
  9628  00117C  0E00               	movlw	0
  9629  00117E  2218               	addwfc	??_FillBuf+1,f,c
  9630  001180  0E03               	movlw	3
  9631  001182  2617               	addwf	??_FillBuf,f,c
  9632  001184  0E00               	movlw	0
  9633  001186  2218               	addwfc	??_FillBuf+1,f,c
  9634  001188  C017  FFF6         	movff	??_FillBuf,tblptrl
  9635  00118C  C018  FFF7         	movff	??_FillBuf+1,tblptrh
  9636  001190                     	if	0	;tblptru may be non-zero
  9637  001190                     	endif
  9638  001190                     	if	0	;tblptru may be non-zero
  9639  001190                     	endif
  9640  001190  5019               	movf	FillBuf@i,w,c
  9641  001192  0012               	return	
  9642  001194                     __end_ofPL24:
  9643                           	opt stack 0
  9644  001194                     PL38:
  9645                           	opt stack 24
  9646  001194  0D03               	mullw	3
  9647  001196  0EBC               	movlw	low _FontS
  9648  001198  6E17               	movwf	??_FillBuf& (0+255),c
  9649  00119A  0EBF               	movlw	high _FontS
  9650  00119C  6E18               	movwf	(??_FillBuf+1)& (0+255),c
  9651  00119E  0012               	return	
  9652  0011A0                     __end_ofPL38:
  9653                           	opt stack 0
  9654  0011A0                     PL50:
  9655                           	opt stack 24
  9656  0011A0  6ED9               	movwf	fsr2l,c
  9657  0011A2  6ADA               	clrf	fsr2h,c
  9658  0011A4  0008               	tblrd		*
  9659  0011A6  CFF5 FFDF          	movff	tablat,indf2
  9660  0011AA  0012               	return	
  9661  0011AC                     __end_ofPL50:
  9662                           	opt stack 0
  9663  0011AC                     PL136:
  9664                           	opt stack 27
  9665  0011AC  0FAB               	addlw	low _Dis_Buff
  9666  0011AE  6ED9               	movwf	fsr2l,c
  9667  0011B0  6ADA               	clrf	fsr2h,c
  9668  0011B2  6ADF               	clrf	indf2,c
  9669  0011B4  0012               	return	
  9670  0011B6                     __end_ofPL136:
  9671                           	opt stack 0
  9672                           tosu	equ	0xFFF
  9673                           tosh	equ	0xFFE
  9674                           tosl	equ	0xFFD
  9675                           pclath	equ	0xFFA
  9676                           tblptru	equ	0xFF8
  9677                           tblptrh	equ	0xFF7
  9678                           tblptrl	equ	0xFF6
  9679                           tablat	equ	0xFF5
  9680                           prodh	equ	0xFF4
  9681                           prodl	equ	0xFF3
  9682                           intcon	equ	0xFF2
  9683                           intcon2	equ	0xFF1
  9684                           postinc0	equ	0xFEE
  9685                           wreg	equ	0xFE8
  9686                           indf1	equ	0xFE7
  9687                           plusw1	equ	0xFE3
  9688                           fsr1h	equ	0xFE2
  9689                           fsr1l	equ	0xFE1
  9690                           indf2	equ	0xFDF
  9691                           postinc2	equ	0xFDE
  9692                           postdec2	equ	0xFDD
  9693                           plusw2	equ	0xFDB
  9694                           fsr2h	equ	0xFDA
  9695                           fsr2l	equ	0xFD9
  9696                           status	equ	0xFD8
  9697                           
  9698 ;; *************** function _BMP085Pressure *****************
  9699 ;; Defined at:
  9700 ;;		line 329 in file "bmp180.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;  getTemp         1    wreg     unsigned char 
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;  getTemp         1    0[BANK0 ] unsigned char 
  9705 ;;  press           4    1[BANK0 ] long 
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  2   60[COMRAM] unsigned int 
  9708 ;; Registers used:
  9709 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9710 ;; Tracked objects:
  9711 ;;		On entry : 3F/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9715 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9719 ;;Total ram usage:        7 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    7
  9722 ;; This function calls:
  9723 ;;		_BMP085GetPressure
  9724 ;;		_BMP085GetTemp
  9725 ;;		_BMP085ReadUT
  9726 ;;		_bmp085ReadUP
  9727 ;; This function is called by:
  9728 ;;		_time_led
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           	psect	text40
  9733  001EA0                     __ptext40:
  9734                           	opt stack 0
  9735  001EA0                     _BMP085Pressure:
  9736                           	opt stack 21
  9737                           
  9738                           ; BSR set to: 0
  9739                           ;incstack = 0
  9740                           ;BMP085Pressure@getTemp stored from wreg
  9741  001EA0  6FCB               	movwf	BMP085Pressure@getTemp& (0+255),b
  9742                           
  9743                           ;bmp180.c: 332: int32_t press;
  9744                           ;bmp180.c: 333: if (getTemp)
  9745  001EA2  0100               	movlb	0	; () banked
  9746  001EA4  51CB               	movf	BMP085Pressure@getTemp& (0+255),w,b
  9747  001EA6  E00C               	bz	l6115
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;bmp180.c: 334: T = BMP085GetTemp(BMP085ReadUT());
  9751  001EA8  ECBA  F011         	call	_BMP085ReadUT	;wreg free
  9752  001EAC  C01B  F029         	movff	?_BMP085ReadUT,BMP085GetTemp@_tu
  9753  001EB0  C01C  F02A         	movff	?_BMP085ReadUT+1,BMP085GetTemp@_tu+1
  9754  001EB4  C01D  F02B         	movff	?_BMP085ReadUT+2,BMP085GetTemp@_tu+2
  9755  001EB8  C01E  F02C         	movff	?_BMP085ReadUT+3,BMP085GetTemp@_tu+3
  9756  001EBC  ECDB  F008         	call	_BMP085GetTemp	;wreg free
  9757  001EC0                     l6115:
  9758                           
  9759                           ;bmp180.c: 335: press = bmp085ReadUP();
  9760  001EC0  EC99  F006         	call	_bmp085ReadUP	;wreg free
  9761  001EC4  C014  F0CC         	movff	?_bmp085ReadUP,BMP085Pressure@press
  9762  001EC8  C015  F0CD         	movff	?_bmp085ReadUP+1,BMP085Pressure@press+1
  9763  001ECC  C016  F0CE         	movff	?_bmp085ReadUP+2,BMP085Pressure@press+2
  9764  001ED0  C017  F0CF         	movff	?_bmp085ReadUP+3,BMP085Pressure@press+3
  9765                           
  9766                           ;bmp180.c: 336: if (press == 0) return 0;
  9767  001ED4  0100               	movlb	0	; () banked
  9768  001ED6  51CC               	movf	BMP085Pressure@press& (0+255),w,b
  9769  001ED8  11CD               	iorwf	(BMP085Pressure@press+1)& (0+255),w,b
  9770  001EDA  11CE               	iorwf	(BMP085Pressure@press+2)& (0+255),w,b
  9771  001EDC  11CF               	iorwf	(BMP085Pressure@press+3)& (0+255),w,b
  9772  001EDE  E103               	bnz	l6121
  9773                           
  9774                           ; BSR set to: 0
  9775  001EE0  6A3D               	clrf	?_BMP085Pressure,c
  9776  001EE2  6A3E               	clrf	?_BMP085Pressure+1,c
  9777  001EE4  0012               	return	
  9778  001EE6                     l6121:
  9779                           
  9780                           ; BSR set to: 0
  9781                           ;bmp180.c: 337: return(BMP085GetPressure(press));
  9782  001EE6  C0CC  F029         	movff	BMP085Pressure@press,BMP085GetPressure@_pu
  9783  001EEA  C0CD  F02A         	movff	BMP085Pressure@press+1,BMP085GetPressure@_pu+1
  9784  001EEE  C0CE  F02B         	movff	BMP085Pressure@press+2,BMP085GetPressure@_pu+2
  9785  001EF2  C0CF  F02C         	movff	BMP085Pressure@press+3,BMP085GetPressure@_pu+3
  9786  001EF6  EC09  F000         	call	_BMP085GetPressure	;wreg free
  9787  001EFA  C029  F03D         	movff	?_BMP085GetPressure,?_BMP085Pressure
  9788  001EFE  C02A  F03E         	movff	?_BMP085GetPressure+1,?_BMP085Pressure+1
  9789  001F02  0012               	return		;funcret
  9790  001F04                     __end_of_BMP085Pressure:
  9791                           	opt stack 0
  9792                           tosu	equ	0xFFF
  9793                           tosh	equ	0xFFE
  9794                           tosl	equ	0xFFD
  9795                           pclath	equ	0xFFA
  9796                           tblptru	equ	0xFF8
  9797                           tblptrh	equ	0xFF7
  9798                           tblptrl	equ	0xFF6
  9799                           tablat	equ	0xFF5
  9800                           prodh	equ	0xFF4
  9801                           prodl	equ	0xFF3
  9802                           intcon	equ	0xFF2
  9803                           intcon2	equ	0xFF1
  9804                           postinc0	equ	0xFEE
  9805                           wreg	equ	0xFE8
  9806                           indf1	equ	0xFE7
  9807                           plusw1	equ	0xFE3
  9808                           fsr1h	equ	0xFE2
  9809                           fsr1l	equ	0xFE1
  9810                           indf2	equ	0xFDF
  9811                           postinc2	equ	0xFDE
  9812                           postdec2	equ	0xFDD
  9813                           plusw2	equ	0xFDB
  9814                           fsr2h	equ	0xFDA
  9815                           fsr2l	equ	0xFD9
  9816                           status	equ	0xFD8
  9817                           
  9818 ;; *************** function _bmp085ReadUP *****************
  9819 ;; Defined at:
  9820 ;;		line 172 in file "bmp180.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;		None
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;  xlsb            4   51[COMRAM] unsigned long 
  9825 ;;  lsb             4   47[COMRAM] unsigned long 
  9826 ;;  msb             4   43[COMRAM] unsigned long 
  9827 ;;  p               4   39[COMRAM] long 
  9828 ;; Return value:  Size  Location     Type
  9829 ;;                  4   19[COMRAM] long 
  9830 ;; Registers used:
  9831 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9832 ;; Tracked objects:
  9833 ;;		On entry : 0/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9838 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9839 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9840 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9841 ;;Total ram usage:       36 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    6
  9844 ;; This function calls:
  9845 ;;		_BMP085ReadByte
  9846 ;;		_BMP085WriteByte
  9847 ;; This function is called by:
  9848 ;;		_BMP085Pressure
  9849 ;; This function uses a non-reentrant model
  9850 ;;
  9851                           
  9852                           	psect	text41
  9853  000D32                     __ptext41:
  9854                           	opt stack 0
  9855  000D32                     _bmp085ReadUP:
  9856                           	opt stack 21
  9857                           
  9858                           ;incstack = 0
  9859  000D32  0EF4               	movlw	244
  9860  000D34  6E11               	movwf	BMP085WriteByte@data,c
  9861  000D36  EC75  F013         	call	_BMP085WriteByte
  9862                           
  9863                           ;bmp180.c: 183: switch (OSS)
  9864  000D3A  D025               	goto	l5597
  9865  000D3C                     l5587:
  9866  000D3C  0E41               	movlw	65
  9867  000D3E  6E18               	movwf	??_bmp085ReadUP& (0+255),c
  9868  000D40  0EEE               	movlw	238
  9869  000D42                     u4937:
  9870  000D42  2EE8               	decfsz	wreg,f,c
  9871  000D44  D7FE               	bra	u4937
  9872  000D46  2E18               	decfsz	??_bmp085ReadUP& (0+255),f,c
  9873  000D48  D7FC               	bra	u4937
  9874  000D4A  D01B               	goto	L7
  9875  000D4C                     l5589:
  9876  000D4C  0E68               	movlw	104
  9877  000D4E  6E18               	movwf	??_bmp085ReadUP& (0+255),c
  9878  000D50  0EE4               	movlw	228
  9879  000D52                     u4947:
  9880  000D52  2EE8               	decfsz	wreg,f,c
  9881  000D54  D7FE               	bra	u4947
  9882  000D56  2E18               	decfsz	??_bmp085ReadUP& (0+255),f,c
  9883  000D58  D7FC               	bra	u4947
  9884  000D5A  D013               	goto	L7
  9885  000D5C                     l5591:
  9886  000D5C  0EB6               	movlw	182
  9887  000D5E  6E18               	movwf	??_bmp085ReadUP& (0+255),c
  9888  000D60  0ED0               	movlw	208
  9889  000D62                     u4957:
  9890  000D62  2EE8               	decfsz	wreg,f,c
  9891  000D64  D7FE               	bra	u4957
  9892  000D66  2E18               	decfsz	??_bmp085ReadUP& (0+255),f,c
  9893  000D68  D7FC               	bra	u4957
  9894  000D6A  D00B               	goto	L7
  9895  000D6C                     l5593:
  9896  000D6C  0E02               	movlw	2
  9897  000D6E  6E19               	movwf	(??_bmp085ReadUP+1)& (0+255),c
  9898  000D70  0E52               	movlw	82
  9899  000D72  6E18               	movwf	??_bmp085ReadUP& (0+255),c
  9900  000D74  0EA6               	movlw	166
  9901  000D76                     u4967:
  9902  000D76  2EE8               	decfsz	wreg,f,c
  9903  000D78  D7FE               	bra	u4967
  9904  000D7A  2E18               	decfsz	??_bmp085ReadUP& (0+255),f,c
  9905  000D7C  D7FC               	bra	u4967
  9906  000D7E  2E19               	decfsz	(??_bmp085ReadUP+1)& (0+255),f,c
  9907  000D80  D7FA               	bra	u4967
  9908  000D82                     L7:
  9909  000D82  D000               	nop2	
  9910  000D84  D00D               	goto	l5599
  9911  000D86                     l5597:
  9912  000D86  0EDD               	movlw	low _OSS
  9913  000D88  6EF6               	movwf	tblptrl,c
  9914  000D8A                     	if	1	;There is more than 1 active tblptr byte
  9915  000D8A  0EBF               	movlw	high _OSS
  9916  000D8C  6EF7               	movwf	tblptrh,c
  9917  000D8E                     	endif
  9918  000D8E                     	if	0	;There are less than 3 active tblptr bytes
  9919  000D8E                     	endif
  9920  000D8E  0008               	tblrd		*
  9921  000D90  50F5               	movf	tablat,w,c
  9922                           
  9923                           ; Switch size 1, requested type "space"
  9924                           ; Number of cases is 4, Range of values is 0 to 3
  9925                           ; switch strategies available:
  9926                           ; Name         Instructions Cycles
  9927                           ; simple_byte           13     7 (average)
  9928                           ;	Chosen strategy is simple_byte
  9929  000D92  E0D4               	bz	l5587
  9930  000D94  0A01               	xorlw	1	; case 1
  9931  000D96  E0DA               	bz	l5589
  9932  000D98  0A03               	xorlw	3	; case 2
  9933  000D9A  E0E0               	bz	l5591
  9934  000D9C  0A01               	xorlw	1	; case 3
  9935  000D9E  E0E6               	bz	l5593
  9936  000DA0                     l5599:
  9937                           
  9938                           ;bmp180.c: 192: msb = BMP085ReadByte(0xF6);
  9939  000DA0  0EF6               	movlw	246
  9940  000DA2  EC36  F012         	call	_BMP085ReadByte
  9941  000DA6  6E2C               	movwf	bmp085ReadUP@msb,c
  9942  000DA8  6A2D               	clrf	bmp085ReadUP@msb+1,c
  9943  000DAA  6A2E               	clrf	bmp085ReadUP@msb+2,c
  9944  000DAC  6A2F               	clrf	bmp085ReadUP@msb+3,c
  9945                           
  9946                           ;bmp180.c: 193: lsb = BMP085ReadByte(0xF7);
  9947  000DAE  0EF7               	movlw	247
  9948  000DB0  EC36  F012         	call	_BMP085ReadByte
  9949  000DB4  6E30               	movwf	bmp085ReadUP@lsb,c
  9950  000DB6  6A31               	clrf	bmp085ReadUP@lsb+1,c
  9951  000DB8  6A32               	clrf	bmp085ReadUP@lsb+2,c
  9952  000DBA  6A33               	clrf	bmp085ReadUP@lsb+3,c
  9953                           
  9954                           ;bmp180.c: 194: xlsb = BMP085ReadByte(0xF8);
  9955  000DBC  0EF8               	movlw	248
  9956  000DBE  EC36  F012         	call	_BMP085ReadByte
  9957  000DC2  6E34               	movwf	bmp085ReadUP@xlsb,c
  9958  000DC4  6A35               	clrf	bmp085ReadUP@xlsb+1,c
  9959  000DC6  6A36               	clrf	bmp085ReadUP@xlsb+2,c
  9960  000DC8  6A37               	clrf	bmp085ReadUP@xlsb+3,c
  9961                           
  9962                           ;bmp180.c: 195: if ((msb == 0xff) && (lsb == 0xff) && (xlsb == 0xff) ) return 0;
  9963  000DCA  282C               	incf	bmp085ReadUP@msb,w,c
  9964  000DCC  102D               	iorwf	bmp085ReadUP@msb+1,w,c
  9965  000DCE  102E               	iorwf	bmp085ReadUP@msb+2,w,c
  9966  000DD0  102F               	iorwf	bmp085ReadUP@msb+3,w,c
  9967  000DD2  E10F               	bnz	l5609
  9968  000DD4  2830               	incf	bmp085ReadUP@lsb,w,c
  9969  000DD6  1031               	iorwf	bmp085ReadUP@lsb+1,w,c
  9970  000DD8  1032               	iorwf	bmp085ReadUP@lsb+2,w,c
  9971  000DDA  1033               	iorwf	bmp085ReadUP@lsb+3,w,c
  9972  000DDC  E10A               	bnz	l5609
  9973  000DDE  2834               	incf	bmp085ReadUP@xlsb,w,c
  9974  000DE0  1035               	iorwf	bmp085ReadUP@xlsb+1,w,c
  9975  000DE2  1036               	iorwf	bmp085ReadUP@xlsb+2,w,c
  9976  000DE4  1037               	iorwf	bmp085ReadUP@xlsb+3,w,c
  9977  000DE6  E105               	bnz	l5609
  9978  000DE8  6A14               	clrf	?_bmp085ReadUP,c
  9979  000DEA  6A15               	clrf	?_bmp085ReadUP+1,c
  9980  000DEC  6A16               	clrf	?_bmp085ReadUP+2,c
  9981  000DEE  6A17               	clrf	?_bmp085ReadUP+3,c
  9982  000DF0  0012               	return	
  9983  000DF2                     l5609:
  9984                           
  9985                           ;bmp180.c: 196: p = ((msb<<16) + (lsb<<8) + xlsb) >> (8-OSS);
  9986  000DF2  C030  F019         	movff	bmp085ReadUP@lsb,??_bmp085ReadUP+1
  9987  000DF6  C031  F01A         	movff	bmp085ReadUP@lsb+1,??_bmp085ReadUP+2
  9988  000DFA  C032  F01B         	movff	bmp085ReadUP@lsb+2,??_bmp085ReadUP+3
  9989  000DFE  6A18               	clrf	??_bmp085ReadUP& (0+255),c
  9990  000E00  C02C  F01C         	movff	bmp085ReadUP@msb,??_bmp085ReadUP+4
  9991  000E04  C02D  F01D         	movff	bmp085ReadUP@msb+1,??_bmp085ReadUP+5
  9992  000E08  C02E  F01E         	movff	bmp085ReadUP@msb+2,??_bmp085ReadUP+6
  9993  000E0C  C02F  F01F         	movff	bmp085ReadUP@msb+3,??_bmp085ReadUP+7
  9994  000E10  C01D  F01F         	movff	??_bmp085ReadUP+5,??_bmp085ReadUP+7
  9995  000E14  C01C  F01E         	movff	??_bmp085ReadUP+4,??_bmp085ReadUP+6
  9996  000E18  6A1D               	clrf	??_bmp085ReadUP+5,c
  9997  000E1A  6A1C               	clrf	??_bmp085ReadUP+4,c
  9998  000E1C  5018               	movf	??_bmp085ReadUP,w,c
  9999  000E1E  241C               	addwf	??_bmp085ReadUP+4,w,c
 10000  000E20  6E20               	movwf	(??_bmp085ReadUP+8)& (0+255),c
 10001  000E22  5019               	movf	??_bmp085ReadUP+1,w,c
 10002  000E24  201D               	addwfc	??_bmp085ReadUP+5,w,c
 10003  000E26  6E21               	movwf	(??_bmp085ReadUP+9)& (0+255),c
 10004  000E28  501A               	movf	??_bmp085ReadUP+2,w,c
 10005  000E2A  201E               	addwfc	??_bmp085ReadUP+6,w,c
 10006  000E2C  6E22               	movwf	(??_bmp085ReadUP+10)& (0+255),c
 10007  000E2E  501B               	movf	??_bmp085ReadUP+3,w,c
 10008  000E30  201F               	addwfc	??_bmp085ReadUP+7,w,c
 10009  000E32  6E23               	movwf	(??_bmp085ReadUP+11)& (0+255),c
 10010  000E34  5034               	movf	bmp085ReadUP@xlsb,w,c
 10011  000E36  2420               	addwf	??_bmp085ReadUP+8,w,c
 10012  000E38  6E24               	movwf	(??_bmp085ReadUP+12)& (0+255),c
 10013  000E3A  5035               	movf	bmp085ReadUP@xlsb+1,w,c
 10014  000E3C  2021               	addwfc	??_bmp085ReadUP+9,w,c
 10015  000E3E  6E25               	movwf	(??_bmp085ReadUP+13)& (0+255),c
 10016  000E40  5036               	movf	bmp085ReadUP@xlsb+2,w,c
 10017  000E42  2022               	addwfc	??_bmp085ReadUP+10,w,c
 10018  000E44  6E26               	movwf	(??_bmp085ReadUP+14)& (0+255),c
 10019  000E46  5037               	movf	bmp085ReadUP@xlsb+3,w,c
 10020  000E48  2023               	addwfc	??_bmp085ReadUP+11,w,c
 10021  000E4A  6E27               	movwf	(??_bmp085ReadUP+15)& (0+255),c
 10022  000E4C  0E06               	movlw	6
 10023  000E4E  D005               	goto	u3660
 10024  000E50                     u3665:
 10025  000E50  90D8               	bcf	status,0,c
 10026  000E52  3227               	rrcf	??_bmp085ReadUP+15,f,c
 10027  000E54  3226               	rrcf	??_bmp085ReadUP+14,f,c
 10028  000E56  3225               	rrcf	??_bmp085ReadUP+13,f,c
 10029  000E58  3224               	rrcf	??_bmp085ReadUP+12,f,c
 10030  000E5A                     u3660:
 10031  000E5A  2EE8               	decfsz	wreg,f,c
 10032  000E5C  D7F9               	goto	u3665
 10033  000E5E  C024  F028         	movff	??_bmp085ReadUP+12,bmp085ReadUP@p
 10034  000E62  C025  F029         	movff	??_bmp085ReadUP+13,bmp085ReadUP@p+1
 10035  000E66  C026  F02A         	movff	??_bmp085ReadUP+14,bmp085ReadUP@p+2
 10036  000E6A  C027  F02B         	movff	??_bmp085ReadUP+15,bmp085ReadUP@p+3
 10037                           
 10038                           ;bmp180.c: 201: return(p);
 10039  000E6E  C028  F014         	movff	bmp085ReadUP@p,?_bmp085ReadUP
 10040  000E72  C029  F015         	movff	bmp085ReadUP@p+1,?_bmp085ReadUP+1
 10041  000E76  C02A  F016         	movff	bmp085ReadUP@p+2,?_bmp085ReadUP+2
 10042  000E7A  C02B  F017         	movff	bmp085ReadUP@p+3,?_bmp085ReadUP+3
 10043  000E7E  0012               	return		;funcret
 10044  000E80                     __end_of_bmp085ReadUP:
 10045                           	opt stack 0
 10046                           tosu	equ	0xFFF
 10047                           tosh	equ	0xFFE
 10048                           tosl	equ	0xFFD
 10049                           pclath	equ	0xFFA
 10050                           tblptru	equ	0xFF8
 10051                           tblptrh	equ	0xFF7
 10052                           tblptrl	equ	0xFF6
 10053                           tablat	equ	0xFF5
 10054                           prodh	equ	0xFF4
 10055                           prodl	equ	0xFF3
 10056                           intcon	equ	0xFF2
 10057                           intcon2	equ	0xFF1
 10058                           postinc0	equ	0xFEE
 10059                           wreg	equ	0xFE8
 10060                           indf1	equ	0xFE7
 10061                           plusw1	equ	0xFE3
 10062                           fsr1h	equ	0xFE2
 10063                           fsr1l	equ	0xFE1
 10064                           indf2	equ	0xFDF
 10065                           postinc2	equ	0xFDE
 10066                           postdec2	equ	0xFDD
 10067                           plusw2	equ	0xFDB
 10068                           fsr2h	equ	0xFDA
 10069                           fsr2l	equ	0xFD9
 10070                           status	equ	0xFD8
 10071                           
 10072 ;; *************** function _BMP085ReadByte *****************
 10073 ;; Defined at:
 10074 ;;		line 47 in file "bmp180.c"
 10075 ;; Parameters:    Size  Location     Type
 10076 ;;  address         1    wreg     unsigned char 
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;  address         1   17[COMRAM] unsigned char 
 10079 ;;  data            1   18[COMRAM] unsigned char 
 10080 ;; Return value:  Size  Location     Type
 10081 ;;                  1    wreg      unsigned char 
 10082 ;; Registers used:
 10083 ;;		wreg, status,2, status,0, cstack
 10084 ;; Tracked objects:
 10085 ;;		On entry : 0/0
 10086 ;;		On exit  : 0/0
 10087 ;;		Unchanged: 0/0
 10088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10090 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;Total ram usage:        2 bytes
 10094 ;; Hardware stack levels used:    1
 10095 ;; Hardware stack levels required when called:    5
 10096 ;; This function calls:
 10097 ;;		_I2C_Master_Read
 10098 ;;		_I2C_Master_RepeatedStart
 10099 ;;		_I2C_Master_Start
 10100 ;;		_I2C_Master_Stop
 10101 ;;		_I2C_Master_Write
 10102 ;; This function is called by:
 10103 ;;		_bmp085ReadUP
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           	psect	text42
 10108  00246C                     __ptext42:
 10109                           	opt stack 0
 10110  00246C                     _BMP085ReadByte:
 10111                           	opt stack 21
 10112                           
 10113                           ;incstack = 0
 10114                           ;BMP085ReadByte@address stored from wreg
 10115  00246C  6E12               	movwf	BMP085ReadByte@address,c
 10116                           
 10117                           ;bmp180.c: 50: uint8_t data;
 10118                           ;bmp180.c: 52: I2C_Master_Start();
 10119  00246E  EC03  F014         	call	_I2C_Master_Start	;wreg free
 10120                           
 10121                           ;bmp180.c: 53: I2C_Master_Write(0xEE);
 10122  002472  0EEE               	movlw	238
 10123  002474  ECF9  F013         	call	_I2C_Master_Write
 10124                           
 10125                           ;bmp180.c: 54: I2C_Master_Write(address);
 10126  002478  5012               	movf	BMP085ReadByte@address,w,c
 10127  00247A  ECF9  F013         	call	_I2C_Master_Write
 10128                           
 10129                           ;bmp180.c: 55: I2C_Master_RepeatedStart();
 10130  00247E  EC07  F014         	call	_I2C_Master_RepeatedStart	;wreg free
 10131                           
 10132                           ;bmp180.c: 56: I2C_Master_Write(0xEE | 0x01);
 10133  002482  0EEF               	movlw	239
 10134  002484  ECF9  F013         	call	_I2C_Master_Write
 10135                           
 10136                           ;bmp180.c: 57: data = I2C_Master_Read(0);
 10137  002488  0E00               	movlw	0
 10138  00248A  EC0E  F013         	call	_I2C_Master_Read
 10139  00248E  6E13               	movwf	BMP085ReadByte@data,c
 10140                           
 10141                           ;bmp180.c: 58: I2C_Master_Stop();
 10142  002490  ECFF  F013         	call	_I2C_Master_Stop	;wreg free
 10143                           
 10144                           ;bmp180.c: 59: return(data);
 10145  002494  5013               	movf	BMP085ReadByte@data,w,c
 10146  002496  0012               	return		;funcret
 10147  002498                     __end_of_BMP085ReadByte:
 10148                           	opt stack 0
 10149                           tosu	equ	0xFFF
 10150                           tosh	equ	0xFFE
 10151                           tosl	equ	0xFFD
 10152                           pclath	equ	0xFFA
 10153                           tblptru	equ	0xFF8
 10154                           tblptrh	equ	0xFF7
 10155                           tblptrl	equ	0xFF6
 10156                           tablat	equ	0xFF5
 10157                           prodh	equ	0xFF4
 10158                           prodl	equ	0xFF3
 10159                           intcon	equ	0xFF2
 10160                           intcon2	equ	0xFF1
 10161                           postinc0	equ	0xFEE
 10162                           wreg	equ	0xFE8
 10163                           indf1	equ	0xFE7
 10164                           plusw1	equ	0xFE3
 10165                           fsr1h	equ	0xFE2
 10166                           fsr1l	equ	0xFE1
 10167                           indf2	equ	0xFDF
 10168                           postinc2	equ	0xFDE
 10169                           postdec2	equ	0xFDD
 10170                           plusw2	equ	0xFDB
 10171                           fsr2h	equ	0xFDA
 10172                           fsr2l	equ	0xFD9
 10173                           status	equ	0xFD8
 10174                           
 10175 ;; *************** function _BMP085ReadUT *****************
 10176 ;; Defined at:
 10177 ;;		line 157 in file "bmp180.c"
 10178 ;; Parameters:    Size  Location     Type
 10179 ;;		None
 10180 ;; Auto vars:     Size  Location     Type
 10181 ;;		None
 10182 ;; Return value:  Size  Location     Type
 10183 ;;                  4   26[COMRAM] long 
 10184 ;; Registers used:
 10185 ;;		wreg, status,2, status,0, cstack
 10186 ;; Tracked objects:
 10187 ;;		On entry : 3F/0
 10188 ;;		On exit  : 0/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10191 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;Total ram usage:        5 bytes
 10196 ;; Hardware stack levels used:    1
 10197 ;; Hardware stack levels required when called:    6
 10198 ;; This function calls:
 10199 ;;		_BMP085WriteByte
 10200 ;;		_bmp085ReadInt
 10201 ;; This function is called by:
 10202 ;;		_BMP085Pressure
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206                           	psect	text43
 10207  002374                     __ptext43:
 10208                           	opt stack 0
 10209  002374                     _BMP085ReadUT:
 10210                           	opt stack 21
 10211                           
 10212                           ; BSR set to: 0
 10213                           ;bmp180.c: 162: BMP085WriteByte(0xF4, 0x2E);
 10214                           
 10215                           ;incstack = 0
 10216  002374  0E2E               	movlw	46
 10217  002376  6E11               	movwf	BMP085WriteByte@data,c
 10218  002378  0EF4               	movlw	244
 10219  00237A  EC75  F013         	call	_BMP085WriteByte
 10220                           
 10221                           ;bmp180.c: 163: _delay((unsigned long)((5)*(40000000/4000.0)));
 10222  00237E  0E41               	movlw	65
 10223  002380  6E1F               	movwf	??_BMP085ReadUT& (0+255),c
 10224  002382  0EEE               	movlw	238
 10225  002384                     u4977:
 10226  002384  2EE8               	decfsz	wreg,f,c
 10227  002386  D7FE               	bra	u4977
 10228  002388  2E1F               	decfsz	??_BMP085ReadUT& (0+255),f,c
 10229  00238A  D7FC               	bra	u4977
 10230  00238C  D000               	nop2	
 10231                           
 10232                           ;bmp180.c: 165: return(bmp085ReadInt(0xF6));
 10233  00238E  0EF6               	movlw	246
 10234  002390  ECC9  F010         	call	_bmp085ReadInt
 10235  002394  C012  F01B         	movff	?_bmp085ReadInt,?_BMP085ReadUT
 10236  002398  C013  F01C         	movff	?_bmp085ReadInt+1,?_BMP085ReadUT+1
 10237  00239C  0E00               	movlw	0
 10238  00239E  BE1C               	btfsc	?_BMP085ReadUT+1,7,c
 10239  0023A0  0EFF               	movlw	-1
 10240  0023A2  6E1D               	movwf	?_BMP085ReadUT+2,c
 10241  0023A4  6E1E               	movwf	?_BMP085ReadUT+3,c
 10242  0023A6  0012               	return		;funcret
 10243  0023A8                     __end_of_BMP085ReadUT:
 10244                           	opt stack 0
 10245                           tosu	equ	0xFFF
 10246                           tosh	equ	0xFFE
 10247                           tosl	equ	0xFFD
 10248                           pclath	equ	0xFFA
 10249                           tblptru	equ	0xFF8
 10250                           tblptrh	equ	0xFF7
 10251                           tblptrl	equ	0xFF6
 10252                           tablat	equ	0xFF5
 10253                           prodh	equ	0xFF4
 10254                           prodl	equ	0xFF3
 10255                           intcon	equ	0xFF2
 10256                           intcon2	equ	0xFF1
 10257                           postinc0	equ	0xFEE
 10258                           wreg	equ	0xFE8
 10259                           indf1	equ	0xFE7
 10260                           plusw1	equ	0xFE3
 10261                           fsr1h	equ	0xFE2
 10262                           fsr1l	equ	0xFE1
 10263                           indf2	equ	0xFDF
 10264                           postinc2	equ	0xFDE
 10265                           postdec2	equ	0xFDD
 10266                           plusw2	equ	0xFDB
 10267                           fsr2h	equ	0xFDA
 10268                           fsr2l	equ	0xFD9
 10269                           status	equ	0xFD8
 10270                           
 10271 ;; *************** function _bmp085ReadInt *****************
 10272 ;; Defined at:
 10273 ;;		line 67 in file "bmp180.c"
 10274 ;; Parameters:    Size  Location     Type
 10275 ;;  address         1    wreg     unsigned char 
 10276 ;; Auto vars:     Size  Location     Type
 10277 ;;  address         1   21[COMRAM] unsigned char 
 10278 ;;  lsb             2   24[COMRAM] int 
 10279 ;;  msb             2   22[COMRAM] int 
 10280 ;; Return value:  Size  Location     Type
 10281 ;;                  2   17[COMRAM] int 
 10282 ;; Registers used:
 10283 ;;		wreg, status,2, status,0, cstack
 10284 ;; Tracked objects:
 10285 ;;		On entry : 0/0
 10286 ;;		On exit  : 0/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10290 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10291 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10292 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;Total ram usage:        9 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:    5
 10296 ;; This function calls:
 10297 ;;		_I2C_Master_Read
 10298 ;;		_I2C_Master_RepeatedStart
 10299 ;;		_I2C_Master_Start
 10300 ;;		_I2C_Master_Stop
 10301 ;;		_I2C_Master_Write
 10302 ;; This function is called by:
 10303 ;;		_bmp085Calibration
 10304 ;;		_BMP085ReadUT
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text44
 10309  002192                     __ptext44:
 10310                           	opt stack 0
 10311  002192                     _bmp085ReadInt:
 10312                           	opt stack 23
 10313                           
 10314                           ;incstack = 0
 10315                           ;bmp085ReadInt@address stored from wreg
 10316  002192  6E16               	movwf	bmp085ReadInt@address,c
 10317                           
 10318                           ;bmp180.c: 70: int16_t msb, lsb;
 10319                           ;bmp180.c: 73: I2C_Master_Start();
 10320  002194  EC03  F014         	call	_I2C_Master_Start	;wreg free
 10321                           
 10322                           ;bmp180.c: 74: I2C_Master_Write(0xEE);
 10323  002198  0EEE               	movlw	238
 10324  00219A  ECF9  F013         	call	_I2C_Master_Write
 10325                           
 10326                           ;bmp180.c: 75: I2C_Master_Write(address);
 10327  00219E  5016               	movf	bmp085ReadInt@address,w,c
 10328  0021A0  ECF9  F013         	call	_I2C_Master_Write
 10329                           
 10330                           ;bmp180.c: 76: I2C_Master_RepeatedStart();
 10331  0021A4  EC07  F014         	call	_I2C_Master_RepeatedStart	;wreg free
 10332                           
 10333                           ;bmp180.c: 77: I2C_Master_Write(0xEE | 0x01);
 10334  0021A8  0EEF               	movlw	239
 10335  0021AA  ECF9  F013         	call	_I2C_Master_Write
 10336                           
 10337                           ;bmp180.c: 78: msb = (int16_t)I2C_Master_Read(1);
 10338  0021AE  0E01               	movlw	1
 10339  0021B0  EC0E  F013         	call	_I2C_Master_Read
 10340  0021B4  6E17               	movwf	bmp085ReadInt@msb,c
 10341  0021B6  6A18               	clrf	bmp085ReadInt@msb+1,c
 10342                           
 10343                           ;bmp180.c: 79: lsb = I2C_Master_Read(0);
 10344  0021B8  0E00               	movlw	0
 10345  0021BA  EC0E  F013         	call	_I2C_Master_Read
 10346  0021BE  6E19               	movwf	bmp085ReadInt@lsb,c
 10347  0021C0  6A1A               	clrf	bmp085ReadInt@lsb+1,c
 10348                           
 10349                           ;bmp180.c: 80: I2C_Master_Stop();
 10350  0021C2  ECFF  F013         	call	_I2C_Master_Stop	;wreg free
 10351                           
 10352                           ;bmp180.c: 83: return (msb << 8) | lsb;
 10353  0021C6  5017               	movf	bmp085ReadInt@msb,w,c
 10354  0021C8  6E15               	movwf	(??_bmp085ReadInt+1)& (0+255),c
 10355  0021CA  6A14               	clrf	??_bmp085ReadInt& (0+255),c
 10356  0021CC  5019               	movf	bmp085ReadInt@lsb,w,c
 10357  0021CE  1014               	iorwf	??_bmp085ReadInt,w,c
 10358  0021D0  6E12               	movwf	?_bmp085ReadInt,c
 10359  0021D2  501A               	movf	bmp085ReadInt@lsb+1,w,c
 10360  0021D4  1015               	iorwf	??_bmp085ReadInt+1,w,c
 10361  0021D6  6E13               	movwf	?_bmp085ReadInt+1,c
 10362  0021D8  0012               	return		;funcret
 10363  0021DA                     __end_of_bmp085ReadInt:
 10364                           	opt stack 0
 10365                           tosu	equ	0xFFF
 10366                           tosh	equ	0xFFE
 10367                           tosl	equ	0xFFD
 10368                           pclath	equ	0xFFA
 10369                           tblptru	equ	0xFF8
 10370                           tblptrh	equ	0xFF7
 10371                           tblptrl	equ	0xFF6
 10372                           tablat	equ	0xFF5
 10373                           prodh	equ	0xFF4
 10374                           prodl	equ	0xFF3
 10375                           intcon	equ	0xFF2
 10376                           intcon2	equ	0xFF1
 10377                           postinc0	equ	0xFEE
 10378                           wreg	equ	0xFE8
 10379                           indf1	equ	0xFE7
 10380                           plusw1	equ	0xFE3
 10381                           fsr1h	equ	0xFE2
 10382                           fsr1l	equ	0xFE1
 10383                           indf2	equ	0xFDF
 10384                           postinc2	equ	0xFDE
 10385                           postdec2	equ	0xFDD
 10386                           plusw2	equ	0xFDB
 10387                           fsr2h	equ	0xFDA
 10388                           fsr2l	equ	0xFD9
 10389                           status	equ	0xFD8
 10390                           
 10391 ;; *************** function _BMP085WriteByte *****************
 10392 ;; Defined at:
 10393 ;;		line 92 in file "bmp180.c"
 10394 ;; Parameters:    Size  Location     Type
 10395 ;;  address         1    wreg     unsigned char 
 10396 ;;  data            1   16[COMRAM] char 
 10397 ;; Auto vars:     Size  Location     Type
 10398 ;;  address         1   17[COMRAM] unsigned char 
 10399 ;; Return value:  Size  Location     Type
 10400 ;;                  1    wreg      void 
 10401 ;; Registers used:
 10402 ;;		wreg, status,2, status,0, cstack
 10403 ;; Tracked objects:
 10404 ;;		On entry : 0/0
 10405 ;;		On exit  : 0/0
 10406 ;;		Unchanged: 0/0
 10407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10408 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;Total ram usage:        2 bytes
 10413 ;; Hardware stack levels used:    1
 10414 ;; Hardware stack levels required when called:    5
 10415 ;; This function calls:
 10416 ;;		_I2C_Master_Start
 10417 ;;		_I2C_Master_Stop
 10418 ;;		_I2C_Master_Write
 10419 ;; This function is called by:
 10420 ;;		_BMP085ReadUT
 10421 ;;		_bmp085ReadUP
 10422 ;; This function uses a non-reentrant model
 10423 ;;
 10424                           
 10425                           	psect	text45
 10426  0026EA                     __ptext45:
 10427                           	opt stack 0
 10428  0026EA                     _BMP085WriteByte:
 10429                           	opt stack 21
 10430                           
 10431                           ;incstack = 0
 10432                           ;BMP085WriteByte@address stored from wreg
 10433  0026EA  6E12               	movwf	BMP085WriteByte@address,c
 10434                           
 10435                           ;bmp180.c: 95: I2C_Master_Start();
 10436  0026EC  EC03  F014         	call	_I2C_Master_Start	;wreg free
 10437                           
 10438                           ;bmp180.c: 96: I2C_Master_Write(0xEE);
 10439  0026F0  0EEE               	movlw	238
 10440  0026F2  ECF9  F013         	call	_I2C_Master_Write
 10441                           
 10442                           ;bmp180.c: 97: I2C_Master_Write(address);
 10443  0026F6  5012               	movf	BMP085WriteByte@address,w,c
 10444  0026F8  ECF9  F013         	call	_I2C_Master_Write
 10445                           
 10446                           ;bmp180.c: 98: I2C_Master_Write(data);
 10447  0026FC  5011               	movf	BMP085WriteByte@data,w,c
 10448  0026FE  ECF9  F013         	call	_I2C_Master_Write
 10449                           
 10450                           ;bmp180.c: 99: I2C_Master_Stop();
 10451  002702  EFFF  F013         	goto	_I2C_Master_Stop	;wreg free
 10452  002706                     __end_of_BMP085WriteByte:
 10453                           	opt stack 0
 10454                           tosu	equ	0xFFF
 10455                           tosh	equ	0xFFE
 10456                           tosl	equ	0xFFD
 10457                           pclath	equ	0xFFA
 10458                           tblptru	equ	0xFF8
 10459                           tblptrh	equ	0xFF7
 10460                           tblptrl	equ	0xFF6
 10461                           tablat	equ	0xFF5
 10462                           prodh	equ	0xFF4
 10463                           prodl	equ	0xFF3
 10464                           intcon	equ	0xFF2
 10465                           intcon2	equ	0xFF1
 10466                           postinc0	equ	0xFEE
 10467                           wreg	equ	0xFE8
 10468                           indf1	equ	0xFE7
 10469                           plusw1	equ	0xFE3
 10470                           fsr1h	equ	0xFE2
 10471                           fsr1l	equ	0xFE1
 10472                           indf2	equ	0xFDF
 10473                           postinc2	equ	0xFDE
 10474                           postdec2	equ	0xFDD
 10475                           plusw2	equ	0xFDB
 10476                           fsr2h	equ	0xFDA
 10477                           fsr2l	equ	0xFD9
 10478                           status	equ	0xFD8
 10479                           
 10480 ;; *************** function _BMP085GetTemp *****************
 10481 ;; Defined at:
 10482 ;;		line 208 in file "bmp180.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;  _tu             4   40[COMRAM] long 
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;  Tt              4   52[COMRAM] long 
 10487 ;; Return value:  Size  Location     Type
 10488 ;;                  4   40[COMRAM] long 
 10489 ;; Registers used:
 10490 ;;		wreg, status,2, status,0, cstack
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10496 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;Total ram usage:       16 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    4
 10503 ;; This function calls:
 10504 ;;		___aldiv
 10505 ;;		___lmul
 10506 ;; This function is called by:
 10507 ;;		_BMP085Pressure
 10508 ;; This function uses a non-reentrant model
 10509 ;;
 10510                           
 10511                           	psect	text46
 10512  0011B6                     __ptext46:
 10513                           	opt stack 0
 10514  0011B6                     _BMP085GetTemp:
 10515                           	opt stack 23
 10516                           
 10517                           ;bmp180.c: 211: int32_t Tt;
 10518                           ;bmp180.c: 213: X1 = (((int32_t)_tu - (int32_t)ac6) * (int32_t)ac5) / 32768;
 10519                           
 10520                           ;incstack = 0
 10521  0011B6  0100               	movlb	0	; () banked
 10522  0011B8  51A1               	movf	_ac6& (0+255),w,b
 10523  0011BA  6E2D               	movwf	??_BMP085GetTemp& (0+255),c
 10524  0011BC  51A2               	movf	(_ac6+1)& (0+255),w,b
 10525  0011BE  6E2E               	movwf	(??_BMP085GetTemp+1)& (0+255),c
 10526  0011C0  6A2F               	clrf	(??_BMP085GetTemp+2)& (0+255),c
 10527  0011C2  6A30               	clrf	(??_BMP085GetTemp+3)& (0+255),c
 10528  0011C4  502D               	movf	??_BMP085GetTemp,w,c
 10529  0011C6  5C29               	subwf	BMP085GetTemp@_tu,w,c
 10530  0011C8  6E0F               	movwf	___lmul@multiplier,c
 10531  0011CA  502E               	movf	??_BMP085GetTemp+1,w,c
 10532  0011CC  582A               	subwfb	BMP085GetTemp@_tu+1,w,c
 10533  0011CE  6E10               	movwf	___lmul@multiplier+1,c
 10534  0011D0  502F               	movf	??_BMP085GetTemp+2,w,c
 10535  0011D2  582B               	subwfb	BMP085GetTemp@_tu+2,w,c
 10536  0011D4  6E11               	movwf	___lmul@multiplier+2,c
 10537  0011D6  5030               	movf	??_BMP085GetTemp+3,w,c
 10538  0011D8  582C               	subwfb	BMP085GetTemp@_tu+3,w,c
 10539  0011DA  6E12               	movwf	___lmul@multiplier+3,c
 10540  0011DC  C0A3  F013         	movff	_ac5,___lmul@multiplicand
 10541  0011E0  C0A4  F014         	movff	_ac5+1,___lmul@multiplicand+1
 10542  0011E4  6A15               	clrf	___lmul@multiplicand+2,c
 10543  0011E6  6A16               	clrf	___lmul@multiplicand+3,c
 10544  0011E8  EC34  F010         	call	___lmul	;wreg free
 10545  0011EC  EC8F  F001         	call	PL12	;call to abstracted procedure
 10546  0011F0  6A1F               	clrf	___aldiv@divisor,c
 10547  0011F2  0E80               	movlw	128
 10548  0011F4  EC28  F002         	call	PL110	;call to abstracted procedure
 10549  0011F8  ECCF  F00B         	call	___aldiv	;wreg free
 10550  0011FC  ECB9  F001         	call	PL42	;call to abstracted procedure
 10551                           
 10552                           ;bmp180.c: 217: X2 = ((int32_t)mc << 11) / (X1 + md);
 10553  001200  C09B  F02D         	movff	_mc,??_BMP085GetTemp
 10554  001204  C09C  F02E         	movff	_mc+1,??_BMP085GetTemp+1
 10555  001208  0E00               	movlw	0
 10556  00120A  BE2E               	btfsc	(??_BMP085GetTemp+1)& (0+255),7,c
 10557  00120C  0EFF               	movlw	255
 10558  00120E  6E2F               	movwf	(??_BMP085GetTemp+2)& (0+255),c
 10559  001210  6E30               	movwf	(??_BMP085GetTemp+3)& (0+255),c
 10560  001212  0E0B               	movlw	11
 10561  001214                     u3675:
 10562  001214  90D8               	bcf	status,0,c
 10563  001216  362D               	rlcf	??_BMP085GetTemp,f,c
 10564  001218  362E               	rlcf	??_BMP085GetTemp+1,f,c
 10565  00121A  362F               	rlcf	??_BMP085GetTemp+2,f,c
 10566  00121C  3630               	rlcf	??_BMP085GetTemp+3,f,c
 10567  00121E  2EE8               	decfsz	wreg,f,c
 10568  001220  D7F9               	goto	u3675
 10569  001222  C02D  F01B         	movff	??_BMP085GetTemp,___aldiv@dividend
 10570  001226  C02E  F01C         	movff	??_BMP085GetTemp+1,___aldiv@dividend+1
 10571  00122A  C02F  F01D         	movff	??_BMP085GetTemp+2,___aldiv@dividend+2
 10572  00122E  C030  F01E         	movff	??_BMP085GetTemp+3,___aldiv@dividend+3
 10573  001232  C099  F031         	movff	_md,??_BMP085GetTemp+4
 10574  001236  C09A  F032         	movff	_md+1,??_BMP085GetTemp+5
 10575  00123A  0E00               	movlw	0
 10576  00123C  BE32               	btfsc	(??_BMP085GetTemp+5)& (0+255),7,c
 10577  00123E  0EFF               	movlw	255
 10578  001240  6E33               	movwf	(??_BMP085GetTemp+6)& (0+255),c
 10579  001242  6E34               	movwf	(??_BMP085GetTemp+7)& (0+255),c
 10580  001244  5052               	movf	_X1,w,c
 10581  001246  2431               	addwf	??_BMP085GetTemp+4,w,c
 10582  001248  6E1F               	movwf	___aldiv@divisor,c
 10583  00124A  5053               	movf	_X1+1,w,c
 10584  00124C  2032               	addwfc	??_BMP085GetTemp+5,w,c
 10585  00124E  6E20               	movwf	___aldiv@divisor+1,c
 10586  001250  5054               	movf	_X1+2,w,c
 10587  001252  2033               	addwfc	??_BMP085GetTemp+6,w,c
 10588  001254  6E21               	movwf	___aldiv@divisor+2,c
 10589  001256  5055               	movf	_X1+3,w,c
 10590  001258  2034               	addwfc	??_BMP085GetTemp+7,w,c
 10591  00125A  6E22               	movwf	___aldiv@divisor+3,c
 10592  00125C  ECCF  F00B         	call	___aldiv	;wreg free
 10593                           
 10594                           ;bmp180.c: 221: B5 = X1 + X2;
 10595  001260  EC98  F001         	call	PL34	;call to abstracted procedure
 10596  001264  0100               	movlb	0	; () banked
 10597  001266  6F89               	movwf	_B5& (0+255),b
 10598  001268  504F               	movf	_X2+1,w,c
 10599  00126A  2053               	addwfc	_X1+1,w,c
 10600  00126C  6F8A               	movwf	(_B5+1)& (0+255),b
 10601  00126E  5050               	movf	_X2+2,w,c
 10602  001270  2054               	addwfc	_X1+2,w,c
 10603  001272  6F8B               	movwf	(_B5+2)& (0+255),b
 10604  001274  5051               	movf	_X2+3,w,c
 10605  001276  2055               	addwfc	_X1+3,w,c
 10606  001278  6F8C               	movwf	(_B5+3)& (0+255),b
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;bmp180.c: 227: Tt = (B5+8) / 16;
 10610  00127A  0E08               	movlw	8
 10611  00127C  2589               	addwf	_B5& (0+255),w,b
 10612  00127E  6E1B               	movwf	___aldiv@dividend,c
 10613  001280  0E00               	movlw	0
 10614  001282  218A               	addwfc	(_B5+1)& (0+255),w,b
 10615  001284  6E1C               	movwf	___aldiv@dividend+1,c
 10616  001286  0E00               	movlw	0
 10617  001288  218B               	addwfc	(_B5+2)& (0+255),w,b
 10618  00128A  6E1D               	movwf	___aldiv@dividend+2,c
 10619  00128C  0E00               	movlw	0
 10620  00128E  218C               	addwfc	(_B5+3)& (0+255),w,b
 10621  001290  6E1E               	movwf	___aldiv@dividend+3,c
 10622  001292  0E10               	movlw	16
 10623  001294  EC1D  F002         	call	PL88	;call to abstracted procedure
 10624  001298  ECCF  F00B         	call	___aldiv	;wreg free
 10625  00129C  C01B  F035         	movff	?___aldiv,BMP085GetTemp@Tt
 10626  0012A0  C01C  F036         	movff	?___aldiv+1,BMP085GetTemp@Tt+1
 10627  0012A4  C01D  F037         	movff	?___aldiv+2,BMP085GetTemp@Tt+2
 10628  0012A8  C01E  F038         	movff	?___aldiv+3,BMP085GetTemp@Tt+3
 10629                           
 10630                           ;bmp180.c: 232: return(Tt);
 10631  0012AC  C035  F029         	movff	BMP085GetTemp@Tt,?_BMP085GetTemp
 10632  0012B0  C036  F02A         	movff	BMP085GetTemp@Tt+1,?_BMP085GetTemp+1
 10633  0012B4  C037  F02B         	movff	BMP085GetTemp@Tt+2,?_BMP085GetTemp+2
 10634  0012B8  C038  F02C         	movff	BMP085GetTemp@Tt+3,?_BMP085GetTemp+3
 10635  0012BC  0012               	return		;funcret
 10636  0012BE                     __end_of_BMP085GetTemp:
 10637                           	opt stack 0
 10638                           tosu	equ	0xFFF
 10639                           tosh	equ	0xFFE
 10640                           tosl	equ	0xFFD
 10641                           pclath	equ	0xFFA
 10642                           tblptru	equ	0xFF8
 10643                           tblptrh	equ	0xFF7
 10644                           tblptrl	equ	0xFF6
 10645                           tablat	equ	0xFF5
 10646                           prodh	equ	0xFF4
 10647                           prodl	equ	0xFF3
 10648                           intcon	equ	0xFF2
 10649                           intcon2	equ	0xFF1
 10650                           postinc0	equ	0xFEE
 10651                           wreg	equ	0xFE8
 10652                           indf1	equ	0xFE7
 10653                           plusw1	equ	0xFE3
 10654                           fsr1h	equ	0xFE2
 10655                           fsr1l	equ	0xFE1
 10656                           indf2	equ	0xFDF
 10657                           postinc2	equ	0xFDE
 10658                           postdec2	equ	0xFDD
 10659                           plusw2	equ	0xFDB
 10660                           fsr2h	equ	0xFDA
 10661                           fsr2l	equ	0xFD9
 10662                           status	equ	0xFD8
 10663                           
 10664 ;; *************** function _BMP085GetPressure *****************
 10665 ;; Defined at:
 10666 ;;		line 238 in file "bmp180.c"
 10667 ;; Parameters:    Size  Location     Type
 10668 ;;  _pu             4   40[COMRAM] long 
 10669 ;; Auto vars:     Size  Location     Type
 10670 ;;  Pp              4   56[COMRAM] long 
 10671 ;; Return value:  Size  Location     Type
 10672 ;;                  2   40[COMRAM] unsigned int 
 10673 ;; Registers used:
 10674 ;;		wreg, status,2, status,0, cstack
 10675 ;; Tracked objects:
 10676 ;;		On entry : 3F/0
 10677 ;;		On exit  : 0/0
 10678 ;;		Unchanged: 0/0
 10679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10681 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10682 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10683 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10684 ;;Total ram usage:       20 bytes
 10685 ;; Hardware stack levels used:    1
 10686 ;; Hardware stack levels required when called:    4
 10687 ;; This function calls:
 10688 ;;		___aldiv
 10689 ;;		___lldiv
 10690 ;;		___lmul
 10691 ;; This function is called by:
 10692 ;;		_BMP085Pressure
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           	psect	text47
 10697  000012                     __ptext47:
 10698                           	opt stack 0
 10699  000012                     _BMP085GetPressure:
 10700                           	opt stack 23
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;bmp180.c: 241: int32_t Pp;
 10704                           ;bmp180.c: 243: B6 = B5 - 4000;
 10705                           
 10706                           ;incstack = 0
 10707  000012  0E60               	movlw	96
 10708  000014  2589               	addwf	_B5& (0+255),w,b
 10709  000016  6E4A               	movwf	_B6,c
 10710  000018  0EF0               	movlw	240
 10711  00001A  218A               	addwfc	(_B5+1)& (0+255),w,b
 10712  00001C  6E4B               	movwf	_B6+1,c
 10713  00001E  0EFF               	movlw	255
 10714  000020  218B               	addwfc	(_B5+2)& (0+255),w,b
 10715  000022  6E4C               	movwf	_B6+2,c
 10716  000024  0EFF               	movlw	255
 10717  000026  218C               	addwfc	(_B5+3)& (0+255),w,b
 10718  000028  6E4D               	movwf	_B6+3,c
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;bmp180.c: 248: X1 = (b2*(B6*B6/4096))/2048;
 10722  00002A  D98D               	call	PL40	;call to abstracted procedure
 10723  00002C  EC34  F010         	call	___lmul	;wreg free
 10724  000030  D976               	call	PL12	;call to abstracted procedure
 10725  000032  ECCF  F00B         	call	___aldiv	;wreg free
 10726  000036  D9E0               	call	PL72	;call to abstracted procedure
 10727                           
 10728                           ;bmp180.c: 248: X1 = (b2*(B6*B6/4096))/2048;
 10729  000038  C09D  F00F         	movff	_b2,___lmul@multiplier
 10730  00003C  C09E  F010         	movff	_b2+1,___lmul@multiplier+1
 10731  000040  D9AA               	call	PL54	;call to abstracted procedure
 10732  000042  D9D1               	call	PL70	;call to abstracted procedure
 10733  000044  EC34  F010         	call	___lmul	;wreg free
 10734  000048  D96A               	call	PL12	;call to abstracted procedure
 10735  00004A  D9FC               	call	PL104	;call to abstracted procedure
 10736  00004C  ECCF  F00B         	call	___aldiv	;wreg free
 10737  000050  D990               	call	PL42	;call to abstracted procedure
 10738                           
 10739                           ;bmp180.c: 253: X2 = ac2 * B6 / 2048;
 10740  000052  C0A9  F00F         	movff	_ac2,___lmul@multiplier
 10741  000056  C0AA  F010         	movff	_ac2+1,___lmul@multiplier+1
 10742  00005A  D99D               	call	PL54	;call to abstracted procedure
 10743  00005C  D993               	call	PL44	;call to abstracted procedure
 10744  00005E  EC34  F010         	call	___lmul	;wreg free
 10745  000062  D95D               	call	PL12	;call to abstracted procedure
 10746  000064  D9EF               	call	PL104	;call to abstracted procedure
 10747  000066  ECCF  F00B         	call	___aldiv	;wreg free
 10748                           
 10749                           ;bmp180.c: 257: X3 = X1 + X2;
 10750  00006A  D962               	call	PL34	;call to abstracted procedure
 10751  00006C  0100               	movlb	0	; () banked
 10752  00006E  6F95               	movwf	_X3& (0+255),b
 10753  000070  504F               	movf	_X2+1,w,c
 10754  000072  2053               	addwfc	_X1+1,w,c
 10755  000074  6F96               	movwf	(_X3+1)& (0+255),b
 10756  000076  5050               	movf	_X2+2,w,c
 10757  000078  2054               	addwfc	_X1+2,w,c
 10758  00007A  6F97               	movwf	(_X3+2)& (0+255),b
 10759  00007C  5051               	movf	_X2+3,w,c
 10760  00007E  2055               	addwfc	_X1+3,w,c
 10761  000080  6F98               	movwf	(_X3+3)& (0+255),b
 10762  000082  C056  F02D         	movff	_ac1,??_BMP085GetPressure
 10763  000086  C057  F02E         	movff	_ac1+1,??_BMP085GetPressure+1
 10764  00008A  0E00               	movlw	0
 10765  00008C  BE2E               	btfsc	(??_BMP085GetPressure+1)& (0+255),7,c
 10766  00008E  0EFF               	movlw	255
 10767  000090  6E2F               	movwf	(??_BMP085GetPressure+2)& (0+255),c
 10768  000092  6E30               	movwf	(??_BMP085GetPressure+3)& (0+255),c
 10769  000094  0E02               	movlw	2
 10770  000096                     u3685:
 10771  000096  90D8               	bcf	status,0,c
 10772  000098  362D               	rlcf	??_BMP085GetPressure,f,c
 10773  00009A  362E               	rlcf	??_BMP085GetPressure+1,f,c
 10774  00009C  362F               	rlcf	??_BMP085GetPressure+2,f,c
 10775  00009E  3630               	rlcf	??_BMP085GetPressure+3,f,c
 10776  0000A0  2EE8               	decfsz	wreg,f,c
 10777  0000A2  D7F9               	goto	u3685
 10778  0000A4  5195               	movf	_X3& (0+255),w,b
 10779  0000A6  242D               	addwf	??_BMP085GetPressure,w,c
 10780  0000A8  6E31               	movwf	(??_BMP085GetPressure+4)& (0+255),c
 10781  0000AA  5196               	movf	(_X3+1)& (0+255),w,b
 10782  0000AC  202E               	addwfc	??_BMP085GetPressure+1,w,c
 10783  0000AE  6E32               	movwf	(??_BMP085GetPressure+5)& (0+255),c
 10784  0000B0  5197               	movf	(_X3+2)& (0+255),w,b
 10785  0000B2  202F               	addwfc	??_BMP085GetPressure+2,w,c
 10786  0000B4  6E33               	movwf	(??_BMP085GetPressure+6)& (0+255),c
 10787  0000B6  5198               	movf	(_X3+3)& (0+255),w,b
 10788  0000B8  2030               	addwfc	??_BMP085GetPressure+3,w,c
 10789  0000BA  6E34               	movwf	(??_BMP085GetPressure+7)& (0+255),c
 10790  0000BC  0E03               	movlw	3
 10791  0000BE                     u3695:
 10792  0000BE  90D8               	bcf	status,0,c
 10793  0000C0  3631               	rlcf	??_BMP085GetPressure+4,f,c
 10794  0000C2  3632               	rlcf	??_BMP085GetPressure+5,f,c
 10795  0000C4  3633               	rlcf	??_BMP085GetPressure+6,f,c
 10796  0000C6  3634               	rlcf	??_BMP085GetPressure+7,f,c
 10797  0000C8  2EE8               	decfsz	wreg,f,c
 10798  0000CA  D7F9               	goto	u3695
 10799  0000CC  0E02               	movlw	2
 10800  0000CE  2431               	addwf	??_BMP085GetPressure+4,w,c
 10801  0000D0  6E1B               	movwf	___aldiv@dividend,c
 10802  0000D2  0E00               	movlw	0
 10803  0000D4  2032               	addwfc	??_BMP085GetPressure+5,w,c
 10804  0000D6  6E1C               	movwf	___aldiv@dividend+1,c
 10805  0000D8  0E00               	movlw	0
 10806  0000DA  2033               	addwfc	??_BMP085GetPressure+6,w,c
 10807  0000DC  6E1D               	movwf	___aldiv@dividend+2,c
 10808  0000DE  0E00               	movlw	0
 10809  0000E0  2034               	addwfc	??_BMP085GetPressure+7,w,c
 10810  0000E2  6E1E               	movwf	___aldiv@dividend+3,c
 10811  0000E4  0E04               	movlw	4
 10812  0000E6  D9A9               	call	PL88	;call to abstracted procedure
 10813  0000E8  ECCF  F00B         	call	___aldiv	;wreg free
 10814  0000EC  C01B  F091         	movff	?___aldiv,_B3
 10815  0000F0  C01C  F092         	movff	?___aldiv+1,_B3+1
 10816  0000F4  C01D  F093         	movff	?___aldiv+2,_B3+2
 10817  0000F8  C01E  F094         	movff	?___aldiv+3,_B3+3
 10818                           
 10819                           ;bmp180.c: 267: X1 = ac3 * B6 / 8192;
 10820  0000FC  C0A7  F00F         	movff	_ac3,___lmul@multiplier
 10821  000100  C0A8  F010         	movff	_ac3+1,___lmul@multiplier+1
 10822  000104  D948               	call	PL54	;call to abstracted procedure
 10823  000106  D93E               	call	PL44	;call to abstracted procedure
 10824  000108  EC34  F010         	call	___lmul	;wreg free
 10825  00010C  D908               	call	PL12	;call to abstracted procedure
 10826  00010E  6A1F               	clrf	___aldiv@divisor,c
 10827  000110  0E20               	movlw	32
 10828  000112  D99E               	call	PL110	;call to abstracted procedure
 10829  000114  ECCF  F00B         	call	___aldiv	;wreg free
 10830  000118  D92C               	call	PL42	;call to abstracted procedure
 10831                           
 10832                           ;bmp180.c: 273: X2 = (b1*(B6*B6 / 4096)) / 65536;
 10833  00011A  D915               	call	PL40	;call to abstracted procedure
 10834  00011C  EC34  F010         	call	___lmul	;wreg free
 10835  000120  D8FE               	call	PL12	;call to abstracted procedure
 10836  000122  ECCF  F00B         	call	___aldiv	;wreg free
 10837  000126  D968               	call	PL72	;call to abstracted procedure
 10838                           
 10839                           ;bmp180.c: 273: X2 = (b1*(B6*B6 / 4096)) / 65536;
 10840  000128  C09F  F00F         	movff	_b1,___lmul@multiplier
 10841  00012C  C0A0  F010         	movff	_b1+1,___lmul@multiplier+1
 10842  000130  D932               	call	PL54	;call to abstracted procedure
 10843  000132  D959               	call	PL70	;call to abstracted procedure
 10844  000134  EC34  F010         	call	___lmul	;wreg free
 10845  000138  D8F2               	call	PL12	;call to abstracted procedure
 10846  00013A  D979               	call	PL78	;call to abstracted procedure
 10847  00013C  ECCF  F00B         	call	___aldiv	;wreg free
 10848                           
 10849                           ;bmp180.c: 278: X3 = ((X1 + X2)+2) / 4;
 10850  000140  D8F7               	call	PL34	;call to abstracted procedure
 10851  000142  D93D               	call	PL62	;call to abstracted procedure
 10852  000144  0E02               	movlw	2
 10853  000146  242D               	addwf	??_BMP085GetPressure,w,c
 10854  000148  6E1B               	movwf	___aldiv@dividend,c
 10855  00014A  0E00               	movlw	0
 10856  00014C  D967               	call	PL76	;call to abstracted procedure
 10857  00014E  0E04               	movlw	4
 10858  000150  D974               	call	PL88	;call to abstracted procedure
 10859  000152  ECCF  F00B         	call	___aldiv	;wreg free
 10860  000156  C01B  F095         	movff	?___aldiv,_X3
 10861  00015A  C01C  F096         	movff	?___aldiv+1,_X3+1
 10862  00015E  C01D  F097         	movff	?___aldiv+2,_X3+2
 10863  000162  C01E  F098         	movff	?___aldiv+3,_X3+3
 10864                           
 10865                           ;bmp180.c: 283: B4 = (ac4 * (uint32_t)(X3 + 32768)) / 32768;
 10866  000166  0E00               	movlw	0
 10867  000168  0100               	movlb	0	; () banked
 10868  00016A  2595               	addwf	_X3& (0+255),w,b
 10869  00016C  6E0F               	movwf	___lmul@multiplier,c
 10870  00016E  0E80               	movlw	128
 10871  000170  2196               	addwfc	(_X3+1)& (0+255),w,b
 10872  000172  6E10               	movwf	___lmul@multiplier+1,c
 10873  000174  0E00               	movlw	0
 10874  000176  2197               	addwfc	(_X3+2)& (0+255),w,b
 10875  000178  6E11               	movwf	___lmul@multiplier+2,c
 10876  00017A  0E00               	movlw	0
 10877  00017C  2198               	addwfc	(_X3+3)& (0+255),w,b
 10878  00017E  6E12               	movwf	___lmul@multiplier+3,c
 10879  000180  C0A5  F013         	movff	_ac4,___lmul@multiplicand
 10880  000184  C0A6  F014         	movff	_ac4+1,___lmul@multiplicand+1
 10881  000188  6A15               	clrf	___lmul@multiplicand+2,c
 10882  00018A  6A16               	clrf	___lmul@multiplicand+3,c
 10883  00018C  EC34  F010         	call	___lmul	;wreg free
 10884  000190  0E10               	movlw	16
 10885  000192  D005               	goto	u3700
 10886  000194                     u3705:
 10887  000194  90D8               	bcf	status,0,c
 10888  000196  3212               	rrcf	?___lmul+3,f,c
 10889  000198  3211               	rrcf	?___lmul+2,f,c
 10890  00019A  3210               	rrcf	?___lmul+1,f,c
 10891  00019C  320F               	rrcf	?___lmul,f,c
 10892  00019E                     u3700:
 10893  00019E  2EE8               	decfsz	wreg,f,c
 10894  0001A0  D7F9               	goto	u3705
 10895  0001A2  C00F  F08D         	movff	?___lmul,_B4
 10896  0001A6  C010  F08E         	movff	?___lmul+1,_B4+1
 10897  0001AA  C011  F08F         	movff	?___lmul+2,_B4+2
 10898  0001AE  C012  F090         	movff	?___lmul+3,_B4+3
 10899  0001B2  0100               	movlb	0	; () banked
 10900  0001B4  5191               	movf	_B3& (0+255),w,b
 10901  0001B6  5C29               	subwf	BMP085GetPressure@_pu,w,c
 10902  0001B8  6E0F               	movwf	___lmul@multiplier,c
 10903  0001BA  5192               	movf	(_B3+1)& (0+255),w,b
 10904  0001BC  582A               	subwfb	BMP085GetPressure@_pu+1,w,c
 10905  0001BE  6E10               	movwf	___lmul@multiplier+1,c
 10906  0001C0  5193               	movf	(_B3+2)& (0+255),w,b
 10907  0001C2  582B               	subwfb	BMP085GetPressure@_pu+2,w,c
 10908  0001C4  6E11               	movwf	___lmul@multiplier+2,c
 10909  0001C6  5194               	movf	(_B3+3)& (0+255),w,b
 10910  0001C8  582C               	subwfb	BMP085GetPressure@_pu+3,w,c
 10911  0001CA  6E12               	movwf	___lmul@multiplier+3,c
 10912  0001CC  0E6A               	movlw	106
 10913  0001CE  6E13               	movwf	___lmul@multiplicand,c
 10914  0001D0  0E18               	movlw	24
 10915  0001D2  D942               	call	PL160	;call to abstracted procedure
 10916  0001D4  EC34  F010         	call	___lmul	;wreg free
 10917  0001D8  C00F  F046         	movff	?___lmul,_B7
 10918  0001DC  C010  F047         	movff	?___lmul+1,_B7+1
 10919  0001E0  C011  F048         	movff	?___lmul+2,_B7+2
 10920  0001E4  C012  F049         	movff	?___lmul+3,_B7+3
 10921                           
 10922                           ;bmp180.c: 292: if (B7 < 0x80000000)
 10923  0001E8  0E80               	movlw	128
 10924  0001EA  5C49               	subwf	_B7+3,w,c
 10925  0001EC  E215               	bc	l5639
 10926                           
 10927                           ;bmp180.c: 293: Pp = (B7*2)/B4;
 10928  0001EE  90D8               	bcf	status,0,c
 10929  0001F0  3446               	rlcf	_B7,w,c
 10930  0001F2  6E0F               	movwf	___lldiv@dividend,c
 10931  0001F4  3447               	rlcf	_B7+1,w,c
 10932  0001F6  6E10               	movwf	___lldiv@dividend+1,c
 10933  0001F8  3448               	rlcf	_B7+2,w,c
 10934  0001FA  6E11               	movwf	___lldiv@dividend+2,c
 10935  0001FC  3449               	rlcf	_B7+3,w,c
 10936  0001FE  6E12               	movwf	___lldiv@dividend+3,c
 10937  000200  D904               	call	PL74	;call to abstracted procedure
 10938  000202  ECAB  F00E         	call	___lldiv	;wreg free
 10939  000206  C00F  F039         	movff	?___lldiv,BMP085GetPressure@Pp
 10940  00020A  C010  F03A         	movff	?___lldiv+1,BMP085GetPressure@Pp+1
 10941  00020E  C011  F03B         	movff	?___lldiv+2,BMP085GetPressure@Pp+2
 10942  000212  C012  F03C         	movff	?___lldiv+3,BMP085GetPressure@Pp+3
 10943  000216  D014               	goto	l1192
 10944  000218                     l5639:
 10945                           
 10946                           ;bmp180.c: 294: else
 10947                           ;bmp180.c: 295: Pp = (B7/B4)*2;
 10948  000218  C046  F00F         	movff	_B7,___lldiv@dividend
 10949  00021C  C047  F010         	movff	_B7+1,___lldiv@dividend+1
 10950  000220  C048  F011         	movff	_B7+2,___lldiv@dividend+2
 10951  000224  C049  F012         	movff	_B7+3,___lldiv@dividend+3
 10952  000228  D8F0               	call	PL74	;call to abstracted procedure
 10953  00022A  ECAB  F00E         	call	___lldiv	;wreg free
 10954  00022E  90D8               	bcf	status,0,c
 10955  000230  340F               	rlcf	?___lldiv,w,c
 10956  000232  6E39               	movwf	BMP085GetPressure@Pp,c
 10957  000234  3410               	rlcf	?___lldiv+1,w,c
 10958  000236  6E3A               	movwf	BMP085GetPressure@Pp+1,c
 10959  000238  3411               	rlcf	?___lldiv+2,w,c
 10960  00023A  6E3B               	movwf	BMP085GetPressure@Pp+2,c
 10961  00023C  3412               	rlcf	?___lldiv+3,w,c
 10962  00023E  6E3C               	movwf	BMP085GetPressure@Pp+3,c
 10963  000240                     l1192:
 10964                           
 10965                           ;bmp180.c: 300: X1 = (Pp/256)*(Pp/256);
 10966  000240  D8B0               	call	PL56	;call to abstracted procedure
 10967  000242  ECCF  F00B         	call	___aldiv	;wreg free
 10968  000246  C01B  F00F         	movff	?___aldiv,___lmul@multiplier
 10969  00024A  C01C  F010         	movff	?___aldiv+1,___lmul@multiplier+1
 10970  00024E  C01D  F011         	movff	?___aldiv+2,___lmul@multiplier+2
 10971  000252  C01E  F012         	movff	?___aldiv+3,___lmul@multiplier+3
 10972  000256  D8A5               	call	PL56	;call to abstracted procedure
 10973  000258  ECCF  F00B         	call	___aldiv	;wreg free
 10974  00025C  C01B  F013         	movff	?___aldiv,___lmul@multiplicand
 10975  000260  C01C  F014         	movff	?___aldiv+1,___lmul@multiplicand+1
 10976  000264  C01D  F015         	movff	?___aldiv+2,___lmul@multiplicand+2
 10977  000268  C01E  F016         	movff	?___aldiv+3,___lmul@multiplicand+3
 10978  00026C  EC34  F010         	call	___lmul	;wreg free
 10979  000270  C00F  F052         	movff	?___lmul,_X1
 10980  000274  C010  F053         	movff	?___lmul+1,_X1+1
 10981  000278  C011  F054         	movff	?___lmul+2,_X1+2
 10982  00027C  C012  F055         	movff	?___lmul+3,_X1+3
 10983                           
 10984                           ;bmp180.c: 304: X1 = (X1*3038)/65536;
 10985  000280  C052  F00F         	movff	_X1,___lmul@multiplier
 10986  000284  C053  F010         	movff	_X1+1,___lmul@multiplier+1
 10987  000288  C054  F011         	movff	_X1+2,___lmul@multiplier+2
 10988  00028C  C055  F012         	movff	_X1+3,___lmul@multiplier+3
 10989  000290  0EDE               	movlw	222
 10990  000292  6E13               	movwf	___lmul@multiplicand,c
 10991  000294  0E0B               	movlw	11
 10992  000296  D8E0               	call	PL160	;call to abstracted procedure
 10993  000298  EC34  F010         	call	___lmul	;wreg free
 10994  00029C  D840               	call	PL12	;call to abstracted procedure
 10995  00029E  D8C7               	call	PL78	;call to abstracted procedure
 10996  0002A0  ECCF  F00B         	call	___aldiv	;wreg free
 10997  0002A4  D866               	call	PL42	;call to abstracted procedure
 10998                           
 10999                           ;bmp180.c: 308: X2 = -7357 * Pp / 65536;
 11000  0002A6  D896               	call	PL68	;call to abstracted procedure
 11001  0002A8  0E43               	movlw	67
 11002  0002AA  6E13               	movwf	___lmul@multiplicand,c
 11003  0002AC  0EE3               	movlw	227
 11004  0002AE  6E14               	movwf	___lmul@multiplicand+1,c
 11005  0002B0  6815               	setf	___lmul@multiplicand+2,c
 11006  0002B2  6816               	setf	___lmul@multiplicand+3,c
 11007  0002B4  EC34  F010         	call	___lmul	;wreg free
 11008  0002B8  D832               	call	PL12	;call to abstracted procedure
 11009  0002BA  D8B9               	call	PL78	;call to abstracted procedure
 11010  0002BC  ECCF  F00B         	call	___aldiv	;wreg free
 11011                           
 11012                           ;bmp180.c: 312: Pp = Pp+((X1+X2+3791)/16);
 11013  0002C0  D837               	call	PL34	;call to abstracted procedure
 11014  0002C2  D87D               	call	PL62	;call to abstracted procedure
 11015  0002C4  0ECF               	movlw	207
 11016  0002C6  242D               	addwf	??_BMP085GetPressure,w,c
 11017  0002C8  6E1B               	movwf	___aldiv@dividend,c
 11018  0002CA  0E0E               	movlw	14
 11019  0002CC  D8A7               	call	PL76	;call to abstracted procedure
 11020  0002CE  0E10               	movlw	16
 11021  0002D0  D8B4               	call	PL88	;call to abstracted procedure
 11022  0002D2  ECCF  F00B         	call	___aldiv	;wreg free
 11023  0002D6  501B               	movf	?___aldiv,w,c
 11024  0002D8  2639               	addwf	BMP085GetPressure@Pp,f,c
 11025  0002DA  501C               	movf	?___aldiv+1,w,c
 11026  0002DC  223A               	addwfc	BMP085GetPressure@Pp+1,f,c
 11027  0002DE  501D               	movf	?___aldiv+2,w,c
 11028  0002E0  223B               	addwfc	BMP085GetPressure@Pp+2,f,c
 11029  0002E2  501E               	movf	?___aldiv+3,w,c
 11030  0002E4  223C               	addwfc	BMP085GetPressure@Pp+3,f,c
 11031                           
 11032                           ;bmp180.c: 317: Pp = Pp * 100/13332;
 11033  0002E6  D876               	call	PL68	;call to abstracted procedure
 11034  0002E8  0E64               	movlw	100
 11035  0002EA  6E13               	movwf	___lmul@multiplicand,c
 11036  0002EC  6A14               	clrf	___lmul@multiplicand+1,c
 11037  0002EE  6A15               	clrf	___lmul@multiplicand+2,c
 11038  0002F0  6A16               	clrf	___lmul@multiplicand+3,c
 11039  0002F2  EC34  F010         	call	___lmul	;wreg free
 11040  0002F6  D813               	call	PL12	;call to abstracted procedure
 11041  0002F8  0E14               	movlw	20
 11042  0002FA  6E1F               	movwf	___aldiv@divisor,c
 11043  0002FC  0E34               	movlw	52
 11044  0002FE  D8A8               	call	PL110	;call to abstracted procedure
 11045  000300  ECCF  F00B         	call	___aldiv	;wreg free
 11046  000304  C01B  F039         	movff	?___aldiv,BMP085GetPressure@Pp
 11047  000308  C01C  F03A         	movff	?___aldiv+1,BMP085GetPressure@Pp+1
 11048  00030C  C01D  F03B         	movff	?___aldiv+2,BMP085GetPressure@Pp+2
 11049  000310  C01E  F03C         	movff	?___aldiv+3,BMP085GetPressure@Pp+3
 11050                           
 11051                           ;bmp180.c: 323: return(Pp);
 11052  000314  C039  F029         	movff	BMP085GetPressure@Pp,?_BMP085GetPressure
 11053  000318  C03A  F02A         	movff	BMP085GetPressure@Pp+1,?_BMP085GetPressure+1
 11054  00031C  0012               	return		;funcret
 11055  00031E                     __end_of_BMP085GetPressure:
 11056                           	opt stack 0
 11057  00031E                     PL12:
 11058                           	opt stack 23
 11059  00031E  C00F  F01B         	movff	?___lmul,___aldiv@dividend
 11060  000322  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
 11061  000326  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
 11062  00032A  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
 11063  00032E  0012               	return	
 11064  000330                     __end_ofPL12:
 11065                           	opt stack 0
 11066  000330                     PL34:
 11067                           	opt stack 23
 11068  000330  C01B  F04E         	movff	?___aldiv,_X2
 11069  000334  C01C  F04F         	movff	?___aldiv+1,_X2+1
 11070  000338  C01D  F050         	movff	?___aldiv+2,_X2+2
 11071  00033C  C01E  F051         	movff	?___aldiv+3,_X2+3
 11072  000340  504E               	movf	_X2,w,c
 11073  000342  2452               	addwf	_X1,w,c
 11074  000344  0012               	return	
 11075  000346                     __end_ofPL34:
 11076                           	opt stack 0
 11077  000346                     PL40:
 11078                           	opt stack 23
 11079  000346  6A1F               	clrf	___aldiv@divisor,c
 11080  000348  0E10               	movlw	16
 11081  00034A  6E20               	movwf	___aldiv@divisor+1,c
 11082  00034C  6A21               	clrf	___aldiv@divisor+2,c
 11083  00034E  6A22               	clrf	___aldiv@divisor+3,c
 11084  000350  C04A  F00F         	movff	_B6,___lmul@multiplier
 11085  000354  C04B  F010         	movff	_B6+1,___lmul@multiplier+1
 11086  000358  C04C  F011         	movff	_B6+2,___lmul@multiplier+2
 11087  00035C  C04D  F012         	movff	_B6+3,___lmul@multiplier+3
 11088  000360  C04A  F013         	movff	_B6,___lmul@multiplicand
 11089  000364  C04B  F014         	movff	_B6+1,___lmul@multiplicand+1
 11090  000368  C04C  F015         	movff	_B6+2,___lmul@multiplicand+2
 11091  00036C  C04D  F016         	movff	_B6+3,___lmul@multiplicand+3
 11092  000370  0C10               	retlw	16
 11093  000372                     __end_ofPL40:
 11094                           	opt stack 0
 11095  000372                     PL42:
 11096                           	opt stack 23
 11097  000372  C01B  F052         	movff	?___aldiv,_X1
 11098  000376  C01C  F053         	movff	?___aldiv+1,_X1+1
 11099  00037A  C01D  F054         	movff	?___aldiv+2,_X1+2
 11100  00037E  C01E  F055         	movff	?___aldiv+3,_X1+3
 11101  000382  0012               	return	
 11102  000384                     __end_ofPL42:
 11103                           	opt stack 0
 11104  000384                     PL44:
 11105                           	opt stack 23
 11106  000384  C04A  F013         	movff	_B6,___lmul@multiplicand
 11107  000388  C04B  F014         	movff	_B6+1,___lmul@multiplicand+1
 11108  00038C  C04C  F015         	movff	_B6+2,___lmul@multiplicand+2
 11109  000390  C04D  F016         	movff	_B6+3,___lmul@multiplicand+3
 11110  000394  0012               	return	
 11111  000396                     __end_ofPL44:
 11112                           	opt stack 0
 11113  000396                     PL54:
 11114                           	opt stack 23
 11115  000396  0E00               	movlw	0
 11116  000398  BE10               	btfsc	___lmul@multiplier+1,7,c
 11117  00039A  0EFF               	movlw	-1
 11118  00039C  6E11               	movwf	___lmul@multiplier+2,c
 11119  00039E  6E12               	movwf	___lmul@multiplier+3,c
 11120  0003A0  0012               	return	
 11121  0003A2                     __end_ofPL54:
 11122                           	opt stack 0
 11123  0003A2                     PL56:
 11124                           	opt stack 23
 11125  0003A2  6A1F               	clrf	___aldiv@divisor,c
 11126  0003A4  0E01               	movlw	1
 11127  0003A6  6E20               	movwf	___aldiv@divisor+1,c
 11128  0003A8  6A21               	clrf	___aldiv@divisor+2,c
 11129  0003AA  6A22               	clrf	___aldiv@divisor+3,c
 11130  0003AC  C039  F01B         	movff	BMP085GetPressure@Pp,___aldiv@dividend
 11131  0003B0  C03A  F01C         	movff	BMP085GetPressure@Pp+1,___aldiv@dividend+1
 11132  0003B4  C03B  F01D         	movff	BMP085GetPressure@Pp+2,___aldiv@dividend+2
 11133  0003B8  C03C  F01E         	movff	BMP085GetPressure@Pp+3,___aldiv@dividend+3
 11134  0003BC  0C01               	retlw	1
 11135  0003BE                     __end_ofPL56:
 11136                           	opt stack 0
 11137  0003BE                     PL62:
 11138                           	opt stack 23
 11139  0003BE  6E2D               	movwf	??_BMP085GetPressure& (0+255),c
 11140  0003C0  504F               	movf	_X2+1,w,c
 11141  0003C2  2053               	addwfc	_X1+1,w,c
 11142  0003C4  6E2E               	movwf	(??_BMP085GetPressure+1)& (0+255),c
 11143  0003C6  5050               	movf	_X2+2,w,c
 11144  0003C8  2054               	addwfc	_X1+2,w,c
 11145  0003CA  6E2F               	movwf	(??_BMP085GetPressure+2)& (0+255),c
 11146  0003CC  5051               	movf	_X2+3,w,c
 11147  0003CE  2055               	addwfc	_X1+3,w,c
 11148  0003D0  6E30               	movwf	(??_BMP085GetPressure+3)& (0+255),c
 11149  0003D2  0012               	return	
 11150  0003D4                     __end_ofPL62:
 11151                           	opt stack 0
 11152  0003D4                     PL68:
 11153                           	opt stack 23
 11154  0003D4  C039  F00F         	movff	BMP085GetPressure@Pp,___lmul@multiplier
 11155  0003D8  C03A  F010         	movff	BMP085GetPressure@Pp+1,___lmul@multiplier+1
 11156  0003DC  C03B  F011         	movff	BMP085GetPressure@Pp+2,___lmul@multiplier+2
 11157  0003E0  C03C  F012         	movff	BMP085GetPressure@Pp+3,___lmul@multiplier+3
 11158  0003E4  0012               	return	
 11159  0003E6                     __end_ofPL68:
 11160                           	opt stack 0
 11161  0003E6                     PL70:
 11162                           	opt stack 23
 11163  0003E6  C035  F013         	movff	_BMP085GetPressure$2693,___lmul@multiplicand
 11164  0003EA  C036  F014         	movff	_BMP085GetPressure$2693+1,___lmul@multiplicand+1
 11165  0003EE  C037  F015         	movff	_BMP085GetPressure$2693+2,___lmul@multiplicand+2
 11166  0003F2  C038  F016         	movff	_BMP085GetPressure$2693+3,___lmul@multiplicand+3
 11167  0003F6  0012               	return	
 11168  0003F8                     __end_ofPL70:
 11169                           	opt stack 0
 11170  0003F8                     PL72:
 11171                           	opt stack 23
 11172  0003F8  C01B  F035         	movff	?___aldiv,_BMP085GetPressure$2693
 11173  0003FC  C01C  F036         	movff	?___aldiv+1,_BMP085GetPressure$2693+1
 11174  000400  C01D  F037         	movff	?___aldiv+2,_BMP085GetPressure$2693+2
 11175  000404  C01E  F038         	movff	?___aldiv+3,_BMP085GetPressure$2693+3
 11176  000408  0012               	return	
 11177  00040A                     __end_ofPL72:
 11178                           	opt stack 0
 11179  00040A                     PL74:
 11180                           	opt stack 23
 11181  00040A  C08D  F013         	movff	_B4,___lldiv@divisor
 11182  00040E  C08E  F014         	movff	_B4+1,___lldiv@divisor+1
 11183  000412  C08F  F015         	movff	_B4+2,___lldiv@divisor+2
 11184  000416  C090  F016         	movff	_B4+3,___lldiv@divisor+3
 11185  00041A  0012               	return	
 11186  00041C                     __end_ofPL74:
 11187                           	opt stack 0
 11188  00041C                     PL76:
 11189                           	opt stack 23
 11190  00041C  202E               	addwfc	??_BMP085GetPressure+1,w,c
 11191  00041E  6E1C               	movwf	___aldiv@dividend+1,c
 11192  000420  0E00               	movlw	0
 11193  000422  202F               	addwfc	??_BMP085GetPressure+2,w,c
 11194  000424  6E1D               	movwf	___aldiv@dividend+2,c
 11195  000426  0E00               	movlw	0
 11196  000428  2030               	addwfc	??_BMP085GetPressure+3,w,c
 11197  00042A  6E1E               	movwf	___aldiv@dividend+3,c
 11198  00042C  0012               	return	
 11199  00042E                     __end_ofPL76:
 11200                           	opt stack 0
 11201  00042E                     PL78:
 11202                           	opt stack 23
 11203  00042E  6A1F               	clrf	___aldiv@divisor,c
 11204  000430  6A20               	clrf	___aldiv@divisor+1,c
 11205  000432  0E01               	movlw	1
 11206  000434  6E21               	movwf	___aldiv@divisor+2,c
 11207  000436  6A22               	clrf	___aldiv@divisor+3,c
 11208  000438  0C01               	retlw	1
 11209  00043A                     __end_ofPL78:
 11210                           	opt stack 0
 11211  00043A                     PL88:
 11212                           	opt stack 23
 11213  00043A  6E1F               	movwf	___aldiv@divisor,c
 11214  00043C  6A20               	clrf	___aldiv@divisor+1,c
 11215  00043E  6A21               	clrf	___aldiv@divisor+2,c
 11216  000440  6A22               	clrf	___aldiv@divisor+3,c
 11217  000442  0012               	return	
 11218  000444                     __end_ofPL88:
 11219                           	opt stack 0
 11220  000444                     PL104:
 11221                           	opt stack 23
 11222  000444  6A1F               	clrf	___aldiv@divisor,c
 11223  000446  0E08               	movlw	8
 11224  000448  6E20               	movwf	___aldiv@divisor+1,c
 11225  00044A  6A21               	clrf	___aldiv@divisor+2,c
 11226  00044C  6A22               	clrf	___aldiv@divisor+3,c
 11227  00044E  0C08               	retlw	8
 11228  000450                     __end_ofPL104:
 11229                           	opt stack 0
 11230  000450                     PL110:
 11231                           	opt stack 23
 11232  000450  6E20               	movwf	___aldiv@divisor+1,c
 11233  000452  6A21               	clrf	___aldiv@divisor+2,c
 11234  000454  6A22               	clrf	___aldiv@divisor+3,c
 11235  000456  0012               	return	
 11236  000458                     __end_ofPL110:
 11237                           	opt stack 0
 11238  000458                     PL160:
 11239                           	opt stack 23
 11240  000458  6E14               	movwf	___lmul@multiplicand+1,c
 11241  00045A  6A15               	clrf	___lmul@multiplicand+2,c
 11242  00045C  6A16               	clrf	___lmul@multiplicand+3,c
 11243  00045E  0012               	return	
 11244  000460                     __end_ofPL160:
 11245                           	opt stack 0
 11246                           tosu	equ	0xFFF
 11247                           tosh	equ	0xFFE
 11248                           tosl	equ	0xFFD
 11249                           pclath	equ	0xFFA
 11250                           tblptru	equ	0xFF8
 11251                           tblptrh	equ	0xFF7
 11252                           tblptrl	equ	0xFF6
 11253                           tablat	equ	0xFF5
 11254                           prodh	equ	0xFF4
 11255                           prodl	equ	0xFF3
 11256                           intcon	equ	0xFF2
 11257                           intcon2	equ	0xFF1
 11258                           postinc0	equ	0xFEE
 11259                           wreg	equ	0xFE8
 11260                           indf1	equ	0xFE7
 11261                           plusw1	equ	0xFE3
 11262                           fsr1h	equ	0xFE2
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           postdec2	equ	0xFDD
 11267                           plusw2	equ	0xFDB
 11268                           fsr2h	equ	0xFDA
 11269                           fsr2l	equ	0xFD9
 11270                           status	equ	0xFD8
 11271                           
 11272 ;; *************** function ___lmul *****************
 11273 ;; Defined at:
 11274 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;  multiplier      4   14[COMRAM] unsigned long 
 11277 ;;  multiplicand    4   18[COMRAM] unsigned long 
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;  product         4   22[COMRAM] unsigned long 
 11280 ;; Return value:  Size  Location     Type
 11281 ;;                  4   14[COMRAM] unsigned long 
 11282 ;; Registers used:
 11283 ;;		wreg, status,2, status,0
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11289 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;Total ram usage:       12 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; Hardware stack levels required when called:    3
 11296 ;; This function calls:
 11297 ;;		Nothing
 11298 ;; This function is called by:
 11299 ;;		_BMP085GetTemp
 11300 ;;		_BMP085GetPressure
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           	psect	text48
 11305  002068                     __ptext48:
 11306                           	opt stack 0
 11307  002068                     ___lmul:
 11308                           	opt stack 23
 11309                           
 11310                           ;incstack = 0
 11311  002068  6A17               	clrf	___lmul@product,c
 11312  00206A  6A18               	clrf	___lmul@product+1,c
 11313  00206C  6A19               	clrf	___lmul@product+2,c
 11314  00206E  6A1A               	clrf	___lmul@product+3,c
 11315  002070                     l1285:
 11316  002070  A00F               	btfss	___lmul@multiplier,0,c
 11317  002072  D008               	goto	l5335
 11318  002074  5013               	movf	___lmul@multiplicand,w,c
 11319  002076  2617               	addwf	___lmul@product,f,c
 11320  002078  5014               	movf	___lmul@multiplicand+1,w,c
 11321  00207A  2218               	addwfc	___lmul@product+1,f,c
 11322  00207C  5015               	movf	___lmul@multiplicand+2,w,c
 11323  00207E  2219               	addwfc	___lmul@product+2,f,c
 11324  002080  5016               	movf	___lmul@multiplicand+3,w,c
 11325  002082  221A               	addwfc	___lmul@product+3,f,c
 11326  002084                     l5335:
 11327  002084  90D8               	bcf	status,0,c
 11328  002086  3613               	rlcf	___lmul@multiplicand,f,c
 11329  002088  3614               	rlcf	___lmul@multiplicand+1,f,c
 11330  00208A  3615               	rlcf	___lmul@multiplicand+2,f,c
 11331  00208C  3616               	rlcf	___lmul@multiplicand+3,f,c
 11332  00208E  90D8               	bcf	status,0,c
 11333  002090  3212               	rrcf	___lmul@multiplier+3,f,c
 11334  002092  3211               	rrcf	___lmul@multiplier+2,f,c
 11335  002094  3210               	rrcf	___lmul@multiplier+1,f,c
 11336  002096  320F               	rrcf	___lmul@multiplier,f,c
 11337  002098  500F               	movf	___lmul@multiplier,w,c
 11338  00209A  1010               	iorwf	___lmul@multiplier+1,w,c
 11339  00209C  1011               	iorwf	___lmul@multiplier+2,w,c
 11340  00209E  1012               	iorwf	___lmul@multiplier+3,w,c
 11341  0020A0  E1E7               	bnz	l1285
 11342  0020A2  C017  F00F         	movff	___lmul@product,?___lmul
 11343  0020A6  C018  F010         	movff	___lmul@product+1,?___lmul+1
 11344  0020AA  C019  F011         	movff	___lmul@product+2,?___lmul+2
 11345  0020AE  C01A  F012         	movff	___lmul@product+3,?___lmul+3
 11346  0020B2  0012               	return		;funcret
 11347  0020B4                     __end_of___lmul:
 11348                           	opt stack 0
 11349                           tosu	equ	0xFFF
 11350                           tosh	equ	0xFFE
 11351                           tosl	equ	0xFFD
 11352                           pclath	equ	0xFFA
 11353                           tblptru	equ	0xFF8
 11354                           tblptrh	equ	0xFF7
 11355                           tblptrl	equ	0xFF6
 11356                           tablat	equ	0xFF5
 11357                           prodh	equ	0xFF4
 11358                           prodl	equ	0xFF3
 11359                           intcon	equ	0xFF2
 11360                           intcon2	equ	0xFF1
 11361                           postinc0	equ	0xFEE
 11362                           wreg	equ	0xFE8
 11363                           indf1	equ	0xFE7
 11364                           plusw1	equ	0xFE3
 11365                           fsr1h	equ	0xFE2
 11366                           fsr1l	equ	0xFE1
 11367                           indf2	equ	0xFDF
 11368                           postinc2	equ	0xFDE
 11369                           postdec2	equ	0xFDD
 11370                           plusw2	equ	0xFDB
 11371                           fsr2h	equ	0xFDA
 11372                           fsr2l	equ	0xFD9
 11373                           status	equ	0xFD8
 11374                           
 11375 ;; *************** function ___lldiv *****************
 11376 ;; Defined at:
 11377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 11378 ;; Parameters:    Size  Location     Type
 11379 ;;  dividend        4   14[COMRAM] unsigned long 
 11380 ;;  divisor         4   18[COMRAM] unsigned long 
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;  quotient        4   22[COMRAM] unsigned long 
 11383 ;;  counter         1   26[COMRAM] unsigned char 
 11384 ;; Return value:  Size  Location     Type
 11385 ;;                  4   14[COMRAM] unsigned long 
 11386 ;; Registers used:
 11387 ;;		wreg, status,2, status,0
 11388 ;; Tracked objects:
 11389 ;;		On entry : 0/0
 11390 ;;		On exit  : 0/0
 11391 ;;		Unchanged: 0/0
 11392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11393 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;Total ram usage:       13 bytes
 11398 ;; Hardware stack levels used:    1
 11399 ;; Hardware stack levels required when called:    3
 11400 ;; This function calls:
 11401 ;;		Nothing
 11402 ;; This function is called by:
 11403 ;;		_BMP085GetPressure
 11404 ;; This function uses a non-reentrant model
 11405 ;;
 11406                           
 11407                           	psect	text49
 11408  001D56                     __ptext49:
 11409                           	opt stack 0
 11410  001D56                     ___lldiv:
 11411                           	opt stack 23
 11412                           
 11413                           ;incstack = 0
 11414  001D56  6A17               	clrf	___lldiv@quotient,c
 11415  001D58  6A18               	clrf	___lldiv@quotient+1,c
 11416  001D5A  6A19               	clrf	___lldiv@quotient+2,c
 11417  001D5C  6A1A               	clrf	___lldiv@quotient+3,c
 11418  001D5E  5013               	movf	___lldiv@divisor,w,c
 11419  001D60  1014               	iorwf	___lldiv@divisor+1,w,c
 11420  001D62  1015               	iorwf	___lldiv@divisor+2,w,c
 11421  001D64  1016               	iorwf	___lldiv@divisor+3,w,c
 11422  001D66  E029               	bz	l1623
 11423  001D68  0E01               	movlw	1
 11424  001D6A  6E1B               	movwf	___lldiv@counter,c
 11425  001D6C  D006               	goto	l5435
 11426  001D6E                     l5433:
 11427  001D6E  90D8               	bcf	status,0,c
 11428  001D70  3613               	rlcf	___lldiv@divisor,f,c
 11429  001D72  3614               	rlcf	___lldiv@divisor+1,f,c
 11430  001D74  3615               	rlcf	___lldiv@divisor+2,f,c
 11431  001D76  3616               	rlcf	___lldiv@divisor+3,f,c
 11432  001D78  2A1B               	incf	___lldiv@counter,f,c
 11433  001D7A                     l5435:
 11434  001D7A  AE16               	btfss	___lldiv@divisor+3,7,c
 11435  001D7C  D7F8               	goto	l5433
 11436  001D7E                     l5437:
 11437  001D7E  90D8               	bcf	status,0,c
 11438  001D80  3617               	rlcf	___lldiv@quotient,f,c
 11439  001D82  3618               	rlcf	___lldiv@quotient+1,f,c
 11440  001D84  3619               	rlcf	___lldiv@quotient+2,f,c
 11441  001D86  361A               	rlcf	___lldiv@quotient+3,f,c
 11442  001D88  5013               	movf	___lldiv@divisor,w,c
 11443  001D8A  5C0F               	subwf	___lldiv@dividend,w,c
 11444  001D8C  5014               	movf	___lldiv@divisor+1,w,c
 11445  001D8E  5810               	subwfb	___lldiv@dividend+1,w,c
 11446  001D90  5015               	movf	___lldiv@divisor+2,w,c
 11447  001D92  5811               	subwfb	___lldiv@dividend+2,w,c
 11448  001D94  5016               	movf	___lldiv@divisor+3,w,c
 11449  001D96  5812               	subwfb	___lldiv@dividend+3,w,c
 11450  001D98  E309               	bnc	l5445
 11451  001D9A  5013               	movf	___lldiv@divisor,w,c
 11452  001D9C  5E0F               	subwf	___lldiv@dividend,f,c
 11453  001D9E  5014               	movf	___lldiv@divisor+1,w,c
 11454  001DA0  5A10               	subwfb	___lldiv@dividend+1,f,c
 11455  001DA2  5015               	movf	___lldiv@divisor+2,w,c
 11456  001DA4  5A11               	subwfb	___lldiv@dividend+2,f,c
 11457  001DA6  5016               	movf	___lldiv@divisor+3,w,c
 11458  001DA8  5A12               	subwfb	___lldiv@dividend+3,f,c
 11459  001DAA  8017               	bsf	___lldiv@quotient,0,c
 11460  001DAC                     l5445:
 11461  001DAC  90D8               	bcf	status,0,c
 11462  001DAE  3216               	rrcf	___lldiv@divisor+3,f,c
 11463  001DB0  3215               	rrcf	___lldiv@divisor+2,f,c
 11464  001DB2  3214               	rrcf	___lldiv@divisor+1,f,c
 11465  001DB4  3213               	rrcf	___lldiv@divisor,f,c
 11466  001DB6  2E1B               	decfsz	___lldiv@counter,f,c
 11467  001DB8  D7E2               	goto	l5437
 11468  001DBA                     l1623:
 11469  001DBA  C017  F00F         	movff	___lldiv@quotient,?___lldiv
 11470  001DBE  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
 11471  001DC2  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
 11472  001DC6  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
 11473  001DCA  0012               	return		;funcret
 11474  001DCC                     __end_of___lldiv:
 11475                           	opt stack 0
 11476                           tosu	equ	0xFFF
 11477                           tosh	equ	0xFFE
 11478                           tosl	equ	0xFFD
 11479                           pclath	equ	0xFFA
 11480                           tblptru	equ	0xFF8
 11481                           tblptrh	equ	0xFF7
 11482                           tblptrl	equ	0xFF6
 11483                           tablat	equ	0xFF5
 11484                           prodh	equ	0xFF4
 11485                           prodl	equ	0xFF3
 11486                           intcon	equ	0xFF2
 11487                           intcon2	equ	0xFF1
 11488                           postinc0	equ	0xFEE
 11489                           wreg	equ	0xFE8
 11490                           indf1	equ	0xFE7
 11491                           plusw1	equ	0xFE3
 11492                           fsr1h	equ	0xFE2
 11493                           fsr1l	equ	0xFE1
 11494                           indf2	equ	0xFDF
 11495                           postinc2	equ	0xFDE
 11496                           postdec2	equ	0xFDD
 11497                           plusw2	equ	0xFDB
 11498                           fsr2h	equ	0xFDA
 11499                           fsr2l	equ	0xFD9
 11500                           status	equ	0xFD8
 11501                           
 11502 ;; *************** function ___aldiv *****************
 11503 ;; Defined at:
 11504 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
 11505 ;; Parameters:    Size  Location     Type
 11506 ;;  dividend        4   26[COMRAM] long 
 11507 ;;  divisor         4   30[COMRAM] long 
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;  quotient        4   36[COMRAM] long 
 11510 ;;  sign            1   35[COMRAM] unsigned char 
 11511 ;;  counter         1   34[COMRAM] unsigned char 
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  4   26[COMRAM] long 
 11514 ;; Registers used:
 11515 ;;		wreg, status,2, status,0
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11521 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11522 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11524 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11525 ;;Total ram usage:       14 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; Hardware stack levels required when called:    3
 11528 ;; This function calls:
 11529 ;;		Nothing
 11530 ;; This function is called by:
 11531 ;;		_BMP085GetTemp
 11532 ;;		_BMP085GetPressure
 11533 ;; This function uses a non-reentrant model
 11534 ;;
 11535                           
 11536                           	psect	text50
 11537  00179E                     __ptext50:
 11538                           	opt stack 0
 11539  00179E                     ___aldiv:
 11540                           	opt stack 23
 11541                           
 11542                           ;incstack = 0
 11543  00179E  6A24               	clrf	___aldiv@sign,c
 11544  0017A0  AE22               	btfss	___aldiv@divisor+3,7,c
 11545  0017A2  D00A               	goto	l5347
 11546  0017A4  1E22               	comf	___aldiv@divisor+3,f,c
 11547  0017A6  1E21               	comf	___aldiv@divisor+2,f,c
 11548  0017A8  1E20               	comf	___aldiv@divisor+1,f,c
 11549  0017AA  6C1F               	negf	___aldiv@divisor,c
 11550  0017AC  0E00               	movlw	0
 11551  0017AE  2220               	addwfc	___aldiv@divisor+1,f,c
 11552  0017B0  2221               	addwfc	___aldiv@divisor+2,f,c
 11553  0017B2  2222               	addwfc	___aldiv@divisor+3,f,c
 11554  0017B4  0E01               	movlw	1
 11555  0017B6  6E24               	movwf	___aldiv@sign,c
 11556  0017B8                     l5347:
 11557  0017B8  AE1E               	btfss	___aldiv@dividend+3,7,c
 11558  0017BA  D00A               	goto	l5353
 11559  0017BC  1E1E               	comf	___aldiv@dividend+3,f,c
 11560  0017BE  1E1D               	comf	___aldiv@dividend+2,f,c
 11561  0017C0  1E1C               	comf	___aldiv@dividend+1,f,c
 11562  0017C2  6C1B               	negf	___aldiv@dividend,c
 11563  0017C4  0E00               	movlw	0
 11564  0017C6  221C               	addwfc	___aldiv@dividend+1,f,c
 11565  0017C8  221D               	addwfc	___aldiv@dividend+2,f,c
 11566  0017CA  221E               	addwfc	___aldiv@dividend+3,f,c
 11567  0017CC  0E01               	movlw	1
 11568  0017CE  1A24               	xorwf	___aldiv@sign,f,c
 11569  0017D0                     l5353:
 11570  0017D0  6A25               	clrf	___aldiv@quotient,c
 11571  0017D2  6A26               	clrf	___aldiv@quotient+1,c
 11572  0017D4  6A27               	clrf	___aldiv@quotient+2,c
 11573  0017D6  6A28               	clrf	___aldiv@quotient+3,c
 11574  0017D8  501F               	movf	___aldiv@divisor,w,c
 11575  0017DA  1020               	iorwf	___aldiv@divisor+1,w,c
 11576  0017DC  1021               	iorwf	___aldiv@divisor+2,w,c
 11577  0017DE  1022               	iorwf	___aldiv@divisor+3,w,c
 11578  0017E0  E029               	bz	l5375
 11579  0017E2  0E01               	movlw	1
 11580  0017E4  6E23               	movwf	___aldiv@counter,c
 11581  0017E6  D006               	goto	l5361
 11582  0017E8                     l5359:
 11583  0017E8  90D8               	bcf	status,0,c
 11584  0017EA  361F               	rlcf	___aldiv@divisor,f,c
 11585  0017EC  3620               	rlcf	___aldiv@divisor+1,f,c
 11586  0017EE  3621               	rlcf	___aldiv@divisor+2,f,c
 11587  0017F0  3622               	rlcf	___aldiv@divisor+3,f,c
 11588  0017F2  2A23               	incf	___aldiv@counter,f,c
 11589  0017F4                     l5361:
 11590  0017F4  AE22               	btfss	___aldiv@divisor+3,7,c
 11591  0017F6  D7F8               	goto	l5359
 11592  0017F8                     l5363:
 11593  0017F8  90D8               	bcf	status,0,c
 11594  0017FA  3625               	rlcf	___aldiv@quotient,f,c
 11595  0017FC  3626               	rlcf	___aldiv@quotient+1,f,c
 11596  0017FE  3627               	rlcf	___aldiv@quotient+2,f,c
 11597  001800  3628               	rlcf	___aldiv@quotient+3,f,c
 11598  001802  501F               	movf	___aldiv@divisor,w,c
 11599  001804  5C1B               	subwf	___aldiv@dividend,w,c
 11600  001806  5020               	movf	___aldiv@divisor+1,w,c
 11601  001808  581C               	subwfb	___aldiv@dividend+1,w,c
 11602  00180A  5021               	movf	___aldiv@divisor+2,w,c
 11603  00180C  581D               	subwfb	___aldiv@dividend+2,w,c
 11604  00180E  5022               	movf	___aldiv@divisor+3,w,c
 11605  001810  581E               	subwfb	___aldiv@dividend+3,w,c
 11606  001812  E309               	bnc	l5371
 11607  001814  501F               	movf	___aldiv@divisor,w,c
 11608  001816  5E1B               	subwf	___aldiv@dividend,f,c
 11609  001818  5020               	movf	___aldiv@divisor+1,w,c
 11610  00181A  5A1C               	subwfb	___aldiv@dividend+1,f,c
 11611  00181C  5021               	movf	___aldiv@divisor+2,w,c
 11612  00181E  5A1D               	subwfb	___aldiv@dividend+2,f,c
 11613  001820  5022               	movf	___aldiv@divisor+3,w,c
 11614  001822  5A1E               	subwfb	___aldiv@dividend+3,f,c
 11615  001824  8025               	bsf	___aldiv@quotient,0,c
 11616  001826                     l5371:
 11617  001826  90D8               	bcf	status,0,c
 11618  001828  3222               	rrcf	___aldiv@divisor+3,f,c
 11619  00182A  3221               	rrcf	___aldiv@divisor+2,f,c
 11620  00182C  3220               	rrcf	___aldiv@divisor+1,f,c
 11621  00182E  321F               	rrcf	___aldiv@divisor,f,c
 11622  001830  2E23               	decfsz	___aldiv@counter,f,c
 11623  001832  D7E2               	goto	l5363
 11624  001834                     l5375:
 11625  001834  5024               	movf	___aldiv@sign,w,c
 11626  001836  E008               	bz	l5379
 11627  001838  1E28               	comf	___aldiv@quotient+3,f,c
 11628  00183A  1E27               	comf	___aldiv@quotient+2,f,c
 11629  00183C  1E26               	comf	___aldiv@quotient+1,f,c
 11630  00183E  6C25               	negf	___aldiv@quotient,c
 11631  001840  0E00               	movlw	0
 11632  001842  2226               	addwfc	___aldiv@quotient+1,f,c
 11633  001844  2227               	addwfc	___aldiv@quotient+2,f,c
 11634  001846  2228               	addwfc	___aldiv@quotient+3,f,c
 11635  001848                     l5379:
 11636  001848  C025  F01B         	movff	___aldiv@quotient,?___aldiv
 11637  00184C  C026  F01C         	movff	___aldiv@quotient+1,?___aldiv+1
 11638  001850  C027  F01D         	movff	___aldiv@quotient+2,?___aldiv+2
 11639  001854  C028  F01E         	movff	___aldiv@quotient+3,?___aldiv+3
 11640  001858  0012               	return		;funcret
 11641  00185A                     __end_of___aldiv:
 11642                           	opt stack 0
 11643                           tosu	equ	0xFFF
 11644                           tosh	equ	0xFFE
 11645                           tosl	equ	0xFFD
 11646                           pclath	equ	0xFFA
 11647                           tblptru	equ	0xFF8
 11648                           tblptrh	equ	0xFF7
 11649                           tblptrl	equ	0xFF6
 11650                           tablat	equ	0xFF5
 11651                           prodh	equ	0xFF4
 11652                           prodl	equ	0xFF3
 11653                           intcon	equ	0xFF2
 11654                           intcon2	equ	0xFF1
 11655                           postinc0	equ	0xFEE
 11656                           wreg	equ	0xFE8
 11657                           indf1	equ	0xFE7
 11658                           plusw1	equ	0xFE3
 11659                           fsr1h	equ	0xFE2
 11660                           fsr1l	equ	0xFE1
 11661                           indf2	equ	0xFDF
 11662                           postinc2	equ	0xFDE
 11663                           postdec2	equ	0xFDD
 11664                           plusw2	equ	0xFDB
 11665                           fsr2h	equ	0xFDA
 11666                           fsr2l	equ	0xFD9
 11667                           status	equ	0xFD8
 11668                           
 11669 ;; *************** function _write_eep *****************
 11670 ;; Defined at:
 11671 ;;		line 5 in file "eeprom.c"
 11672 ;; Parameters:    Size  Location     Type
 11673 ;;  address         1    wreg     unsigned char 
 11674 ;;  data            1   14[COMRAM] unsigned char 
 11675 ;; Auto vars:     Size  Location     Type
 11676 ;;  address         1   15[COMRAM] unsigned char 
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      void 
 11679 ;; Registers used:
 11680 ;;		wreg, status,2
 11681 ;; Tracked objects:
 11682 ;;		On entry : 0/0
 11683 ;;		On exit  : 0/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11686 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11689 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;Total ram usage:        2 bytes
 11691 ;; Hardware stack levels used:    1
 11692 ;; Hardware stack levels required when called:    3
 11693 ;; This function calls:
 11694 ;;		Nothing
 11695 ;; This function is called by:
 11696 ;;		_set_font_set
 11697 ;; This function uses a non-reentrant model
 11698 ;;
 11699                           
 11700                           	psect	text51
 11701  0025B0                     __ptext51:
 11702                           	opt stack 0
 11703  0025B0                     _write_eep:
 11704                           	opt stack 25
 11705                           
 11706                           ;incstack = 0
 11707                           ;write_eep@address stored from wreg
 11708  0025B0  6E10               	movwf	write_eep@address,c
 11709  0025B2                     l1239:
 11710  0025B2  B2A6               	btfsc	4006,1,c	;volatile
 11711  0025B4  D7FE               	goto	l1239
 11712                           
 11713                           ;eeprom.c: 11: EEADR = address;
 11714  0025B6  C010  FFA9         	movff	write_eep@address,4009	;volatile
 11715                           
 11716                           ;eeprom.c: 12: EEDATA = data;
 11717  0025BA  C00F  FFA8         	movff	write_eep@data,4008	;volatile
 11718                           
 11719                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
 11720  0025BE  9EA6               	bcf	4006,7,c	;volatile
 11721                           
 11722                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
 11723  0025C0  9CA6               	bcf	4006,6,c	;volatile
 11724                           
 11725                           ;eeprom.c: 15: EECON1bits.WREN = 1;
 11726  0025C2  84A6               	bsf	4006,2,c	;volatile
 11727                           
 11728                           ;eeprom.c: 16: INTCONbits.GIE = 0;
 11729  0025C4  9EF2               	bcf	intcon,7,c	;volatile
 11730                           
 11731                           ;eeprom.c: 18: EECON2 = 0x55;
 11732  0025C6  0E55               	movlw	85
 11733  0025C8  6EA7               	movwf	4007,c	;volatile
 11734                           
 11735                           ;eeprom.c: 19: EECON2 = 0xAA;
 11736  0025CA  0EAA               	movlw	170
 11737  0025CC  6EA7               	movwf	4007,c	;volatile
 11738                           
 11739                           ;eeprom.c: 20: EECON1bits.WR = 1;
 11740  0025CE  82A6               	bsf	4006,1,c	;volatile
 11741                           
 11742                           ;eeprom.c: 22: INTCONbits.GIE = 1;
 11743  0025D0  8EF2               	bsf	intcon,7,c	;volatile
 11744  0025D2  0CAA               	retlw	170	;funcret
 11745  0025D4                     __end_of_write_eep:
 11746                           	opt stack 0
 11747                           tosu	equ	0xFFF
 11748                           tosh	equ	0xFFE
 11749                           tosl	equ	0xFFD
 11750                           pclath	equ	0xFFA
 11751                           tblptru	equ	0xFF8
 11752                           tblptrh	equ	0xFF7
 11753                           tblptrl	equ	0xFF6
 11754                           tablat	equ	0xFF5
 11755                           prodh	equ	0xFF4
 11756                           prodl	equ	0xFF3
 11757                           intcon	equ	0xFF2
 11758                           intcon2	equ	0xFF1
 11759                           postinc0	equ	0xFEE
 11760                           wreg	equ	0xFE8
 11761                           indf1	equ	0xFE7
 11762                           plusw1	equ	0xFE3
 11763                           fsr1h	equ	0xFE2
 11764                           fsr1l	equ	0xFE1
 11765                           indf2	equ	0xFDF
 11766                           postinc2	equ	0xFDE
 11767                           postdec2	equ	0xFDD
 11768                           plusw2	equ	0xFDB
 11769                           fsr2h	equ	0xFDA
 11770                           fsr2l	equ	0xFD9
 11771                           status	equ	0xFD8
 11772                           
 11773 ;; *************** function _set_font *****************
 11774 ;; Defined at:
 11775 ;;		line 534 in file "common.c"
 11776 ;; Parameters:    Size  Location     Type
 11777 ;;		None
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;		None
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  1    wreg      void 
 11782 ;; Registers used:
 11783 ;;		wreg, status,2, status,0
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : 0/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11793 ;;Total ram usage:        0 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:    3
 11796 ;; This function calls:
 11797 ;;		Nothing
 11798 ;; This function is called by:
 11799 ;;		_SYSTEM_Initialize
 11800 ;;		_set_font_set
 11801 ;; This function uses a non-reentrant model
 11802 ;;
 11803                           
 11804                           	psect	text52
 11805  0020B4                     __ptext52:
 11806                           	opt stack 0
 11807  0020B4                     _set_font:
 11808                           	opt stack 26
 11809                           
 11810                           ;common.c: 536: switch (type_font)
 11811                           
 11812                           ;incstack = 0
 11813  0020B4  D019               	goto	l5737
 11814  0020B6                     l5725:
 11815                           
 11816                           ;common.c: 539: pFont = &dFont1;
 11817  0020B6  0E8A               	movlw	low _dFont1
 11818  0020B8  6E6D               	movwf	_pFont,c
 11819  0020BA  0EBF               	movlw	high _dFont1
 11820  0020BC  6E6E               	movwf	_pFont+1,c
 11821                           
 11822                           ;common.c: 540: break;
 11823  0020BE  0012               	return	
 11824  0020C0                     l5727:
 11825                           
 11826                           ;common.c: 542: pFont = &dFont2;
 11827  0020C0  0E58               	movlw	low _dFont2
 11828  0020C2  6E6D               	movwf	_pFont,c
 11829  0020C4  0EBF               	movlw	high _dFont2
 11830  0020C6  6E6E               	movwf	_pFont+1,c
 11831                           
 11832                           ;common.c: 543: break;
 11833  0020C8  0012               	return	
 11834  0020CA                     l5729:
 11835                           
 11836                           ;common.c: 545: pFont = &dFont3;
 11837  0020CA  0E26               	movlw	low _dFont3
 11838  0020CC  6E6D               	movwf	_pFont,c
 11839  0020CE  0EBF               	movlw	high _dFont3
 11840  0020D0  6E6E               	movwf	_pFont+1,c
 11841                           
 11842                           ;common.c: 546: break;
 11843  0020D2  0012               	return	
 11844  0020D4                     l5731:
 11845                           
 11846                           ;common.c: 548: pFont = &dFont4;
 11847  0020D4  0EF4               	movlw	low _dFont4
 11848  0020D6  6E6D               	movwf	_pFont,c
 11849  0020D8  0EBE               	movlw	high _dFont4
 11850  0020DA  6E6E               	movwf	_pFont+1,c
 11851                           
 11852                           ;common.c: 549: break;
 11853  0020DC  0012               	return	
 11854  0020DE                     l5733:
 11855                           
 11856                           ;common.c: 551: pFont = &dFont5;
 11857  0020DE  0EC2               	movlw	low _dFont5
 11858  0020E0  6E6D               	movwf	_pFont,c
 11859  0020E2  0EBE               	movlw	high _dFont5
 11860  0020E4  6E6E               	movwf	_pFont+1,c
 11861                           
 11862                           ;common.c: 552: break;
 11863  0020E6  0012               	return	
 11864  0020E8                     l5737:
 11865  0020E8  5061               	movf	_type_font,w,c
 11866                           
 11867                           ; Switch size 1, requested type "space"
 11868                           ; Number of cases is 5, Range of values is 1 to 5
 11869                           ; switch strategies available:
 11870                           ; Name         Instructions Cycles
 11871                           ; simple_byte           16     9 (average)
 11872                           ;	Chosen strategy is simple_byte
 11873  0020EA  0A01               	xorlw	1	; case 1
 11874  0020EC  E0E4               	bz	l5725
 11875  0020EE  0A03               	xorlw	3	; case 2
 11876  0020F0  E0E7               	bz	l5727
 11877  0020F2  0A01               	xorlw	1	; case 3
 11878  0020F4  E0EA               	bz	l5729
 11879  0020F6  0A07               	xorlw	7	; case 4
 11880  0020F8  E0ED               	bz	l5731
 11881  0020FA  0A01               	xorlw	1	; case 5
 11882  0020FC  E0F0               	bz	l5733
 11883  0020FE  0012               	return		;funcret
 11884  002100                     __end_of_set_font:
 11885                           	opt stack 0
 11886                           tosu	equ	0xFFF
 11887                           tosh	equ	0xFFE
 11888                           tosl	equ	0xFFD
 11889                           pclath	equ	0xFFA
 11890                           tblptru	equ	0xFF8
 11891                           tblptrh	equ	0xFF7
 11892                           tblptrl	equ	0xFF6
 11893                           tablat	equ	0xFF5
 11894                           prodh	equ	0xFF4
 11895                           prodl	equ	0xFF3
 11896                           intcon	equ	0xFF2
 11897                           intcon2	equ	0xFF1
 11898                           postinc0	equ	0xFEE
 11899                           wreg	equ	0xFE8
 11900                           indf1	equ	0xFE7
 11901                           plusw1	equ	0xFE3
 11902                           fsr1h	equ	0xFE2
 11903                           fsr1l	equ	0xFE1
 11904                           indf2	equ	0xFDF
 11905                           postinc2	equ	0xFDE
 11906                           postdec2	equ	0xFDD
 11907                           plusw2	equ	0xFDB
 11908                           fsr2h	equ	0xFDA
 11909                           fsr2l	equ	0xFD9
 11910                           status	equ	0xFD8
 11911                           
 11912 ;; *************** function _putchar_b_buf *****************
 11913 ;; Defined at:
 11914 ;;		line 51 in file "display.c"
 11915 ;; Parameters:    Size  Location     Type
 11916 ;;  x               1    wreg     unsigned char 
 11917 ;;  symbol          1   22[COMRAM] unsigned char 
 11918 ;;  pF              2   23[COMRAM] PTR unsigned char [5][0]
 11919 ;;		 -> dFont5(50), dFont4(50), dFont3(50), dFont2(50), 
 11920 ;;		 -> Font(1280), dFont1(50), 
 11921 ;; Auto vars:     Size  Location     Type
 11922 ;;  x               1   28[COMRAM] unsigned char 
 11923 ;;  i               1   30[COMRAM] unsigned char 
 11924 ;;  j               1   29[COMRAM] unsigned char 
 11925 ;;  mask            1   27[COMRAM] unsigned char 
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  1    wreg      void 
 11928 ;; Registers used:
 11929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11935 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11938 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11939 ;;Total ram usage:        9 bytes
 11940 ;; Hardware stack levels used:    1
 11941 ;; Hardware stack levels required when called:    4
 11942 ;; This function calls:
 11943 ;;		_pixel_off
 11944 ;;		_pixel_on
 11945 ;; This function is called by:
 11946 ;;		_time_set_min
 11947 ;;		_time_set_hr
 11948 ;;		_time_set_yr
 11949 ;;		_time_set_mt
 11950 ;;		_time_set_dt
 11951 ;;		_time_set_dy
 11952 ;;		_set_font_set
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           	psect	text53
 11957  001DCC                     __ptext53:
 11958                           	opt stack 0
 11959  001DCC                     _putchar_b_buf:
 11960                           	opt stack 24
 11961                           
 11962                           ;incstack = 0
 11963                           ;putchar_b_buf@x stored from wreg
 11964  001DCC  6E1D               	movwf	putchar_b_buf@x,c
 11965                           
 11966                           ;display.c: 53: uint8_t i, j, mask=0x01;
 11967  001DCE  0E01               	movlw	1
 11968  001DD0  6E1C               	movwf	putchar_b_buf@mask,c
 11969                           
 11970                           ;display.c: 56: for(i=0; i<5; i++)
 11971  001DD2  6A1F               	clrf	putchar_b_buf@i,c
 11972  001DD4                     l445:
 11973                           
 11974                           ;display.c: 57: {
 11975                           ;display.c: 58: for(j=0;j<8;j++)
 11976  001DD4  6A1E               	clrf	putchar_b_buf@j,c
 11977  001DD6                     l5813:
 11978                           
 11979                           ;display.c: 59: {
 11980                           ;display.c: 60: if((*pF)[symbol] [i] & mask)
 11981  001DD6  5017               	movf	putchar_b_buf@symbol,w,c
 11982  001DD8  0D05               	mullw	5
 11983  001DDA  C018  F01A         	movff	putchar_b_buf@pF,??_putchar_b_buf
 11984  001DDE  C019  F01B         	movff	putchar_b_buf@pF+1,??_putchar_b_buf+1
 11985  001DE2  50F3               	movf	prodl,w,c
 11986  001DE4  261A               	addwf	??_putchar_b_buf,f,c
 11987  001DE6  50F4               	movf	prodh,w,c
 11988  001DE8  221B               	addwfc	??_putchar_b_buf+1,f,c
 11989  001DEA  501F               	movf	putchar_b_buf@i,w,c
 11990  001DEC  261A               	addwf	??_putchar_b_buf,f,c
 11991  001DEE  0E00               	movlw	0
 11992  001DF0  221B               	addwfc	??_putchar_b_buf+1,f,c
 11993  001DF2  C01A  FFF6         	movff	??_putchar_b_buf,tblptrl
 11994  001DF6  C01B  FFF7         	movff	??_putchar_b_buf+1,tblptrh
 11995  001DFA                     	if	0	;tblptru may be non-zero
 11996  001DFA                     	endif
 11997  001DFA                     	if	0	;tblptru may be non-zero
 11998  001DFA                     	endif
 11999  001DFA  0008               	tblrd		*
 12000  001DFC  50F5               	movf	tablat,w,c
 12001  001DFE  141C               	andwf	putchar_b_buf@mask,w,c
 12002  001E00  E007               	bz	l5817
 12003                           
 12004                           ;display.c: 61: pixel_on(x+i,j);
 12005  001E02  C01E  F00F         	movff	putchar_b_buf@j,pixel_on@y
 12006  001E06  501D               	movf	putchar_b_buf@x,w,c
 12007  001E08  241F               	addwf	putchar_b_buf@i,w,c
 12008  001E0A  ECFC  F012         	call	_pixel_on
 12009  001E0E  D006               	goto	l5819
 12010  001E10                     l5817:
 12011                           
 12012                           ;display.c: 62: else
 12013                           ;display.c: 63: pixel_off(x+i,j);
 12014  001E10  C01E  F00F         	movff	putchar_b_buf@j,pixel_off@y
 12015  001E14  501D               	movf	putchar_b_buf@x,w,c
 12016  001E16  241F               	addwf	putchar_b_buf@i,w,c
 12017  001E18  EC8C  F012         	call	_pixel_off
 12018  001E1C                     l5819:
 12019                           
 12020                           ;display.c: 65: mask = mask<<1;
 12021  001E1C  90D8               	bcf	status,0,c
 12022  001E1E  361C               	rlcf	putchar_b_buf@mask,f,c
 12023  001E20  2A1E               	incf	putchar_b_buf@j,f,c
 12024  001E22  0E07               	movlw	7
 12025  001E24  641E               	cpfsgt	putchar_b_buf@j,c
 12026  001E26  D7D7               	goto	l5813
 12027                           
 12028                           ;display.c: 66: };
 12029                           ;display.c: 68: mask=0x01;
 12030  001E28  0E01               	movlw	1
 12031  001E2A  6E1C               	movwf	putchar_b_buf@mask,c
 12032  001E2C  2A1F               	incf	putchar_b_buf@i,f,c
 12033  001E2E  0E04               	movlw	4
 12034  001E30  641F               	cpfsgt	putchar_b_buf@i,c
 12035  001E32  D7D0               	goto	l445
 12036  001E34  0C04               	retlw	4
 12037  001E36                     __end_of_putchar_b_buf:
 12038                           	opt stack 0
 12039                           tosu	equ	0xFFF
 12040                           tosh	equ	0xFFE
 12041                           tosl	equ	0xFFD
 12042                           pclath	equ	0xFFA
 12043                           tblptru	equ	0xFF8
 12044                           tblptrh	equ	0xFF7
 12045                           tblptrl	equ	0xFF6
 12046                           tablat	equ	0xFF5
 12047                           prodh	equ	0xFF4
 12048                           prodl	equ	0xFF3
 12049                           intcon	equ	0xFF2
 12050                           intcon2	equ	0xFF1
 12051                           postinc0	equ	0xFEE
 12052                           wreg	equ	0xFE8
 12053                           indf1	equ	0xFE7
 12054                           plusw1	equ	0xFE3
 12055                           fsr1h	equ	0xFE2
 12056                           fsr1l	equ	0xFE1
 12057                           indf2	equ	0xFDF
 12058                           postinc2	equ	0xFDE
 12059                           postdec2	equ	0xFDD
 12060                           plusw2	equ	0xFDB
 12061                           fsr2h	equ	0xFDA
 12062                           fsr2l	equ	0xFD9
 12063                           status	equ	0xFD8
 12064                           
 12065 ;; *************** function _sprintf *****************
 12066 ;; Defined at:
 12067 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 12068 ;; Parameters:    Size  Location     Type
 12069 ;;  sp              2   14[COMRAM] PTR unsigned char 
 12070 ;;		 -> text_buf(100), 
 12071 ;;  f               2   16[COMRAM] PTR const unsigned char 
 12072 ;;		 -> STR_2(22), STR_1(10), 
 12073 ;; Auto vars:     Size  Location     Type
 12074 ;;  tmpval          4    0        struct .
 12075 ;;  cp              3    0        PTR const unsigned char 
 12076 ;;  len             2    0        unsigned int 
 12077 ;;  val             2    0        unsigned int 
 12078 ;;  c               1   18[COMRAM] char 
 12079 ;;  flag            1    0        unsigned char 
 12080 ;;  prec            1    0        char 
 12081 ;;  ap              1    0        PTR void [1]
 12082 ;;		 -> ?_sprintf(2), 
 12083 ;; Return value:  Size  Location     Type
 12084 ;;                  2   14[COMRAM] int 
 12085 ;; Registers used:
 12086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12087 ;; Tracked objects:
 12088 ;;		On entry : 3F/0
 12089 ;;		On exit  : 3F/0
 12090 ;;		Unchanged: 3F/0
 12091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12095 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12096 ;;Total ram usage:        5 bytes
 12097 ;; Hardware stack levels used:    1
 12098 ;; Hardware stack levels required when called:    3
 12099 ;; This function calls:
 12100 ;;		Nothing
 12101 ;; This function is called by:
 12102 ;;		_pressure
 12103 ;; This function uses a non-reentrant model
 12104 ;;
 12105                           
 12106                           	psect	text54
 12107  0023DC                     __ptext54:
 12108                           	opt stack 0
 12109  0023DC                     _sprintf:
 12110                           	opt stack 25
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;doprnt.c: 536: while(c = *f++) {
 12114                           
 12115                           ;incstack = 0
 12116  0023DC  D005               	goto	l6035
 12117  0023DE                     l6031:
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;doprnt.c: 540: {
 12121                           ;doprnt.c: 541: ((*sp++ = (c)));
 12122  0023DE  D812               	call	PL122	;call to abstracted procedure
 12123  0023E0  C013  FFDF         	movff	sprintf@c,indf2
 12124                           
 12125                           ; BSR set to: 0
 12126  0023E4  4A0F               	infsnz	sprintf@sp,f,c
 12127  0023E6  2A10               	incf	sprintf@sp+1,f,c
 12128  0023E8                     l6035:
 12129                           
 12130                           ; BSR set to: 0
 12131  0023E8  C011  FFF6         	movff	sprintf@f,tblptrl
 12132  0023EC  C012  FFF7         	movff	sprintf@f+1,tblptrh
 12133  0023F0  4A11               	infsnz	sprintf@f,f,c
 12134  0023F2  2A12               	incf	sprintf@f+1,f,c
 12135  0023F4                     	if	0	;tblptru may be non-zero
 12136  0023F4                     	endif
 12137  0023F4                     	if	0	;tblptru may be non-zero
 12138  0023F4                     	endif
 12139  0023F4  0008               	tblrd		*
 12140  0023F6  CFF5 F013          	movff	tablat,sprintf@c
 12141  0023FA  5013               	movf	sprintf@c,w,c
 12142  0023FC  E1F0               	bnz	l6031
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;doprnt.c: 1469: }
 12146                           ;doprnt.c: 1533: }
 12147                           ;doprnt.c: 1538: *sp = 0;
 12148  0023FE  D802               	call	PL122	;call to abstracted procedure
 12149  002400  6ADF               	clrf	indf2,c
 12150                           
 12151                           ; BSR set to: 0
 12152  002402  0C00               	retlw	0	;funcret
 12153  002404                     __end_of_sprintf:
 12154                           	opt stack 0
 12155  002404                     PL122:
 12156                           	opt stack 25
 12157  002404  C00F  FFD9         	movff	sprintf@sp,fsr2l
 12158  002408  C010  FFDA         	movff	sprintf@sp+1,fsr2h
 12159  00240C  0012               	return	
 12160  00240E                     __end_ofPL122:
 12161                           	opt stack 0
 12162                           tosu	equ	0xFFF
 12163                           tosh	equ	0xFFE
 12164                           tosl	equ	0xFFD
 12165                           pclath	equ	0xFFA
 12166                           tblptru	equ	0xFF8
 12167                           tblptrh	equ	0xFF7
 12168                           tblptrl	equ	0xFF6
 12169                           tablat	equ	0xFF5
 12170                           prodh	equ	0xFF4
 12171                           prodl	equ	0xFF3
 12172                           intcon	equ	0xFF2
 12173                           intcon2	equ	0xFF1
 12174                           postinc0	equ	0xFEE
 12175                           wreg	equ	0xFE8
 12176                           indf1	equ	0xFE7
 12177                           plusw1	equ	0xFE3
 12178                           fsr1h	equ	0xFE2
 12179                           fsr1l	equ	0xFE1
 12180                           indf2	equ	0xFDF
 12181                           postinc2	equ	0xFDE
 12182                           postdec2	equ	0xFDD
 12183                           plusw2	equ	0xFDB
 12184                           fsr2h	equ	0xFDA
 12185                           fsr2l	equ	0xFD9
 12186                           status	equ	0xFD8
 12187                           
 12188 ;; *************** function _interval_scroll_text *****************
 12189 ;; Defined at:
 12190 ;;		line 301 in file "display.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;		None
 12193 ;; Auto vars:     Size  Location     Type
 12194 ;;  i               1   21[COMRAM] unsigned char 
 12195 ;; Return value:  Size  Location     Type
 12196 ;;                  1    wreg      void 
 12197 ;; Registers used:
 12198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12199 ;; Tracked objects:
 12200 ;;		On entry : 3F/0
 12201 ;;		On exit  : 0/0
 12202 ;;		Unchanged: 0/0
 12203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12205 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12206 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12207 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12208 ;;Total ram usage:        2 bytes
 12209 ;; Hardware stack levels used:    1
 12210 ;; Hardware stack levels required when called:    5
 12211 ;; This function calls:
 12212 ;;		_Update_Matrix
 12213 ;;		_scroll_text
 12214 ;; This function is called by:
 12215 ;;		_pressure
 12216 ;; This function uses a non-reentrant model
 12217 ;;
 12218                           
 12219                           	psect	text55
 12220  002498                     __ptext55:
 12221                           	opt stack 0
 12222  002498                     _interval_scroll_text:
 12223                           	opt stack 23
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;display.c: 303: uint8_t i;
 12227                           ;display.c: 305: while(scroll_text())
 12228                           
 12229                           ; BSR set to: 0
 12230                           ;incstack = 0
 12231  002498  D010               	goto	l5979
 12232  00249A                     l5967:
 12233                           
 12234                           ;display.c: 306: {
 12235                           ;display.c: 307: Update_Matrix(Dis_Buff);
 12236  00249A  0EAB               	movlw	low _Dis_Buff
 12237  00249C  6E11               	movwf	Update_Matrix@buf,c
 12238  00249E  EC2A  F011         	call	_Update_Matrix	;wreg free
 12239                           
 12240                           ;display.c: 308: for(i=0; i<60; i++)
 12241  0024A2  6A16               	clrf	interval_scroll_text@i,c
 12242  0024A4                     l5975:
 12243                           
 12244                           ;display.c: 309: _delay((unsigned long)((1)*(40000000/4000.0)));
 12245  0024A4  0E0D               	movlw	13
 12246  0024A6  6E15               	movwf	??_interval_scroll_text& (0+255),c
 12247  0024A8  0EFC               	movlw	252
 12248  0024AA                     u4987:
 12249  0024AA  2EE8               	decfsz	wreg,f,c
 12250  0024AC  D7FE               	bra	u4987
 12251  0024AE  2E15               	decfsz	??_interval_scroll_text& (0+255),f,c
 12252  0024B0  D7FC               	bra	u4987
 12253  0024B2  2A16               	incf	interval_scroll_text@i,f,c
 12254  0024B4  0E3B               	movlw	59
 12255  0024B6  6416               	cpfsgt	interval_scroll_text@i,c
 12256  0024B8  D7F5               	goto	l5975
 12257  0024BA                     l5979:
 12258  0024BA  EC6F  F00E         	call	_scroll_text	;wreg free
 12259  0024BE  0900               	iorlw	0
 12260  0024C0  E1EC               	bnz	l5967
 12261  0024C2  0012               	return		;funcret
 12262  0024C4                     __end_of_interval_scroll_text:
 12263                           	opt stack 0
 12264                           tosu	equ	0xFFF
 12265                           tosh	equ	0xFFE
 12266                           tosl	equ	0xFFD
 12267                           pclath	equ	0xFFA
 12268                           tblptru	equ	0xFF8
 12269                           tblptrh	equ	0xFF7
 12270                           tblptrl	equ	0xFF6
 12271                           tablat	equ	0xFF5
 12272                           prodh	equ	0xFF4
 12273                           prodl	equ	0xFF3
 12274                           intcon	equ	0xFF2
 12275                           intcon2	equ	0xFF1
 12276                           postinc0	equ	0xFEE
 12277                           wreg	equ	0xFE8
 12278                           indf1	equ	0xFE7
 12279                           plusw1	equ	0xFE3
 12280                           fsr1h	equ	0xFE2
 12281                           fsr1l	equ	0xFE1
 12282                           indf2	equ	0xFDF
 12283                           postinc2	equ	0xFDE
 12284                           postdec2	equ	0xFDD
 12285                           plusw2	equ	0xFDB
 12286                           fsr2h	equ	0xFDA
 12287                           fsr2l	equ	0xFD9
 12288                           status	equ	0xFD8
 12289                           
 12290 ;; *************** function _scroll_text *****************
 12291 ;; Defined at:
 12292 ;;		line 235 in file "display.c"
 12293 ;; Parameters:    Size  Location     Type
 12294 ;;		None
 12295 ;; Auto vars:     Size  Location     Type
 12296 ;;  i               1   16[COMRAM] unsigned char 
 12297 ;; Return value:  Size  Location     Type
 12298 ;;                  1    wreg      unsigned char 
 12299 ;; Registers used:
 12300 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 12301 ;; Tracked objects:
 12302 ;;		On entry : 0/0
 12303 ;;		On exit  : 0/0
 12304 ;;		Unchanged: 0/0
 12305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12308 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12309 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12310 ;;Total ram usage:        3 bytes
 12311 ;; Hardware stack levels used:    1
 12312 ;; Hardware stack levels required when called:    3
 12313 ;; This function calls:
 12314 ;;		Nothing
 12315 ;; This function is called by:
 12316 ;;		_interval_scroll_text
 12317 ;; This function uses a non-reentrant model
 12318 ;;
 12319                           
 12320                           	psect	text56
 12321  001CDE                     __ptext56:
 12322                           	opt stack 0
 12323  001CDE                     _scroll_text:
 12324                           	opt stack 24
 12325                           
 12326                           ;display.c: 237: uint8_t i;
 12327                           ;display.c: 239: for (i=0; i<31; i++)
 12328                           
 12329                           ;incstack = 0
 12330  001CDE  6A11               	clrf	scroll_text@i,c
 12331  001CE0                     l5483:
 12332                           
 12333                           ;display.c: 240: Dis_Buff[i] = Dis_Buff[i+1];
 12334  001CE0  5011               	movf	scroll_text@i,w,c
 12335  001CE2  0FAC               	addlw	low (_Dis_Buff+1)
 12336  001CE4  6ED9               	movwf	fsr2l,c
 12337  001CE6  6ADA               	clrf	fsr2h,c
 12338  001CE8  5011               	movf	scroll_text@i,w,c
 12339  001CEA  ECAC  F00F         	call	PL108	;call to abstracted procedure
 12340  001CEE  2A11               	incf	scroll_text@i,f,c
 12341  001CF0  0E1E               	movlw	30
 12342  001CF2  6411               	cpfsgt	scroll_text@i,c
 12343  001CF4  D7F5               	goto	l5483
 12344                           
 12345                           ;display.c: 242: if ((i_bchar) >= 5)
 12346  001CF6  0E04               	movlw	4
 12347  001CF8  645D               	cpfsgt	_i_bchar,c
 12348  001CFA  D00E               	goto	l5505
 12349                           
 12350                           ;display.c: 243: {
 12351                           ;display.c: 244: if (text_buf[i_char] == 0)
 12352  001CFC  D824               	call	PL86	;call to abstracted procedure
 12353  001CFE  E107               	bnz	l509
 12354                           
 12355                           ;display.c: 245: {
 12356                           ;display.c: 246: i_bchar++;
 12357  001D00  2A5D               	incf	_i_bchar,f,c
 12358                           
 12359                           ;display.c: 247: if (i_bchar >= 32)
 12360  001D02  0E1F               	movlw	31
 12361  001D04  645D               	cpfsgt	_i_bchar,c
 12362  001D06  0C01               	retlw	1
 12363                           
 12364                           ;display.c: 248: {
 12365                           ;display.c: 249: i_char = 0;
 12366  001D08  6A5E               	clrf	_i_char,c
 12367                           
 12368                           ;display.c: 250: i_bchar = 0;
 12369  001D0A  6A5D               	clrf	_i_bchar,c
 12370                           
 12371                           ;display.c: 251: return 0;
 12372  001D0C  0C00               	retlw	0
 12373  001D0E                     l509:
 12374                           
 12375                           ;display.c: 254: else
 12376                           ;display.c: 255: {
 12377                           ;display.c: 256: Dis_Buff[31] = 0;
 12378  001D0E  0100               	movlb	0	; () banked
 12379  001D10  6BCA               	clrf	(_Dis_Buff+31)& (0+255),b
 12380                           
 12381                           ;display.c: 257: i_bchar = 0;
 12382  001D12  6A5D               	clrf	_i_bchar,c
 12383                           
 12384                           ; BSR set to: 0
 12385                           ;display.c: 258: i_char++;
 12386  001D14  2A5E               	incf	_i_char,f,c
 12387  001D16  0C01               	retlw	1
 12388  001D18                     l5505:
 12389                           
 12390                           ;display.c: 261: else
 12391                           ;display.c: 262: {
 12392                           ;display.c: 263: Dis_Buff[31] = Font[ text_buf[i_char]][i_bchar++];
 12393  001D18  D816               	call	PL86	;call to abstracted procedure
 12394  001D1A  0D05               	mullw	5
 12395  001D1C  0EC2               	movlw	low _Font
 12396  001D1E  6E0F               	movwf	??_scroll_text& (0+255),c
 12397  001D20  0EB9               	movlw	high _Font
 12398  001D22  6E10               	movwf	(??_scroll_text+1)& (0+255),c
 12399  001D24  50F3               	movf	prodl,w,c
 12400  001D26  260F               	addwf	??_scroll_text,f,c
 12401  001D28  50F4               	movf	prodh,w,c
 12402  001D2A  2210               	addwfc	??_scroll_text+1,f,c
 12403  001D2C  505D               	movf	_i_bchar,w,c
 12404  001D2E  260F               	addwf	??_scroll_text,f,c
 12405  001D30  0E00               	movlw	0
 12406  001D32  2210               	addwfc	??_scroll_text+1,f,c
 12407  001D34  C00F  FFF6         	movff	??_scroll_text,tblptrl
 12408  001D38  C010  FFF7         	movff	??_scroll_text+1,tblptrh
 12409  001D3C                     	if	0	;tblptru may be non-zero
 12410  001D3C                     	endif
 12411  001D3C                     	if	0	;tblptru may be non-zero
 12412  001D3C                     	endif
 12413  001D3C  0008               	tblrd		*
 12414  001D3E  CFF5 F0CA          	movff	tablat,_Dis_Buff+31
 12415  001D42  2A5D               	incf	_i_bchar,f,c
 12416                           
 12417                           ;display.c: 265: }
 12418                           ;display.c: 269: return 1;
 12419  001D44  0C01               	retlw	1	;funcret
 12420  001D46                     __end_of_scroll_text:
 12421                           	opt stack 0
 12422  001D46                     PL86:
 12423                           	opt stack 24
 12424  001D46  0E78               	movlw	low _text_buf
 12425  001D48  245E               	addwf	_i_char,w,c
 12426  001D4A  6ED9               	movwf	fsr2l,c
 12427  001D4C  6ADA               	clrf	fsr2h,c
 12428  001D4E  0E01               	movlw	high _text_buf
 12429  001D50  22DA               	addwfc	fsr2h,f,c
 12430  001D52  50DF               	movf	indf2,w,c
 12431  001D54  0012               	return	
 12432  001D56                     __end_ofPL86:
 12433                           	opt stack 0
 12434                           tosu	equ	0xFFF
 12435                           tosh	equ	0xFFE
 12436                           tosl	equ	0xFFD
 12437                           pclath	equ	0xFFA
 12438                           tblptru	equ	0xFF8
 12439                           tblptrh	equ	0xFF7
 12440                           tblptrl	equ	0xFF6
 12441                           tablat	equ	0xFF5
 12442                           prodh	equ	0xFF4
 12443                           prodl	equ	0xFF3
 12444                           intcon	equ	0xFF2
 12445                           intcon2	equ	0xFF1
 12446                           postinc0	equ	0xFEE
 12447                           wreg	equ	0xFE8
 12448                           indf1	equ	0xFE7
 12449                           plusw1	equ	0xFE3
 12450                           fsr1h	equ	0xFE2
 12451                           fsr1l	equ	0xFE1
 12452                           indf2	equ	0xFDF
 12453                           postinc2	equ	0xFDE
 12454                           postdec2	equ	0xFDD
 12455                           plusw2	equ	0xFDB
 12456                           fsr2h	equ	0xFDA
 12457                           fsr2l	equ	0xFD9
 12458                           status	equ	0xFD8
 12459                           
 12460 ;; *************** function _scroll_left *****************
 12461 ;; Defined at:
 12462 ;;		line 277 in file "display.c"
 12463 ;; Parameters:    Size  Location     Type
 12464 ;;		None
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;  i               1   24[COMRAM] unsigned char 
 12467 ;;  speed           1   23[COMRAM] unsigned char 
 12468 ;;  k               1   22[COMRAM] unsigned char 
 12469 ;;  j               1   21[COMRAM] unsigned char 
 12470 ;; Return value:  Size  Location     Type
 12471 ;;                  1    wreg      void 
 12472 ;; Registers used:
 12473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12474 ;; Tracked objects:
 12475 ;;		On entry : 0/0
 12476 ;;		On exit  : 0/0
 12477 ;;		Unchanged: 0/0
 12478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12480 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12481 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12482 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12483 ;;Total ram usage:        5 bytes
 12484 ;; Hardware stack levels used:    1
 12485 ;; Hardware stack levels required when called:    5
 12486 ;; This function calls:
 12487 ;;		_Update_Matrix
 12488 ;; This function is called by:
 12489 ;;		_home_temp
 12490 ;;		_pressure
 12491 ;;		_time_led
 12492 ;; This function uses a non-reentrant model
 12493 ;;
 12494                           
 12495                           	psect	text57
 12496  001F04                     __ptext57:
 12497                           	opt stack 0
 12498  001F04                     _scroll_left:
 12499                           	opt stack 23
 12500                           
 12501                           ;display.c: 279: uint8_t i,j,k,speed = 100;
 12502                           
 12503                           ;incstack = 0
 12504  001F04  0E64               	movlw	100
 12505  001F06  6E18               	movwf	scroll_left@speed,c
 12506                           
 12507                           ;display.c: 282: for (k=0;k<=31;k++)
 12508  001F08  6A17               	clrf	scroll_left@k,c
 12509  001F0A                     l516:
 12510                           
 12511                           ;display.c: 283: {
 12512                           ;display.c: 284: for (i=0; i<=31; i++)
 12513  001F0A  6A19               	clrf	scroll_left@i,c
 12514  001F0C                     l5943:
 12515                           
 12516                           ;display.c: 285: Dis_Buff[i] = Dis_Buff[i+1];
 12517  001F0C  5019               	movf	scroll_left@i,w,c
 12518  001F0E  0FAC               	addlw	low (_Dis_Buff+1)
 12519  001F10  6ED9               	movwf	fsr2l,c
 12520  001F12  6ADA               	clrf	fsr2h,c
 12521  001F14  5019               	movf	scroll_left@i,w,c
 12522  001F16  D820               	call	PL108	;call to abstracted procedure
 12523  001F18  2A19               	incf	scroll_left@i,f,c
 12524  001F1A  0E1F               	movlw	31
 12525  001F1C  6419               	cpfsgt	scroll_left@i,c
 12526  001F1E  D7F6               	goto	l5943
 12527                           
 12528                           ;display.c: 287: Dis_Buff[31] = 0;
 12529  001F20  0100               	movlb	0	; () banked
 12530  001F22  6BCA               	clrf	(_Dis_Buff+31)& (0+255),b
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;display.c: 288: Update_Matrix(Dis_Buff);
 12534  001F24  0EAB               	movlw	low _Dis_Buff
 12535  001F26  6E11               	movwf	Update_Matrix@buf,c
 12536  001F28  EC2A  F011         	call	_Update_Matrix	;wreg free
 12537                           
 12538                           ;display.c: 289: for(j=0; j<speed; j++)
 12539  001F2C  6A16               	clrf	scroll_left@j,c
 12540  001F2E  D008               	goto	l520
 12541  001F30                     l5953:
 12542                           
 12543                           ;display.c: 290: _delay((unsigned long)((1)*(40000000/4000.0)));
 12544  001F30  0E0D               	movlw	13
 12545  001F32  6E15               	movwf	??_scroll_left& (0+255),c
 12546  001F34  0EFC               	movlw	252
 12547  001F36                     u4997:
 12548  001F36  2EE8               	decfsz	wreg,f,c
 12549  001F38  D7FE               	bra	u4997
 12550  001F3A  2E15               	decfsz	??_scroll_left& (0+255),f,c
 12551  001F3C  D7FC               	bra	u4997
 12552  001F3E  2A16               	incf	scroll_left@j,f,c
 12553  001F40                     l520:
 12554  001F40  5018               	movf	scroll_left@speed,w,c
 12555  001F42  5C16               	subwf	scroll_left@j,w,c
 12556  001F44  E3F5               	bnc	l5953
 12557                           
 12558                           ;display.c: 291: if (speed > 10) speed -=10;
 12559  001F46  0E0A               	movlw	10
 12560  001F48  6418               	cpfsgt	scroll_left@speed,c
 12561  001F4A  D001               	goto	l5961
 12562  001F4C  5E18               	subwf	scroll_left@speed,f,c
 12563  001F4E                     l5961:
 12564  001F4E  2A17               	incf	scroll_left@k,f,c
 12565  001F50  0E1F               	movlw	31
 12566  001F52  6417               	cpfsgt	scroll_left@k,c
 12567  001F54  D7DA               	goto	l516
 12568  001F56  0C1F               	retlw	31
 12569  001F58                     __end_of_scroll_left:
 12570                           	opt stack 0
 12571  001F58                     PL108:
 12572                           	opt stack 24
 12573  001F58  0FAB               	addlw	low _Dis_Buff
 12574  001F5A  6EE1               	movwf	fsr1l,c
 12575  001F5C  6AE2               	clrf	fsr1h,c
 12576  001F5E  CFDF FFE7          	movff	indf2,indf1
 12577  001F62  0012               	return	
 12578  001F64                     __end_ofPL108:
 12579                           	opt stack 0
 12580                           tosu	equ	0xFFF
 12581                           tosh	equ	0xFFE
 12582                           tosl	equ	0xFFD
 12583                           pclath	equ	0xFFA
 12584                           tblptru	equ	0xFF8
 12585                           tblptrh	equ	0xFF7
 12586                           tblptrl	equ	0xFF6
 12587                           tablat	equ	0xFF5
 12588                           prodh	equ	0xFF4
 12589                           prodl	equ	0xFF3
 12590                           intcon	equ	0xFF2
 12591                           intcon2	equ	0xFF1
 12592                           postinc0	equ	0xFEE
 12593                           wreg	equ	0xFE8
 12594                           indf1	equ	0xFE7
 12595                           plusw1	equ	0xFE3
 12596                           fsr1h	equ	0xFE2
 12597                           fsr1l	equ	0xFE1
 12598                           indf2	equ	0xFDF
 12599                           postinc2	equ	0xFDE
 12600                           postdec2	equ	0xFDD
 12601                           plusw2	equ	0xFDB
 12602                           fsr2h	equ	0xFDA
 12603                           fsr2l	equ	0xFD9
 12604                           status	equ	0xFD8
 12605                           
 12606 ;; *************** function _putchar_down_s *****************
 12607 ;; Defined at:
 12608 ;;		line 121 in file "display.c"
 12609 ;; Parameters:    Size  Location     Type
 12610 ;;  x               1    wreg     unsigned char 
 12611 ;;  symbol          1   22[COMRAM] unsigned char 
 12612 ;; Auto vars:     Size  Location     Type
 12613 ;;  x               1   28[COMRAM] unsigned char 
 12614 ;;  i               1   31[COMRAM] unsigned char 
 12615 ;;  j               1   30[COMRAM] unsigned char 
 12616 ;;  k               1   29[COMRAM] unsigned char 
 12617 ;; Return value:  Size  Location     Type
 12618 ;;                  1    wreg      void 
 12619 ;; Registers used:
 12620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12621 ;; Tracked objects:
 12622 ;;		On entry : 0/0
 12623 ;;		On exit  : 0/0
 12624 ;;		Unchanged: 0/0
 12625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12626 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12627 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12628 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12629 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12630 ;;Total ram usage:       10 bytes
 12631 ;; Hardware stack levels used:    1
 12632 ;; Hardware stack levels required when called:    5
 12633 ;; This function calls:
 12634 ;;		_Update_Matrix
 12635 ;; This function is called by:
 12636 ;;		_home_temp
 12637 ;;		_pressure
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           	psect	text58
 12642  0019A0                     __ptext58:
 12643                           	opt stack 0
 12644  0019A0                     _putchar_down_s:
 12645                           	opt stack 23
 12646                           
 12647                           ;incstack = 0
 12648                           ;putchar_down_s@x stored from wreg
 12649  0019A0  6E1D               	movwf	putchar_down_s@x,c
 12650                           
 12651                           ;display.c: 123: uint8_t i, j, k;
 12652                           ;display.c: 128: for(j=0;j<=7;j++)
 12653  0019A2  6A1F               	clrf	putchar_down_s@j,c
 12654  0019A4                     l472:
 12655                           
 12656                           ;display.c: 129: {
 12657                           ;display.c: 130: for(i=0;i<3;i++)
 12658  0019A4  6A20               	clrf	putchar_down_s@i,c
 12659  0019A6                     l5871:
 12660                           
 12661                           ;display.c: 131: {
 12662                           ;display.c: 132: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | (FontS[symbol][i] >> (8-1-j));
 12663  0019A6  501D               	movf	putchar_down_s@x,w,c
 12664  0019A8  0FAB               	addlw	low _Dis_Buff
 12665  0019AA  2420               	addwf	putchar_down_s@i,w,c
 12666  0019AC  6ED9               	movwf	fsr2l,c
 12667  0019AE  6ADA               	clrf	fsr2h,c
 12668  0019B0  501F               	movf	putchar_down_s@j,w,c
 12669  0019B2  0807               	sublw	7
 12670  0019B4  6E18               	movwf	??_putchar_down_s& (0+255),c
 12671  0019B6  5017               	movf	putchar_down_s@symbol,w,c
 12672  0019B8  0D03               	mullw	3
 12673  0019BA  0EBC               	movlw	low _FontS
 12674  0019BC  6E19               	movwf	(??_putchar_down_s+1)& (0+255),c
 12675  0019BE  0EBF               	movlw	high _FontS
 12676  0019C0  6E1A               	movwf	(??_putchar_down_s+2)& (0+255),c
 12677  0019C2  50F3               	movf	prodl,w,c
 12678  0019C4  2619               	addwf	??_putchar_down_s+1,f,c
 12679  0019C6  50F4               	movf	prodh,w,c
 12680  0019C8  221A               	addwfc	??_putchar_down_s+2,f,c
 12681  0019CA  5020               	movf	putchar_down_s@i,w,c
 12682  0019CC  2619               	addwf	??_putchar_down_s+1,f,c
 12683  0019CE  0E00               	movlw	0
 12684  0019D0  221A               	addwfc	??_putchar_down_s+2,f,c
 12685  0019D2  C019  FFF6         	movff	??_putchar_down_s+1,tblptrl
 12686  0019D6  C01A  FFF7         	movff	??_putchar_down_s+2,tblptrh
 12687  0019DA                     	if	0	;tblptru may be non-zero
 12688  0019DA                     	endif
 12689  0019DA                     	if	0	;tblptru may be non-zero
 12690  0019DA                     	endif
 12691  0019DA  0008               	tblrd		*
 12692  0019DC  CFF5 F01B          	movff	tablat,??_putchar_down_s+3
 12693  0019E0  2A18               	incf	??_putchar_down_s,f,c
 12694  0019E2  D002               	goto	u3984
 12695  0019E4                     u3985:
 12696  0019E4  90D8               	bcf	status,0,c
 12697  0019E6  321B               	rrcf	??_putchar_down_s+3,f,c
 12698  0019E8                     u3984:
 12699  0019E8  2E18               	decfsz	??_putchar_down_s,f,c
 12700  0019EA  D7FC               	goto	u3985
 12701  0019EC  501D               	movf	putchar_down_s@x,w,c
 12702  0019EE  0FAB               	addlw	low _Dis_Buff
 12703  0019F0  2420               	addwf	putchar_down_s@i,w,c
 12704  0019F2  6EE1               	movwf	fsr1l,c
 12705  0019F4  6AE2               	clrf	fsr1h,c
 12706  0019F6  50E7               	movf	indf1,w,c
 12707  0019F8  6E1C               	movwf	(??_putchar_down_s+4)& (0+255),c
 12708  0019FA  90D8               	bcf	status,0,c
 12709  0019FC  341C               	rlcf	??_putchar_down_s+4,w,c
 12710  0019FE  101B               	iorwf	??_putchar_down_s+3,w,c
 12711  001A00  6EDF               	movwf	indf2,c
 12712  001A02  2A20               	incf	putchar_down_s@i,f,c
 12713  001A04  0E02               	movlw	2
 12714  001A06  6420               	cpfsgt	putchar_down_s@i,c
 12715  001A08  D7CE               	goto	l5871
 12716                           
 12717                           ;display.c: 133: }
 12718                           ;display.c: 135: for(k=0;k<20;k++)
 12719  001A0A  6A1E               	clrf	putchar_down_s@k,c
 12720  001A0C                     l5881:
 12721                           
 12722                           ;display.c: 136: _delay((unsigned long)((1)*(40000000/4000.0)));
 12723  001A0C  0E0D               	movlw	13
 12724  001A0E  6E18               	movwf	??_putchar_down_s& (0+255),c
 12725  001A10  0EFC               	movlw	252
 12726  001A12                     u5007:
 12727  001A12  2EE8               	decfsz	wreg,f,c
 12728  001A14  D7FE               	bra	u5007
 12729  001A16  2E18               	decfsz	??_putchar_down_s& (0+255),f,c
 12730  001A18  D7FC               	bra	u5007
 12731  001A1A  2A1E               	incf	putchar_down_s@k,f,c
 12732  001A1C  0E13               	movlw	19
 12733  001A1E  641E               	cpfsgt	putchar_down_s@k,c
 12734  001A20  D7F5               	goto	l5881
 12735                           
 12736                           ;display.c: 137: Update_Matrix(Dis_Buff);
 12737  001A22  0EAB               	movlw	low _Dis_Buff
 12738  001A24  6E11               	movwf	Update_Matrix@buf,c
 12739  001A26  EC2A  F011         	call	_Update_Matrix	;wreg free
 12740  001A2A  2A1F               	incf	putchar_down_s@j,f,c
 12741  001A2C  0E07               	movlw	7
 12742  001A2E  641F               	cpfsgt	putchar_down_s@j,c
 12743  001A30  D7B9               	goto	l472
 12744  001A32  0C07               	retlw	7
 12745  001A34                     __end_of_putchar_down_s:
 12746                           	opt stack 0
 12747                           tosu	equ	0xFFF
 12748                           tosh	equ	0xFFE
 12749                           tosl	equ	0xFFD
 12750                           pclath	equ	0xFFA
 12751                           tblptru	equ	0xFF8
 12752                           tblptrh	equ	0xFF7
 12753                           tblptrl	equ	0xFF6
 12754                           tablat	equ	0xFF5
 12755                           prodh	equ	0xFF4
 12756                           prodl	equ	0xFF3
 12757                           intcon	equ	0xFF2
 12758                           intcon2	equ	0xFF1
 12759                           postinc0	equ	0xFEE
 12760                           wreg	equ	0xFE8
 12761                           indf1	equ	0xFE7
 12762                           plusw1	equ	0xFE3
 12763                           fsr1h	equ	0xFE2
 12764                           fsr1l	equ	0xFE1
 12765                           indf2	equ	0xFDF
 12766                           postinc2	equ	0xFDE
 12767                           postdec2	equ	0xFDD
 12768                           plusw2	equ	0xFDB
 12769                           fsr2h	equ	0xFDA
 12770                           fsr2l	equ	0xFD9
 12771                           status	equ	0xFD8
 12772                           
 12773 ;; *************** function _putchar_down *****************
 12774 ;; Defined at:
 12775 ;;		line 99 in file "display.c"
 12776 ;; Parameters:    Size  Location     Type
 12777 ;;  x               1    wreg     unsigned char 
 12778 ;;  symbol          1   26[COMRAM] unsigned char 
 12779 ;;  pF              2   27[COMRAM] PTR unsigned char [5][0]
 12780 ;;		 -> dFont5(50), dFont4(50), dFont3(50), dFont2(50), 
 12781 ;;		 -> Font(1280), dFont1(50), 
 12782 ;; Auto vars:     Size  Location     Type
 12783 ;;  x               1   34[COMRAM] unsigned char 
 12784 ;;  i               1   37[COMRAM] unsigned char 
 12785 ;;  j               1   36[COMRAM] unsigned char 
 12786 ;;  k               1   35[COMRAM] unsigned char 
 12787 ;; Return value:  Size  Location     Type
 12788 ;;                  1    wreg      void 
 12789 ;; Registers used:
 12790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12791 ;; Tracked objects:
 12792 ;;		On entry : 0/0
 12793 ;;		On exit  : 0/0
 12794 ;;		Unchanged: 0/0
 12795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12796 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12797 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12798 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12799 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12800 ;;Total ram usage:       12 bytes
 12801 ;; Hardware stack levels used:    1
 12802 ;; Hardware stack levels required when called:    5
 12803 ;; This function calls:
 12804 ;;		_Update_Matrix
 12805 ;; This function is called by:
 12806 ;;		_home_temp
 12807 ;;		_pressure
 12808 ;; This function uses a non-reentrant model
 12809 ;;
 12810                           
 12811                           	psect	text59
 12812  001A34                     __ptext59:
 12813                           	opt stack 0
 12814  001A34                     _putchar_down:
 12815                           	opt stack 23
 12816                           
 12817                           ;incstack = 0
 12818                           ;putchar_down@x stored from wreg
 12819  001A34  6E23               	movwf	putchar_down@x,c
 12820                           
 12821                           ;display.c: 101: uint8_t i, j, k;
 12822                           ;display.c: 103: for(j=0;j<=7;j++)
 12823  001A36  6A25               	clrf	putchar_down@j,c
 12824  001A38                     l463:
 12825                           
 12826                           ;display.c: 104: {
 12827                           ;display.c: 105: for(i=0;i<5;i++)
 12828  001A38  6A26               	clrf	putchar_down@i,c
 12829  001A3A                     l5841:
 12830                           
 12831                           ;display.c: 106: {
 12832                           ;display.c: 107: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | ((*pF)[symbol][i] >> (8-1-j));
 12833  001A3A  5023               	movf	putchar_down@x,w,c
 12834  001A3C  0FAB               	addlw	low _Dis_Buff
 12835  001A3E  2426               	addwf	putchar_down@i,w,c
 12836  001A40  6ED9               	movwf	fsr2l,c
 12837  001A42  6ADA               	clrf	fsr2h,c
 12838  001A44  5025               	movf	putchar_down@j,w,c
 12839  001A46  0807               	sublw	7
 12840  001A48  6E1E               	movwf	??_putchar_down& (0+255),c
 12841  001A4A  501B               	movf	putchar_down@symbol,w,c
 12842  001A4C  0D05               	mullw	5
 12843  001A4E  C01C  F01F         	movff	putchar_down@pF,??_putchar_down+1
 12844  001A52  C01D  F020         	movff	putchar_down@pF+1,??_putchar_down+2
 12845  001A56  50F3               	movf	prodl,w,c
 12846  001A58  261F               	addwf	??_putchar_down+1,f,c
 12847  001A5A  50F4               	movf	prodh,w,c
 12848  001A5C  2220               	addwfc	??_putchar_down+2,f,c
 12849  001A5E  5026               	movf	putchar_down@i,w,c
 12850  001A60  261F               	addwf	??_putchar_down+1,f,c
 12851  001A62  0E00               	movlw	0
 12852  001A64  2220               	addwfc	??_putchar_down+2,f,c
 12853  001A66  C01F  FFF6         	movff	??_putchar_down+1,tblptrl
 12854  001A6A  C020  FFF7         	movff	??_putchar_down+2,tblptrh
 12855  001A6E                     	if	0	;tblptru may be non-zero
 12856  001A6E                     	endif
 12857  001A6E                     	if	0	;tblptru may be non-zero
 12858  001A6E                     	endif
 12859  001A6E  0008               	tblrd		*
 12860  001A70  CFF5 F021          	movff	tablat,??_putchar_down+3
 12861  001A74  2A1E               	incf	??_putchar_down,f,c
 12862  001A76  D002               	goto	u3944
 12863  001A78                     u3945:
 12864  001A78  90D8               	bcf	status,0,c
 12865  001A7A  3221               	rrcf	??_putchar_down+3,f,c
 12866  001A7C                     u3944:
 12867  001A7C  2E1E               	decfsz	??_putchar_down,f,c
 12868  001A7E  D7FC               	goto	u3945
 12869  001A80  5023               	movf	putchar_down@x,w,c
 12870  001A82  0FAB               	addlw	low _Dis_Buff
 12871  001A84  2426               	addwf	putchar_down@i,w,c
 12872  001A86  6EE1               	movwf	fsr1l,c
 12873  001A88  6AE2               	clrf	fsr1h,c
 12874  001A8A  50E7               	movf	indf1,w,c
 12875  001A8C  6E22               	movwf	(??_putchar_down+4)& (0+255),c
 12876  001A8E  90D8               	bcf	status,0,c
 12877  001A90  3422               	rlcf	??_putchar_down+4,w,c
 12878  001A92  1021               	iorwf	??_putchar_down+3,w,c
 12879  001A94  6EDF               	movwf	indf2,c
 12880  001A96  2A26               	incf	putchar_down@i,f,c
 12881  001A98  0E04               	movlw	4
 12882  001A9A  6426               	cpfsgt	putchar_down@i,c
 12883  001A9C  D7CE               	goto	l5841
 12884                           
 12885                           ;display.c: 108: }
 12886                           ;display.c: 110: for(k=0;k<20;k++)
 12887  001A9E  6A24               	clrf	putchar_down@k,c
 12888  001AA0                     l5851:
 12889                           
 12890                           ;display.c: 111: _delay((unsigned long)((1)*(40000000/4000.0)));
 12891  001AA0  0E0D               	movlw	13
 12892  001AA2  6E1E               	movwf	??_putchar_down& (0+255),c
 12893  001AA4  0EFC               	movlw	252
 12894  001AA6                     u5017:
 12895  001AA6  2EE8               	decfsz	wreg,f,c
 12896  001AA8  D7FE               	bra	u5017
 12897  001AAA  2E1E               	decfsz	??_putchar_down& (0+255),f,c
 12898  001AAC  D7FC               	bra	u5017
 12899  001AAE  2A24               	incf	putchar_down@k,f,c
 12900  001AB0  0E13               	movlw	19
 12901  001AB2  6424               	cpfsgt	putchar_down@k,c
 12902  001AB4  D7F5               	goto	l5851
 12903                           
 12904                           ;display.c: 112: Update_Matrix(Dis_Buff);
 12905  001AB6  0EAB               	movlw	low _Dis_Buff
 12906  001AB8  6E11               	movwf	Update_Matrix@buf,c
 12907  001ABA  EC2A  F011         	call	_Update_Matrix	;wreg free
 12908  001ABE  2A25               	incf	putchar_down@j,f,c
 12909  001AC0  0E07               	movlw	7
 12910  001AC2  6425               	cpfsgt	putchar_down@j,c
 12911  001AC4  D7B9               	goto	l463
 12912  001AC6  0C07               	retlw	7
 12913  001AC8                     __end_of_putchar_down:
 12914                           	opt stack 0
 12915                           tosu	equ	0xFFF
 12916                           tosh	equ	0xFFE
 12917                           tosl	equ	0xFFD
 12918                           pclath	equ	0xFFA
 12919                           tblptru	equ	0xFF8
 12920                           tblptrh	equ	0xFF7
 12921                           tblptrl	equ	0xFF6
 12922                           tablat	equ	0xFF5
 12923                           prodh	equ	0xFF4
 12924                           prodl	equ	0xFF3
 12925                           intcon	equ	0xFF2
 12926                           intcon2	equ	0xFF1
 12927                           postinc0	equ	0xFEE
 12928                           wreg	equ	0xFE8
 12929                           indf1	equ	0xFE7
 12930                           plusw1	equ	0xFE3
 12931                           fsr1h	equ	0xFE2
 12932                           fsr1l	equ	0xFE1
 12933                           indf2	equ	0xFDF
 12934                           postinc2	equ	0xFDE
 12935                           postdec2	equ	0xFDD
 12936                           plusw2	equ	0xFDB
 12937                           fsr2h	equ	0xFDA
 12938                           fsr2l	equ	0xFD9
 12939                           status	equ	0xFD8
 12940                           
 12941 ;; *************** function _Update_Matrix *****************
 12942 ;; Defined at:
 12943 ;;		line 51 in file "max7221.c"
 12944 ;; Parameters:    Size  Location     Type
 12945 ;;  buf             1   16[COMRAM] PTR unsigned char 
 12946 ;;		 -> Dis_Buff(32), 
 12947 ;; Auto vars:     Size  Location     Type
 12948 ;;  i               1   19[COMRAM] unsigned char 
 12949 ;;  j               1   18[COMRAM] unsigned char 
 12950 ;;  data            1   17[COMRAM] unsigned char 
 12951 ;; Return value:  Size  Location     Type
 12952 ;;                  1    wreg      void 
 12953 ;; Registers used:
 12954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12955 ;; Tracked objects:
 12956 ;;		On entry : 0/0
 12957 ;;		On exit  : 0/0
 12958 ;;		Unchanged: 0/0
 12959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12960 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12961 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12963 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12964 ;;Total ram usage:        4 bytes
 12965 ;; Hardware stack levels used:    1
 12966 ;; Hardware stack levels required when called:    4
 12967 ;; This function calls:
 12968 ;;		_Send_Byte_7221
 12969 ;; This function is called by:
 12970 ;;		_putchar_down
 12971 ;;		_putchar_down_s
 12972 ;;		_scroll_left
 12973 ;;		_interval_scroll_text
 12974 ;;		_time_set_min
 12975 ;;		_time_set_hr
 12976 ;;		_time_set_yr
 12977 ;;		_time_set_mt
 12978 ;;		_time_set_dt
 12979 ;;		_time_set_dy
 12980 ;;		_set_font_set
 12981 ;;		_time_led
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           	psect	text60
 12986  002254                     __ptext60:
 12987                           	opt stack 0
 12988  002254                     _Update_Matrix:
 12989                           	opt stack 24
 12990                           
 12991                           ;max7221.c: 53: uint8_t i, j, data;
 12992                           ;max7221.c: 56: for (i = 0; i < 8; i++)
 12993                           
 12994                           ;incstack = 0
 12995  002254  6A14               	clrf	Update_Matrix@i,c
 12996  002256                     l380:
 12997                           
 12998                           ;max7221.c: 57: {
 12999                           ;max7221.c: 58: LATDbits.LD0 = 0;
 13000  002256  908C               	bcf	3980,0,c	;volatile
 13001                           
 13002                           ;max7221.c: 59: for (j = 0; j < 4; j++)
 13003  002258  6A13               	clrf	Update_Matrix@j,c
 13004  00225A                     l5459:
 13005                           
 13006                           ;max7221.c: 60: {
 13007                           ;max7221.c: 62: data = buf[8 * (4 - 1 - j) + i];
 13008  00225A  5013               	movf	Update_Matrix@j,w,c
 13009  00225C  0DF8               	mullw	-8
 13010  00225E  5011               	movf	Update_Matrix@buf,w,c
 13011  002260  24F3               	addwf	prodl,w,c
 13012  002262  2414               	addwf	Update_Matrix@i,w,c
 13013  002264  6ED9               	movwf	fsr2l,c
 13014  002266  6ADA               	clrf	fsr2h,c
 13015  002268  0E18               	movlw	24
 13016  00226A  26D9               	addwf	fsr2l,f,c
 13017  00226C  50DF               	movf	indf2,w,c
 13018  00226E  6E12               	movwf	Update_Matrix@data,c
 13019                           
 13020                           ;max7221.c: 64: Send_Byte_7221(1 + i);
 13021  002270  2814               	incf	Update_Matrix@i,w,c
 13022  002272  ECEA  F012         	call	_Send_Byte_7221
 13023                           
 13024                           ;max7221.c: 65: Send_Byte_7221(data);
 13025  002276  5012               	movf	Update_Matrix@data,w,c
 13026  002278  ECEA  F012         	call	_Send_Byte_7221
 13027  00227C  2A13               	incf	Update_Matrix@j,f,c
 13028  00227E  0E03               	movlw	3
 13029  002280  6413               	cpfsgt	Update_Matrix@j,c
 13030  002282  D7EB               	goto	l5459
 13031                           
 13032                           ;max7221.c: 66: }
 13033                           ;max7221.c: 67: LATDbits.LD0 = 1;
 13034  002284  808C               	bsf	3980,0,c	;volatile
 13035  002286  2A14               	incf	Update_Matrix@i,f,c
 13036  002288  0E07               	movlw	7
 13037  00228A  6414               	cpfsgt	Update_Matrix@i,c
 13038  00228C  D7E4               	goto	l380
 13039  00228E  0C07               	retlw	7
 13040  002290                     __end_of_Update_Matrix:
 13041                           	opt stack 0
 13042                           tosu	equ	0xFFF
 13043                           tosh	equ	0xFFE
 13044                           tosl	equ	0xFFD
 13045                           pclath	equ	0xFFA
 13046                           tblptru	equ	0xFF8
 13047                           tblptrh	equ	0xFF7
 13048                           tblptrl	equ	0xFF6
 13049                           tablat	equ	0xFF5
 13050                           prodh	equ	0xFF4
 13051                           prodl	equ	0xFF3
 13052                           intcon	equ	0xFF2
 13053                           intcon2	equ	0xFF1
 13054                           postinc0	equ	0xFEE
 13055                           wreg	equ	0xFE8
 13056                           indf1	equ	0xFE7
 13057                           plusw1	equ	0xFE3
 13058                           fsr1h	equ	0xFE2
 13059                           fsr1l	equ	0xFE1
 13060                           indf2	equ	0xFDF
 13061                           postinc2	equ	0xFDE
 13062                           postdec2	equ	0xFDD
 13063                           plusw2	equ	0xFDB
 13064                           fsr2h	equ	0xFDA
 13065                           fsr2l	equ	0xFD9
 13066                           status	equ	0xFD8
 13067                           
 13068 ;; *************** function _Send_Byte_7221 *****************
 13069 ;; Defined at:
 13070 ;;		line 6 in file "max7221.c"
 13071 ;; Parameters:    Size  Location     Type
 13072 ;;  dat             1    wreg     unsigned char 
 13073 ;; Auto vars:     Size  Location     Type
 13074 ;;  dat             1   14[COMRAM] unsigned char 
 13075 ;;  i               1   15[COMRAM] unsigned char 
 13076 ;; Return value:  Size  Location     Type
 13077 ;;                  1    wreg      void 
 13078 ;; Registers used:
 13079 ;;		wreg, status,2, status,0
 13080 ;; Tracked objects:
 13081 ;;		On entry : 0/0
 13082 ;;		On exit  : 0/0
 13083 ;;		Unchanged: 0/0
 13084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13088 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13089 ;;Total ram usage:        2 bytes
 13090 ;; Hardware stack levels used:    1
 13091 ;; Hardware stack levels required when called:    3
 13092 ;; This function calls:
 13093 ;;		Nothing
 13094 ;; This function is called by:
 13095 ;;		_Cmd7221
 13096 ;;		_Update_Matrix
 13097 ;; This function uses a non-reentrant model
 13098 ;;
 13099                           
 13100                           	psect	text61
 13101  0025D4                     __ptext61:
 13102                           	opt stack 0
 13103  0025D4                     _Send_Byte_7221:
 13104                           	opt stack 24
 13105                           
 13106                           ;incstack = 0
 13107                           ;Send_Byte_7221@dat stored from wreg
 13108  0025D4  6E0F               	movwf	Send_Byte_7221@dat,c
 13109                           
 13110                           ;max7221.c: 8: uint8_t i;
 13111                           ;max7221.c: 10: for (i = 0; i < 8; i++)
 13112  0025D6  6A10               	clrf	Send_Byte_7221@i,c
 13113  0025D8                     l368:
 13114                           
 13115                           ;max7221.c: 11: {
 13116                           ;max7221.c: 12: if (dat & 0x80)
 13117  0025D8  AE0F               	btfss	Send_Byte_7221@dat,7,c
 13118  0025DA  D002               	goto	l370
 13119                           
 13120                           ;max7221.c: 13: LATDbits.LD2 = 1;
 13121  0025DC  848C               	bsf	3980,2,c	;volatile
 13122  0025DE  D001               	goto	l371
 13123  0025E0                     l370:
 13124                           
 13125                           ;max7221.c: 14: else
 13126                           ;max7221.c: 15: LATDbits.LD2 = 0;
 13127  0025E0  948C               	bcf	3980,2,c	;volatile
 13128  0025E2                     l371:
 13129                           
 13130                           ;max7221.c: 16: LATDbits.LD1 = 1;
 13131  0025E2  828C               	bsf	3980,1,c	;volatile
 13132  0025E4  F000               	nop		;# 
 13133  0025E6  F000               	nop		;# 
 13134                           
 13135                           ;max7221.c: 23: LATDbits.LD1 = 0;
 13136  0025E8  928C               	bcf	3980,1,c	;volatile
 13137                           
 13138                           ;max7221.c: 24: dat <<= 1;
 13139  0025EA  90D8               	bcf	status,0,c
 13140  0025EC  360F               	rlcf	Send_Byte_7221@dat,f,c
 13141  0025EE  2A10               	incf	Send_Byte_7221@i,f,c
 13142  0025F0  0E07               	movlw	7
 13143  0025F2  6410               	cpfsgt	Send_Byte_7221@i,c
 13144  0025F4  D7F1               	goto	l368
 13145  0025F6  0C07               	retlw	7
 13146  0025F8                     __end_of_Send_Byte_7221:
 13147                           	opt stack 0
 13148                           tosu	equ	0xFFF
 13149                           tosh	equ	0xFFE
 13150                           tosl	equ	0xFFD
 13151                           pclath	equ	0xFFA
 13152                           tblptru	equ	0xFF8
 13153                           tblptrh	equ	0xFF7
 13154                           tblptrl	equ	0xFF6
 13155                           tablat	equ	0xFF5
 13156                           prodh	equ	0xFF4
 13157                           prodl	equ	0xFF3
 13158                           intcon	equ	0xFF2
 13159                           intcon2	equ	0xFF1
 13160                           postinc0	equ	0xFEE
 13161                           wreg	equ	0xFE8
 13162                           indf1	equ	0xFE7
 13163                           plusw1	equ	0xFE3
 13164                           fsr1h	equ	0xFE2
 13165                           fsr1l	equ	0xFE1
 13166                           indf2	equ	0xFDF
 13167                           postinc2	equ	0xFDE
 13168                           postdec2	equ	0xFDD
 13169                           plusw2	equ	0xFDB
 13170                           fsr2h	equ	0xFDA
 13171                           fsr2l	equ	0xFD9
 13172                           status	equ	0xFD8
 13173                           
 13174 ;; *************** function _pic_to_led *****************
 13175 ;; Defined at:
 13176 ;;		line 30 in file "display.c"
 13177 ;; Parameters:    Size  Location     Type
 13178 ;;  x               1    wreg     unsigned char 
 13179 ;;  pic             1   19[COMRAM] unsigned char 
 13180 ;; Auto vars:     Size  Location     Type
 13181 ;;  x               1   23[COMRAM] unsigned char 
 13182 ;;  i               1   25[COMRAM] unsigned char 
 13183 ;;  j               1   24[COMRAM] unsigned char 
 13184 ;;  mask            1   22[COMRAM] unsigned char 
 13185 ;; Return value:  Size  Location     Type
 13186 ;;                  1    wreg      void 
 13187 ;; Registers used:
 13188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13189 ;; Tracked objects:
 13190 ;;		On entry : 0/0
 13191 ;;		On exit  : 0/0
 13192 ;;		Unchanged: 0/0
 13193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13194 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13195 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13197 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13198 ;;Total ram usage:        7 bytes
 13199 ;; Hardware stack levels used:    1
 13200 ;; Hardware stack levels required when called:    4
 13201 ;; This function calls:
 13202 ;;		_pixel_off
 13203 ;;		_pixel_on
 13204 ;; This function is called by:
 13205 ;;		_home_temp
 13206 ;;		_pressure
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           	psect	text62
 13211  001E36                     __ptext62:
 13212                           	opt stack 0
 13213  001E36                     _pic_to_led:
 13214                           	opt stack 24
 13215                           
 13216                           ;incstack = 0
 13217                           ;pic_to_led@x stored from wreg
 13218  001E36  6E18               	movwf	pic_to_led@x,c
 13219                           
 13220                           ;display.c: 32: uint8_t i, j, mask=0x01;
 13221  001E38  0E01               	movlw	1
 13222  001E3A  6E17               	movwf	pic_to_led@mask,c
 13223                           
 13224                           ;display.c: 34: for(i=0; i<7; i++){
 13225  001E3C  6A1A               	clrf	pic_to_led@i,c
 13226  001E3E                     l436:
 13227                           
 13228                           ;display.c: 35: for(j=0;j<8;j++){
 13229  001E3E  6A19               	clrf	pic_to_led@j,c
 13230  001E40                     l5783:
 13231                           
 13232                           ;display.c: 36: if(pic7x8[pic][i] & mask){
 13233  001E40  5014               	movf	pic_to_led@pic,w,c
 13234  001E42  0D07               	mullw	7
 13235  001E44  0E8F               	movlw	low _pic7x8
 13236  001E46  6E15               	movwf	??_pic_to_led& (0+255),c
 13237  001E48  0EB9               	movlw	high _pic7x8
 13238  001E4A  6E16               	movwf	(??_pic_to_led+1)& (0+255),c
 13239  001E4C  50F3               	movf	prodl,w,c
 13240  001E4E  2615               	addwf	??_pic_to_led,f,c
 13241  001E50  50F4               	movf	prodh,w,c
 13242  001E52  2216               	addwfc	??_pic_to_led+1,f,c
 13243  001E54  501A               	movf	pic_to_led@i,w,c
 13244  001E56  2615               	addwf	??_pic_to_led,f,c
 13245  001E58  0E00               	movlw	0
 13246  001E5A  2216               	addwfc	??_pic_to_led+1,f,c
 13247  001E5C  C015  FFF6         	movff	??_pic_to_led,tblptrl
 13248  001E60  C016  FFF7         	movff	??_pic_to_led+1,tblptrh
 13249  001E64                     	if	0	;tblptru may be non-zero
 13250  001E64                     	endif
 13251  001E64                     	if	0	;tblptru may be non-zero
 13252  001E64                     	endif
 13253  001E64  0008               	tblrd		*
 13254  001E66  50F5               	movf	tablat,w,c
 13255  001E68  1417               	andwf	pic_to_led@mask,w,c
 13256  001E6A  E007               	bz	l5787
 13257                           
 13258                           ;display.c: 37: pixel_on(x+i,j);
 13259  001E6C  C019  F00F         	movff	pic_to_led@j,pixel_on@y
 13260  001E70  5018               	movf	pic_to_led@x,w,c
 13261  001E72  241A               	addwf	pic_to_led@i,w,c
 13262  001E74  ECFC  F012         	call	_pixel_on
 13263                           
 13264                           ;display.c: 38: }
 13265  001E78  D006               	goto	l5789
 13266  001E7A                     l5787:
 13267                           
 13268                           ;display.c: 39: else {
 13269                           ;display.c: 40: pixel_off(x+i,j);
 13270  001E7A  C019  F00F         	movff	pic_to_led@j,pixel_off@y
 13271  001E7E  5018               	movf	pic_to_led@x,w,c
 13272  001E80  241A               	addwf	pic_to_led@i,w,c
 13273  001E82  EC8C  F012         	call	_pixel_off
 13274  001E86                     l5789:
 13275                           
 13276                           ;display.c: 41: };
 13277                           ;display.c: 42: mask = mask<<1;
 13278  001E86  90D8               	bcf	status,0,c
 13279  001E88  3617               	rlcf	pic_to_led@mask,f,c
 13280  001E8A  2A19               	incf	pic_to_led@j,f,c
 13281  001E8C  0E07               	movlw	7
 13282  001E8E  6419               	cpfsgt	pic_to_led@j,c
 13283  001E90  D7D7               	goto	l5783
 13284                           
 13285                           ;display.c: 43: };
 13286                           ;display.c: 44: mask=0x01;
 13287  001E92  0E01               	movlw	1
 13288  001E94  6E17               	movwf	pic_to_led@mask,c
 13289  001E96  2A1A               	incf	pic_to_led@i,f,c
 13290  001E98  0E06               	movlw	6
 13291  001E9A  641A               	cpfsgt	pic_to_led@i,c
 13292  001E9C  D7D0               	goto	l436
 13293  001E9E  0C06               	retlw	6
 13294  001EA0                     __end_of_pic_to_led:
 13295                           	opt stack 0
 13296                           tosu	equ	0xFFF
 13297                           tosh	equ	0xFFE
 13298                           tosl	equ	0xFFD
 13299                           pclath	equ	0xFFA
 13300                           tblptru	equ	0xFF8
 13301                           tblptrh	equ	0xFF7
 13302                           tblptrl	equ	0xFF6
 13303                           tablat	equ	0xFF5
 13304                           prodh	equ	0xFF4
 13305                           prodl	equ	0xFF3
 13306                           intcon	equ	0xFF2
 13307                           intcon2	equ	0xFF1
 13308                           postinc0	equ	0xFEE
 13309                           wreg	equ	0xFE8
 13310                           indf1	equ	0xFE7
 13311                           plusw1	equ	0xFE3
 13312                           fsr1h	equ	0xFE2
 13313                           fsr1l	equ	0xFE1
 13314                           indf2	equ	0xFDF
 13315                           postinc2	equ	0xFDE
 13316                           postdec2	equ	0xFDD
 13317                           plusw2	equ	0xFDB
 13318                           fsr2h	equ	0xFDA
 13319                           fsr2l	equ	0xFD9
 13320                           status	equ	0xFD8
 13321                           
 13322 ;; *************** function _pixel_on *****************
 13323 ;; Defined at:
 13324 ;;		line 14 in file "display.c"
 13325 ;; Parameters:    Size  Location     Type
 13326 ;;  x               1    wreg     unsigned char 
 13327 ;;  y               1   14[COMRAM] unsigned char 
 13328 ;; Auto vars:     Size  Location     Type
 13329 ;;  x               1   17[COMRAM] unsigned char 
 13330 ;; Return value:  Size  Location     Type
 13331 ;;                  1    wreg      void 
 13332 ;; Registers used:
 13333 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13334 ;; Tracked objects:
 13335 ;;		On entry : 0/0
 13336 ;;		On exit  : 0/0
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13339 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13340 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13341 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13342 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;Total ram usage:        4 bytes
 13344 ;; Hardware stack levels used:    1
 13345 ;; Hardware stack levels required when called:    3
 13346 ;; This function calls:
 13347 ;;		Nothing
 13348 ;; This function is called by:
 13349 ;;		_pic_to_led
 13350 ;;		_putchar_b_buf
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354                           	psect	text63
 13355  0025F8                     __ptext63:
 13356                           	opt stack 0
 13357  0025F8                     _pixel_on:
 13358                           	opt stack 24
 13359                           
 13360                           ;incstack = 0
 13361                           ;pixel_on@x stored from wreg
 13362  0025F8  6E12               	movwf	pixel_on@x,c
 13363                           
 13364                           ;display.c: 16: Dis_Buff[x] |= (1<<y);
 13365  0025FA  C00F  F010         	movff	pixel_on@y,??_pixel_on
 13366  0025FE  0E01               	movlw	1
 13367  002600  6E11               	movwf	(??_pixel_on+1)& (0+255),c
 13368  002602  2A10               	incf	??_pixel_on,f,c
 13369  002604  D002               	goto	u3524
 13370  002606                     u3525:
 13371  002606  90D8               	bcf	status,0,c
 13372  002608  3611               	rlcf	??_pixel_on+1,f,c
 13373  00260A                     u3524:
 13374  00260A  2E10               	decfsz	??_pixel_on,f,c
 13375  00260C  D7FC               	goto	u3525
 13376  00260E  5012               	movf	pixel_on@x,w,c
 13377  002610  0FAB               	addlw	low _Dis_Buff
 13378  002612  6ED9               	movwf	fsr2l,c
 13379  002614  6ADA               	clrf	fsr2h,c
 13380  002616  5011               	movf	??_pixel_on+1,w,c
 13381  002618  12DF               	iorwf	indf2,f,c
 13382  00261A  0012               	return		;funcret
 13383  00261C                     __end_of_pixel_on:
 13384                           	opt stack 0
 13385                           tosu	equ	0xFFF
 13386                           tosh	equ	0xFFE
 13387                           tosl	equ	0xFFD
 13388                           pclath	equ	0xFFA
 13389                           tblptru	equ	0xFF8
 13390                           tblptrh	equ	0xFF7
 13391                           tblptrl	equ	0xFF6
 13392                           tablat	equ	0xFF5
 13393                           prodh	equ	0xFF4
 13394                           prodl	equ	0xFF3
 13395                           intcon	equ	0xFF2
 13396                           intcon2	equ	0xFF1
 13397                           postinc0	equ	0xFEE
 13398                           wreg	equ	0xFE8
 13399                           indf1	equ	0xFE7
 13400                           plusw1	equ	0xFE3
 13401                           fsr1h	equ	0xFE2
 13402                           fsr1l	equ	0xFE1
 13403                           indf2	equ	0xFDF
 13404                           postinc2	equ	0xFDE
 13405                           postdec2	equ	0xFDD
 13406                           plusw2	equ	0xFDB
 13407                           fsr2h	equ	0xFDA
 13408                           fsr2l	equ	0xFD9
 13409                           status	equ	0xFD8
 13410                           
 13411 ;; *************** function _pixel_off *****************
 13412 ;; Defined at:
 13413 ;;		line 22 in file "display.c"
 13414 ;; Parameters:    Size  Location     Type
 13415 ;;  x               1    wreg     unsigned char 
 13416 ;;  y               1   14[COMRAM] unsigned char 
 13417 ;; Auto vars:     Size  Location     Type
 13418 ;;  x               1   18[COMRAM] unsigned char 
 13419 ;; Return value:  Size  Location     Type
 13420 ;;                  1    wreg      void 
 13421 ;; Registers used:
 13422 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13423 ;; Tracked objects:
 13424 ;;		On entry : 0/0
 13425 ;;		On exit  : 0/0
 13426 ;;		Unchanged: 0/0
 13427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13428 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13429 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13430 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13431 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13432 ;;Total ram usage:        5 bytes
 13433 ;; Hardware stack levels used:    1
 13434 ;; Hardware stack levels required when called:    3
 13435 ;; This function calls:
 13436 ;;		Nothing
 13437 ;; This function is called by:
 13438 ;;		_pic_to_led
 13439 ;;		_putchar_b_buf
 13440 ;; This function uses a non-reentrant model
 13441 ;;
 13442                           
 13443                           	psect	text64
 13444  002518                     __ptext64:
 13445                           	opt stack 0
 13446  002518                     _pixel_off:
 13447                           	opt stack 24
 13448                           
 13449                           ;incstack = 0
 13450                           ;pixel_off@x stored from wreg
 13451  002518  6E13               	movwf	pixel_off@x,c
 13452                           
 13453                           ;display.c: 24: Dis_Buff[x] &= ~(1<<y);
 13454  00251A  C00F  F010         	movff	pixel_off@y,??_pixel_off
 13455  00251E  0E01               	movlw	1
 13456  002520  6E11               	movwf	(??_pixel_off+1)& (0+255),c
 13457  002522  2A10               	incf	??_pixel_off,f,c
 13458  002524  D002               	goto	u3534
 13459  002526                     u3535:
 13460  002526  90D8               	bcf	status,0,c
 13461  002528  3611               	rlcf	??_pixel_off+1,f,c
 13462  00252A                     u3534:
 13463  00252A  2E10               	decfsz	??_pixel_off,f,c
 13464  00252C  D7FC               	goto	u3535
 13465  00252E  1C11               	comf	??_pixel_off+1,w,c
 13466  002530  6E12               	movwf	(??_pixel_off+2)& (0+255),c
 13467  002532  5013               	movf	pixel_off@x,w,c
 13468  002534  0FAB               	addlw	low _Dis_Buff
 13469  002536  6ED9               	movwf	fsr2l,c
 13470  002538  6ADA               	clrf	fsr2h,c
 13471  00253A  5012               	movf	??_pixel_off+2,w,c
 13472  00253C  16DF               	andwf	indf2,f,c
 13473  00253E  0012               	return		;funcret
 13474  002540                     __end_of_pixel_off:
 13475                           	opt stack 0
 13476                           tosu	equ	0xFFF
 13477                           tosh	equ	0xFFE
 13478                           tosl	equ	0xFFD
 13479                           pclath	equ	0xFFA
 13480                           tblptru	equ	0xFF8
 13481                           tblptrh	equ	0xFF7
 13482                           tblptrl	equ	0xFF6
 13483                           tablat	equ	0xFF5
 13484                           prodh	equ	0xFF4
 13485                           prodl	equ	0xFF3
 13486                           intcon	equ	0xFF2
 13487                           intcon2	equ	0xFF1
 13488                           postinc0	equ	0xFEE
 13489                           wreg	equ	0xFE8
 13490                           indf1	equ	0xFE7
 13491                           plusw1	equ	0xFE3
 13492                           fsr1h	equ	0xFE2
 13493                           fsr1l	equ	0xFE1
 13494                           indf2	equ	0xFDF
 13495                           postinc2	equ	0xFDE
 13496                           postdec2	equ	0xFDD
 13497                           plusw2	equ	0xFDB
 13498                           fsr2h	equ	0xFDA
 13499                           fsr2l	equ	0xFD9
 13500                           status	equ	0xFD8
 13501                           
 13502 ;; *************** function _clear_matrix *****************
 13503 ;; Defined at:
 13504 ;;		line 146 in file "display.c"
 13505 ;; Parameters:    Size  Location     Type
 13506 ;;		None
 13507 ;; Auto vars:     Size  Location     Type
 13508 ;;  i               1   14[COMRAM] unsigned char 
 13509 ;; Return value:  Size  Location     Type
 13510 ;;                  1    wreg      void 
 13511 ;; Registers used:
 13512 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13513 ;; Tracked objects:
 13514 ;;		On entry : 0/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13522 ;;Total ram usage:        1 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; Hardware stack levels required when called:    3
 13525 ;; This function calls:
 13526 ;;		Nothing
 13527 ;; This function is called by:
 13528 ;;		_main
 13529 ;;		_time_set_hr
 13530 ;;		_home_temp
 13531 ;;		_pressure
 13532 ;; This function uses a non-reentrant model
 13533 ;;
 13534                           
 13535                           	psect	text65
 13536  0027A0                     __ptext65:
 13537                           	opt stack 0
 13538  0027A0                     _clear_matrix:
 13539                           	opt stack 27
 13540                           
 13541                           ;display.c: 148: uint8_t i;
 13542                           ;display.c: 149: for (i=0; i<=4 * 8; i++)
 13543                           
 13544                           ;incstack = 0
 13545  0027A0  6A0F               	clrf	clear_matrix@i,c
 13546  0027A2                     l5689:
 13547                           
 13548                           ;display.c: 150: Dis_Buff[i] = 0;
 13549  0027A2  500F               	movf	clear_matrix@i,w,c
 13550  0027A4  ECD6  F008         	call	PL136	;call to abstracted procedure
 13551  0027A8  2A0F               	incf	clear_matrix@i,f,c
 13552  0027AA  0E20               	movlw	32
 13553  0027AC  640F               	cpfsgt	clear_matrix@i,c
 13554  0027AE  D7F9               	goto	l5689
 13555  0027B0  0C20               	retlw	32
 13556  0027B2                     __end_of_clear_matrix:
 13557                           	opt stack 0
 13558                           tosu	equ	0xFFF
 13559                           tosh	equ	0xFFE
 13560                           tosl	equ	0xFFD
 13561                           pclath	equ	0xFFA
 13562                           tblptru	equ	0xFF8
 13563                           tblptrh	equ	0xFF7
 13564                           tblptrl	equ	0xFF6
 13565                           tablat	equ	0xFF5
 13566                           prodh	equ	0xFF4
 13567                           prodl	equ	0xFF3
 13568                           intcon	equ	0xFF2
 13569                           intcon2	equ	0xFF1
 13570                           postinc0	equ	0xFEE
 13571                           wreg	equ	0xFE8
 13572                           indf1	equ	0xFE7
 13573                           plusw1	equ	0xFE3
 13574                           fsr1h	equ	0xFE2
 13575                           fsr1l	equ	0xFE1
 13576                           indf2	equ	0xFDF
 13577                           postinc2	equ	0xFDE
 13578                           postdec2	equ	0xFDD
 13579                           plusw2	equ	0xFDB
 13580                           fsr2h	equ	0xFDA
 13581                           fsr2l	equ	0xFD9
 13582                           status	equ	0xFD8
 13583                           
 13584 ;; *************** function ___lwmod *****************
 13585 ;; Defined at:
 13586 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;  dividend        2   21[COMRAM] unsigned int 
 13589 ;;  divisor         2   23[COMRAM] unsigned int 
 13590 ;; Auto vars:     Size  Location     Type
 13591 ;;  counter         1   25[COMRAM] unsigned char 
 13592 ;; Return value:  Size  Location     Type
 13593 ;;                  2   21[COMRAM] unsigned int 
 13594 ;; Registers used:
 13595 ;;		wreg, status,2, status,0
 13596 ;; Tracked objects:
 13597 ;;		On entry : 0/0
 13598 ;;		On exit  : 0/0
 13599 ;;		Unchanged: 0/0
 13600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13604 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13605 ;;Total ram usage:        5 bytes
 13606 ;; Hardware stack levels used:    1
 13607 ;; Hardware stack levels required when called:    3
 13608 ;; This function calls:
 13609 ;;		Nothing
 13610 ;; This function is called by:
 13611 ;;		_home_temp
 13612 ;;		_pressure
 13613 ;;		_readTemp_Single
 13614 ;; This function uses a non-reentrant model
 13615 ;;
 13616                           
 13617                           	psect	text66
 13618  0021DA                     __ptext66:
 13619                           	opt stack 0
 13620  0021DA                     ___lwmod:
 13621                           	opt stack 24
 13622                           
 13623                           ;incstack = 0
 13624  0021DA  5018               	movf	___lwmod@divisor,w,c
 13625  0021DC  1019               	iorwf	___lwmod@divisor+1,w,c
 13626  0021DE  E017               	bz	l1686
 13627  0021E0  0E01               	movlw	1
 13628  0021E2  6E1A               	movwf	___lwmod@counter,c
 13629  0021E4  D004               	goto	l5673
 13630  0021E6                     l5671:
 13631  0021E6  90D8               	bcf	status,0,c
 13632  0021E8  3618               	rlcf	___lwmod@divisor,f,c
 13633  0021EA  3619               	rlcf	___lwmod@divisor+1,f,c
 13634  0021EC  2A1A               	incf	___lwmod@counter,f,c
 13635  0021EE                     l5673:
 13636  0021EE  AE19               	btfss	___lwmod@divisor+1,7,c
 13637  0021F0  D7FA               	goto	l5671
 13638  0021F2                     l5675:
 13639  0021F2  5018               	movf	___lwmod@divisor,w,c
 13640  0021F4  5C16               	subwf	___lwmod@dividend,w,c
 13641  0021F6  5019               	movf	___lwmod@divisor+1,w,c
 13642  0021F8  5817               	subwfb	___lwmod@dividend+1,w,c
 13643  0021FA  E304               	bnc	l5679
 13644  0021FC  5018               	movf	___lwmod@divisor,w,c
 13645  0021FE  5E16               	subwf	___lwmod@dividend,f,c
 13646  002200  5019               	movf	___lwmod@divisor+1,w,c
 13647  002202  5A17               	subwfb	___lwmod@dividend+1,f,c
 13648  002204                     l5679:
 13649  002204  90D8               	bcf	status,0,c
 13650  002206  3219               	rrcf	___lwmod@divisor+1,f,c
 13651  002208  3218               	rrcf	___lwmod@divisor,f,c
 13652  00220A  2E1A               	decfsz	___lwmod@counter,f,c
 13653  00220C  D7F2               	goto	l5675
 13654  00220E                     l1686:
 13655  00220E  C016  F016         	movff	___lwmod@dividend,?___lwmod
 13656  002212  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 13657  002216  0012               	return		;funcret
 13658  002218                     __end_of___lwmod:
 13659                           	opt stack 0
 13660                           tosu	equ	0xFFF
 13661                           tosh	equ	0xFFE
 13662                           tosl	equ	0xFFD
 13663                           pclath	equ	0xFFA
 13664                           tblptru	equ	0xFF8
 13665                           tblptrh	equ	0xFF7
 13666                           tblptrl	equ	0xFF6
 13667                           tablat	equ	0xFF5
 13668                           prodh	equ	0xFF4
 13669                           prodl	equ	0xFF3
 13670                           intcon	equ	0xFF2
 13671                           intcon2	equ	0xFF1
 13672                           postinc0	equ	0xFEE
 13673                           wreg	equ	0xFE8
 13674                           indf1	equ	0xFE7
 13675                           plusw1	equ	0xFE3
 13676                           fsr1h	equ	0xFE2
 13677                           fsr1l	equ	0xFE1
 13678                           indf2	equ	0xFDF
 13679                           postinc2	equ	0xFDE
 13680                           postdec2	equ	0xFDD
 13681                           plusw2	equ	0xFDB
 13682                           fsr2h	equ	0xFDA
 13683                           fsr2l	equ	0xFD9
 13684                           status	equ	0xFD8
 13685                           
 13686 ;; *************** function ___lwdiv *****************
 13687 ;; Defined at:
 13688 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 13689 ;; Parameters:    Size  Location     Type
 13690 ;;  dividend        2   14[COMRAM] unsigned int 
 13691 ;;  divisor         2   16[COMRAM] unsigned int 
 13692 ;; Auto vars:     Size  Location     Type
 13693 ;;  quotient        2   19[COMRAM] unsigned int 
 13694 ;;  counter         1   18[COMRAM] unsigned char 
 13695 ;; Return value:  Size  Location     Type
 13696 ;;                  2   14[COMRAM] unsigned int 
 13697 ;; Registers used:
 13698 ;;		wreg, status,2, status,0
 13699 ;; Tracked objects:
 13700 ;;		On entry : 0/0
 13701 ;;		On exit  : 0/0
 13702 ;;		Unchanged: 0/0
 13703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13705 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13707 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13708 ;;Total ram usage:        7 bytes
 13709 ;; Hardware stack levels used:    1
 13710 ;; Hardware stack levels required when called:    3
 13711 ;; This function calls:
 13712 ;;		Nothing
 13713 ;; This function is called by:
 13714 ;;		_home_temp
 13715 ;;		_pressure
 13716 ;;		_readTemp_Single
 13717 ;; This function uses a non-reentrant model
 13718 ;;
 13719                           
 13720                           	psect	text67
 13721  002100                     __ptext67:
 13722                           	opt stack 0
 13723  002100                     ___lwdiv:
 13724                           	opt stack 24
 13725                           
 13726                           ;incstack = 0
 13727  002100  6A14               	clrf	___lwdiv@quotient,c
 13728  002102  6A15               	clrf	___lwdiv@quotient+1,c
 13729  002104  5011               	movf	___lwdiv@divisor,w,c
 13730  002106  1012               	iorwf	___lwdiv@divisor+1,w,c
 13731  002108  E01B               	bz	l1676
 13732  00210A  0E01               	movlw	1
 13733  00210C  6E13               	movwf	___lwdiv@counter,c
 13734  00210E  D004               	goto	l5653
 13735  002110                     l5651:
 13736  002110  90D8               	bcf	status,0,c
 13737  002112  3611               	rlcf	___lwdiv@divisor,f,c
 13738  002114  3612               	rlcf	___lwdiv@divisor+1,f,c
 13739  002116  2A13               	incf	___lwdiv@counter,f,c
 13740  002118                     l5653:
 13741  002118  AE12               	btfss	___lwdiv@divisor+1,7,c
 13742  00211A  D7FA               	goto	l5651
 13743  00211C                     l5655:
 13744  00211C  90D8               	bcf	status,0,c
 13745  00211E  3614               	rlcf	___lwdiv@quotient,f,c
 13746  002120  3615               	rlcf	___lwdiv@quotient+1,f,c
 13747  002122  5011               	movf	___lwdiv@divisor,w,c
 13748  002124  5C0F               	subwf	___lwdiv@dividend,w,c
 13749  002126  5012               	movf	___lwdiv@divisor+1,w,c
 13750  002128  5810               	subwfb	___lwdiv@dividend+1,w,c
 13751  00212A  E305               	bnc	l5663
 13752  00212C  5011               	movf	___lwdiv@divisor,w,c
 13753  00212E  5E0F               	subwf	___lwdiv@dividend,f,c
 13754  002130  5012               	movf	___lwdiv@divisor+1,w,c
 13755  002132  5A10               	subwfb	___lwdiv@dividend+1,f,c
 13756  002134  8014               	bsf	___lwdiv@quotient,0,c
 13757  002136                     l5663:
 13758  002136  90D8               	bcf	status,0,c
 13759  002138  3212               	rrcf	___lwdiv@divisor+1,f,c
 13760  00213A  3211               	rrcf	___lwdiv@divisor,f,c
 13761  00213C  2E13               	decfsz	___lwdiv@counter,f,c
 13762  00213E  D7EE               	goto	l5655
 13763  002140                     l1676:
 13764  002140  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 13765  002144  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13766  002148  0012               	return		;funcret
 13767  00214A                     __end_of___lwdiv:
 13768                           	opt stack 0
 13769                           tosu	equ	0xFFF
 13770                           tosh	equ	0xFFE
 13771                           tosl	equ	0xFFD
 13772                           pclath	equ	0xFFA
 13773                           tblptru	equ	0xFF8
 13774                           tblptrh	equ	0xFF7
 13775                           tblptrl	equ	0xFF6
 13776                           tablat	equ	0xFF5
 13777                           prodh	equ	0xFF4
 13778                           prodl	equ	0xFF3
 13779                           intcon	equ	0xFF2
 13780                           intcon2	equ	0xFF1
 13781                           postinc0	equ	0xFEE
 13782                           wreg	equ	0xFE8
 13783                           indf1	equ	0xFE7
 13784                           plusw1	equ	0xFE3
 13785                           fsr1h	equ	0xFE2
 13786                           fsr1l	equ	0xFE1
 13787                           indf2	equ	0xFDF
 13788                           postinc2	equ	0xFDE
 13789                           postdec2	equ	0xFDD
 13790                           plusw2	equ	0xFDB
 13791                           fsr2h	equ	0xFDA
 13792                           fsr2l	equ	0xFD9
 13793                           status	equ	0xFD8
 13794                           
 13795 ;; *************** function ___lbmod *****************
 13796 ;; Defined at:
 13797 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbmod.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;  dividend        1    wreg     unsigned char 
 13800 ;;  divisor         1   18[COMRAM] unsigned char 
 13801 ;; Auto vars:     Size  Location     Type
 13802 ;;  dividend        1   19[COMRAM] unsigned char 
 13803 ;;  rem             1   21[COMRAM] unsigned char 
 13804 ;;  counter         1   20[COMRAM] unsigned char 
 13805 ;; Return value:  Size  Location     Type
 13806 ;;                  1    wreg      unsigned char 
 13807 ;; Registers used:
 13808 ;;		wreg, status,2, status,0
 13809 ;; Tracked objects:
 13810 ;;		On entry : 0/0
 13811 ;;		On exit  : 0/0
 13812 ;;		Unchanged: 0/0
 13813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13814 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13815 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13817 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13818 ;;Total ram usage:        4 bytes
 13819 ;; Hardware stack levels used:    1
 13820 ;; Hardware stack levels required when called:    3
 13821 ;; This function calls:
 13822 ;;		Nothing
 13823 ;; This function is called by:
 13824 ;;		_FillBuf
 13825 ;;		_decimal_to_bcd
 13826 ;;		_time_set_min
 13827 ;;		_time_set_hr
 13828 ;;		_time_set_yr
 13829 ;;		_time_set_dt
 13830 ;;		_set_font_set
 13831 ;;		_home_temp
 13832 ;;		_pressure
 13833 ;; This function uses a non-reentrant model
 13834 ;;
 13835                           
 13836                           	psect	text68
 13837  002566                     __ptext68:
 13838                           	opt stack 0
 13839  002566                     ___lbmod:
 13840                           	opt stack 23
 13841                           
 13842                           ;incstack = 0
 13843                           ;___lbmod@dividend stored from wreg
 13844  002566  6E14               	movwf	___lbmod@dividend,c
 13845  002568  0E08               	movlw	8
 13846  00256A  6E15               	movwf	___lbmod@counter,c
 13847  00256C  6A16               	clrf	___lbmod@rem,c
 13848  00256E                     l5413:
 13849  00256E  90D8               	bcf	status,0,c
 13850  002570  3414               	rlcf	___lbmod@dividend,w,c
 13851  002572  3416               	rlcf	___lbmod@rem,w,c
 13852  002574  6E16               	movwf	___lbmod@rem,c
 13853  002576  90D8               	bcf	status,0,c
 13854  002578  3614               	rlcf	___lbmod@dividend,f,c
 13855  00257A  5013               	movf	___lbmod@divisor,w,c
 13856  00257C  5C16               	subwf	___lbmod@rem,w,c
 13857  00257E  E302               	bnc	l5421
 13858  002580  5013               	movf	___lbmod@divisor,w,c
 13859  002582  5E16               	subwf	___lbmod@rem,f,c
 13860  002584                     l5421:
 13861  002584  2E15               	decfsz	___lbmod@counter,f,c
 13862  002586  D7F3               	goto	l5413
 13863  002588  5016               	movf	___lbmod@rem,w,c
 13864  00258A  0012               	return		;funcret
 13865  00258C                     __end_of___lbmod:
 13866                           	opt stack 0
 13867                           tosu	equ	0xFFF
 13868                           tosh	equ	0xFFE
 13869                           tosl	equ	0xFFD
 13870                           pclath	equ	0xFFA
 13871                           tblptru	equ	0xFF8
 13872                           tblptrh	equ	0xFF7
 13873                           tblptrl	equ	0xFF6
 13874                           tablat	equ	0xFF5
 13875                           prodh	equ	0xFF4
 13876                           prodl	equ	0xFF3
 13877                           intcon	equ	0xFF2
 13878                           intcon2	equ	0xFF1
 13879                           postinc0	equ	0xFEE
 13880                           wreg	equ	0xFE8
 13881                           indf1	equ	0xFE7
 13882                           plusw1	equ	0xFE3
 13883                           fsr1h	equ	0xFE2
 13884                           fsr1l	equ	0xFE1
 13885                           indf2	equ	0xFDF
 13886                           postinc2	equ	0xFDE
 13887                           postdec2	equ	0xFDD
 13888                           plusw2	equ	0xFDB
 13889                           fsr2h	equ	0xFDA
 13890                           fsr2l	equ	0xFD9
 13891                           status	equ	0xFD8
 13892                           
 13893 ;; *************** function ___lbdiv *****************
 13894 ;; Defined at:
 13895 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbdiv.c"
 13896 ;; Parameters:    Size  Location     Type
 13897 ;;  dividend        1    wreg     unsigned char 
 13898 ;;  divisor         1   14[COMRAM] unsigned char 
 13899 ;; Auto vars:     Size  Location     Type
 13900 ;;  dividend        1   15[COMRAM] unsigned char 
 13901 ;;  quotient        1   17[COMRAM] unsigned char 
 13902 ;;  counter         1   16[COMRAM] unsigned char 
 13903 ;; Return value:  Size  Location     Type
 13904 ;;                  1    wreg      unsigned char 
 13905 ;; Registers used:
 13906 ;;		wreg, status,2, status,0
 13907 ;; Tracked objects:
 13908 ;;		On entry : 0/0
 13909 ;;		On exit  : 0/0
 13910 ;;		Unchanged: 0/0
 13911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13912 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13913 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13915 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13916 ;;Total ram usage:        4 bytes
 13917 ;; Hardware stack levels used:    1
 13918 ;; Hardware stack levels required when called:    3
 13919 ;; This function calls:
 13920 ;;		Nothing
 13921 ;; This function is called by:
 13922 ;;		_FillBuf
 13923 ;;		_decimal_to_bcd
 13924 ;;		_time_set_min
 13925 ;;		_time_set_hr
 13926 ;;		_time_set_yr
 13927 ;;		_time_set_dt
 13928 ;;		_home_temp
 13929 ;;		_pressure
 13930 ;; This function uses a non-reentrant model
 13931 ;;
 13932                           
 13933                           	psect	text69
 13934  0023A8                     __ptext69:
 13935                           	opt stack 0
 13936  0023A8                     ___lbdiv:
 13937                           	opt stack 23
 13938                           
 13939                           ;incstack = 0
 13940                           ;___lbdiv@dividend stored from wreg
 13941  0023A8  6E10               	movwf	___lbdiv@dividend,c
 13942  0023AA  6A12               	clrf	___lbdiv@quotient,c
 13943  0023AC  500F               	movf	___lbdiv@divisor,w,c
 13944  0023AE  E014               	bz	l5405
 13945  0023B0  0E01               	movlw	1
 13946  0023B2  6E11               	movwf	___lbdiv@counter,c
 13947  0023B4  D003               	goto	l5393
 13948  0023B6                     l5389:
 13949  0023B6  90D8               	bcf	status,0,c
 13950  0023B8  360F               	rlcf	___lbdiv@divisor,f,c
 13951  0023BA  2A11               	incf	___lbdiv@counter,f,c
 13952  0023BC                     l5393:
 13953  0023BC  AE0F               	btfss	___lbdiv@divisor,7,c
 13954  0023BE  D7FB               	goto	l5389
 13955  0023C0                     l5395:
 13956  0023C0  90D8               	bcf	status,0,c
 13957  0023C2  3612               	rlcf	___lbdiv@quotient,f,c
 13958  0023C4  500F               	movf	___lbdiv@divisor,w,c
 13959  0023C6  5C10               	subwf	___lbdiv@dividend,w,c
 13960  0023C8  E303               	bnc	l5401
 13961  0023CA  500F               	movf	___lbdiv@divisor,w,c
 13962  0023CC  5E10               	subwf	___lbdiv@dividend,f,c
 13963  0023CE  8012               	bsf	___lbdiv@quotient,0,c
 13964  0023D0                     l5401:
 13965  0023D0  90D8               	bcf	status,0,c
 13966  0023D2  320F               	rrcf	___lbdiv@divisor,f,c
 13967  0023D4  2E11               	decfsz	___lbdiv@counter,f,c
 13968  0023D6  D7F4               	goto	l5395
 13969  0023D8                     l5405:
 13970  0023D8  5012               	movf	___lbdiv@quotient,w,c
 13971  0023DA  0012               	return		;funcret
 13972  0023DC                     __end_of___lbdiv:
 13973                           	opt stack 0
 13974                           tosu	equ	0xFFF
 13975                           tosh	equ	0xFFE
 13976                           tosl	equ	0xFFD
 13977                           pclath	equ	0xFFA
 13978                           tblptru	equ	0xFF8
 13979                           tblptrh	equ	0xFF7
 13980                           tblptrl	equ	0xFF6
 13981                           tablat	equ	0xFF5
 13982                           prodh	equ	0xFF4
 13983                           prodl	equ	0xFF3
 13984                           intcon	equ	0xFF2
 13985                           intcon2	equ	0xFF1
 13986                           postinc0	equ	0xFEE
 13987                           wreg	equ	0xFE8
 13988                           indf1	equ	0xFE7
 13989                           plusw1	equ	0xFE3
 13990                           fsr1h	equ	0xFE2
 13991                           fsr1l	equ	0xFE1
 13992                           indf2	equ	0xFDF
 13993                           postinc2	equ	0xFDE
 13994                           postdec2	equ	0xFDD
 13995                           plusw2	equ	0xFDB
 13996                           fsr2h	equ	0xFDA
 13997                           fsr2l	equ	0xFD9
 13998                           status	equ	0xFD8
 13999                           
 14000 ;; *************** function _RTOS_SetTask *****************
 14001 ;; Defined at:
 14002 ;;		line 22 in file "dispatcher.c"
 14003 ;; Parameters:    Size  Location     Type
 14004 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 14005 ;;		 -> pressure(1), home_temp(1), set_font_set(1), time_set_dy(1), 
 14006 ;;		 -> time_set_dt(1), time_set_mt(1), time_set_yr(1), default_state(1), 
 14007 ;;		 -> time_set_hr(1), time_set_min(1), GetTime(1), key_press(1), 
 14008 ;;		 -> time_led(1), 
 14009 ;;  taskDelay       2   16[COMRAM] unsigned int 
 14010 ;;  taskPeriod      2   18[COMRAM] unsigned int 
 14011 ;; Auto vars:     Size  Location     Type
 14012 ;;  i               1   22[COMRAM] unsigned char 
 14013 ;; Return value:  Size  Location     Type
 14014 ;;                  1    wreg      void 
 14015 ;; Registers used:
 14016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14017 ;; Tracked objects:
 14018 ;;		On entry : 0/0
 14019 ;;		On exit  : 0/0
 14020 ;;		Unchanged: 0/0
 14021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14022 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14024 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14025 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14026 ;;Total ram usage:        9 bytes
 14027 ;; Hardware stack levels used:    1
 14028 ;; Hardware stack levels required when called:    3
 14029 ;; This function calls:
 14030 ;;		Nothing
 14031 ;; This function is called by:
 14032 ;;		_main
 14033 ;;		_time_set_min
 14034 ;;		_time_set_hr
 14035 ;;		_time_set_yr
 14036 ;;		_time_set_mt
 14037 ;;		_time_set_dt
 14038 ;;		_time_set_dy
 14039 ;;		_set_font_set
 14040 ;;		_home_temp
 14041 ;;		_pressure
 14042 ;;		_time_led
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           	psect	text70
 14047  001B52                     __ptext70:
 14048                           	opt stack 0
 14049  001B52                     _RTOS_SetTask:
 14050                           	opt stack 27
 14051                           
 14052                           ;dispatcher.c: 24: uint8_t i;
 14053                           ;dispatcher.c: 26: if(!taskFunc) return;
 14054                           
 14055                           ;incstack = 0
 14056  001B52  500F               	movf	RTOS_SetTask@taskFunc,w,c
 14057  001B54  1010               	iorwf	RTOS_SetTask@taskFunc+1,w,c
 14058  001B56  E101               	bnz	l244
 14059  001B58  0012               	return	
 14060  001B5A                     l244:
 14061                           
 14062                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 14063  001B5A  6A17               	clrf	RTOS_SetTask@i,c
 14064  001B5C  D018               	goto	l5711
 14065  001B5E                     l5699:
 14066                           
 14067                           ;dispatcher.c: 28: {
 14068                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 14069  001B5E  5017               	movf	RTOS_SetTask@i,w,c
 14070  001B60  EC5F  F00C         	call	PL26	;call to abstracted procedure
 14071  001B64  500F               	movf	RTOS_SetTask@taskFunc,w,c	;volatile
 14072  001B66  18DE               	xorwf	postinc2,w,c
 14073  001B68  E111               	bnz	l5709
 14074  001B6A  5010               	movf	RTOS_SetTask@taskFunc+1,w,c	;volatile
 14075  001B6C  18DE               	xorwf	postinc2,w,c
 14076  001B6E  E10E               	bnz	l5709
 14077                           
 14078                           ;dispatcher.c: 30: {
 14079                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 14080  001B70  9EF2               	bcf	intcon,7,c	;volatile
 14081                           
 14082                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 14083  001B72  5017               	movf	RTOS_SetTask@i,w,c
 14084  001B74  EC49  F00B         	call	PL22	;call to abstracted procedure
 14085  001B78  D825               	call	PL132	;call to abstracted procedure
 14086                           
 14087                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 14088  001B7A  5017               	movf	RTOS_SetTask@i,w,c
 14089  001B7C  EC71  F00C         	call	PL32	;call to abstracted procedure
 14090  001B80  D826               	call	PL150	;call to abstracted procedure
 14091                           
 14092                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 14093  001B82  5017               	movf	RTOS_SetTask@i,w,c
 14094  001B84  EC67  F00C         	call	PL28	;call to abstracted procedure
 14095                           
 14096                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 14097  001B88  8EF2               	bsf	intcon,7,c	;volatile
 14098  001B8A  0C00               	retlw	0
 14099  001B8C                     l5709:
 14100  001B8C  2A17               	incf	RTOS_SetTask@i,f,c
 14101  001B8E                     l5711:
 14102  001B8E  5060               	movf	_arrayTail,w,c	;volatile
 14103  001B90  5C17               	subwf	RTOS_SetTask@i,w,c
 14104  001B92  E3E5               	bnc	l5699
 14105                           
 14106                           ;dispatcher.c: 39: }
 14107                           ;dispatcher.c: 40: }
 14108                           ;dispatcher.c: 42: if (arrayTail < 15)
 14109  001B94  0E0F               	movlw	15
 14110  001B96  6060               	cpfslt	_arrayTail,c	;volatile
 14111  001B98  0C0F               	retlw	15
 14112                           
 14113                           ;dispatcher.c: 43: {
 14114                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 14115  001B9A  9EF2               	bcf	intcon,7,c	;volatile
 14116                           
 14117                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 14118  001B9C  5060               	movf	_arrayTail,w,c	;volatile
 14119  001B9E  EC5F  F00C         	call	PL26	;call to abstracted procedure
 14120  001BA2  C00F  FFDE         	movff	RTOS_SetTask@taskFunc,postinc2	;volatile
 14121  001BA6  C010  FFDD         	movff	RTOS_SetTask@taskFunc+1,postdec2	;volatile
 14122                           
 14123                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 14124  001BAA  5060               	movf	_arrayTail,w,c	;volatile
 14125  001BAC  EC49  F00B         	call	PL22	;call to abstracted procedure
 14126  001BB0  D809               	call	PL132	;call to abstracted procedure
 14127                           
 14128                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 14129  001BB2  5060               	movf	_arrayTail,w,c	;volatile
 14130  001BB4  EC71  F00C         	call	PL32	;call to abstracted procedure
 14131  001BB8  D80A               	call	PL150	;call to abstracted procedure
 14132                           
 14133                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 14134  001BBA  5060               	movf	_arrayTail,w,c	;volatile
 14135  001BBC  EC67  F00C         	call	PL28	;call to abstracted procedure
 14136                           
 14137                           ;dispatcher.c: 51: arrayTail++;
 14138                           
 14139                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 14140  001BC0  EF83  F00C         	goto	PL162	;call to abstracted procedure
 14141  001BC4                     __end_of_RTOS_SetTask:
 14142                           	opt stack 0
 14143  001BC4                     PL132:
 14144                           	opt stack 27
 14145  001BC4  C011  FFDE         	movff	RTOS_SetTask@taskDelay,postinc2
 14146  001BC8  C012  FFDD         	movff	RTOS_SetTask@taskDelay+1,postdec2
 14147  001BCC  0012               	return	
 14148  001BCE                     __end_ofPL132:
 14149                           	opt stack 0
 14150  001BCE                     PL150:
 14151                           	opt stack 27
 14152  001BCE  C013  FFDE         	movff	RTOS_SetTask@taskPeriod,postinc2
 14153  001BD2  C014  FFDD         	movff	RTOS_SetTask@taskPeriod+1,postdec2
 14154  001BD6  0012               	return	
 14155  001BD8                     __end_ofPL150:
 14156                           	opt stack 0
 14157                           tosu	equ	0xFFF
 14158                           tosh	equ	0xFFE
 14159                           tosl	equ	0xFFD
 14160                           pclath	equ	0xFFA
 14161                           tblptru	equ	0xFF8
 14162                           tblptrh	equ	0xFF7
 14163                           tblptrl	equ	0xFF6
 14164                           tablat	equ	0xFF5
 14165                           prodh	equ	0xFF4
 14166                           prodl	equ	0xFF3
 14167                           intcon	equ	0xFF2
 14168                           intcon2	equ	0xFF1
 14169                           postinc0	equ	0xFEE
 14170                           wreg	equ	0xFE8
 14171                           indf1	equ	0xFE7
 14172                           plusw1	equ	0xFE3
 14173                           fsr1h	equ	0xFE2
 14174                           fsr1l	equ	0xFE1
 14175                           indf2	equ	0xFDF
 14176                           postinc2	equ	0xFDE
 14177                           postdec2	equ	0xFDD
 14178                           plusw2	equ	0xFDB
 14179                           fsr2h	equ	0xFDA
 14180                           fsr2l	equ	0xFD9
 14181                           status	equ	0xFD8
 14182                           
 14183 ;; *************** function _RTOS_DeleteTask *****************
 14184 ;; Defined at:
 14185 ;;		line 59 in file "dispatcher.c"
 14186 ;; Parameters:    Size  Location     Type
 14187 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 14188 ;;		 -> pressure(1), home_temp(1), set_font_set(1), time_set_dy(1), 
 14189 ;;		 -> time_set_dt(1), time_set_mt(1), time_set_yr(1), default_state(1), 
 14190 ;;		 -> time_set_hr(1), time_set_min(1), GetTime(1), key_press(1), 
 14191 ;;		 -> time_led(1), 
 14192 ;; Auto vars:     Size  Location     Type
 14193 ;;  i               1   22[COMRAM] unsigned char 
 14194 ;; Return value:  Size  Location     Type
 14195 ;;                  1    wreg      void 
 14196 ;; Registers used:
 14197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14198 ;; Tracked objects:
 14199 ;;		On entry : 0/0
 14200 ;;		On exit  : 0/0
 14201 ;;		Unchanged: 0/0
 14202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14206 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14207 ;;Total ram usage:        9 bytes
 14208 ;; Hardware stack levels used:    1
 14209 ;; Hardware stack levels required when called:    3
 14210 ;; This function calls:
 14211 ;;		Nothing
 14212 ;; This function is called by:
 14213 ;;		_RTOS_DispatchTask
 14214 ;;		_time_set_min
 14215 ;;		_time_set_hr
 14216 ;;		_time_set_yr
 14217 ;;		_time_set_mt
 14218 ;;		_time_set_dt
 14219 ;;		_time_set_dy
 14220 ;;		_set_font_set
 14221 ;;		_home_temp
 14222 ;;		_pressure
 14223 ;;		_time_led
 14224 ;; This function uses a non-reentrant model
 14225 ;;
 14226                           
 14227                           	psect	text71
 14228  001AC8                     __ptext71:
 14229                           	opt stack 0
 14230  001AC8                     _RTOS_DeleteTask:
 14231                           	opt stack 25
 14232                           
 14233                           ;dispatcher.c: 61: uint8_t i;
 14234                           ;dispatcher.c: 63: for (i=0; i<arrayTail; i++)
 14235                           
 14236                           ;incstack = 0
 14237  001AC8  6A17               	clrf	RTOS_DeleteTask@i,c
 14238  001ACA  D03F               	goto	l5757
 14239  001ACC                     l5741:
 14240                           
 14241                           ;dispatcher.c: 64: {
 14242                           ;dispatcher.c: 65: if(TaskArray[i].pFunc == taskFunc)
 14243  001ACC  5017               	movf	RTOS_DeleteTask@i,w,c
 14244  001ACE  EC5F  F00C         	call	PL26	;call to abstracted procedure
 14245  001AD2  500F               	movf	RTOS_DeleteTask@taskFunc,w,c	;volatile
 14246  001AD4  18DE               	xorwf	postinc2,w,c
 14247  001AD6  E138               	bnz	l5755
 14248  001AD8  5010               	movf	RTOS_DeleteTask@taskFunc+1,w,c	;volatile
 14249  001ADA  18DE               	xorwf	postinc2,w,c
 14250  001ADC  E135               	bnz	l5755
 14251                           
 14252                           ;dispatcher.c: 66: {
 14253                           ;dispatcher.c: 68: (INTCONbits.GIE = 0);
 14254  001ADE  9EF2               	bcf	intcon,7,c	;volatile
 14255                           
 14256                           ;dispatcher.c: 69: if(i != (arrayTail - 1))
 14257  001AE0  5017               	movf	RTOS_DeleteTask@i,w,c
 14258  001AE2  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 14259  001AE4  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 14260  001AE6  6813               	setf	(??_RTOS_DeleteTask+2)& (0+255),c
 14261  001AE8  6814               	setf	(??_RTOS_DeleteTask+3)& (0+255),c
 14262  001AEA  5060               	movf	_arrayTail,w,c	;volatile
 14263  001AEC  6E15               	movwf	(??_RTOS_DeleteTask+4)& (0+255),c
 14264  001AEE  6A16               	clrf	(??_RTOS_DeleteTask+5)& (0+255),c
 14265  001AF0  5013               	movf	??_RTOS_DeleteTask+2,w,c
 14266  001AF2  2615               	addwf	??_RTOS_DeleteTask+4,f,c
 14267  001AF4  5014               	movf	??_RTOS_DeleteTask+3,w,c
 14268  001AF6  2216               	addwfc	??_RTOS_DeleteTask+5,f,c
 14269  001AF8  5011               	movf	??_RTOS_DeleteTask,w,c
 14270  001AFA  1815               	xorwf	??_RTOS_DeleteTask+4,w,c
 14271  001AFC  E103               	bnz	u3840
 14272  001AFE  5012               	movf	??_RTOS_DeleteTask+1,w,c
 14273  001B00  1816               	xorwf	??_RTOS_DeleteTask+5,w,c
 14274  001B02  E01F               	bz	l5749
 14275  001B04                     u3840:
 14276                           
 14277                           ;dispatcher.c: 70: {
 14278                           ;dispatcher.c: 71: TaskArray[i] = TaskArray[arrayTail - 1];
 14279  001B04  5060               	movf	_arrayTail,w,c	;volatile
 14280  001B06  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 14281  001B08  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 14282  001B0A  90D8               	bcf	status,0,c
 14283  001B0C  3611               	rlcf	??_RTOS_DeleteTask,f,c
 14284  001B0E  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 14285  001B10  90D8               	bcf	status,0,c
 14286  001B12  3611               	rlcf	??_RTOS_DeleteTask,f,c
 14287  001B14  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 14288  001B16  90D8               	bcf	status,0,c
 14289  001B18  3611               	rlcf	??_RTOS_DeleteTask,f,c
 14290  001B1A  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 14291  001B1C  0EF8               	movlw	low (_TaskArray+65528)
 14292  001B1E  2411               	addwf	??_RTOS_DeleteTask,w,c
 14293  001B20  6ED9               	movwf	fsr2l,c
 14294  001B22  0E00               	movlw	high (_TaskArray+65528)
 14295  001B24  2012               	addwfc	??_RTOS_DeleteTask+1,w,c
 14296  001B26  6EDA               	movwf	fsr2h,c
 14297  001B28  5017               	movf	RTOS_DeleteTask@i,w,c
 14298  001B2A  0D08               	mullw	8
 14299  001B2C  0E00               	movlw	low _TaskArray
 14300  001B2E  24F3               	addwf	prodl,w,c
 14301  001B30  6EE1               	movwf	fsr1l,c
 14302  001B32  0E01               	movlw	high _TaskArray
 14303  001B34  20F4               	addwfc	prodh,w,c
 14304  001B36  6EE2               	movwf	fsr1h,c
 14305  001B38  0E07               	movlw	7
 14306  001B3A                     u3851:
 14307  001B3A  CFDB FFE3          	movff	plusw2,plusw1
 14308  001B3E  06E8               	decf	wreg,f,c
 14309  001B40  E2FC               	bc	u3851
 14310  001B42                     l5749:
 14311                           
 14312                           ;dispatcher.c: 72: }
 14313                           ;dispatcher.c: 73: arrayTail--;
 14314  001B42  0660               	decf	_arrayTail,f,c	;volatile
 14315                           
 14316                           ;dispatcher.c: 74: (INTCONbits.GIE = 1);
 14317  001B44  8EF2               	bsf	intcon,7,c	;volatile
 14318  001B46  0012               	return	
 14319  001B48                     l5755:
 14320  001B48  2A17               	incf	RTOS_DeleteTask@i,f,c
 14321  001B4A                     l5757:
 14322  001B4A  5060               	movf	_arrayTail,w,c	;volatile
 14323  001B4C  5C17               	subwf	RTOS_DeleteTask@i,w,c
 14324  001B4E  E3BE               	bnc	l5741
 14325  001B50  0012               	return		;funcret
 14326  001B52                     __end_of_RTOS_DeleteTask:
 14327                           	opt stack 0
 14328                           tosu	equ	0xFFF
 14329                           tosh	equ	0xFFE
 14330                           tosl	equ	0xFFD
 14331                           pclath	equ	0xFFA
 14332                           tblptru	equ	0xFF8
 14333                           tblptrh	equ	0xFF7
 14334                           tblptrl	equ	0xFF6
 14335                           tablat	equ	0xFF5
 14336                           prodh	equ	0xFF4
 14337                           prodl	equ	0xFF3
 14338                           intcon	equ	0xFF2
 14339                           intcon2	equ	0xFF1
 14340                           postinc0	equ	0xFEE
 14341                           wreg	equ	0xFE8
 14342                           indf1	equ	0xFE7
 14343                           plusw1	equ	0xFE3
 14344                           fsr1h	equ	0xFE2
 14345                           fsr1l	equ	0xFE1
 14346                           indf2	equ	0xFDF
 14347                           postinc2	equ	0xFDE
 14348                           postdec2	equ	0xFDD
 14349                           plusw2	equ	0xFDB
 14350                           fsr2h	equ	0xFDA
 14351                           fsr2l	equ	0xFD9
 14352                           status	equ	0xFD8
 14353                           
 14354 ;; *************** function _getTime *****************
 14355 ;; Defined at:
 14356 ;;		line 49 in file "ds3231.c"
 14357 ;; Parameters:    Size  Location     Type
 14358 ;;  p3              1   19[COMRAM] PTR unsigned char 
 14359 ;;		 -> TTime(7), 
 14360 ;;  p2              1   20[COMRAM] PTR unsigned char 
 14361 ;;		 -> TTime(7), 
 14362 ;;  p1              1   21[COMRAM] PTR unsigned char 
 14363 ;;		 -> TTime(7), 
 14364 ;; Auto vars:     Size  Location     Type
 14365 ;;		None
 14366 ;; Return value:  Size  Location     Type
 14367 ;;                  1    wreg      void 
 14368 ;; Registers used:
 14369 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14370 ;; Tracked objects:
 14371 ;;		On entry : 0/0
 14372 ;;		On exit  : 0/0
 14373 ;;		Unchanged: 0/0
 14374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14375 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14378 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14379 ;;Total ram usage:        3 bytes
 14380 ;; Hardware stack levels used:    1
 14381 ;; Hardware stack levels required when called:    6
 14382 ;; This function calls:
 14383 ;;		_DS3231_Read
 14384 ;;		_bcd_to_decimal
 14385 ;; This function is called by:
 14386 ;;		_GetTime
 14387 ;;		_home_temp
 14388 ;;		_pressure
 14389 ;; This function uses a non-reentrant model
 14390 ;;
 14391                           
 14392                           	psect	text72
 14393  001F64                     __ptext72:
 14394                           	opt stack 0
 14395  001F64                     _getTime:
 14396                           	opt stack 22
 14397                           
 14398                           ;ds3231.c: 51: *p1 = DS3231_Read(0x00);
 14399                           
 14400                           ;incstack = 0
 14401  001F64  5016               	movf	getTime@p1,w,c
 14402  001F66  6ED9               	movwf	fsr2l,c
 14403  001F68  6ADA               	clrf	fsr2h,c
 14404  001F6A  0E00               	movlw	0
 14405  001F6C  EC62  F012         	call	_DS3231_Read
 14406  001F70  6EDF               	movwf	indf2,c
 14407                           
 14408                           ;ds3231.c: 52: *p1 = bcd_to_decimal(*p1);
 14409  001F72  5016               	movf	getTime@p1,w,c
 14410  001F74  6ED9               	movwf	fsr2l,c
 14411  001F76  6ADA               	clrf	fsr2h,c
 14412  001F78  5016               	movf	getTime@p1,w,c
 14413  001F7A  EC5C  F00E         	call	PL96	;call to abstracted procedure
 14414  001F7E  ECA9  F013         	call	_bcd_to_decimal
 14415                           
 14416                           ;ds3231.c: 53: *p2 = DS3231_Read(0x01);
 14417  001F82  D816               	call	PL144	;call to abstracted procedure
 14418  001F84  0E01               	movlw	1
 14419  001F86  EC62  F012         	call	_DS3231_Read
 14420                           
 14421                           ;ds3231.c: 54: *p2 = bcd_to_decimal(*p2);
 14422  001F8A  D812               	call	PL144	;call to abstracted procedure
 14423  001F8C  5015               	movf	getTime@p2,w,c
 14424  001F8E  EC5C  F00E         	call	PL96	;call to abstracted procedure
 14425  001F92  ECA9  F013         	call	_bcd_to_decimal
 14426                           
 14427                           ;ds3231.c: 55: *p3 = (0x3F & DS3231_Read(0x02));
 14428  001F96  D811               	call	PL148	;call to abstracted procedure
 14429  001F98  0E02               	movlw	2
 14430  001F9A  EC62  F012         	call	_DS3231_Read
 14431  001F9E  0B3F               	andlw	63
 14432                           
 14433                           ;ds3231.c: 56: *p3 = bcd_to_decimal(*p3);
 14434  001FA0  D80C               	call	PL148	;call to abstracted procedure
 14435  001FA2  5014               	movf	getTime@p3,w,c
 14436  001FA4  EC5C  F00E         	call	PL96	;call to abstracted procedure
 14437  001FA8  ECA9  F013         	call	_bcd_to_decimal
 14438  001FAC  6EDF               	movwf	indf2,c
 14439  001FAE  0012               	return		;funcret
 14440  001FB0                     __end_of_getTime:
 14441                           	opt stack 0
 14442  001FB0                     PL144:
 14443                           	opt stack 22
 14444  001FB0  6EDF               	movwf	indf2,c
 14445  001FB2  5015               	movf	getTime@p2,w,c
 14446  001FB4  6ED9               	movwf	fsr2l,c
 14447  001FB6  6ADA               	clrf	fsr2h,c
 14448  001FB8  0012               	return	
 14449  001FBA                     __end_ofPL144:
 14450                           	opt stack 0
 14451  001FBA                     PL148:
 14452                           	opt stack 22
 14453  001FBA  6EDF               	movwf	indf2,c
 14454  001FBC  5014               	movf	getTime@p3,w,c
 14455  001FBE  6ED9               	movwf	fsr2l,c
 14456  001FC0  6ADA               	clrf	fsr2h,c
 14457  001FC2  0012               	return	
 14458  001FC4                     __end_ofPL148:
 14459                           	opt stack 0
 14460                           tosu	equ	0xFFF
 14461                           tosh	equ	0xFFE
 14462                           tosl	equ	0xFFD
 14463                           pclath	equ	0xFFA
 14464                           tblptru	equ	0xFF8
 14465                           tblptrh	equ	0xFF7
 14466                           tblptrl	equ	0xFF6
 14467                           tablat	equ	0xFF5
 14468                           prodh	equ	0xFF4
 14469                           prodl	equ	0xFF3
 14470                           intcon	equ	0xFF2
 14471                           intcon2	equ	0xFF1
 14472                           postinc0	equ	0xFEE
 14473                           wreg	equ	0xFE8
 14474                           indf1	equ	0xFE7
 14475                           plusw1	equ	0xFE3
 14476                           fsr1h	equ	0xFE2
 14477                           fsr1l	equ	0xFE1
 14478                           indf2	equ	0xFDF
 14479                           postinc2	equ	0xFDE
 14480                           postdec2	equ	0xFDD
 14481                           plusw2	equ	0xFDB
 14482                           fsr2h	equ	0xFDA
 14483                           fsr2l	equ	0xFD9
 14484                           status	equ	0xFD8
 14485                           
 14486 ;; *************** function _getDate *****************
 14487 ;; Defined at:
 14488 ;;		line 62 in file "ds3231.c"
 14489 ;; Parameters:    Size  Location     Type
 14490 ;;  p4              1   19[COMRAM] PTR unsigned char 
 14491 ;;		 -> TTime(7), 
 14492 ;;  p3              1   20[COMRAM] PTR unsigned char 
 14493 ;;		 -> TTime(7), 
 14494 ;;  p2              1   21[COMRAM] PTR unsigned char 
 14495 ;;		 -> TTime(7), 
 14496 ;;  p1              1   22[COMRAM] PTR unsigned char 
 14497 ;;		 -> TTime(7), 
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;		None
 14500 ;; Return value:  Size  Location     Type
 14501 ;;                  1    wreg      void 
 14502 ;; Registers used:
 14503 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14504 ;; Tracked objects:
 14505 ;;		On entry : 0/0
 14506 ;;		On exit  : 0/0
 14507 ;;		Unchanged: 0/0
 14508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14512 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14513 ;;Total ram usage:        4 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    6
 14516 ;; This function calls:
 14517 ;;		_DS3231_Read
 14518 ;;		_bcd_to_decimal
 14519 ;; This function is called by:
 14520 ;;		_GetTime
 14521 ;; This function uses a non-reentrant model
 14522 ;;
 14523                           
 14524                           	psect	text73
 14525  001C5C                     __ptext73:
 14526                           	opt stack 0
 14527  001C5C                     _getDate:
 14528                           	opt stack 22
 14529                           
 14530                           ;ds3231.c: 64: *p1 = DS3231_Read(0x06);
 14531                           
 14532                           ;incstack = 0
 14533  001C5C  5017               	movf	getDate@p1,w,c
 14534  001C5E  6ED9               	movwf	fsr2l,c
 14535  001C60  6ADA               	clrf	fsr2h,c
 14536  001C62  0E06               	movlw	6
 14537  001C64  EC62  F012         	call	_DS3231_Read
 14538  001C68  6EDF               	movwf	indf2,c
 14539                           
 14540                           ;ds3231.c: 65: *p1 = bcd_to_decimal(*p1);
 14541  001C6A  5017               	movf	getDate@p1,w,c
 14542  001C6C  6ED9               	movwf	fsr2l,c
 14543  001C6E  6ADA               	clrf	fsr2h,c
 14544  001C70  5017               	movf	getDate@p1,w,c
 14545  001C72  D822               	call	PL96	;call to abstracted procedure
 14546  001C74  ECA9  F013         	call	_bcd_to_decimal
 14547                           
 14548                           ;ds3231.c: 66: *p2 = (0x1F & DS3231_Read(0x05));
 14549  001C78  D82D               	call	PL126	;call to abstracted procedure
 14550  001C7A  0E05               	movlw	5
 14551  001C7C  EC62  F012         	call	_DS3231_Read
 14552  001C80  0B1F               	andlw	31
 14553                           
 14554                           ;ds3231.c: 67: *p2 = bcd_to_decimal(*p2);
 14555  001C82  D828               	call	PL126	;call to abstracted procedure
 14556  001C84  5016               	movf	getDate@p2,w,c
 14557  001C86  D818               	call	PL96	;call to abstracted procedure
 14558  001C88  ECA9  F013         	call	_bcd_to_decimal
 14559                           
 14560                           ;ds3231.c: 68: *p3 = (0x3F & DS3231_Read(0x04));
 14561  001C8C  D819               	call	PL114	;call to abstracted procedure
 14562  001C8E  0E04               	movlw	4
 14563  001C90  EC62  F012         	call	_DS3231_Read
 14564  001C94  0B3F               	andlw	63
 14565                           
 14566                           ;ds3231.c: 69: *p3 = bcd_to_decimal(*p3);
 14567  001C96  D814               	call	PL114	;call to abstracted procedure
 14568  001C98  5015               	movf	getDate@p3,w,c
 14569  001C9A  D80E               	call	PL96	;call to abstracted procedure
 14570  001C9C  ECA9  F013         	call	_bcd_to_decimal
 14571                           
 14572                           ;ds3231.c: 70: *p4 = (0x07 & DS3231_Read(0x03));
 14573  001CA0  D814               	call	PL116	;call to abstracted procedure
 14574  001CA2  0E03               	movlw	3
 14575  001CA4  EC62  F012         	call	_DS3231_Read
 14576  001CA8  0B07               	andlw	7
 14577                           
 14578                           ;ds3231.c: 71: *p4 = bcd_to_decimal(*p4);
 14579  001CAA  D80F               	call	PL116	;call to abstracted procedure
 14580  001CAC  5014               	movf	getDate@p4,w,c
 14581  001CAE  D804               	call	PL96	;call to abstracted procedure
 14582  001CB0  ECA9  F013         	call	_bcd_to_decimal
 14583  001CB4  6EDF               	movwf	indf2,c
 14584  001CB6  0012               	return		;funcret
 14585  001CB8                     __end_of_getDate:
 14586                           	opt stack 0
 14587  001CB8                     PL96:
 14588                           	opt stack 22
 14589  001CB8  6EE1               	movwf	fsr1l,c
 14590  001CBA  6AE2               	clrf	fsr1h,c
 14591  001CBC  50E7               	movf	indf1,w,c
 14592  001CBE  0012               	return	
 14593  001CC0                     __end_ofPL96:
 14594                           	opt stack 0
 14595  001CC0                     PL114:
 14596                           	opt stack 22
 14597  001CC0  6EDF               	movwf	indf2,c
 14598  001CC2  5015               	movf	getDate@p3,w,c
 14599  001CC4  6ED9               	movwf	fsr2l,c
 14600  001CC6  6ADA               	clrf	fsr2h,c
 14601  001CC8  0012               	return	
 14602  001CCA                     __end_ofPL114:
 14603                           	opt stack 0
 14604  001CCA                     PL116:
 14605                           	opt stack 22
 14606  001CCA  6EDF               	movwf	indf2,c
 14607  001CCC  5014               	movf	getDate@p4,w,c
 14608  001CCE  6ED9               	movwf	fsr2l,c
 14609  001CD0  6ADA               	clrf	fsr2h,c
 14610  001CD2  0012               	return	
 14611  001CD4                     __end_ofPL116:
 14612                           	opt stack 0
 14613  001CD4                     PL126:
 14614                           	opt stack 22
 14615  001CD4  6EDF               	movwf	indf2,c
 14616  001CD6  5016               	movf	getDate@p2,w,c
 14617  001CD8  6ED9               	movwf	fsr2l,c
 14618  001CDA  6ADA               	clrf	fsr2h,c
 14619  001CDC  0012               	return	
 14620  001CDE                     __end_ofPL126:
 14621                           	opt stack 0
 14622                           tosu	equ	0xFFF
 14623                           tosh	equ	0xFFE
 14624                           tosl	equ	0xFFD
 14625                           pclath	equ	0xFFA
 14626                           tblptru	equ	0xFF8
 14627                           tblptrh	equ	0xFF7
 14628                           tblptrl	equ	0xFF6
 14629                           tablat	equ	0xFF5
 14630                           prodh	equ	0xFF4
 14631                           prodl	equ	0xFF3
 14632                           intcon	equ	0xFF2
 14633                           intcon2	equ	0xFF1
 14634                           postinc0	equ	0xFEE
 14635                           wreg	equ	0xFE8
 14636                           indf1	equ	0xFE7
 14637                           plusw1	equ	0xFE3
 14638                           fsr1h	equ	0xFE2
 14639                           fsr1l	equ	0xFE1
 14640                           indf2	equ	0xFDF
 14641                           postinc2	equ	0xFDE
 14642                           postdec2	equ	0xFDD
 14643                           plusw2	equ	0xFDB
 14644                           fsr2h	equ	0xFDA
 14645                           fsr2l	equ	0xFD9
 14646                           status	equ	0xFD8
 14647                           
 14648 ;; *************** function _bcd_to_decimal *****************
 14649 ;; Defined at:
 14650 ;;		line 4 in file "ds3231.c"
 14651 ;; Parameters:    Size  Location     Type
 14652 ;;  d               1    wreg     unsigned char 
 14653 ;; Auto vars:     Size  Location     Type
 14654 ;;  d               1   15[COMRAM] unsigned char 
 14655 ;; Return value:  Size  Location     Type
 14656 ;;                  1    wreg      unsigned char 
 14657 ;; Registers used:
 14658 ;;		wreg, status,2, status,0, prodl, prodh
 14659 ;; Tracked objects:
 14660 ;;		On entry : 0/0
 14661 ;;		On exit  : 0/0
 14662 ;;		Unchanged: 0/0
 14663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14666 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14667 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14668 ;;Total ram usage:        2 bytes
 14669 ;; Hardware stack levels used:    1
 14670 ;; Hardware stack levels required when called:    3
 14671 ;; This function calls:
 14672 ;;		Nothing
 14673 ;; This function is called by:
 14674 ;;		_getTime
 14675 ;;		_getDate
 14676 ;; This function uses a non-reentrant model
 14677 ;;
 14678                           
 14679                           	psect	text74
 14680  002752                     __ptext74:
 14681                           	opt stack 0
 14682  002752                     _bcd_to_decimal:
 14683                           	opt stack 24
 14684                           
 14685                           ;incstack = 0
 14686                           ;bcd_to_decimal@d stored from wreg
 14687  002752  6E10               	movwf	bcd_to_decimal@d,c
 14688                           
 14689                           ;ds3231.c: 6: return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10));
 14690  002754  C010  F00F         	movff	bcd_to_decimal@d,??_bcd_to_decimal
 14691  002758  0E0F               	movlw	15
 14692  00275A  160F               	andwf	??_bcd_to_decimal,f,c
 14693  00275C  3810               	swapf	bcd_to_decimal@d,w,c
 14694  00275E  0B0F               	andlw	15
 14695  002760  0D0A               	mullw	10
 14696  002762  50F3               	movf	prodl,w,c
 14697  002764  240F               	addwf	??_bcd_to_decimal,w,c
 14698  002766  0012               	return		;funcret
 14699  002768                     __end_of_bcd_to_decimal:
 14700                           	opt stack 0
 14701                           tosu	equ	0xFFF
 14702                           tosh	equ	0xFFE
 14703                           tosl	equ	0xFFD
 14704                           pclath	equ	0xFFA
 14705                           tblptru	equ	0xFF8
 14706                           tblptrh	equ	0xFF7
 14707                           tblptrl	equ	0xFF6
 14708                           tablat	equ	0xFF5
 14709                           prodh	equ	0xFF4
 14710                           prodl	equ	0xFF3
 14711                           intcon	equ	0xFF2
 14712                           intcon2	equ	0xFF1
 14713                           postinc0	equ	0xFEE
 14714                           wreg	equ	0xFE8
 14715                           indf1	equ	0xFE7
 14716                           plusw1	equ	0xFE3
 14717                           fsr1h	equ	0xFE2
 14718                           fsr1l	equ	0xFE1
 14719                           indf2	equ	0xFDF
 14720                           postinc2	equ	0xFDE
 14721                           postdec2	equ	0xFDD
 14722                           plusw2	equ	0xFDB
 14723                           fsr2h	equ	0xFDA
 14724                           fsr2l	equ	0xFD9
 14725                           status	equ	0xFD8
 14726                           
 14727 ;; *************** function _DS3231_Read *****************
 14728 ;; Defined at:
 14729 ;;		line 16 in file "ds3231.c"
 14730 ;; Parameters:    Size  Location     Type
 14731 ;;  address         1    wreg     unsigned char 
 14732 ;; Auto vars:     Size  Location     Type
 14733 ;;  address         1   17[COMRAM] unsigned char 
 14734 ;;  value           1   18[COMRAM] unsigned char 
 14735 ;; Return value:  Size  Location     Type
 14736 ;;                  1    wreg      unsigned char 
 14737 ;; Registers used:
 14738 ;;		wreg, status,2, status,0, cstack
 14739 ;; Tracked objects:
 14740 ;;		On entry : 0/0
 14741 ;;		On exit  : 0/0
 14742 ;;		Unchanged: 0/0
 14743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14745 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14747 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14748 ;;Total ram usage:        2 bytes
 14749 ;; Hardware stack levels used:    1
 14750 ;; Hardware stack levels required when called:    5
 14751 ;; This function calls:
 14752 ;;		_I2C_Master_Read
 14753 ;;		_I2C_Master_RepeatedStart
 14754 ;;		_I2C_Master_Start
 14755 ;;		_I2C_Master_Stop
 14756 ;;		_I2C_Master_Write
 14757 ;; This function is called by:
 14758 ;;		_getTime
 14759 ;;		_getDate
 14760 ;; This function uses a non-reentrant model
 14761 ;;
 14762                           
 14763                           	psect	text75
 14764  0024C4                     __ptext75:
 14765                           	opt stack 0
 14766  0024C4                     _DS3231_Read:
 14767                           	opt stack 22
 14768                           
 14769                           ;incstack = 0
 14770                           ;DS3231_Read@address stored from wreg
 14771  0024C4  6E12               	movwf	DS3231_Read@address,c
 14772                           
 14773                           ;ds3231.c: 19: I2C_Master_Start();
 14774  0024C6  EC03  F014         	call	_I2C_Master_Start	;wreg free
 14775                           
 14776                           ;ds3231.c: 20: I2C_Master_Write(0xD0);
 14777  0024CA  0ED0               	movlw	208
 14778  0024CC  ECF9  F013         	call	_I2C_Master_Write
 14779                           
 14780                           ;ds3231.c: 21: I2C_Master_Write(address);
 14781  0024D0  5012               	movf	DS3231_Read@address,w,c
 14782  0024D2  ECF9  F013         	call	_I2C_Master_Write
 14783                           
 14784                           ;ds3231.c: 22: I2C_Master_RepeatedStart();
 14785  0024D6  EC07  F014         	call	_I2C_Master_RepeatedStart	;wreg free
 14786                           
 14787                           ;ds3231.c: 23: I2C_Master_Write(0xD1);
 14788  0024DA  0ED1               	movlw	209
 14789  0024DC  ECF9  F013         	call	_I2C_Master_Write
 14790                           
 14791                           ;ds3231.c: 24: value = I2C_Master_Read(0);
 14792  0024E0  0E00               	movlw	0
 14793  0024E2  EC0E  F013         	call	_I2C_Master_Read
 14794  0024E6  6E13               	movwf	DS3231_Read@value,c
 14795                           
 14796                           ;ds3231.c: 25: I2C_Master_Stop();
 14797  0024E8  ECFF  F013         	call	_I2C_Master_Stop	;wreg free
 14798                           
 14799                           ;ds3231.c: 26: return value;
 14800  0024EC  5013               	movf	DS3231_Read@value,w,c
 14801  0024EE  0012               	return		;funcret
 14802  0024F0                     __end_of_DS3231_Read:
 14803                           	opt stack 0
 14804                           tosu	equ	0xFFF
 14805                           tosh	equ	0xFFE
 14806                           tosl	equ	0xFFD
 14807                           pclath	equ	0xFFA
 14808                           tblptru	equ	0xFF8
 14809                           tblptrh	equ	0xFF7
 14810                           tblptrl	equ	0xFF6
 14811                           tablat	equ	0xFF5
 14812                           prodh	equ	0xFF4
 14813                           prodl	equ	0xFF3
 14814                           intcon	equ	0xFF2
 14815                           intcon2	equ	0xFF1
 14816                           postinc0	equ	0xFEE
 14817                           wreg	equ	0xFE8
 14818                           indf1	equ	0xFE7
 14819                           plusw1	equ	0xFE3
 14820                           fsr1h	equ	0xFE2
 14821                           fsr1l	equ	0xFE1
 14822                           indf2	equ	0xFDF
 14823                           postinc2	equ	0xFDE
 14824                           postdec2	equ	0xFDD
 14825                           plusw2	equ	0xFDB
 14826                           fsr2h	equ	0xFDA
 14827                           fsr2l	equ	0xFD9
 14828                           status	equ	0xFD8
 14829                           
 14830 ;; *************** function _I2C_Master_Write *****************
 14831 ;; Defined at:
 14832 ;;		line 51 in file "i2c.c"
 14833 ;; Parameters:    Size  Location     Type
 14834 ;;  d               1    wreg     unsigned char 
 14835 ;; Auto vars:     Size  Location     Type
 14836 ;;  d               1   15[COMRAM] unsigned char 
 14837 ;; Return value:  Size  Location     Type
 14838 ;;                  1    wreg      void 
 14839 ;; Registers used:
 14840 ;;		wreg, status,2, status,0, cstack
 14841 ;; Tracked objects:
 14842 ;;		On entry : 0/0
 14843 ;;		On exit  : 0/0
 14844 ;;		Unchanged: 0/0
 14845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14850 ;;Total ram usage:        1 bytes
 14851 ;; Hardware stack levels used:    1
 14852 ;; Hardware stack levels required when called:    4
 14853 ;; This function calls:
 14854 ;;		_I2C_Master_Wait
 14855 ;; This function is called by:
 14856 ;;		_DS3231_Read
 14857 ;;		_DS3231_Write
 14858 ;;		_BMP085ReadByte
 14859 ;;		_bmp085ReadInt
 14860 ;;		_BMP085WriteByte
 14861 ;; This function uses a non-reentrant model
 14862 ;;
 14863                           
 14864                           	psect	text76
 14865  0027F2                     __ptext76:
 14866                           	opt stack 0
 14867  0027F2                     _I2C_Master_Write:
 14868                           	opt stack 23
 14869                           
 14870                           ;incstack = 0
 14871                           ;I2C_Master_Write@d stored from wreg
 14872  0027F2  6E10               	movwf	I2C_Master_Write@d,c
 14873                           
 14874                           ;i2c.c: 53: I2C_Master_Wait();
 14875  0027F4  ECEA  F013         	call	_I2C_Master_Wait	;wreg free
 14876                           
 14877                           ;i2c.c: 54: SSPBUF = d;
 14878  0027F8  C010  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 14879  0027FC  0012               	return		;funcret
 14880  0027FE                     __end_of_I2C_Master_Write:
 14881                           	opt stack 0
 14882                           tosu	equ	0xFFF
 14883                           tosh	equ	0xFFE
 14884                           tosl	equ	0xFFD
 14885                           pclath	equ	0xFFA
 14886                           tblptru	equ	0xFF8
 14887                           tblptrh	equ	0xFF7
 14888                           tblptrl	equ	0xFF6
 14889                           tablat	equ	0xFF5
 14890                           prodh	equ	0xFF4
 14891                           prodl	equ	0xFF3
 14892                           intcon	equ	0xFF2
 14893                           intcon2	equ	0xFF1
 14894                           postinc0	equ	0xFEE
 14895                           wreg	equ	0xFE8
 14896                           indf1	equ	0xFE7
 14897                           plusw1	equ	0xFE3
 14898                           fsr1h	equ	0xFE2
 14899                           fsr1l	equ	0xFE1
 14900                           indf2	equ	0xFDF
 14901                           postinc2	equ	0xFDE
 14902                           postdec2	equ	0xFDD
 14903                           plusw2	equ	0xFDB
 14904                           fsr2h	equ	0xFDA
 14905                           fsr2l	equ	0xFD9
 14906                           status	equ	0xFD8
 14907                           
 14908 ;; *************** function _I2C_Master_Stop *****************
 14909 ;; Defined at:
 14910 ;;		line 44 in file "i2c.c"
 14911 ;; Parameters:    Size  Location     Type
 14912 ;;		None
 14913 ;; Auto vars:     Size  Location     Type
 14914 ;;		None
 14915 ;; Return value:  Size  Location     Type
 14916 ;;                  1    wreg      void 
 14917 ;; Registers used:
 14918 ;;		wreg, status,2, status,0, cstack
 14919 ;; Tracked objects:
 14920 ;;		On entry : 0/0
 14921 ;;		On exit  : 0/0
 14922 ;;		Unchanged: 0/0
 14923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14928 ;;Total ram usage:        0 bytes
 14929 ;; Hardware stack levels used:    1
 14930 ;; Hardware stack levels required when called:    4
 14931 ;; This function calls:
 14932 ;;		_I2C_Master_Wait
 14933 ;; This function is called by:
 14934 ;;		_DS3231_Read
 14935 ;;		_DS3231_Write
 14936 ;;		_BMP085ReadByte
 14937 ;;		_bmp085ReadInt
 14938 ;;		_BMP085WriteByte
 14939 ;; This function uses a non-reentrant model
 14940 ;;
 14941                           
 14942                           	psect	text77
 14943  0027FE                     __ptext77:
 14944                           	opt stack 0
 14945  0027FE                     _I2C_Master_Stop:
 14946                           	opt stack 23
 14947                           
 14948                           ;i2c.c: 46: I2C_Master_Wait();
 14949                           
 14950                           ;incstack = 0
 14951  0027FE  ECEA  F013         	call	_I2C_Master_Wait	;wreg free
 14952                           
 14953                           ;i2c.c: 47: PEN = 1;
 14954  002802  84C5               	bsf	4037,2,c	;volatile
 14955  002804  0012               	return		;funcret
 14956  002806                     __end_of_I2C_Master_Stop:
 14957                           	opt stack 0
 14958                           tosu	equ	0xFFF
 14959                           tosh	equ	0xFFE
 14960                           tosl	equ	0xFFD
 14961                           pclath	equ	0xFFA
 14962                           tblptru	equ	0xFF8
 14963                           tblptrh	equ	0xFF7
 14964                           tblptrl	equ	0xFF6
 14965                           tablat	equ	0xFF5
 14966                           prodh	equ	0xFF4
 14967                           prodl	equ	0xFF3
 14968                           intcon	equ	0xFF2
 14969                           intcon2	equ	0xFF1
 14970                           postinc0	equ	0xFEE
 14971                           wreg	equ	0xFE8
 14972                           indf1	equ	0xFE7
 14973                           plusw1	equ	0xFE3
 14974                           fsr1h	equ	0xFE2
 14975                           fsr1l	equ	0xFE1
 14976                           indf2	equ	0xFDF
 14977                           postinc2	equ	0xFDE
 14978                           postdec2	equ	0xFDD
 14979                           plusw2	equ	0xFDB
 14980                           fsr2h	equ	0xFDA
 14981                           fsr2l	equ	0xFD9
 14982                           status	equ	0xFD8
 14983                           
 14984 ;; *************** function _I2C_Master_Start *****************
 14985 ;; Defined at:
 14986 ;;		line 30 in file "i2c.c"
 14987 ;; Parameters:    Size  Location     Type
 14988 ;;		None
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;		None
 14991 ;; Return value:  Size  Location     Type
 14992 ;;                  1    wreg      void 
 14993 ;; Registers used:
 14994 ;;		wreg, status,2, status,0, cstack
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15004 ;;Total ram usage:        0 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; Hardware stack levels required when called:    4
 15007 ;; This function calls:
 15008 ;;		_I2C_Master_Wait
 15009 ;; This function is called by:
 15010 ;;		_DS3231_Read
 15011 ;;		_DS3231_Write
 15012 ;;		_BMP085ReadByte
 15013 ;;		_bmp085ReadInt
 15014 ;;		_BMP085WriteByte
 15015 ;; This function uses a non-reentrant model
 15016 ;;
 15017                           
 15018                           	psect	text78
 15019  002806                     __ptext78:
 15020                           	opt stack 0
 15021  002806                     _I2C_Master_Start:
 15022                           	opt stack 23
 15023                           
 15024                           ;i2c.c: 32: I2C_Master_Wait();
 15025                           
 15026                           ;incstack = 0
 15027  002806  ECEA  F013         	call	_I2C_Master_Wait	;wreg free
 15028                           
 15029                           ;i2c.c: 33: SEN = 1;
 15030  00280A  80C5               	bsf	4037,0,c	;volatile
 15031  00280C  0012               	return		;funcret
 15032  00280E                     __end_of_I2C_Master_Start:
 15033                           	opt stack 0
 15034                           tosu	equ	0xFFF
 15035                           tosh	equ	0xFFE
 15036                           tosl	equ	0xFFD
 15037                           pclath	equ	0xFFA
 15038                           tblptru	equ	0xFF8
 15039                           tblptrh	equ	0xFF7
 15040                           tblptrl	equ	0xFF6
 15041                           tablat	equ	0xFF5
 15042                           prodh	equ	0xFF4
 15043                           prodl	equ	0xFF3
 15044                           intcon	equ	0xFF2
 15045                           intcon2	equ	0xFF1
 15046                           postinc0	equ	0xFEE
 15047                           wreg	equ	0xFE8
 15048                           indf1	equ	0xFE7
 15049                           plusw1	equ	0xFE3
 15050                           fsr1h	equ	0xFE2
 15051                           fsr1l	equ	0xFE1
 15052                           indf2	equ	0xFDF
 15053                           postinc2	equ	0xFDE
 15054                           postdec2	equ	0xFDD
 15055                           plusw2	equ	0xFDB
 15056                           fsr2h	equ	0xFDA
 15057                           fsr2l	equ	0xFD9
 15058                           status	equ	0xFD8
 15059                           
 15060 ;; *************** function _I2C_Master_RepeatedStart *****************
 15061 ;; Defined at:
 15062 ;;		line 37 in file "i2c.c"
 15063 ;; Parameters:    Size  Location     Type
 15064 ;;		None
 15065 ;; Auto vars:     Size  Location     Type
 15066 ;;		None
 15067 ;; Return value:  Size  Location     Type
 15068 ;;                  1    wreg      void 
 15069 ;; Registers used:
 15070 ;;		wreg, status,2, status,0, cstack
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15080 ;;Total ram usage:        0 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:    4
 15083 ;; This function calls:
 15084 ;;		_I2C_Master_Wait
 15085 ;; This function is called by:
 15086 ;;		_DS3231_Read
 15087 ;;		_BMP085ReadByte
 15088 ;;		_bmp085ReadInt
 15089 ;; This function uses a non-reentrant model
 15090 ;;
 15091                           
 15092                           	psect	text79
 15093  00280E                     __ptext79:
 15094                           	opt stack 0
 15095  00280E                     _I2C_Master_RepeatedStart:
 15096                           	opt stack 23
 15097                           
 15098                           ;i2c.c: 39: I2C_Master_Wait();
 15099                           
 15100                           ;incstack = 0
 15101  00280E  ECEA  F013         	call	_I2C_Master_Wait	;wreg free
 15102                           
 15103                           ;i2c.c: 40: RSEN = 1;
 15104  002812  82C5               	bsf	4037,1,c	;volatile
 15105  002814  0012               	return		;funcret
 15106  002816                     __end_of_I2C_Master_RepeatedStart:
 15107                           	opt stack 0
 15108                           tosu	equ	0xFFF
 15109                           tosh	equ	0xFFE
 15110                           tosl	equ	0xFFD
 15111                           pclath	equ	0xFFA
 15112                           tblptru	equ	0xFF8
 15113                           tblptrh	equ	0xFF7
 15114                           tblptrl	equ	0xFF6
 15115                           tablat	equ	0xFF5
 15116                           prodh	equ	0xFF4
 15117                           prodl	equ	0xFF3
 15118                           intcon	equ	0xFF2
 15119                           intcon2	equ	0xFF1
 15120                           postinc0	equ	0xFEE
 15121                           wreg	equ	0xFE8
 15122                           indf1	equ	0xFE7
 15123                           plusw1	equ	0xFE3
 15124                           fsr1h	equ	0xFE2
 15125                           fsr1l	equ	0xFE1
 15126                           indf2	equ	0xFDF
 15127                           postinc2	equ	0xFDE
 15128                           postdec2	equ	0xFDD
 15129                           plusw2	equ	0xFDB
 15130                           fsr2h	equ	0xFDA
 15131                           fsr2l	equ	0xFD9
 15132                           status	equ	0xFD8
 15133                           
 15134 ;; *************** function _I2C_Master_Read *****************
 15135 ;; Defined at:
 15136 ;;		line 58 in file "i2c.c"
 15137 ;; Parameters:    Size  Location     Type
 15138 ;;  a               1    wreg     unsigned char 
 15139 ;; Auto vars:     Size  Location     Type
 15140 ;;  a               1   15[COMRAM] unsigned char 
 15141 ;;  temp            1   16[COMRAM] unsigned char 
 15142 ;; Return value:  Size  Location     Type
 15143 ;;                  1    wreg      unsigned char 
 15144 ;; Registers used:
 15145 ;;		wreg, status,2, status,0, cstack
 15146 ;; Tracked objects:
 15147 ;;		On entry : 0/0
 15148 ;;		On exit  : 0/0
 15149 ;;		Unchanged: 0/0
 15150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15152 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15154 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15155 ;;Total ram usage:        2 bytes
 15156 ;; Hardware stack levels used:    1
 15157 ;; Hardware stack levels required when called:    4
 15158 ;; This function calls:
 15159 ;;		_I2C_Master_Wait
 15160 ;; This function is called by:
 15161 ;;		_DS3231_Read
 15162 ;;		_BMP085ReadByte
 15163 ;;		_bmp085ReadInt
 15164 ;; This function uses a non-reentrant model
 15165 ;;
 15166                           
 15167                           	psect	text80
 15168  00261C                     __ptext80:
 15169                           	opt stack 0
 15170  00261C                     _I2C_Master_Read:
 15171                           	opt stack 23
 15172                           
 15173                           ;incstack = 0
 15174                           ;I2C_Master_Read@a stored from wreg
 15175  00261C  6E10               	movwf	I2C_Master_Read@a,c
 15176                           
 15177                           ;i2c.c: 60: uint8_t temp;
 15178                           ;i2c.c: 61: I2C_Master_Wait();
 15179  00261E  ECEA  F013         	call	_I2C_Master_Wait	;wreg free
 15180                           
 15181                           ;i2c.c: 62: RCEN = 1;
 15182  002622  86C5               	bsf	4037,3,c	;volatile
 15183                           
 15184                           ;i2c.c: 63: I2C_Master_Wait();
 15185  002624  ECEA  F013         	call	_I2C_Master_Wait	;wreg free
 15186                           
 15187                           ;i2c.c: 64: temp = SSPBUF;
 15188  002628  CFC9 F011          	movff	4041,I2C_Master_Read@temp	;volatile
 15189                           
 15190                           ;i2c.c: 65: I2C_Master_Wait();
 15191  00262C  ECEA  F013         	call	_I2C_Master_Wait	;wreg free
 15192                           
 15193                           ;i2c.c: 66: ACKDT = (a)?0:1;
 15194  002630  5010               	movf	I2C_Master_Read@a,w,c
 15195  002632  E102               	bnz	u3290
 15196  002634  8AC5               	bsf	4037,5,c	;volatile
 15197  002636  D001               	goto	l5273
 15198  002638                     u3290:
 15199  002638  9AC5               	bcf	4037,5,c	;volatile
 15200  00263A                     l5273:
 15201                           
 15202                           ;i2c.c: 67: ACKEN = 1;
 15203  00263A  88C5               	bsf	4037,4,c	;volatile
 15204                           
 15205                           ;i2c.c: 68: return temp;
 15206  00263C  5011               	movf	I2C_Master_Read@temp,w,c
 15207  00263E  0012               	return		;funcret
 15208  002640                     __end_of_I2C_Master_Read:
 15209                           	opt stack 0
 15210                           tosu	equ	0xFFF
 15211                           tosh	equ	0xFFE
 15212                           tosl	equ	0xFFD
 15213                           pclath	equ	0xFFA
 15214                           tblptru	equ	0xFF8
 15215                           tblptrh	equ	0xFF7
 15216                           tblptrl	equ	0xFF6
 15217                           tablat	equ	0xFF5
 15218                           prodh	equ	0xFF4
 15219                           prodl	equ	0xFF3
 15220                           intcon	equ	0xFF2
 15221                           intcon2	equ	0xFF1
 15222                           postinc0	equ	0xFEE
 15223                           wreg	equ	0xFE8
 15224                           indf1	equ	0xFE7
 15225                           plusw1	equ	0xFE3
 15226                           fsr1h	equ	0xFE2
 15227                           fsr1l	equ	0xFE1
 15228                           indf2	equ	0xFDF
 15229                           postinc2	equ	0xFDE
 15230                           postdec2	equ	0xFDD
 15231                           plusw2	equ	0xFDB
 15232                           fsr2h	equ	0xFDA
 15233                           fsr2l	equ	0xFD9
 15234                           status	equ	0xFD8
 15235                           
 15236 ;; *************** function _I2C_Master_Wait *****************
 15237 ;; Defined at:
 15238 ;;		line 24 in file "i2c.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;		None
 15241 ;; Auto vars:     Size  Location     Type
 15242 ;;		None
 15243 ;; Return value:  Size  Location     Type
 15244 ;;                  1    wreg      void 
 15245 ;; Registers used:
 15246 ;;		wreg, status,2, status,0
 15247 ;; Tracked objects:
 15248 ;;		On entry : 0/0
 15249 ;;		On exit  : 0/0
 15250 ;;		Unchanged: 0/0
 15251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15254 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15255 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15256 ;;Total ram usage:        1 bytes
 15257 ;; Hardware stack levels used:    1
 15258 ;; Hardware stack levels required when called:    3
 15259 ;; This function calls:
 15260 ;;		Nothing
 15261 ;; This function is called by:
 15262 ;;		_I2C_Master_Start
 15263 ;;		_I2C_Master_RepeatedStart
 15264 ;;		_I2C_Master_Stop
 15265 ;;		_I2C_Master_Write
 15266 ;;		_I2C_Master_Read
 15267 ;; This function uses a non-reentrant model
 15268 ;;
 15269                           
 15270                           	psect	text81
 15271  0027D4                     __ptext81:
 15272                           	opt stack 0
 15273  0027D4                     _I2C_Master_Wait:
 15274                           	opt stack 23
 15275  0027D4                     l184:
 15276  0027D4  B4C7               	btfsc	4039,2,c	;volatile
 15277  0027D6  D7FE               	goto	l184
 15278  0027D8  CFC5 F00F          	movff	4037,??_I2C_Master_Wait	;volatile
 15279  0027DC  0E1F               	movlw	31
 15280  0027DE  160F               	andwf	??_I2C_Master_Wait,f,c
 15281  0027E0  E1F9               	bnz	l184
 15282  0027E2  0C1F               	retlw	31	;funcret
 15283  0027E4                     __end_of_I2C_Master_Wait:
 15284                           	opt stack 0
 15285                           tosu	equ	0xFFF
 15286                           tosh	equ	0xFFE
 15287                           tosl	equ	0xFFD
 15288                           pclath	equ	0xFFA
 15289                           tblptru	equ	0xFF8
 15290                           tblptrh	equ	0xFF7
 15291                           tblptrl	equ	0xFF6
 15292                           tablat	equ	0xFF5
 15293                           prodh	equ	0xFF4
 15294                           prodl	equ	0xFF3
 15295                           intcon	equ	0xFF2
 15296                           intcon2	equ	0xFF1
 15297                           postinc0	equ	0xFEE
 15298                           wreg	equ	0xFE8
 15299                           indf1	equ	0xFE7
 15300                           plusw1	equ	0xFE3
 15301                           fsr1h	equ	0xFE2
 15302                           fsr1l	equ	0xFE1
 15303                           indf2	equ	0xFDF
 15304                           postinc2	equ	0xFDE
 15305                           postdec2	equ	0xFDD
 15306                           plusw2	equ	0xFDB
 15307                           fsr2h	equ	0xFDA
 15308                           fsr2l	equ	0xFD9
 15309                           status	equ	0xFD8
 15310                           
 15311 ;; *************** function _INTERRUPT_InterruptManager *****************
 15312 ;; Defined at:
 15313 ;;		line 4 in file "interrupt.c"
 15314 ;; Parameters:    Size  Location     Type
 15315 ;;		None
 15316 ;; Auto vars:     Size  Location     Type
 15317 ;;		None
 15318 ;; Return value:  Size  Location     Type
 15319 ;;                  1    wreg      void 
 15320 ;; Registers used:
 15321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15322 ;; Tracked objects:
 15323 ;;		On entry : 0/0
 15324 ;;		On exit  : 0/0
 15325 ;;		Unchanged: 0/0
 15326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15329 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15330 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15331 ;;Total ram usage:        5 bytes
 15332 ;; Hardware stack levels used:    1
 15333 ;; Hardware stack levels required when called:    2
 15334 ;; This function calls:
 15335 ;;		_INT0_ISR
 15336 ;;		_TMR0_ISR
 15337 ;;		_TMR1_ISR
 15338 ;;		_TMR3_ISR
 15339 ;; This function is called by:
 15340 ;;		Interrupt level 2
 15341 ;; This function uses a non-reentrant model
 15342 ;;
 15343                           
 15344                           	psect	intcode
 15345  000008                     __pintcode:
 15346                           	opt stack 0
 15347  000008                     _INTERRUPT_InterruptManager:
 15348                           	opt stack 21
 15349                           
 15350                           ;incstack = 0
 15351  000008  8271               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15352  00000A  EDEC  F00D         	call	int_func,f	;refresh shadow registers
 15353                           tosu	equ	0xFFF
 15354                           tosh	equ	0xFFE
 15355                           tosl	equ	0xFFD
 15356                           pclath	equ	0xFFA
 15357                           tblptru	equ	0xFF8
 15358                           tblptrh	equ	0xFF7
 15359                           tblptrl	equ	0xFF6
 15360                           tablat	equ	0xFF5
 15361                           prodh	equ	0xFF4
 15362                           prodl	equ	0xFF3
 15363                           intcon	equ	0xFF2
 15364                           intcon2	equ	0xFF1
 15365                           postinc0	equ	0xFEE
 15366                           wreg	equ	0xFE8
 15367                           indf1	equ	0xFE7
 15368                           plusw1	equ	0xFE3
 15369                           fsr1h	equ	0xFE2
 15370                           fsr1l	equ	0xFE1
 15371                           indf2	equ	0xFDF
 15372                           postinc2	equ	0xFDE
 15373                           postdec2	equ	0xFDD
 15374                           plusw2	equ	0xFDB
 15375                           fsr2h	equ	0xFDA
 15376                           fsr2l	equ	0xFD9
 15377                           status	equ	0xFD8
 15378                           
 15379                           	psect	intcode_body
 15380  001BD8                     __pintcode_body:
 15381                           	opt stack 21
 15382  001BD8                     int_func:
 15383                           	opt stack 21
 15384  001BD8  0006               	pop		; remove dummy address from shadow register refresh
 15385  001BDA  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManager+1
 15386  001BDE  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManager+2
 15387  001BE2  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManager+3
 15388  001BE6  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManager+4
 15389                           
 15390                           ;interrupt.c: 7: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 15391  001BEA  BAF2               	btfsc	intcon,5,c	;volatile
 15392  001BEC  A4F2               	btfss	intcon,2,c	;volatile
 15393  001BEE  D003               	goto	i2l332
 15394                           
 15395                           ;interrupt.c: 8: {
 15396                           ;interrupt.c: 9: TMR0_ISR();
 15397  001BF0  ECF2  F013         	call	_TMR0_ISR	;wreg free
 15398                           
 15399                           ;interrupt.c: 10: }
 15400  001BF4  D029               	goto	i2l339
 15401  001BF6                     i2l332:
 15402                           
 15403                           ;interrupt.c: 11: else if (INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
 15404  001BF6  B8F2               	btfsc	intcon,4,c	;volatile
 15405  001BF8  A2F2               	btfss	intcon,1,c	;volatile
 15406  001BFA  D011               	goto	i2l334
 15407                           
 15408                           ;interrupt.c: 12: {
 15409                           ;interrupt.c: 13: INTCONbits.INT0IF = 0;
 15410  001BFC  92F2               	bcf	intcon,1,c	;volatile
 15411  001BFE  0E01               	movlw	1
 15412                           
 15413                           ;interrupt.c: 14: INTCON2bits.INTEDG0 = ~INTCON2bits.INTEDG0;
 15414  001C00  ACF1               	btfss	intcon2,6,c	;volatile
 15415  001C02  0E00               	movlw	0
 15416  001C04  0AFF               	xorlw	255
 15417  001C06  6E0A               	movwf	??_INTERRUPT_InterruptManager& (0+255),c
 15418  001C08  3A0A               	swapf	??_INTERRUPT_InterruptManager,f,c
 15419  001C0A  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 15420  001C0C  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 15421  001C0E  50F1               	movf	intcon2,w,c	;volatile
 15422  001C10  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 15423  001C12  0BBF               	andlw	-65
 15424  001C14  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 15425  001C16  6EF1               	movwf	intcon2,c	;volatile
 15426                           
 15427                           ;interrupt.c: 16: INT0_ISR();
 15428  001C18  ECB4  F013         	call	_INT0_ISR	;wreg free
 15429                           
 15430                           ;interrupt.c: 17: } else if (PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF ==1)
 15431  001C1C  D015               	goto	i2l339
 15432  001C1E                     i2l334:
 15433  001C1E  B09D               	btfsc	3997,0,c	;volatile
 15434  001C20  A09E               	btfss	3998,0,c	;volatile
 15435  001C22  D008               	goto	i2l336
 15436                           
 15437                           ;interrupt.c: 18: {
 15438                           ;interrupt.c: 19: PIR1bits.TMR1IF = 0;
 15439  001C24  909E               	bcf	3998,0,c	;volatile
 15440                           
 15441                           ;interrupt.c: 20: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
 15442  001C26  0E3C               	movlw	60
 15443  001C28  6ECF               	movwf	4047,c	;volatile
 15444                           
 15445                           ;interrupt.c: 21: TMR1L = ((unsigned char)((15536)&0xFF));
 15446  001C2A  0EB0               	movlw	176
 15447  001C2C  6ECE               	movwf	4046,c	;volatile
 15448                           
 15449                           ;interrupt.c: 22: TMR1_ISR();
 15450  001C2E  ECD9  F013         	call	_TMR1_ISR	;wreg free
 15451                           
 15452                           ;interrupt.c: 24: } else if (PIE2bits.TMR3IE == 1 && PIR2bits.TMR3IF ==1)
 15453  001C32  D00A               	goto	i2l339
 15454  001C34                     i2l336:
 15455  001C34  B2A0               	btfsc	4000,1,c	;volatile
 15456  001C36  A2A1               	btfss	4001,1,c	;volatile
 15457  001C38  D007               	goto	i2l339
 15458                           
 15459                           ;interrupt.c: 25: {
 15460                           ;interrupt.c: 26: PIR2bits.TMR3IF = 0;
 15461  001C3A  92A1               	bcf	4001,1,c	;volatile
 15462                           
 15463                           ;interrupt.c: 27: TMR3H = ((unsigned char)(((60536)>>8)&0xFF));
 15464  001C3C  0EEC               	movlw	236
 15465  001C3E  6EB3               	movwf	4019,c	;volatile
 15466                           
 15467                           ;interrupt.c: 28: TMR3L = ((unsigned char)((60536)&0xFF));
 15468  001C40  0E78               	movlw	120
 15469  001C42  6EB2               	movwf	4018,c	;volatile
 15470                           
 15471                           ;interrupt.c: 30: TMR3_ISR();
 15472  001C44  EC83  F013         	call	_TMR3_ISR	;wreg free
 15473  001C48                     i2l339:
 15474  001C48  C00E  FFF4         	movff	??_INTERRUPT_InterruptManager+4,prodh
 15475  001C4C  C00D  FFF3         	movff	??_INTERRUPT_InterruptManager+3,prodl
 15476  001C50  C00C  FFDA         	movff	??_INTERRUPT_InterruptManager+2,fsr2h
 15477  001C54  C00B  FFD9         	movff	??_INTERRUPT_InterruptManager+1,fsr2l
 15478  001C58  9271               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15479  001C5A  0011               	retfie		f
 15480  001C5C                     __end_of_INTERRUPT_InterruptManager:
 15481                           	opt stack 0
 15482                           tosu	equ	0xFFF
 15483                           tosh	equ	0xFFE
 15484                           tosl	equ	0xFFD
 15485                           pclath	equ	0xFFA
 15486                           tblptru	equ	0xFF8
 15487                           tblptrh	equ	0xFF7
 15488                           tblptrl	equ	0xFF6
 15489                           tablat	equ	0xFF5
 15490                           prodh	equ	0xFF4
 15491                           prodl	equ	0xFF3
 15492                           intcon	equ	0xFF2
 15493                           intcon2	equ	0xFF1
 15494                           postinc0	equ	0xFEE
 15495                           wreg	equ	0xFE8
 15496                           indf1	equ	0xFE7
 15497                           plusw1	equ	0xFE3
 15498                           fsr1h	equ	0xFE2
 15499                           fsr1l	equ	0xFE1
 15500                           indf2	equ	0xFDF
 15501                           postinc2	equ	0xFDE
 15502                           postdec2	equ	0xFDD
 15503                           plusw2	equ	0xFDB
 15504                           fsr2h	equ	0xFDA
 15505                           fsr2l	equ	0xFD9
 15506                           status	equ	0xFD8
 15507                           
 15508 ;; *************** function _TMR3_ISR *****************
 15509 ;; Defined at:
 15510 ;;		line 15 in file "sound.c"
 15511 ;; Parameters:    Size  Location     Type
 15512 ;;		None
 15513 ;; Auto vars:     Size  Location     Type
 15514 ;;		None
 15515 ;; Return value:  Size  Location     Type
 15516 ;;                  1    wreg      void 
 15517 ;; Registers used:
 15518 ;;		wreg, status,2, status,0
 15519 ;; Tracked objects:
 15520 ;;		On entry : 0/0
 15521 ;;		On exit  : 0/0
 15522 ;;		Unchanged: 0/0
 15523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15528 ;;Total ram usage:        0 bytes
 15529 ;; Hardware stack levels used:    1
 15530 ;; This function calls:
 15531 ;;		Nothing
 15532 ;; This function is called by:
 15533 ;;		_INTERRUPT_InterruptManager
 15534 ;; This function uses a non-reentrant model
 15535 ;;
 15536                           
 15537                           	psect	text83
 15538  002706                     __ptext83:
 15539                           	opt stack 0
 15540  002706                     _TMR3_ISR:
 15541                           	opt stack 22
 15542                           
 15543                           ;sound.c: 18: if (play_sound)
 15544                           
 15545                           ;incstack = 0
 15546  002706  505C               	movf	_play_sound,w,c
 15547  002708  B4D8               	btfsc	status,2,c
 15548  00270A  0012               	return	
 15549                           
 15550                           ;sound.c: 19: {
 15551                           ;sound.c: 20: count_sound++;
 15552  00270C  2A5A               	incf	_count_sound,f,c
 15553                           
 15554                           ;sound.c: 22: if (count_sound < 20)
 15555  00270E  0E14               	movlw	20
 15556  002710  605A               	cpfslt	_count_sound,c
 15557  002712  D003               	goto	i2l1263
 15558                           
 15559                           ;sound.c: 23: LATD ^= (1<<7);
 15560  002714  0E80               	movlw	128
 15561  002716  1A8C               	xorwf	3980,f,c	;volatile
 15562  002718  0C80               	retlw	128
 15563  00271A                     i2l1263:
 15564                           
 15565                           ;sound.c: 24: else
 15566                           ;sound.c: 25: {
 15567                           ;sound.c: 26: count_sound = 0;
 15568  00271A  6A5A               	clrf	_count_sound,c
 15569                           
 15570                           ;sound.c: 27: play_sound = 0;
 15571  00271C  6A5C               	clrf	_play_sound,c
 15572                           
 15573                           ;sound.c: 28: LATD &= ~(1<<7);
 15574  00271E  9E8C               	bcf	3980,7,c	;volatile
 15575  002720  0012               	return		;funcret
 15576  002722                     __end_of_TMR3_ISR:
 15577                           	opt stack 0
 15578                           tosu	equ	0xFFF
 15579                           tosh	equ	0xFFE
 15580                           tosl	equ	0xFFD
 15581                           pclath	equ	0xFFA
 15582                           tblptru	equ	0xFF8
 15583                           tblptrh	equ	0xFF7
 15584                           tblptrl	equ	0xFF6
 15585                           tablat	equ	0xFF5
 15586                           prodh	equ	0xFF4
 15587                           prodl	equ	0xFF3
 15588                           intcon	equ	0xFF2
 15589                           intcon2	equ	0xFF1
 15590                           postinc0	equ	0xFEE
 15591                           wreg	equ	0xFE8
 15592                           indf1	equ	0xFE7
 15593                           plusw1	equ	0xFE3
 15594                           fsr1h	equ	0xFE2
 15595                           fsr1l	equ	0xFE1
 15596                           indf2	equ	0xFDF
 15597                           postinc2	equ	0xFDE
 15598                           postdec2	equ	0xFDD
 15599                           plusw2	equ	0xFDB
 15600                           fsr2h	equ	0xFDA
 15601                           fsr2l	equ	0xFD9
 15602                           status	equ	0xFD8
 15603                           
 15604 ;; *************** function _TMR1_ISR *****************
 15605 ;; Defined at:
 15606 ;;		line 714 in file "common.c"
 15607 ;; Parameters:    Size  Location     Type
 15608 ;;		None
 15609 ;; Auto vars:     Size  Location     Type
 15610 ;;		None
 15611 ;; Return value:  Size  Location     Type
 15612 ;;                  1    wreg      void 
 15613 ;; Registers used:
 15614 ;;		wreg, status,2, status,0
 15615 ;; Tracked objects:
 15616 ;;		On entry : 0/0
 15617 ;;		On exit  : 0/0
 15618 ;;		Unchanged: 0/0
 15619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15624 ;;Total ram usage:        0 bytes
 15625 ;; Hardware stack levels used:    1
 15626 ;; This function calls:
 15627 ;;		Nothing
 15628 ;; This function is called by:
 15629 ;;		_INTERRUPT_InterruptManager
 15630 ;; This function uses a non-reentrant model
 15631 ;;
 15632                           
 15633                           	psect	text84
 15634  0027B2                     __ptext84:
 15635                           	opt stack 0
 15636  0027B2                     _TMR1_ISR:
 15637                           	opt stack 22
 15638                           
 15639                           ;common.c: 718: if(++timer_val >= 150)
 15640                           
 15641                           ;incstack = 0
 15642  0027B2  2A6C               	incf	_timer_val,f,c
 15643  0027B4  0E95               	movlw	149
 15644  0027B6  646C               	cpfsgt	_timer_val,c
 15645  0027B8  0C95               	retlw	149
 15646                           
 15647                           ;common.c: 719: {
 15648                           ;common.c: 720: timer_val = 0;
 15649  0027BA  6A6C               	clrf	_timer_val,c
 15650                           
 15651                           ;common.c: 721: time_flag = 1;
 15652  0027BC  0E01               	movlw	1
 15653  0027BE  6E6B               	movwf	_time_flag,c
 15654                           
 15655                           ;common.c: 722: T1CONbits.TMR1ON = 0;
 15656  0027C0  90CD               	bcf	4045,0,c	;volatile
 15657  0027C2  0C01               	retlw	1	;funcret
 15658  0027C4                     __end_of_TMR1_ISR:
 15659                           	opt stack 0
 15660                           tosu	equ	0xFFF
 15661                           tosh	equ	0xFFE
 15662                           tosl	equ	0xFFD
 15663                           pclath	equ	0xFFA
 15664                           tblptru	equ	0xFF8
 15665                           tblptrh	equ	0xFF7
 15666                           tblptrl	equ	0xFF6
 15667                           tablat	equ	0xFF5
 15668                           prodh	equ	0xFF4
 15669                           prodl	equ	0xFF3
 15670                           intcon	equ	0xFF2
 15671                           intcon2	equ	0xFF1
 15672                           postinc0	equ	0xFEE
 15673                           wreg	equ	0xFE8
 15674                           indf1	equ	0xFE7
 15675                           plusw1	equ	0xFE3
 15676                           fsr1h	equ	0xFE2
 15677                           fsr1l	equ	0xFE1
 15678                           indf2	equ	0xFDF
 15679                           postinc2	equ	0xFDE
 15680                           postdec2	equ	0xFDD
 15681                           plusw2	equ	0xFDB
 15682                           fsr2h	equ	0xFDA
 15683                           fsr2l	equ	0xFD9
 15684                           status	equ	0xFD8
 15685                           
 15686 ;; *************** function _TMR0_ISR *****************
 15687 ;; Defined at:
 15688 ;;		line 127 in file "dispatcher.c"
 15689 ;; Parameters:    Size  Location     Type
 15690 ;;		None
 15691 ;; Auto vars:     Size  Location     Type
 15692 ;;		None
 15693 ;; Return value:  Size  Location     Type
 15694 ;;                  1    wreg      void 
 15695 ;; Registers used:
 15696 ;;		wreg, status,2
 15697 ;; Tracked objects:
 15698 ;;		On entry : 0/0
 15699 ;;		On exit  : 0/0
 15700 ;;		Unchanged: 0/0
 15701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15706 ;;Total ram usage:        0 bytes
 15707 ;; Hardware stack levels used:    1
 15708 ;; This function calls:
 15709 ;;		Nothing
 15710 ;; This function is called by:
 15711 ;;		_INTERRUPT_InterruptManager
 15712 ;; This function uses a non-reentrant model
 15713 ;;
 15714                           
 15715                           	psect	text85
 15716  0027E4                     __ptext85:
 15717                           	opt stack 0
 15718  0027E4                     _TMR0_ISR:
 15719                           	opt stack 22
 15720                           
 15721                           ;dispatcher.c: 131: INTCONbits.TMR0IF = 0;
 15722                           
 15723                           ;incstack = 0
 15724  0027E4  94F2               	bcf	intcon,2,c	;volatile
 15725                           
 15726                           ;dispatcher.c: 132: TMR0 = 61;
 15727  0027E6  6AD7               	clrf	4055,c	;volatile
 15728  0027E8  0E3D               	movlw	61
 15729  0027EA  6ED6               	movwf	4054,c	;volatile
 15730                           
 15731                           ;dispatcher.c: 133: Timer0Interrupt = 1;
 15732  0027EC  0E01               	movlw	1
 15733  0027EE  6E5F               	movwf	_Timer0Interrupt,c
 15734  0027F0  0C01               	retlw	1	;funcret
 15735  0027F2                     __end_of_TMR0_ISR:
 15736                           	opt stack 0
 15737                           tosu	equ	0xFFF
 15738                           tosh	equ	0xFFE
 15739                           tosl	equ	0xFFD
 15740                           pclath	equ	0xFFA
 15741                           tblptru	equ	0xFF8
 15742                           tblptrh	equ	0xFF7
 15743                           tblptrl	equ	0xFF6
 15744                           tablat	equ	0xFF5
 15745                           prodh	equ	0xFF4
 15746                           prodl	equ	0xFF3
 15747                           intcon	equ	0xFF2
 15748                           intcon2	equ	0xFF1
 15749                           postinc0	equ	0xFEE
 15750                           wreg	equ	0xFE8
 15751                           indf1	equ	0xFE7
 15752                           plusw1	equ	0xFE3
 15753                           fsr1h	equ	0xFE2
 15754                           fsr1l	equ	0xFE1
 15755                           indf2	equ	0xFDF
 15756                           postinc2	equ	0xFDE
 15757                           postdec2	equ	0xFDD
 15758                           plusw2	equ	0xFDB
 15759                           fsr2h	equ	0xFDA
 15760                           fsr2l	equ	0xFD9
 15761                           status	equ	0xFD8
 15762                           
 15763 ;; *************** function _INT0_ISR *****************
 15764 ;; Defined at:
 15765 ;;		line 697 in file "common.c"
 15766 ;; Parameters:    Size  Location     Type
 15767 ;;		None
 15768 ;; Auto vars:     Size  Location     Type
 15769 ;;		None
 15770 ;; Return value:  Size  Location     Type
 15771 ;;                  1    wreg      void 
 15772 ;; Registers used:
 15773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15774 ;; Tracked objects:
 15775 ;;		On entry : 0/0
 15776 ;;		On exit  : 0/0
 15777 ;;		Unchanged: 0/0
 15778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15783 ;;Total ram usage:        0 bytes
 15784 ;; Hardware stack levels used:    1
 15785 ;; Hardware stack levels required when called:    1
 15786 ;; This function calls:
 15787 ;;		i2_RTOS_SetTask
 15788 ;; This function is called by:
 15789 ;;		_INTERRUPT_InterruptManager
 15790 ;; This function uses a non-reentrant model
 15791 ;;
 15792                           
 15793                           	psect	text86
 15794  002768                     __ptext86:
 15795                           	opt stack 0
 15796  002768                     _INT0_ISR:
 15797                           	opt stack 21
 15798                           
 15799                           ;common.c: 706: RTOS_SetTask(GetTime, 0, 0);
 15800                           
 15801                           ;incstack = 0
 15802  002768  0E96               	movlw	low _GetTime
 15803  00276A  6E01               	movwf	i2RTOS_SetTask@taskFunc,c
 15804  00276C  0E26               	movlw	high _GetTime
 15805  00276E  6E02               	movwf	i2RTOS_SetTask@taskFunc+1,c
 15806  002770  6A04               	clrf	i2RTOS_SetTask@taskDelay+1,c
 15807  002772  6A03               	clrf	i2RTOS_SetTask@taskDelay,c
 15808  002774  6A06               	clrf	i2RTOS_SetTask@taskPeriod+1,c
 15809  002776  6A05               	clrf	i2RTOS_SetTask@taskPeriod,c
 15810  002778  EF2D  F00C         	goto	i2_RTOS_SetTask	;wreg free
 15811  00277C                     __end_of_INT0_ISR:
 15812                           	opt stack 0
 15813                           tosu	equ	0xFFF
 15814                           tosh	equ	0xFFE
 15815                           tosl	equ	0xFFD
 15816                           pclath	equ	0xFFA
 15817                           tblptru	equ	0xFF8
 15818                           tblptrh	equ	0xFF7
 15819                           tblptrl	equ	0xFF6
 15820                           tablat	equ	0xFF5
 15821                           prodh	equ	0xFF4
 15822                           prodl	equ	0xFF3
 15823                           intcon	equ	0xFF2
 15824                           intcon2	equ	0xFF1
 15825                           postinc0	equ	0xFEE
 15826                           wreg	equ	0xFE8
 15827                           indf1	equ	0xFE7
 15828                           plusw1	equ	0xFE3
 15829                           fsr1h	equ	0xFE2
 15830                           fsr1l	equ	0xFE1
 15831                           indf2	equ	0xFDF
 15832                           postinc2	equ	0xFDE
 15833                           postdec2	equ	0xFDD
 15834                           plusw2	equ	0xFDB
 15835                           fsr2h	equ	0xFDA
 15836                           fsr2l	equ	0xFD9
 15837                           status	equ	0xFD8
 15838                           
 15839 ;; *************** function i2_RTOS_SetTask *****************
 15840 ;; Defined at:
 15841 ;;		line 22 in file "dispatcher.c"
 15842 ;; Parameters:    Size  Location     Type
 15843 ;;  taskFunc        2    0[COMRAM] PTR FTN()void 
 15844 ;;		 -> pressure(1), home_temp(1), set_font_set(1), time_set_dy(1), 
 15845 ;;		 -> time_set_dt(1), time_set_mt(1), time_set_yr(1), default_state(1), 
 15846 ;;		 -> time_set_hr(1), time_set_min(1), GetTime(1), key_press(1), 
 15847 ;;		 -> time_led(1), 
 15848 ;;  taskDelay       2    2[COMRAM] unsigned int 
 15849 ;;  taskPeriod      2    4[COMRAM] unsigned int 
 15850 ;; Auto vars:     Size  Location     Type
 15851 ;;  RTOS_SetTask    1    8[COMRAM] unsigned char 
 15852 ;; Return value:  Size  Location     Type
 15853 ;;                  1    wreg      void 
 15854 ;; Registers used:
 15855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15856 ;; Tracked objects:
 15857 ;;		On entry : 0/0
 15858 ;;		On exit  : 0/0
 15859 ;;		Unchanged: 0/0
 15860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15861 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15862 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15864 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15865 ;;Total ram usage:        9 bytes
 15866 ;; Hardware stack levels used:    1
 15867 ;; This function calls:
 15868 ;;		Nothing
 15869 ;; This function is called by:
 15870 ;;		_INT0_ISR
 15871 ;; This function uses a non-reentrant model
 15872 ;;
 15873                           
 15874                           	psect	text87
 15875  00185A                     __ptext87:
 15876                           	opt stack 0
 15877  00185A                     i2_RTOS_SetTask:
 15878                           	opt stack 21
 15879                           
 15880                           ;dispatcher.c: 24: uint8_t i;
 15881                           ;dispatcher.c: 26: if(!taskFunc) return;
 15882                           
 15883                           ;incstack = 0
 15884  00185A  5001               	movf	i2RTOS_SetTask@taskFunc,w,c
 15885  00185C  1002               	iorwf	i2RTOS_SetTask@taskFunc+1,w,c
 15886  00185E  E101               	bnz	i2l244
 15887  001860  0012               	return	
 15888  001862                     i2l244:
 15889                           
 15890                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 15891  001862  6A09               	clrf	i2RTOS_SetTask@i,c
 15892  001864  D015               	goto	i2l5133
 15893  001866                     i2l5121:
 15894                           
 15895                           ;dispatcher.c: 28: {
 15896                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 15897  001866  5009               	movf	i2RTOS_SetTask@i,w,c
 15898  001868  D82A               	call	PL26	;call to abstracted procedure
 15899  00186A  5001               	movf	i2RTOS_SetTask@taskFunc,w,c	;volatile
 15900  00186C  18DE               	xorwf	postinc2,w,c
 15901  00186E  E10F               	bnz	i2l5131
 15902  001870  5002               	movf	i2RTOS_SetTask@taskFunc+1,w,c	;volatile
 15903  001872  18DE               	xorwf	postinc2,w,c
 15904  001874  E10C               	bnz	i2l5131
 15905                           
 15906                           ;dispatcher.c: 30: {
 15907                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 15908  001876  9EF2               	bcf	intcon,7,c	;volatile
 15909                           
 15910                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 15911  001878  5009               	movf	i2RTOS_SetTask@i,w,c
 15912  00187A  EC49  F00B         	call	PL22	;call to abstracted procedure
 15913  00187E  D839               	call	PL112	;call to abstracted procedure
 15914                           
 15915                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 15916  001880  5009               	movf	i2RTOS_SetTask@i,w,c
 15917  001882  D82F               	call	PL32	;call to abstracted procedure
 15918  001884  D83B               	call	PL138	;call to abstracted procedure
 15919                           
 15920                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 15921  001886  5009               	movf	i2RTOS_SetTask@i,w,c
 15922  001888  D822               	call	PL28	;call to abstracted procedure
 15923                           
 15924                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 15925  00188A  8EF2               	bsf	intcon,7,c	;volatile
 15926  00188C  0C00               	retlw	0
 15927  00188E                     i2l5131:
 15928  00188E  2A09               	incf	i2RTOS_SetTask@i,f,c
 15929  001890                     i2l5133:
 15930  001890  5060               	movf	_arrayTail,w,c	;volatile
 15931  001892  5C09               	subwf	i2RTOS_SetTask@i,w,c
 15932  001894  E3E8               	bnc	i2l5121
 15933                           
 15934                           ;dispatcher.c: 39: }
 15935                           ;dispatcher.c: 40: }
 15936                           ;dispatcher.c: 42: if (arrayTail < 15)
 15937  001896  0E0F               	movlw	15
 15938  001898  6060               	cpfslt	_arrayTail,c	;volatile
 15939  00189A  0C0F               	retlw	15
 15940                           
 15941                           ;dispatcher.c: 43: {
 15942                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 15943  00189C  9EF2               	bcf	intcon,7,c	;volatile
 15944                           
 15945                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 15946  00189E  5060               	movf	_arrayTail,w,c	;volatile
 15947  0018A0  D80E               	call	PL26	;call to abstracted procedure
 15948  0018A2  C001  FFDE         	movff	i2RTOS_SetTask@taskFunc,postinc2	;volatile
 15949  0018A6  C002  FFDD         	movff	i2RTOS_SetTask@taskFunc+1,postdec2	;volatile
 15950                           
 15951                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 15952  0018AA  5060               	movf	_arrayTail,w,c	;volatile
 15953  0018AC  EC49  F00B         	call	PL22	;call to abstracted procedure
 15954  0018B0  D820               	call	PL112	;call to abstracted procedure
 15955                           
 15956                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 15957  0018B2  5060               	movf	_arrayTail,w,c	;volatile
 15958  0018B4  D816               	call	PL32	;call to abstracted procedure
 15959  0018B6  D822               	call	PL138	;call to abstracted procedure
 15960                           
 15961                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 15962  0018B8  5060               	movf	_arrayTail,w,c	;volatile
 15963  0018BA  D809               	call	PL28	;call to abstracted procedure
 15964                           
 15965                           ;dispatcher.c: 51: arrayTail++;
 15966                           
 15967                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 15968  0018BC  D024               	goto	PL162	;call to abstracted procedure
 15969  0018BE                     __end_ofi2_RTOS_SetTask:
 15970                           	opt stack 0
 15971  0018BE                     PL26:
 15972                           	opt stack 27
 15973  0018BE  0D08               	mullw	8
 15974  0018C0  0E00               	movlw	low _TaskArray
 15975  0018C2  24F3               	addwf	prodl,w,c
 15976  0018C4  6ED9               	movwf	fsr2l,c
 15977  0018C6  0E01               	movlw	high _TaskArray
 15978  0018C8  20F4               	addwfc	prodh,w,c
 15979  0018CA  6EDA               	movwf	fsr2h,c
 15980  0018CC  0012               	return	
 15981  0018CE                     __end_ofPL26:
 15982                           	opt stack 0
 15983  0018CE                     PL28:
 15984                           	opt stack 27
 15985  0018CE  0D08               	mullw	8
 15986  0018D0  0E06               	movlw	low (_TaskArray+6)
 15987  0018D2  24F3               	addwf	prodl,w,c
 15988  0018D4  6ED9               	movwf	fsr2l,c
 15989  0018D6  0E01               	movlw	high (_TaskArray+6)
 15990  0018D8  20F4               	addwfc	prodh,w,c
 15991  0018DA  6EDA               	movwf	fsr2h,c
 15992  0018DC  6ADE               	clrf	postinc2,c
 15993  0018DE  6ADD               	clrf	postdec2,c
 15994  0018E0  0012               	return	
 15995  0018E2                     __end_ofPL28:
 15996                           	opt stack 0
 15997  0018E2                     PL32:
 15998                           	opt stack 27
 15999  0018E2  0D08               	mullw	8
 16000  0018E4  0E04               	movlw	low (_TaskArray+4)
 16001  0018E6  24F3               	addwf	prodl,w,c
 16002  0018E8  6ED9               	movwf	fsr2l,c
 16003  0018EA  0E01               	movlw	high (_TaskArray+4)
 16004  0018EC  20F4               	addwfc	prodh,w,c
 16005  0018EE  6EDA               	movwf	fsr2h,c
 16006  0018F0  0012               	return	
 16007  0018F2                     __end_ofPL32:
 16008                           	opt stack 0
 16009  0018F2                     PL112:
 16010                           	opt stack 21
 16011  0018F2  C003  FFDE         	movff	i2RTOS_SetTask@taskDelay,postinc2
 16012  0018F6  C004  FFDD         	movff	i2RTOS_SetTask@taskDelay+1,postdec2
 16013  0018FA  0012               	return	
 16014  0018FC                     __end_ofPL112:
 16015                           	opt stack 0
 16016  0018FC                     PL138:
 16017                           	opt stack 21
 16018  0018FC  C005  FFDE         	movff	i2RTOS_SetTask@taskPeriod,postinc2
 16019  001900  C006  FFDD         	movff	i2RTOS_SetTask@taskPeriod+1,postdec2
 16020  001904  0012               	return	
 16021  001906                     __end_ofPL138:
 16022                           	opt stack 0
 16023  001906                     PL162:
 16024                           	opt stack 27
 16025  001906  2A60               	incf	_arrayTail,f,c	;volatile
 16026  001908  8EF2               	bsf	intcon,7,c	;volatile
 16027  00190A  0C00               	retlw	0	;funcret
 16028  00190C                     __end_ofPL162:
 16029                           	opt stack 0
 16030                           tosu	equ	0xFFF
 16031                           tosh	equ	0xFFE
 16032                           tosl	equ	0xFFD
 16033                           pclath	equ	0xFFA
 16034                           tblptru	equ	0xFF8
 16035                           tblptrh	equ	0xFF7
 16036                           tblptrl	equ	0xFF6
 16037                           tablat	equ	0xFF5
 16038                           prodh	equ	0xFF4
 16039                           prodl	equ	0xFF3
 16040                           intcon	equ	0xFF2
 16041                           intcon2	equ	0xFF1
 16042                           postinc0	equ	0xFEE
 16043                           wreg	equ	0xFE8
 16044                           indf1	equ	0xFE7
 16045                           plusw1	equ	0xFE3
 16046                           fsr1h	equ	0xFE2
 16047                           fsr1l	equ	0xFE1
 16048                           indf2	equ	0xFDF
 16049                           postinc2	equ	0xFDE
 16050                           postdec2	equ	0xFDD
 16051                           plusw2	equ	0xFDB
 16052                           fsr2h	equ	0xFDA
 16053                           fsr2l	equ	0xFD9
 16054                           status	equ	0xFD8
 16055                           tosu	equ	0xFFF
 16056                           tosh	equ	0xFFE
 16057                           tosl	equ	0xFFD
 16058                           pclath	equ	0xFFA
 16059                           tblptru	equ	0xFF8
 16060                           tblptrh	equ	0xFF7
 16061                           tblptrl	equ	0xFF6
 16062                           tablat	equ	0xFF5
 16063                           prodh	equ	0xFF4
 16064                           prodl	equ	0xFF3
 16065                           intcon	equ	0xFF2
 16066                           intcon2	equ	0xFF1
 16067                           postinc0	equ	0xFEE
 16068                           wreg	equ	0xFE8
 16069                           indf1	equ	0xFE7
 16070                           plusw1	equ	0xFE3
 16071                           fsr1h	equ	0xFE2
 16072                           fsr1l	equ	0xFE1
 16073                           indf2	equ	0xFDF
 16074                           postinc2	equ	0xFDE
 16075                           postdec2	equ	0xFDD
 16076                           plusw2	equ	0xFDB
 16077                           fsr2h	equ	0xFDA
 16078                           fsr2l	equ	0xFD9
 16079                           status	equ	0xFD8
 16080                           
 16081                           	psect	text88
 16082  000000                     __ptext88:
 16083                           	opt stack 0
 16084                           tosu	equ	0xFFF
 16085                           tosh	equ	0xFFE
 16086                           tosl	equ	0xFFD
 16087                           pclath	equ	0xFFA
 16088                           tblptru	equ	0xFF8
 16089                           tblptrh	equ	0xFF7
 16090                           tblptrl	equ	0xFF6
 16091                           tablat	equ	0xFF5
 16092                           prodh	equ	0xFF4
 16093                           prodl	equ	0xFF3
 16094                           intcon	equ	0xFF2
 16095                           intcon2	equ	0xFF1
 16096                           postinc0	equ	0xFEE
 16097                           wreg	equ	0xFE8
 16098                           indf1	equ	0xFE7
 16099                           plusw1	equ	0xFE3
 16100                           fsr1h	equ	0xFE2
 16101                           fsr1l	equ	0xFE1
 16102                           indf2	equ	0xFDF
 16103                           postinc2	equ	0xFDE
 16104                           postdec2	equ	0xFDD
 16105                           plusw2	equ	0xFDB
 16106                           fsr2h	equ	0xFDA
 16107                           fsr2l	equ	0xFD9
 16108                           status	equ	0xFD8
 16109                           
 16110                           	psect	rparam
 16111  0000                     tosu	equ	0xFFF
 16112                           tosh	equ	0xFFE
 16113                           tosl	equ	0xFFD
 16114                           pclath	equ	0xFFA
 16115                           tblptru	equ	0xFF8
 16116                           tblptrh	equ	0xFF7
 16117                           tblptrl	equ	0xFF6
 16118                           tablat	equ	0xFF5
 16119                           prodh	equ	0xFF4
 16120                           prodl	equ	0xFF3
 16121                           intcon	equ	0xFF2
 16122                           intcon2	equ	0xFF1
 16123                           postinc0	equ	0xFEE
 16124                           wreg	equ	0xFE8
 16125                           indf1	equ	0xFE7
 16126                           plusw1	equ	0xFE3
 16127                           fsr1h	equ	0xFE2
 16128                           fsr1l	equ	0xFE1
 16129                           indf2	equ	0xFDF
 16130                           postinc2	equ	0xFDE
 16131                           postdec2	equ	0xFDD
 16132                           plusw2	equ	0xFDB
 16133                           fsr2h	equ	0xFDA
 16134                           fsr2l	equ	0xFD9
 16135                           status	equ	0xFD8
 16136                           
 16137                           	psect	temp
 16138  000071                     btemp:
 16139                           	opt stack 0
 16140  000071                     	ds	1
 16141  0000                     int$flags	set	btemp
 16142                           tosu	equ	0xFFF
 16143                           tosh	equ	0xFFE
 16144                           tosl	equ	0xFFD
 16145                           pclath	equ	0xFFA
 16146                           tblptru	equ	0xFF8
 16147                           tblptrh	equ	0xFF7
 16148                           tblptrl	equ	0xFF6
 16149                           tablat	equ	0xFF5
 16150                           prodh	equ	0xFF4
 16151                           prodl	equ	0xFF3
 16152                           intcon	equ	0xFF2
 16153                           intcon2	equ	0xFF1
 16154                           postinc0	equ	0xFEE
 16155                           wreg	equ	0xFE8
 16156                           indf1	equ	0xFE7
 16157                           plusw1	equ	0xFE3
 16158                           fsr1h	equ	0xFE2
 16159                           fsr1l	equ	0xFE1
 16160                           indf2	equ	0xFDF
 16161                           postinc2	equ	0xFDE
 16162                           postdec2	equ	0xFDD
 16163                           plusw2	equ	0xFDB
 16164                           fsr2h	equ	0xFDA
 16165                           fsr2l	equ	0xFD9
 16166                           status	equ	0xFD8
 16167                           tosu	equ	0xFFF
 16168                           tosh	equ	0xFFE
 16169                           tosl	equ	0xFFD
 16170                           pclath	equ	0xFFA
 16171                           tblptru	equ	0xFF8
 16172                           tblptrh	equ	0xFF7
 16173                           tblptrl	equ	0xFF6
 16174                           tablat	equ	0xFF5
 16175                           prodh	equ	0xFF4
 16176                           prodl	equ	0xFF3
 16177                           intcon	equ	0xFF2
 16178                           intcon2	equ	0xFF1
 16179                           postinc0	equ	0xFEE
 16180                           wreg	equ	0xFE8
 16181                           indf1	equ	0xFE7
 16182                           plusw1	equ	0xFE3
 16183                           fsr1h	equ	0xFE2
 16184                           fsr1l	equ	0xFE1
 16185                           indf2	equ	0xFDF
 16186                           postinc2	equ	0xFDE
 16187                           postdec2	equ	0xFDD
 16188                           plusw2	equ	0xFDB
 16189                           fsr2h	equ	0xFDA
 16190                           fsr2l	equ	0xFD9
 16191                           status	equ	0xFD8


Data Sizes:
    Strings     32
    Constant    1615
    Data        3
    BSS         341
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62     112
    BANK0           128     14      89
    BANK1           256      0     220
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[22]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 100
		 -> text_buf(BANK1[100]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    readTemp_Single@buf	PTR unsigned int  size(1) Largest target is 2
		 -> temperature(COMRAM[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 

    getDate@p4	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    putchar_down@pF	PTR unsigned char [5][0] size(2) Largest target is 1280
		 -> dFont5(CODE[50]), dFont4(CODE[50]), dFont3(CODE[50]), dFont2(CODE[50]), 
		 -> Font(CODE[1280]), dFont1(CODE[50]), 

    putchar_b_buf@pF	PTR unsigned char [5][0] size(2) Largest target is 1280
		 -> dFont5(CODE[50]), dFont4(CODE[50]), dFont3(CODE[50]), dFont2(CODE[50]), 
		 -> Font(CODE[1280]), dFont1(CODE[50]), 

    pFont	PTR unsigned char [5][0] size(2) Largest target is 50
		 -> dFont5(CODE[50]), dFont4(CODE[50]), dFont3(CODE[50]), dFont2(CODE[50]), 
		 -> dFont1(CODE[50]), 

    Update_Matrix@buf	PTR unsigned char  size(1) Largest target is 32
		 -> Dis_Buff(BANK0[32]), 

    RTOS_DispatchTask@function	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 

    RTOS_DeleteTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 

    S466task$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 

    TaskArray.pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 

    RTOS_SetTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 


Critical Paths under _main in COMRAM

    _init_ds18b20->_write_byte
    _bmp085Calibration->_bmp085ReadInt
    _Init7221->_Cmd7221
    _Cmd7221->_Send_Byte_7221
    _DS3231_init->_DS3231_Write
    _time_set_yr->_putchar_b_buf
    _time_set_yr->_setDate
    _time_set_mt->_putchar_b_buf
    _time_set_mt->_setDate
    _time_set_min->_putchar_b_buf
    _time_set_hr->_putchar_b_buf
    _setTime->_DS3231_Write
    _time_set_dy->_putchar_b_buf
    _time_set_dy->_setDate
    _time_set_dt->_putchar_b_buf
    _time_set_dt->_setDate
    _setDate->_DS3231_Write
    _decimal_to_bcd->___lbmod
    _DS3231_Write->_decimal_to_bcd
    _time_led->_BMP085Pressure
    _readTemp_Single->___lwmod
    _write_byte->_write_bit
    _FillBuf->___lbmod
    _BMP085Pressure->_BMP085GetPressure
    _bmp085ReadUP->_BMP085ReadByte
    _BMP085ReadByte->_I2C_Master_Read
    _BMP085ReadUT->_bmp085ReadInt
    _bmp085ReadInt->_I2C_Master_Read
    _BMP085WriteByte->_I2C_Master_Write
    _BMP085GetTemp->___aldiv
    _BMP085GetPressure->___aldiv
    ___aldiv->___lmul
    _set_font_set->_putchar_b_buf
    _putchar_b_buf->___lbmod
    _pressure->_putchar_down
    _interval_scroll_text->_Update_Matrix
    _home_temp->_putchar_down
    _scroll_left->_Update_Matrix
    _putchar_down_s->___lbmod
    _putchar_down->___lwmod
    _Update_Matrix->_Send_Byte_7221
    _pic_to_led->_pixel_off
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    _GetTime->_getDate
    _getTime->_DS3231_Read
    _getDate->_DS3231_Read
    _DS3231_Read->_I2C_Master_Read
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_RepeatedStart->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INT0_ISR->i2_RTOS_SetTask

Critical Paths under _main in BANK0

    _main->_RTOS_DispatchTask
    _time_led->_BMP085Pressure

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  367978
                                             13 BANK0      1     1      0
                  _RTOS_DispatchTask
                       _RTOS_SetTask
                  _SYSTEM_Initialize
                       _clear_matrix
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1916
                        _DS3231_init
                           _I2C_Init
                           _Init7221
                     _Interrupt_Init
                          _Port_Init
                          _RTOS_Init
                            _TMRInit
                  _bmp085Calibration
                       _init_ds18b20
                          _init_uart
                           _read_eep
                           _set_font
                         _sound_init
 ---------------------------------------------------------------------------------
 (2) _sound_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _read_eep                                             2     0      2      86
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         0     0      0     232
                           _ow_reset
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _bmp085Calibration                                    0     0      0     195
                      _bmp085ReadInt
 ---------------------------------------------------------------------------------
 (2) _TMRInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTOS_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init7221                                             0     0      0     617
                            _Cmd7221
 ---------------------------------------------------------------------------------
 (3) _Cmd7221                                              3     2      1     617
                                             16 COMRAM     3     2      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DS3231_init                                          0     0      0     786
                       _DS3231_Write
 ---------------------------------------------------------------------------------
 (1) _RTOS_DispatchTask                                    8     8      0  355295
                                              5 BANK0      8     8      0
                            _GetTime *
                    _RTOS_DeleteTask
                      _default_state *
                          _home_temp *
                          _key_press *
                           _pressure *
                       _set_font_set *
                           _time_led *
                        _time_set_dt *
                        _time_set_dy *
                        _time_set_hr *
                       _time_set_min *
                        _time_set_mt *
                        _time_set_yr *
 ---------------------------------------------------------------------------------
 (2) _time_set_yr                                          0     0      0   38245
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_mt                                          0     0      0   33691
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_min                                         0     0      0   36982
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _time_set_hr                                          0     0      0   37081
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                       _clear_matrix
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (3) _setTime                                              3     1      2    6111
                                             27 COMRAM     3     1      2
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (2) _time_set_dy                                          0     0      0   33691
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_dt                                          0     0      0   38245
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (3) _setDate                                              4     1      3    7374
                                             27 COMRAM     4     1      3
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (4) _decimal_to_bcd                                       3     3      0    4616
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write                                         2     1      1     786
                                             25 COMRAM     2     1      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                     _decimal_to_bcd (ARG)
 ---------------------------------------------------------------------------------
 (2) _time_led                                             0     0      0   37887
                     _BMP085Pressure
                            _FillBuf
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                    _readTemp_Single
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _readTemp_Single                                     10     7      3    3671
                                             26 COMRAM    10     7      3
                            ___lwdiv
                            ___lwmod
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (3) _write_byte                                           5     5      0     198
                                             15 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (4) _write_bit                                            1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _read_byte                                            4     4      0     136
                                             14 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (5) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ow_reset                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _FillBuf                                              3     3      0    5093
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _BMP085Pressure                                       7     5      2   12964
                                             60 COMRAM     2     0      2
                                              0 BANK0      5     5      0
                  _BMP085GetPressure
                      _BMP085GetTemp
                       _BMP085ReadUT
                       _bmp085ReadUP
 ---------------------------------------------------------------------------------
 (4) _bmp085ReadUP                                        36    32      4     637
                                             19 COMRAM    36    32      4
                     _BMP085ReadByte
                    _BMP085WriteByte
 ---------------------------------------------------------------------------------
 (5) _BMP085ReadByte                                       2     2      0     161
                                             17 COMRAM     2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _BMP085ReadUT                                         5     1      4     442
                                             26 COMRAM     5     1      4
                    _BMP085WriteByte
                      _bmp085ReadInt
 ---------------------------------------------------------------------------------
 (3) _bmp085ReadInt                                        9     7      2     195
                                             17 COMRAM     9     7      2
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _BMP085WriteByte                                      2     1      1     247
                                             16 COMRAM     2     1      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _BMP085GetTemp                                       16    12      4    5514
                                             40 COMRAM    16    12      4
                       _BMP085ReadUT (ARG)
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _BMP085GetPressure                                   24    20      4    6275
                                             40 COMRAM    20    16      4
                            ___aldiv
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8    2252
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     549
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8    3063
                                             26 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _set_font_set                                         0     0      0   29383
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbmod
                      _putchar_b_buf
                           _set_font
                          _write_eep
 ---------------------------------------------------------------------------------
 (3) _write_eep                                            2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _set_font                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _putchar_b_buf                                        9     6      3   11781
                                             22 COMRAM     9     6      3
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (2) _pressure                                             1     1      0   33414
                                             38 COMRAM     1     1      0
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                       _clear_matrix
                            _getTime
               _interval_scroll_text
                         _pic_to_led
                       _putchar_down
                     _putchar_down_s
                        _scroll_left
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             19    15      4     398
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _interval_scroll_text                                 2     2      0    1518
                                             20 COMRAM     2     2      0
                      _Update_Matrix
                        _scroll_text
 ---------------------------------------------------------------------------------
 (4) _scroll_text                                          3     3      0     130
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _key_press                                            1     1      0      77
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _home_temp                                            1     1      0   31498
                                             38 COMRAM     1     1      0
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                       _clear_matrix
                            _getTime
                         _pic_to_led
                       _putchar_down
                     _putchar_down_s
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _scroll_left                                          5     5      0    1623
                                             20 COMRAM     5     5      0
                      _Update_Matrix
 ---------------------------------------------------------------------------------
 (3) _putchar_down_s                                      10     9      1    2049
                                             22 COMRAM    10     9      1
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_down                                        12     9      3    5006
                                             26 COMRAM    12     9      3
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Update_Matrix                                        4     3      1    1320
                                             16 COMRAM     4     3      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (4) _Send_Byte_7221                                       2     2      0     102
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _pic_to_led                                           7     6      1    1278
                                             19 COMRAM     7     6      1
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (4) _pixel_on                                             4     3      1     273
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _pixel_off                                            5     4      1     273
                                             14 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (1) _clear_matrix                                         1     1      0      99
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1464
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    1011
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1    2850
                                             18 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1    1704
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _RTOS_SetTask                                         9     3      6   10668
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _RTOS_DeleteTask                                      9     7      2    2548
                                             14 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _default_state                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              0     0      0    2104
                            _getDate
                            _getTime
 ---------------------------------------------------------------------------------
 (3) _getTime                                              3     0      3    1198
                                             19 COMRAM     3     0      3
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (3) _getDate                                              4     0      4     906
                                             19 COMRAM     4     0      4
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (4) _bcd_to_decimal                                       2     2      0      62
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _DS3231_Read                                          2     2      0     164
                                             17 COMRAM     2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     1     1      0      31
                                             15 COMRAM     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             15 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           5     5      0     344
                                              9 COMRAM     5     5      0
                           _INT0_ISR
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR3_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _INT0_ISR                                             0     0      0     344
                     i2_RTOS_SetTask
 ---------------------------------------------------------------------------------
 (10) i2_RTOS_SetTask                                      9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTOS_DispatchTask
     _GetTime *
       _getDate
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
     _RTOS_DeleteTask *
     _default_state *
     _home_temp *
       _RTOS_DeleteTask
       _RTOS_SetTask
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clear_matrix
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _pic_to_led
         _pixel_off
         _pixel_on
       _putchar_down
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
       _putchar_down_s
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _key_press *
     _pressure *
       _RTOS_DeleteTask
       _RTOS_SetTask
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clear_matrix
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _interval_scroll_text
         _Update_Matrix
           _Send_Byte_7221
         _scroll_text
       _pic_to_led
         _pixel_off
         _pixel_on
       _putchar_down
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
       _putchar_down_s
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
       _sprintf
     _set_font_set *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _set_font
       _write_eep
     _time_led *
       _BMP085Pressure
         _BMP085GetPressure
           ___aldiv
             ___lmul (ARG)
           ___lldiv
           ___lmul
         _BMP085GetTemp
           _BMP085ReadUT (ARG)
             _BMP085WriteByte
               _I2C_Master_Start
                 _I2C_Master_Wait
               _I2C_Master_Stop
                 _I2C_Master_Wait
               _I2C_Master_Write
                 _I2C_Master_Wait
             _bmp085ReadInt
               _I2C_Master_Read
                 _I2C_Master_Wait
               _I2C_Master_RepeatedStart
                 _I2C_Master_Wait
               _I2C_Master_Start
                 _I2C_Master_Wait
               _I2C_Master_Stop
                 _I2C_Master_Wait
               _I2C_Master_Write
                 _I2C_Master_Wait
           ___aldiv (ARG)
             ___lmul (ARG)
           ___lmul (ARG)
         _BMP085ReadUT
           _BMP085WriteByte
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
           _bmp085ReadInt
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_RepeatedStart
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
         _bmp085ReadUP
           _BMP085ReadByte
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_RepeatedStart
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
           _BMP085WriteByte
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
       _FillBuf
         ___lbdiv
         ___lbmod
           ___lbdiv (ARG)
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _readTemp_Single
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _ow_reset
         _read_byte
           _read_bit
         _write_byte
           _write_bit
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _time_set_dt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_dy *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_hr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _clear_matrix
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_min *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_mt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_yr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
   _RTOS_SetTask
   _SYSTEM_Initialize
     _DS3231_init
       _DS3231_Write
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _decimal_to_bcd (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _I2C_Init
     _Init7221
       _Cmd7221
         _Send_Byte_7221
     _Interrupt_Init
     _Port_Init
     _RTOS_Init
     _TMRInit
     _bmp085Calibration
       _bmp085ReadInt
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_RepeatedStart
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _init_ds18b20
       _ow_reset
       _write_byte
         _write_bit
     _init_uart
     _read_eep
     _set_font
     _sound_init
   _clear_matrix

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     i2_RTOS_SetTask
   _TMR0_ISR
   _TMR1_ISR
   _TMR3_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DC       7       85.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      59       5       69.5%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     3E      70       1       88.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A5      34        0.0%
DATA                 0      0     1A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Mar 31 14:41:57 2017

                   ??_Interrupt_Init 000F                                   PL2 0B9C  
                                 PL4 065C                                   PL6 0CEC  
                                 PL8 1492                                   _B3 0091  
                                 _B4 008D                                   _B5 0089  
                                 _B6 004A                                   _B7 0046  
                                 _X1 0052                                   _X2 004E  
                                 _X3 0095                                   _b1 009F  
                                 _b2 009D                                   _mc 009B  
                                 _md 0099                          __CFG_BORV$3 000000  
                    ??_Update_Matrix 0012                         _bmp085ReadUP 0D32  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                     _decimal_to_bcd 2540                         __CFG_CP2$OFF 000000  
                  ??_RTOS_DeleteTask 0011                                  PL10 139E  
                                PL20 07AE                                  PL12 031E  
                                PL30 0CF6                                  PL22 1692  
                                PL14 114A                                  PL40 0346  
                                PL32 18E2                                  PL24 1170  
                                PL16 1084                                  PL50 11A0  
                                PL42 0372                                  PL34 0330  
                                PL26 18BE                                  PL18 13AC  
                                PL60 07D2                                  PL52 07CA  
                                PL44 0384                                  PL36 16A2  
                                PL28 18CE                                  PL70 03E6  
                                PL62 03BE                                  PL54 0396  
                                PL46 14A6                                  PL38 1194  
                                PL80 07F4                                  PL72 03F8  
                                PL64 07DC                                  PL56 03A2  
                                PL48 07BA                                  PL90 0814  
                                PL82 0D02                                  PL74 040A  
                                PL66 07E6                                  PL58 09EA  
                                PL92 0F90                                  PL84 0804  
                                PL76 041C                                  PL68 03D4  
                                PL94 0822                                  PL86 1D46  
                                PL78 042E                                  PL96 1CB8  
                                PL88 043A                                  PL98 082C  
                                l244 1B5A                                  l261 15F6  
                                l184 27D4                                  l520 1F40  
                                l370 25E0                                  l178 274C  
                                l371 25E2                                  l436 1E3E  
                                l380 2256                                  l516 1F0A  
                                l509 1D0E                                  l445 1DD4  
                                l463 1A38                                  l368 25D8  
                                l472 19A4                                  l821 1022  
                                l750 1742                                  l834 0A92  
                                l764 0C5E                                  l781 1554  
                                l774 0CB8                                  l856 143E  
                                l794 04F0                                  l971 216C  
                                l875 0726                                  l973 218E  
                                l965 2152                                  l967 215A  
                                l969 2162                                  l899 0950  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _OSS BFDD                                  _ac1 0056  
                                _ac2 00A9                                  _ac3 00A7  
                                _ac4 00A5                                  _ac5 00A3  
                                _ac6 00A1                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
                      write_eep@data 000F                        _bmp085ReadInt 2192  
                    _BMP085WriteByte 26EA                                 PL100 13B8  
                               PL110 0450                                 PL102 09F6  
                               PL120 1098                                 PL112 18F2  
                               PL104 0444                                 PL130 0D0C  
                               PL122 2404                                 PL114 1CC0  
                               PL106 14B0                                 PL140 0D16  
                               PL132 1BC4                                 PL124 0BB2  
                               PL116 1CCA                                 PL108 1F58  
                               PL150 1BCE                                 PL142 15B6  
                               PL134 1794                                 PL126 1CD4  
                               PL118 0668                                 PL160 0458  
                               PL152 0836                                 PL144 1FB0  
                               PL136 11AC                                 PL128 14BA  
                               PL162 1906                                 PL154 10A2  
                               PL146 0D20                                 PL138 18FC  
                               PL164 084E                                 PL156 083E  
                               PL148 1FBA                                 PL166 0A02  
                               PL158 0846                                 PL168 0D2A  
                       __CFG_LVP$OFF 000000                         _putchar_down 1A34  
                       __CFG_WDT$OFF 000000                                 l1069 25A2  
                               l1245 277C                                 l1239 25B2  
                               l1192 0240                                 l1285 2070  
                               l1623 1DBA                                 l1676 2140  
                               l1686 220E                                 l6031 23DE  
                               l5401 23D0                                 l6121 1EE6  
                               l6035 23E8                                 l6115 1EC0  
                               l6043 0E82                                 l6211 0C0E  
                               l5405 23D8                                 l5421 2584  
                               l5413 256E                                 l6109 0F7C  
                               l6205 0BF2                                 l6141 16BC  
                               l5335 2084                                 l6055 0EAE  
                               l6303 15AA                                 l6223 0C2C  
                               l5273 263A                                 l5505 1D18  
                               l5361 17F4                                 l5353 17D0  
                               l5433 1D6E                                 l6217 0C18  
                               l6161 1700                                 l5371 1826  
                               l5363 17F8                                 l5347 17B8  
                               l5435 1D7A                                 l6067 0EC0  
                               l6251 0CE0                                 l6331 04AE  
                               l6411 0FE4                                 l6155 16F6  
                               l6147 16D8                                 l5445 1DAC  
                               l5437 1D7E                                 l6229 0C36  
                               l6237 0C4A                                 l6325 04A2  
                               l6309 0462                                 l6405 0FD8  
                               l6173 171C                                 l6149 16DE  
                               l6181 172E                                 l5711 1B8E  
                               l5359 17E8                                 l5375 1834  
                               l6079 0EF0                                 l6247 0CA8  
                               l6343 04CA                                 l6319 0486  
                               l6351 04DC                                 l6423 0FFE  
                               l6431 100E                                 l6503 0B72  
                               l6511 13C4                                 l6167 1712  
                               l5393 23BC                                 l5609 0DF2  
                               l6097 0F64                                 l6273 1508  
                               l6257 14C6                                 l6249 0CCC  
                               l6193 0BC8                                 l6361 0556  
                               l6337 04C0                                 l6417 0FF4  
                               l6505 0B90                                 l6441 0A0A  
                               l6185 1770                                 l5395 23C0  
                               l5651 2110                                 l5459 225A  
                               l5483 1CE0                                 l5731 20D4  
                               l5379 1848                                 l6291 152E  
                               l6267 14EC                                 l6371 05C4  
                               l6363 056C                                 l6355 0514  
                               l6435 1078                                 l6451 0A2C  
                               l6531 13FC                                 l6187 1788  
                               l6611 079E                                 l5741 1ACC  
                               l5709 1B8C                                 l5389 23B6  
                               l5653 2118                                 l5813 1DD6  
                               l5733 20DE                                 l5725 20B6  
                               l5901 10D0                                 l5565 2340  
                               l5549 2308                                 l6285 1524  
                               l6701 132E                                 l6373 05DA  
                               l6365 0582                                 l6357 052A  
                               l6381 061C                                 l6525 13F0  
                               l6517 13D6                                 l5663 2136  
                               l5655 211C                                 l5671 21E6  
                               l5727 20C0                                 l5639 0218  
                               l5591 0D5C                                 l5903 10D4  
                               l6279 1512                                 l6711 1356  
                               l6375 05F0                                 l6367 0598  
                               l6359 0540                                 l6383 0650  
                               l6463 0A54                                 l6519 13DC  
                               l6615 0856                                 l5673 21EE  
                               l5841 1A3A                                 l5817 1E10  
                               l5729 20CA                                 l5737 20E8  
                               l5593 0D6C                                 l5569 2360  
                               l6377 0606                                 l6369 05AE  
                               l6457 0A48                                 l6545 141A  
                               l6537 140A                                 l6801 168A  
                               l5755 1B48                                 l5675 21F2  
                               l5851 1AA0                                 l5819 1E1C  
                               l5587 0D3C                                 l6299 1540  
                               l6723 137E                                 l6491 0AF0  
                               l6475 0A6E                                 l6483 0A7E  
                               l6539 1410                                 l6555 142A  
                               l6635 08E4                                 l6627 08C0  
                               l5749 1B42                                 l5757 1B4A  
                               l5589 0D4C                                 l5597 0D86  
                               l5917 110C                                 l6717 1370  
                               l6725 1396                                 l6389 0F9A  
                               l6493 0B0A                                 l6469 0A64  
                               l6565 0674                                 l6653 0946  
                               l5765 2646                                 l5679 2204  
                               l5783 1E40                                 l5871 19A6  
                               l5943 1F0C                                 l5599 0DA0  
                               l6399 0FBC                                 l6495 0B24  
                               l6487 0ABC                                 l6559 1486  
                               l6583 06E6                                 l6575 06AE  
                               l6647 091A                                 l6639 08F6  
                               l5689 27A2                                 l5881 1A0C  
                               l5961 1F4E                                 l5953 1F30  
                               l6681 12E0                                 l6673 12C0  
                               l6497 0B3E                                 l6489 0AD6  
                               l6649 091E                                 l5699 1B5E  
                               l5787 1E7A                                 l6691 12FC  
                               l6739 216E                                 l6499 0B58  
                               l6595 071E                                 l6587 06F4  
                               l6819 2062                                 l5789 1E86  
                               l6685 12EC                                 l6669 09DA  
                               l6781 15E4                                 l5975 24A4  
                               l5967 249A                                 l6783 15EE  
                               l5897 10AC                                 l6689 12F8  
                               l6793 1636                                 l6777 15CC  
                               l6785 15F0                                 l5979 24BA  
                               l6699 1328                                 l6787 15FC  
                               l6797 166C                                 l6799 1686  
                               STR_1 BFF4                                 STR_2 BFDE  
                   ow_reset@presence 0010                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                       _DS3231_Write 26B2                                 u4200 16B8  
                               u5007 1A12                                 u5017 1AA6  
                               u3290 2638                                 u4250 0BC4  
                               u3524 260A                                 u3700 019E  
                               u3525 2606                                 u3534 252A  
                               u3614 2358                                 u3535 2526  
                               u3615 2354                                 u3705 0194  
                               u3660 0E5A                                 u3840 1B04  
                               u3584 2318                                 u3665 0E50  
                               u3585 2314                                 u3851 1B3A  
                               u3675 1214                                 _RCEN 007E2B  
                               u3685 0096                                 u4581 1320  
                               u3695 00BE                                 u3944 1A7C  
                               u4728 1670                                 u3945 1A78  
                               u4907 2222                                 u4917 2232  
                               u4837 201E                                 u4927 2246  
                               u4847 2334                                 u3984 19E8  
                               u3985 19E4                                 u4937 0D42  
                               u4857 2598                                 u4947 0D52  
                               u4867 25A4                                 u4957 0D62  
                               u4877 2362                                 u4967 0D76  
                               u4887 26D4                                 u4977 2384  
                               u4897 26E0                                 u4987 24AA  
                               u4997 1F36                                 _TMR0 000FD6  
                               _RSEN 007E29                         _RTOS_SetTask 1B52  
                       __CFG_PWRT$ON 000000                                 _Font B9C2  
                    __end_of_Cmd7221 265E     __end_of_I2C_Master_RepeatedStart 2816  
                               _main 2016                     __end_of_I2C_Init 2752  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0071                        write_byte@val 0012  
                    __end_of_TMRInit 267A                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
            __size_ofi2_RTOS_SetTask 0064                        __CFG_IESO$OFF 000000  
                    __end_of_FillBuf 114A                      __end_of_GetTime 26B2  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
              __size_of_BMP085ReadUT 0034                   BMP085ReadByte@data 0013  
             __end_of_decimal_to_bcd 2566                 RTOS_SetTask@taskFunc 000F  
                      _putchar_b_buf 1DCC                     __end_of_INT0_ISR 277C  
                   ?_I2C_Master_Read 0001                     ?_I2C_Master_Wait 0001  
                   ?_I2C_Master_Stop 0001                      __end_of___aldiv 185A  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___lbdiv 23DC  
                              _EEADR 000FA9                      __end_of___lbmod 258C  
              __end_of_default_state 2828                      __end_of___lldiv 1DCC  
                              _T0CON 000FD5                      __end_of___lwdiv 214A  
                    __end_of___lwmod 2218                                i2l244 1862  
                              i2l332 1BF6                                i2l334 1C1E  
                              i2l336 1C34                                i2l339 1C48  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TMR3H 000FB3                                _TMR3L 000FB2  
                              _SPBRG 000FAF                                _PORTB 000F81  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                       ?_bmp085ReadInt 0012  
                      __CFG_WRT0$OFF 000000                      __end_of_getDate 1CB8  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
               __end_of_clear_matrix 27B2                  ___lmul@multiplicand 0013  
                              _TTime 0062                                _FontS BFBC  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                    __end_of_getTime 1FB0                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                     __end_of_TMR0_ISR 27F2  
                   __end_of_TMR1_ISR 27C4                        __CFG_WRTB$OFF 000000  
                   __end_of_TMR3_ISR 2722                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                                _pFont 006D  
                     __CFG_EBTRB$OFF 000000                                _fract B9B2  
                      pic_to_led@pic 0014                                _press 0058  
                    __end_of_setDate 2304                       write_byte@temp 0013  
                    __end_of_setTime 246C                       __pbitbssCOMRAM 0380  
                              pclath 000FFA                                tablat 000FF5  
       __end_of_interval_scroll_text 24C4                                plusw1 000FE3  
                              plusw2 000FDB                                status 000FD8  
                       _BMP085ReadUT 2374                      __end_of_sprintf 2404  
                    ___lbdiv@divisor 000F                         __end_ofPL100 13C2  
                       __end_ofPL110 0458                         __end_ofPL102 0A02  
                       __end_ofPL120 10A2                         __end_ofPL112 18FC  
                       __end_ofPL104 0450                         __end_ofPL130 0D16  
                       __end_ofPL122 240E                         __end_ofPL114 1CCA  
                       __end_ofPL106 14BA                         __end_ofPL140 0D20  
                       __end_ofPL132 1BCE                         __end_ofPL124 0BBC  
                       __end_ofPL116 1CD4                         __end_ofPL108 1F64  
                       __end_ofPL150 1BD8                         __end_ofPL142 15C0  
                       __end_ofPL134 179E                         __end_ofPL126 1CDE  
                       __end_ofPL118 0672                         __end_ofPL160 0460  
                       __end_ofPL152 083E                         __end_ofPL144 1FBA  
                       __end_ofPL136 11B6                         __end_ofPL128 14C4  
                       __end_ofPL162 190C                         __end_ofPL154 10AA  
                       __end_ofPL146 0D2A                         __end_ofPL138 1906  
                       __end_ofPL164 0854                         __end_ofPL156 0846  
                       __end_ofPL148 1FC4                         __end_ofPL166 0A08  
                       __end_ofPL158 084E                         __end_ofPL168 0D32  
                 __size_of_RTOS_Init 0010                      ___lbdiv@counter 0011  
                    write_bit@bitval 000F                      __initialization 1FC4  
                       __end_of_Font BEC2                     __end_of_Init7221 243E  
             __size_of_BMP085GetTemp 0108                         __end_of_main 2068  
                    _readTemp_Single 0E80                       ?_putchar_b_buf 0017  
                    ?_decimal_to_bcd 0001          ?_INTERRUPT_InterruptManager 0001  
                     __CFG_OSC$HSPLL 000000              __end_of_BMP085WriteByte 2706  
              RTOS_SetTask@taskDelay 0011                      decimal_to_bcd@d 0019  
                             ??_main 00D8                        __activetblptr 000002  
                   ??_Send_Byte_7221 000F                        ?_init_ds18b20 0001  
             _BMP085GetPressure$2693 0035                    ?_I2C_Master_Start 0001  
                  ?_I2C_Master_Write 0001                       _putchar_down_s 19A0  
                          ??_Cmd7221 0012                   ??_I2C_Master_Start 0010  
                 ??_I2C_Master_Write 0010                               _EEDATA 000FA8  
                             _EECON2 000FA7                            ??_TMRInit 000F  
                             i2l1263 271A                               i2l5121 1866  
                             i2l5131 188E                               i2l5133 1890  
              BMP085Pressure@getTemp 00CB                            ??_FillBuf 0017  
                             _SPBRGH 000FB0                            ??_GetTime 0018  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                      setDate@daySet 001F                    DS3231_Write@value 001A  
                             _TSTime 003F                       __CFG_XINST$OFF 000000  
           _I2C_Master_RepeatedStart 280E                               _dFont1 BF8A  
                             _dFont2 BF58                               _dFont3 BF26  
                             _dFont4 BEF4                               _dFont5 BEC2  
                    Send_Byte_7221@i 0010                               ___lmul 2068  
                  _RTOS_DispatchTask 15C0                            ??___aldiv 0023  
                          ??___lbdiv 0010                       __CFG_STVREN$ON 000000  
                          ??___lbmod 0014                               _i_char 005E  
                          ??___lldiv 0017                         ?_scroll_left 0001  
                          ??___lwdiv 0013                     RTOS_DeleteTask@i 0017  
                       ?_scroll_text 0001                            ??___lwmod 001A  
                             _en_put 0380                               _pic7x8 B98F  
                     pic_to_led@mask 0017                   ?_RTOS_DispatchTask 0001  
                             _events 006F                     __end_of_read_bit 26EA  
                   __end_of_read_eep 278E                               clear_0 1FE8  
                             clear_1 1FF4                               clear_2 2002  
                          ??_getDate 0018                            ??_getTime 0017  
                     ??_init_ds18b20 0015                      ??_bmp085ReadInt 0014  
             __end_of_putchar_down_s 1A34                         ?_time_set_dt 0001  
                       ?_time_set_dy 0001                         ?_time_set_hr 0001  
                  __end_of_RTOS_Init 27D4                         ?_time_set_mt 0001  
                       ?_time_set_yr 0001                         __pdataCOMRAM 006D  
                   __end_of_set_font 2100                            ?_I2C_Init 0001  
                 __size_of_Port_Init 001C                     __end_of_pixel_on 261C  
                ??_RTOS_DispatchTask 00D0                            ??_setDate 001F  
                   __end_of_time_led 139E                         __mediumconst B98E  
                   __end_of_ow_reset 2254                            ??_setTime 001E  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                     __end_of_pressure 09EA  
                      _BMP085GetTemp 11B6                            ??_sprintf 0013  
                   ___lbdiv@dividend 0010                    _SYSTEM_Initialize 2290  
                    ___lbmod@divisor 0013                           __accesstop 0080  
            __end_of__initialization 2008                      ___lbmod@counter 0015  
                          ?_INT0_ISR 0001                      __CFG_PBADEN$OFF 000000  
                 ?_SYSTEM_Initialize 0001                       i2_RTOS_SetTask 185A  
                      ___rparam_used 000001              __end_of_readTemp_Single 0F90  
                   write_eep@address 0010                      _RTOS_DeleteTask 1AC8  
          __end_of_RTOS_DispatchTask 1692                        __end_of_FontS BFDD  
                    ??_putchar_b_buf 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 001C                            ?_TMR0_ISR 0001  
                          ?_TMR1_ISR 0001                            ?_TMR3_ISR 0001  
                      __end_of_fract B9C2                          pic_to_led@i 001A  
                        pic_to_led@j 0019                          pic_to_led@x 0018  
                         __end_ofPL2 0BB2                           __end_ofPL4 0668  
                         __end_ofPL6 0CF6                           __end_ofPL8 14A6  
                   ___lbdiv@quotient 0012                __size_of_clear_matrix 0012  
              interval_scroll_text@i 0016              __size_of_BMP085ReadByte 002C  
                   ?_BMP085WriteByte 0011                 _interval_scroll_text 2498  
                    ?_putchar_down_s 0017                           ??_I2C_Init 000F  
                     ?_BMP085GetTemp 0029              __size_of_BMP085Pressure 0064  
                          ?_Init7221 0001            __end_of_SYSTEM_Initialize 22CA  
             RTOS_SetTask@taskPeriod 0013                           __pbssBANK0 0080  
                         __pbssBANK1 0100               __end_ofi2_RTOS_SetTask 18BE  
                      ??_DS3231_Read 0012                           ??_INT0_ISR 000A  
                 __size_of_home_temp 013C                        ??_DS3231_init 001C  
                 __size_of_key_press 0048                    _bmp085Calibration 190C  
                 __size_of_init_uart 001A                   __size_of_read_byte 0038  
                  __end_of_Port_Init 2696                  BMP085GetPressure@Pp 0039  
                       _clear_matrix 27A0                      bcd_to_decimal@d 0010  
                 ?_bmp085Calibration 0001                        bmp085ReadUP@p 0028  
                            ?___lmul 000F                      bmp085ReadUP@lsb 0030  
                    bmp085ReadUP@msb 002C                           ??_TMR0_ISR 0001  
                         ??_TMR1_ISR 0001                           ??_TMR3_ISR 0001  
                    _Timer0Interrupt 005F              i2RTOS_SetTask@taskDelay 0003  
                     ___lmul@product 0017                ?_interval_scroll_text 0001  
                ??_bmp085Calibration 001B                  BMP085WriteByte@data 0011  
                 __size_of_pixel_off 0028                __end_of_Update_Matrix 2290  
                            _INTCON2 000FF1              __size_of_bcd_to_decimal 0016  
                            _Cmd7221 2640                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                           ??_Init7221 0014  
                        setTime@hSet 001E                          setTime@mSet 001C  
                            _SSPSTAT 000FC7                          setTime@sSet 001D  
                            _TMRInit 265E              __end_of_RTOS_DeleteTask 1B52  
                     setDate@dateSet 001C                      ?i2_RTOS_SetTask 0001  
          __end_of_bmp085Calibration 19A0                              _FillBuf 10AA  
                            _GetTime 2696                            ?_read_eep 000F  
                          ?_read_bit 0001                 __end_of_init_ds18b20 2518  
                 __size_of_write_eep 0024                   __size_of_write_bit 0024  
                   Update_Matrix@buf 0011                     ?_readTemp_Single 001B  
                   ??_decimal_to_bcd 0017                              __Hparam 0000  
         __size_of_RTOS_DispatchTask 00D2                              __Lparam 0000  
                          ?_set_font 0001                        ?_set_font_set 0001  
                          ?_pixel_on 000F                       setDate@yearSet 001E  
                          ?_time_led 0001                  __end_of_DS3231_Read 24F0  
                          ?_ow_reset 0001                              ___aldiv 179E  
                          ?_pressure 0001                  __end_of_DS3231_init 27A0  
                            ___lbdiv 23A8                      __size_of___lmul 004C  
                            ___lbmod 2566                              ___lldiv 1D56  
                            ___lwdiv 2100                              ___lwmod 21DA  
                            _i_bchar 005D                              __pcinit 1FC4  
                            _getDate 1C5C                              __ramtop 1000  
               __size_of_scroll_left 0054             readTemp_Single@time_flag 001C  
                            __ptext0 2016                              __ptext1 2290  
                            __ptext2 2816                              __ptext3 277C  
                            _getTime 1F64                              __ptext4 2722  
                            __ptext5 24F0                              __ptext6 190C  
                            __ptext7 265E                              __ptext8 27C4  
                            __ptext9 267A                 __size_of_scroll_text 0068  
                  __end_of_home_temp 07AE             readTemp_Single@timer_val 001D  
                    ??_BMP085GetTemp 002D                            _T1CONbits 000FCD  
            __size_of_Interrupt_Init 0006                           _pic_to_led 1E36  
                          _T3CONbits 000FB1                    __end_of_key_press 2192  
                  __end_of_init_uart 273C                              _setDate 22CA  
                  __end_of_read_byte 2374                     ___aldiv@dividend 001B  
                            _setTime 243E                              _scratch 0080  
           __size_of_I2C_Master_Read 0024             __size_of_I2C_Master_Wait 0010  
           __size_of_I2C_Master_Stop 0008                 __size_of_time_set_dt 00EC  
                      putchar_down@i 0026                 __size_of_time_set_dy 0194  
                      putchar_down@j 0025                 __size_of_time_set_hr 0130  
                      putchar_down@k 0024                  putchar_b_buf@symbol 0017  
               __size_of_time_set_mt 01FC                        putchar_down@x 0023  
               __size_of_time_set_yr 00F2           __size_of_SYSTEM_Initialize 003A  
                            _sprintf 23DC                       __pintcode_body 1BD8  
               end_of_initialization 2008           ??_I2C_Master_RepeatedStart 0010  
                      ?_time_set_min 0001                         key_press@key 000F  
                      __Lmediumconst B98E                              int_func 1BD8  
                         ??_read_eep 0011                           ??_read_bit 000F  
                  __end_of_pixel_off 2540                           _play_sound 005C  
                   DS3231_Read@value 0013            __size_of_I2C_Master_Start 0008  
             __size_of_default_state 0006            __size_of_I2C_Master_Write 000C  
                 RTOS_DispatchTask@i 00D7                   RTOS_DispatchTask@j 00D6  
                    ___lldiv@divisor 0013                        RTOS_SetTask@i 0017  
                     ??_set_font_set 0020                      ___lldiv@counter 001B  
                         ??_set_font 000F                           ??_pixel_on 0010  
                         ??_time_led 003F                            _RCSTAbits 000FAB  
                   ___aldiv@quotient 0025                           ??_ow_reset 000F  
                   scroll_left@speed 0018                     I2C_Master_Read@a 0010  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                           ??_pressure 0027  
                       read_byte@val 0011               ??_interval_scroll_text 0015  
                     _BMP085ReadByte 246C                            _PORTCbits 000F82  
                         _show_digit 0381                    __end_of_write_eep 25D4  
                  __end_of_write_bit 25B0                     ___lbmod@dividend 0014  
                          _TRISCbits 000F94                    __size_of_I2C_Init 0016  
                     _BMP085Pressure 1EA0                            _RTOS_Init 27C4  
                   ?_RTOS_DeleteTask 000F                       ??_time_set_min 0020  
                        ___lbmod@rem 0016           __size_of_bmp085Calibration 0094  
                        _DS3231_Read 24C4                           _sound_init 2816  
                          _TXSTAbits 000FAC                          _DS3231_init 278E  
                  __size_of_INT0_ISR 0014                       __end_of_dFont1 BFBC  
                     __end_of_dFont2 BF8A                       __end_of_dFont3 BF58  
                     __end_of_dFont4 BF26                       __end_of_dFont5 BEF4  
             __end_of_BMP085ReadByte 2498                     ??_putchar_down_s 0018  
                     __end_of___lmul 20B4                          _BAUDCONbits 000FB8  
                      ?_bmp085ReadUP 0014                        __pidataCOMRAM 2828  
                         _write_byte 2304                  BMP085Pressure@press 00CC  
                  __size_of_TMR0_ISR 000E                    __size_of_TMR1_ISR 0012  
                  __size_of_TMR3_ISR 001C                       __end_of_pic7x8 B9B2  
                      _default_state 2822                          ?_pic_to_led 0014  
                        __end_ofPL10 13AC                          __end_ofPL20 07BA  
                        __end_ofPL12 0330                          __end_ofPL30 0D02  
                        __end_ofPL22 16A2                          __end_ofPL14 1170  
                        __end_ofPL40 0372                          __end_ofPL32 18F2  
                        __end_ofPL24 1194                          __end_ofPL16 1098  
                        __end_ofPL50 11AC                          __end_ofPL42 0384  
                        __end_ofPL34 0346                          __end_ofPL26 18CE  
                        __end_ofPL18 13B8                          __end_ofPL60 07DC  
                        __end_ofPL52 07D2                          __end_ofPL44 0396  
                        __end_ofPL36 16B0                          __end_ofPL28 18E2  
                        __end_ofPL70 03F8                          __end_ofPL62 03D4  
                        __end_ofPL54 03A2                          __end_ofPL46 14B0  
                        __end_ofPL38 11A0                          __end_ofPL80 0804  
                        __end_ofPL72 040A                          __end_ofPL64 07E6  
                        __end_ofPL56 03BE                          __end_ofPL48 07CA  
              __end_of_bmp085ReadInt 21DA                          __end_ofPL90 0822  
                        __end_ofPL82 0D0C                          __end_ofPL74 041C  
                        __end_ofPL66 07F4                          __end_ofPL58 09F6  
                        __end_ofPL92 0F98                          __end_ofPL84 0814  
                        __end_ofPL76 042E                          __end_ofPL68 03E6  
                        __end_ofPL94 082C                          __end_ofPL86 1D56  
                        __end_ofPL78 043A                          __end_ofPL96 1CC0  
                        __end_ofPL88 0444                          __end_ofPL98 0836  
                start_initialization 1FC4               __end_of_BMP085Pressure 1F04  
                     _bcd_to_decimal 2752                          __end_of_OSS BFDE  
                         ?_RTOS_Init 0001                        ?_putchar_down 001B  
                      ?_DS3231_Write 001A                __size_of_init_ds18b20 0028  
                      ?_RTOS_SetTask 000F                    __size_of_Init7221 0030  
            __size_of_Send_Byte_7221 0024                    ??_I2C_Master_Read 0010  
                  ??_I2C_Master_Wait 000F                    ??_I2C_Master_Stop 0010  
                          _TaskArray 0100                        clear_matrix@i 000F  
                           ??___lmul 0017                BMP085ReadByte@address 0012  
                          _Port_Init 267A                      ?_BMP085ReadByte 0001  
              __end_of_putchar_b_buf 1E36                       ??_bmp085ReadUP 0018  
                   __CFG_LPT1OSC$OFF 000000                      read_eep@address 000F  
                         read_byte@i 0012                       ?_default_state 0001  
             __end_of_bcd_to_decimal 2768                       _Interrupt_Init 281C  
                       _init_ds18b20 24F0                          __pbssCOMRAM 003F  
                    ?_BMP085Pressure 003D                        __pcstackBANK0 00CB  
               __end_of_set_font_set 1492                     ??i2_RTOS_SetTask 0007  
                     ??_putchar_down 001E            RTOS_DispatchTask@function 00D4  
                           ?_Cmd7221 0011             __size_of_BMP085WriteByte 001C  
                     ??_DS3231_Write 001B                       ??_RTOS_SetTask 0015  
                           ?_TMRInit 0001                 readTemp_Single@fptmp 0020  
                           ?_FillBuf 0001                             ?_GetTime 0001  
                      ?_BMP085ReadUT 001B                          ?_sound_init 0001  
                   _I2C_Master_Start 2806                     _I2C_Master_Write 27F2  
               BMP085GetPressure@_pu 0029                    __size_of_read_bit 001C  
                  __size_of_read_eep 0012                     ___lwdiv@dividend 000F  
                __size_of_pic_to_led 006A                    __CFG_CCP2MX$PORTC 000000  
                          __pintcode 0008                        __pmediumconst B98E  
                           ?___aldiv 001B                             ?___lbdiv 000F  
             i2RTOS_SetTask@taskFunc 0001                             ?___lbmod 0013  
                           ?___lldiv 000F                           ?_Port_Init 0001  
                  __size_of_set_font 004C                             ?___lwdiv 000F  
                           ?___lwmod 0016                    __size_of_pixel_on 0024  
                           Cmd7221@i 0013                     bmp085ReadUP@xlsb 0034  
                  __size_of_time_led 00E0                    __size_of_ow_reset 003C  
                        ?_write_byte 0001                    __size_of_pressure 0196  
             __end_of_Interrupt_Init 2822                             ?_getDate 0014  
       ??_INTERRUPT_InterruptManager 000A                            _arrayTail 0060  
               __end_of_time_set_min 1794                             ?_getTime 0014  
                   bmp085ReadInt@lsb 0019                     bmp085ReadInt@msb 0017  
                    ?_bcd_to_decimal 0001                             _I2C_Init 273C  
                           ?_setDate 001C                             ?_setTime 001C  
           i2RTOS_SetTask@taskPeriod 0005                            _home_temp 0672  
                        ??_RTOS_Init 000F                     ___lwdiv@quotient 0014  
                           ?_sprintf 000F                            _key_press 214A  
                          _init_uart 2722                            _read_byte 233C  
                         Cmd7221@adr 0012                           Cmd7221@val 0011  
                    putchar_b_buf@pF 0018                       ??_BMP085ReadUT 001F  
                    ___aldiv@divisor 001F                      ___aldiv@counter 0023  
                           _INT0_ISR 2768                             _LATDbits 000F8C  
                          getDate@p1 0017                            getDate@p2 0016  
                          getDate@p3 0015                            getDate@p4 0014  
                           _PIE1bits 000F9D                             _PIE2bits 000FA0  
                         pixel_off@x 0013                           pixel_off@y 000F  
                   readTemp_Single@i 0022               __size_of_Update_Matrix 003C  
__size_of_INTERRUPT_InterruptManager 1C54                             _PIR1bits 000F9E  
                           _PIR2bits 000FA1                             FillBuf@i 0019  
                          _pixel_off 2518                     __CFG_WDTPS$32768 000000  
                          _time_flag 006B                        ??_scroll_left 0015  
                           _TMR0_ISR 27E4                             _TMR1_ISR 27B2  
                           _TMR3_ISR 2706                        ??_scroll_text 000F  
                          getTime@p1 0016                            getTime@p2 0015  
                          getTime@p3 0014                            _timer_val 006C  
                DS3231_Write@address 001B                      putchar_down_s@i 0020  
                    putchar_down_s@j 001F                      putchar_down_s@k 001E  
                    putchar_down_s@x 001D             __size_of_readTemp_Single 0110  
                    ??_default_state 000F                      ?_Interrupt_Init 0001  
                  _BMP085GetPressure 0012                        ??_time_set_dt 0020  
                      ??_time_set_dy 0020                        ??_time_set_hr 0020  
                      ??_time_set_mt 0020                        ??_time_set_yr 0020  
                __size_of_sound_init 0006                __end_of_BMP085GetTemp 12BE  
                        write_byte@i 0014                   ?_BMP085GetPressure 0029  
                           _Dis_Buff 00AB                           ?_home_temp 0001  
                I2C_Master_Read@temp 0011                             _Init7221 240E  
                         ?_key_press 0001                            _write_eep 25B0  
                          _write_bit 258C                           ?_init_uart 0001  
                  ___lmul@multiplier 000F                          _INTCON2bits 000FF1  
                   __size_of_Cmd7221 001E                           ?_read_byte 0001  
                          _type_font 0061                  ??_BMP085GetPressure 002D  
                     _Send_Byte_7221 25D4                 __end_of_bmp085ReadUP 0E80  
                   __size_of_TMRInit 001C                         ?_DS3231_Read 0001  
                __size_of_write_byte 0038                    Update_Matrix@data 0012  
                  ??_BMP085WriteByte 0012                     __size_of_FillBuf 00A0  
                   __size_of_GetTime 001C                         ?_DS3231_init 0001  
                         _EECON1bits 000FA6                          _count_sound 005A  
                           __Hrparam 0000                      setDate@monthSet 001D  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                         ?_pixel_off 000F               BMP085WriteByte@address 0012  
               __end_of_putchar_down 1AC8                   DS3231_Read@address 0012  
                        ??_Port_Init 000F                    Send_Byte_7221@dat 000F  
                     key_press@count 005B                 __end_of_DS3231_Write 26CE  
                   __size_of___aldiv 00BC    __size_of_I2C_Master_RepeatedStart 0008  
                   __size_of___lbdiv 0034                     __size_of___lbmod 0026  
          ?_I2C_Master_RepeatedStart 0001                 __end_of_RTOS_SetTask 1BC4  
                   __size_of___lldiv 0076            __end_of_BMP085GetPressure 031E  
                   __size_of___lwdiv 004A                     __size_of___lwmod 003E  
              __size_of_set_font_set 00D0        __size_of_interval_scroll_text 002C  
            __size_of_decimal_to_bcd 0026                     __size_of_getDate 005C  
                   __size_of_getTime 004C                  __end_of_scroll_left 1F58  
                readTemp_Single@temp 0023                         ??_pic_to_led 0015  
                __end_of_scroll_text 1D46                        _Update_Matrix 2254  
                    _I2C_Master_Read 261C                      _I2C_Master_Wait 27D4  
                    _I2C_Master_Stop 27FE                      ___lwdiv@divisor 0011  
                   __size_of_setDate 003A                      ___lwdiv@counter 0013  
                   __size_of_setTime 002E                             __ptext10 281C  
                           __ptext11 240E                             __ptext20 13C2  
                           __ptext12 2640                             __ptext21 0A08  
                           __ptext13 273C                             __ptext30 22CA  
                           __ptext22 0F98                             __ptext14 278E  
                           __ptext31 2540                             __ptext23 0460  
                           __ptext15 15C0                             __ptext40 1EA0  
                           __ptext32 26B2                             __ptext24 2822  
                           __ptext16 0854                             __ptext41 0D32  
                           __ptext33 0E80                             __ptext25 0BBC  
                           __ptext17 0672                             __ptext50 179E  
                           __ptext42 246C                             __ptext34 2304  
                           __ptext26 214A                             __ptext18 16B0  
                           __ptext51 25B0                             __ptext43 2374  
                           __ptext35 258C                             __ptext27 12BE  
                           __ptext19 2696                             __ptext60 2254  
                           __ptext52 20B4                             __ptext44 2192  
                           __ptext36 233C                             __ptext28 14C4  
                           __ptext61 25D4                             __ptext53 1DCC  
                           __ptext45 26EA                             __ptext37 26CE  
                           __ptext29 243E                             __ptext70 1B52  
                           __ptext62 1E36                             __ptext54 23DC  
                           __ptext46 11B6                             __ptext38 2218  
                           __ptext71 1AC8                             __ptext63 25F8  
                           __ptext55 2498                             __ptext47 0012  
                           __ptext39 10AA                             __ptext80 261C  
                           __ptext72 1F64                             __ptext64 2518  
                           __ptext56 1CDE                             __ptext48 2068  
                           __ptext81 27D4                             __ptext73 1C5C  
                           __ptext65 27A0                             __ptext57 1F04  
                           __ptext49 1D56                             __ptext74 2752  
                           __ptext66 21DA                             __ptext58 19A0  
                           __ptext83 2706                             __ptext75 24C4  
                           __ptext67 2100                             __ptext59 1A34  
                           __ptext84 27B2                             __ptext76 27F2  
                           __ptext68 2566                             __ptext85 27E4  
                           __ptext77 27FE                             __ptext69 23A8  
                           __ptext86 2768                             __ptext78 2806  
                           __ptext87 185A                             __ptext79 280E  
                           __ptext88 0000               __end_of_Send_Byte_7221 25F8  
                         ?_write_eep 000F                           ?_write_bit 0001  
                __end_of_time_set_dt 1084                  __end_of_time_set_dy 0B9C  
                __end_of_time_set_hr 0CEC                  __end_of_time_set_mt 065C  
                __end_of_time_set_yr 15B6                     __size_of_sprintf 0028  
                     Update_Matrix@i 0014                       Update_Matrix@j 0013  
                      __size_of_main 0052                             _read_bit 26CE  
                           _read_eep 277C                    putchar_b_buf@mask 001C  
                     putchar_b_buf@i 001F                       putchar_b_buf@j 001E  
                     putchar_b_buf@x 001D                     ??_BMP085ReadByte 0012  
            RTOS_DeleteTask@taskFunc 000F                            pixel_on@x 0012  
                          pixel_on@y 000F                        ?_clear_matrix 0001  
                           _set_font 20B4             __size_of_RTOS_DeleteTask 008A  
                           _pixel_on 25F8                         _set_font_set 13C2  
                 __end_of_pic_to_led 1EA0                             _time_led 12BE  
               putchar_down_s@symbol 0017                       putchar_down@pF 001C  
                           _ow_reset 2218                __size_of_time_set_min 00E4  
                           int$flags 0071                             _pressure 0854  
                           _text_buf 0178   __end_of_INTERRUPT_InterruptManager 1C5C  
         _INTERRUPT_InterruptManager 0008                      i2RTOS_SetTask@i 0009  
                   ??_BMP085Pressure 003F                 __end_of_BMP085ReadUT 23A8  
                     ?_Update_Matrix 0011             __end_of_I2C_Master_Start 280E  
           __end_of_I2C_Master_Write 27FE                           _INTCONbits 000FF2  
                  ??_readTemp_Single 001E                          ??_home_temp 0027  
                       scroll_left@i 0019                         scroll_left@j 0016  
                       scroll_left@k 0017                      ?_Send_Byte_7221 0001  
                   BMP085GetTemp@_tu 0029                          ??_key_press 000F  
                        ??_init_uart 000F                          ??_read_byte 000F  
                       scroll_text@i 0011                   readTemp_Single@buf 001B  
                           intlevel2 0000                   readTemp_Single@tmp 0021  
                          sprintf@sp 000F                     ___lwmod@dividend 0016  
                   ___lldiv@dividend 000F                         ??_sound_init 000F  
                       _time_set_min 16B0                       ??_clear_matrix 000F  
             __size_of_bmp085ReadInt 0048                          ??_pixel_off 0010  
                   ??_bcd_to_decimal 000F                          _scroll_left 1F04  
                        _scroll_text 1CDE              __end_of_I2C_Master_Read 2640  
            __end_of_I2C_Master_Wait 27E4              __end_of_I2C_Master_Stop 2806  
                 putchar_down@symbol 001B           __size_of_BMP085GetPressure 030C  
                       ??_write_byte 0010                      BMP085GetTemp@Tt 0035  
                        _temperature 0069                             sprintf@c 0013  
                           sprintf@f 0011                          _time_set_dt 0F98  
                   ___lldiv@quotient 0017                          _time_set_dy 0A08  
                        _time_set_hr 0BBC                    I2C_Master_Write@d 0010  
                        _time_set_mt 0460                      ___lwmod@divisor 0018  
                        _time_set_yr 14C4                   __end_of_sound_init 281C  
                    ___lwmod@counter 001A                         ___aldiv@sign 0024  
              __size_of_bmp085ReadUP 014E              __size_of_putchar_down_s 0094  
                        ??_write_eep 0010                          ??_write_bit 000F  
             __size_of_putchar_b_buf 006A                 bmp085ReadInt@address 0016  
                 __end_of_write_byte 233C                __size_of_putchar_down 0094  
              __size_of_DS3231_Write 001C                 __size_of_DS3231_Read 002C  
              __size_of_RTOS_SetTask 0072                 __size_of_DS3231_init 0012  
