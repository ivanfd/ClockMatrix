

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Thu Mar 02 16:06:29 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18F4525
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    98                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    99                           	psect	pa_nodes0,global,class=CODE,delta=1
   100  0000                     
   101                           ; Version 1.41
   102                           ; Generated 25/01/2017 GMT
   103                           ; 
   104                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   105                           ; All rights reserved.
   106                           ; 
   107                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   108                           ; 
   109                           ; Redistribution and use in source and binary forms, with or without modification, are
   110                           ; permitted provided that the following conditions are met:
   111                           ; 
   112                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   113                           ;        conditions and the following disclaimer.
   114                           ; 
   115                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   116                           ;        of conditions and the following disclaimer in the documentation and/or other
   117                           ;        materials provided with the distribution.
   118                           ; 
   119                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   120                           ;        software without specific prior written permission.
   121                           ; 
   122                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   123                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   124                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   125                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   126                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   127                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   128                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   129                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   130                           ; 
   131                           ; 
   132                           ; Code-generator required, PIC18F4525 Definitions
   133                           ; 
   134                           ; SFR Addresses
   135  0000                     tosu	equ	0xFFF
   136                           tosh	equ	0xFFE
   137                           tosl	equ	0xFFD
   138                           pclath	equ	0xFFA
   139                           tblptru	equ	0xFF8
   140                           tblptrh	equ	0xFF7
   141                           tblptrl	equ	0xFF6
   142                           tablat	equ	0xFF5
   143                           prodh	equ	0xFF4
   144                           prodl	equ	0xFF3
   145                           intcon	equ	0xFF2
   146                           intcon2	equ	0xFF1
   147                           wreg	equ	0xFE8
   148                           indf1	equ	0xFE7
   149                           plusw1	equ	0xFE3
   150                           fsr1h	equ	0xFE2
   151                           fsr1l	equ	0xFE1
   152                           indf2	equ	0xFDF
   153                           postinc2	equ	0xFDE
   154                           postdec2	equ	0xFDD
   155                           plusw2	equ	0xFDB
   156                           fsr2h	equ	0xFDA
   157                           fsr2l	equ	0xFD9
   158                           status	equ	0xFD8
   159                           
   160                           	psect	idataCOMRAM
   161  0023E0                     __pidataCOMRAM:
   162                           	opt stack 0
   163                           
   164                           ;initializer for _events
   165  0023E0  05                 	db	5
   166                           tosu	equ	0xFFF
   167                           tosh	equ	0xFFE
   168                           tosl	equ	0xFFD
   169                           pclath	equ	0xFFA
   170                           tblptru	equ	0xFF8
   171                           tblptrh	equ	0xFF7
   172                           tblptrl	equ	0xFF6
   173                           tablat	equ	0xFF5
   174                           prodh	equ	0xFF4
   175                           prodl	equ	0xFF3
   176                           intcon	equ	0xFF2
   177                           intcon2	equ	0xFF1
   178                           wreg	equ	0xFE8
   179                           indf1	equ	0xFE7
   180                           plusw1	equ	0xFE3
   181                           fsr1h	equ	0xFE2
   182                           fsr1l	equ	0xFE1
   183                           indf2	equ	0xFDF
   184                           postinc2	equ	0xFDE
   185                           postdec2	equ	0xFDD
   186                           plusw2	equ	0xFDB
   187                           fsr2h	equ	0xFDA
   188                           fsr2l	equ	0xFD9
   189                           status	equ	0xFD8
   190                           
   191                           	psect	mediumconst
   192  00BA9A                     __pmediumconst:
   193                           	opt stack 0
   194  00BA9A  00                 	db	0
   195  00BA9B                     _pic7x8:
   196                           	opt stack 0
   197  00BA9B  00                 	db	0
   198  00BA9C  00                 	db	0
   199  00BA9D  00                 	db	0
   200  00BA9E  00                 	db	0
   201  00BA9F  00                 	db	0
   202  00BAA0  00                 	db	0
   203  00BAA1  00                 	db	0
   204  00BAA2  08                 	db	8
   205  00BAA3  7C                 	db	124
   206  00BAA4  4E                 	db	78
   207  00BAA5  4F                 	db	79
   208  00BAA6  4E                 	db	78
   209  00BAA7  7C                 	db	124
   210  00BAA8  08                 	db	8
   211  00BAA9  04                 	db	4
   212  00BAAA  26                 	db	38
   213  00BAAB  47                 	db	71
   214  00BAAC  3F                 	db	63
   215  00BAAD  07                 	db	7
   216  00BAAE  06                 	db	6
   217  00BAAF  04                 	db	4
   218  00BAB0  20                 	db	32
   219  00BAB1  3E                 	db	62
   220  00BAB2  7F                 	db	127
   221  00BAB3  7F                 	db	127
   222  00BAB4  3F                 	db	63
   223  00BAB5  3E                 	db	62
   224  00BAB6  20                 	db	32
   225  00BAB7                     __end_of_pic7x8:
   226                           	opt stack 0
   227  00BAB7                     _fract:
   228                           	opt stack 0
   229  00BAB7  00                 	db	0
   230  00BAB8  01                 	db	1
   231  00BAB9  01                 	db	1
   232  00BABA  02                 	db	2
   233  00BABB  02                 	db	2
   234  00BABC  03                 	db	3
   235  00BABD  04                 	db	4
   236  00BABE  04                 	db	4
   237  00BABF  05                 	db	5
   238  00BAC0  06                 	db	6
   239  00BAC1  06                 	db	6
   240  00BAC2  07                 	db	7
   241  00BAC3  07                 	db	7
   242  00BAC4  08                 	db	8
   243  00BAC5  09                 	db	9
   244  00BAC6  09                 	db	9
   245  00BAC7                     __end_of_fract:
   246                           	opt stack 0
   247  00BAC7                     _OSS:
   248                           	opt stack 0
   249  00BAC7  00                 	db	0
   250  00BAC8                     __end_of_OSS:
   251                           	opt stack 0
   252  00BAC8                     _Font:
   253                           	opt stack 0
   254  00BAC8  00                 	db	0
   255  00BAC9  00                 	db	0
   256  00BACA  00                 	db	0
   257  00BACB  00                 	db	0
   258  00BACC  00                 	db	0
   259  00BACD  45                 	db	69
   260  00BACE  51                 	db	81
   261  00BACF  45                 	db	69
   262  00BAD0  3E                 	db	62
   263  00BAD1  00                 	db	0
   264  00BAD2  6B                 	db	107
   265  00BAD3  6F                 	db	111
   266  00BAD4  6B                 	db	107
   267  00BAD5  3E                 	db	62
   268  00BAD6  00                 	db	0
   269  00BAD7  3E                 	db	62
   270  00BAD8  7C                 	db	124
   271  00BAD9  3E                 	db	62
   272  00BADA  1C                 	db	28
   273  00BADB  00                 	db	0
   274  00BADC  3C                 	db	60
   275  00BADD  7E                 	db	126
   276  00BADE  3C                 	db	60
   277  00BADF  18                 	db	24
   278  00BAE0  00                 	db	0
   279  00BAE1  36                 	db	54
   280  00BAE2  7F                 	db	127
   281  00BAE3  36                 	db	54
   282  00BAE4  30                 	db	48
   283  00BAE5  00                 	db	0
   284  00BAE6  00                 	db	0
   285  00BAE7  00                 	db	0
   286  00BAE8  00                 	db	0
   287  00BAE9  00                 	db	0
   288  00BAEA  00                 	db	0
   289  00BAEB  00                 	db	0
   290  00BAEC  00                 	db	0
   291  00BAED  00                 	db	0
   292  00BAEE  00                 	db	0
   293  00BAEF  00                 	db	0
   294  00BAF0  00                 	db	0
   295  00BAF1  00                 	db	0
   296  00BAF2  00                 	db	0
   297  00BAF3  00                 	db	0
   298  00BAF4  00                 	db	0
   299  00BAF5  00                 	db	0
   300  00BAF6  00                 	db	0
   301  00BAF7  00                 	db	0
   302  00BAF8  00                 	db	0
   303  00BAF9  00                 	db	0
   304  00BAFA  00                 	db	0
   305  00BAFB  00                 	db	0
   306  00BAFC  00                 	db	0
   307  00BAFD  00                 	db	0
   308  00BAFE  00                 	db	0
   309  00BAFF  00                 	db	0
   310  00BB00  00                 	db	0
   311  00BB01  00                 	db	0
   312  00BB02  00                 	db	0
   313  00BB03  00                 	db	0
   314  00BB04  00                 	db	0
   315  00BB05  00                 	db	0
   316  00BB06  00                 	db	0
   317  00BB07  00                 	db	0
   318  00BB08  00                 	db	0
   319  00BB09  00                 	db	0
   320  00BB0A  00                 	db	0
   321  00BB0B  00                 	db	0
   322  00BB0C  00                 	db	0
   323  00BB0D  00                 	db	0
   324  00BB0E  00                 	db	0
   325  00BB0F  00                 	db	0
   326  00BB10  00                 	db	0
   327  00BB11  00                 	db	0
   328  00BB12  00                 	db	0
   329  00BB13  00                 	db	0
   330  00BB14  00                 	db	0
   331  00BB15  00                 	db	0
   332  00BB16  00                 	db	0
   333  00BB17  00                 	db	0
   334  00BB18  00                 	db	0
   335  00BB19  00                 	db	0
   336  00BB1A  00                 	db	0
   337  00BB1B  00                 	db	0
   338  00BB1C  00                 	db	0
   339  00BB1D  00                 	db	0
   340  00BB1E  00                 	db	0
   341  00BB1F  00                 	db	0
   342  00BB20  00                 	db	0
   343  00BB21  00                 	db	0
   344  00BB22  00                 	db	0
   345  00BB23  00                 	db	0
   346  00BB24  00                 	db	0
   347  00BB25  00                 	db	0
   348  00BB26  00                 	db	0
   349  00BB27  00                 	db	0
   350  00BB28  00                 	db	0
   351  00BB29  00                 	db	0
   352  00BB2A  00                 	db	0
   353  00BB2B  00                 	db	0
   354  00BB2C  00                 	db	0
   355  00BB2D  00                 	db	0
   356  00BB2E  00                 	db	0
   357  00BB2F  00                 	db	0
   358  00BB30  00                 	db	0
   359  00BB31  00                 	db	0
   360  00BB32  00                 	db	0
   361  00BB33  00                 	db	0
   362  00BB34  00                 	db	0
   363  00BB35  00                 	db	0
   364  00BB36  00                 	db	0
   365  00BB37  00                 	db	0
   366  00BB38  00                 	db	0
   367  00BB39  00                 	db	0
   368  00BB3A  00                 	db	0
   369  00BB3B  00                 	db	0
   370  00BB3C  00                 	db	0
   371  00BB3D  00                 	db	0
   372  00BB3E  00                 	db	0
   373  00BB3F  00                 	db	0
   374  00BB40  7C                 	db	124
   375  00BB41  4E                 	db	78
   376  00BB42  4E                 	db	78
   377  00BB43  7C                 	db	124
   378  00BB44  08                 	db	8
   379  00BB45  20                 	db	32
   380  00BB46  34                 	db	52
   381  00BB47  7E                 	db	126
   382  00BB48  34                 	db	52
   383  00BB49  20                 	db	32
   384  00BB4A  00                 	db	0
   385  00BB4B  00                 	db	0
   386  00BB4C  36                 	db	54
   387  00BB4D  36                 	db	54
   388  00BB4E  00                 	db	0
   389  00BB4F  00                 	db	0
   390  00BB50  00                 	db	0
   391  00BB51  00                 	db	0
   392  00BB52  00                 	db	0
   393  00BB53  00                 	db	0
   394  00BB54  00                 	db	0
   395  00BB55  00                 	db	0
   396  00BB56  00                 	db	0
   397  00BB57  00                 	db	0
   398  00BB58  00                 	db	0
   399  00BB59  00                 	db	0
   400  00BB5A  00                 	db	0
   401  00BB5B  00                 	db	0
   402  00BB5C  00                 	db	0
   403  00BB5D  00                 	db	0
   404  00BB5E  00                 	db	0
   405  00BB5F  00                 	db	0
   406  00BB60  00                 	db	0
   407  00BB61  00                 	db	0
   408  00BB62  00                 	db	0
   409  00BB63  00                 	db	0
   410  00BB64  00                 	db	0
   411  00BB65  00                 	db	0
   412  00BB66  00                 	db	0
   413  00BB67  00                 	db	0
   414  00BB68  00                 	db	0
   415  00BB69  00                 	db	0
   416  00BB6A  00                 	db	0
   417  00BB6B  00                 	db	0
   418  00BB6C  00                 	db	0
   419  00BB6D  00                 	db	0
   420  00BB6E  00                 	db	0
   421  00BB6F  5F                 	db	95
   422  00BB70  00                 	db	0
   423  00BB71  00                 	db	0
   424  00BB72  00                 	db	0
   425  00BB73  07                 	db	7
   426  00BB74  00                 	db	0
   427  00BB75  07                 	db	7
   428  00BB76  00                 	db	0
   429  00BB77  14                 	db	20
   430  00BB78  7F                 	db	127
   431  00BB79  14                 	db	20
   432  00BB7A  7F                 	db	127
   433  00BB7B  14                 	db	20
   434  00BB7C  24                 	db	36
   435  00BB7D  2A                 	db	42
   436  00BB7E  7F                 	db	127
   437  00BB7F  2A                 	db	42
   438  00BB80  12                 	db	18
   439  00BB81  23                 	db	35
   440  00BB82  13                 	db	19
   441  00BB83  08                 	db	8
   442  00BB84  64                 	db	100
   443  00BB85  62                 	db	98
   444  00BB86  36                 	db	54
   445  00BB87  49                 	db	73
   446  00BB88  56                 	db	86
   447  00BB89  20                 	db	32
   448  00BB8A  50                 	db	80
   449  00BB8B  00                 	db	0
   450  00BB8C  08                 	db	8
   451  00BB8D  07                 	db	7
   452  00BB8E  03                 	db	3
   453  00BB8F  00                 	db	0
   454  00BB90  00                 	db	0
   455  00BB91  1C                 	db	28
   456  00BB92  22                 	db	34
   457  00BB93  41                 	db	65
   458  00BB94  00                 	db	0
   459  00BB95  00                 	db	0
   460  00BB96  41                 	db	65
   461  00BB97  22                 	db	34
   462  00BB98  1C                 	db	28
   463  00BB99  00                 	db	0
   464  00BB9A  2A                 	db	42
   465  00BB9B  1C                 	db	28
   466  00BB9C  7F                 	db	127
   467  00BB9D  1C                 	db	28
   468  00BB9E  2A                 	db	42
   469  00BB9F  08                 	db	8
   470  00BBA0  08                 	db	8
   471  00BBA1  3E                 	db	62
   472  00BBA2  08                 	db	8
   473  00BBA3  08                 	db	8
   474  00BBA4  00                 	db	0
   475  00BBA5  80                 	db	128
   476  00BBA6  70                 	db	112
   477  00BBA7  30                 	db	48
   478  00BBA8  00                 	db	0
   479  00BBA9  08                 	db	8
   480  00BBAA  08                 	db	8
   481  00BBAB  08                 	db	8
   482  00BBAC  08                 	db	8
   483  00BBAD  08                 	db	8
   484  00BBAE  60                 	db	96
   485  00BBAF  60                 	db	96
   486  00BBB0  00                 	db	0
   487  00BBB1  00                 	db	0
   488  00BBB2  00                 	db	0
   489  00BBB3  20                 	db	32
   490  00BBB4  10                 	db	16
   491  00BBB5  08                 	db	8
   492  00BBB6  04                 	db	4
   493  00BBB7  02                 	db	2
   494  00BBB8  7F                 	db	127
   495  00BBB9  7F                 	db	127
   496  00BBBA  41                 	db	65
   497  00BBBB  7F                 	db	127
   498  00BBBC  7F                 	db	127
   499  00BBBD  00                 	db	0
   500  00BBBE  01                 	db	1
   501  00BBBF  7F                 	db	127
   502  00BBC0  7F                 	db	127
   503  00BBC1  00                 	db	0
   504  00BBC2  63                 	db	99
   505  00BBC3  73                 	db	115
   506  00BBC4  59                 	db	89
   507  00BBC5  4F                 	db	79
   508  00BBC6  47                 	db	71
   509  00BBC7  63                 	db	99
   510  00BBC8  63                 	db	99
   511  00BBC9  49                 	db	73
   512  00BBCA  7F                 	db	127
   513  00BBCB  77                 	db	119
   514  00BBCC  1F                 	db	31
   515  00BBCD  1F                 	db	31
   516  00BBCE  10                 	db	16
   517  00BBCF  7F                 	db	127
   518  00BBD0  7F                 	db	127
   519  00BBD1  6F                 	db	111
   520  00BBD2  6F                 	db	111
   521  00BBD3  49                 	db	73
   522  00BBD4  79                 	db	121
   523  00BBD5  79                 	db	121
   524  00BBD6  7F                 	db	127
   525  00BBD7  7F                 	db	127
   526  00BBD8  49                 	db	73
   527  00BBD9  7B                 	db	123
   528  00BBDA  7B                 	db	123
   529  00BBDB  03                 	db	3
   530  00BBDC  73                 	db	115
   531  00BBDD  79                 	db	121
   532  00BBDE  0F                 	db	15
   533  00BBDF  07                 	db	7
   534  00BBE0  77                 	db	119
   535  00BBE1  7F                 	db	127
   536  00BBE2  49                 	db	73
   537  00BBE3  7F                 	db	127
   538  00BBE4  77                 	db	119
   539  00BBE5  6F                 	db	111
   540  00BBE6  6F                 	db	111
   541  00BBE7  49                 	db	73
   542  00BBE8  7F                 	db	127
   543  00BBE9  7F                 	db	127
   544  00BBEA  00                 	db	0
   545  00BBEB  00                 	db	0
   546  00BBEC  36                 	db	54
   547  00BBED  36                 	db	54
   548  00BBEE  00                 	db	0
   549  00BBEF  00                 	db	0
   550  00BBF0  40                 	db	64
   551  00BBF1  34                 	db	52
   552  00BBF2  00                 	db	0
   553  00BBF3  00                 	db	0
   554  00BBF4  00                 	db	0
   555  00BBF5  08                 	db	8
   556  00BBF6  14                 	db	20
   557  00BBF7  22                 	db	34
   558  00BBF8  41                 	db	65
   559  00BBF9  14                 	db	20
   560  00BBFA  14                 	db	20
   561  00BBFB  14                 	db	20
   562  00BBFC  14                 	db	20
   563  00BBFD  14                 	db	20
   564  00BBFE  00                 	db	0
   565  00BBFF  41                 	db	65
   566  00BC00  22                 	db	34
   567  00BC01  14                 	db	20
   568  00BC02  08                 	db	8
   569  00BC03  02                 	db	2
   570  00BC04  01                 	db	1
   571  00BC05  59                 	db	89
   572  00BC06  09                 	db	9
   573  00BC07  06                 	db	6
   574  00BC08  3E                 	db	62
   575  00BC09  41                 	db	65
   576  00BC0A  5D                 	db	93
   577  00BC0B  59                 	db	89
   578  00BC0C  4E                 	db	78
   579  00BC0D  7C                 	db	124
   580  00BC0E  12                 	db	18
   581  00BC0F  11                 	db	17
   582  00BC10  12                 	db	18
   583  00BC11  7C                 	db	124
   584  00BC12  7F                 	db	127
   585  00BC13  49                 	db	73
   586  00BC14  49                 	db	73
   587  00BC15  49                 	db	73
   588  00BC16  36                 	db	54
   589  00BC17  3E                 	db	62
   590  00BC18  41                 	db	65
   591  00BC19  41                 	db	65
   592  00BC1A  41                 	db	65
   593  00BC1B  22                 	db	34
   594  00BC1C  7F                 	db	127
   595  00BC1D  41                 	db	65
   596  00BC1E  41                 	db	65
   597  00BC1F  41                 	db	65
   598  00BC20  3E                 	db	62
   599  00BC21  7F                 	db	127
   600  00BC22  49                 	db	73
   601  00BC23  49                 	db	73
   602  00BC24  49                 	db	73
   603  00BC25  41                 	db	65
   604  00BC26  7F                 	db	127
   605  00BC27  09                 	db	9
   606  00BC28  09                 	db	9
   607  00BC29  09                 	db	9
   608  00BC2A  01                 	db	1
   609  00BC2B  3E                 	db	62
   610  00BC2C  41                 	db	65
   611  00BC2D  41                 	db	65
   612  00BC2E  51                 	db	81
   613  00BC2F  72                 	db	114
   614  00BC30  7F                 	db	127
   615  00BC31  08                 	db	8
   616  00BC32  08                 	db	8
   617  00BC33  08                 	db	8
   618  00BC34  7F                 	db	127
   619  00BC35  00                 	db	0
   620  00BC36  41                 	db	65
   621  00BC37  7F                 	db	127
   622  00BC38  41                 	db	65
   623  00BC39  00                 	db	0
   624  00BC3A  20                 	db	32
   625  00BC3B  40                 	db	64
   626  00BC3C  41                 	db	65
   627  00BC3D  3F                 	db	63
   628  00BC3E  01                 	db	1
   629  00BC3F  7F                 	db	127
   630  00BC40  08                 	db	8
   631  00BC41  14                 	db	20
   632  00BC42  22                 	db	34
   633  00BC43  41                 	db	65
   634  00BC44  7F                 	db	127
   635  00BC45  40                 	db	64
   636  00BC46  40                 	db	64
   637  00BC47  40                 	db	64
   638  00BC48  40                 	db	64
   639  00BC49  7F                 	db	127
   640  00BC4A  02                 	db	2
   641  00BC4B  04                 	db	4
   642  00BC4C  02                 	db	2
   643  00BC4D  7F                 	db	127
   644  00BC4E  7F                 	db	127
   645  00BC4F  04                 	db	4
   646  00BC50  08                 	db	8
   647  00BC51  10                 	db	16
   648  00BC52  7F                 	db	127
   649  00BC53  3E                 	db	62
   650  00BC54  41                 	db	65
   651  00BC55  41                 	db	65
   652  00BC56  41                 	db	65
   653  00BC57  3E                 	db	62
   654  00BC58  7F                 	db	127
   655  00BC59  09                 	db	9
   656  00BC5A  09                 	db	9
   657  00BC5B  09                 	db	9
   658  00BC5C  06                 	db	6
   659  00BC5D  3E                 	db	62
   660  00BC5E  41                 	db	65
   661  00BC5F  51                 	db	81
   662  00BC60  21                 	db	33
   663  00BC61  5E                 	db	94
   664  00BC62  7F                 	db	127
   665  00BC63  09                 	db	9
   666  00BC64  19                 	db	25
   667  00BC65  29                 	db	41
   668  00BC66  46                 	db	70
   669  00BC67  26                 	db	38
   670  00BC68  49                 	db	73
   671  00BC69  49                 	db	73
   672  00BC6A  49                 	db	73
   673  00BC6B  32                 	db	50
   674  00BC6C  01                 	db	1
   675  00BC6D  01                 	db	1
   676  00BC6E  7F                 	db	127
   677  00BC6F  01                 	db	1
   678  00BC70  01                 	db	1
   679  00BC71  3F                 	db	63
   680  00BC72  40                 	db	64
   681  00BC73  40                 	db	64
   682  00BC74  40                 	db	64
   683  00BC75  3F                 	db	63
   684  00BC76  1F                 	db	31
   685  00BC77  20                 	db	32
   686  00BC78  40                 	db	64
   687  00BC79  20                 	db	32
   688  00BC7A  1F                 	db	31
   689  00BC7B  3F                 	db	63
   690  00BC7C  40                 	db	64
   691  00BC7D  38                 	db	56
   692  00BC7E  40                 	db	64
   693  00BC7F  3F                 	db	63
   694  00BC80  63                 	db	99
   695  00BC81  14                 	db	20
   696  00BC82  08                 	db	8
   697  00BC83  14                 	db	20
   698  00BC84  63                 	db	99
   699  00BC85  03                 	db	3
   700  00BC86  04                 	db	4
   701  00BC87  78                 	db	120
   702  00BC88  04                 	db	4
   703  00BC89  03                 	db	3
   704  00BC8A  61                 	db	97
   705  00BC8B  51                 	db	81
   706  00BC8C  49                 	db	73
   707  00BC8D  45                 	db	69
   708  00BC8E  43                 	db	67
   709  00BC8F  00                 	db	0
   710  00BC90  7F                 	db	127
   711  00BC91  41                 	db	65
   712  00BC92  41                 	db	65
   713  00BC93  00                 	db	0
   714  00BC94  02                 	db	2
   715  00BC95  04                 	db	4
   716  00BC96  08                 	db	8
   717  00BC97  10                 	db	16
   718  00BC98  20                 	db	32
   719  00BC99  00                 	db	0
   720  00BC9A  41                 	db	65
   721  00BC9B  41                 	db	65
   722  00BC9C  7F                 	db	127
   723  00BC9D  00                 	db	0
   724  00BC9E  04                 	db	4
   725  00BC9F  02                 	db	2
   726  00BCA0  01                 	db	1
   727  00BCA1  02                 	db	2
   728  00BCA2  04                 	db	4
   729  00BCA3  40                 	db	64
   730  00BCA4  40                 	db	64
   731  00BCA5  40                 	db	64
   732  00BCA6  40                 	db	64
   733  00BCA7  40                 	db	64
   734  00BCA8  00                 	db	0
   735  00BCA9  03                 	db	3
   736  00BCAA  07                 	db	7
   737  00BCAB  08                 	db	8
   738  00BCAC  00                 	db	0
   739  00BCAD  20                 	db	32
   740  00BCAE  54                 	db	84
   741  00BCAF  54                 	db	84
   742  00BCB0  78                 	db	120
   743  00BCB1  40                 	db	64
   744  00BCB2  7F                 	db	127
   745  00BCB3  28                 	db	40
   746  00BCB4  44                 	db	68
   747  00BCB5  44                 	db	68
   748  00BCB6  38                 	db	56
   749  00BCB7  38                 	db	56
   750  00BCB8  44                 	db	68
   751  00BCB9  44                 	db	68
   752  00BCBA  44                 	db	68
   753  00BCBB  28                 	db	40
   754  00BCBC  38                 	db	56
   755  00BCBD  44                 	db	68
   756  00BCBE  44                 	db	68
   757  00BCBF  28                 	db	40
   758  00BCC0  7F                 	db	127
   759  00BCC1  38                 	db	56
   760  00BCC2  54                 	db	84
   761  00BCC3  54                 	db	84
   762  00BCC4  54                 	db	84
   763  00BCC5  18                 	db	24
   764  00BCC6  08                 	db	8
   765  00BCC7  7E                 	db	126
   766  00BCC8  09                 	db	9
   767  00BCC9  02                 	db	2
   768  00BCCA  00                 	db	0
   769  00BCCB  18                 	db	24
   770  00BCCC  A4                 	db	164
   771  00BCCD  A4                 	db	164
   772  00BCCE  9C                 	db	156
   773  00BCCF  78                 	db	120
   774  00BCD0  7F                 	db	127
   775  00BCD1  08                 	db	8
   776  00BCD2  04                 	db	4
   777  00BCD3  04                 	db	4
   778  00BCD4  78                 	db	120
   779  00BCD5  00                 	db	0
   780  00BCD6  44                 	db	68
   781  00BCD7  7D                 	db	125
   782  00BCD8  40                 	db	64
   783  00BCD9  00                 	db	0
   784  00BCDA  20                 	db	32
   785  00BCDB  40                 	db	64
   786  00BCDC  40                 	db	64
   787  00BCDD  3D                 	db	61
   788  00BCDE  00                 	db	0
   789  00BCDF  7F                 	db	127
   790  00BCE0  10                 	db	16
   791  00BCE1  28                 	db	40
   792  00BCE2  44                 	db	68
   793  00BCE3  00                 	db	0
   794  00BCE4  00                 	db	0
   795  00BCE5  41                 	db	65
   796  00BCE6  7F                 	db	127
   797  00BCE7  40                 	db	64
   798  00BCE8  00                 	db	0
   799  00BCE9  7C                 	db	124
   800  00BCEA  04                 	db	4
   801  00BCEB  78                 	db	120
   802  00BCEC  04                 	db	4
   803  00BCED  78                 	db	120
   804  00BCEE  7C                 	db	124
   805  00BCEF  08                 	db	8
   806  00BCF0  04                 	db	4
   807  00BCF1  04                 	db	4
   808  00BCF2  78                 	db	120
   809  00BCF3  38                 	db	56
   810  00BCF4  44                 	db	68
   811  00BCF5  44                 	db	68
   812  00BCF6  44                 	db	68
   813  00BCF7  38                 	db	56
   814  00BCF8  FC                 	db	252
   815  00BCF9  18                 	db	24
   816  00BCFA  24                 	db	36
   817  00BCFB  24                 	db	36
   818  00BCFC  18                 	db	24
   819  00BCFD  18                 	db	24
   820  00BCFE  24                 	db	36
   821  00BCFF  24                 	db	36
   822  00BD00  18                 	db	24
   823  00BD01  FC                 	db	252
   824  00BD02  7C                 	db	124
   825  00BD03  04                 	db	4
   826  00BD04  04                 	db	4
   827  00BD05  08                 	db	8
   828  00BD06  00                 	db	0
   829  00BD07  48                 	db	72
   830  00BD08  54                 	db	84
   831  00BD09  54                 	db	84
   832  00BD0A  54                 	db	84
   833  00BD0B  24                 	db	36
   834  00BD0C  00                 	db	0
   835  00BD0D  04                 	db	4
   836  00BD0E  3F                 	db	63
   837  00BD0F  44                 	db	68
   838  00BD10  20                 	db	32
   839  00BD11  3C                 	db	60
   840  00BD12  40                 	db	64
   841  00BD13  40                 	db	64
   842  00BD14  20                 	db	32
   843  00BD15  7C                 	db	124
   844  00BD16  1C                 	db	28
   845  00BD17  20                 	db	32
   846  00BD18  40                 	db	64
   847  00BD19  20                 	db	32
   848  00BD1A  1C                 	db	28
   849  00BD1B  3C                 	db	60
   850  00BD1C  40                 	db	64
   851  00BD1D  30                 	db	48
   852  00BD1E  40                 	db	64
   853  00BD1F  3C                 	db	60
   854  00BD20  44                 	db	68
   855  00BD21  28                 	db	40
   856  00BD22  10                 	db	16
   857  00BD23  28                 	db	40
   858  00BD24  44                 	db	68
   859  00BD25  4C                 	db	76
   860  00BD26  90                 	db	144
   861  00BD27  90                 	db	144
   862  00BD28  90                 	db	144
   863  00BD29  7C                 	db	124
   864  00BD2A  44                 	db	68
   865  00BD2B  64                 	db	100
   866  00BD2C  54                 	db	84
   867  00BD2D  4C                 	db	76
   868  00BD2E  44                 	db	68
   869  00BD2F  00                 	db	0
   870  00BD30  08                 	db	8
   871  00BD31  36                 	db	54
   872  00BD32  41                 	db	65
   873  00BD33  00                 	db	0
   874  00BD34  00                 	db	0
   875  00BD35  00                 	db	0
   876  00BD36  77                 	db	119
   877  00BD37  00                 	db	0
   878  00BD38  00                 	db	0
   879  00BD39  00                 	db	0
   880  00BD3A  41                 	db	65
   881  00BD3B  36                 	db	54
   882  00BD3C  08                 	db	8
   883  00BD3D  00                 	db	0
   884  00BD3E  02                 	db	2
   885  00BD3F  01                 	db	1
   886  00BD40  02                 	db	2
   887  00BD41  04                 	db	4
   888  00BD42  02                 	db	2
   889  00BD43  00                 	db	0
   890  00BD44  00                 	db	0
   891  00BD45  00                 	db	0
   892  00BD46  00                 	db	0
   893  00BD47  00                 	db	0
   894  00BD48  00                 	db	0
   895  00BD49  00                 	db	0
   896  00BD4A  00                 	db	0
   897  00BD4B  00                 	db	0
   898  00BD4C  00                 	db	0
   899  00BD4D  00                 	db	0
   900  00BD4E  00                 	db	0
   901  00BD4F  00                 	db	0
   902  00BD50  00                 	db	0
   903  00BD51  00                 	db	0
   904  00BD52  00                 	db	0
   905  00BD53  00                 	db	0
   906  00BD54  00                 	db	0
   907  00BD55  00                 	db	0
   908  00BD56  00                 	db	0
   909  00BD57  00                 	db	0
   910  00BD58  00                 	db	0
   911  00BD59  00                 	db	0
   912  00BD5A  00                 	db	0
   913  00BD5B  00                 	db	0
   914  00BD5C  00                 	db	0
   915  00BD5D  00                 	db	0
   916  00BD5E  00                 	db	0
   917  00BD5F  00                 	db	0
   918  00BD60  00                 	db	0
   919  00BD61  40                 	db	64
   920  00BD62  00                 	db	0
   921  00BD63  40                 	db	64
   922  00BD64  00                 	db	0
   923  00BD65  40                 	db	64
   924  00BD66  00                 	db	0
   925  00BD67  00                 	db	0
   926  00BD68  00                 	db	0
   927  00BD69  00                 	db	0
   928  00BD6A  00                 	db	0
   929  00BD6B  00                 	db	0
   930  00BD6C  00                 	db	0
   931  00BD6D  00                 	db	0
   932  00BD6E  00                 	db	0
   933  00BD6F  00                 	db	0
   934  00BD70  3E                 	db	62
   935  00BD71  55                 	db	85
   936  00BD72  55                 	db	85
   937  00BD73  41                 	db	65
   938  00BD74  22                 	db	34
   939  00BD75  00                 	db	0
   940  00BD76  00                 	db	0
   941  00BD77  00                 	db	0
   942  00BD78  00                 	db	0
   943  00BD79  00                 	db	0
   944  00BD7A  00                 	db	0
   945  00BD7B  00                 	db	0
   946  00BD7C  00                 	db	0
   947  00BD7D  00                 	db	0
   948  00BD7E  00                 	db	0
   949  00BD7F  00                 	db	0
   950  00BD80  00                 	db	0
   951  00BD81  00                 	db	0
   952  00BD82  00                 	db	0
   953  00BD83  00                 	db	0
   954  00BD84  00                 	db	0
   955  00BD85  00                 	db	0
   956  00BD86  00                 	db	0
   957  00BD87  00                 	db	0
   958  00BD88  00                 	db	0
   959  00BD89  00                 	db	0
   960  00BD8A  00                 	db	0
   961  00BD8B  00                 	db	0
   962  00BD8C  00                 	db	0
   963  00BD8D  00                 	db	0
   964  00BD8E  00                 	db	0
   965  00BD8F  00                 	db	0
   966  00BD90  00                 	db	0
   967  00BD91  00                 	db	0
   968  00BD92  00                 	db	0
   969  00BD93  00                 	db	0
   970  00BD94  00                 	db	0
   971  00BD95  00                 	db	0
   972  00BD96  00                 	db	0
   973  00BD97  00                 	db	0
   974  00BD98  00                 	db	0
   975  00BD99  00                 	db	0
   976  00BD9A  00                 	db	0
   977  00BD9B  00                 	db	0
   978  00BD9C  00                 	db	0
   979  00BD9D  00                 	db	0
   980  00BD9E  00                 	db	0
   981  00BD9F  00                 	db	0
   982  00BDA0  00                 	db	0
   983  00BDA1  00                 	db	0
   984  00BDA2  00                 	db	0
   985  00BDA3  00                 	db	0
   986  00BDA4  00                 	db	0
   987  00BDA5  00                 	db	0
   988  00BDA6  00                 	db	0
   989  00BDA7  00                 	db	0
   990  00BDA8  00                 	db	0
   991  00BDA9  00                 	db	0
   992  00BDAA  00                 	db	0
   993  00BDAB  00                 	db	0
   994  00BDAC  00                 	db	0
   995  00BDAD  00                 	db	0
   996  00BDAE  00                 	db	0
   997  00BDAF  00                 	db	0
   998  00BDB0  00                 	db	0
   999  00BDB1  00                 	db	0
  1000  00BDB2  0C                 	db	12
  1001  00BDB3  1E                 	db	30
  1002  00BDB4  1E                 	db	30
  1003  00BDB5  0C                 	db	12
  1004  00BDB6  00                 	db	0
  1005  00BDB7  00                 	db	0
  1006  00BDB8  00                 	db	0
  1007  00BDB9  00                 	db	0
  1008  00BDBA  00                 	db	0
  1009  00BDBB  00                 	db	0
  1010  00BDBC  00                 	db	0
  1011  00BDBD  00                 	db	0
  1012  00BDBE  00                 	db	0
  1013  00BDBF  00                 	db	0
  1014  00BDC0  00                 	db	0
  1015  00BDC1  00                 	db	0
  1016  00BDC2  00                 	db	0
  1017  00BDC3  00                 	db	0
  1018  00BDC4  00                 	db	0
  1019  00BDC5  00                 	db	0
  1020  00BDC6  00                 	db	0
  1021  00BDC7  00                 	db	0
  1022  00BDC8  00                 	db	0
  1023  00BDC9  00                 	db	0
  1024  00BDCA  00                 	db	0
  1025  00BDCB  00                 	db	0
  1026  00BDCC  00                 	db	0
  1027  00BDCD  00                 	db	0
  1028  00BDCE  00                 	db	0
  1029  00BDCF  00                 	db	0
  1030  00BDD0  00                 	db	0
  1031  00BDD1  00                 	db	0
  1032  00BDD2  00                 	db	0
  1033  00BDD3  00                 	db	0
  1034  00BDD4  00                 	db	0
  1035  00BDD5  00                 	db	0
  1036  00BDD6  00                 	db	0
  1037  00BDD7  00                 	db	0
  1038  00BDD8  00                 	db	0
  1039  00BDD9  00                 	db	0
  1040  00BDDA  00                 	db	0
  1041  00BDDB  00                 	db	0
  1042  00BDDC  00                 	db	0
  1043  00BDDD  00                 	db	0
  1044  00BDDE  00                 	db	0
  1045  00BDDF  00                 	db	0
  1046  00BDE0  00                 	db	0
  1047  00BDE1  00                 	db	0
  1048  00BDE2  00                 	db	0
  1049  00BDE3  00                 	db	0
  1050  00BDE4  00                 	db	0
  1051  00BDE5  00                 	db	0
  1052  00BDE6  00                 	db	0
  1053  00BDE7  00                 	db	0
  1054  00BDE8  00                 	db	0
  1055  00BDE9  00                 	db	0
  1056  00BDEA  00                 	db	0
  1057  00BDEB  00                 	db	0
  1058  00BDEC  00                 	db	0
  1059  00BDED  00                 	db	0
  1060  00BDEE  00                 	db	0
  1061  00BDEF  00                 	db	0
  1062  00BDF0  00                 	db	0
  1063  00BDF1  00                 	db	0
  1064  00BDF2  00                 	db	0
  1065  00BDF3  00                 	db	0
  1066  00BDF4  00                 	db	0
  1067  00BDF5  00                 	db	0
  1068  00BDF6  00                 	db	0
  1069  00BDF7  00                 	db	0
  1070  00BDF8  00                 	db	0
  1071  00BDF9  00                 	db	0
  1072  00BDFA  00                 	db	0
  1073  00BDFB  00                 	db	0
  1074  00BDFC  00                 	db	0
  1075  00BDFD  00                 	db	0
  1076  00BDFE  00                 	db	0
  1077  00BDFF  00                 	db	0
  1078  00BE00  00                 	db	0
  1079  00BE01  7E                 	db	126
  1080  00BE02  02                 	db	2
  1081  00BE03  02                 	db	2
  1082  00BE04  02                 	db	2
  1083  00BE05  03                 	db	3
  1084  00BE06  00                 	db	0
  1085  00BE07  00                 	db	0
  1086  00BE08  00                 	db	0
  1087  00BE09  00                 	db	0
  1088  00BE0A  00                 	db	0
  1089  00BE0B  00                 	db	0
  1090  00BE0C  00                 	db	0
  1091  00BE0D  00                 	db	0
  1092  00BE0E  00                 	db	0
  1093  00BE0F  00                 	db	0
  1094  00BE10  7E                 	db	126
  1095  00BE11  4B                 	db	75
  1096  00BE12  4A                 	db	74
  1097  00BE13  4B                 	db	75
  1098  00BE14  42                 	db	66
  1099  00BE15  00                 	db	0
  1100  00BE16  00                 	db	0
  1101  00BE17  00                 	db	0
  1102  00BE18  00                 	db	0
  1103  00BE19  00                 	db	0
  1104  00BE1A  3E                 	db	62
  1105  00BE1B  49                 	db	73
  1106  00BE1C  49                 	db	73
  1107  00BE1D  49                 	db	73
  1108  00BE1E  22                 	db	34
  1109  00BE1F  00                 	db	0
  1110  00BE20  00                 	db	0
  1111  00BE21  00                 	db	0
  1112  00BE22  00                 	db	0
  1113  00BE23  00                 	db	0
  1114  00BE24  00                 	db	0
  1115  00BE25  00                 	db	0
  1116  00BE26  00                 	db	0
  1117  00BE27  00                 	db	0
  1118  00BE28  00                 	db	0
  1119  00BE29  00                 	db	0
  1120  00BE2A  00                 	db	0
  1121  00BE2B  00                 	db	0
  1122  00BE2C  00                 	db	0
  1123  00BE2D  00                 	db	0
  1124  00BE2E  00                 	db	0
  1125  00BE2F  00                 	db	0
  1126  00BE30  00                 	db	0
  1127  00BE31  00                 	db	0
  1128  00BE32  00                 	db	0
  1129  00BE33  00                 	db	0
  1130  00BE34  41                 	db	65
  1131  00BE35  7E                 	db	126
  1132  00BE36  41                 	db	65
  1133  00BE37  00                 	db	0
  1134  00BE38  00                 	db	0
  1135  00BE39  06                 	db	6
  1136  00BE3A  09                 	db	9
  1137  00BE3B  09                 	db	9
  1138  00BE3C  06                 	db	6
  1139  00BE3D  44                 	db	68
  1140  00BE3E  44                 	db	68
  1141  00BE3F  5F                 	db	95
  1142  00BE40  44                 	db	68
  1143  00BE41  44                 	db	68
  1144  00BE42  00                 	db	0
  1145  00BE43  41                 	db	65
  1146  00BE44  7F                 	db	127
  1147  00BE45  41                 	db	65
  1148  00BE46  00                 	db	0
  1149  00BE47  00                 	db	0
  1150  00BE48  44                 	db	68
  1151  00BE49  7D                 	db	125
  1152  00BE4A  40                 	db	64
  1153  00BE4B  00                 	db	0
  1154  00BE4C  00                 	db	0
  1155  00BE4D  7C                 	db	124
  1156  00BE4E  04                 	db	4
  1157  00BE4F  04                 	db	4
  1158  00BE50  06                 	db	6
  1159  00BE51  00                 	db	0
  1160  00BE52  00                 	db	0
  1161  00BE53  00                 	db	0
  1162  00BE54  00                 	db	0
  1163  00BE55  00                 	db	0
  1164  00BE56  00                 	db	0
  1165  00BE57  00                 	db	0
  1166  00BE58  00                 	db	0
  1167  00BE59  00                 	db	0
  1168  00BE5A  00                 	db	0
  1169  00BE5B  00                 	db	0
  1170  00BE5C  00                 	db	0
  1171  00BE5D  00                 	db	0
  1172  00BE5E  00                 	db	0
  1173  00BE5F  00                 	db	0
  1174  00BE60  38                 	db	56
  1175  00BE61  55                 	db	85
  1176  00BE62  54                 	db	84
  1177  00BE63  55                 	db	85
  1178  00BE64  18                 	db	24
  1179  00BE65  00                 	db	0
  1180  00BE66  00                 	db	0
  1181  00BE67  00                 	db	0
  1182  00BE68  00                 	db	0
  1183  00BE69  00                 	db	0
  1184  00BE6A  38                 	db	56
  1185  00BE6B  54                 	db	84
  1186  00BE6C  54                 	db	84
  1187  00BE6D  54                 	db	84
  1188  00BE6E  44                 	db	68
  1189  00BE6F  22                 	db	34
  1190  00BE70  14                 	db	20
  1191  00BE71  2A                 	db	42
  1192  00BE72  14                 	db	20
  1193  00BE73  08                 	db	8
  1194  00BE74  20                 	db	32
  1195  00BE75  40                 	db	64
  1196  00BE76  40                 	db	64
  1197  00BE77  3D                 	db	61
  1198  00BE78  00                 	db	0
  1199  00BE79  00                 	db	0
  1200  00BE7A  00                 	db	0
  1201  00BE7B  00                 	db	0
  1202  00BE7C  00                 	db	0
  1203  00BE7D  00                 	db	0
  1204  00BE7E  00                 	db	0
  1205  00BE7F  00                 	db	0
  1206  00BE80  00                 	db	0
  1207  00BE81  00                 	db	0
  1208  00BE82  00                 	db	0
  1209  00BE83  00                 	db	0
  1210  00BE84  45                 	db	69
  1211  00BE85  7C                 	db	124
  1212  00BE86  41                 	db	65
  1213  00BE87  00                 	db	0
  1214  00BE88  7E                 	db	126
  1215  00BE89  11                 	db	17
  1216  00BE8A  11                 	db	17
  1217  00BE8B  11                 	db	17
  1218  00BE8C  7E                 	db	126
  1219  00BE8D  7F                 	db	127
  1220  00BE8E  49                 	db	73
  1221  00BE8F  49                 	db	73
  1222  00BE90  49                 	db	73
  1223  00BE91  31                 	db	49
  1224  00BE92  7F                 	db	127
  1225  00BE93  49                 	db	73
  1226  00BE94  49                 	db	73
  1227  00BE95  49                 	db	73
  1228  00BE96  36                 	db	54
  1229  00BE97  7F                 	db	127
  1230  00BE98  01                 	db	1
  1231  00BE99  01                 	db	1
  1232  00BE9A  01                 	db	1
  1233  00BE9B  01                 	db	1
  1234  00BE9C  C0                 	db	192
  1235  00BE9D  7E                 	db	126
  1236  00BE9E  41                 	db	65
  1237  00BE9F  7E                 	db	126
  1238  00BEA0  C0                 	db	192
  1239  00BEA1  7F                 	db	127
  1240  00BEA2  49                 	db	73
  1241  00BEA3  49                 	db	73
  1242  00BEA4  49                 	db	73
  1243  00BEA5  41                 	db	65
  1244  00BEA6  77                 	db	119
  1245  00BEA7  08                 	db	8
  1246  00BEA8  7F                 	db	127
  1247  00BEA9  08                 	db	8
  1248  00BEAA  77                 	db	119
  1249  00BEAB  22                 	db	34
  1250  00BEAC  41                 	db	65
  1251  00BEAD  49                 	db	73
  1252  00BEAE  49                 	db	73
  1253  00BEAF  36                 	db	54
  1254  00BEB0  7F                 	db	127
  1255  00BEB1  10                 	db	16
  1256  00BEB2  08                 	db	8
  1257  00BEB3  04                 	db	4
  1258  00BEB4  7F                 	db	127
  1259  00BEB5  7E                 	db	126
  1260  00BEB6  11                 	db	17
  1261  00BEB7  09                 	db	9
  1262  00BEB8  05                 	db	5
  1263  00BEB9  7E                 	db	126
  1264  00BEBA  7F                 	db	127
  1265  00BEBB  08                 	db	8
  1266  00BEBC  14                 	db	20
  1267  00BEBD  22                 	db	34
  1268  00BEBE  41                 	db	65
  1269  00BEBF  40                 	db	64
  1270  00BEC0  7E                 	db	126
  1271  00BEC1  01                 	db	1
  1272  00BEC2  01                 	db	1
  1273  00BEC3  7F                 	db	127
  1274  00BEC4  7F                 	db	127
  1275  00BEC5  02                 	db	2
  1276  00BEC6  0C                 	db	12
  1277  00BEC7  02                 	db	2
  1278  00BEC8  7F                 	db	127
  1279  00BEC9  7F                 	db	127
  1280  00BECA  08                 	db	8
  1281  00BECB  08                 	db	8
  1282  00BECC  08                 	db	8
  1283  00BECD  7F                 	db	127
  1284  00BECE  3E                 	db	62
  1285  00BECF  41                 	db	65
  1286  00BED0  41                 	db	65
  1287  00BED1  41                 	db	65
  1288  00BED2  3E                 	db	62
  1289  00BED3  7F                 	db	127
  1290  00BED4  01                 	db	1
  1291  00BED5  01                 	db	1
  1292  00BED6  01                 	db	1
  1293  00BED7  7F                 	db	127
  1294  00BED8  7F                 	db	127
  1295  00BED9  09                 	db	9
  1296  00BEDA  09                 	db	9
  1297  00BEDB  09                 	db	9
  1298  00BEDC  06                 	db	6
  1299  00BEDD  3E                 	db	62
  1300  00BEDE  41                 	db	65
  1301  00BEDF  41                 	db	65
  1302  00BEE0  41                 	db	65
  1303  00BEE1  22                 	db	34
  1304  00BEE2  01                 	db	1
  1305  00BEE3  01                 	db	1
  1306  00BEE4  7F                 	db	127
  1307  00BEE5  01                 	db	1
  1308  00BEE6  01                 	db	1
  1309  00BEE7  27                 	db	39
  1310  00BEE8  48                 	db	72
  1311  00BEE9  48                 	db	72
  1312  00BEEA  48                 	db	72
  1313  00BEEB  3F                 	db	63
  1314  00BEEC  0E                 	db	14
  1315  00BEED  11                 	db	17
  1316  00BEEE  7F                 	db	127
  1317  00BEEF  11                 	db	17
  1318  00BEF0  0E                 	db	14
  1319  00BEF1  63                 	db	99
  1320  00BEF2  14                 	db	20
  1321  00BEF3  08                 	db	8
  1322  00BEF4  14                 	db	20
  1323  00BEF5  63                 	db	99
  1324  00BEF6  7F                 	db	127
  1325  00BEF7  40                 	db	64
  1326  00BEF8  40                 	db	64
  1327  00BEF9  7F                 	db	127
  1328  00BEFA  C0                 	db	192
  1329  00BEFB  07                 	db	7
  1330  00BEFC  08                 	db	8
  1331  00BEFD  08                 	db	8
  1332  00BEFE  08                 	db	8
  1333  00BEFF  7F                 	db	127
  1334  00BF00  7F                 	db	127
  1335  00BF01  40                 	db	64
  1336  00BF02  7E                 	db	126
  1337  00BF03  40                 	db	64
  1338  00BF04  7F                 	db	127
  1339  00BF05  7F                 	db	127
  1340  00BF06  40                 	db	64
  1341  00BF07  7E                 	db	126
  1342  00BF08  40                 	db	64
  1343  00BF09  FF                 	db	255
  1344  00BF0A  01                 	db	1
  1345  00BF0B  7F                 	db	127
  1346  00BF0C  44                 	db	68
  1347  00BF0D  44                 	db	68
  1348  00BF0E  38                 	db	56
  1349  00BF0F  7F                 	db	127
  1350  00BF10  44                 	db	68
  1351  00BF11  38                 	db	56
  1352  00BF12  00                 	db	0
  1353  00BF13  7F                 	db	127
  1354  00BF14  7F                 	db	127
  1355  00BF15  44                 	db	68
  1356  00BF16  44                 	db	68
  1357  00BF17  44                 	db	68
  1358  00BF18  38                 	db	56
  1359  00BF19  22                 	db	34
  1360  00BF1A  41                 	db	65
  1361  00BF1B  49                 	db	73
  1362  00BF1C  49                 	db	73
  1363  00BF1D  3E                 	db	62
  1364  00BF1E  7F                 	db	127
  1365  00BF1F  08                 	db	8
  1366  00BF20  3E                 	db	62
  1367  00BF21  41                 	db	65
  1368  00BF22  3E                 	db	62
  1369  00BF23  46                 	db	70
  1370  00BF24  29                 	db	41
  1371  00BF25  19                 	db	25
  1372  00BF26  09                 	db	9
  1373  00BF27  7F                 	db	127
  1374  00BF28  20                 	db	32
  1375  00BF29  54                 	db	84
  1376  00BF2A  54                 	db	84
  1377  00BF2B  54                 	db	84
  1378  00BF2C  78                 	db	120
  1379  00BF2D  3C                 	db	60
  1380  00BF2E  4A                 	db	74
  1381  00BF2F  4A                 	db	74
  1382  00BF30  4A                 	db	74
  1383  00BF31  31                 	db	49
  1384  00BF32  7C                 	db	124
  1385  00BF33  54                 	db	84
  1386  00BF34  54                 	db	84
  1387  00BF35  54                 	db	84
  1388  00BF36  28                 	db	40
  1389  00BF37  00                 	db	0
  1390  00BF38  7C                 	db	124
  1391  00BF39  04                 	db	4
  1392  00BF3A  04                 	db	4
  1393  00BF3B  04                 	db	4
  1394  00BF3C  C0                 	db	192
  1395  00BF3D  78                 	db	120
  1396  00BF3E  44                 	db	68
  1397  00BF3F  7C                 	db	124
  1398  00BF40  C0                 	db	192
  1399  00BF41  38                 	db	56
  1400  00BF42  54                 	db	84
  1401  00BF43  54                 	db	84
  1402  00BF44  54                 	db	84
  1403  00BF45  18                 	db	24
  1404  00BF46  6C                 	db	108
  1405  00BF47  10                 	db	16
  1406  00BF48  7C                 	db	124
  1407  00BF49  10                 	db	16
  1408  00BF4A  6C                 	db	108
  1409  00BF4B  28                 	db	40
  1410  00BF4C  44                 	db	68
  1411  00BF4D  54                 	db	84
  1412  00BF4E  54                 	db	84
  1413  00BF4F  28                 	db	40
  1414  00BF50  7C                 	db	124
  1415  00BF51  20                 	db	32
  1416  00BF52  10                 	db	16
  1417  00BF53  08                 	db	8
  1418  00BF54  7C                 	db	124
  1419  00BF55  7C                 	db	124
  1420  00BF56  21                 	db	33
  1421  00BF57  11                 	db	17
  1422  00BF58  09                 	db	9
  1423  00BF59  7C                 	db	124
  1424  00BF5A  7C                 	db	124
  1425  00BF5B  10                 	db	16
  1426  00BF5C  10                 	db	16
  1427  00BF5D  28                 	db	40
  1428  00BF5E  44                 	db	68
  1429  00BF5F  40                 	db	64
  1430  00BF60  38                 	db	56
  1431  00BF61  04                 	db	4
  1432  00BF62  04                 	db	4
  1433  00BF63  7C                 	db	124
  1434  00BF64  7C                 	db	124
  1435  00BF65  08                 	db	8
  1436  00BF66  10                 	db	16
  1437  00BF67  08                 	db	8
  1438  00BF68  7C                 	db	124
  1439  00BF69  7C                 	db	124
  1440  00BF6A  10                 	db	16
  1441  00BF6B  10                 	db	16
  1442  00BF6C  10                 	db	16
  1443  00BF6D  7C                 	db	124
  1444  00BF6E  38                 	db	56
  1445  00BF6F  44                 	db	68
  1446  00BF70  44                 	db	68
  1447  00BF71  44                 	db	68
  1448  00BF72  38                 	db	56
  1449  00BF73  7C                 	db	124
  1450  00BF74  04                 	db	4
  1451  00BF75  04                 	db	4
  1452  00BF76  04                 	db	4
  1453  00BF77  7C                 	db	124
  1454  00BF78  7C                 	db	124
  1455  00BF79  14                 	db	20
  1456  00BF7A  14                 	db	20
  1457  00BF7B  14                 	db	20
  1458  00BF7C  08                 	db	8
  1459  00BF7D  38                 	db	56
  1460  00BF7E  44                 	db	68
  1461  00BF7F  44                 	db	68
  1462  00BF80  44                 	db	68
  1463  00BF81  28                 	db	40
  1464  00BF82  04                 	db	4
  1465  00BF83  04                 	db	4
  1466  00BF84  7C                 	db	124
  1467  00BF85  04                 	db	4
  1468  00BF86  04                 	db	4
  1469  00BF87  4C                 	db	76
  1470  00BF88  50                 	db	80
  1471  00BF89  50                 	db	80
  1472  00BF8A  50                 	db	80
  1473  00BF8B  3C                 	db	60
  1474  00BF8C  18                 	db	24
  1475  00BF8D  24                 	db	36
  1476  00BF8E  7C                 	db	124
  1477  00BF8F  24                 	db	36
  1478  00BF90  18                 	db	24
  1479  00BF91  00                 	db	0
  1480  00BF92  6C                 	db	108
  1481  00BF93  10                 	db	16
  1482  00BF94  10                 	db	16
  1483  00BF95  6C                 	db	108
  1484  00BF96  7C                 	db	124
  1485  00BF97  40                 	db	64
  1486  00BF98  40                 	db	64
  1487  00BF99  7C                 	db	124
  1488  00BF9A  C0                 	db	192
  1489  00BF9B  0C                 	db	12
  1490  00BF9C  10                 	db	16
  1491  00BF9D  10                 	db	16
  1492  00BF9E  10                 	db	16
  1493  00BF9F  7C                 	db	124
  1494  00BFA0  7C                 	db	124
  1495  00BFA1  40                 	db	64
  1496  00BFA2  78                 	db	120
  1497  00BFA3  40                 	db	64
  1498  00BFA4  7C                 	db	124
  1499  00BFA5  7C                 	db	124
  1500  00BFA6  40                 	db	64
  1501  00BFA7  78                 	db	120
  1502  00BFA8  40                 	db	64
  1503  00BFA9  FC                 	db	252
  1504  00BFAA  04                 	db	4
  1505  00BFAB  7C                 	db	124
  1506  00BFAC  50                 	db	80
  1507  00BFAD  50                 	db	80
  1508  00BFAE  20                 	db	32
  1509  00BFAF  7C                 	db	124
  1510  00BFB0  50                 	db	80
  1511  00BFB1  20                 	db	32
  1512  00BFB2  00                 	db	0
  1513  00BFB3  7C                 	db	124
  1514  00BFB4  00                 	db	0
  1515  00BFB5  7C                 	db	124
  1516  00BFB6  50                 	db	80
  1517  00BFB7  50                 	db	80
  1518  00BFB8  20                 	db	32
  1519  00BFB9  44                 	db	68
  1520  00BFBA  54                 	db	84
  1521  00BFBB  54                 	db	84
  1522  00BFBC  54                 	db	84
  1523  00BFBD  38                 	db	56
  1524  00BFBE  7C                 	db	124
  1525  00BFBF  10                 	db	16
  1526  00BFC0  38                 	db	56
  1527  00BFC1  44                 	db	68
  1528  00BFC2  38                 	db	56
  1529  00BFC3  48                 	db	72
  1530  00BFC4  54                 	db	84
  1531  00BFC5  34                 	db	52
  1532  00BFC6  14                 	db	20
  1533  00BFC7  7C                 	db	124
  1534  00BFC8                     __end_of_Font:
  1535                           	opt stack 0
  1536  00BFC8                     _FontS:
  1537                           	opt stack 0
  1538  00BFC8  00                 	db	0
  1539  00BFC9  00                 	db	0
  1540  00BFCA  00                 	db	0
  1541  00BFCB  7C                 	db	124
  1542  00BFCC  44                 	db	68
  1543  00BFCD  7C                 	db	124
  1544  00BFCE  00                 	db	0
  1545  00BFCF  7C                 	db	124
  1546  00BFD0  00                 	db	0
  1547  00BFD1  74                 	db	116
  1548  00BFD2  54                 	db	84
  1549  00BFD3  5C                 	db	92
  1550  00BFD4  54                 	db	84
  1551  00BFD5  54                 	db	84
  1552  00BFD6  7C                 	db	124
  1553  00BFD7  1C                 	db	28
  1554  00BFD8  10                 	db	16
  1555  00BFD9  7C                 	db	124
  1556  00BFDA  5C                 	db	92
  1557  00BFDB  54                 	db	84
  1558  00BFDC  74                 	db	116
  1559  00BFDD  7C                 	db	124
  1560  00BFDE  54                 	db	84
  1561  00BFDF  74                 	db	116
  1562  00BFE0  04                 	db	4
  1563  00BFE1  04                 	db	4
  1564  00BFE2  7C                 	db	124
  1565  00BFE3  7C                 	db	124
  1566  00BFE4  54                 	db	84
  1567  00BFE5  7C                 	db	124
  1568  00BFE6  5C                 	db	92
  1569  00BFE7  54                 	db	84
  1570  00BFE8  7C                 	db	124
  1571  00BFE9                     __end_of_FontS:
  1572                           	opt stack 0
  1573  0000                     _TMR0	set	4054
  1574  0000                     _SPBRG	set	4015
  1575  0000                     _SPBRGH	set	4016
  1576  0000                     _BAUDCONbits	set	4024
  1577  0000                     _RCSTAbits	set	4011
  1578  0000                     _TXSTAbits	set	4012
  1579  0000                     _TRISCbits	set	3988
  1580  0000                     _PORTB	set	3969
  1581  0000                     _T1CONbits	set	4045
  1582  0000                     _LATDbits	set	3980
  1583  0000                     _TMR1L	set	4046
  1584  0000                     _TMR1H	set	4047
  1585  0000                     _PIR1bits	set	3998
  1586  0000                     _PIE1bits	set	3997
  1587  0000                     _T0CON	set	4053
  1588  0000                     _SSPBUF	set	4041
  1589  0000                     _SSPCON2	set	4037
  1590  0000                     _SSPADD	set	4040
  1591  0000                     _SSPSTAT	set	4039
  1592  0000                     _SSPCON1	set	4038
  1593  0000                     _PORTCbits	set	3970
  1594  0000                     _INTCON2bits	set	4081
  1595  0000                     _TRISD	set	3989
  1596  0000                     _LATD	set	3980
  1597  0000                     _INTCON2	set	4081
  1598  0000                     _TRISB	set	3987
  1599  0000                     _LATB	set	3978
  1600  0000                     _TRISC	set	3988
  1601  0000                     _LATC	set	3979
  1602  0000                     _INTCONbits	set	4082
  1603  0000                     _ACKEN	set	32300
  1604  0000                     _ACKDT	set	32301
  1605  0000                     _RCEN	set	32299
  1606  0000                     _SSPIF	set	31987
  1607  0000                     _RSEN	set	32297
  1608  0000                     _ACKSTAT	set	32302
  1609  0000                     _SEN	set	32296
  1610  0000                     _R_W	set	32314
  1611  0000                     _PEN	set	32298
  1612  00BFE9  43                 	db	67	;'C'
  1613  00BFEA  6C                 	db	108	;'l'
  1614  00BFEB  6F                 	db	111	;'o'
  1615  00BFEC  63                 	db	99	;'c'
  1616  00BFED  6B                 	db	107	;'k'
  1617  00BFEE  20                 	db	32
  1618  00BFEF  76                 	db	118	;'v'
  1619  00BFF0  31                 	db	49	;'1'
  1620  00BFF1  2E                 	db	46
  1621  00BFF2  30                 	db	48	;'0'
  1622  00BFF3  20                 	db	32
  1623  00BFF4  62                 	db	98	;'b'
  1624  00BFF5  79                 	db	121	;'y'
  1625  00BFF6  20                 	db	32
  1626  00BFF7  49                 	db	73	;'I'
  1627  00BFF8  76                 	db	118	;'v'
  1628  00BFF9  61                 	db	97	;'a'
  1629  00BFFA  6E                 	db	110	;'n'
  1630  00BFFB  5F                 	db	95	;'_'
  1631  00BFFC  66                 	db	102	;'f'
  1632  00BFFD  64                 	db	100	;'d'
  1633  00BFFE  00                 	db	0
  1634                           
  1635                           ; #config settings
  1636  00BFFF  00                 	db	0	; dummy byte at the end
  1637  0000                     tosu	equ	0xFFF
  1638                           tosh	equ	0xFFE
  1639                           tosl	equ	0xFFD
  1640                           pclath	equ	0xFFA
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           prodh	equ	0xFF4
  1646                           prodl	equ	0xFF3
  1647                           intcon	equ	0xFF2
  1648                           intcon2	equ	0xFF1
  1649                           wreg	equ	0xFE8
  1650                           indf1	equ	0xFE7
  1651                           plusw1	equ	0xFE3
  1652                           fsr1h	equ	0xFE2
  1653                           fsr1l	equ	0xFE1
  1654                           indf2	equ	0xFDF
  1655                           postinc2	equ	0xFDE
  1656                           postdec2	equ	0xFDD
  1657                           plusw2	equ	0xFDB
  1658                           fsr2h	equ	0xFDA
  1659                           fsr2l	equ	0xFD9
  1660                           status	equ	0xFD8
  1661                           
  1662                           	psect	cinit
  1663  001DB8                     __pcinit:
  1664                           	opt stack 0
  1665  001DB8                     start_initialization:
  1666                           	opt stack 0
  1667  001DB8                     __initialization:
  1668                           	opt stack 0
  1669                           
  1670                           ; Initialize objects allocated to COMRAM (1 bytes)
  1671                           ; load TBLPTR registers with __pidataCOMRAM
  1672  001DB8  0EE0               	movlw	low __pidataCOMRAM
  1673  001DBA  6EF6               	movwf	tblptrl,c
  1674  001DBC  0E23               	movlw	high __pidataCOMRAM
  1675  001DBE  6EF7               	movwf	tblptrh,c
  1676  001DC0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1677  001DC2  6EF8               	movwf	tblptru,c
  1678  001DC4  0009               	tblrd		*+	;fetch initializer
  1679  001DC6  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1680                           
  1681                           ; Clear objects allocated to BANK1 (220 bytes)
  1682  001DCA  EE01  F000         	lfsr	0,__pbssBANK1
  1683  001DCE  0EDC               	movlw	220
  1684  001DD0                     clear_0:
  1685  001DD0  6AEE               	clrf	postinc0,c
  1686  001DD2  06E8               	decf	wreg,f,c
  1687  001DD4  E1FD               	bnz	clear_0
  1688                           
  1689                           ; Clear objects allocated to BANK0 (82 bytes)
  1690  001DD6  EE00  F080         	lfsr	0,__pbssBANK0
  1691  001DDA  0E52               	movlw	82
  1692  001DDC                     clear_1:
  1693  001DDC  6AEE               	clrf	postinc0,c
  1694  001DDE  06E8               	decf	wreg,f,c
  1695  001DE0  E1FD               	bnz	clear_1
  1696                           
  1697                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1698  001DE2  6A6D               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1699                           
  1700                           ; Clear objects allocated to COMRAM (32 bytes)
  1701  001DE4  EE00  F04D         	lfsr	0,__pbssCOMRAM
  1702  001DE8  0E20               	movlw	32
  1703  001DEA                     clear_2:
  1704  001DEA  6AEE               	clrf	postinc0,c
  1705  001DEC  06E8               	decf	wreg,f,c
  1706  001DEE  E1FD               	bnz	clear_2
  1707  001DF0                     end_of_initialization:
  1708                           	opt stack 0
  1709  001DF0                     __end_of__initialization:
  1710                           	opt stack 0
  1711  001DF0  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1712  001DF2  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1713  001DF4  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1714  001DF6  6EF8               	movwf	tblptru,c
  1715  001DF8  0100               	movlb	0
  1716  001DFA  EF6A  F00E         	goto	_main	;jump to C main() function
  1717                           tosu	equ	0xFFF
  1718                           tosh	equ	0xFFE
  1719                           tosl	equ	0xFFD
  1720                           pclath	equ	0xFFA
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           prodh	equ	0xFF4
  1726                           prodl	equ	0xFF3
  1727                           intcon	equ	0xFF2
  1728                           intcon2	equ	0xFF1
  1729                           postinc0	equ	0xFEE
  1730                           wreg	equ	0xFE8
  1731                           indf1	equ	0xFE7
  1732                           plusw1	equ	0xFE3
  1733                           fsr1h	equ	0xFE2
  1734                           fsr1l	equ	0xFE1
  1735                           indf2	equ	0xFDF
  1736                           postinc2	equ	0xFDE
  1737                           postdec2	equ	0xFDD
  1738                           plusw2	equ	0xFDB
  1739                           fsr2h	equ	0xFDA
  1740                           fsr2l	equ	0xFD9
  1741                           status	equ	0xFD8
  1742                           
  1743                           	psect	bitbssCOMRAM
  1744  000368                     __pbitbssCOMRAM:
  1745                           	opt stack 0
  1746  000368                     _en_put:
  1747                           	opt stack 0
  1748  000368                     	ds	1
  1749  000369                     _show_digit:
  1750                           	opt stack 0
  1751  000369                     	ds	1
  1752                           tosu	equ	0xFFF
  1753                           tosh	equ	0xFFE
  1754                           tosl	equ	0xFFD
  1755                           pclath	equ	0xFFA
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           prodh	equ	0xFF4
  1761                           prodl	equ	0xFF3
  1762                           intcon	equ	0xFF2
  1763                           intcon2	equ	0xFF1
  1764                           postinc0	equ	0xFEE
  1765                           wreg	equ	0xFE8
  1766                           indf1	equ	0xFE7
  1767                           plusw1	equ	0xFE3
  1768                           fsr1h	equ	0xFE2
  1769                           fsr1l	equ	0xFE1
  1770                           indf2	equ	0xFDF
  1771                           postinc2	equ	0xFDE
  1772                           postdec2	equ	0xFDD
  1773                           plusw2	equ	0xFDB
  1774                           fsr2h	equ	0xFDA
  1775                           fsr2l	equ	0xFD9
  1776                           status	equ	0xFD8
  1777                           
  1778                           	psect	bssCOMRAM
  1779  00004D                     __pbssCOMRAM:
  1780                           	opt stack 0
  1781  00004D                     _TSTime:
  1782                           	opt stack 0
  1783  00004D                     	ds	7
  1784  000054                     _B7:
  1785                           	opt stack 0
  1786  000054                     	ds	4
  1787  000058                     _B6:
  1788                           	opt stack 0
  1789  000058                     	ds	4
  1790  00005C                     _X2:
  1791                           	opt stack 0
  1792  00005C                     	ds	4
  1793  000060                     _X1:
  1794                           	opt stack 0
  1795  000060                     	ds	4
  1796  000064                     _ac1:
  1797                           	opt stack 0
  1798  000064                     	ds	2
  1799  000066                     key_press@count:
  1800                           	opt stack 0
  1801  000066                     	ds	1
  1802  000067                     _Timer0Interrupt:
  1803                           	opt stack 0
  1804  000067                     	ds	1
  1805  000068                     _arrayTail:
  1806                           	opt stack 0
  1807  000068                     	ds	1
  1808  000069                     _temperature:
  1809                           	opt stack 0
  1810  000069                     	ds	2
  1811  00006B                     _time_flag:
  1812                           	opt stack 0
  1813  00006B                     	ds	1
  1814  00006C                     _timer_val:
  1815                           	opt stack 0
  1816  00006C                     	ds	1
  1817                           tosu	equ	0xFFF
  1818                           tosh	equ	0xFFE
  1819                           tosl	equ	0xFFD
  1820                           pclath	equ	0xFFA
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           intcon	equ	0xFF2
  1828                           intcon2	equ	0xFF1
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           indf1	equ	0xFE7
  1832                           plusw1	equ	0xFE3
  1833                           fsr1h	equ	0xFE2
  1834                           fsr1l	equ	0xFE1
  1835                           indf2	equ	0xFDF
  1836                           postinc2	equ	0xFDE
  1837                           postdec2	equ	0xFDD
  1838                           plusw2	equ	0xFDB
  1839                           fsr2h	equ	0xFDA
  1840                           fsr2l	equ	0xFD9
  1841                           status	equ	0xFD8
  1842                           
  1843                           	psect	dataCOMRAM
  1844  00006E                     __pdataCOMRAM:
  1845                           	opt stack 0
  1846  00006E                     _events:
  1847                           	opt stack 0
  1848  00006E                     	ds	1
  1849                           tosu	equ	0xFFF
  1850                           tosh	equ	0xFFE
  1851                           tosl	equ	0xFFD
  1852                           pclath	equ	0xFFA
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           prodh	equ	0xFF4
  1858                           prodl	equ	0xFF3
  1859                           intcon	equ	0xFF2
  1860                           intcon2	equ	0xFF1
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           indf1	equ	0xFE7
  1864                           plusw1	equ	0xFE3
  1865                           fsr1h	equ	0xFE2
  1866                           fsr1l	equ	0xFE1
  1867                           indf2	equ	0xFDF
  1868                           postinc2	equ	0xFDE
  1869                           postdec2	equ	0xFDD
  1870                           plusw2	equ	0xFDB
  1871                           fsr2h	equ	0xFDA
  1872                           fsr2l	equ	0xFD9
  1873                           status	equ	0xFD8
  1874                           
  1875                           	psect	bssBANK0
  1876  000080                     __pbssBANK0:
  1877                           	opt stack 0
  1878  000080                     _scratch:
  1879                           	opt stack 0
  1880  000080                     	ds	9
  1881  000089                     _B5:
  1882                           	opt stack 0
  1883  000089                     	ds	4
  1884  00008D                     _B4:
  1885                           	opt stack 0
  1886  00008D                     	ds	4
  1887  000091                     _B3:
  1888                           	opt stack 0
  1889  000091                     	ds	4
  1890  000095                     _X3:
  1891                           	opt stack 0
  1892  000095                     	ds	4
  1893  000099                     _md:
  1894                           	opt stack 0
  1895  000099                     	ds	2
  1896  00009B                     _mc:
  1897                           	opt stack 0
  1898  00009B                     	ds	2
  1899  00009D                     _b2:
  1900                           	opt stack 0
  1901  00009D                     	ds	2
  1902  00009F                     _b1:
  1903                           	opt stack 0
  1904  00009F                     	ds	2
  1905  0000A1                     _ac6:
  1906                           	opt stack 0
  1907  0000A1                     	ds	2
  1908  0000A3                     _ac5:
  1909                           	opt stack 0
  1910  0000A3                     	ds	2
  1911  0000A5                     _ac4:
  1912                           	opt stack 0
  1913  0000A5                     	ds	2
  1914  0000A7                     _ac3:
  1915                           	opt stack 0
  1916  0000A7                     	ds	2
  1917  0000A9                     _ac2:
  1918                           	opt stack 0
  1919  0000A9                     	ds	2
  1920  0000AB                     _Dis_Buff:
  1921                           	opt stack 0
  1922  0000AB                     	ds	32
  1923  0000CB                     _TTime:
  1924                           	opt stack 0
  1925  0000CB                     	ds	7
  1926                           tosu	equ	0xFFF
  1927                           tosh	equ	0xFFE
  1928                           tosl	equ	0xFFD
  1929                           pclath	equ	0xFFA
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           prodh	equ	0xFF4
  1935                           prodl	equ	0xFF3
  1936                           intcon	equ	0xFF2
  1937                           intcon2	equ	0xFF1
  1938                           postinc0	equ	0xFEE
  1939                           wreg	equ	0xFE8
  1940                           indf1	equ	0xFE7
  1941                           plusw1	equ	0xFE3
  1942                           fsr1h	equ	0xFE2
  1943                           fsr1l	equ	0xFE1
  1944                           indf2	equ	0xFDF
  1945                           postinc2	equ	0xFDE
  1946                           postdec2	equ	0xFDD
  1947                           plusw2	equ	0xFDB
  1948                           fsr2h	equ	0xFDA
  1949                           fsr2l	equ	0xFD9
  1950                           status	equ	0xFD8
  1951                           
  1952                           	psect	bssBANK1
  1953  000100                     __pbssBANK1:
  1954                           	opt stack 0
  1955  000100                     _TaskArray:
  1956                           	opt stack 0
  1957  000100                     	ds	120
  1958  000178                     _text_buf:
  1959                           	opt stack 0
  1960  000178                     	ds	100
  1961                           tosu	equ	0xFFF
  1962                           tosh	equ	0xFFE
  1963                           tosl	equ	0xFFD
  1964                           pclath	equ	0xFFA
  1965                           tblptru	equ	0xFF8
  1966                           tblptrh	equ	0xFF7
  1967                           tblptrl	equ	0xFF6
  1968                           tablat	equ	0xFF5
  1969                           prodh	equ	0xFF4
  1970                           prodl	equ	0xFF3
  1971                           intcon	equ	0xFF2
  1972                           intcon2	equ	0xFF1
  1973                           postinc0	equ	0xFEE
  1974                           wreg	equ	0xFE8
  1975                           indf1	equ	0xFE7
  1976                           plusw1	equ	0xFE3
  1977                           fsr1h	equ	0xFE2
  1978                           fsr1l	equ	0xFE1
  1979                           indf2	equ	0xFDF
  1980                           postinc2	equ	0xFDE
  1981                           postdec2	equ	0xFDD
  1982                           plusw2	equ	0xFDB
  1983                           fsr2h	equ	0xFDA
  1984                           fsr2l	equ	0xFD9
  1985                           status	equ	0xFD8
  1986                           
  1987                           	psect	cstackBANK0
  1988  0000D2                     __pcstackBANK0:
  1989                           	opt stack 0
  1990  0000D2                     _BMP085GetPressure$2268:
  1991                           	opt stack 0
  1992                           
  1993                           ; 4 bytes @ 0x0
  1994  0000D2                     	ds	4
  1995  0000D6                     BMP085GetPressure@Pp:
  1996                           	opt stack 0
  1997                           
  1998                           ; 4 bytes @ 0x4
  1999  0000D6                     	ds	4
  2000  0000DA                     ??_RTOS_DispatchTask:
  2001                           
  2002                           ; 1 bytes @ 0x8
  2003  0000DA                     	ds	4
  2004  0000DE                     RTOS_DispatchTask@function:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0xC
  2008  0000DE                     	ds	2
  2009  0000E0                     RTOS_DispatchTask@j:
  2010                           	opt stack 0
  2011                           
  2012                           ; 1 bytes @ 0xE
  2013  0000E0                     	ds	1
  2014  0000E1                     RTOS_DispatchTask@i:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0xF
  2018  0000E1                     	ds	1
  2019                           tosu	equ	0xFFF
  2020                           tosh	equ	0xFFE
  2021                           tosl	equ	0xFFD
  2022                           pclath	equ	0xFFA
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           prodh	equ	0xFF4
  2028                           prodl	equ	0xFF3
  2029                           intcon	equ	0xFF2
  2030                           intcon2	equ	0xFF1
  2031                           postinc0	equ	0xFEE
  2032                           wreg	equ	0xFE8
  2033                           indf1	equ	0xFE7
  2034                           plusw1	equ	0xFE3
  2035                           fsr1h	equ	0xFE2
  2036                           fsr1l	equ	0xFE1
  2037                           indf2	equ	0xFDF
  2038                           postinc2	equ	0xFDE
  2039                           postdec2	equ	0xFDD
  2040                           plusw2	equ	0xFDB
  2041                           fsr2h	equ	0xFDA
  2042                           fsr2l	equ	0xFD9
  2043                           status	equ	0xFD8
  2044                           
  2045                           	psect	cstackCOMRAM
  2046  000001                     __pcstackCOMRAM:
  2047                           	opt stack 0
  2048  000001                     i2RTOS_SetTask@taskFunc:
  2049                           	opt stack 0
  2050                           
  2051                           ; 2 bytes @ 0x0
  2052  000001                     	ds	2
  2053  000003                     i2RTOS_SetTask@taskDelay:
  2054                           	opt stack 0
  2055                           
  2056                           ; 2 bytes @ 0x2
  2057  000003                     	ds	2
  2058  000005                     i2RTOS_SetTask@taskPeriod:
  2059                           	opt stack 0
  2060                           
  2061                           ; 2 bytes @ 0x4
  2062  000005                     	ds	2
  2063  000007                     
  2064                           ; 1 bytes @ 0x6
  2065  000007                     	ds	2
  2066  000009                     i2RTOS_SetTask@i:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x8
  2070  000009                     	ds	1
  2071  00000A                     ??_INTERRUPT_InterruptManager:
  2072                           
  2073                           ; 1 bytes @ 0x9
  2074  00000A                     	ds	5
  2075  00000F                     ??_ow_reset:
  2076  00000F                     ??_read_byte:
  2077  00000F                     ??_I2C_idle:
  2078  00000F                     ??_bcd_to_decimal:
  2079  00000F                     ?___lwdiv:
  2080                           	opt stack 0
  2081  00000F                     ?___ftpack:
  2082                           	opt stack 0
  2083  00000F                     ?_BMP085ReadUT:
  2084                           	opt stack 0
  2085  00000F                     ?_bmp085ReadUP:
  2086                           	opt stack 0
  2087  00000F                     ?___lmul:
  2088                           	opt stack 0
  2089  00000F                     ?___lldiv:
  2090                           	opt stack 0
  2091  00000F                     Send_Byte_7221@dat:
  2092                           	opt stack 0
  2093  00000F                     pixel_on@y:
  2094                           	opt stack 0
  2095  00000F                     pixel_off@y:
  2096                           	opt stack 0
  2097  00000F                     clear_matrix@i:
  2098                           	opt stack 0
  2099  00000F                     key_press@key:
  2100                           	opt stack 0
  2101  00000F                     write_bit@bitval:
  2102                           	opt stack 0
  2103  00000F                     ___lbdiv@divisor:
  2104                           	opt stack 0
  2105  00000F                     RTOS_SetTask@taskFunc:
  2106                           	opt stack 0
  2107  00000F                     RTOS_DeleteTask@taskFunc:
  2108                           	opt stack 0
  2109  00000F                     ___lwdiv@dividend:
  2110                           	opt stack 0
  2111  00000F                     ___ftpack@arg:
  2112                           	opt stack 0
  2113  00000F                     ___lmul@multiplier:
  2114                           	opt stack 0
  2115  00000F                     ___lldiv@dividend:
  2116                           	opt stack 0
  2117                           
  2118                           ; 4 bytes @ 0xE
  2119  00000F                     	ds	1
  2120  000010                     ??_write_byte:
  2121  000010                     ??_pixel_on:
  2122  000010                     ??_pixel_off:
  2123  000010                     I2C_start@_R_W:
  2124                           	opt stack 0
  2125  000010                     I2C_restart@_R_W:
  2126                           	opt stack 0
  2127  000010                     I2C_write@data:
  2128                           	opt stack 0
  2129  000010                     Send_Byte_7221@i:
  2130                           	opt stack 0
  2131  000010                     bcd_to_decimal@d:
  2132                           	opt stack 0
  2133  000010                     ow_reset@presence:
  2134                           	opt stack 0
  2135  000010                     ___lbdiv@dividend:
  2136                           	opt stack 0
  2137                           
  2138                           ; 1 bytes @ 0xF
  2139  000010                     	ds	1
  2140  000011                     ??_RTOS_DeleteTask:
  2141  000011                     I2C_start@adress:
  2142                           	opt stack 0
  2143  000011                     I2C_restart@adres:
  2144                           	opt stack 0
  2145  000011                     Cmd7221@val:
  2146                           	opt stack 0
  2147  000011                     Update_Matrix@buf:
  2148                           	opt stack 0
  2149  000011                     read_byte@val:
  2150                           	opt stack 0
  2151  000011                     ___lbdiv@counter:
  2152                           	opt stack 0
  2153  000011                     RTOS_SetTask@taskDelay:
  2154                           	opt stack 0
  2155  000011                     ___lwdiv@divisor:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x10
  2159  000011                     	ds	1
  2160  000012                     Cmd7221@adr:
  2161                           	opt stack 0
  2162  000012                     Update_Matrix@data:
  2163                           	opt stack 0
  2164  000012                     pixel_on@x:
  2165                           	opt stack 0
  2166  000012                     DS3231_Read@address:
  2167                           	opt stack 0
  2168  000012                     read_byte@i:
  2169                           	opt stack 0
  2170  000012                     write_byte@val:
  2171                           	opt stack 0
  2172  000012                     ___ftpack@exp:
  2173                           	opt stack 0
  2174  000012                     ___lbdiv@quotient:
  2175                           	opt stack 0
  2176                           
  2177                           ; 1 bytes @ 0x11
  2178  000012                     	ds	1
  2179  000013                     ??_BMP085ReadUT:
  2180  000013                     ??_bmp085ReadUP:
  2181  000013                     Cmd7221@i:
  2182                           	opt stack 0
  2183  000013                     Update_Matrix@j:
  2184                           	opt stack 0
  2185  000013                     pixel_off@x:
  2186                           	opt stack 0
  2187  000013                     DS3231_Read@value:
  2188                           	opt stack 0
  2189  000013                     write_byte@temp:
  2190                           	opt stack 0
  2191  000013                     ___ftpack@sign:
  2192                           	opt stack 0
  2193  000013                     ___lbmod@divisor:
  2194                           	opt stack 0
  2195  000013                     ___lwdiv@counter:
  2196                           	opt stack 0
  2197  000013                     RTOS_SetTask@taskPeriod:
  2198                           	opt stack 0
  2199  000013                     ___lmul@multiplicand:
  2200                           	opt stack 0
  2201  000013                     ___lldiv@divisor:
  2202                           	opt stack 0
  2203                           
  2204                           ; 4 bytes @ 0x12
  2205  000013                     	ds	1
  2206  000014                     ??___ftpack:
  2207  000014                     Update_Matrix@i:
  2208                           	opt stack 0
  2209  000014                     pic_to_led@pic:
  2210                           	opt stack 0
  2211  000014                     getTime@p3:
  2212                           	opt stack 0
  2213  000014                     getDate@p4:
  2214                           	opt stack 0
  2215  000014                     write_byte@i:
  2216                           	opt stack 0
  2217  000014                     ___lbmod@dividend:
  2218                           	opt stack 0
  2219  000014                     ___lwdiv@quotient:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0x13
  2223  000014                     	ds	1
  2224  000015                     ??_pic_to_led:
  2225  000015                     ??_scroll_left:
  2226  000015                     getTime@p2:
  2227                           	opt stack 0
  2228  000015                     getDate@p3:
  2229                           	opt stack 0
  2230  000015                     ___lbmod@counter:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x14
  2234  000015                     	ds	1
  2235  000016                     ?___lwmod:
  2236                           	opt stack 0
  2237  000016                     scroll_left@j:
  2238                           	opt stack 0
  2239  000016                     getTime@p1:
  2240                           	opt stack 0
  2241  000016                     getDate@p2:
  2242                           	opt stack 0
  2243  000016                     ___lbmod@rem:
  2244                           	opt stack 0
  2245  000016                     ___lwmod@dividend:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x15
  2249  000016                     	ds	1
  2250  000017                     ??_FillBuf:
  2251  000017                     ??_decimal_to_bcd:
  2252  000017                     ?___altoft:
  2253                           	opt stack 0
  2254  000017                     RTOS_SetTask@i:
  2255                           	opt stack 0
  2256  000017                     RTOS_DeleteTask@i:
  2257                           	opt stack 0
  2258  000017                     pic_to_led@mask:
  2259                           	opt stack 0
  2260  000017                     putchar_b_buf@symbol:
  2261                           	opt stack 0
  2262  000017                     putchar_down_s@symbol:
  2263                           	opt stack 0
  2264  000017                     scroll_left@k:
  2265                           	opt stack 0
  2266  000017                     getDate@p1:
  2267                           	opt stack 0
  2268  000017                     ___lmul@product:
  2269                           	opt stack 0
  2270  000017                     ___altoft@c:
  2271                           	opt stack 0
  2272  000017                     ___lldiv@quotient:
  2273                           	opt stack 0
  2274                           
  2275                           ; 4 bytes @ 0x16
  2276  000017                     	ds	1
  2277  000018                     ??_putchar_b_buf:
  2278  000018                     ??_putchar_down_s:
  2279  000018                     pic_to_led@x:
  2280                           	opt stack 0
  2281  000018                     scroll_left@speed:
  2282                           	opt stack 0
  2283  000018                     ___lwmod@divisor:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x17
  2287  000018                     	ds	1
  2288  000019                     pic_to_led@j:
  2289                           	opt stack 0
  2290  000019                     FillBuf@i:
  2291                           	opt stack 0
  2292  000019                     scroll_left@i:
  2293                           	opt stack 0
  2294  000019                     decimal_to_bcd@d:
  2295                           	opt stack 0
  2296                           
  2297                           ; 1 bytes @ 0x18
  2298  000019                     	ds	1
  2299  00001A                     pic_to_led@i:
  2300                           	opt stack 0
  2301  00001A                     putchar_b_buf@mask:
  2302                           	opt stack 0
  2303  00001A                     DS3231_Write@value:
  2304                           	opt stack 0
  2305  00001A                     ___lwmod@counter:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x19
  2309  00001A                     	ds	1
  2310  00001B                     ??___altoft:
  2311  00001B                     ?___aldiv:
  2312                           	opt stack 0
  2313  00001B                     putchar_b_buf@x:
  2314                           	opt stack 0
  2315  00001B                     putchar_down@symbol:
  2316                           	opt stack 0
  2317  00001B                     DS3231_Write@address:
  2318                           	opt stack 0
  2319  00001B                     readTemp_Single@buf:
  2320                           	opt stack 0
  2321  00001B                     ___lldiv@counter:
  2322                           	opt stack 0
  2323  00001B                     ___aldiv@dividend:
  2324                           	opt stack 0
  2325                           
  2326                           ; 4 bytes @ 0x1A
  2327  00001B                     	ds	1
  2328  00001C                     ??_putchar_down:
  2329  00001C                     putchar_b_buf@j:
  2330                           	opt stack 0
  2331  00001C                     setTime@mSet:
  2332                           	opt stack 0
  2333  00001C                     setDate@dateSet:
  2334                           	opt stack 0
  2335  00001C                     readTemp_Single@time_flag:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0x1B
  2339  00001C                     	ds	1
  2340  00001D                     putchar_b_buf@i:
  2341                           	opt stack 0
  2342  00001D                     putchar_down_s@x:
  2343                           	opt stack 0
  2344  00001D                     setTime@sSet:
  2345                           	opt stack 0
  2346  00001D                     setDate@monthSet:
  2347                           	opt stack 0
  2348  00001D                     readTemp_Single@timer_val:
  2349                           	opt stack 0
  2350                           
  2351                           ; 1 bytes @ 0x1C
  2352  00001D                     	ds	1
  2353  00001E                     ??_readTemp_Single:
  2354  00001E                     putchar_down_s@k:
  2355                           	opt stack 0
  2356  00001E                     setTime@hSet:
  2357                           	opt stack 0
  2358  00001E                     setDate@yearSet:
  2359                           	opt stack 0
  2360                           
  2361                           ; 1 bytes @ 0x1D
  2362  00001E                     	ds	1
  2363  00001F                     putchar_down_s@j:
  2364                           	opt stack 0
  2365  00001F                     setDate@daySet:
  2366                           	opt stack 0
  2367  00001F                     ___altoft@exp:
  2368                           	opt stack 0
  2369  00001F                     ___aldiv@divisor:
  2370                           	opt stack 0
  2371                           
  2372                           ; 4 bytes @ 0x1E
  2373  00001F                     	ds	1
  2374  000020                     putchar_down_s@i:
  2375                           	opt stack 0
  2376  000020                     readTemp_Single@fptmp:
  2377                           	opt stack 0
  2378  000020                     ___altoft@sign:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x1F
  2382  000020                     	ds	1
  2383  000021                     ?___ftmul:
  2384                           	opt stack 0
  2385  000021                     putchar_down@x:
  2386                           	opt stack 0
  2387  000021                     readTemp_Single@tmp:
  2388                           	opt stack 0
  2389  000021                     ___ftmul@f1:
  2390                           	opt stack 0
  2391                           
  2392                           ; 3 bytes @ 0x20
  2393  000021                     	ds	1
  2394  000022                     putchar_down@k:
  2395                           	opt stack 0
  2396  000022                     readTemp_Single@i:
  2397                           	opt stack 0
  2398                           
  2399                           ; 1 bytes @ 0x21
  2400  000022                     	ds	1
  2401  000023                     putchar_down@j:
  2402                           	opt stack 0
  2403  000023                     ___aldiv@counter:
  2404                           	opt stack 0
  2405  000023                     readTemp_Single@temp:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x22
  2409  000023                     	ds	1
  2410  000024                     putchar_down@i:
  2411                           	opt stack 0
  2412  000024                     ___aldiv@sign:
  2413                           	opt stack 0
  2414  000024                     ___ftmul@f2:
  2415                           	opt stack 0
  2416                           
  2417                           ; 3 bytes @ 0x23
  2418  000024                     	ds	1
  2419  000025                     ??_home_temp:
  2420  000025                     ___aldiv@quotient:
  2421                           	opt stack 0
  2422                           
  2423                           ; 4 bytes @ 0x24
  2424  000025                     	ds	2
  2425  000027                     ??___ftmul:
  2426                           
  2427                           ; 1 bytes @ 0x26
  2428  000027                     	ds	2
  2429  000029                     ?_BMP085GetTemp:
  2430                           	opt stack 0
  2431  000029                     BMP085GetTemp@_tu:
  2432                           	opt stack 0
  2433                           
  2434                           ; 4 bytes @ 0x28
  2435  000029                     	ds	1
  2436  00002A                     ___ftmul@exp:
  2437                           	opt stack 0
  2438                           
  2439                           ; 1 bytes @ 0x29
  2440  00002A                     	ds	1
  2441  00002B                     ___ftmul@f3_as_product:
  2442                           	opt stack 0
  2443                           
  2444                           ; 3 bytes @ 0x2A
  2445  00002B                     	ds	2
  2446  00002D                     ??_BMP085GetTemp:
  2447                           
  2448                           ; 1 bytes @ 0x2C
  2449  00002D                     	ds	1
  2450  00002E                     ___ftmul@cntr:
  2451                           	opt stack 0
  2452                           
  2453                           ; 1 bytes @ 0x2D
  2454  00002E                     	ds	1
  2455  00002F                     ___ftmul@sign:
  2456                           	opt stack 0
  2457                           
  2458                           ; 1 bytes @ 0x2E
  2459  00002F                     	ds	1
  2460  000030                     ?___fttol:
  2461                           	opt stack 0
  2462  000030                     ___fttol@f1:
  2463                           	opt stack 0
  2464                           
  2465                           ; 3 bytes @ 0x2F
  2466  000030                     	ds	4
  2467  000034                     ??___fttol:
  2468                           
  2469                           ; 1 bytes @ 0x33
  2470  000034                     	ds	1
  2471  000035                     BMP085GetTemp@Tt:
  2472                           	opt stack 0
  2473                           
  2474                           ; 4 bytes @ 0x34
  2475  000035                     	ds	4
  2476  000039                     ___fttol@sign1:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x38
  2480  000039                     	ds	1
  2481  00003A                     ___fttol@lval:
  2482                           	opt stack 0
  2483                           
  2484                           ; 4 bytes @ 0x39
  2485  00003A                     	ds	4
  2486  00003E                     ___fttol@exp1:
  2487                           	opt stack 0
  2488                           
  2489                           ; 1 bytes @ 0x3D
  2490  00003E                     	ds	1
  2491  00003F                     ?_BMP085GetPressure:
  2492                           	opt stack 0
  2493  00003F                     BMP085GetPressure@_pu:
  2494                           	opt stack 0
  2495                           
  2496                           ; 4 bytes @ 0x3E
  2497  00003F                     	ds	4
  2498  000043                     ??_BMP085GetPressure:
  2499                           
  2500                           ; 1 bytes @ 0x42
  2501  000043                     	ds	8
  2502  00004B                     BMP085Pressure@getTemp:
  2503                           	opt stack 0
  2504                           
  2505                           ; 1 bytes @ 0x4A
  2506  00004B                     	ds	1
  2507  00004C                     ??_main:
  2508                           
  2509                           ; 1 bytes @ 0x4B
  2510  00004C                     	ds	1
  2511                           tosu	equ	0xFFF
  2512                           tosh	equ	0xFFE
  2513                           tosl	equ	0xFFD
  2514                           pclath	equ	0xFFA
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           prodh	equ	0xFF4
  2520                           prodl	equ	0xFF3
  2521                           intcon	equ	0xFF2
  2522                           intcon2	equ	0xFF1
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           indf1	equ	0xFE7
  2526                           plusw1	equ	0xFE3
  2527                           fsr1h	equ	0xFE2
  2528                           fsr1l	equ	0xFE1
  2529                           indf2	equ	0xFDF
  2530                           postinc2	equ	0xFDE
  2531                           postdec2	equ	0xFDD
  2532                           plusw2	equ	0xFDB
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;;
  2538 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2539 ;;
  2540 ;; *************** function _main *****************
  2541 ;; Defined at:
  2542 ;;		line 19 in file "main.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 3F/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;Total ram usage:        1 bytes
  2561 ;; Hardware stack levels required when called:    9
  2562 ;; This function calls:
  2563 ;;		_RTOS_DispatchTask
  2564 ;;		_RTOS_SetTask
  2565 ;;		_SYSTEM_Initialize
  2566 ;;		_clear_matrix
  2567 ;; This function is called by:
  2568 ;;		Startup code after reset
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text0
  2573  001CD4                     __ptext0:
  2574                           	opt stack 0
  2575  001CD4                     _main:
  2576                           	opt stack 22
  2577                           
  2578                           ;main.c: 20: _delay((unsigned long)((10)*(40000000/4000.0)));
  2579                           
  2580                           ;incstack = 0
  2581  001CD4  0E82               	movlw	130
  2582  001CD6  6E4C               	movwf	??_main& (0+255),c
  2583  001CD8  0EDE               	movlw	222
  2584  001CDA                     u5077:
  2585  001CDA  2EE8               	decfsz	wreg,f,c
  2586  001CDC  D7FE               	bra	u5077
  2587  001CDE  2E4C               	decfsz	??_main& (0+255),f,c
  2588  001CE0  D7FC               	bra	u5077
  2589                           
  2590                           ;main.c: 21: SYSTEM_Initialize();
  2591  001CE2  EC5F  F010         	call	_SYSTEM_Initialize	;wreg free
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;main.c: 23: clear_matrix();
  2595  001CE6  ECAB  F011         	call	_clear_matrix	;wreg free
  2596                           
  2597                           ;main.c: 26: (INTCONbits.GIE = 0);
  2598  001CEA  9EF2               	bcf	intcon,7,c	;volatile
  2599                           
  2600                           ;main.c: 27: RTOS_SetTask(time_led, 100, 20);
  2601  001CEC  0E2E               	movlw	low _time_led
  2602  001CEE  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  2603  001CF0  0E12               	movlw	high _time_led
  2604  001CF2  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  2605  001CF4  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  2606  001CF6  0E64               	movlw	100
  2607  001CF8  6E11               	movwf	RTOS_SetTask@taskDelay,c
  2608  001CFA  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  2609  001CFC  0E14               	movlw	20
  2610  001CFE  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  2611  001D00  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  2612                           
  2613                           ;main.c: 28: RTOS_SetTask(key_press,0,1);
  2614  001D04  0EFE               	movlw	low _key_press
  2615  001D06  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  2616  001D08  0E1D               	movlw	high _key_press
  2617  001D0A  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  2618  001D0C  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  2619  001D0E  6A11               	clrf	RTOS_SetTask@taskDelay,c
  2620  001D10  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  2621  001D12  0E01               	movlw	1
  2622  001D14  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  2623  001D16  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  2624                           
  2625                           ;main.c: 29: (INTCONbits.GIE = 1);
  2626  001D1A  8EF2               	bsf	intcon,7,c	;volatile
  2627  001D1C                     l6294:
  2628                           
  2629                           ;main.c: 32: {
  2630                           ;main.c: 33: RTOS_DispatchTask();
  2631  001D1C  EC2E  F008         	call	_RTOS_DispatchTask	;wreg free
  2632  001D20  D7FD               	goto	l6294
  2633  001D22                     __end_of_main:
  2634                           	opt stack 0
  2635                           tosu	equ	0xFFF
  2636                           tosh	equ	0xFFE
  2637                           tosl	equ	0xFFD
  2638                           pclath	equ	0xFFA
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           intcon	equ	0xFF2
  2646                           intcon2	equ	0xFF1
  2647                           postinc0	equ	0xFEE
  2648                           wreg	equ	0xFE8
  2649                           indf1	equ	0xFE7
  2650                           plusw1	equ	0xFE3
  2651                           fsr1h	equ	0xFE2
  2652                           fsr1l	equ	0xFE1
  2653                           indf2	equ	0xFDF
  2654                           postinc2	equ	0xFDE
  2655                           postdec2	equ	0xFDD
  2656                           plusw2	equ	0xFDB
  2657                           fsr2h	equ	0xFDA
  2658                           fsr2l	equ	0xFD9
  2659                           status	equ	0xFD8
  2660                           
  2661 ;; *************** function _SYSTEM_Initialize *****************
  2662 ;; Defined at:
  2663 ;;		line 64 in file "init.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;		None
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;		None
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 3F/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;Total ram usage:        0 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    7
  2684 ;; This function calls:
  2685 ;;		_DS3231_init
  2686 ;;		_I2C_Init
  2687 ;;		_Init7221
  2688 ;;		_Interrupt_Init
  2689 ;;		_Port_Init
  2690 ;;		_RTOS_Init
  2691 ;;		_TMR1Init
  2692 ;;		_bmp085Calibration
  2693 ;;		_init_ds18b20
  2694 ;;		_init_uart
  2695 ;; This function is called by:
  2696 ;;		_main
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text1
  2701  0020BE                     __ptext1:
  2702                           	opt stack 0
  2703  0020BE                     _SYSTEM_Initialize:
  2704                           	opt stack 23
  2705                           
  2706                           ;init.c: 67: Port_Init();
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;incstack = 0
  2710  0020BE  EC3D  F011         	call	_Port_Init	;wreg free
  2711                           
  2712                           ;init.c: 68: I2C_Init();
  2713  0020C2  EC81  F011         	call	_I2C_Init	;wreg free
  2714                           
  2715                           ;init.c: 69: Init7221();
  2716  0020C6  EC06  F010         	call	_Init7221	;wreg free
  2717                           
  2718                           ;init.c: 70: TMR1Init();
  2719  0020CA  ECD6  F011         	call	_TMR1Init	;wreg free
  2720                           
  2721                           ;init.c: 71: Interrupt_Init();
  2722  0020CE  ECEA  F011         	call	_Interrupt_Init	;wreg free
  2723                           
  2724                           ;init.c: 72: DS3231_init();
  2725  0020D2  ECA2  F011         	call	_DS3231_init	;wreg free
  2726                           
  2727                           ;init.c: 73: init_ds18b20();
  2728  0020D6  EC73  F010         	call	_init_ds18b20	;wreg free
  2729                           
  2730                           ;init.c: 74: RTOS_Init();
  2731  0020DA  ECC6  F011         	call	_RTOS_Init	;wreg free
  2732                           
  2733                           ;init.c: 75: init_uart();
  2734  0020DE  EC67  F011         	call	_init_uart	;wreg free
  2735                           
  2736                           ;init.c: 76: bmp085Calibration();
  2737  0020E2  EF42  F00E         	goto	_bmp085Calibration	;wreg free
  2738  0020E6                     __end_of_SYSTEM_Initialize:
  2739                           	opt stack 0
  2740                           tosu	equ	0xFFF
  2741                           tosh	equ	0xFFE
  2742                           tosl	equ	0xFFD
  2743                           pclath	equ	0xFFA
  2744                           tblptru	equ	0xFF8
  2745                           tblptrh	equ	0xFF7
  2746                           tblptrl	equ	0xFF6
  2747                           tablat	equ	0xFF5
  2748                           prodh	equ	0xFF4
  2749                           prodl	equ	0xFF3
  2750                           intcon	equ	0xFF2
  2751                           intcon2	equ	0xFF1
  2752                           postinc0	equ	0xFEE
  2753                           wreg	equ	0xFE8
  2754                           indf1	equ	0xFE7
  2755                           plusw1	equ	0xFE3
  2756                           fsr1h	equ	0xFE2
  2757                           fsr1l	equ	0xFE1
  2758                           indf2	equ	0xFDF
  2759                           postinc2	equ	0xFDE
  2760                           postdec2	equ	0xFDD
  2761                           plusw2	equ	0xFDB
  2762                           fsr2h	equ	0xFDA
  2763                           fsr2l	equ	0xFD9
  2764                           status	equ	0xFD8
  2765                           
  2766 ;; *************** function _init_uart *****************
  2767 ;; Defined at:
  2768 ;;		line 13 in file "eusart.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;		None
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;Total ram usage:        0 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; Hardware stack levels required when called:    3
  2789 ;; This function calls:
  2790 ;;		Nothing
  2791 ;; This function is called by:
  2792 ;;		_SYSTEM_Initialize
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text2
  2797  0022CE                     __ptext2:
  2798                           	opt stack 0
  2799  0022CE                     _init_uart:
  2800                           	opt stack 26
  2801                           
  2802                           ;eusart.c: 15: TRISCbits.RC6 = 1;
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;incstack = 0
  2806  0022CE  8C94               	bsf	3988,6,c	;volatile
  2807                           
  2808                           ;eusart.c: 16: TRISCbits.RC7 = 1;
  2809  0022D0  8E94               	bsf	3988,7,c	;volatile
  2810                           
  2811                           ;eusart.c: 17: TXSTAbits.BRGH = 1;
  2812  0022D2  84AC               	bsf	4012,2,c	;volatile
  2813                           
  2814                           ;eusart.c: 18: TXSTAbits.SYNC = 0;
  2815  0022D4  98AC               	bcf	4012,4,c	;volatile
  2816                           
  2817                           ;eusart.c: 19: TXSTAbits.TXEN = 1;
  2818  0022D6  8AAC               	bsf	4012,5,c	;volatile
  2819                           
  2820                           ;eusart.c: 20: RCSTAbits.CREN = 1;
  2821  0022D8  88AB               	bsf	4011,4,c	;volatile
  2822                           
  2823                           ;eusart.c: 21: RCSTAbits.SPEN = 1;
  2824  0022DA  8EAB               	bsf	4011,7,c	;volatile
  2825                           
  2826                           ;eusart.c: 22: BAUDCONbits.BRG16 = 1;
  2827  0022DC  86B8               	bsf	4024,3,c	;volatile
  2828                           
  2829                           ;eusart.c: 30: SPBRGH = 0x04;
  2830  0022DE  0E04               	movlw	4
  2831  0022E0  6EB0               	movwf	4016,c	;volatile
  2832                           
  2833                           ;eusart.c: 31: SPBRG = 0x10;
  2834  0022E2  0E10               	movlw	16
  2835  0022E4  6EAF               	movwf	4015,c	;volatile
  2836  0022E6  0C10               	retlw	16	;funcret
  2837  0022E8                     __end_of_init_uart:
  2838                           	opt stack 0
  2839                           tosu	equ	0xFFF
  2840                           tosh	equ	0xFFE
  2841                           tosl	equ	0xFFD
  2842                           pclath	equ	0xFFA
  2843                           tblptru	equ	0xFF8
  2844                           tblptrh	equ	0xFF7
  2845                           tblptrl	equ	0xFF6
  2846                           tablat	equ	0xFF5
  2847                           prodh	equ	0xFF4
  2848                           prodl	equ	0xFF3
  2849                           intcon	equ	0xFF2
  2850                           intcon2	equ	0xFF1
  2851                           postinc0	equ	0xFEE
  2852                           wreg	equ	0xFE8
  2853                           indf1	equ	0xFE7
  2854                           plusw1	equ	0xFE3
  2855                           fsr1h	equ	0xFE2
  2856                           fsr1l	equ	0xFE1
  2857                           indf2	equ	0xFDF
  2858                           postinc2	equ	0xFDE
  2859                           postdec2	equ	0xFDD
  2860                           plusw2	equ	0xFDB
  2861                           fsr2h	equ	0xFDA
  2862                           fsr2l	equ	0xFD9
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function _init_ds18b20 *****************
  2866 ;; Defined at:
  2867 ;;		line 12 in file "ds18b20.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;		None
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;		None
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, status,2, status,0, cstack
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;Total ram usage:        0 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    5
  2888 ;; This function calls:
  2889 ;;		_ow_reset
  2890 ;;		_write_byte
  2891 ;; This function is called by:
  2892 ;;		_SYSTEM_Initialize
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text3
  2897  0020E6                     __ptext3:
  2898                           	opt stack 0
  2899  0020E6                     _init_ds18b20:
  2900                           	opt stack 24
  2901                           
  2902                           ;ds18b20.c: 15: if (!ow_reset())
  2903                           
  2904                           ;incstack = 0
  2905  0020E6  EC40  F00F         	call	_ow_reset	;wreg free
  2906  0020EA  0900               	iorlw	0
  2907  0020EC  A4D8               	btfss	status,2,c
  2908  0020EE  0012               	return	
  2909                           
  2910                           ;ds18b20.c: 16: {
  2911                           ;ds18b20.c: 18: write_byte(0xCC);
  2912  0020F0  0ECC               	movlw	204
  2913  0020F2  EC99  F00F         	call	_write_byte
  2914                           
  2915                           ;ds18b20.c: 19: write_byte(0x4E);
  2916  0020F6  0E4E               	movlw	78
  2917  0020F8  EC99  F00F         	call	_write_byte
  2918                           
  2919                           ;ds18b20.c: 20: write_byte(0x00);
  2920  0020FC  0E00               	movlw	0
  2921  0020FE  EC99  F00F         	call	_write_byte
  2922                           
  2923                           ;ds18b20.c: 21: write_byte(0x00);
  2924  002102  0E00               	movlw	0
  2925  002104  EC99  F00F         	call	_write_byte
  2926                           
  2927                           ;ds18b20.c: 22: write_byte(0x7F);
  2928  002108  0E7F               	movlw	127
  2929  00210A  EF99  F00F         	goto	_write_byte
  2930  00210E                     __end_of_init_ds18b20:
  2931                           	opt stack 0
  2932                           tosu	equ	0xFFF
  2933                           tosh	equ	0xFFE
  2934                           tosl	equ	0xFFD
  2935                           pclath	equ	0xFFA
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           intcon	equ	0xFF2
  2943                           intcon2	equ	0xFF1
  2944                           postinc0	equ	0xFEE
  2945                           wreg	equ	0xFE8
  2946                           indf1	equ	0xFE7
  2947                           plusw1	equ	0xFE3
  2948                           fsr1h	equ	0xFE2
  2949                           fsr1l	equ	0xFE1
  2950                           indf2	equ	0xFDF
  2951                           postinc2	equ	0xFDE
  2952                           postdec2	equ	0xFDD
  2953                           plusw2	equ	0xFDB
  2954                           fsr2h	equ	0xFDA
  2955                           fsr2l	equ	0xFD9
  2956                           status	equ	0xFD8
  2957                           
  2958 ;; *************** function _bmp085Calibration *****************
  2959 ;; Defined at:
  2960 ;;		line 99 in file "bmp180.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;		None
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;		None
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, status,2
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 3F/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;Total ram usage:        0 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    3
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		_SYSTEM_Initialize
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text4
  2989  001C84                     __ptext4:
  2990                           	opt stack 0
  2991  001C84                     _bmp085Calibration:
  2992                           	opt stack 26
  2993                           
  2994                           ;bmp180.c: 115: ac1 = 408;
  2995                           
  2996                           ;incstack = 0
  2997  001C84  0E01               	movlw	1
  2998  001C86  6E65               	movwf	_ac1+1,c
  2999  001C88  0E98               	movlw	152
  3000  001C8A  6E64               	movwf	_ac1,c
  3001                           
  3002                           ;bmp180.c: 116: ac2 = -72;
  3003  001C8C  0100               	movlb	0	; () banked
  3004  001C8E  69AA               	setf	(_ac2+1)& (0+255),b
  3005  001C90  0EB8               	movlw	184
  3006  001C92  6FA9               	movwf	_ac2& (0+255),b
  3007                           
  3008                           ;bmp180.c: 117: ac3 = -14383;
  3009  001C94  0EC7               	movlw	199
  3010  001C96  6FA8               	movwf	(_ac3+1)& (0+255),b
  3011  001C98  0ED1               	movlw	209
  3012  001C9A  6FA7               	movwf	_ac3& (0+255),b
  3013                           
  3014                           ;bmp180.c: 118: ac4 = 32741;
  3015  001C9C  0E7F               	movlw	127
  3016  001C9E  6FA6               	movwf	(_ac4+1)& (0+255),b
  3017  001CA0  0EE5               	movlw	229
  3018  001CA2  6FA5               	movwf	_ac4& (0+255),b
  3019                           
  3020                           ;bmp180.c: 119: ac5 = 32757;
  3021  001CA4  0E7F               	movlw	127
  3022  001CA6  6FA4               	movwf	(_ac5+1)& (0+255),b
  3023  001CA8  0EF5               	movlw	245
  3024  001CAA  6FA3               	movwf	_ac5& (0+255),b
  3025                           
  3026                           ;bmp180.c: 120: ac6 = 23153;
  3027  001CAC  0E5A               	movlw	90
  3028  001CAE  6FA2               	movwf	(_ac6+1)& (0+255),b
  3029  001CB0  0E71               	movlw	113
  3030  001CB2  6FA1               	movwf	_ac6& (0+255),b
  3031                           
  3032                           ;bmp180.c: 121: b1 = 6190;
  3033  001CB4  0E18               	movlw	24
  3034  001CB6  6FA0               	movwf	(_b1+1)& (0+255),b
  3035  001CB8  0E2E               	movlw	46
  3036  001CBA  6F9F               	movwf	_b1& (0+255),b
  3037                           
  3038                           ;bmp180.c: 123: mb = -32767;
  3039  001CBC  6B9E               	clrf	(_b2+1)& (0+255),b
  3040  001CBE  0E04               	movlw	4
  3041  001CC0  6F9D               	movwf	_b2& (0+255),b
  3042                           
  3043                           ;bmp180.c: 124: mc = -8711;
  3044  001CC2  0EDD               	movlw	221
  3045  001CC4  6F9C               	movwf	(_mc+1)& (0+255),b
  3046  001CC6  0EF9               	movlw	249
  3047  001CC8  6F9B               	movwf	_mc& (0+255),b
  3048                           
  3049                           ;bmp180.c: 125: md = 2868;
  3050  001CCA  0E0B               	movlw	11
  3051  001CCC  6F9A               	movwf	(_md+1)& (0+255),b
  3052  001CCE  0E34               	movlw	52
  3053  001CD0  6F99               	movwf	_md& (0+255),b
  3054                           
  3055                           ; BSR set to: 0
  3056  001CD2  0C34               	retlw	52	;funcret
  3057  001CD4                     __end_of_bmp085Calibration:
  3058                           	opt stack 0
  3059                           tosu	equ	0xFFF
  3060                           tosh	equ	0xFFE
  3061                           tosl	equ	0xFFD
  3062                           pclath	equ	0xFFA
  3063                           tblptru	equ	0xFF8
  3064                           tblptrh	equ	0xFF7
  3065                           tblptrl	equ	0xFF6
  3066                           tablat	equ	0xFF5
  3067                           prodh	equ	0xFF4
  3068                           prodl	equ	0xFF3
  3069                           intcon	equ	0xFF2
  3070                           intcon2	equ	0xFF1
  3071                           postinc0	equ	0xFEE
  3072                           wreg	equ	0xFE8
  3073                           indf1	equ	0xFE7
  3074                           plusw1	equ	0xFE3
  3075                           fsr1h	equ	0xFE2
  3076                           fsr1l	equ	0xFE1
  3077                           indf2	equ	0xFDF
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           plusw2	equ	0xFDB
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8
  3084                           
  3085 ;; *************** function _TMR1Init *****************
  3086 ;; Defined at:
  3087 ;;		line 5 in file "timer.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;		None
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;		None
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;Total ram usage:        0 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    3
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_SYSTEM_Initialize
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text5
  3116  0023AC                     __ptext5:
  3117                           	opt stack 0
  3118  0023AC                     _TMR1Init:
  3119                           	opt stack 26
  3120                           
  3121                           ;timer.c: 7: T1CONbits.TMR1ON = 0;
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;incstack = 0
  3125  0023AC  90CD               	bcf	4045,0,c	;volatile
  3126                           
  3127                           ;timer.c: 8: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  3128  0023AE  0E3C               	movlw	60
  3129  0023B0  6ECF               	movwf	4047,c	;volatile
  3130                           
  3131                           ;timer.c: 9: TMR1L = ((unsigned char)((15536)&0xFF));
  3132  0023B2  0EB0               	movlw	176
  3133  0023B4  6ECE               	movwf	4046,c	;volatile
  3134                           
  3135                           ;timer.c: 10: PIE1bits.TMR1IE = 1;
  3136  0023B6  809D               	bsf	3997,0,c	;volatile
  3137  0023B8  0CB0               	retlw	176	;funcret
  3138  0023BA                     __end_of_TMR1Init:
  3139                           	opt stack 0
  3140                           tosu	equ	0xFFF
  3141                           tosh	equ	0xFFE
  3142                           tosl	equ	0xFFD
  3143                           pclath	equ	0xFFA
  3144                           tblptru	equ	0xFF8
  3145                           tblptrh	equ	0xFF7
  3146                           tblptrl	equ	0xFF6
  3147                           tablat	equ	0xFF5
  3148                           prodh	equ	0xFF4
  3149                           prodl	equ	0xFF3
  3150                           intcon	equ	0xFF2
  3151                           intcon2	equ	0xFF1
  3152                           postinc0	equ	0xFEE
  3153                           wreg	equ	0xFE8
  3154                           indf1	equ	0xFE7
  3155                           plusw1	equ	0xFE3
  3156                           fsr1h	equ	0xFE2
  3157                           fsr1l	equ	0xFE1
  3158                           indf2	equ	0xFDF
  3159                           postinc2	equ	0xFDE
  3160                           postdec2	equ	0xFDD
  3161                           plusw2	equ	0xFDB
  3162                           fsr2h	equ	0xFDA
  3163                           fsr2l	equ	0xFD9
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function _RTOS_Init *****************
  3167 ;; Defined at:
  3168 ;;		line 10 in file "dispatcher.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  1    wreg      void 
  3175 ;; Registers used:
  3176 ;;		wreg, status,2
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;Total ram usage:        0 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    3
  3189 ;; This function calls:
  3190 ;;		Nothing
  3191 ;; This function is called by:
  3192 ;;		_SYSTEM_Initialize
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text6
  3197  00238C                     __ptext6:
  3198                           	opt stack 0
  3199  00238C                     _RTOS_Init:
  3200                           	opt stack 26
  3201                           
  3202                           ;dispatcher.c: 12: T0CON = 0b11000111;
  3203                           
  3204                           ;incstack = 0
  3205  00238C  0EC7               	movlw	199
  3206  00238E  6ED5               	movwf	4053,c	;volatile
  3207                           
  3208                           ;dispatcher.c: 13: INTCONbits.TMR0IE = 1;
  3209  002390  8AF2               	bsf	intcon,5,c	;volatile
  3210                           
  3211                           ;dispatcher.c: 14: TMR0 = 61;
  3212  002392  6AD7               	clrf	4055,c	;volatile
  3213  002394  0E3D               	movlw	61
  3214  002396  6ED6               	movwf	4054,c	;volatile
  3215                           
  3216                           ;dispatcher.c: 16: arrayTail = 0;
  3217  002398  6A68               	clrf	_arrayTail,c	;volatile
  3218  00239A  0012               	return		;funcret
  3219  00239C                     __end_of_RTOS_Init:
  3220                           	opt stack 0
  3221                           tosu	equ	0xFFF
  3222                           tosh	equ	0xFFE
  3223                           tosl	equ	0xFFD
  3224                           pclath	equ	0xFFA
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           intcon2	equ	0xFF1
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           indf1	equ	0xFE7
  3236                           plusw1	equ	0xFE3
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _Port_Init *****************
  3248 ;; Defined at:
  3249 ;;		line 81 in file "init.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  1    wreg      void 
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, status,0
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;Total ram usage:        0 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    3
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_SYSTEM_Initialize
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text7
  3278  00227A                     __ptext7:
  3279                           	opt stack 0
  3280  00227A                     _Port_Init:
  3281                           	opt stack 26
  3282                           
  3283                           ;init.c: 83: LATC = 0x00;
  3284                           
  3285                           ;incstack = 0
  3286  00227A  6A8B               	clrf	3979,c	;volatile
  3287                           
  3288                           ;init.c: 84: TRISC = 0b00011000;
  3289  00227C  0E18               	movlw	24
  3290  00227E  6E94               	movwf	3988,c	;volatile
  3291                           
  3292                           ;init.c: 85: LATB = 0x00;
  3293  002280  6A8A               	clrf	3978,c	;volatile
  3294                           
  3295                           ;init.c: 86: TRISB = 0b00011111;
  3296  002282  0E1F               	movlw	31
  3297  002284  6E93               	movwf	3987,c	;volatile
  3298                           
  3299                           ;init.c: 87: INTCON2 &= (~(1<<7));
  3300  002286  9EF1               	bcf	intcon2,7,c	;volatile
  3301                           
  3302                           ;init.c: 88: LATD = 0x00;
  3303  002288  6A8C               	clrf	3980,c	;volatile
  3304                           
  3305                           ;init.c: 89: TRISD = 0x00;
  3306  00228A  6A95               	clrf	3989,c	;volatile
  3307                           
  3308                           ;init.c: 90: INTCON2bits.INTEDG0 = 1;
  3309  00228C  8CF1               	bsf	intcon2,6,c	;volatile
  3310                           
  3311                           ;init.c: 91: INTCONbits.INT0IF = 0;
  3312  00228E  92F2               	bcf	intcon,1,c	;volatile
  3313                           
  3314                           ;init.c: 92: INTCONbits.INT0IE = 1;
  3315  002290  88F2               	bsf	intcon,4,c	;volatile
  3316                           
  3317                           ;init.c: 93: PORTCbits.RC0 = 1;
  3318  002292  8082               	bsf	3970,0,c	;volatile
  3319  002294  0012               	return		;funcret
  3320  002296                     __end_of_Port_Init:
  3321                           	opt stack 0
  3322                           tosu	equ	0xFFF
  3323                           tosh	equ	0xFFE
  3324                           tosl	equ	0xFFD
  3325                           pclath	equ	0xFFA
  3326                           tblptru	equ	0xFF8
  3327                           tblptrh	equ	0xFF7
  3328                           tblptrl	equ	0xFF6
  3329                           tablat	equ	0xFF5
  3330                           prodh	equ	0xFF4
  3331                           prodl	equ	0xFF3
  3332                           intcon	equ	0xFF2
  3333                           intcon2	equ	0xFF1
  3334                           postinc0	equ	0xFEE
  3335                           wreg	equ	0xFE8
  3336                           indf1	equ	0xFE7
  3337                           plusw1	equ	0xFE3
  3338                           fsr1h	equ	0xFE2
  3339                           fsr1l	equ	0xFE1
  3340                           indf2	equ	0xFDF
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           plusw2	equ	0xFDB
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function _Interrupt_Init *****************
  3349 ;; Defined at:
  3350 ;;		line 96 in file "init.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		None
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;Total ram usage:        0 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    3
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_SYSTEM_Initialize
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text8
  3379  0023D4                     __ptext8:
  3380                           	opt stack 0
  3381  0023D4                     _Interrupt_Init:
  3382                           	opt stack 26
  3383                           
  3384                           ;init.c: 98: (INTCONbits.GIE = 1);
  3385                           
  3386                           ;incstack = 0
  3387  0023D4  8EF2               	bsf	intcon,7,c	;volatile
  3388                           
  3389                           ;init.c: 99: (INTCONbits.PEIE = 1);
  3390  0023D6  8CF2               	bsf	intcon,6,c	;volatile
  3391  0023D8  0012               	return		;funcret
  3392  0023DA                     __end_of_Interrupt_Init:
  3393                           	opt stack 0
  3394                           tosu	equ	0xFFF
  3395                           tosh	equ	0xFFE
  3396                           tosl	equ	0xFFD
  3397                           pclath	equ	0xFFA
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           intcon	equ	0xFF2
  3405                           intcon2	equ	0xFF1
  3406                           postinc0	equ	0xFEE
  3407                           wreg	equ	0xFE8
  3408                           indf1	equ	0xFE7
  3409                           plusw1	equ	0xFE3
  3410                           fsr1h	equ	0xFE2
  3411                           fsr1l	equ	0xFE1
  3412                           indf2	equ	0xFDF
  3413                           postinc2	equ	0xFDE
  3414                           postdec2	equ	0xFDD
  3415                           plusw2	equ	0xFDB
  3416                           fsr2h	equ	0xFDA
  3417                           fsr2l	equ	0xFD9
  3418                           status	equ	0xFD8
  3419                           
  3420 ;; *************** function _Init7221 *****************
  3421 ;; Defined at:
  3422 ;;		line 77 in file "max7221.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;Total ram usage:        0 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    5
  3443 ;; This function calls:
  3444 ;;		_Cmd7221
  3445 ;; This function is called by:
  3446 ;;		_SYSTEM_Initialize
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text9
  3451  00200C                     __ptext9:
  3452                           	opt stack 0
  3453  00200C                     _Init7221:
  3454                           	opt stack 24
  3455                           
  3456                           ;max7221.c: 79: LATDbits.LD0 = 1;
  3457                           
  3458                           ;incstack = 0
  3459  00200C  808C               	bsf	3980,0,c	;volatile
  3460                           
  3461                           ;max7221.c: 81: Cmd7221(0x0C,1);
  3462  00200E  0E01               	movlw	1
  3463  002010  6E11               	movwf	Cmd7221@val,c
  3464  002012  0E0C               	movlw	12
  3465  002014  EC1F  F011         	call	_Cmd7221
  3466                           
  3467                           ;max7221.c: 82: Cmd7221(0x09,0);
  3468  002018  6A11               	clrf	Cmd7221@val,c
  3469  00201A  0E09               	movlw	9
  3470  00201C  EC1F  F011         	call	_Cmd7221
  3471                           
  3472                           ;max7221.c: 83: Cmd7221(0x0B,7);
  3473  002020  0E07               	movlw	7
  3474  002022  6E11               	movwf	Cmd7221@val,c
  3475  002024  0E0B               	movlw	11
  3476  002026  EC1F  F011         	call	_Cmd7221
  3477                           
  3478                           ;max7221.c: 84: Cmd7221(0x0A,0x01);
  3479  00202A  0E01               	movlw	1
  3480  00202C  6E11               	movwf	Cmd7221@val,c
  3481  00202E  0E0A               	movlw	10
  3482  002030  EC1F  F011         	call	_Cmd7221
  3483                           
  3484                           ;max7221.c: 85: Cmd7221(0x0F,0);
  3485  002034  6A11               	clrf	Cmd7221@val,c
  3486  002036  0E0F               	movlw	15
  3487  002038  EF1F  F011         	goto	_Cmd7221
  3488  00203C                     __end_of_Init7221:
  3489                           	opt stack 0
  3490                           tosu	equ	0xFFF
  3491                           tosh	equ	0xFFE
  3492                           tosl	equ	0xFFD
  3493                           pclath	equ	0xFFA
  3494                           tblptru	equ	0xFF8
  3495                           tblptrh	equ	0xFF7
  3496                           tblptrl	equ	0xFF6
  3497                           tablat	equ	0xFF5
  3498                           prodh	equ	0xFF4
  3499                           prodl	equ	0xFF3
  3500                           intcon	equ	0xFF2
  3501                           intcon2	equ	0xFF1
  3502                           postinc0	equ	0xFEE
  3503                           wreg	equ	0xFE8
  3504                           indf1	equ	0xFE7
  3505                           plusw1	equ	0xFE3
  3506                           fsr1h	equ	0xFE2
  3507                           fsr1l	equ	0xFE1
  3508                           indf2	equ	0xFDF
  3509                           postinc2	equ	0xFDE
  3510                           postdec2	equ	0xFDD
  3511                           plusw2	equ	0xFDB
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function _Cmd7221 *****************
  3517 ;; Defined at:
  3518 ;;		line 33 in file "max7221.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  adr             1    wreg     unsigned char 
  3521 ;;  val             1   16[COMRAM] unsigned char 
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;  adr             1   17[COMRAM] unsigned char 
  3524 ;;  i               1   18[COMRAM] unsigned char 
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		wreg, status,2, status,0, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3534 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;Total ram usage:        3 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    4
  3541 ;; This function calls:
  3542 ;;		_Send_Byte_7221
  3543 ;; This function is called by:
  3544 ;;		_Init7221
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text10
  3549  00223E                     __ptext10:
  3550                           	opt stack 0
  3551  00223E                     _Cmd7221:
  3552                           	opt stack 24
  3553                           
  3554                           ;incstack = 0
  3555                           ;Cmd7221@adr stored from wreg
  3556  00223E  6E12               	movwf	Cmd7221@adr,c
  3557                           
  3558                           ;max7221.c: 35: uint8_t i;
  3559                           ;max7221.c: 36: LATDbits.LD0 = 0;
  3560  002240  908C               	bcf	3980,0,c	;volatile
  3561                           
  3562                           ;max7221.c: 37: for (i = 0; i < 4; i++ )
  3563  002242  6A13               	clrf	Cmd7221@i,c
  3564  002244                     l5426:
  3565                           
  3566                           ;max7221.c: 38: {
  3567                           ;max7221.c: 39: Send_Byte_7221(adr);
  3568  002244  5012               	movf	Cmd7221@adr,w,c
  3569  002246  ECFB  F010         	call	_Send_Byte_7221
  3570                           
  3571                           ;max7221.c: 40: Send_Byte_7221(val);
  3572  00224A  5011               	movf	Cmd7221@val,w,c
  3573  00224C  ECFB  F010         	call	_Send_Byte_7221
  3574  002250  2A13               	incf	Cmd7221@i,f,c
  3575  002252  0E03               	movlw	3
  3576  002254  6413               	cpfsgt	Cmd7221@i,c
  3577  002256  D7F6               	goto	l5426
  3578                           
  3579                           ;max7221.c: 42: }
  3580                           ;max7221.c: 44: LATDbits.LD0 = 1;
  3581  002258  808C               	bsf	3980,0,c	;volatile
  3582  00225A  0C03               	retlw	3	;funcret
  3583  00225C                     __end_of_Cmd7221:
  3584                           	opt stack 0
  3585                           tosu	equ	0xFFF
  3586                           tosh	equ	0xFFE
  3587                           tosl	equ	0xFFD
  3588                           pclath	equ	0xFFA
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           intcon	equ	0xFF2
  3596                           intcon2	equ	0xFF1
  3597                           postinc0	equ	0xFEE
  3598                           wreg	equ	0xFE8
  3599                           indf1	equ	0xFE7
  3600                           plusw1	equ	0xFE3
  3601                           fsr1h	equ	0xFE2
  3602                           fsr1l	equ	0xFE1
  3603                           indf2	equ	0xFDF
  3604                           postinc2	equ	0xFDE
  3605                           postdec2	equ	0xFDD
  3606                           plusw2	equ	0xFDB
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _I2C_Init *****************
  3612 ;; Defined at:
  3613 ;;		line 11 in file "i2c.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;Total ram usage:        0 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    3
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_SYSTEM_Initialize
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           	psect	text11
  3642  002302                     __ptext11:
  3643                           	opt stack 0
  3644  002302                     _I2C_Init:
  3645                           	opt stack 26
  3646                           
  3647                           ;i2c.c: 13: TRISC |= 0b00011000;
  3648                           
  3649                           ;incstack = 0
  3650  002302  0E18               	movlw	24
  3651  002304  1294               	iorwf	3988,f,c	;volatile
  3652                           
  3653                           ;i2c.c: 14: SSPCON1 = 0b00101000;
  3654  002306  0E28               	movlw	40
  3655  002308  6EC6               	movwf	4038,c	;volatile
  3656                           
  3657                           ;i2c.c: 15: SSPSTAT = 0b10000000;
  3658  00230A  0E80               	movlw	128
  3659  00230C  6EC7               	movwf	4039,c	;volatile
  3660                           
  3661                           ;i2c.c: 17: SSPADD = 0x1F;
  3662  00230E  0E1F               	movlw	31
  3663  002310  6EC8               	movwf	4040,c	;volatile
  3664                           
  3665                           ;i2c.c: 18: PEN = 1;
  3666  002312  84C5               	bsf	4037,2,c	;volatile
  3667  002314                     l146:
  3668  002314  A4C5               	btfss	4037,2,c	;volatile
  3669  002316  0012               	return		;funcret
  3670  002318  D7FD               	goto	l146
  3671  00231A                     __end_of_I2C_Init:
  3672                           	opt stack 0
  3673                           tosu	equ	0xFFF
  3674                           tosh	equ	0xFFE
  3675                           tosl	equ	0xFFD
  3676                           pclath	equ	0xFFA
  3677                           tblptru	equ	0xFF8
  3678                           tblptrh	equ	0xFF7
  3679                           tblptrl	equ	0xFF6
  3680                           tablat	equ	0xFF5
  3681                           prodh	equ	0xFF4
  3682                           prodl	equ	0xFF3
  3683                           intcon	equ	0xFF2
  3684                           intcon2	equ	0xFF1
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           indf1	equ	0xFE7
  3688                           plusw1	equ	0xFE3
  3689                           fsr1h	equ	0xFE2
  3690                           fsr1l	equ	0xFE1
  3691                           indf2	equ	0xFDF
  3692                           postinc2	equ	0xFDE
  3693                           postdec2	equ	0xFDD
  3694                           plusw2	equ	0xFDB
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699 ;; *************** function _DS3231_init *****************
  3700 ;; Defined at:
  3701 ;;		line 37 in file "ds3231.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;		None
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;Total ram usage:        0 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    6
  3722 ;; This function calls:
  3723 ;;		_DS3231_Write
  3724 ;; This function is called by:
  3725 ;;		_SYSTEM_Initialize
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text12
  3730  002344                     __ptext12:
  3731                           	opt stack 0
  3732  002344                     _DS3231_init:
  3733                           	opt stack 23
  3734                           
  3735                           ;ds3231.c: 39: DS3231_Write(0x0E, 0x00);
  3736                           
  3737                           ;incstack = 0
  3738  002344  6A1A               	clrf	DS3231_Write@value,c
  3739  002346  0E0E               	movlw	14
  3740  002348  EC74  F011         	call	_DS3231_Write
  3741                           
  3742                           ;ds3231.c: 40: DS3231_Write(0x0F, 0x08);
  3743  00234C  0E08               	movlw	8
  3744  00234E  6E1A               	movwf	DS3231_Write@value,c
  3745  002350  0E0F               	movlw	15
  3746  002352  EF74  F011         	goto	_DS3231_Write
  3747  002356                     __end_of_DS3231_init:
  3748                           	opt stack 0
  3749                           tosu	equ	0xFFF
  3750                           tosh	equ	0xFFE
  3751                           tosl	equ	0xFFD
  3752                           pclath	equ	0xFFA
  3753                           tblptru	equ	0xFF8
  3754                           tblptrh	equ	0xFF7
  3755                           tblptrl	equ	0xFF6
  3756                           tablat	equ	0xFF5
  3757                           prodh	equ	0xFF4
  3758                           prodl	equ	0xFF3
  3759                           intcon	equ	0xFF2
  3760                           intcon2	equ	0xFF1
  3761                           postinc0	equ	0xFEE
  3762                           wreg	equ	0xFE8
  3763                           indf1	equ	0xFE7
  3764                           plusw1	equ	0xFE3
  3765                           fsr1h	equ	0xFE2
  3766                           fsr1l	equ	0xFE1
  3767                           indf2	equ	0xFDF
  3768                           postinc2	equ	0xFDE
  3769                           postdec2	equ	0xFDD
  3770                           plusw2	equ	0xFDB
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775 ;; *************** function _RTOS_DispatchTask *****************
  3776 ;; Defined at:
  3777 ;;		line 84 in file "dispatcher.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  function        2   12[BANK0 ] PTR FTN()void 
  3782 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
  3783 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
  3784 ;;		 -> GetTime(1), key_press(1), time_led(1), 
  3785 ;;  i               1   15[BANK0 ] unsigned char 
  3786 ;;  j               1   14[BANK0 ] unsigned char 
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 3F/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3800 ;;Total ram usage:        8 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    8
  3803 ;; This function calls:
  3804 ;;		_GetTime
  3805 ;;		_RTOS_DeleteTask
  3806 ;;		_default_state
  3807 ;;		_home_temp
  3808 ;;		_key_press
  3809 ;;		_time_led
  3810 ;;		_time_set_dt
  3811 ;;		_time_set_dy
  3812 ;;		_time_set_hr
  3813 ;;		_time_set_min
  3814 ;;		_time_set_mt
  3815 ;;		_time_set_yr
  3816 ;; This function is called by:
  3817 ;;		_main
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text13
  3822  00105C                     __ptext13:
  3823                           	opt stack 0
  3824  00105C                     _RTOS_DispatchTask:
  3825                           	opt stack 22
  3826                           
  3827                           ;dispatcher.c: 86: uint8_t i, j;
  3828                           ;dispatcher.c: 87: void (*function) (void);
  3829                           ;dispatcher.c: 89: if (Timer0Interrupt)
  3830                           
  3831                           ;incstack = 0
  3832  00105C  5067               	movf	_Timer0Interrupt,w,c
  3833  00105E  E019               	bz	l244
  3834                           
  3835                           ;dispatcher.c: 90: {
  3836                           ;dispatcher.c: 91: Timer0Interrupt = 0;
  3837  001060  6A67               	clrf	_Timer0Interrupt,c
  3838                           
  3839                           ;dispatcher.c: 92: for (j=0; j<arrayTail; j++)
  3840  001062  0100               	movlb	0	; () banked
  3841  001064  6BE0               	clrf	RTOS_DispatchTask@j& (0+255),b
  3842  001066  D012               	goto	l6260
  3843  001068                     l6252:
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;dispatcher.c: 93: {
  3847                           ;dispatcher.c: 94: if (TaskArray[j].delay == 0)
  3848  001068  51E0               	movf	RTOS_DispatchTask@j& (0+255),w,b
  3849  00106A  D861               	call	PL16	;call to abstracted procedure
  3850  00106C  50DE               	movf	postinc2,w,c
  3851  00106E  10DE               	iorwf	postinc2,w,c
  3852  001070  E107               	bnz	l6256
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;dispatcher.c: 95: TaskArray[j].run = 1;
  3856  001072  51E0               	movf	RTOS_DispatchTask@j& (0+255),w,b
  3857  001074  0D08               	mullw	8
  3858  001076  D863               	call	PL30	;call to abstracted procedure
  3859  001078  0E01               	movlw	1
  3860  00107A  6EDE               	movwf	postinc2,c
  3861  00107C  6ADD               	clrf	postdec2,c
  3862  00107E  D005               	goto	l6258
  3863  001080                     l6256:
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;dispatcher.c: 96: else TaskArray[j].delay--;
  3867  001080  51E0               	movf	RTOS_DispatchTask@j& (0+255),w,b
  3868  001082  D855               	call	PL16	;call to abstracted procedure
  3869  001084  06DE               	decf	postinc2,f,c
  3870  001086  0E00               	movlw	0
  3871  001088  5ADD               	subwfb	postdec2,f,c
  3872  00108A                     l6258:
  3873                           
  3874                           ; BSR set to: 0
  3875  00108A  2BE0               	incf	RTOS_DispatchTask@j& (0+255),f,b
  3876  00108C                     l6260:
  3877                           
  3878                           ; BSR set to: 0
  3879  00108C  5068               	movf	_arrayTail,w,c	;volatile
  3880  00108E  5DE0               	subwf	RTOS_DispatchTask@j& (0+255),w,b
  3881  001090  E3EB               	bnc	l6252
  3882  001092                     l244:
  3883                           
  3884                           ;dispatcher.c: 97: }
  3885                           ;dispatcher.c: 98: }
  3886                           ;dispatcher.c: 100: for (i=0; i<arrayTail; i++)
  3887  001092  0100               	movlb	0	; () banked
  3888  001094  6BE1               	clrf	RTOS_DispatchTask@i& (0+255),b
  3889  001096  D047               	goto	l6276
  3890  001098                     l6262:
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;dispatcher.c: 101: {
  3894                           ;dispatcher.c: 102: if (TaskArray[i].run == 1)
  3895  001098  51E1               	movf	RTOS_DispatchTask@i& (0+255),w,b
  3896  00109A  0D08               	mullw	8
  3897  00109C  D850               	call	PL30	;call to abstracted procedure
  3898  00109E  04DE               	decf	postinc2,w,c
  3899  0010A0  10DE               	iorwf	postinc2,w,c
  3900  0010A2  E13F               	bnz	l6274
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;dispatcher.c: 103: {
  3904                           ;dispatcher.c: 104: function = TaskArray[i].pFunc;
  3905  0010A4  51E1               	movf	RTOS_DispatchTask@i& (0+255),w,b
  3906  0010A6  ECD5  F00A         	call	PL22	;call to abstracted procedure
  3907  0010AA  CFDE F0DE          	movff	postinc2,RTOS_DispatchTask@function
  3908  0010AE  CFDD F0DF          	movff	postdec2,RTOS_DispatchTask@function+1
  3909                           
  3910                           ;dispatcher.c: 106: if(TaskArray[i].period == 0)
  3911  0010B2  51E1               	movf	RTOS_DispatchTask@i& (0+255),w,b
  3912  0010B4  ECE7  F00A         	call	PL26	;call to abstracted procedure
  3913  0010B8  50DE               	movf	postinc2,w,c
  3914  0010BA  10DE               	iorwf	postinc2,w,c
  3915  0010BC  E10A               	bnz	l6268
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;dispatcher.c: 107: {
  3919                           ;dispatcher.c: 108: RTOS_DeleteTask(TaskArray[i].pFunc);
  3920  0010BE  51E1               	movf	RTOS_DispatchTask@i& (0+255),w,b
  3921  0010C0  ECD5  F00A         	call	PL22	;call to abstracted procedure
  3922  0010C4  CFDE F00F          	movff	postinc2,RTOS_DeleteTask@taskFunc
  3923  0010C8  CFDD F010          	movff	postdec2,RTOS_DeleteTask@taskFunc+1
  3924  0010CC  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  3925                           
  3926                           ;dispatcher.c: 110: }
  3927  0010D0  D01B               	goto	l6272
  3928  0010D2                     l6268:
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;dispatcher.c: 111: else
  3932                           ;dispatcher.c: 112: {
  3933                           ;dispatcher.c: 113: TaskArray[i].run = 0;
  3934  0010D2  51E1               	movf	RTOS_DispatchTask@i& (0+255),w,b
  3935  0010D4  ECDD  F00A         	call	PL24	;call to abstracted procedure
  3936                           
  3937                           ;dispatcher.c: 114: if(!TaskArray[i].delay)
  3938  0010D8  51E1               	movf	RTOS_DispatchTask@i& (0+255),w,b
  3939  0010DA  D829               	call	PL16	;call to abstracted procedure
  3940  0010DC  50DE               	movf	postinc2,w,c
  3941  0010DE  10DE               	iorwf	postinc2,w,c
  3942  0010E0  E113               	bnz	l6272
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;dispatcher.c: 115: {
  3946                           ;dispatcher.c: 116: TaskArray[i].delay = TaskArray[i].period-1;
  3947  0010E2  69DA               	setf	??_RTOS_DispatchTask& (0+255),b
  3948  0010E4  69DB               	setf	(??_RTOS_DispatchTask+1)& (0+255),b
  3949  0010E6  51E1               	movf	RTOS_DispatchTask@i& (0+255),w,b
  3950  0010E8  ECE7  F00A         	call	PL26	;call to abstracted procedure
  3951  0010EC  CFDE F0DC          	movff	postinc2,??_RTOS_DispatchTask+2
  3952  0010F0  CFDD F0DD          	movff	postdec2,??_RTOS_DispatchTask+3
  3953  0010F4  51DA               	movf	??_RTOS_DispatchTask& (0+255),w,b
  3954  0010F6  27DC               	addwf	(??_RTOS_DispatchTask+2)& (0+255),f,b
  3955  0010F8  51DB               	movf	(??_RTOS_DispatchTask+1)& (0+255),w,b
  3956  0010FA  23DD               	addwfc	(??_RTOS_DispatchTask+3)& (0+255),f,b
  3957  0010FC  51E1               	movf	RTOS_DispatchTask@i& (0+255),w,b
  3958  0010FE  D817               	call	PL16	;call to abstracted procedure
  3959  001100  C0DC  FFDE         	movff	??_RTOS_DispatchTask+2,postinc2
  3960  001104  C0DD  FFDD         	movff	??_RTOS_DispatchTask+3,postdec2
  3961  001108                     l6272:
  3962                           
  3963                           ;dispatcher.c: 117: }
  3964                           ;dispatcher.c: 118: }
  3965                           ;dispatcher.c: 119: (*function)();
  3966  001108  D801               	call	u4988
  3967  00110A  D00B               	goto	l6274
  3968  00110C                     u4988:
  3969  00110C  0005               	push	
  3970  00110E  0100               	movlb	0	; () banked
  3971  001110  6EFA               	movwf	pclath,c
  3972  001112  51DE               	movf	RTOS_DispatchTask@function& (0+255),w,b
  3973  001114  6EFD               	movwf	tosl,c
  3974  001116  51DF               	movf	(RTOS_DispatchTask@function+1)& (0+255),w,b
  3975  001118  6EFE               	movwf	tosh,c
  3976  00111A  50F8               	movf	tblptru,w,c
  3977  00111C  6EFF               	movwf	tosu,c
  3978  00111E  50FA               	movf	pclath,w,c
  3979  001120  0012               	return		;indir
  3980  001122                     l6274:
  3981  001122  0100               	movlb	0	; () banked
  3982  001124  2BE1               	incf	RTOS_DispatchTask@i& (0+255),f,b
  3983  001126                     l6276:
  3984                           
  3985                           ; BSR set to: 0
  3986  001126  5068               	movf	_arrayTail,w,c	;volatile
  3987  001128  5DE1               	subwf	RTOS_DispatchTask@i& (0+255),w,b
  3988  00112A  E3B6               	bnc	l6262
  3989                           
  3990                           ; BSR set to: 0
  3991  00112C  0012               	return		;funcret
  3992  00112E                     __end_of_RTOS_DispatchTask:
  3993                           	opt stack 0
  3994  00112E                     PL16:
  3995                           	opt stack 27
  3996  00112E  0D08               	mullw	8
  3997  001130  0E02               	movlw	low (_TaskArray+2)
  3998  001132  24F3               	addwf	prodl,w,c
  3999  001134  6ED9               	movwf	fsr2l,c
  4000  001136  0E01               	movlw	high (_TaskArray+2)
  4001  001138  20F4               	addwfc	prodh,w,c
  4002  00113A  6EDA               	movwf	fsr2h,c
  4003  00113C  0012               	return	
  4004  00113E                     __end_ofPL16:
  4005                           	opt stack 0
  4006  00113E                     PL30:
  4007                           	opt stack 22
  4008  00113E  0E06               	movlw	low (_TaskArray+6)
  4009  001140  24F3               	addwf	prodl,w,c
  4010  001142  6ED9               	movwf	fsr2l,c
  4011  001144  0E01               	movlw	high (_TaskArray+6)
  4012  001146  20F4               	addwfc	prodh,w,c
  4013  001148  6EDA               	movwf	fsr2h,c
  4014  00114A  0012               	return	
  4015  00114C                     __end_ofPL30:
  4016                           	opt stack 0
  4017                           tosu	equ	0xFFF
  4018                           tosh	equ	0xFFE
  4019                           tosl	equ	0xFFD
  4020                           pclath	equ	0xFFA
  4021                           tblptru	equ	0xFF8
  4022                           tblptrh	equ	0xFF7
  4023                           tblptrl	equ	0xFF6
  4024                           tablat	equ	0xFF5
  4025                           prodh	equ	0xFF4
  4026                           prodl	equ	0xFF3
  4027                           intcon	equ	0xFF2
  4028                           intcon2	equ	0xFF1
  4029                           postinc0	equ	0xFEE
  4030                           wreg	equ	0xFE8
  4031                           indf1	equ	0xFE7
  4032                           plusw1	equ	0xFE3
  4033                           fsr1h	equ	0xFE2
  4034                           fsr1l	equ	0xFE1
  4035                           indf2	equ	0xFDF
  4036                           postinc2	equ	0xFDE
  4037                           postdec2	equ	0xFDD
  4038                           plusw2	equ	0xFDB
  4039                           fsr2h	equ	0xFDA
  4040                           fsr2l	equ	0xFD9
  4041                           status	equ	0xFD8
  4042                           
  4043 ;; *************** function _home_temp *****************
  4044 ;; Defined at:
  4045 ;;		line 424 in file "common.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 3F/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;Total ram usage:        1 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    7
  4066 ;; This function calls:
  4067 ;;		_RTOS_DeleteTask
  4068 ;;		_RTOS_SetTask
  4069 ;;		___lbdiv
  4070 ;;		___lbmod
  4071 ;;		___lwdiv
  4072 ;;		___lwmod
  4073 ;;		_clear_matrix
  4074 ;;		_getTime
  4075 ;;		_pic_to_led
  4076 ;;		_putchar_down
  4077 ;;		_putchar_down_s
  4078 ;;		_scroll_left
  4079 ;; This function is called by:
  4080 ;;		_time_led
  4081 ;;		_RTOS_DispatchTask
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text14
  4086  000684                     __ptext14:
  4087                           	opt stack 0
  4088  000684                     _home_temp:
  4089                           	opt stack 22
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;common.c: 426: switch (events)
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;incstack = 0
  4096  000684  D0A3               	goto	l6160
  4097  000686                     l6114:
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;common.c: 431: clear_matrix();
  4101  000686  ECAB  F011         	call	_clear_matrix	;wreg free
  4102                           
  4103                           ;common.c: 432: if (!((temperature/10) % 10))
  4104  00068A  D8A8               	call	PL62	;call to abstracted procedure
  4105  00068C  ECB7  F00E         	call	___lwdiv	;wreg free
  4106  000690  D8B5               	call	PL68	;call to abstracted procedure
  4107  000692  EC21  F00F         	call	___lwmod	;wreg free
  4108  000696  5016               	movf	?___lwmod,w,c
  4109  000698  1017               	iorwf	?___lwmod+1,w,c
  4110  00069A  E10F               	bnz	l6124
  4111                           
  4112                           ;common.c: 433: {
  4113                           ;common.c: 434: pic_to_led(3,1);
  4114  00069C  D8BE               	call	PL164	;call to abstracted procedure
  4115  00069E  EC7C  F00D         	call	_pic_to_led
  4116                           
  4117                           ;common.c: 436: putchar_down(13,temperature % 10 + 48);
  4118  0006A2  D8A4               	call	PL66	;call to abstracted procedure
  4119  0006A4  EC21  F00F         	call	___lwmod	;wreg free
  4120  0006A8  D8B1               	call	PL122	;call to abstracted procedure
  4121  0006AA  EC46  F00B         	call	_putchar_down
  4122                           
  4123                           ;common.c: 437: putchar_down(19,176);
  4124  0006AE  0EB0               	movlw	176
  4125  0006B0  6E1B               	movwf	putchar_down@symbol,c
  4126  0006B2  0E13               	movlw	19
  4127  0006B4  EC46  F00B         	call	_putchar_down
  4128                           
  4129                           ;common.c: 438: }else
  4130  0006B8  D018               	goto	l6132
  4131  0006BA                     l6124:
  4132                           
  4133                           ;common.c: 439: {
  4134                           ;common.c: 440: pic_to_led(3,1);
  4135  0006BA  D8AF               	call	PL164	;call to abstracted procedure
  4136  0006BC  EC7C  F00D         	call	_pic_to_led
  4137                           
  4138                           ;common.c: 441: putchar_down(13,(temperature/10) % 10 + 48);
  4139  0006C0  D88D               	call	PL62	;call to abstracted procedure
  4140  0006C2  ECB7  F00E         	call	___lwdiv	;wreg free
  4141  0006C6  D89A               	call	PL68	;call to abstracted procedure
  4142  0006C8  EC21  F00F         	call	___lwmod	;wreg free
  4143  0006CC  D89F               	call	PL122	;call to abstracted procedure
  4144  0006CE  EC46  F00B         	call	_putchar_down
  4145                           
  4146                           ;common.c: 442: putchar_down(19,temperature % 10 + 48);
  4147  0006D2  D88C               	call	PL66	;call to abstracted procedure
  4148  0006D4  EC21  F00F         	call	___lwmod	;wreg free
  4149  0006D8  5016               	movf	?___lwmod,w,c
  4150  0006DA  D89C               	call	PL160	;call to abstracted procedure
  4151  0006DC  EC46  F00B         	call	_putchar_down
  4152                           
  4153                           ;common.c: 443: putchar_down(25,176);
  4154  0006E0  0EB0               	movlw	176
  4155  0006E2  6E1B               	movwf	putchar_down@symbol,c
  4156  0006E4  0E19               	movlw	25
  4157  0006E6  EC46  F00B         	call	_putchar_down
  4158  0006EA                     l6132:
  4159                           
  4160                           ;common.c: 445: }
  4161                           ;common.c: 446: events = 6;
  4162  0006EA  0E06               	movlw	6
  4163  0006EC  6E6E               	movwf	_events,c
  4164                           
  4165                           ;common.c: 447: RTOS_SetTask(default_state, 750, 0);
  4166  0006EE  0EDA               	movlw	low _default_state
  4167  0006F0  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  4168  0006F2  0E23               	movlw	high _default_state
  4169  0006F4  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  4170  0006F6  0E02               	movlw	2
  4171  0006F8  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  4172  0006FA  0EEE               	movlw	238
  4173  0006FC  6E11               	movwf	RTOS_SetTask@taskDelay,c
  4174  0006FE  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  4175  000700  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  4176  000702  EF18  F00C         	goto	_RTOS_SetTask	;wreg free
  4177  000706                     l6136:
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;common.c: 455: events = 5;
  4181  000706  0E05               	movlw	5
  4182  000708  6E6E               	movwf	_events,c
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;common.c: 456: scroll_left();
  4186  00070A  EC14  F00E         	call	_scroll_left	;wreg free
  4187                           
  4188                           ;common.c: 457: if((TTime.Thr/10) % 10)
  4189  00070E  EC00  F006         	call	PL46	;call to abstracted procedure
  4190  000712  51CD               	movf	(_TTime+2)& (0+255),w,b
  4191  000714  ECEC  F00F         	call	___lbdiv
  4192  000718  ECD6  F010         	call	___lbmod
  4193  00071C  0900               	iorlw	0
  4194  00071E  E00D               	bz	l6144
  4195                           
  4196                           ;common.c: 458: putchar_down(0, (TTime.Thr/10) % 10 + 48);
  4197  000720  EC00  F006         	call	PL46	;call to abstracted procedure
  4198  000724  51CD               	movf	(_TTime+2)& (0+255),w,b
  4199  000726  ECEC  F00F         	call	___lbdiv
  4200  00072A  ECD6  F010         	call	___lbmod
  4201  00072E  0F30               	addlw	48
  4202  000730  6E1B               	movwf	putchar_down@symbol,c
  4203  000732  0E00               	movlw	0
  4204  000734  EC46  F00B         	call	_putchar_down
  4205  000738  D004               	goto	l744
  4206  00073A                     l6144:
  4207                           
  4208                           ;common.c: 459: else putchar_down(0, 0);
  4209  00073A  0E00               	movlw	0
  4210  00073C  6A1B               	clrf	putchar_down@symbol,c
  4211  00073E  EC46  F00B         	call	_putchar_down
  4212  000742                     l744:
  4213                           
  4214                           ;common.c: 460: putchar_down(6, TTime.Thr % 10 + 48);
  4215  000742  EC0A  F006         	call	PL130	;call to abstracted procedure
  4216  000746  ECD6  F010         	call	___lbmod
  4217  00074A  0F30               	addlw	48
  4218  00074C  6E1B               	movwf	putchar_down@symbol,c
  4219  00074E  0E06               	movlw	6
  4220  000750  EC46  F00B         	call	_putchar_down
  4221                           
  4222                           ;common.c: 461: putchar_down(13, (TTime.Tmin/10) % 10 + 48);
  4223  000754  EC00  F006         	call	PL46	;call to abstracted procedure
  4224  000758  51CC               	movf	(_TTime+1)& (0+255),w,b
  4225  00075A  ECEC  F00F         	call	___lbdiv
  4226  00075E  ECD6  F010         	call	___lbmod
  4227  000762  0F30               	addlw	48
  4228  000764  6E1B               	movwf	putchar_down@symbol,c
  4229  000766  0E0D               	movlw	13
  4230  000768  EC46  F00B         	call	_putchar_down
  4231                           
  4232                           ;common.c: 462: putchar_down(19, TTime.Tmin % 10 + 48);
  4233  00076C  EC0F  F006         	call	PL136	;call to abstracted procedure
  4234  000770  ECD6  F010         	call	___lbmod
  4235  000774  D84F               	call	PL160	;call to abstracted procedure
  4236  000776  EC46  F00B         	call	_putchar_down
  4237                           
  4238                           ;common.c: 463: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  4239  00077A  EC94  F010         	call	PL72	;call to abstracted procedure
  4240  00077E  ECE4  F00D         	call	_getTime	;wreg free
  4241                           
  4242                           ;common.c: 464: putchar_down_s(25, (TTime.Ts/10) % 10 + 1);
  4243  000782  EC00  F006         	call	PL46	;call to abstracted procedure
  4244  000786  51CB               	movf	_TTime& (0+255),w,b
  4245  000788  ECEC  F00F         	call	___lbdiv
  4246  00078C  ECD6  F010         	call	___lbmod
  4247  000790  6E25               	movwf	??_home_temp& (0+255),c
  4248  000792  2825               	incf	??_home_temp,w,c
  4249  000794  6E17               	movwf	putchar_down_s@symbol,c
  4250  000796  0E19               	movlw	25
  4251  000798  ECFC  F00A         	call	_putchar_down_s
  4252                           
  4253                           ;common.c: 465: putchar_down_s(29, TTime.Ts % 10 + 1);
  4254  00079C  EC14  F006         	call	PL138	;call to abstracted procedure
  4255  0007A0  ECD6  F010         	call	___lbmod
  4256  0007A4  6E25               	movwf	??_home_temp& (0+255),c
  4257  0007A6  2825               	incf	??_home_temp,w,c
  4258  0007A8  6E17               	movwf	putchar_down_s@symbol,c
  4259  0007AA  0E1D               	movlw	29
  4260  0007AC  ECFC  F00A         	call	_putchar_down_s
  4261                           
  4262                           ;common.c: 466: RTOS_DeleteTask(default_state);
  4263  0007B0  ECBE  F004         	call	PL42	;call to abstracted procedure
  4264  0007B4  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  4265                           
  4266                           ;common.c: 467: RTOS_DeleteTask(home_temp);
  4267  0007B8  0E84               	movlw	low _home_temp
  4268  0007BA  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  4269  0007BC  0E06               	movlw	high _home_temp
  4270  0007BE  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4271  0007C0  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  4272                           
  4273                           ;common.c: 468: RTOS_SetTask(time_led,0,20);
  4274  0007C4  ECB4  F004         	call	PL10	;call to abstracted procedure
  4275  0007C8  EF18  F00C         	goto	_RTOS_SetTask	;wreg free
  4276  0007CC                     l6160:
  4277                           
  4278                           ; BSR set to: 0
  4279  0007CC  506E               	movf	_events,w,c
  4280                           
  4281                           ; Switch size 1, requested type "space"
  4282                           ; Number of cases is 3, Range of values is 4 to 6
  4283                           ; switch strategies available:
  4284                           ; Name         Instructions Cycles
  4285                           ; simple_byte           10     6 (average)
  4286                           ;	Chosen strategy is simple_byte
  4287  0007CE  0A04               	xorlw	4	; case 4
  4288  0007D0  E09A               	bz	l6136
  4289  0007D2  0A01               	xorlw	1	; case 5
  4290  0007D4  E101 D757          	bz	l6114
  4291  0007D8  0A03               	xorlw	3	; case 6
  4292  0007DA  0012               	return	
  4293  0007DC                     __end_of_home_temp:
  4294                           	opt stack 0
  4295  0007DC                     PL62:
  4296                           	opt stack 22
  4297  0007DC  6A12               	clrf	___lwdiv@divisor+1,c
  4298  0007DE  0E0A               	movlw	10
  4299  0007E0  6E11               	movwf	___lwdiv@divisor,c
  4300  0007E2  C069  F00F         	movff	_temperature,___lwdiv@dividend
  4301  0007E6  C06A  F010         	movff	_temperature+1,___lwdiv@dividend+1
  4302  0007EA  0C0A               	retlw	10
  4303  0007EC                     __end_ofPL62:
  4304                           	opt stack 0
  4305  0007EC                     PL66:
  4306                           	opt stack 22
  4307  0007EC  C069  F016         	movff	_temperature,___lwmod@dividend
  4308  0007F0  C06A  F017         	movff	_temperature+1,___lwmod@dividend+1
  4309  0007F4  6A19               	clrf	___lwmod@divisor+1,c
  4310  0007F6  0E0A               	movlw	10
  4311  0007F8  6E18               	movwf	___lwmod@divisor,c
  4312  0007FA  0C0A               	retlw	10
  4313  0007FC                     __end_ofPL66:
  4314                           	opt stack 0
  4315  0007FC                     PL68:
  4316                           	opt stack 22
  4317  0007FC  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  4318  000800  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  4319  000804  6A19               	clrf	___lwmod@divisor+1,c
  4320  000806  0E0A               	movlw	10
  4321  000808  6E18               	movwf	___lwmod@divisor,c
  4322  00080A  0C0A               	retlw	10
  4323  00080C                     __end_ofPL68:
  4324                           	opt stack 0
  4325  00080C                     PL122:
  4326                           	opt stack 22
  4327  00080C  5016               	movf	?___lwmod,w,c
  4328  00080E  0F30               	addlw	48
  4329  000810  6E1B               	movwf	putchar_down@symbol,c
  4330  000812  0C0D               	retlw	13
  4331  000814                     __end_ofPL122:
  4332                           	opt stack 0
  4333  000814                     PL160:
  4334                           	opt stack 22
  4335  000814  0F30               	addlw	48
  4336  000816  6E1B               	movwf	putchar_down@symbol,c
  4337  000818  0C13               	retlw	19
  4338  00081A                     __end_ofPL160:
  4339                           	opt stack 0
  4340  00081A                     PL164:
  4341                           	opt stack 22
  4342  00081A  0E01               	movlw	1
  4343  00081C  6E14               	movwf	pic_to_led@pic,c
  4344  00081E  0C03               	retlw	3
  4345  000820                     __end_ofPL164:
  4346                           	opt stack 0
  4347                           tosu	equ	0xFFF
  4348                           tosh	equ	0xFFE
  4349                           tosl	equ	0xFFD
  4350                           pclath	equ	0xFFA
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           intcon	equ	0xFF2
  4358                           intcon2	equ	0xFF1
  4359                           postinc0	equ	0xFEE
  4360                           wreg	equ	0xFE8
  4361                           indf1	equ	0xFE7
  4362                           plusw1	equ	0xFE3
  4363                           fsr1h	equ	0xFE2
  4364                           fsr1l	equ	0xFE1
  4365                           indf2	equ	0xFDF
  4366                           postinc2	equ	0xFDE
  4367                           postdec2	equ	0xFDD
  4368                           plusw2	equ	0xFDB
  4369                           fsr2h	equ	0xFDA
  4370                           fsr2l	equ	0xFD9
  4371                           status	equ	0xFD8
  4372                           
  4373 ;; *************** function _time_set_min *****************
  4374 ;; Defined at:
  4375 ;;		line 24 in file "common.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;		None
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;		None
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      void 
  4382 ;; Registers used:
  4383 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4384 ;; Tracked objects:
  4385 ;;		On entry : 3F/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;Total ram usage:        0 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    7
  4396 ;; This function calls:
  4397 ;;		_RTOS_DeleteTask
  4398 ;;		_RTOS_SetTask
  4399 ;;		_Update_Matrix
  4400 ;;		___lbdiv
  4401 ;;		___lbmod
  4402 ;;		_putchar_b_buf
  4403 ;;		_setTime
  4404 ;; This function is called by:
  4405 ;;		_time_led
  4406 ;;		_RTOS_DispatchTask
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           	psect	text15
  4411  00114C                     __ptext15:
  4412                           	opt stack 0
  4413  00114C                     _time_set_min:
  4414                           	opt stack 22
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;common.c: 26: show_digit = ~show_digit;
  4418                           
  4419                           ;incstack = 0
  4420  00114C  B26D               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  4421  00114E  D002               	goto	u4520
  4422  001150  826D               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  4423  001152  D03B               	goto	l5784
  4424  001154                     u4520:
  4425  001154  926D               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  4426                           
  4427                           ;common.c: 27: switch (events)
  4428  001156  D039               	goto	l5784
  4429  001158                     l5744:
  4430                           
  4431                           ;common.c: 34: RTOS_DeleteTask(time_set_min);
  4432  001158  D865               	call	PL120	;call to abstracted procedure
  4433  00115A  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  4434                           
  4435                           ;common.c: 35: RTOS_SetTask(time_set_hr, 0, 50);
  4436  00115E  0E9C               	movlw	low _time_set_hr
  4437  001160  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  4438  001162  0E09               	movlw	high _time_set_hr
  4439  001164  EC79  F009         	call	PL12	;call to abstracted procedure
  4440  001168  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  4441                           
  4442                           ;common.c: 36: RTOS_SetTask(default_state, 2000, 0);
  4443  00116C  EC84  F006         	call	PL2	;call to abstracted procedure
  4444  001170  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  4445  001174                     l5750:
  4446                           
  4447                           ;common.c: 37: events = 5;
  4448  001174  0E05               	movlw	5
  4449  001176  6E6E               	movwf	_events,c
  4450                           
  4451                           ;common.c: 38: break;
  4452  001178  D032               	goto	l632
  4453  00117A                     l5752:
  4454                           
  4455                           ;common.c: 40: RTOS_DeleteTask(time_set_min);
  4456  00117A  D854               	call	PL120	;call to abstracted procedure
  4457  00117C  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  4458                           
  4459                           ;common.c: 41: RTOS_DeleteTask(default_state);
  4460  001180  ECBE  F004         	call	PL42	;call to abstracted procedure
  4461  001184  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  4462                           
  4463                           ;common.c: 42: RTOS_SetTask(time_led, 0, 20);
  4464  001188  ECB4  F004         	call	PL10	;call to abstracted procedure
  4465  00118C  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  4466  001190  D7F1               	goto	l5750
  4467  001192                     l5758:
  4468                           
  4469                           ;common.c: 46: TSTime.Tmin++;
  4470  001192  2A4E               	incf	_TSTime+1,f,c
  4471                           
  4472                           ;common.c: 47: if(TSTime.Tmin > 59) TSTime.Tmin = 0;
  4473  001194  0E3B               	movlw	59
  4474  001196  644E               	cpfsgt	_TSTime+1,c
  4475  001198  D001               	goto	l5764
  4476  00119A  6A4E               	clrf	_TSTime+1,c
  4477  00119C                     l5764:
  4478                           
  4479                           ;common.c: 48: RTOS_SetTask(default_state, 2000, 0);
  4480  00119C  EC84  F006         	call	PL2	;call to abstracted procedure
  4481  0011A0  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  4482                           
  4483                           ;common.c: 49: setTime(TSTime.Thr,TSTime.Tmin,0);
  4484  0011A4  EC60  F005         	call	PL60	;call to abstracted procedure
  4485  0011A8  EC1E  F010         	call	_setTime
  4486  0011AC  D7E3               	goto	l5750
  4487  0011AE                     l5770:
  4488                           
  4489                           ;common.c: 53: TSTime.Tmin--;
  4490  0011AE  064E               	decf	_TSTime+1,f,c
  4491                           
  4492                           ;common.c: 54: if(TSTime.Tmin == 255) TSTime.Tmin = 59;
  4493  0011B0  284E               	incf	_TSTime+1,w,c
  4494  0011B2  E102               	bnz	l5776
  4495  0011B4  0E3B               	movlw	59
  4496  0011B6  6E4E               	movwf	_TSTime+1,c
  4497  0011B8                     l5776:
  4498                           
  4499                           ;common.c: 55: RTOS_SetTask(default_state, 2000, 0);
  4500  0011B8  EC84  F006         	call	PL2	;call to abstracted procedure
  4501  0011BC  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  4502                           
  4503                           ;common.c: 56: setTime(TSTime.Thr,TSTime.Tmin,0);
  4504  0011C0  EC60  F005         	call	PL60	;call to abstracted procedure
  4505  0011C4  EC1E  F010         	call	_setTime
  4506  0011C8  D7D5               	goto	l5750
  4507  0011CA                     l5784:
  4508  0011CA  506E               	movf	_events,w,c
  4509                           
  4510                           ; Switch size 1, requested type "space"
  4511                           ; Number of cases is 5, Range of values is 1 to 5
  4512                           ; switch strategies available:
  4513                           ; Name         Instructions Cycles
  4514                           ; simple_byte           16     9 (average)
  4515                           ;	Chosen strategy is simple_byte
  4516  0011CC  0A01               	xorlw	1	; case 1
  4517  0011CE  E0C4               	bz	l5744
  4518  0011D0  0A03               	xorlw	3	; case 2
  4519  0011D2  E0DF               	bz	l5758
  4520  0011D4  0A01               	xorlw	1	; case 3
  4521  0011D6  E0EB               	bz	l5770
  4522  0011D8  0A07               	xorlw	7	; case 4
  4523  0011DA  E0CF               	bz	l5752
  4524  0011DC  0A01               	xorlw	1	; case 5
  4525  0011DE                     l632:
  4526                           
  4527                           ;common.c: 61: if(show_digit)
  4528  0011DE  A26D               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  4529  0011E0  D013               	goto	l5788
  4530                           
  4531                           ;common.c: 62: {
  4532                           ;common.c: 63: putchar_b_buf(13,(TSTime.Tmin/10) % 10 + 48);
  4533  0011E2  EC6A  F005         	call	PL116	;call to abstracted procedure
  4534  0011E6  ECEC  F00F         	call	___lbdiv
  4535  0011EA  ECD6  F010         	call	___lbmod
  4536  0011EE  EC78  F005         	call	PL154	;call to abstracted procedure
  4537  0011F2  EC47  F00D         	call	_putchar_b_buf
  4538                           
  4539                           ;common.c: 64: putchar_b_buf(19,TSTime.Tmin % 10 + 48);
  4540  0011F6  EC74  F005         	call	PL148	;call to abstracted procedure
  4541  0011FA  ECD6  F010         	call	___lbmod
  4542  0011FE  EC7B  F005         	call	PL172	;call to abstracted procedure
  4543  001202  EC47  F00D         	call	_putchar_b_buf
  4544                           
  4545                           ;common.c: 65: }
  4546  001206  D008               	goto	l5790
  4547  001208                     l5788:
  4548                           
  4549                           ;common.c: 66: else
  4550                           ;common.c: 67: {
  4551                           ;common.c: 68: putchar_b_buf(13,0);
  4552  001208  6A17               	clrf	putchar_b_buf@symbol,c
  4553  00120A  0E0D               	movlw	13
  4554  00120C  EC47  F00D         	call	_putchar_b_buf
  4555                           
  4556                           ;common.c: 69: putchar_b_buf(19,0);
  4557  001210  6A17               	clrf	putchar_b_buf@symbol,c
  4558  001212  0E13               	movlw	19
  4559  001214  EC47  F00D         	call	_putchar_b_buf
  4560  001218                     l5790:
  4561                           
  4562                           ;common.c: 70: }
  4563                           ;common.c: 71: Update_Matrix(Dis_Buff);
  4564  001218  0EAB               	movlw	low _Dis_Buff
  4565  00121A  6E11               	movwf	Update_Matrix@buf,c
  4566  00121C  EC5E  F00F         	call	_Update_Matrix	;wreg free
  4567                           
  4568                           ;common.c: 72: en_put = 1;
  4569  001220  806D               	bsf	_en_put/(0+8),_en_put& (0+7),c
  4570  001222  0012               	return		;funcret
  4571  001224                     __end_of_time_set_min:
  4572                           	opt stack 0
  4573  001224                     PL120:
  4574                           	opt stack 22
  4575  001224  0E4C               	movlw	low _time_set_min
  4576  001226  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  4577  001228  0E11               	movlw	high _time_set_min
  4578  00122A  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4579  00122C  0012               	return	
  4580  00122E                     __end_ofPL120:
  4581                           	opt stack 0
  4582                           tosu	equ	0xFFF
  4583                           tosh	equ	0xFFE
  4584                           tosl	equ	0xFFD
  4585                           pclath	equ	0xFFA
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           intcon2	equ	0xFF1
  4594                           postinc0	equ	0xFEE
  4595                           wreg	equ	0xFE8
  4596                           indf1	equ	0xFE7
  4597                           plusw1	equ	0xFE3
  4598                           fsr1h	equ	0xFE2
  4599                           fsr1l	equ	0xFE1
  4600                           indf2	equ	0xFDF
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           plusw2	equ	0xFDB
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function _GetTime *****************
  4609 ;; Defined at:
  4610 ;;		line 15 in file "common.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 3F/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:        0 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    7
  4631 ;; This function calls:
  4632 ;;		_getDate
  4633 ;;		_getTime
  4634 ;; This function is called by:
  4635 ;;		_INT0_ISR
  4636 ;;		_RTOS_DispatchTask
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text16
  4641  00210E                     __ptext16:
  4642                           	opt stack 0
  4643  00210E                     _GetTime:
  4644                           	opt stack 0
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;common.c: 17: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  4648                           
  4649                           ;incstack = 0
  4650  00210E  D80C               	call	PL72	;call to abstracted procedure
  4651  002110  ECE4  F00D         	call	_getTime	;wreg free
  4652                           
  4653                           ;common.c: 18: getDate(&TTime.Tdy,&TTime.Tdt,&TTime.Tmt,&TTime.Tyr);
  4654  002114  0ECE               	movlw	low (_TTime+3)
  4655  002116  6E14               	movwf	getDate@p4,c
  4656  002118  0ECF               	movlw	low (_TTime+4)
  4657  00211A  6E15               	movwf	getDate@p3,c
  4658  00211C  0ED0               	movlw	low (_TTime+5)
  4659  00211E  6E16               	movwf	getDate@p2,c
  4660  002120  0ED1               	movlw	low (_TTime+6)
  4661  002122  6E17               	movwf	getDate@p1,c
  4662  002124  EF5B  F00C         	goto	_getDate	;wreg free
  4663  002128                     __end_of_GetTime:
  4664                           	opt stack 0
  4665  002128                     PL72:
  4666                           	opt stack 22
  4667  002128  0ECD               	movlw	low (_TTime+2)
  4668  00212A  6E14               	movwf	getTime@p3,c
  4669  00212C  0ECC               	movlw	low (_TTime+1)
  4670  00212E  6E15               	movwf	getTime@p2,c
  4671  002130  0ECB               	movlw	low _TTime
  4672  002132  6E16               	movwf	getTime@p1,c
  4673  002134  0012               	return	
  4674  002136                     __end_ofPL72:
  4675                           	opt stack 0
  4676                           tosu	equ	0xFFF
  4677                           tosh	equ	0xFFE
  4678                           tosl	equ	0xFFD
  4679                           pclath	equ	0xFFA
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           intcon2	equ	0xFF1
  4688                           postinc0	equ	0xFEE
  4689                           wreg	equ	0xFE8
  4690                           indf1	equ	0xFE7
  4691                           plusw1	equ	0xFE3
  4692                           fsr1h	equ	0xFE2
  4693                           fsr1l	equ	0xFE1
  4694                           indf2	equ	0xFDF
  4695                           postinc2	equ	0xFDE
  4696                           postdec2	equ	0xFDD
  4697                           plusw2	equ	0xFDB
  4698                           fsr2h	equ	0xFDA
  4699                           fsr2l	equ	0xFD9
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _time_set_dy *****************
  4703 ;; Defined at:
  4704 ;;		line 344 in file "common.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;		None
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      void 
  4711 ;; Registers used:
  4712 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4713 ;; Tracked objects:
  4714 ;;		On entry : 3F/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;Total ram usage:        0 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    7
  4725 ;; This function calls:
  4726 ;;		_RTOS_DeleteTask
  4727 ;;		_RTOS_SetTask
  4728 ;;		_Update_Matrix
  4729 ;;		_putchar_b_buf
  4730 ;;		_setDate
  4731 ;; This function is called by:
  4732 ;;		_time_set_dt
  4733 ;;		_RTOS_DispatchTask
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text17
  4738  000820                     __ptext17:
  4739                           	opt stack 0
  4740  000820                     _time_set_dy:
  4741                           	opt stack 22
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;common.c: 346: switch (events)
  4745                           
  4746                           ;incstack = 0
  4747  000820  D035               	goto	l6086
  4748  000822                     l6044:
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;common.c: 352: RTOS_DeleteTask(time_set_dy);
  4752  000822  D8B4               	call	PL112	;call to abstracted procedure
  4753  000824  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  4754                           
  4755                           ;common.c: 353: RTOS_SetTask(time_led, 0, 20);
  4756  000828  D89F               	call	PL10	;call to abstracted procedure
  4757  00082A  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  4758                           
  4759                           ;common.c: 354: RTOS_DeleteTask(default_state);
  4760  00082E  D8A6               	call	PL42	;call to abstracted procedure
  4761  000830  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  4762                           
  4763                           ;common.c: 355: events = 5;
  4764                           
  4765                           ;common.c: 356: en_put=1;
  4766  000834  ECA1  F006         	call	PL142	;call to abstracted procedure
  4767                           
  4768                           ;common.c: 357: break;
  4769  000838  D033               	goto	l716
  4770  00083A                     l6054:
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;common.c: 359: RTOS_DeleteTask(time_set_dy);
  4774  00083A  D8A8               	call	PL112	;call to abstracted procedure
  4775  00083C  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  4776                           
  4777                           ;common.c: 360: RTOS_DeleteTask(default_state);
  4778  000840  D89D               	call	PL42	;call to abstracted procedure
  4779  000842  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  4780                           
  4781                           ;common.c: 361: RTOS_SetTask(time_led, 0, 20);
  4782  000846  D890               	call	PL10	;call to abstracted procedure
  4783  000848  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  4784                           
  4785                           ;common.c: 362: events = 5;
  4786  00084C  0E05               	movlw	5
  4787  00084E  6E6E               	movwf	_events,c
  4788                           
  4789                           ;common.c: 363: break;
  4790  000850  D027               	goto	l716
  4791  000852                     l6060:
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;common.c: 365: TSTime.Tdy++;
  4795  000852  2A50               	incf	_TSTime+3,f,c
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;common.c: 366: if(TSTime.Tdy > 7) TSTime.Tdy = 1;
  4799  000854  0E07               	movlw	7
  4800  000856  6450               	cpfsgt	_TSTime+3,c
  4801  000858  D002               	goto	l6066
  4802                           
  4803                           ; BSR set to: 0
  4804  00085A  0E01               	movlw	1
  4805  00085C  6E50               	movwf	_TSTime+3,c
  4806  00085E                     l6066:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;common.c: 367: RTOS_SetTask(default_state, 2000, 0);
  4810  00085E  EC84  F006         	call	PL2	;call to abstracted procedure
  4811  000862  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  4812                           
  4813                           ;common.c: 368: events = 5;
  4814                           
  4815                           ;common.c: 369: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4816  000866  EC8F  F006         	call	PL8	;call to abstracted procedure
  4817  00086A  EC7C  F00F         	call	_setDate
  4818                           
  4819                           ;common.c: 370: break;
  4820  00086E  D018               	goto	l716
  4821  000870                     l6072:
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;common.c: 372: TSTime.Tdy--;
  4825  000870  0650               	decf	_TSTime+3,f,c
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;common.c: 373: if(TSTime.Tdy == 0) TSTime.Tdy = 7;
  4829  000872  5050               	movf	_TSTime+3,w,c
  4830  000874  E102               	bnz	l6078
  4831                           
  4832                           ; BSR set to: 0
  4833  000876  0E07               	movlw	7
  4834  000878  6E50               	movwf	_TSTime+3,c
  4835  00087A                     l6078:
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;common.c: 374: RTOS_SetTask(default_state, 2000, 0);
  4839  00087A  EC84  F006         	call	PL2	;call to abstracted procedure
  4840  00087E  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  4841                           
  4842                           ;common.c: 375: events = 5;
  4843                           
  4844                           ;common.c: 376: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4845  000882  EC8F  F006         	call	PL8	;call to abstracted procedure
  4846  000886  EC7C  F00F         	call	_setDate
  4847                           
  4848                           ;common.c: 377: break;
  4849  00088A  D00A               	goto	l716
  4850  00088C                     l6086:
  4851                           
  4852                           ; BSR set to: 0
  4853  00088C  506E               	movf	_events,w,c
  4854                           
  4855                           ; Switch size 1, requested type "space"
  4856                           ; Number of cases is 5, Range of values is 1 to 5
  4857                           ; switch strategies available:
  4858                           ; Name         Instructions Cycles
  4859                           ; simple_byte           16     9 (average)
  4860                           ;	Chosen strategy is simple_byte
  4861  00088E  0A01               	xorlw	1	; case 1
  4862  000890  E0C8               	bz	l6044
  4863  000892  0A03               	xorlw	3	; case 2
  4864  000894  E0DE               	bz	l6060
  4865  000896  0A01               	xorlw	1	; case 3
  4866  000898  E0EB               	bz	l6072
  4867  00089A  0A07               	xorlw	7	; case 4
  4868  00089C  E0CE               	bz	l6054
  4869  00089E  0A01               	xorlw	1	; case 5
  4870  0008A0                     l716:
  4871                           
  4872                           ;common.c: 379: if(en_put)
  4873  0008A0  A06D               	btfss	_en_put/(0+8),_en_put& (0+7),c
  4874  0008A2  D05C               	goto	l6108
  4875                           
  4876                           ;common.c: 380: {
  4877                           ;common.c: 381: putchar_b_buf(0,'Ä');
  4878  0008A4  0EC4               	movlw	196
  4879  0008A6  6E17               	movwf	putchar_b_buf@symbol,c
  4880  0008A8  0E00               	movlw	0
  4881  0008AA  EC47  F00D         	call	_putchar_b_buf
  4882                           
  4883                           ;common.c: 382: putchar_b_buf(6,'í');
  4884  0008AE  0EED               	movlw	237
  4885  0008B0  6E17               	movwf	putchar_b_buf@symbol,c
  4886  0008B2  0E06               	movlw	6
  4887  0008B4  EC47  F00D         	call	_putchar_b_buf
  4888                           
  4889                           ;common.c: 383: putchar_b_buf(12,':');
  4890  0008B8  EC9E  F006         	call	PL110	;call to abstracted procedure
  4891  0008BC  EC47  F00D         	call	_putchar_b_buf
  4892                           
  4893                           ;common.c: 384: switch(TSTime.Tdy)
  4894  0008C0  D03E               	goto	l6106
  4895  0008C2                     l6090:
  4896                           
  4897                           ;common.c: 387: putchar_b_buf(18,'Ï');
  4898  0008C2  D869               	call	PL156	;call to abstracted procedure
  4899  0008C4  EC47  F00D         	call	_putchar_b_buf
  4900                           
  4901                           ;common.c: 388: putchar_b_buf(24,'í');
  4902  0008C8  0EED               	movlw	237
  4903  0008CA  6E17               	movwf	putchar_b_buf@symbol,c
  4904  0008CC  0E18               	movlw	24
  4905  0008CE  EC47  F00D         	call	_putchar_b_buf
  4906                           
  4907                           ;common.c: 389: break;
  4908  0008D2  D044               	goto	l6108
  4909  0008D4                     l6092:
  4910                           
  4911                           ;common.c: 391: putchar_b_buf(18,'Â');
  4912  0008D4  EC3C  F003         	call	PL166	;call to abstracted procedure
  4913  0008D8  EC47  F00D         	call	_putchar_b_buf
  4914                           
  4915                           ;common.c: 392: putchar_b_buf(24,'ò');
  4916  0008DC  D854               	call	PL80	;call to abstracted procedure
  4917  0008DE  EC47  F00D         	call	_putchar_b_buf
  4918                           
  4919                           ;common.c: 393: break;
  4920  0008E2  D03C               	goto	l6108
  4921  0008E4                     l6094:
  4922                           
  4923                           ;common.c: 395: putchar_b_buf(18,'Ñ');
  4924  0008E4  EC2B  F003         	call	PL92	;call to abstracted procedure
  4925  0008E8  EC47  F00D         	call	_putchar_b_buf
  4926                           
  4927                           ;common.c: 396: putchar_b_buf(24,'ð');
  4928  0008EC  EC28  F003         	call	PL78	;call to abstracted procedure
  4929  0008F0  EC47  F00D         	call	_putchar_b_buf
  4930                           
  4931                           ;common.c: 397: break;
  4932  0008F4  D033               	goto	l6108
  4933  0008F6                     l6096:
  4934                           
  4935                           ;common.c: 399: putchar_b_buf(18,'×');
  4936  0008F6  EC3F  F003         	call	PL168	;call to abstracted procedure
  4937  0008FA  EC47  F00D         	call	_putchar_b_buf
  4938                           
  4939                           ;common.c: 400: putchar_b_buf(24,'ò');
  4940  0008FE  D843               	call	PL80	;call to abstracted procedure
  4941  000900  EC47  F00D         	call	_putchar_b_buf
  4942                           
  4943                           ;common.c: 401: break;
  4944  000904  D02B               	goto	l6108
  4945  000906                     l6098:
  4946                           
  4947                           ;common.c: 403: putchar_b_buf(18,'Ï');
  4948  000906  D847               	call	PL156	;call to abstracted procedure
  4949  000908  EC47  F00D         	call	_putchar_b_buf
  4950                           
  4951                           ;common.c: 404: putchar_b_buf(24,'ò');
  4952  00090C  D83C               	call	PL80	;call to abstracted procedure
  4953  00090E  EC47  F00D         	call	_putchar_b_buf
  4954                           
  4955                           ;common.c: 405: break;
  4956  000912  D024               	goto	l6108
  4957  000914                     l6100:
  4958                           
  4959                           ;common.c: 407: putchar_b_buf(18,'Ñ');
  4960  000914  EC2B  F003         	call	PL92	;call to abstracted procedure
  4961  000918  EC47  F00D         	call	_putchar_b_buf
  4962                           
  4963                           ;common.c: 408: putchar_b_buf(24,'á');
  4964  00091C  0EE1               	movlw	225
  4965  00091E  6E17               	movwf	putchar_b_buf@symbol,c
  4966  000920  0E18               	movlw	24
  4967  000922  EC47  F00D         	call	_putchar_b_buf
  4968                           
  4969                           ;common.c: 409: break;
  4970  000926  D01A               	goto	l6108
  4971  000928                     l6102:
  4972                           
  4973                           ;common.c: 411: putchar_b_buf(18,'Í');
  4974  000928  0ECD               	movlw	205
  4975  00092A  6E17               	movwf	putchar_b_buf@symbol,c
  4976  00092C  0E12               	movlw	18
  4977  00092E  EC47  F00D         	call	_putchar_b_buf
  4978                           
  4979                           ;common.c: 412: putchar_b_buf(24,'ä');
  4980  000932  0EE4               	movlw	228
  4981  000934  6E17               	movwf	putchar_b_buf@symbol,c
  4982  000936  0E18               	movlw	24
  4983  000938  EC47  F00D         	call	_putchar_b_buf
  4984                           
  4985                           ;common.c: 413: break;
  4986  00093C  D00F               	goto	l6108
  4987  00093E                     l6106:
  4988  00093E  5050               	movf	_TSTime+3,w,c
  4989                           
  4990                           ; Switch size 1, requested type "space"
  4991                           ; Number of cases is 7, Range of values is 1 to 7
  4992                           ; switch strategies available:
  4993                           ; Name         Instructions Cycles
  4994                           ; simple_byte           22    12 (average)
  4995                           ;	Chosen strategy is simple_byte
  4996  000940  0A01               	xorlw	1	; case 1
  4997  000942  E0F2               	bz	l6102
  4998  000944  0A03               	xorlw	3	; case 2
  4999  000946  E0BD               	bz	l6090
  5000  000948  0A01               	xorlw	1	; case 3
  5001  00094A  E0C4               	bz	l6092
  5002  00094C  0A07               	xorlw	7	; case 4
  5003  00094E  E0CA               	bz	l6094
  5004  000950  0A01               	xorlw	1	; case 5
  5005  000952  E0D1               	bz	l6096
  5006  000954  0A03               	xorlw	3	; case 6
  5007  000956  E0D7               	bz	l6098
  5008  000958  0A01               	xorlw	1	; case 7
  5009  00095A  E0DC               	bz	l6100
  5010  00095C                     l6108:
  5011                           
  5012                           ;common.c: 415: }
  5013                           ;common.c: 416: Update_Matrix(Dis_Buff);
  5014  00095C  0EAB               	movlw	low _Dis_Buff
  5015  00095E  6E11               	movwf	Update_Matrix@buf,c
  5016  000960  EC5E  F00F         	call	_Update_Matrix	;wreg free
  5017                           
  5018                           ;common.c: 417: en_put=1;
  5019  000964  806D               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5020  000966  0012               	return		;funcret
  5021  000968                     __end_of_time_set_dy:
  5022                           	opt stack 0
  5023  000968                     PL10:
  5024                           	opt stack 22
  5025  000968  0E2E               	movlw	low _time_led
  5026  00096A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5027  00096C  0E12               	movlw	high _time_led
  5028  00096E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5029  000970  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  5030  000972  6A11               	clrf	RTOS_SetTask@taskDelay,c
  5031  000974  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5032  000976  0E14               	movlw	20
  5033  000978  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  5034  00097A  0C14               	retlw	20
  5035  00097C                     __end_ofPL10:
  5036                           	opt stack 0
  5037  00097C                     PL42:
  5038                           	opt stack 22
  5039  00097C  0EDA               	movlw	low _default_state
  5040  00097E  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5041  000980  0E23               	movlw	high _default_state
  5042  000982  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5043  000984  0012               	return	
  5044  000986                     __end_ofPL42:
  5045                           	opt stack 0
  5046  000986                     PL80:
  5047                           	opt stack 22
  5048  000986  0EF2               	movlw	242
  5049  000988  6E17               	movwf	putchar_b_buf@symbol,c
  5050  00098A  0C18               	retlw	24
  5051  00098C                     __end_ofPL80:
  5052                           	opt stack 0
  5053  00098C                     PL112:
  5054                           	opt stack 22
  5055  00098C  0E20               	movlw	low _time_set_dy
  5056  00098E  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5057  000990  0E08               	movlw	high _time_set_dy
  5058  000992  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5059  000994  0012               	return	
  5060  000996                     __end_ofPL112:
  5061                           	opt stack 0
  5062  000996                     PL156:
  5063                           	opt stack 22
  5064  000996  0ECF               	movlw	207
  5065  000998  6E17               	movwf	putchar_b_buf@symbol,c
  5066  00099A  0C12               	retlw	18
  5067  00099C                     __end_ofPL156:
  5068                           	opt stack 0
  5069                           tosu	equ	0xFFF
  5070                           tosh	equ	0xFFE
  5071                           tosl	equ	0xFFD
  5072                           pclath	equ	0xFFA
  5073                           tblptru	equ	0xFF8
  5074                           tblptrh	equ	0xFF7
  5075                           tblptrl	equ	0xFF6
  5076                           tablat	equ	0xFF5
  5077                           prodh	equ	0xFF4
  5078                           prodl	equ	0xFF3
  5079                           intcon	equ	0xFF2
  5080                           intcon2	equ	0xFF1
  5081                           postinc0	equ	0xFEE
  5082                           wreg	equ	0xFE8
  5083                           indf1	equ	0xFE7
  5084                           plusw1	equ	0xFE3
  5085                           fsr1h	equ	0xFE2
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           postdec2	equ	0xFDD
  5090                           plusw2	equ	0xFDB
  5091                           fsr2h	equ	0xFDA
  5092                           fsr2l	equ	0xFD9
  5093                           status	equ	0xFD8
  5094                           
  5095 ;; *************** function _time_set_dt *****************
  5096 ;; Defined at:
  5097 ;;		line 293 in file "common.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;		None
  5102 ;; Return value:  Size  Location     Type
  5103 ;;                  1    wreg      void 
  5104 ;; Registers used:
  5105 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5106 ;; Tracked objects:
  5107 ;;		On entry : 3F/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5115 ;;Total ram usage:        0 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    7
  5118 ;; This function calls:
  5119 ;;		_RTOS_DeleteTask
  5120 ;;		_RTOS_SetTask
  5121 ;;		_Update_Matrix
  5122 ;;		___lbdiv
  5123 ;;		___lbmod
  5124 ;;		_putchar_b_buf
  5125 ;;		_setDate
  5126 ;; This function is called by:
  5127 ;;		_time_set_mt
  5128 ;;		_RTOS_DispatchTask
  5129 ;; This function uses a non-reentrant model
  5130 ;;
  5131                           
  5132                           	psect	text18
  5133  000C32                     __ptext18:
  5134                           	opt stack 0
  5135  000C32                     _time_set_dt:
  5136                           	opt stack 22
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;common.c: 295: switch (events)
  5140                           
  5141                           ;incstack = 0
  5142  000C32  D037               	goto	l6034
  5143  000C34                     l5992:
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;common.c: 301: RTOS_DeleteTask(time_set_dt);
  5147  000C34  D87E               	call	PL108	;call to abstracted procedure
  5148  000C36  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  5149                           
  5150                           ;common.c: 302: RTOS_SetTask(time_set_dy, 0, 20);
  5151  000C3A  0E20               	movlw	low _time_set_dy
  5152  000C3C  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5153  000C3E  0E08               	movlw	high _time_set_dy
  5154  000C40  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5155  000C42  EC22  F003         	call	PL18	;call to abstracted procedure
  5156  000C46  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5157                           
  5158                           ;common.c: 303: RTOS_SetTask(default_state, 2000, 0);
  5159  000C4A  D85E               	call	PL2	;call to abstracted procedure
  5160  000C4C  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5161                           
  5162                           ;common.c: 304: events = 5;
  5163                           
  5164                           ;common.c: 305: en_put=1;
  5165  000C50  D878               	call	PL142	;call to abstracted procedure
  5166                           
  5167                           ;common.c: 306: break;
  5168  000C52  D031               	goto	l703
  5169  000C54                     l6002:
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;common.c: 308: RTOS_DeleteTask(time_set_dt);
  5173  000C54  D86E               	call	PL108	;call to abstracted procedure
  5174  000C56  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  5175                           
  5176                           ;common.c: 309: RTOS_DeleteTask(default_state);
  5177  000C5A  ECBE  F004         	call	PL42	;call to abstracted procedure
  5178  000C5E  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  5179                           
  5180                           ;common.c: 310: RTOS_SetTask(time_led, 0, 20);
  5181  000C62  ECB4  F004         	call	PL10	;call to abstracted procedure
  5182  000C66  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5183                           
  5184                           ;common.c: 311: events = 5;
  5185  000C6A  0E05               	movlw	5
  5186  000C6C  6E6E               	movwf	_events,c
  5187                           
  5188                           ;common.c: 312: break;
  5189  000C6E  D023               	goto	l703
  5190  000C70                     l6008:
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;common.c: 314: TSTime.Tdt++;
  5194  000C70  2A51               	incf	_TSTime+4,f,c
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;common.c: 315: if(TSTime.Tdt > 31) TSTime.Tdt = 1;
  5198  000C72  0E1F               	movlw	31
  5199  000C74  6451               	cpfsgt	_TSTime+4,c
  5200  000C76  D002               	goto	l6014
  5201                           
  5202                           ; BSR set to: 0
  5203  000C78  0E01               	movlw	1
  5204  000C7A  6E51               	movwf	_TSTime+4,c
  5205  000C7C                     l6014:
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;common.c: 316: RTOS_SetTask(default_state, 2000, 0);
  5209  000C7C  D845               	call	PL2	;call to abstracted procedure
  5210  000C7E  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5211                           
  5212                           ;common.c: 317: events = 5;
  5213                           
  5214                           ;common.c: 318: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5215  000C82  D84D               	call	PL8	;call to abstracted procedure
  5216  000C84  EC7C  F00F         	call	_setDate
  5217                           
  5218                           ;common.c: 319: break;
  5219  000C88  D016               	goto	l703
  5220  000C8A                     l6020:
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;common.c: 321: TSTime.Tdt--;
  5224  000C8A  0651               	decf	_TSTime+4,f,c
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;common.c: 322: if(TSTime.Tdt == 0) TSTime.Tdt = 31;
  5228  000C8C  5051               	movf	_TSTime+4,w,c
  5229  000C8E  E102               	bnz	l6026
  5230                           
  5231                           ; BSR set to: 0
  5232  000C90  0E1F               	movlw	31
  5233  000C92  6E51               	movwf	_TSTime+4,c
  5234  000C94                     l6026:
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;common.c: 323: RTOS_SetTask(default_state, 2000, 0);
  5238  000C94  D839               	call	PL2	;call to abstracted procedure
  5239  000C96  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5240                           
  5241                           ;common.c: 324: events = 5;
  5242                           
  5243                           ;common.c: 325: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5244  000C9A  D841               	call	PL8	;call to abstracted procedure
  5245  000C9C  EC7C  F00F         	call	_setDate
  5246                           
  5247                           ;common.c: 326: break;
  5248  000CA0  D00A               	goto	l703
  5249  000CA2                     l6034:
  5250                           
  5251                           ; BSR set to: 0
  5252  000CA2  506E               	movf	_events,w,c
  5253                           
  5254                           ; Switch size 1, requested type "space"
  5255                           ; Number of cases is 5, Range of values is 1 to 5
  5256                           ; switch strategies available:
  5257                           ; Name         Instructions Cycles
  5258                           ; simple_byte           16     9 (average)
  5259                           ;	Chosen strategy is simple_byte
  5260  000CA4  0A01               	xorlw	1	; case 1
  5261  000CA6  E0C6               	bz	l5992
  5262  000CA8  0A03               	xorlw	3	; case 2
  5263  000CAA  E0E2               	bz	l6008
  5264  000CAC  0A01               	xorlw	1	; case 3
  5265  000CAE  E0ED               	bz	l6020
  5266  000CB0  0A07               	xorlw	7	; case 4
  5267  000CB2  E0D0               	bz	l6002
  5268  000CB4  0A01               	xorlw	1	; case 5
  5269  000CB6                     l703:
  5270                           
  5271                           ;common.c: 328: if(en_put)
  5272  000CB6  A06D               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5273  000CB8  D021               	goto	l6038
  5274                           
  5275                           ;common.c: 329: {
  5276                           ;common.c: 330: putchar_b_buf(0,'×');
  5277  000CBA  0ED7               	movlw	215
  5278  000CBC  6E17               	movwf	putchar_b_buf@symbol,c
  5279  000CBE  0E00               	movlw	0
  5280  000CC0  EC47  F00D         	call	_putchar_b_buf
  5281                           
  5282                           ;common.c: 331: putchar_b_buf(6,'ñ');
  5283  000CC4  EC39  F003         	call	PL162	;call to abstracted procedure
  5284  000CC8  EC47  F00D         	call	_putchar_b_buf
  5285                           
  5286                           ;common.c: 332: putchar_b_buf(12,':');
  5287  000CCC  D837               	call	PL110	;call to abstracted procedure
  5288  000CCE  EC47  F00D         	call	_putchar_b_buf
  5289                           
  5290                           ;common.c: 333: putchar_b_buf(18,(TSTime.Tdt/10) % 10 + 48);
  5291  000CD2  0E0A               	movlw	10
  5292  000CD4  6E13               	movwf	___lbmod@divisor,c
  5293  000CD6  6E0F               	movwf	___lbdiv@divisor,c
  5294  000CD8  5051               	movf	_TSTime+4,w,c
  5295  000CDA  ECEC  F00F         	call	___lbdiv
  5296  000CDE  ECD6  F010         	call	___lbmod
  5297  000CE2  EC2B  F008         	call	PL170	;call to abstracted procedure
  5298  000CE6  EC47  F00D         	call	_putchar_b_buf
  5299                           
  5300                           ;common.c: 334: putchar_b_buf(24,TSTime.Tdt % 10 + 48);
  5301  000CEA  0E0A               	movlw	10
  5302  000CEC  6E13               	movwf	___lbmod@divisor,c
  5303  000CEE  5051               	movf	_TSTime+4,w,c
  5304  000CF0  ECD6  F010         	call	___lbmod
  5305  000CF4  EC28  F008         	call	PL146	;call to abstracted procedure
  5306  000CF8  EC47  F00D         	call	_putchar_b_buf
  5307  000CFC                     l6038:
  5308                           
  5309                           ;common.c: 335: }
  5310                           ;common.c: 336: Update_Matrix(Dis_Buff);
  5311  000CFC  0EAB               	movlw	low _Dis_Buff
  5312  000CFE  6E11               	movwf	Update_Matrix@buf,c
  5313  000D00  EC5E  F00F         	call	_Update_Matrix	;wreg free
  5314                           
  5315                           ;common.c: 337: en_put=1;
  5316  000D04  806D               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5317  000D06  0012               	return		;funcret
  5318  000D08                     __end_of_time_set_dt:
  5319                           	opt stack 0
  5320  000D08                     PL2:
  5321                           	opt stack 22
  5322  000D08  0EDA               	movlw	low _default_state
  5323  000D0A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5324  000D0C  0E23               	movlw	high _default_state
  5325  000D0E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5326  000D10  0E07               	movlw	7
  5327  000D12  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  5328  000D14  0ED0               	movlw	208
  5329  000D16  6E11               	movwf	RTOS_SetTask@taskDelay,c
  5330  000D18  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5331  000D1A  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  5332  000D1C  0CD0               	retlw	208
  5333  000D1E                     __end_ofPL2:
  5334                           	opt stack 0
  5335  000D1E                     PL8:
  5336                           	opt stack 22
  5337  000D1E  0E05               	movlw	5
  5338  000D20  6E6E               	movwf	_events,c
  5339  000D22  C051  F01C         	movff	_TSTime+4,setDate@dateSet
  5340  000D26  C052  F01D         	movff	_TSTime+5,setDate@monthSet
  5341  000D2A  C053  F01E         	movff	_TSTime+6,setDate@yearSet
  5342  000D2E  5050               	movf	_TSTime+3,w,c
  5343  000D30  0012               	return	
  5344  000D32                     __end_ofPL8:
  5345                           	opt stack 0
  5346  000D32                     PL108:
  5347                           	opt stack 22
  5348  000D32  0E32               	movlw	low _time_set_dt
  5349  000D34  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5350  000D36  0E0C               	movlw	high _time_set_dt
  5351  000D38  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5352  000D3A  0012               	return	
  5353  000D3C                     __end_ofPL108:
  5354                           	opt stack 0
  5355  000D3C                     PL110:
  5356                           	opt stack 22
  5357  000D3C  0E3A               	movlw	58
  5358  000D3E  6E17               	movwf	putchar_b_buf@symbol,c
  5359  000D40  0C0C               	retlw	12
  5360  000D42                     __end_ofPL110:
  5361                           	opt stack 0
  5362  000D42                     PL142:
  5363                           	opt stack 22
  5364  000D42  0E05               	movlw	5
  5365  000D44  6E6E               	movwf	_events,c
  5366  000D46  806D               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5367  000D48  0C05               	retlw	5
  5368  000D4A                     __end_ofPL142:
  5369                           	opt stack 0
  5370                           tosu	equ	0xFFF
  5371                           tosh	equ	0xFFE
  5372                           tosl	equ	0xFFD
  5373                           pclath	equ	0xFFA
  5374                           tblptru	equ	0xFF8
  5375                           tblptrh	equ	0xFF7
  5376                           tblptrl	equ	0xFF6
  5377                           tablat	equ	0xFF5
  5378                           prodh	equ	0xFF4
  5379                           prodl	equ	0xFF3
  5380                           intcon	equ	0xFF2
  5381                           intcon2	equ	0xFF1
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           indf1	equ	0xFE7
  5385                           plusw1	equ	0xFE3
  5386                           fsr1h	equ	0xFE2
  5387                           fsr1l	equ	0xFE1
  5388                           indf2	equ	0xFDF
  5389                           postinc2	equ	0xFDE
  5390                           postdec2	equ	0xFDD
  5391                           plusw2	equ	0xFDB
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function _time_set_mt *****************
  5397 ;; Defined at:
  5398 ;;		line 193 in file "common.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;		None
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;		None
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  1    wreg      void 
  5405 ;; Registers used:
  5406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 3F/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;Total ram usage:        0 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    7
  5419 ;; This function calls:
  5420 ;;		_RTOS_DeleteTask
  5421 ;;		_RTOS_SetTask
  5422 ;;		_Update_Matrix
  5423 ;;		_putchar_b_buf
  5424 ;;		_setDate
  5425 ;; This function is called by:
  5426 ;;		_time_set_yr
  5427 ;;		_RTOS_DispatchTask
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text19
  5432  00048E                     __ptext19:
  5433                           	opt stack 0
  5434  00048E                     _time_set_mt:
  5435                           	opt stack 22
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;common.c: 195: switch (events)
  5439                           
  5440                           ;incstack = 0
  5441  00048E  D03C               	goto	l5954
  5442  000490                     l5912:
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;common.c: 201: RTOS_DeleteTask(time_set_mt);
  5446  000490  D8E5               	call	PL106	;call to abstracted procedure
  5447  000492  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  5448                           
  5449                           ;common.c: 202: RTOS_SetTask(time_set_dt, 0, 20);
  5450  000496  0E32               	movlw	low _time_set_dt
  5451  000498  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5452  00049A  0E0C               	movlw	high _time_set_dt
  5453  00049C  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5454  00049E  D8D2               	call	PL18	;call to abstracted procedure
  5455  0004A0  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5456                           
  5457                           ;common.c: 203: RTOS_SetTask(default_state, 2000, 0);
  5458  0004A4  EC84  F006         	call	PL2	;call to abstracted procedure
  5459  0004A8  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5460                           
  5461                           ;common.c: 204: events = 5;
  5462                           
  5463                           ;common.c: 205: en_put=1;
  5464  0004AC  ECA1  F006         	call	PL142	;call to abstracted procedure
  5465                           
  5466                           ;common.c: 206: break;
  5467  0004B0  D035               	goto	l676
  5468  0004B2                     l5922:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;common.c: 208: RTOS_DeleteTask(time_set_mt);
  5472  0004B2  D8D4               	call	PL106	;call to abstracted procedure
  5473  0004B4  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  5474                           
  5475                           ;common.c: 209: RTOS_DeleteTask(default_state);
  5476  0004B8  ECBE  F004         	call	PL42	;call to abstracted procedure
  5477  0004BC  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  5478                           
  5479                           ;common.c: 210: RTOS_SetTask(time_led, 0, 20);
  5480  0004C0  ECB4  F004         	call	PL10	;call to abstracted procedure
  5481  0004C4  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5482                           
  5483                           ;common.c: 211: events = 5;
  5484  0004C8  0E05               	movlw	5
  5485  0004CA  6E6E               	movwf	_events,c
  5486                           
  5487                           ;common.c: 212: break;
  5488  0004CC  D027               	goto	l676
  5489  0004CE                     l5928:
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;common.c: 214: TSTime.Tmt++;
  5493  0004CE  2A52               	incf	_TSTime+5,f,c
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;common.c: 215: if(TSTime.Tmt > 12) TSTime.Tmt = 1;
  5497  0004D0  0E0C               	movlw	12
  5498  0004D2  6452               	cpfsgt	_TSTime+5,c
  5499  0004D4  D002               	goto	l5934
  5500                           
  5501                           ; BSR set to: 0
  5502  0004D6  0E01               	movlw	1
  5503  0004D8  6E52               	movwf	_TSTime+5,c
  5504  0004DA                     l5934:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;common.c: 216: RTOS_SetTask(default_state, 2000, 0);
  5508  0004DA  EC84  F006         	call	PL2	;call to abstracted procedure
  5509  0004DE  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5510                           
  5511                           ;common.c: 217: events = 5;
  5512                           
  5513                           ;common.c: 218: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5514  0004E2  EC8F  F006         	call	PL8	;call to abstracted procedure
  5515  0004E6  EC7C  F00F         	call	_setDate
  5516                           
  5517                           ;common.c: 219: break;
  5518  0004EA  D018               	goto	l676
  5519  0004EC                     l5940:
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;common.c: 221: TSTime.Tmt--;
  5523  0004EC  0652               	decf	_TSTime+5,f,c
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;common.c: 222: if(TSTime.Tmt == 0) TSTime.Tmt = 12;
  5527  0004EE  5052               	movf	_TSTime+5,w,c
  5528  0004F0  E102               	bnz	l5946
  5529                           
  5530                           ; BSR set to: 0
  5531  0004F2  0E0C               	movlw	12
  5532  0004F4  6E52               	movwf	_TSTime+5,c
  5533  0004F6                     l5946:
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;common.c: 223: RTOS_SetTask(default_state, 2000, 0);
  5537  0004F6  EC84  F006         	call	PL2	;call to abstracted procedure
  5538  0004FA  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  5539                           
  5540                           ;common.c: 224: events = 5;
  5541                           
  5542                           ;common.c: 225: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5543  0004FE  EC8F  F006         	call	PL8	;call to abstracted procedure
  5544  000502  EC7C  F00F         	call	_setDate
  5545                           
  5546                           ;common.c: 226: break;
  5547  000506  D00A               	goto	l676
  5548  000508                     l5954:
  5549                           
  5550                           ; BSR set to: 0
  5551  000508  506E               	movf	_events,w,c
  5552                           
  5553                           ; Switch size 1, requested type "space"
  5554                           ; Number of cases is 5, Range of values is 1 to 5
  5555                           ; switch strategies available:
  5556                           ; Name         Instructions Cycles
  5557                           ; simple_byte           16     9 (average)
  5558                           ;	Chosen strategy is simple_byte
  5559  00050A  0A01               	xorlw	1	; case 1
  5560  00050C  E0C1               	bz	l5912
  5561  00050E  0A03               	xorlw	3	; case 2
  5562  000510  E0DE               	bz	l5928
  5563  000512  0A01               	xorlw	1	; case 3
  5564  000514  E0EB               	bz	l5940
  5565  000516  0A07               	xorlw	7	; case 4
  5566  000518  E0CC               	bz	l5922
  5567  00051A  0A01               	xorlw	1	; case 5
  5568  00051C                     l676:
  5569                           
  5570                           ;common.c: 228: if(en_put)
  5571  00051C  A06D               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5572  00051E  D08C               	goto	l5986
  5573                           
  5574                           ;common.c: 229: {
  5575                           ;common.c: 230: putchar_b_buf(0,'Ì');
  5576  000520  0ECC               	movlw	204
  5577  000522  6E17               	movwf	putchar_b_buf@symbol,c
  5578  000524  0E00               	movlw	0
  5579  000526  EC47  F00D         	call	_putchar_b_buf
  5580                           
  5581                           ;common.c: 231: putchar_b_buf(6,'ñ');
  5582  00052A  D8A3               	call	PL162	;call to abstracted procedure
  5583  00052C  EC47  F00D         	call	_putchar_b_buf
  5584                           
  5585                           ;common.c: 232: putchar_b_buf(12,':');
  5586  000530  EC9E  F006         	call	PL110	;call to abstracted procedure
  5587  000534  EC47  F00D         	call	_putchar_b_buf
  5588                           
  5589                           ;common.c: 233: switch(TSTime.Tmt)
  5590  000538  D066               	goto	l5984
  5591  00053A                     l5958:
  5592                           
  5593                           ;common.c: 236: putchar_b_buf(18,'Ñ');
  5594  00053A  D88D               	call	PL92	;call to abstracted procedure
  5595  00053C  EC47  F00D         	call	_putchar_b_buf
  5596                           
  5597                           ;common.c: 237: putchar_b_buf(24,'÷');
  5598  000540  0EF7               	movlw	247
  5599  000542  6E17               	movwf	putchar_b_buf@symbol,c
  5600  000544  0E18               	movlw	24
  5601  000546  EC47  F00D         	call	_putchar_b_buf
  5602                           
  5603                           ;common.c: 238: break;
  5604  00054A  D076               	goto	l5986
  5605  00054C                     l5960:
  5606                           
  5607                           ;common.c: 240: putchar_b_buf(18,'Ë');
  5608  00054C  D88C               	call	PL144	;call to abstracted procedure
  5609  00054E  EC47  F00D         	call	_putchar_b_buf
  5610                           
  5611                           ;common.c: 241: putchar_b_buf(24,'ò');
  5612  000552  ECC3  F004         	call	PL80	;call to abstracted procedure
  5613  000556  EC47  F00D         	call	_putchar_b_buf
  5614                           
  5615                           ;common.c: 242: break;
  5616  00055A  D06E               	goto	l5986
  5617  00055C                     l5962:
  5618                           
  5619                           ;common.c: 244: putchar_b_buf(18,'Á');
  5620  00055C  0EC1               	movlw	193
  5621  00055E  6E17               	movwf	putchar_b_buf@symbol,c
  5622  000560  0E12               	movlw	18
  5623  000562  EC47  F00D         	call	_putchar_b_buf
  5624                           
  5625                           ;common.c: 245: putchar_b_buf(24,'ð');
  5626  000566  D874               	call	PL78	;call to abstracted procedure
  5627  000568  EC47  F00D         	call	_putchar_b_buf
  5628                           
  5629                           ;common.c: 246: break;
  5630  00056C  D065               	goto	l5986
  5631  00056E                     l5964:
  5632                           
  5633                           ;common.c: 248: putchar_b_buf(18,'Ê');
  5634  00056E  0ECA               	movlw	202
  5635  000570  6E17               	movwf	putchar_b_buf@symbol,c
  5636  000572  0E12               	movlw	18
  5637  000574  EC47  F00D         	call	_putchar_b_buf
  5638                           
  5639                           ;common.c: 249: putchar_b_buf(24,'â');
  5640  000578  0EE2               	movlw	226
  5641  00057A  6E17               	movwf	putchar_b_buf@symbol,c
  5642  00057C  0E18               	movlw	24
  5643  00057E  EC47  F00D         	call	_putchar_b_buf
  5644                           
  5645                           ;common.c: 250: break;
  5646  000582  D05A               	goto	l5986
  5647  000584                     l5966:
  5648                           
  5649                           ;common.c: 252: putchar_b_buf(18,'Ò');
  5650  000584  0ED2               	movlw	210
  5651  000586  6E17               	movwf	putchar_b_buf@symbol,c
  5652  000588  0E12               	movlw	18
  5653  00058A  EC47  F00D         	call	_putchar_b_buf
  5654                           
  5655                           ;common.c: 253: putchar_b_buf(24,'ð');
  5656  00058E  D860               	call	PL78	;call to abstracted procedure
  5657  000590  EC47  F00D         	call	_putchar_b_buf
  5658                           
  5659                           ;common.c: 254: break;
  5660  000594  D051               	goto	l5986
  5661  000596                     l5968:
  5662                           
  5663                           ;common.c: 256: putchar_b_buf(18,'×');
  5664  000596  D873               	call	PL168	;call to abstracted procedure
  5665  000598  EC47  F00D         	call	_putchar_b_buf
  5666                           
  5667                           ;common.c: 257: putchar_b_buf(24,'ð');
  5668  00059C  D859               	call	PL78	;call to abstracted procedure
  5669  00059E  EC47  F00D         	call	_putchar_b_buf
  5670                           
  5671                           ;common.c: 258: break;
  5672  0005A2  D04A               	goto	l5986
  5673  0005A4                     l5970:
  5674                           
  5675                           ;common.c: 260: putchar_b_buf(18,'Ë');
  5676  0005A4  D860               	call	PL144	;call to abstracted procedure
  5677  0005A6  EC47  F00D         	call	_putchar_b_buf
  5678                           
  5679                           ;common.c: 261: putchar_b_buf(24,'ï');
  5680  0005AA  D860               	call	PL152	;call to abstracted procedure
  5681  0005AC  EC47  F00D         	call	_putchar_b_buf
  5682                           
  5683                           ;common.c: 262: break;
  5684  0005B0  D043               	goto	l5986
  5685  0005B2                     l5972:
  5686                           
  5687                           ;common.c: 264: putchar_b_buf(18,'Ñ');
  5688  0005B2  D851               	call	PL92	;call to abstracted procedure
  5689  0005B4  EC47  F00D         	call	_putchar_b_buf
  5690                           
  5691                           ;common.c: 265: putchar_b_buf(24,'ï');
  5692  0005B8  D859               	call	PL152	;call to abstracted procedure
  5693  0005BA  EC47  F00D         	call	_putchar_b_buf
  5694                           
  5695                           ;common.c: 266: break;
  5696  0005BE  D03C               	goto	l5986
  5697  0005C0                     l5974:
  5698                           
  5699                           ;common.c: 268: putchar_b_buf(18,'Â');
  5700  0005C0  D85B               	call	PL166	;call to abstracted procedure
  5701  0005C2  EC47  F00D         	call	_putchar_b_buf
  5702                           
  5703                           ;common.c: 269: putchar_b_buf(24,'ð');
  5704  0005C6  D844               	call	PL78	;call to abstracted procedure
  5705  0005C8  EC47  F00D         	call	_putchar_b_buf
  5706                           
  5707                           ;common.c: 270: break;
  5708  0005CC  D035               	goto	l5986
  5709  0005CE                     l5976:
  5710                           
  5711                           ;common.c: 272: putchar_b_buf(18,'Æ');
  5712  0005CE  0EC6               	movlw	198
  5713  0005D0  6E17               	movwf	putchar_b_buf@symbol,c
  5714  0005D2  0E12               	movlw	18
  5715  0005D4  EC47  F00D         	call	_putchar_b_buf
  5716                           
  5717                           ;common.c: 273: putchar_b_buf(24,'ò');
  5718  0005D8  ECC3  F004         	call	PL80	;call to abstracted procedure
  5719  0005DC  EC47  F00D         	call	_putchar_b_buf
  5720                           
  5721                           ;common.c: 274: break;
  5722  0005E0  D02B               	goto	l5986
  5723  0005E2                     l5978:
  5724                           
  5725                           ;common.c: 276: putchar_b_buf(18,'Ë');
  5726  0005E2  D841               	call	PL144	;call to abstracted procedure
  5727  0005E4  EC47  F00D         	call	_putchar_b_buf
  5728                           
  5729                           ;common.c: 277: putchar_b_buf(24,'ñ');
  5730  0005E8  0EF1               	movlw	241
  5731  0005EA  6E17               	movwf	putchar_b_buf@symbol,c
  5732  0005EC  0E18               	movlw	24
  5733  0005EE  EC47  F00D         	call	_putchar_b_buf
  5734                           
  5735                           ;common.c: 278: break;
  5736  0005F2  D022               	goto	l5986
  5737  0005F4                     l5980:
  5738                           
  5739                           ;common.c: 280: putchar_b_buf(18,'Ã');
  5740  0005F4  0EC3               	movlw	195
  5741  0005F6  6E17               	movwf	putchar_b_buf@symbol,c
  5742  0005F8  0E12               	movlw	18
  5743  0005FA  EC47  F00D         	call	_putchar_b_buf
  5744                           
  5745                           ;common.c: 281: putchar_b_buf(24,'ð');
  5746  0005FE  D828               	call	PL78	;call to abstracted procedure
  5747  000600  EC47  F00D         	call	_putchar_b_buf
  5748                           
  5749                           ;common.c: 282: break;
  5750  000604  D019               	goto	l5986
  5751  000606                     l5984:
  5752  000606  5052               	movf	_TSTime+5,w,c
  5753                           
  5754                           ; Switch size 1, requested type "space"
  5755                           ; Number of cases is 12, Range of values is 1 to 12
  5756                           ; switch strategies available:
  5757                           ; Name         Instructions Cycles
  5758                           ; simple_byte           37    19 (average)
  5759                           ;	Chosen strategy is simple_byte
  5760  000608  0A01               	xorlw	1	; case 1
  5761  00060A  E097               	bz	l5958
  5762  00060C  0A03               	xorlw	3	; case 2
  5763  00060E  E09E               	bz	l5960
  5764  000610  0A01               	xorlw	1	; case 3
  5765  000612  E0A4               	bz	l5962
  5766  000614  0A07               	xorlw	7	; case 4
  5767  000616  E0AB               	bz	l5964
  5768  000618  0A01               	xorlw	1	; case 5
  5769  00061A  E0B4               	bz	l5966
  5770  00061C  0A03               	xorlw	3	; case 6
  5771  00061E  E0BB               	bz	l5968
  5772  000620  0A01               	xorlw	1	; case 7
  5773  000622  E0C0               	bz	l5970
  5774  000624  0A0F               	xorlw	15	; case 8
  5775  000626  E0C5               	bz	l5972
  5776  000628  0A01               	xorlw	1	; case 9
  5777  00062A  E0CA               	bz	l5974
  5778  00062C  0A03               	xorlw	3	; case 10
  5779  00062E  E0CF               	bz	l5976
  5780  000630  0A01               	xorlw	1	; case 11
  5781  000632  E0D7               	bz	l5978
  5782  000634  0A07               	xorlw	7	; case 12
  5783  000636  E0DE               	bz	l5980
  5784  000638                     l5986:
  5785                           
  5786                           ;common.c: 285: }
  5787                           ;common.c: 286: Update_Matrix(Dis_Buff);
  5788  000638  0EAB               	movlw	low _Dis_Buff
  5789  00063A  6E11               	movwf	Update_Matrix@buf,c
  5790  00063C  EC5E  F00F         	call	_Update_Matrix	;wreg free
  5791                           
  5792                           ;common.c: 287: en_put=1;
  5793  000640  806D               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5794  000642  0012               	return		;funcret
  5795  000644                     __end_of_time_set_mt:
  5796                           	opt stack 0
  5797  000644                     PL18:
  5798                           	opt stack 22
  5799  000644  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  5800  000646  6A11               	clrf	RTOS_SetTask@taskDelay,c
  5801  000648  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5802  00064A  0E14               	movlw	20
  5803  00064C  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  5804  00064E  0C14               	retlw	20
  5805  000650                     __end_ofPL18:
  5806                           	opt stack 0
  5807  000650                     PL78:
  5808                           	opt stack 22
  5809  000650  0EF0               	movlw	240
  5810  000652  6E17               	movwf	putchar_b_buf@symbol,c
  5811  000654  0C18               	retlw	24
  5812  000656                     __end_ofPL78:
  5813                           	opt stack 0
  5814  000656                     PL92:
  5815                           	opt stack 22
  5816  000656  0ED1               	movlw	209
  5817  000658  6E17               	movwf	putchar_b_buf@symbol,c
  5818  00065A  0C12               	retlw	18
  5819  00065C                     __end_ofPL92:
  5820                           	opt stack 0
  5821  00065C                     PL106:
  5822                           	opt stack 22
  5823  00065C  0E8E               	movlw	low _time_set_mt
  5824  00065E  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5825  000660  0E04               	movlw	high _time_set_mt
  5826  000662  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5827  000664  0012               	return	
  5828  000666                     __end_ofPL106:
  5829                           	opt stack 0
  5830  000666                     PL144:
  5831                           	opt stack 22
  5832  000666  0ECB               	movlw	203
  5833  000668  6E17               	movwf	putchar_b_buf@symbol,c
  5834  00066A  0C12               	retlw	18
  5835  00066C                     __end_ofPL144:
  5836                           	opt stack 0
  5837  00066C                     PL152:
  5838                           	opt stack 22
  5839  00066C  0EEF               	movlw	239
  5840  00066E  6E17               	movwf	putchar_b_buf@symbol,c
  5841  000670  0C18               	retlw	24
  5842  000672                     __end_ofPL152:
  5843                           	opt stack 0
  5844  000672                     PL162:
  5845                           	opt stack 22
  5846  000672  0EF1               	movlw	241
  5847  000674  6E17               	movwf	putchar_b_buf@symbol,c
  5848  000676  0C06               	retlw	6
  5849  000678                     __end_ofPL162:
  5850                           	opt stack 0
  5851  000678                     PL166:
  5852                           	opt stack 22
  5853  000678  0EC2               	movlw	194
  5854  00067A  6E17               	movwf	putchar_b_buf@symbol,c
  5855  00067C  0C12               	retlw	18
  5856  00067E                     __end_ofPL166:
  5857                           	opt stack 0
  5858  00067E                     PL168:
  5859                           	opt stack 22
  5860  00067E  0ED7               	movlw	215
  5861  000680  6E17               	movwf	putchar_b_buf@symbol,c
  5862  000682  0C12               	retlw	18
  5863  000684                     __end_ofPL168:
  5864                           	opt stack 0
  5865                           tosu	equ	0xFFF
  5866                           tosh	equ	0xFFE
  5867                           tosl	equ	0xFFD
  5868                           pclath	equ	0xFFA
  5869                           tblptru	equ	0xFF8
  5870                           tblptrh	equ	0xFF7
  5871                           tblptrl	equ	0xFF6
  5872                           tablat	equ	0xFF5
  5873                           prodh	equ	0xFF4
  5874                           prodl	equ	0xFF3
  5875                           intcon	equ	0xFF2
  5876                           intcon2	equ	0xFF1
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           indf1	equ	0xFE7
  5880                           plusw1	equ	0xFE3
  5881                           fsr1h	equ	0xFE2
  5882                           fsr1l	equ	0xFE1
  5883                           indf2	equ	0xFDF
  5884                           postinc2	equ	0xFDE
  5885                           postdec2	equ	0xFDD
  5886                           plusw2	equ	0xFDB
  5887                           fsr2h	equ	0xFDA
  5888                           fsr2l	equ	0xFD9
  5889                           status	equ	0xFD8
  5890                           
  5891 ;; *************** function _default_state *****************
  5892 ;; Defined at:
  5893 ;;		line 545 in file "common.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;		None
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;		None
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  1    wreg      void 
  5900 ;; Registers used:
  5901 ;;		wreg, status,2
  5902 ;; Tracked objects:
  5903 ;;		On entry : 3F/0
  5904 ;;		On exit  : 3F/0
  5905 ;;		Unchanged: 3F/0
  5906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;Total ram usage:        0 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    3
  5914 ;; This function calls:
  5915 ;;		Nothing
  5916 ;; This function is called by:
  5917 ;;		_time_set_min
  5918 ;;		_time_set_hr
  5919 ;;		_time_set_yr
  5920 ;;		_time_set_mt
  5921 ;;		_time_set_dt
  5922 ;;		_time_set_dy
  5923 ;;		_home_temp
  5924 ;;		_time_led
  5925 ;;		_RTOS_DispatchTask
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text20
  5930  0023DA                     __ptext20:
  5931                           	opt stack 0
  5932  0023DA                     _default_state:
  5933                           	opt stack 26
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;common.c: 547: events = 4;
  5937                           
  5938                           ;incstack = 0
  5939  0023DA  0E04               	movlw	4
  5940  0023DC  6E6E               	movwf	_events,c
  5941                           
  5942                           ; BSR set to: 0
  5943  0023DE  0C04               	retlw	4	;funcret
  5944  0023E0                     __end_of_default_state:
  5945                           	opt stack 0
  5946                           tosu	equ	0xFFF
  5947                           tosh	equ	0xFFE
  5948                           tosl	equ	0xFFD
  5949                           pclath	equ	0xFFA
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           prodh	equ	0xFF4
  5955                           prodl	equ	0xFF3
  5956                           intcon	equ	0xFF2
  5957                           intcon2	equ	0xFF1
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           indf1	equ	0xFE7
  5961                           plusw1	equ	0xFE3
  5962                           fsr1h	equ	0xFE2
  5963                           fsr1l	equ	0xFE1
  5964                           indf2	equ	0xFDF
  5965                           postinc2	equ	0xFDE
  5966                           postdec2	equ	0xFDD
  5967                           plusw2	equ	0xFDB
  5968                           fsr2h	equ	0xFDA
  5969                           fsr2l	equ	0xFD9
  5970                           status	equ	0xFD8
  5971                           
  5972 ;; *************** function _time_set_hr *****************
  5973 ;; Defined at:
  5974 ;;		line 78 in file "common.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;		None
  5977 ;; Auto vars:     Size  Location     Type
  5978 ;;		None
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  1    wreg      void 
  5981 ;; Registers used:
  5982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5983 ;; Tracked objects:
  5984 ;;		On entry : 3F/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;Total ram usage:        0 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    7
  5995 ;; This function calls:
  5996 ;;		_RTOS_DeleteTask
  5997 ;;		_RTOS_SetTask
  5998 ;;		_Update_Matrix
  5999 ;;		___lbdiv
  6000 ;;		___lbmod
  6001 ;;		_clear_matrix
  6002 ;;		_putchar_b_buf
  6003 ;;		_setTime
  6004 ;; This function is called by:
  6005 ;;		_time_set_min
  6006 ;;		_RTOS_DispatchTask
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text21
  6011  00099C                     __ptext21:
  6012                           	opt stack 0
  6013  00099C                     _time_set_hr:
  6014                           	opt stack 22
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;common.c: 80: show_digit = ~show_digit;
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;incstack = 0
  6021  00099C  B26D               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  6022  00099E  D002               	goto	u4570
  6023  0009A0  826D               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  6024  0009A2  D043               	goto	l5840
  6025  0009A4                     u4570:
  6026  0009A4  926D               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  6027                           
  6028                           ;common.c: 81: switch (events)
  6029  0009A6  D041               	goto	l5840
  6030  0009A8                     l5796:
  6031                           
  6032                           ;common.c: 87: RTOS_DeleteTask(time_set_hr);
  6033  0009A8  D89A               	call	PL128	;call to abstracted procedure
  6034  0009AA  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  6035                           
  6036                           ;common.c: 88: RTOS_SetTask(time_set_yr, 0, 20);
  6037  0009AE  0E64               	movlw	low _time_set_yr
  6038  0009B0  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6039  0009B2  0E0F               	movlw	high _time_set_yr
  6040  0009B4  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6041  0009B6  EC22  F003         	call	PL18	;call to abstracted procedure
  6042  0009BA  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6043                           
  6044                           ;common.c: 89: RTOS_SetTask(default_state, 2000, 0);
  6045  0009BE  EC84  F006         	call	PL2	;call to abstracted procedure
  6046  0009C2  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6047                           
  6048                           ;common.c: 91: events = 5;
  6049  0009C6  0E05               	movlw	5
  6050  0009C8  6E6E               	movwf	_events,c
  6051                           
  6052                           ;common.c: 92: clear_matrix();
  6053  0009CA  ECAB  F011         	call	_clear_matrix	;wreg free
  6054                           
  6055                           ;common.c: 93: en_put = 0;
  6056  0009CE  906D               	bcf	_en_put/(0+8),_en_put& (0+7),c
  6057                           
  6058                           ;common.c: 94: break;
  6059  0009D0  D036               	goto	l646
  6060  0009D2                     l5808:
  6061                           
  6062                           ;common.c: 96: RTOS_DeleteTask(time_set_hr);
  6063  0009D2  D885               	call	PL128	;call to abstracted procedure
  6064  0009D4  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  6065                           
  6066                           ;common.c: 97: RTOS_DeleteTask(default_state);
  6067  0009D8  ECBE  F004         	call	PL42	;call to abstracted procedure
  6068  0009DC  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  6069                           
  6070                           ;common.c: 98: RTOS_SetTask(time_led, 0, 20);
  6071  0009E0  ECB4  F004         	call	PL10	;call to abstracted procedure
  6072  0009E4  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6073                           
  6074                           ;common.c: 99: events = 5;
  6075  0009E8  0E05               	movlw	5
  6076  0009EA  6E6E               	movwf	_events,c
  6077                           
  6078                           ;common.c: 100: break;
  6079  0009EC  D028               	goto	l646
  6080  0009EE                     l5814:
  6081                           
  6082                           ;common.c: 102: TSTime.Thr++;
  6083  0009EE  2A4F               	incf	_TSTime+2,f,c
  6084                           
  6085                           ;common.c: 103: if(TSTime.Thr > 23) TSTime.Thr = 0;
  6086  0009F0  0E17               	movlw	23
  6087  0009F2  644F               	cpfsgt	_TSTime+2,c
  6088  0009F4  D001               	goto	l5820
  6089  0009F6  6A4F               	clrf	_TSTime+2,c
  6090  0009F8                     l5820:
  6091                           
  6092                           ;common.c: 104: RTOS_SetTask(default_state, 2000, 0);
  6093  0009F8  EC84  F006         	call	PL2	;call to abstracted procedure
  6094  0009FC  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6095                           
  6096                           ;common.c: 105: events = 5;
  6097  000A00  0E05               	movlw	5
  6098  000A02  6E6E               	movwf	_events,c
  6099                           
  6100                           ;common.c: 106: setTime(TSTime.Thr,TSTime.Tmin,0);
  6101  000A04  D85D               	call	PL60	;call to abstracted procedure
  6102  000A06  EC1E  F010         	call	_setTime
  6103                           
  6104                           ;common.c: 107: break;
  6105  000A0A  D019               	goto	l646
  6106  000A0C                     l5826:
  6107                           
  6108                           ;common.c: 109: TSTime.Thr--;
  6109  000A0C  064F               	decf	_TSTime+2,f,c
  6110                           
  6111                           ;common.c: 110: if(TSTime.Thr == 255) TSTime.Thr = 23;
  6112  000A0E  284F               	incf	_TSTime+2,w,c
  6113  000A10  E102               	bnz	l5832
  6114  000A12  0E17               	movlw	23
  6115  000A14  6E4F               	movwf	_TSTime+2,c
  6116  000A16                     l5832:
  6117                           
  6118                           ;common.c: 111: RTOS_SetTask(default_state, 2000, 0);
  6119  000A16  EC84  F006         	call	PL2	;call to abstracted procedure
  6120  000A1A  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6121                           
  6122                           ;common.c: 112: events = 5;
  6123  000A1E  0E05               	movlw	5
  6124  000A20  6E6E               	movwf	_events,c
  6125                           
  6126                           ;common.c: 113: setTime(TSTime.Thr,TSTime.Tmin,0);
  6127  000A22  D84E               	call	PL60	;call to abstracted procedure
  6128  000A24  EC1E  F010         	call	_setTime
  6129                           
  6130                           ;common.c: 114: break;
  6131  000A28  D00A               	goto	l646
  6132  000A2A                     l5840:
  6133  000A2A  506E               	movf	_events,w,c
  6134                           
  6135                           ; Switch size 1, requested type "space"
  6136                           ; Number of cases is 5, Range of values is 1 to 5
  6137                           ; switch strategies available:
  6138                           ; Name         Instructions Cycles
  6139                           ; simple_byte           16     9 (average)
  6140                           ;	Chosen strategy is simple_byte
  6141  000A2C  0A01               	xorlw	1	; case 1
  6142  000A2E  E0BC               	bz	l5796
  6143  000A30  0A03               	xorlw	3	; case 2
  6144  000A32  E0DD               	bz	l5814
  6145  000A34  0A01               	xorlw	1	; case 3
  6146  000A36  E0EA               	bz	l5826
  6147  000A38  0A07               	xorlw	7	; case 4
  6148  000A3A  E0CB               	bz	l5808
  6149  000A3C  0A01               	xorlw	1	; case 5
  6150  000A3E                     l646:
  6151                           
  6152                           ;common.c: 116: if(en_put)
  6153  000A3E  A06D               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6154  000A40  D039               	goto	l5854
  6155                           
  6156                           ;common.c: 117: {
  6157                           ;common.c: 118: if(show_digit)
  6158  000A42  A26D               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  6159  000A44  D02F               	goto	l5852
  6160                           
  6161                           ;common.c: 119: {
  6162                           ;common.c: 121: putchar_b_buf(13,(TSTime.Tmin/10) % 10 + 48);
  6163  000A46  D846               	call	PL116	;call to abstracted procedure
  6164  000A48  ECEC  F00F         	call	___lbdiv
  6165  000A4C  ECD6  F010         	call	___lbmod
  6166  000A50  D84F               	call	PL154	;call to abstracted procedure
  6167  000A52  EC47  F00D         	call	_putchar_b_buf
  6168                           
  6169                           ;common.c: 122: putchar_b_buf(19,TSTime.Tmin % 10 + 48);
  6170  000A56  D848               	call	PL148	;call to abstracted procedure
  6171  000A58  ECD6  F010         	call	___lbmod
  6172  000A5C  D84C               	call	PL172	;call to abstracted procedure
  6173  000A5E  EC47  F00D         	call	_putchar_b_buf
  6174                           
  6175                           ;common.c: 124: if((TSTime.Thr/10) % 10)
  6176  000A62  D833               	call	PL82	;call to abstracted procedure
  6177  000A64  ECEC  F00F         	call	___lbdiv
  6178  000A68  ECD6  F010         	call	___lbmod
  6179  000A6C  0900               	iorlw	0
  6180  000A6E  E00B               	bz	l5850
  6181                           
  6182                           ;common.c: 125: putchar_b_buf(0,(TSTime.Thr/10) % 10 + 48);
  6183  000A70  D82C               	call	PL82	;call to abstracted procedure
  6184  000A72  ECEC  F00F         	call	___lbdiv
  6185  000A76  ECD6  F010         	call	___lbmod
  6186  000A7A  0F30               	addlw	48
  6187  000A7C  6E17               	movwf	putchar_b_buf@symbol,c
  6188  000A7E  0E00               	movlw	0
  6189  000A80  EC47  F00D         	call	_putchar_b_buf
  6190  000A84  D004               	goto	l656
  6191  000A86                     l5850:
  6192                           
  6193                           ;common.c: 126: else
  6194                           ;common.c: 127: putchar_b_buf(0,0);
  6195  000A86  0E00               	movlw	0
  6196  000A88  6A17               	clrf	putchar_b_buf@symbol,c
  6197  000A8A  EC47  F00D         	call	_putchar_b_buf
  6198  000A8E                     l656:
  6199                           
  6200                           ;common.c: 128: putchar_b_buf(6,TSTime.Thr % 10 + 48);
  6201  000A8E  0E0A               	movlw	10
  6202  000A90  6E13               	movwf	___lbmod@divisor,c
  6203  000A92  504F               	movf	_TSTime+2,w,c
  6204  000A94  ECD6  F010         	call	___lbmod
  6205  000A98  0F30               	addlw	48
  6206  000A9A  6E17               	movwf	putchar_b_buf@symbol,c
  6207  000A9C  0E06               	movlw	6
  6208  000A9E  EC47  F00D         	call	_putchar_b_buf
  6209                           
  6210                           ;common.c: 129: }
  6211  000AA2  D008               	goto	l5854
  6212  000AA4                     l5852:
  6213                           
  6214                           ;common.c: 130: else
  6215                           ;common.c: 131: {
  6216                           ;common.c: 133: putchar_b_buf(0,0);
  6217  000AA4  0E00               	movlw	0
  6218  000AA6  6A17               	clrf	putchar_b_buf@symbol,c
  6219  000AA8  EC47  F00D         	call	_putchar_b_buf
  6220                           
  6221                           ;common.c: 134: putchar_b_buf(6,0);
  6222  000AAC  6A17               	clrf	putchar_b_buf@symbol,c
  6223  000AAE  0E06               	movlw	6
  6224  000AB0  EC47  F00D         	call	_putchar_b_buf
  6225  000AB4                     l5854:
  6226                           
  6227                           ;common.c: 135: }
  6228                           ;common.c: 136: }
  6229                           ;common.c: 137: Update_Matrix(Dis_Buff);
  6230  000AB4  0EAB               	movlw	low _Dis_Buff
  6231  000AB6  6E11               	movwf	Update_Matrix@buf,c
  6232  000AB8  EC5E  F00F         	call	_Update_Matrix	;wreg free
  6233                           
  6234                           ;common.c: 138: en_put = 1;
  6235  000ABC  806D               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6236  000ABE  0012               	return		;funcret
  6237  000AC0                     __end_of_time_set_hr:
  6238                           	opt stack 0
  6239  000AC0                     PL60:
  6240                           	opt stack 22
  6241  000AC0  C04E  F01C         	movff	_TSTime+1,setTime@mSet
  6242  000AC4  6A1D               	clrf	setTime@sSet,c
  6243  000AC6  504F               	movf	_TSTime+2,w,c
  6244  000AC8  0012               	return	
  6245  000ACA                     __end_ofPL60:
  6246                           	opt stack 0
  6247  000ACA                     PL82:
  6248                           	opt stack 22
  6249  000ACA  0E0A               	movlw	10
  6250  000ACC  6E13               	movwf	___lbmod@divisor,c
  6251  000ACE  6E0F               	movwf	___lbdiv@divisor,c
  6252  000AD0  504F               	movf	_TSTime+2,w,c
  6253  000AD2  0012               	return	
  6254  000AD4                     __end_ofPL82:
  6255                           	opt stack 0
  6256  000AD4                     PL116:
  6257                           	opt stack 22
  6258  000AD4  0E0A               	movlw	10
  6259  000AD6  6E13               	movwf	___lbmod@divisor,c
  6260  000AD8  6E0F               	movwf	___lbdiv@divisor,c
  6261  000ADA  504E               	movf	_TSTime+1,w,c
  6262  000ADC  0012               	return	
  6263  000ADE                     __end_ofPL116:
  6264                           	opt stack 0
  6265  000ADE                     PL128:
  6266                           	opt stack 22
  6267  000ADE  0E9C               	movlw	low _time_set_hr
  6268  000AE0  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6269  000AE2  0E09               	movlw	high _time_set_hr
  6270  000AE4  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6271  000AE6  0012               	return	
  6272  000AE8                     __end_ofPL128:
  6273                           	opt stack 0
  6274  000AE8                     PL148:
  6275                           	opt stack 22
  6276  000AE8  0E0A               	movlw	10
  6277  000AEA  6E13               	movwf	___lbmod@divisor,c
  6278  000AEC  504E               	movf	_TSTime+1,w,c
  6279  000AEE  0012               	return	
  6280  000AF0                     __end_ofPL148:
  6281                           	opt stack 0
  6282  000AF0                     PL154:
  6283                           	opt stack 22
  6284  000AF0  0F30               	addlw	48
  6285  000AF2  6E17               	movwf	putchar_b_buf@symbol,c
  6286  000AF4  0C0D               	retlw	13
  6287  000AF6                     __end_ofPL154:
  6288                           	opt stack 0
  6289  000AF6                     PL172:
  6290                           	opt stack 22
  6291  000AF6  0F30               	addlw	48
  6292  000AF8  6E17               	movwf	putchar_b_buf@symbol,c
  6293  000AFA  0C13               	retlw	19
  6294  000AFC                     __end_ofPL172:
  6295                           	opt stack 0
  6296                           tosu	equ	0xFFF
  6297                           tosh	equ	0xFFE
  6298                           tosl	equ	0xFFD
  6299                           pclath	equ	0xFFA
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon	equ	0xFF2
  6307                           intcon2	equ	0xFF1
  6308                           postinc0	equ	0xFEE
  6309                           wreg	equ	0xFE8
  6310                           indf1	equ	0xFE7
  6311                           plusw1	equ	0xFE3
  6312                           fsr1h	equ	0xFE2
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           postdec2	equ	0xFDD
  6317                           plusw2	equ	0xFDB
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8
  6321                           
  6322 ;; *************** function _key_press *****************
  6323 ;; Defined at:
  6324 ;;		line 5 in file "key.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  key             1   14[COMRAM] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 3F/0
  6335 ;;		On exit  : 3F/0
  6336 ;;		Unchanged: 3F/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;Total ram usage:        1 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:    3
  6345 ;; This function calls:
  6346 ;;		Nothing
  6347 ;; This function is called by:
  6348 ;;		_main
  6349 ;;		_RTOS_DispatchTask
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text22
  6354  001DFE                     __ptext22:
  6355                           	opt stack 0
  6356  001DFE                     _key_press:
  6357                           	opt stack 26
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;key.c: 7: static uint8_t count = 0;
  6361                           ;key.c: 8: uint8_t key;
  6362                           ;key.c: 10: if ((PORTB & (1<<4))==0)
  6363                           
  6364                           ;incstack = 0
  6365  001DFE  B881               	btfsc	3969,4,c	;volatile
  6366  001E00  D002               	goto	l805
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;key.c: 11: key = 1;
  6370  001E02  0E01               	movlw	1
  6371  001E04  D00B               	goto	L3
  6372  001E06                     l805:
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;key.c: 12: else if ((PORTB & (1<<1))==0)
  6376  001E06  B281               	btfsc	3969,1,c	;volatile
  6377  001E08  D002               	goto	l807
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;key.c: 13: key = 2;
  6381  001E0A  0E02               	movlw	2
  6382  001E0C  D007               	goto	L3
  6383  001E0E                     l807:
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;key.c: 14: else if ((PORTB & (1<<2))==0)
  6387  001E0E  B481               	btfsc	3969,2,c	;volatile
  6388  001E10  D002               	goto	l809
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;key.c: 15: key = 3;
  6392  001E12  0E03               	movlw	3
  6393  001E14  D003               	goto	L3
  6394  001E16                     l809:
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;key.c: 16: else if ((PORTB & (1<<3))==0)
  6398  001E16  B681               	btfsc	3969,3,c	;volatile
  6399  001E18  D003               	goto	l811
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;key.c: 17: key = 4;
  6403  001E1A  0E04               	movlw	4
  6404  001E1C                     L3:
  6405  001E1C  6E0F               	movwf	key_press@key,c
  6406  001E1E  D001               	goto	l6222
  6407  001E20                     l811:
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;key.c: 18: else
  6411                           ;key.c: 19: key = (0);
  6412  001E20  6A0F               	clrf	key_press@key,c
  6413  001E22                     l6222:
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;key.c: 22: if(key){
  6417  001E22  500F               	movf	key_press@key,w,c
  6418  001E24  E00C               	bz	l813
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;key.c: 23: if(count <= 30)
  6422  001E26  0E1F               	movlw	31
  6423  001E28  6066               	cpfslt	key_press@count,c
  6424  001E2A  0C1F               	retlw	31
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;key.c: 24: {
  6428                           ;key.c: 25: count++;
  6429  001E2C  2A66               	incf	key_press@count,f,c
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;key.c: 26: if(count == 30)
  6433  001E2E  0E1E               	movlw	30
  6434  001E30  1866               	xorwf	key_press@count,w,c
  6435  001E32  A4D8               	btfss	status,2,c
  6436  001E34  0012               	return	
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;key.c: 27: {
  6440                           ;key.c: 29: events = key;
  6441  001E36  C00F  F06E         	movff	key_press@key,_events
  6442                           
  6443                           ;key.c: 30: count = 0;
  6444  001E3A  6A66               	clrf	key_press@count,c
  6445  001E3C  0012               	return	
  6446  001E3E                     l813:
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;key.c: 34: else
  6450                           ;key.c: 35: {
  6451                           ;key.c: 36: count = 0;
  6452  001E3E  6A66               	clrf	key_press@count,c
  6453                           
  6454                           ; BSR set to: 0
  6455  001E40  0012               	return		;funcret
  6456  001E42                     __end_of_key_press:
  6457                           	opt stack 0
  6458                           tosu	equ	0xFFF
  6459                           tosh	equ	0xFFE
  6460                           tosl	equ	0xFFD
  6461                           pclath	equ	0xFFA
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           intcon2	equ	0xFF1
  6470                           postinc0	equ	0xFEE
  6471                           wreg	equ	0xFE8
  6472                           indf1	equ	0xFE7
  6473                           plusw1	equ	0xFE3
  6474                           fsr1h	equ	0xFE2
  6475                           fsr1l	equ	0xFE1
  6476                           indf2	equ	0xFDF
  6477                           postinc2	equ	0xFDE
  6478                           postdec2	equ	0xFDD
  6479                           plusw2	equ	0xFDB
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484 ;; *************** function _time_led *****************
  6485 ;; Defined at:
  6486 ;;		line 475 in file "common.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;		None
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      void 
  6493 ;; Registers used:
  6494 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6495 ;; Tracked objects:
  6496 ;;		On entry : 3F/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;Total ram usage:        0 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:    7
  6507 ;; This function calls:
  6508 ;;		_BMP085Pressure
  6509 ;;		_FillBuf
  6510 ;;		_RTOS_DeleteTask
  6511 ;;		_RTOS_SetTask
  6512 ;;		_Update_Matrix
  6513 ;;		_readTemp_Single
  6514 ;;		_scroll_left
  6515 ;; This function is called by:
  6516 ;;		_main
  6517 ;;		_time_set_min
  6518 ;;		_time_set_hr
  6519 ;;		_time_set_yr
  6520 ;;		_time_set_mt
  6521 ;;		_time_set_dt
  6522 ;;		_time_set_dy
  6523 ;;		_home_temp
  6524 ;;		_RTOS_DispatchTask
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528                           	psect	text23
  6529  00122E                     __ptext23:
  6530                           	opt stack 0
  6531  00122E                     _time_led:
  6532                           	opt stack 22
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;common.c: 479: switch (events)
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;incstack = 0
  6539  00122E  D051               	goto	l6206
  6540  001230                     l6164:
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;common.c: 482: FillBuf();
  6544  001230  EC7E  F005         	call	_FillBuf	;wreg free
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;common.c: 483: if((TTime.Ts>5)&&(TTime.Ts<7))
  6548  001234  0E05               	movlw	5
  6549  001236  65CB               	cpfsgt	_TTime& (0+255),b
  6550  001238  D00B               	goto	l6172
  6551                           
  6552                           ; BSR set to: 0
  6553  00123A  0E07               	movlw	7
  6554  00123C  61CB               	cpfslt	_TTime& (0+255),b
  6555  00123E  D008               	goto	l6172
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;common.c: 484: {
  6559                           ;common.c: 485: readTemp_Single(&temperature, &time_flag, &timer_val);
  6560  001240  0E69               	movlw	low _temperature
  6561  001242  6E1B               	movwf	readTemp_Single@buf,c
  6562  001244  0E6B               	movlw	low _time_flag
  6563  001246  6E1C               	movwf	readTemp_Single@time_flag,c
  6564  001248  0E6C               	movlw	low _timer_val
  6565  00124A  6E1D               	movwf	readTemp_Single@timer_val,c
  6566  00124C  ECA5  F006         	call	_readTemp_Single	;wreg free
  6567  001250                     l6172:
  6568                           
  6569                           ;common.c: 486: }
  6570                           ;common.c: 487: if(((TTime.Ts>14)&&(TTime.Ts<16))||((TTime.Ts>45)&&(TTime.Ts<47)))
  6571  001250  0E0E               	movlw	14
  6572  001252  0100               	movlb	0	; () banked
  6573  001254  65CB               	cpfsgt	_TTime& (0+255),b
  6574  001256  D003               	goto	l6176
  6575                           
  6576                           ; BSR set to: 0
  6577  001258  0E0F               	movlw	15
  6578  00125A  65CB               	cpfsgt	_TTime& (0+255),b
  6579  00125C  D006               	goto	l6180
  6580  00125E                     l6176:
  6581                           
  6582                           ; BSR set to: 0
  6583  00125E  0E2D               	movlw	45
  6584  001260  65CB               	cpfsgt	_TTime& (0+255),b
  6585  001262  D043               	goto	l6208
  6586                           
  6587                           ; BSR set to: 0
  6588  001264  0E2F               	movlw	47
  6589  001266  61CB               	cpfslt	_TTime& (0+255),b
  6590  001268  D040               	goto	l6208
  6591  00126A                     l6180:
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;common.c: 488: events = 3;
  6595  00126A  0E03               	movlw	3
  6596  00126C  D017               	goto	L4
  6597  00126E                     l6182:
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;common.c: 491: RTOS_DeleteTask(time_led);
  6601  00126E  D848               	call	PL98	;call to abstracted procedure
  6602  001270  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  6603                           
  6604                           ;common.c: 492: RTOS_SetTask(time_set_min, 0, 50);
  6605  001274  0E4C               	movlw	low _time_set_min
  6606  001276  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6607  001278  0E11               	movlw	high _time_set_min
  6608  00127A  D83B               	call	PL12	;call to abstracted procedure
  6609  00127C  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6610                           
  6611                           ;common.c: 493: RTOS_SetTask(default_state, 2000, 0);
  6612  001280  EC84  F006         	call	PL2	;call to abstracted procedure
  6613  001284  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6614                           
  6615                           ;common.c: 494: TSTime = TTime;
  6616  001288  EE20  F0CB         	lfsr	2,_TTime
  6617  00128C  EE10  F04D         	lfsr	1,_TSTime
  6618  001290  0E06               	movlw	6
  6619  001292                     u4841:
  6620  001292  CFDB FFE3          	movff	plusw2,plusw1
  6621  001296  06E8               	decf	wreg,f,c
  6622  001298  E2FC               	bc	u4841
  6623  00129A                     l6190:
  6624                           
  6625                           ;common.c: 495: events = 5;
  6626  00129A  0E05               	movlw	5
  6627  00129C                     L4:
  6628  00129C  6E6E               	movwf	_events,c
  6629                           
  6630                           ;common.c: 496: break;
  6631  00129E  D025               	goto	l6208
  6632  0012A0                     l6192:
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;common.c: 501: BMP085Pressure(1);
  6636  0012A0  0E01               	movlw	1
  6637  0012A2  ECD1  F00F         	call	_BMP085Pressure
  6638                           
  6639                           ;common.c: 507: break;
  6640  0012A6  D021               	goto	l6208
  6641  0012A8                     l6194:
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;common.c: 511: scroll_left();
  6645  0012A8  EC14  F00E         	call	_scroll_left	;wreg free
  6646                           
  6647                           ;common.c: 512: RTOS_DeleteTask(time_led);
  6648  0012AC  D829               	call	PL98	;call to abstracted procedure
  6649  0012AE  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  6650                           
  6651                           ;common.c: 513: RTOS_SetTask(home_temp, 0, 20);
  6652  0012B2  0E84               	movlw	low _home_temp
  6653  0012B4  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6654  0012B6  0E06               	movlw	high _home_temp
  6655  0012B8  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6656  0012BA  EC22  F003         	call	PL18	;call to abstracted procedure
  6657  0012BE  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6658  0012C2  D7EB               	goto	l6190
  6659  0012C4                     l6200:
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;common.c: 517: events = 5;
  6663  0012C4  0E05               	movlw	5
  6664  0012C6  6E6E               	movwf	_events,c
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;common.c: 518: RTOS_DeleteTask(default_state);
  6668  0012C8  ECBE  F004         	call	PL42	;call to abstracted procedure
  6669  0012CC  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  6670                           
  6671                           ;common.c: 519: break;
  6672  0012D0  D00C               	goto	l6208
  6673  0012D2                     l6206:
  6674                           
  6675                           ; BSR set to: 0
  6676  0012D2  506E               	movf	_events,w,c
  6677                           
  6678                           ; Switch size 1, requested type "space"
  6679                           ; Number of cases is 6, Range of values is 1 to 6
  6680                           ; switch strategies available:
  6681                           ; Name         Instructions Cycles
  6682                           ; simple_byte           19    10 (average)
  6683                           ;	Chosen strategy is simple_byte
  6684  0012D4  0A01               	xorlw	1	; case 1
  6685  0012D6  E0CB               	bz	l6182
  6686  0012D8  0A03               	xorlw	3	; case 2
  6687  0012DA  E0E2               	bz	l6192
  6688  0012DC  0A01               	xorlw	1	; case 3
  6689  0012DE  E0E4               	bz	l6194
  6690  0012E0  0A07               	xorlw	7	; case 4
  6691  0012E2  E0F0               	bz	l6200
  6692  0012E4  0A01               	xorlw	1	; case 5
  6693  0012E6  E0A4               	bz	l6164
  6694  0012E8  0A03               	xorlw	3	; case 6
  6695  0012EA                     l6208:
  6696                           
  6697                           ;common.c: 524: Update_Matrix(Dis_Buff);
  6698  0012EA  0EAB               	movlw	low _Dis_Buff
  6699  0012EC  6E11               	movwf	Update_Matrix@buf,c
  6700  0012EE  EF5E  F00F         	goto	_Update_Matrix	;wreg free
  6701  0012F2                     __end_of_time_led:
  6702                           	opt stack 0
  6703  0012F2                     PL12:
  6704                           	opt stack 22
  6705  0012F2  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6706  0012F4  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  6707  0012F6  6A11               	clrf	RTOS_SetTask@taskDelay,c
  6708  0012F8  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  6709  0012FA  0E32               	movlw	50
  6710  0012FC  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  6711  0012FE  0C32               	retlw	50
  6712  001300                     __end_ofPL12:
  6713                           	opt stack 0
  6714  001300                     PL98:
  6715                           	opt stack 22
  6716  001300  0E2E               	movlw	low _time_led
  6717  001302  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6718  001304  0E12               	movlw	high _time_led
  6719  001306  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6720  001308  0012               	return	
  6721  00130A                     __end_ofPL98:
  6722                           	opt stack 0
  6723                           tosu	equ	0xFFF
  6724                           tosh	equ	0xFFE
  6725                           tosl	equ	0xFFD
  6726                           pclath	equ	0xFFA
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           intcon	equ	0xFF2
  6734                           intcon2	equ	0xFF1
  6735                           postinc0	equ	0xFEE
  6736                           wreg	equ	0xFE8
  6737                           indf1	equ	0xFE7
  6738                           plusw1	equ	0xFE3
  6739                           fsr1h	equ	0xFE2
  6740                           fsr1l	equ	0xFE1
  6741                           indf2	equ	0xFDF
  6742                           postinc2	equ	0xFDE
  6743                           postdec2	equ	0xFDD
  6744                           plusw2	equ	0xFDB
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _time_set_yr *****************
  6750 ;; Defined at:
  6751 ;;		line 143 in file "common.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      void 
  6758 ;; Registers used:
  6759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 3F/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;Total ram usage:        0 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    7
  6772 ;; This function calls:
  6773 ;;		_RTOS_DeleteTask
  6774 ;;		_RTOS_SetTask
  6775 ;;		_Update_Matrix
  6776 ;;		___lbdiv
  6777 ;;		___lbmod
  6778 ;;		_putchar_b_buf
  6779 ;;		_setDate
  6780 ;; This function is called by:
  6781 ;;		_time_set_hr
  6782 ;;		_RTOS_DispatchTask
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text24
  6787  000F64                     __ptext24:
  6788                           	opt stack 0
  6789  000F64                     _time_set_yr:
  6790                           	opt stack 22
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;common.c: 145: switch (events)
  6794                           
  6795                           ;incstack = 0
  6796  000F64  D03D               	goto	l5902
  6797  000F66                     l5860:
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;common.c: 151: RTOS_DeleteTask(time_set_yr);
  6801  000F66  D86F               	call	PL132	;call to abstracted procedure
  6802  000F68  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  6803                           
  6804                           ;common.c: 152: RTOS_SetTask(time_set_mt, 0, 20);
  6805  000F6C  0E8E               	movlw	low _time_set_mt
  6806  000F6E  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6807  000F70  0E04               	movlw	high _time_set_mt
  6808  000F72  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6809  000F74  EC22  F003         	call	PL18	;call to abstracted procedure
  6810  000F78  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6811                           
  6812                           ;common.c: 153: RTOS_SetTask(default_state, 2000, 0);
  6813  000F7C  EC84  F006         	call	PL2	;call to abstracted procedure
  6814  000F80  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6815                           
  6816                           ;common.c: 154: events = 5;
  6817  000F84  0E05               	movlw	5
  6818  000F86  6E6E               	movwf	_events,c
  6819                           
  6820                           ;common.c: 155: en_put=0;
  6821  000F88  906D               	bcf	_en_put/(0+8),_en_put& (0+7),c
  6822                           
  6823                           ;common.c: 156: break;
  6824  000F8A  D034               	goto	l663
  6825  000F8C                     l5870:
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;common.c: 158: RTOS_DeleteTask(time_set_yr);
  6829  000F8C  D85C               	call	PL132	;call to abstracted procedure
  6830  000F8E  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  6831                           
  6832                           ;common.c: 159: RTOS_DeleteTask(default_state);
  6833  000F92  ECBE  F004         	call	PL42	;call to abstracted procedure
  6834  000F96  EC90  F00B         	call	_RTOS_DeleteTask	;wreg free
  6835                           
  6836                           ;common.c: 160: RTOS_SetTask(time_led, 0, 20);
  6837  000F9A  ECB4  F004         	call	PL10	;call to abstracted procedure
  6838  000F9E  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6839                           
  6840                           ;common.c: 161: events = 5;
  6841  000FA2  0E05               	movlw	5
  6842  000FA4  6E6E               	movwf	_events,c
  6843                           
  6844                           ;common.c: 162: break;
  6845  000FA6  D026               	goto	l663
  6846  000FA8                     l5876:
  6847                           
  6848                           ; BSR set to: 0
  6849                           ;common.c: 164: TSTime.Tyr++;
  6850  000FA8  2A53               	incf	_TSTime+6,f,c
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;common.c: 165: if(TSTime.Tyr > 99) TSTime.Tyr = 0;
  6854  000FAA  0E63               	movlw	99
  6855  000FAC  6453               	cpfsgt	_TSTime+6,c
  6856  000FAE  D001               	goto	l5882
  6857                           
  6858                           ; BSR set to: 0
  6859  000FB0  6A53               	clrf	_TSTime+6,c
  6860  000FB2                     l5882:
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;common.c: 166: RTOS_SetTask(default_state, 2000, 0);
  6864  000FB2  EC84  F006         	call	PL2	;call to abstracted procedure
  6865  000FB6  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6866                           
  6867                           ;common.c: 167: events = 5;
  6868                           
  6869                           ;common.c: 168: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6870  000FBA  EC8F  F006         	call	PL8	;call to abstracted procedure
  6871  000FBE  EC7C  F00F         	call	_setDate
  6872                           
  6873                           ;common.c: 169: break;
  6874  000FC2  D018               	goto	l663
  6875  000FC4                     l5888:
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;common.c: 171: TSTime.Tyr--;
  6879  000FC4  0653               	decf	_TSTime+6,f,c
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;common.c: 172: if(TSTime.Tyr == 255) TSTime.Tyr = 99;
  6883  000FC6  2853               	incf	_TSTime+6,w,c
  6884  000FC8  E102               	bnz	l5894
  6885                           
  6886                           ; BSR set to: 0
  6887  000FCA  0E63               	movlw	99
  6888  000FCC  6E53               	movwf	_TSTime+6,c
  6889  000FCE                     l5894:
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;common.c: 173: RTOS_SetTask(default_state, 2000, 0);
  6893  000FCE  EC84  F006         	call	PL2	;call to abstracted procedure
  6894  000FD2  EC18  F00C         	call	_RTOS_SetTask	;wreg free
  6895                           
  6896                           ;common.c: 174: events = 5;
  6897                           
  6898                           ;common.c: 175: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6899  000FD6  EC8F  F006         	call	PL8	;call to abstracted procedure
  6900  000FDA  EC7C  F00F         	call	_setDate
  6901                           
  6902                           ;common.c: 176: break;
  6903  000FDE  D00A               	goto	l663
  6904  000FE0                     l5902:
  6905                           
  6906                           ; BSR set to: 0
  6907  000FE0  506E               	movf	_events,w,c
  6908                           
  6909                           ; Switch size 1, requested type "space"
  6910                           ; Number of cases is 5, Range of values is 1 to 5
  6911                           ; switch strategies available:
  6912                           ; Name         Instructions Cycles
  6913                           ; simple_byte           16     9 (average)
  6914                           ;	Chosen strategy is simple_byte
  6915  000FE2  0A01               	xorlw	1	; case 1
  6916  000FE4  E0C0               	bz	l5860
  6917  000FE6  0A03               	xorlw	3	; case 2
  6918  000FE8  E0DF               	bz	l5876
  6919  000FEA  0A01               	xorlw	1	; case 3
  6920  000FEC  E0EB               	bz	l5888
  6921  000FEE  0A07               	xorlw	7	; case 4
  6922  000FF0  E0CD               	bz	l5870
  6923  000FF2  0A01               	xorlw	1	; case 5
  6924  000FF4                     l663:
  6925                           
  6926                           ;common.c: 178: if(en_put)
  6927  000FF4  A06D               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6928  000FF6  D021               	goto	l5906
  6929                           
  6930                           ;common.c: 179: {
  6931                           ;common.c: 180: putchar_b_buf(0,'Ð');
  6932  000FF8  0ED0               	movlw	208
  6933  000FFA  6E17               	movwf	putchar_b_buf@symbol,c
  6934  000FFC  0E00               	movlw	0
  6935  000FFE  EC47  F00D         	call	_putchar_b_buf
  6936                           
  6937                           ;common.c: 181: putchar_b_buf(6,'ê');
  6938  001002  0EEA               	movlw	234
  6939  001004  6E17               	movwf	putchar_b_buf@symbol,c
  6940  001006  0E06               	movlw	6
  6941  001008  EC47  F00D         	call	_putchar_b_buf
  6942                           
  6943                           ;common.c: 182: putchar_b_buf(12,':');
  6944  00100C  EC9E  F006         	call	PL110	;call to abstracted procedure
  6945  001010  EC47  F00D         	call	_putchar_b_buf
  6946                           
  6947                           ;common.c: 183: putchar_b_buf(18,(TSTime.Tyr/10) % 10 + 48);
  6948  001014  0E0A               	movlw	10
  6949  001016  6E13               	movwf	___lbmod@divisor,c
  6950  001018  6E0F               	movwf	___lbdiv@divisor,c
  6951  00101A  5053               	movf	_TSTime+6,w,c
  6952  00101C  ECEC  F00F         	call	___lbdiv
  6953  001020  ECD6  F010         	call	___lbmod
  6954  001024  D818               	call	PL170	;call to abstracted procedure
  6955  001026  EC47  F00D         	call	_putchar_b_buf
  6956                           
  6957                           ;common.c: 184: putchar_b_buf(24,TSTime.Tyr % 10 + 48);
  6958  00102A  0E0A               	movlw	10
  6959  00102C  6E13               	movwf	___lbmod@divisor,c
  6960  00102E  5053               	movf	_TSTime+6,w,c
  6961  001030  ECD6  F010         	call	___lbmod
  6962  001034  D80D               	call	PL146	;call to abstracted procedure
  6963  001036  EC47  F00D         	call	_putchar_b_buf
  6964  00103A                     l5906:
  6965                           
  6966                           ;common.c: 185: }
  6967                           ;common.c: 186: Update_Matrix(Dis_Buff);
  6968  00103A  0EAB               	movlw	low _Dis_Buff
  6969  00103C  6E11               	movwf	Update_Matrix@buf,c
  6970  00103E  EC5E  F00F         	call	_Update_Matrix	;wreg free
  6971                           
  6972                           ;common.c: 187: en_put=1;
  6973  001042  806D               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6974  001044  0012               	return		;funcret
  6975  001046                     __end_of_time_set_yr:
  6976                           	opt stack 0
  6977  001046                     PL132:
  6978                           	opt stack 22
  6979  001046  0E64               	movlw	low _time_set_yr
  6980  001048  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6981  00104A  0E0F               	movlw	high _time_set_yr
  6982  00104C  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6983  00104E  0012               	return	
  6984  001050                     __end_ofPL132:
  6985                           	opt stack 0
  6986  001050                     PL146:
  6987                           	opt stack 22
  6988  001050  0F30               	addlw	48
  6989  001052  6E17               	movwf	putchar_b_buf@symbol,c
  6990  001054  0C18               	retlw	24
  6991  001056                     __end_ofPL146:
  6992                           	opt stack 0
  6993  001056                     PL170:
  6994                           	opt stack 22
  6995  001056  0F30               	addlw	48
  6996  001058  6E17               	movwf	putchar_b_buf@symbol,c
  6997  00105A  0C12               	retlw	18
  6998  00105C                     __end_ofPL170:
  6999                           	opt stack 0
  7000                           tosu	equ	0xFFF
  7001                           tosh	equ	0xFFE
  7002                           tosl	equ	0xFFD
  7003                           pclath	equ	0xFFA
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodh	equ	0xFF4
  7009                           prodl	equ	0xFF3
  7010                           intcon	equ	0xFF2
  7011                           intcon2	equ	0xFF1
  7012                           postinc0	equ	0xFEE
  7013                           wreg	equ	0xFE8
  7014                           indf1	equ	0xFE7
  7015                           plusw1	equ	0xFE3
  7016                           fsr1h	equ	0xFE2
  7017                           fsr1l	equ	0xFE1
  7018                           indf2	equ	0xFDF
  7019                           postinc2	equ	0xFDE
  7020                           postdec2	equ	0xFDD
  7021                           plusw2	equ	0xFDB
  7022                           fsr2h	equ	0xFDA
  7023                           fsr2l	equ	0xFD9
  7024                           status	equ	0xFD8
  7025                           
  7026 ;; *************** function _setTime *****************
  7027 ;; Defined at:
  7028 ;;		line 71 in file "ds3231.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;  hSet            1    wreg     unsigned char 
  7031 ;;  mSet            1   27[COMRAM] unsigned char 
  7032 ;;  sSet            1   28[COMRAM] unsigned char 
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  hSet            1   29[COMRAM] unsigned char 
  7035 ;; Return value:  Size  Location     Type
  7036 ;;                  1    wreg      void 
  7037 ;; Registers used:
  7038 ;;		wreg, status,2, status,0, cstack
  7039 ;; Tracked objects:
  7040 ;;		On entry : 0/0
  7041 ;;		On exit  : 0/0
  7042 ;;		Unchanged: 0/0
  7043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7047 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;Total ram usage:        3 bytes
  7049 ;; Hardware stack levels used:    1
  7050 ;; Hardware stack levels required when called:    6
  7051 ;; This function calls:
  7052 ;;		_DS3231_Write
  7053 ;;		_decimal_to_bcd
  7054 ;; This function is called by:
  7055 ;;		_time_set_min
  7056 ;;		_time_set_hr
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text25
  7061  00203C                     __ptext25:
  7062                           	opt stack 0
  7063  00203C                     _setTime:
  7064                           	opt stack 22
  7065                           
  7066                           ;incstack = 0
  7067                           ;setTime@hSet stored from wreg
  7068  00203C  6E1E               	movwf	setTime@hSet,c
  7069                           
  7070                           ;ds3231.c: 73: DS3231_Write(0x00, (decimal_to_bcd(sSet)));
  7071  00203E  501D               	movf	setTime@sSet,w,c
  7072  002040  ECC3  F010         	call	_decimal_to_bcd
  7073  002044  6E1A               	movwf	DS3231_Write@value,c
  7074  002046  0E00               	movlw	0
  7075  002048  EC74  F011         	call	_DS3231_Write
  7076                           
  7077                           ;ds3231.c: 74: DS3231_Write(0x01, (decimal_to_bcd(mSet)));
  7078  00204C  501C               	movf	setTime@mSet,w,c
  7079  00204E  ECC3  F010         	call	_decimal_to_bcd
  7080  002052  6E1A               	movwf	DS3231_Write@value,c
  7081  002054  0E01               	movlw	1
  7082  002056  EC74  F011         	call	_DS3231_Write
  7083                           
  7084                           ;ds3231.c: 75: DS3231_Write(0x02, (0x3F & (decimal_to_bcd(hSet))));
  7085  00205A  501E               	movf	setTime@hSet,w,c
  7086  00205C  ECC3  F010         	call	_decimal_to_bcd
  7087  002060  0B3F               	andlw	63
  7088  002062  6E1A               	movwf	DS3231_Write@value,c
  7089  002064  0E02               	movlw	2
  7090  002066  EF74  F011         	goto	_DS3231_Write
  7091  00206A                     __end_of_setTime:
  7092                           	opt stack 0
  7093                           tosu	equ	0xFFF
  7094                           tosh	equ	0xFFE
  7095                           tosl	equ	0xFFD
  7096                           pclath	equ	0xFFA
  7097                           tblptru	equ	0xFF8
  7098                           tblptrh	equ	0xFF7
  7099                           tblptrl	equ	0xFF6
  7100                           tablat	equ	0xFF5
  7101                           prodh	equ	0xFF4
  7102                           prodl	equ	0xFF3
  7103                           intcon	equ	0xFF2
  7104                           intcon2	equ	0xFF1
  7105                           postinc0	equ	0xFEE
  7106                           wreg	equ	0xFE8
  7107                           indf1	equ	0xFE7
  7108                           plusw1	equ	0xFE3
  7109                           fsr1h	equ	0xFE2
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           plusw2	equ	0xFDB
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8
  7118                           
  7119 ;; *************** function _setDate *****************
  7120 ;; Defined at:
  7121 ;;		line 79 in file "ds3231.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;  daySet          1    wreg     unsigned char 
  7124 ;;  dateSet         1   27[COMRAM] unsigned char 
  7125 ;;  monthSet        1   28[COMRAM] unsigned char 
  7126 ;;  yearSet         1   29[COMRAM] unsigned char 
  7127 ;; Auto vars:     Size  Location     Type
  7128 ;;  daySet          1   30[COMRAM] unsigned char 
  7129 ;; Return value:  Size  Location     Type
  7130 ;;                  1    wreg      void 
  7131 ;; Registers used:
  7132 ;;		wreg, status,2, status,0, cstack
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7138 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;Total ram usage:        4 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:    6
  7145 ;; This function calls:
  7146 ;;		_DS3231_Write
  7147 ;;		_decimal_to_bcd
  7148 ;; This function is called by:
  7149 ;;		_time_set_yr
  7150 ;;		_time_set_mt
  7151 ;;		_time_set_dt
  7152 ;;		_time_set_dy
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156                           	psect	text26
  7157  001EF8                     __ptext26:
  7158                           	opt stack 0
  7159  001EF8                     _setDate:
  7160                           	opt stack 22
  7161                           
  7162                           ;incstack = 0
  7163                           ;setDate@daySet stored from wreg
  7164  001EF8  6E1F               	movwf	setDate@daySet,c
  7165                           
  7166                           ;ds3231.c: 81: DS3231_Write(0x03, (decimal_to_bcd(daySet)));
  7167  001EFA  501F               	movf	setDate@daySet,w,c
  7168  001EFC  ECC3  F010         	call	_decimal_to_bcd
  7169  001F00  6E1A               	movwf	DS3231_Write@value,c
  7170  001F02  0E03               	movlw	3
  7171  001F04  EC74  F011         	call	_DS3231_Write
  7172                           
  7173                           ;ds3231.c: 82: DS3231_Write(0x04, (decimal_to_bcd(dateSet)));
  7174  001F08  501C               	movf	setDate@dateSet,w,c
  7175  001F0A  ECC3  F010         	call	_decimal_to_bcd
  7176  001F0E  6E1A               	movwf	DS3231_Write@value,c
  7177  001F10  0E04               	movlw	4
  7178  001F12  EC74  F011         	call	_DS3231_Write
  7179                           
  7180                           ;ds3231.c: 83: DS3231_Write(0x05, (decimal_to_bcd(monthSet)));
  7181  001F16  501D               	movf	setDate@monthSet,w,c
  7182  001F18  ECC3  F010         	call	_decimal_to_bcd
  7183  001F1C  6E1A               	movwf	DS3231_Write@value,c
  7184  001F1E  0E05               	movlw	5
  7185  001F20  EC74  F011         	call	_DS3231_Write
  7186                           
  7187                           ;ds3231.c: 84: DS3231_Write(0x06, (decimal_to_bcd(yearSet)));
  7188  001F24  501E               	movf	setDate@yearSet,w,c
  7189  001F26  ECC3  F010         	call	_decimal_to_bcd
  7190  001F2A  6E1A               	movwf	DS3231_Write@value,c
  7191  001F2C  0E06               	movlw	6
  7192  001F2E  EF74  F011         	goto	_DS3231_Write
  7193  001F32                     __end_of_setDate:
  7194                           	opt stack 0
  7195                           tosu	equ	0xFFF
  7196                           tosh	equ	0xFFE
  7197                           tosl	equ	0xFFD
  7198                           pclath	equ	0xFFA
  7199                           tblptru	equ	0xFF8
  7200                           tblptrh	equ	0xFF7
  7201                           tblptrl	equ	0xFF6
  7202                           tablat	equ	0xFF5
  7203                           prodh	equ	0xFF4
  7204                           prodl	equ	0xFF3
  7205                           intcon	equ	0xFF2
  7206                           intcon2	equ	0xFF1
  7207                           postinc0	equ	0xFEE
  7208                           wreg	equ	0xFE8
  7209                           indf1	equ	0xFE7
  7210                           plusw1	equ	0xFE3
  7211                           fsr1h	equ	0xFE2
  7212                           fsr1l	equ	0xFE1
  7213                           indf2	equ	0xFDF
  7214                           postinc2	equ	0xFDE
  7215                           postdec2	equ	0xFDD
  7216                           plusw2	equ	0xFDB
  7217                           fsr2h	equ	0xFDA
  7218                           fsr2l	equ	0xFD9
  7219                           status	equ	0xFD8
  7220                           
  7221 ;; *************** function _decimal_to_bcd *****************
  7222 ;; Defined at:
  7223 ;;		line 10 in file "ds3231.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  d               1    wreg     unsigned char 
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;  d               1   24[COMRAM] unsigned char 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  1    wreg      unsigned char 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;Total ram usage:        3 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    4
  7244 ;; This function calls:
  7245 ;;		___lbdiv
  7246 ;;		___lbmod
  7247 ;; This function is called by:
  7248 ;;		_setTime
  7249 ;;		_setDate
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           	psect	text27
  7254  002186                     __ptext27:
  7255                           	opt stack 0
  7256  002186                     _decimal_to_bcd:
  7257                           	opt stack 23
  7258                           
  7259                           ;incstack = 0
  7260                           ;decimal_to_bcd@d stored from wreg
  7261  002186  6E19               	movwf	decimal_to_bcd@d,c
  7262                           
  7263                           ;ds3231.c: 12: return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
  7264  002188  0E0A               	movlw	10
  7265  00218A  6E13               	movwf	___lbmod@divisor,c
  7266  00218C  5019               	movf	decimal_to_bcd@d,w,c
  7267  00218E  ECD6  F010         	call	___lbmod
  7268  002192  6E17               	movwf	??_decimal_to_bcd& (0+255),c
  7269  002194  0E0F               	movlw	15
  7270  002196  1617               	andwf	??_decimal_to_bcd,f,c
  7271  002198  0E0A               	movlw	10
  7272  00219A  6E0F               	movwf	___lbdiv@divisor,c
  7273  00219C  5019               	movf	decimal_to_bcd@d,w,c
  7274  00219E  ECEC  F00F         	call	___lbdiv
  7275  0021A2  6E18               	movwf	(??_decimal_to_bcd+1)& (0+255),c
  7276  0021A4  3818               	swapf	??_decimal_to_bcd+1,w,c
  7277  0021A6  0BF0               	andlw	240
  7278  0021A8  1017               	iorwf	??_decimal_to_bcd,w,c
  7279  0021AA  0012               	return		;funcret
  7280  0021AC                     __end_of_decimal_to_bcd:
  7281                           	opt stack 0
  7282                           tosu	equ	0xFFF
  7283                           tosh	equ	0xFFE
  7284                           tosl	equ	0xFFD
  7285                           pclath	equ	0xFFA
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           intcon	equ	0xFF2
  7293                           intcon2	equ	0xFF1
  7294                           postinc0	equ	0xFEE
  7295                           wreg	equ	0xFE8
  7296                           indf1	equ	0xFE7
  7297                           plusw1	equ	0xFE3
  7298                           fsr1h	equ	0xFE2
  7299                           fsr1l	equ	0xFE1
  7300                           indf2	equ	0xFDF
  7301                           postinc2	equ	0xFDE
  7302                           postdec2	equ	0xFDD
  7303                           plusw2	equ	0xFDB
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function _DS3231_Write *****************
  7309 ;; Defined at:
  7310 ;;		line 28 in file "ds3231.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  address         1    wreg     unsigned char 
  7313 ;;  value           1   25[COMRAM] unsigned char 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  address         1   26[COMRAM] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      void 
  7318 ;; Registers used:
  7319 ;;		wreg, status,2, status,0, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7325 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;Total ram usage:        2 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    5
  7332 ;; This function calls:
  7333 ;;		_I2C_start
  7334 ;;		_I2C_stop
  7335 ;;		_I2C_write
  7336 ;; This function is called by:
  7337 ;;		_DS3231_init
  7338 ;;		_setTime
  7339 ;;		_setDate
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           	psect	text28
  7344  0022E8                     __ptext28:
  7345                           	opt stack 0
  7346  0022E8                     _DS3231_Write:
  7347                           	opt stack 23
  7348                           
  7349                           ;incstack = 0
  7350                           ;DS3231_Write@address stored from wreg
  7351  0022E8  6E1B               	movwf	DS3231_Write@address,c
  7352                           
  7353                           ;ds3231.c: 30: I2C_start(0xD0,0);
  7354  0022EA  6A10               	clrf	I2C_start@_R_W,c
  7355  0022EC  0ED0               	movlw	208
  7356  0022EE  EC35  F010         	call	_I2C_start
  7357                           
  7358                           ;ds3231.c: 31: I2C_write(address);
  7359  0022F2  501B               	movf	DS3231_Write@address,w,c
  7360  0022F4  EC59  F011         	call	_I2C_write
  7361                           
  7362                           ;ds3231.c: 32: I2C_write(value);
  7363  0022F8  501A               	movf	DS3231_Write@value,w,c
  7364  0022FA  EC59  F011         	call	_I2C_write
  7365                           
  7366                           ;ds3231.c: 33: I2C_stop();
  7367  0022FE  EFE4  F011         	goto	_I2C_stop	;wreg free
  7368  002302                     __end_of_DS3231_Write:
  7369                           	opt stack 0
  7370                           tosu	equ	0xFFF
  7371                           tosh	equ	0xFFE
  7372                           tosl	equ	0xFFD
  7373                           pclath	equ	0xFFA
  7374                           tblptru	equ	0xFF8
  7375                           tblptrh	equ	0xFF7
  7376                           tblptrl	equ	0xFF6
  7377                           tablat	equ	0xFF5
  7378                           prodh	equ	0xFF4
  7379                           prodl	equ	0xFF3
  7380                           intcon	equ	0xFF2
  7381                           intcon2	equ	0xFF1
  7382                           postinc0	equ	0xFEE
  7383                           wreg	equ	0xFE8
  7384                           indf1	equ	0xFE7
  7385                           plusw1	equ	0xFE3
  7386                           fsr1h	equ	0xFE2
  7387                           fsr1l	equ	0xFE1
  7388                           indf2	equ	0xFDF
  7389                           postinc2	equ	0xFDE
  7390                           postdec2	equ	0xFDD
  7391                           plusw2	equ	0xFDB
  7392                           fsr2h	equ	0xFDA
  7393                           fsr2l	equ	0xFD9
  7394                           status	equ	0xFD8
  7395                           
  7396 ;; *************** function _putchar_b_buf *****************
  7397 ;; Defined at:
  7398 ;;		line 50 in file "display.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;  x               1    wreg     unsigned char 
  7401 ;;  symbol          1   22[COMRAM] unsigned char 
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;  x               1   26[COMRAM] unsigned char 
  7404 ;;  i               1   28[COMRAM] unsigned char 
  7405 ;;  j               1   27[COMRAM] unsigned char 
  7406 ;;  mask            1   25[COMRAM] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  1    wreg      void 
  7409 ;; Registers used:
  7410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7416 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;Total ram usage:        7 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    4
  7423 ;; This function calls:
  7424 ;;		_pixel_off
  7425 ;;		_pixel_on
  7426 ;; This function is called by:
  7427 ;;		_time_set_min
  7428 ;;		_time_set_hr
  7429 ;;		_time_set_yr
  7430 ;;		_time_set_mt
  7431 ;;		_time_set_dt
  7432 ;;		_time_set_dy
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           	psect	text29
  7437  001A8E                     __ptext29:
  7438                           	opt stack 0
  7439  001A8E                     _putchar_b_buf:
  7440                           	opt stack 24
  7441                           
  7442                           ;incstack = 0
  7443                           ;putchar_b_buf@x stored from wreg
  7444  001A8E  6E1B               	movwf	putchar_b_buf@x,c
  7445                           
  7446                           ;display.c: 52: uint8_t i, j, mask=0x01;
  7447  001A90  0E01               	movlw	1
  7448  001A92  6E1A               	movwf	putchar_b_buf@mask,c
  7449                           
  7450                           ;display.c: 55: for(i=0; i<5; i++)
  7451  001A94  6A1D               	clrf	putchar_b_buf@i,c
  7452  001A96                     l383:
  7453                           
  7454                           ;display.c: 56: {
  7455                           ;display.c: 57: for(j=0;j<8;j++)
  7456  001A96  6A1C               	clrf	putchar_b_buf@j,c
  7457  001A98                     l5474:
  7458                           
  7459                           ;display.c: 58: {
  7460                           ;display.c: 59: if(Font[symbol] [i] & mask)
  7461  001A98  5017               	movf	putchar_b_buf@symbol,w,c
  7462  001A9A  0D05               	mullw	5
  7463  001A9C  0EC8               	movlw	low _Font
  7464  001A9E  6E18               	movwf	??_putchar_b_buf& (0+255),c
  7465  001AA0  0EBA               	movlw	high _Font
  7466  001AA2  6E19               	movwf	(??_putchar_b_buf+1)& (0+255),c
  7467  001AA4  50F3               	movf	prodl,w,c
  7468  001AA6  2618               	addwf	??_putchar_b_buf,f,c
  7469  001AA8  50F4               	movf	prodh,w,c
  7470  001AAA  2219               	addwfc	??_putchar_b_buf+1,f,c
  7471  001AAC  501D               	movf	putchar_b_buf@i,w,c
  7472  001AAE  2618               	addwf	??_putchar_b_buf,f,c
  7473  001AB0  0E00               	movlw	0
  7474  001AB2  2219               	addwfc	??_putchar_b_buf+1,f,c
  7475  001AB4  C018  FFF6         	movff	??_putchar_b_buf,tblptrl
  7476  001AB8  C019  FFF7         	movff	??_putchar_b_buf+1,tblptrh
  7477  001ABC                     	if	0	;tblptru may be non-zero
  7478  001ABC                     	endif
  7479  001ABC                     	if	0	;tblptru may be non-zero
  7480  001ABC                     	endif
  7481  001ABC  0008               	tblrd		*
  7482  001ABE  50F5               	movf	tablat,w,c
  7483  001AC0  141A               	andwf	putchar_b_buf@mask,w,c
  7484  001AC2  E007               	bz	l5478
  7485                           
  7486                           ;display.c: 60: pixel_on(x+i,j);
  7487  001AC4  C01C  F00F         	movff	putchar_b_buf@j,pixel_on@y
  7488  001AC8  501B               	movf	putchar_b_buf@x,w,c
  7489  001ACA  241D               	addwf	putchar_b_buf@i,w,c
  7490  001ACC  EC0D  F011         	call	_pixel_on
  7491  001AD0  D006               	goto	l5480
  7492  001AD2                     l5478:
  7493                           
  7494                           ;display.c: 61: else
  7495                           ;display.c: 62: pixel_off(x+i,j);
  7496  001AD2  C01C  F00F         	movff	putchar_b_buf@j,pixel_off@y
  7497  001AD6  501B               	movf	putchar_b_buf@x,w,c
  7498  001AD8  241D               	addwf	putchar_b_buf@i,w,c
  7499  001ADA  EC9B  F010         	call	_pixel_off
  7500  001ADE                     l5480:
  7501                           
  7502                           ;display.c: 64: mask = mask<<1;
  7503  001ADE  90D8               	bcf	status,0,c
  7504  001AE0  361A               	rlcf	putchar_b_buf@mask,f,c
  7505  001AE2  2A1C               	incf	putchar_b_buf@j,f,c
  7506  001AE4  0E07               	movlw	7
  7507  001AE6  641C               	cpfsgt	putchar_b_buf@j,c
  7508  001AE8  D7D7               	goto	l5474
  7509                           
  7510                           ;display.c: 65: };
  7511                           ;display.c: 67: mask=0x01;
  7512  001AEA  0E01               	movlw	1
  7513  001AEC  6E1A               	movwf	putchar_b_buf@mask,c
  7514  001AEE  2A1D               	incf	putchar_b_buf@i,f,c
  7515  001AF0  0E04               	movlw	4
  7516  001AF2  641D               	cpfsgt	putchar_b_buf@i,c
  7517  001AF4  D7D0               	goto	l383
  7518  001AF6  0C04               	retlw	4
  7519  001AF8                     __end_of_putchar_b_buf:
  7520                           	opt stack 0
  7521                           tosu	equ	0xFFF
  7522                           tosh	equ	0xFFE
  7523                           tosl	equ	0xFFD
  7524                           pclath	equ	0xFFA
  7525                           tblptru	equ	0xFF8
  7526                           tblptrh	equ	0xFF7
  7527                           tblptrl	equ	0xFF6
  7528                           tablat	equ	0xFF5
  7529                           prodh	equ	0xFF4
  7530                           prodl	equ	0xFF3
  7531                           intcon	equ	0xFF2
  7532                           intcon2	equ	0xFF1
  7533                           postinc0	equ	0xFEE
  7534                           wreg	equ	0xFE8
  7535                           indf1	equ	0xFE7
  7536                           plusw1	equ	0xFE3
  7537                           fsr1h	equ	0xFE2
  7538                           fsr1l	equ	0xFE1
  7539                           indf2	equ	0xFDF
  7540                           postinc2	equ	0xFDE
  7541                           postdec2	equ	0xFDD
  7542                           plusw2	equ	0xFDB
  7543                           fsr2h	equ	0xFDA
  7544                           fsr2l	equ	0xFD9
  7545                           status	equ	0xFD8
  7546                           
  7547 ;; *************** function _readTemp_Single *****************
  7548 ;; Defined at:
  7549 ;;		line 32 in file "ds18b20.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;  buf             1   26[COMRAM] PTR unsigned int 
  7552 ;;		 -> temperature(2), 
  7553 ;;  time_flag       1   27[COMRAM] PTR unsigned char 
  7554 ;;		 -> time_flag(1), 
  7555 ;;  timer_val       1   28[COMRAM] PTR unsigned char 
  7556 ;;		 -> timer_val(1), 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  temp            2   34[COMRAM] unsigned int 
  7559 ;;  i               1   33[COMRAM] unsigned char 
  7560 ;;  tmp             1   32[COMRAM] unsigned char 
  7561 ;;  fptmp           1   31[COMRAM] unsigned char 
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  1    wreg      unsigned char 
  7564 ;; Registers used:
  7565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7566 ;; Tracked objects:
  7567 ;;		On entry : 3F/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7571 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7573 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;Total ram usage:       10 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    5
  7578 ;; This function calls:
  7579 ;;		___lwdiv
  7580 ;;		___lwmod
  7581 ;;		_ow_reset
  7582 ;;		_read_byte
  7583 ;;		_write_byte
  7584 ;; This function is called by:
  7585 ;;		_time_led
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text30
  7590  000D4A                     __ptext30:
  7591                           	opt stack 0
  7592  000D4A                     _readTemp_Single:
  7593                           	opt stack 23
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;ds18b20.c: 36: uint8_t i, tmp, fptmp;
  7597                           ;ds18b20.c: 38: switch(*time_flag)
  7598                           
  7599                           ;incstack = 0
  7600  000D4A  D07F               	goto	l5720
  7601  000D4C                     l5654:
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;ds18b20.c: 41: if (!ow_reset())
  7605  000D4C  EC40  F00F         	call	_ow_reset	;wreg free
  7606  000D50  0900               	iorlw	0
  7607  000D52  A4D8               	btfss	status,2,c
  7608  000D54  0012               	return	
  7609                           
  7610                           ;ds18b20.c: 42: {
  7611                           ;ds18b20.c: 49: write_byte(0xCC);
  7612  000D56  0ECC               	movlw	204
  7613  000D58  EC99  F00F         	call	_write_byte
  7614                           
  7615                           ;ds18b20.c: 50: write_byte(0x44);
  7616  000D5C  0E44               	movlw	68
  7617  000D5E  EC99  F00F         	call	_write_byte
  7618                           
  7619                           ;ds18b20.c: 51: *timer_val = 0;
  7620  000D62  501D               	movf	readTemp_Single@timer_val,w,c
  7621  000D64  6ED9               	movwf	fsr2l,c
  7622  000D66  6ADA               	clrf	fsr2h,c
  7623  000D68  6ADF               	clrf	indf2,c
  7624                           
  7625                           ;ds18b20.c: 52: *time_flag = 2;
  7626  000D6A  501C               	movf	readTemp_Single@time_flag,w,c
  7627  000D6C  6ED9               	movwf	fsr2l,c
  7628  000D6E  6ADA               	clrf	fsr2h,c
  7629  000D70  0E02               	movlw	2
  7630  000D72  6EDF               	movwf	indf2,c
  7631                           
  7632                           ;ds18b20.c: 53: T1CONbits.TMR1ON = 1;
  7633  000D74  80CD               	bsf	4045,0,c	;volatile
  7634  000D76  0C02               	retlw	2
  7635  000D78                     l5666:
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;ds18b20.c: 72: ow_reset();
  7639  000D78  EC40  F00F         	call	_ow_reset	;wreg free
  7640                           
  7641                           ;ds18b20.c: 73: write_byte(0xCC);
  7642  000D7C  0ECC               	movlw	204
  7643  000D7E  EC99  F00F         	call	_write_byte
  7644                           
  7645                           ;ds18b20.c: 74: write_byte(0xBE);
  7646  000D82  0EBE               	movlw	190
  7647  000D84  EC99  F00F         	call	_write_byte
  7648                           
  7649                           ;ds18b20.c: 75: for(i=0; i<2; i++)
  7650  000D88  6A22               	clrf	readTemp_Single@i,c
  7651  000D8A                     l5678:
  7652                           
  7653                           ;ds18b20.c: 76: {
  7654                           ;ds18b20.c: 77: scratch[i]= read_byte();
  7655  000D8A  5022               	movf	readTemp_Single@i,w,c
  7656  000D8C  0F80               	addlw	low _scratch
  7657  000D8E  6ED9               	movwf	fsr2l,c
  7658  000D90  6ADA               	clrf	fsr2h,c
  7659  000D92  ECB5  F00F         	call	_read_byte	;wreg free
  7660  000D96  6EDF               	movwf	indf2,c
  7661  000D98  2A22               	incf	readTemp_Single@i,f,c
  7662  000D9A  0E01               	movlw	1
  7663  000D9C  6422               	cpfsgt	readTemp_Single@i,c
  7664  000D9E  D7F5               	goto	l5678
  7665                           
  7666                           ;ds18b20.c: 78: }
  7667                           ;ds18b20.c: 80: temp =(((uint16_t)scratch[1])<<8)|((uint16_t)scratch[0]);
  7668  000DA0  0100               	movlb	0	; () banked
  7669  000DA2  5181               	movf	(_scratch+1)& (0+255),w,b
  7670  000DA4  6E1E               	movwf	??_readTemp_Single& (0+255),c
  7671  000DA6  5180               	movf	_scratch& (0+255),w,b
  7672  000DA8  6E23               	movwf	readTemp_Single@temp,c
  7673  000DAA  C01E  F024         	movff	??_readTemp_Single,readTemp_Single@temp+1
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;ds18b20.c: 83: if (temp & 0x8000)
  7677  000DAE  AE24               	btfss	readTemp_Single@temp+1,7,c
  7678  000DB0  D004               	goto	l5690
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;ds18b20.c: 86: minus=1;
  7682  000DB2  6C23               	negf	readTemp_Single@temp,c
  7683  000DB4  1E24               	comf	readTemp_Single@temp+1,f,c
  7684  000DB6  B0D8               	btfsc	status,0,c
  7685  000DB8  2A24               	incf	readTemp_Single@temp+1,f,c
  7686  000DBA                     l5690:
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;ds18b20.c: 87: }
  7690                           ;ds18b20.c: 89: tmp = temp & 0x0f;
  7691  000DBA  5023               	movf	readTemp_Single@temp,w,c
  7692  000DBC  0B0F               	andlw	15
  7693  000DBE  6E21               	movwf	readTemp_Single@tmp,c
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;ds18b20.c: 90: tmp = fract[tmp];
  7697  000DC0  0EB7               	movlw	low _fract
  7698  000DC2  2421               	addwf	readTemp_Single@tmp,w,c
  7699  000DC4  6EF6               	movwf	tblptrl,c
  7700  000DC6  6AF7               	clrf	tblptrh,c
  7701  000DC8  0EBA               	movlw	high _fract
  7702  000DCA  22F7               	addwfc	tblptrh,f,c
  7703  000DCC                     	if	0	;There are less than 3 active tblptr bytes
  7704  000DCC                     	endif
  7705  000DCC  0008               	tblrd		*
  7706  000DCE  CFF5 F021          	movff	tablat,readTemp_Single@tmp
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;ds18b20.c: 91: temp = temp>>4;
  7710  000DD2  3A23               	swapf	readTemp_Single@temp,f,c
  7711  000DD4  3A24               	swapf	readTemp_Single@temp+1,f,c
  7712  000DD6  0E0F               	movlw	15
  7713  000DD8  1623               	andwf	readTemp_Single@temp,f,c
  7714  000DDA  5024               	movf	readTemp_Single@temp+1,w,c
  7715  000DDC  0BF0               	andlw	240
  7716  000DDE  1223               	iorwf	readTemp_Single@temp,f,c
  7717  000DE0  0E0F               	movlw	15
  7718  000DE2  1624               	andwf	readTemp_Single@temp+1,f,c
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;ds18b20.c: 92: temp = (temp & 0x00ff) * 10;
  7722  000DE4  5023               	movf	readTemp_Single@temp,w,c
  7723  000DE6  0D0A               	mullw	10
  7724  000DE8  CFF3 F023          	movff	prodl,readTemp_Single@temp
  7725  000DEC  CFF4 F024          	movff	prodh,readTemp_Single@temp+1
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;ds18b20.c: 93: temp = temp + tmp;
  7729  000DF0  5021               	movf	readTemp_Single@tmp,w,c
  7730  000DF2  2623               	addwf	readTemp_Single@temp,f,c
  7731  000DF4  0E00               	movlw	0
  7732  000DF6  2224               	addwfc	readTemp_Single@temp+1,f,c
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;ds18b20.c: 99: fptmp = temp % 10;
  7736  000DF8  C023  F016         	movff	readTemp_Single@temp,___lwmod@dividend
  7737  000DFC  C024  F017         	movff	readTemp_Single@temp+1,___lwmod@dividend+1
  7738  000E00  6A19               	clrf	___lwmod@divisor+1,c
  7739  000E02  0E0A               	movlw	10
  7740  000E04  6E18               	movwf	___lwmod@divisor,c
  7741  000E06  EC21  F00F         	call	___lwmod	;wreg free
  7742  000E0A  5016               	movf	?___lwmod,w,c
  7743  000E0C  6E20               	movwf	readTemp_Single@fptmp,c
  7744                           
  7745                           ;ds18b20.c: 100: temp = temp / 10;
  7746  000E0E  C023  F00F         	movff	readTemp_Single@temp,___lwdiv@dividend
  7747  000E12  C024  F010         	movff	readTemp_Single@temp+1,___lwdiv@dividend+1
  7748  000E16  6A12               	clrf	___lwdiv@divisor+1,c
  7749  000E18  0E0A               	movlw	10
  7750  000E1A  6E11               	movwf	___lwdiv@divisor,c
  7751  000E1C  ECB7  F00E         	call	___lwdiv	;wreg free
  7752  000E20  C00F  F023         	movff	?___lwdiv,readTemp_Single@temp
  7753  000E24  C010  F024         	movff	?___lwdiv+1,readTemp_Single@temp+1
  7754                           
  7755                           ;ds18b20.c: 102: if (fptmp >=6) temp += 1;
  7756  000E28  0E05               	movlw	5
  7757  000E2A  6420               	cpfsgt	readTemp_Single@fptmp,c
  7758  000E2C  D002               	goto	l5708
  7759  000E2E  4A23               	infsnz	readTemp_Single@temp,f,c
  7760  000E30  2A24               	incf	readTemp_Single@temp+1,f,c
  7761  000E32                     l5708:
  7762                           
  7763                           ;ds18b20.c: 105: *buf = temp;
  7764  000E32  501B               	movf	readTemp_Single@buf,w,c
  7765  000E34  6ED9               	movwf	fsr2l,c
  7766  000E36  6ADA               	clrf	fsr2h,c
  7767  000E38  C023  FFDE         	movff	readTemp_Single@temp,postinc2
  7768  000E3C  C024  FFDD         	movff	readTemp_Single@temp+1,postdec2
  7769                           
  7770                           ;ds18b20.c: 106: *time_flag = 0;
  7771  000E40  501C               	movf	readTemp_Single@time_flag,w,c
  7772  000E42  6ED9               	movwf	fsr2l,c
  7773  000E44  6ADA               	clrf	fsr2h,c
  7774  000E46  6ADF               	clrf	indf2,c
  7775  000E48  0C00               	retlw	0
  7776  000E4A                     l5720:
  7777                           
  7778                           ; BSR set to: 0
  7779  000E4A  501C               	movf	readTemp_Single@time_flag,w,c
  7780  000E4C  6ED9               	movwf	fsr2l,c
  7781  000E4E  6ADA               	clrf	fsr2h,c
  7782  000E50  50DF               	movf	indf2,w,c
  7783                           
  7784                           ; Switch size 1, requested type "space"
  7785                           ; Number of cases is 3, Range of values is 0 to 2
  7786                           ; switch strategies available:
  7787                           ; Name         Instructions Cycles
  7788                           ; simple_byte           10     6 (average)
  7789                           ;	Chosen strategy is simple_byte
  7790  000E52  E101 D77B          	bz	l5654
  7791  000E56  0A01               	xorlw	1	; case 1
  7792  000E58  E08F               	bz	l5666
  7793  000E5A  0A03               	xorlw	3	; case 2
  7794  000E5C  0012               	return	
  7795  000E5E                     __end_of_readTemp_Single:
  7796                           	opt stack 0
  7797                           tosu	equ	0xFFF
  7798                           tosh	equ	0xFFE
  7799                           tosl	equ	0xFFD
  7800                           pclath	equ	0xFFA
  7801                           tblptru	equ	0xFF8
  7802                           tblptrh	equ	0xFF7
  7803                           tblptrl	equ	0xFF6
  7804                           tablat	equ	0xFF5
  7805                           prodh	equ	0xFF4
  7806                           prodl	equ	0xFF3
  7807                           intcon	equ	0xFF2
  7808                           intcon2	equ	0xFF1
  7809                           postinc0	equ	0xFEE
  7810                           wreg	equ	0xFE8
  7811                           indf1	equ	0xFE7
  7812                           plusw1	equ	0xFE3
  7813                           fsr1h	equ	0xFE2
  7814                           fsr1l	equ	0xFE1
  7815                           indf2	equ	0xFDF
  7816                           postinc2	equ	0xFDE
  7817                           postdec2	equ	0xFDD
  7818                           plusw2	equ	0xFDB
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function _write_byte *****************
  7824 ;; Defined at:
  7825 ;;		line 66 in file "onewire.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  val             1    wreg     unsigned char 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  val             1   17[COMRAM] unsigned char 
  7830 ;;  i               1   19[COMRAM] unsigned char 
  7831 ;;  temp            1   18[COMRAM] unsigned char 
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  1    wreg      void 
  7834 ;; Registers used:
  7835 ;;		wreg, status,2, status,0, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;Total ram usage:        5 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    4
  7848 ;; This function calls:
  7849 ;;		_write_bit
  7850 ;; This function is called by:
  7851 ;;		_init_ds18b20
  7852 ;;		_readTemp_Single
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           	psect	text31
  7857  001F32                     __ptext31:
  7858                           	opt stack 0
  7859  001F32                     _write_byte:
  7860                           	opt stack 24
  7861                           
  7862                           ;incstack = 0
  7863                           ;write_byte@val stored from wreg
  7864  001F32  6E12               	movwf	write_byte@val,c
  7865                           
  7866                           ;onewire.c: 68: uint8_t i;
  7867                           ;onewire.c: 69: uint8_t temp;
  7868                           ;onewire.c: 71: for (i=0;i<8;i++)
  7869  001F34  6A14               	clrf	write_byte@i,c
  7870  001F36                     l5240:
  7871                           
  7872                           ;onewire.c: 72: {
  7873                           ;onewire.c: 73: temp = val >> i;
  7874  001F36  C014  F010         	movff	write_byte@i,??_write_byte
  7875  001F3A  C012  F011         	movff	write_byte@val,??_write_byte+1
  7876  001F3E  2A10               	incf	??_write_byte,f,c
  7877  001F40  D002               	goto	u4004
  7878  001F42                     u4005:
  7879  001F42  90D8               	bcf	status,0,c
  7880  001F44  3211               	rrcf	??_write_byte+1,f,c
  7881  001F46                     u4004:
  7882  001F46  2E10               	decfsz	??_write_byte,f,c
  7883  001F48  D7FC               	goto	u4005
  7884  001F4A  5011               	movf	??_write_byte+1,w,c
  7885  001F4C  6E13               	movwf	write_byte@temp,c
  7886                           
  7887                           ;onewire.c: 74: temp &= 0x01;
  7888  001F4E  0E01               	movlw	1
  7889  001F50  1613               	andwf	write_byte@temp,f,c
  7890                           
  7891                           ;onewire.c: 75: write_bit(temp);
  7892  001F52  5013               	movf	write_byte@temp,w,c
  7893  001F54  ECE9  F010         	call	_write_bit
  7894  001F58  2A14               	incf	write_byte@i,f,c
  7895  001F5A  0E07               	movlw	7
  7896  001F5C  6414               	cpfsgt	write_byte@i,c
  7897  001F5E  D7EB               	goto	l5240
  7898                           
  7899                           ;onewire.c: 76: }
  7900                           ;onewire.c: 78: _delay((unsigned long)((105)*(40000000/4000000.0)));
  7901  001F60  0ED2               	movlw	210
  7902  001F62                     u5087:
  7903  001F62  D000               	nop2	
  7904  001F64  2EE8               	decfsz	wreg,f,c
  7905  001F66  D7FD               	bra	u5087
  7906  001F68  0012               	return		;funcret
  7907  001F6A                     __end_of_write_byte:
  7908                           	opt stack 0
  7909                           tosu	equ	0xFFF
  7910                           tosh	equ	0xFFE
  7911                           tosl	equ	0xFFD
  7912                           pclath	equ	0xFFA
  7913                           tblptru	equ	0xFF8
  7914                           tblptrh	equ	0xFF7
  7915                           tblptrl	equ	0xFF6
  7916                           tablat	equ	0xFF5
  7917                           prodh	equ	0xFF4
  7918                           prodl	equ	0xFF3
  7919                           intcon	equ	0xFF2
  7920                           intcon2	equ	0xFF1
  7921                           postinc0	equ	0xFEE
  7922                           wreg	equ	0xFE8
  7923                           indf1	equ	0xFE7
  7924                           plusw1	equ	0xFE3
  7925                           fsr1h	equ	0xFE2
  7926                           fsr1l	equ	0xFE1
  7927                           indf2	equ	0xFDF
  7928                           postinc2	equ	0xFDE
  7929                           postdec2	equ	0xFDD
  7930                           plusw2	equ	0xFDB
  7931                           fsr2h	equ	0xFDA
  7932                           fsr2l	equ	0xFD9
  7933                           status	equ	0xFD8
  7934                           
  7935 ;; *************** function _write_bit *****************
  7936 ;; Defined at:
  7937 ;;		line 34 in file "onewire.c"
  7938 ;; Parameters:    Size  Location     Type
  7939 ;;  bitval          1    wreg     unsigned char 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;  bitval          1   14[COMRAM] unsigned char 
  7942 ;; Return value:  Size  Location     Type
  7943 ;;                  1    wreg      void 
  7944 ;; Registers used:
  7945 ;;		wreg, status,2, status,0, cstack
  7946 ;; Tracked objects:
  7947 ;;		On entry : 0/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;Total ram usage:        1 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:    3
  7958 ;; This function calls:
  7959 ;;		Nothing
  7960 ;; This function is called by:
  7961 ;;		_write_byte
  7962 ;; This function uses a non-reentrant model
  7963 ;;
  7964                           
  7965                           	psect	text32
  7966  0021D2                     __ptext32:
  7967                           	opt stack 0
  7968  0021D2                     _write_bit:
  7969                           	opt stack 24
  7970                           
  7971                           ;incstack = 0
  7972                           ;write_bit@bitval stored from wreg
  7973  0021D2  6E0F               	movwf	write_bit@bitval,c
  7974                           
  7975                           ;onewire.c: 36: PORTCbits.RC0 = 0;
  7976  0021D4  9082               	bcf	3970,0,c	;volatile
  7977                           
  7978                           ;onewire.c: 37: TRISCbits.RC0 = 0;
  7979  0021D6  9094               	bcf	3988,0,c	;volatile
  7980                           
  7981                           ;onewire.c: 38: if(bitval == 1) {
  7982  0021D8  040F               	decf	write_bit@bitval,w,c
  7983  0021DA  E106               	bnz	l889
  7984                           
  7985                           ;onewire.c: 39: _delay((unsigned long)((2)*(40000000/4000000.0)));
  7986  0021DC  0E06               	movlw	6
  7987  0021DE                     u5097:
  7988  0021DE  2EE8               	decfsz	wreg,f,c
  7989  0021E0  D7FE               	bra	u5097
  7990  0021E2  D000               	nop2	
  7991                           
  7992                           ;onewire.c: 40: PORTCbits.RC0 = 1;
  7993  0021E4  8082               	bsf	3970,0,c	;volatile
  7994                           
  7995                           ;onewire.c: 41: TRISCbits.RC0 = 1;
  7996  0021E6  8094               	bsf	3988,0,c	;volatile
  7997  0021E8                     l889:
  7998                           
  7999                           ;onewire.c: 42: }
  8000                           ;onewire.c: 43: _delay((unsigned long)((105)*(40000000/4000000.0)));
  8001  0021E8  0ED2               	movlw	210
  8002  0021EA                     u5107:
  8003  0021EA  D000               	nop2	
  8004  0021EC  2EE8               	decfsz	wreg,f,c
  8005  0021EE  D7FD               	bra	u5107
  8006                           
  8007                           ;onewire.c: 44: PORTCbits.RC0 = 1;
  8008  0021F0  8082               	bsf	3970,0,c	;volatile
  8009                           
  8010                           ;onewire.c: 45: TRISCbits.RC0 = 1;
  8011  0021F2  8094               	bsf	3988,0,c	;volatile
  8012  0021F4  0012               	return		;funcret
  8013  0021F6                     __end_of_write_bit:
  8014                           	opt stack 0
  8015                           tosu	equ	0xFFF
  8016                           tosh	equ	0xFFE
  8017                           tosl	equ	0xFFD
  8018                           pclath	equ	0xFFA
  8019                           tblptru	equ	0xFF8
  8020                           tblptrh	equ	0xFF7
  8021                           tblptrl	equ	0xFF6
  8022                           tablat	equ	0xFF5
  8023                           prodh	equ	0xFF4
  8024                           prodl	equ	0xFF3
  8025                           intcon	equ	0xFF2
  8026                           intcon2	equ	0xFF1
  8027                           postinc0	equ	0xFEE
  8028                           wreg	equ	0xFE8
  8029                           indf1	equ	0xFE7
  8030                           plusw1	equ	0xFE3
  8031                           fsr1h	equ	0xFE2
  8032                           fsr1l	equ	0xFE1
  8033                           indf2	equ	0xFDF
  8034                           postinc2	equ	0xFDE
  8035                           postdec2	equ	0xFDD
  8036                           plusw2	equ	0xFDB
  8037                           fsr2h	equ	0xFDA
  8038                           fsr2l	equ	0xFD9
  8039                           status	equ	0xFD8
  8040                           
  8041 ;; *************** function _read_byte *****************
  8042 ;; Defined at:
  8043 ;;		line 50 in file "onewire.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;		None
  8046 ;; Auto vars:     Size  Location     Type
  8047 ;;  i               1   17[COMRAM] unsigned char 
  8048 ;;  val             1   16[COMRAM] unsigned char 
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      unsigned char 
  8051 ;; Registers used:
  8052 ;;		wreg, status,2, status,0, cstack
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8060 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8061 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8062 ;;Total ram usage:        4 bytes
  8063 ;; Hardware stack levels used:    1
  8064 ;; Hardware stack levels required when called:    4
  8065 ;; This function calls:
  8066 ;;		_read_bit
  8067 ;; This function is called by:
  8068 ;;		_readTemp_Single
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           	psect	text33
  8073  001F6A                     __ptext33:
  8074                           	opt stack 0
  8075  001F6A                     _read_byte:
  8076                           	opt stack 23
  8077                           
  8078                           ;onewire.c: 52: uint8_t i;
  8079                           ;onewire.c: 53: uint8_t val = 0;
  8080                           
  8081                           ;incstack = 0
  8082  001F6A  6A11               	clrf	read_byte@val,c
  8083                           
  8084                           ;onewire.c: 55: for(i=0;i<8;i++)
  8085  001F6C  6A12               	clrf	read_byte@i,c
  8086  001F6E                     l5256:
  8087                           
  8088                           ;onewire.c: 56: {
  8089                           ;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  8090  001F6E  EC4B  F011         	call	_read_bit	;wreg free
  8091  001F72  0900               	iorlw	0
  8092  001F74  E00C               	bz	l5260
  8093  001F76  C012  F00F         	movff	read_byte@i,??_read_byte
  8094  001F7A  0E01               	movlw	1
  8095  001F7C  6E10               	movwf	(??_read_byte+1)& (0+255),c
  8096  001F7E  2A0F               	incf	??_read_byte,f,c
  8097  001F80  D002               	goto	u4034
  8098  001F82                     u4035:
  8099  001F82  90D8               	bcf	status,0,c
  8100  001F84  3610               	rlcf	??_read_byte+1,f,c
  8101  001F86                     u4034:
  8102  001F86  2E0F               	decfsz	??_read_byte,f,c
  8103  001F88  D7FC               	goto	u4035
  8104  001F8A  5010               	movf	??_read_byte+1,w,c
  8105  001F8C  1211               	iorwf	read_byte@val,f,c
  8106  001F8E                     l5260:
  8107                           
  8108                           ;onewire.c: 58: _delay((unsigned long)((120)*(40000000/4000000.0)));
  8109  001F8E  0EF0               	movlw	240
  8110  001F90                     u5117:
  8111  001F90  D000               	nop2	
  8112  001F92  2EE8               	decfsz	wreg,f,c
  8113  001F94  D7FD               	bra	u5117
  8114  001F96  2A12               	incf	read_byte@i,f,c
  8115  001F98  0E07               	movlw	7
  8116  001F9A  6412               	cpfsgt	read_byte@i,c
  8117  001F9C  D7E8               	goto	l5256
  8118                           
  8119                           ;onewire.c: 59: }
  8120                           ;onewire.c: 61: return val;
  8121  001F9E  5011               	movf	read_byte@val,w,c
  8122  001FA0  0012               	return		;funcret
  8123  001FA2                     __end_of_read_byte:
  8124                           	opt stack 0
  8125                           tosu	equ	0xFFF
  8126                           tosh	equ	0xFFE
  8127                           tosl	equ	0xFFD
  8128                           pclath	equ	0xFFA
  8129                           tblptru	equ	0xFF8
  8130                           tblptrh	equ	0xFF7
  8131                           tblptrl	equ	0xFF6
  8132                           tablat	equ	0xFF5
  8133                           prodh	equ	0xFF4
  8134                           prodl	equ	0xFF3
  8135                           intcon	equ	0xFF2
  8136                           intcon2	equ	0xFF1
  8137                           postinc0	equ	0xFEE
  8138                           wreg	equ	0xFE8
  8139                           indf1	equ	0xFE7
  8140                           plusw1	equ	0xFE3
  8141                           fsr1h	equ	0xFE2
  8142                           fsr1l	equ	0xFE1
  8143                           indf2	equ	0xFDF
  8144                           postinc2	equ	0xFDE
  8145                           postdec2	equ	0xFDD
  8146                           plusw2	equ	0xFDB
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function _read_bit *****************
  8152 ;; Defined at:
  8153 ;;		line 22 in file "onewire.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      unsigned char 
  8160 ;; Registers used:
  8161 ;;		wreg
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;Total ram usage:        0 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    3
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_read_byte
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text34
  8182  002296                     __ptext34:
  8183                           	opt stack 0
  8184  002296                     _read_bit:
  8185                           	opt stack 23
  8186                           
  8187                           ;onewire.c: 24: PORTCbits.RC0 = 0;
  8188                           
  8189                           ;incstack = 0
  8190  002296  9082               	bcf	3970,0,c	;volatile
  8191                           
  8192                           ;onewire.c: 25: TRISCbits.RC0 = 0;
  8193  002298  9094               	bcf	3988,0,c	;volatile
  8194                           
  8195                           ;onewire.c: 26: _delay((unsigned long)((1)*(40000000/4000000.0)));
  8196  00229A  0E03               	movlw	3
  8197  00229C                     u5127:
  8198  00229C  2EE8               	decfsz	wreg,f,c
  8199  00229E  D7FE               	bra	u5127
  8200  0022A0  F000               	nop	
  8201                           
  8202                           ;onewire.c: 27: PORTCbits.RC0 = 1;
  8203  0022A2  8082               	bsf	3970,0,c	;volatile
  8204                           
  8205                           ;onewire.c: 28: TRISCbits.RC0 = 1;
  8206  0022A4  8094               	bsf	3988,0,c	;volatile
  8207                           
  8208                           ;onewire.c: 29: _delay((unsigned long)((6)*(40000000/4000000.0)));
  8209  0022A6  0E14               	movlw	20
  8210  0022A8                     u5137:
  8211  0022A8  2EE8               	decfsz	wreg,f,c
  8212  0022AA  D7FE               	bra	u5137
  8213                           
  8214                           ;onewire.c: 30: return(PORTCbits.RC0);
  8215  0022AC  B082               	btfsc	3970,0,c	;volatile
  8216  0022AE  0C01               	retlw	1
  8217  0022B0  0C00               	retlw	0	;funcret
  8218  0022B2                     __end_of_read_bit:
  8219                           	opt stack 0
  8220                           tosu	equ	0xFFF
  8221                           tosh	equ	0xFFE
  8222                           tosl	equ	0xFFD
  8223                           pclath	equ	0xFFA
  8224                           tblptru	equ	0xFF8
  8225                           tblptrh	equ	0xFF7
  8226                           tblptrl	equ	0xFF6
  8227                           tablat	equ	0xFF5
  8228                           prodh	equ	0xFF4
  8229                           prodl	equ	0xFF3
  8230                           intcon	equ	0xFF2
  8231                           intcon2	equ	0xFF1
  8232                           postinc0	equ	0xFEE
  8233                           wreg	equ	0xFE8
  8234                           indf1	equ	0xFE7
  8235                           plusw1	equ	0xFE3
  8236                           fsr1h	equ	0xFE2
  8237                           fsr1l	equ	0xFE1
  8238                           indf2	equ	0xFDF
  8239                           postinc2	equ	0xFDE
  8240                           postdec2	equ	0xFDD
  8241                           plusw2	equ	0xFDB
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246 ;; *************** function _ow_reset *****************
  8247 ;; Defined at:
  8248 ;;		line 5 in file "onewire.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;		None
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;  presence        1   15[COMRAM] unsigned char 
  8253 ;; Return value:  Size  Location     Type
  8254 ;;                  1    wreg      unsigned char 
  8255 ;; Registers used:
  8256 ;;		wreg, status,2
  8257 ;; Tracked objects:
  8258 ;;		On entry : 0/0
  8259 ;;		On exit  : 0/0
  8260 ;;		Unchanged: 0/0
  8261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;Total ram usage:        2 bytes
  8267 ;; Hardware stack levels used:    1
  8268 ;; Hardware stack levels required when called:    3
  8269 ;; This function calls:
  8270 ;;		Nothing
  8271 ;; This function is called by:
  8272 ;;		_init_ds18b20
  8273 ;;		_readTemp_Single
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           	psect	text35
  8278  001E80                     __ptext35:
  8279                           	opt stack 0
  8280  001E80                     _ow_reset:
  8281                           	opt stack 25
  8282                           
  8283                           ;onewire.c: 7: uint8_t presence;
  8284                           ;onewire.c: 8: PORTCbits.RC0 = 0;
  8285                           
  8286                           ;incstack = 0
  8287  001E80  9082               	bcf	3970,0,c	;volatile
  8288                           
  8289                           ;onewire.c: 9: TRISCbits.RC0 = 0;
  8290  001E82  9094               	bcf	3988,0,c	;volatile
  8291                           
  8292                           ;onewire.c: 10: _delay((unsigned long)((500)*(40000000/4000000.0)));
  8293  001E84  0E07               	movlw	7
  8294  001E86  6E0F               	movwf	??_ow_reset& (0+255),c
  8295  001E88  0E7D               	movlw	125
  8296  001E8A                     u5147:
  8297  001E8A  2EE8               	decfsz	wreg,f,c
  8298  001E8C  D7FE               	bra	u5147
  8299  001E8E  2E0F               	decfsz	??_ow_reset& (0+255),f,c
  8300  001E90  D7FC               	bra	u5147
  8301  001E92  F000               	nop	
  8302                           
  8303                           ;onewire.c: 11: PORTCbits.RC0 = 1;
  8304  001E94  8082               	bsf	3970,0,c	;volatile
  8305                           
  8306                           ;onewire.c: 12: TRISCbits.RC0 = 1;
  8307  001E96  8094               	bsf	3988,0,c	;volatile
  8308                           
  8309                           ;onewire.c: 13: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8310  001E98  0EC8               	movlw	200
  8311  001E9A                     u5157:
  8312  001E9A  D000               	nop2	
  8313  001E9C  2EE8               	decfsz	wreg,f,c
  8314  001E9E  D7FD               	bra	u5157
  8315                           
  8316                           ;onewire.c: 14: presence = PORTCbits.RC0;
  8317  001EA0  0E00               	movlw	0
  8318  001EA2  B082               	btfsc	3970,0,c	;volatile
  8319  001EA4  0E01               	movlw	1
  8320  001EA6  6E10               	movwf	ow_reset@presence,c
  8321                           
  8322                           ;onewire.c: 15: _delay((unsigned long)((424)*(40000000/4000000.0)));
  8323  001EA8  0E06               	movlw	6
  8324  001EAA  6E0F               	movwf	??_ow_reset& (0+255),c
  8325  001EAC  0E80               	movlw	128
  8326  001EAE                     u5167:
  8327  001EAE  2EE8               	decfsz	wreg,f,c
  8328  001EB0  D7FE               	bra	u5167
  8329  001EB2  2E0F               	decfsz	??_ow_reset& (0+255),f,c
  8330  001EB4  D7FC               	bra	u5167
  8331  001EB6  D000               	nop2	
  8332                           
  8333                           ;onewire.c: 16: return(presence);
  8334  001EB8  5010               	movf	ow_reset@presence,w,c
  8335  001EBA  0012               	return		;funcret
  8336  001EBC                     __end_of_ow_reset:
  8337                           	opt stack 0
  8338                           tosu	equ	0xFFF
  8339                           tosh	equ	0xFFE
  8340                           tosl	equ	0xFFD
  8341                           pclath	equ	0xFFA
  8342                           tblptru	equ	0xFF8
  8343                           tblptrh	equ	0xFF7
  8344                           tblptrl	equ	0xFF6
  8345                           tablat	equ	0xFF5
  8346                           prodh	equ	0xFF4
  8347                           prodl	equ	0xFF3
  8348                           intcon	equ	0xFF2
  8349                           intcon2	equ	0xFF1
  8350                           postinc0	equ	0xFEE
  8351                           wreg	equ	0xFE8
  8352                           indf1	equ	0xFE7
  8353                           plusw1	equ	0xFE3
  8354                           fsr1h	equ	0xFE2
  8355                           fsr1l	equ	0xFE1
  8356                           indf2	equ	0xFDF
  8357                           postinc2	equ	0xFDE
  8358                           postdec2	equ	0xFDD
  8359                           plusw2	equ	0xFDB
  8360                           fsr2h	equ	0xFDA
  8361                           fsr2l	equ	0xFD9
  8362                           status	equ	0xFD8
  8363                           
  8364 ;; *************** function _FillBuf *****************
  8365 ;; Defined at:
  8366 ;;		line 156 in file "display.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;		None
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;  i               1   24[COMRAM] unsigned char 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  1    wreg      void 
  8373 ;; Registers used:
  8374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 3F/0
  8377 ;;		On exit  : 3F/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;Total ram usage:        3 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    4
  8387 ;; This function calls:
  8388 ;;		___lbdiv
  8389 ;;		___lbmod
  8390 ;; This function is called by:
  8391 ;;		_time_led
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           	psect	text36
  8396  000AFC                     __ptext36:
  8397                           	opt stack 0
  8398  000AFC                     _FillBuf:
  8399                           	opt stack 24
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;display.c: 158: uint8_t i;
  8403                           ;display.c: 160: for(i=0; i<5; ++i)
  8404                           
  8405                           ;incstack = 0
  8406  000AFC  6A19               	clrf	FillBuf@i,c
  8407  000AFE                     l5558:
  8408                           
  8409                           ;display.c: 161: {
  8410                           ;display.c: 162: if((TTime.Thr/10) % 10)
  8411  000AFE  D880               	call	PL46	;call to abstracted procedure
  8412  000B00  51CD               	movf	(_TTime+2)& (0+255),w,b
  8413  000B02  ECEC  F00F         	call	___lbdiv
  8414  000B06  ECD6  F010         	call	___lbmod
  8415  000B0A  0900               	iorlw	0
  8416  000B0C  E00A               	bz	l5562
  8417                           
  8418                           ;display.c: 163: Dis_Buff[i] = Font[(TTime.Thr/10) % 10 + 48][i];
  8419  000B0E  D878               	call	PL46	;call to abstracted procedure
  8420  000B10  51CD               	movf	(_TTime+2)& (0+255),w,b
  8421  000B12  ECEC  F00F         	call	___lbdiv
  8422  000B16  ECD6  F010         	call	___lbmod
  8423  000B1A  D83D               	call	PL4	;call to abstracted procedure
  8424  000B1C  0FAB               	addlw	low _Dis_Buff
  8425  000B1E  D86A               	call	PL40	;call to abstracted procedure
  8426  000B20  D002               	goto	l5564
  8427  000B22                     l5562:
  8428                           
  8429                           ;display.c: 164: else
  8430                           ;display.c: 165: Dis_Buff[i] = 0x00;
  8431  000B22  5019               	movf	FillBuf@i,w,c
  8432  000B24  D872               	call	PL124	;call to abstracted procedure
  8433  000B26                     l5564:
  8434                           
  8435                           ;display.c: 167: Dis_Buff[i + 6] = Font[TTime.Thr % 10 + 48][i];
  8436  000B26  D876               	call	PL130	;call to abstracted procedure
  8437  000B28  ECD6  F010         	call	___lbmod
  8438  000B2C  D834               	call	PL4	;call to abstracted procedure
  8439  000B2E  0FB1               	addlw	low (_Dis_Buff+6)
  8440  000B30  D861               	call	PL40	;call to abstracted procedure
  8441                           
  8442                           ;display.c: 168: Dis_Buff[i + 13] = Font[(TTime.Tmin/10) % 10 + 48][i];
  8443  000B32  D866               	call	PL46	;call to abstracted procedure
  8444  000B34  51CC               	movf	(_TTime+1)& (0+255),w,b
  8445  000B36  ECEC  F00F         	call	___lbdiv
  8446  000B3A  ECD6  F010         	call	___lbmod
  8447  000B3E  D82B               	call	PL4	;call to abstracted procedure
  8448  000B40  0FB8               	addlw	low (_Dis_Buff+13)
  8449  000B42  D858               	call	PL40	;call to abstracted procedure
  8450                           
  8451                           ;display.c: 169: Dis_Buff[i + 19] = Font[TTime.Tmin % 10 + 48][i];
  8452  000B44  D86C               	call	PL136	;call to abstracted procedure
  8453  000B46  ECD6  F010         	call	___lbmod
  8454  000B4A  D825               	call	PL4	;call to abstracted procedure
  8455  000B4C  0FBE               	addlw	low (_Dis_Buff+19)
  8456  000B4E  D852               	call	PL40	;call to abstracted procedure
  8457  000B50  2A19               	incf	FillBuf@i,f,c
  8458  000B52  0E04               	movlw	4
  8459  000B54  6419               	cpfsgt	FillBuf@i,c
  8460  000B56  D7D3               	goto	l5558
  8461                           
  8462                           ;display.c: 171: }
  8463                           ;display.c: 173: for (i=0; i<3; ++i)
  8464  000B58  6A19               	clrf	FillBuf@i,c
  8465  000B5A                     l5578:
  8466                           
  8467                           ;display.c: 174: {
  8468                           ;display.c: 175: Dis_Buff[i + 25] = FontS[(TTime.Ts/10) % 10 + 1][i];
  8469  000B5A  D852               	call	PL46	;call to abstracted procedure
  8470  000B5C  51CB               	movf	_TTime& (0+255),w,b
  8471  000B5E  ECEC  F00F         	call	___lbdiv
  8472  000B62  ECD6  F010         	call	___lbmod
  8473  000B66  D841               	call	PL32	;call to abstracted procedure
  8474  000B68  D82D               	call	PL6	;call to abstracted procedure
  8475  000B6A  0FC4               	addlw	low (_Dis_Buff+25)
  8476  000B6C  D843               	call	PL40	;call to abstracted procedure
  8477                           
  8478                           ;display.c: 176: Dis_Buff[i + 29] = FontS[TTime.Ts % 10 + 1][i];
  8479  000B6E  D85C               	call	PL138	;call to abstracted procedure
  8480  000B70  ECD6  F010         	call	___lbmod
  8481  000B74  D83A               	call	PL32	;call to abstracted procedure
  8482  000B76  D826               	call	PL6	;call to abstracted procedure
  8483  000B78  0FC8               	addlw	low (_Dis_Buff+29)
  8484  000B7A  D83C               	call	PL40	;call to abstracted procedure
  8485  000B7C  2A19               	incf	FillBuf@i,f,c
  8486  000B7E  0E02               	movlw	2
  8487  000B80  6419               	cpfsgt	FillBuf@i,c
  8488  000B82  D7EB               	goto	l5578
  8489                           
  8490                           ;display.c: 177: }
  8491                           ;display.c: 179: Dis_Buff[5] = 0;
  8492  000B84  0100               	movlb	0	; () banked
  8493  000B86  6BB0               	clrf	(_Dis_Buff+5)& (0+255),b
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;display.c: 180: Dis_Buff[11] = 0x80;
  8497  000B88  0E80               	movlw	128
  8498  000B8A  6FB6               	movwf	(_Dis_Buff+11)& (0+255),b
  8499                           
  8500                           ;display.c: 181: Dis_Buff[12] = 0x80;
  8501  000B8C  6FB7               	movwf	(_Dis_Buff+12)& (0+255),b
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;display.c: 182: Dis_Buff[18] = 0;
  8505  000B8E  6BBD               	clrf	(_Dis_Buff+18)& (0+255),b
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;display.c: 183: Dis_Buff[24] = 0;
  8509  000B90  6BC3               	clrf	(_Dis_Buff+24)& (0+255),b
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;display.c: 184: Dis_Buff[28] = 0;
  8513  000B92  6BC7               	clrf	(_Dis_Buff+28)& (0+255),b
  8514                           
  8515                           ; BSR set to: 0
  8516  000B94  0012               	return		;funcret
  8517  000B96                     __end_of_FillBuf:
  8518                           	opt stack 0
  8519  000B96                     PL4:
  8520                           	opt stack 24
  8521  000B96  0D05               	mullw	5
  8522  000B98  0EC8               	movlw	low _Font
  8523  000B9A  6E17               	movwf	??_FillBuf& (0+255),c
  8524  000B9C  0EBA               	movlw	high _Font
  8525  000B9E  6E18               	movwf	(??_FillBuf+1)& (0+255),c
  8526  000BA0  50F3               	movf	prodl,w,c
  8527  000BA2  2617               	addwf	??_FillBuf,f,c
  8528  000BA4  50F4               	movf	prodh,w,c
  8529  000BA6  2218               	addwfc	??_FillBuf+1,f,c
  8530  000BA8  5019               	movf	FillBuf@i,w,c
  8531  000BAA  2617               	addwf	??_FillBuf,f,c
  8532  000BAC  0E00               	movlw	0
  8533  000BAE  2218               	addwfc	??_FillBuf+1,f,c
  8534  000BB0  0EF0               	movlw	240
  8535  000BB2  2617               	addwf	??_FillBuf,f,c
  8536  000BB4  0E00               	movlw	0
  8537  000BB6  2218               	addwfc	??_FillBuf+1,f,c
  8538  000BB8  C017  FFF6         	movff	??_FillBuf,tblptrl
  8539  000BBC  C018  FFF7         	movff	??_FillBuf+1,tblptrh
  8540  000BC0                     	if	0	;tblptru may be non-zero
  8541  000BC0                     	endif
  8542  000BC0                     	if	0	;tblptru may be non-zero
  8543  000BC0                     	endif
  8544  000BC0  5019               	movf	FillBuf@i,w,c
  8545  000BC2  0012               	return	
  8546  000BC4                     __end_ofPL4:
  8547                           	opt stack 0
  8548  000BC4                     PL6:
  8549                           	opt stack 24
  8550  000BC4  6E18               	movwf	(??_FillBuf+1)& (0+255),c
  8551  000BC6  50F3               	movf	prodl,w,c
  8552  000BC8  2617               	addwf	??_FillBuf,f,c
  8553  000BCA  50F4               	movf	prodh,w,c
  8554  000BCC  2218               	addwfc	??_FillBuf+1,f,c
  8555  000BCE  5019               	movf	FillBuf@i,w,c
  8556  000BD0  2617               	addwf	??_FillBuf,f,c
  8557  000BD2  0E00               	movlw	0
  8558  000BD4  2218               	addwfc	??_FillBuf+1,f,c
  8559  000BD6  0E03               	movlw	3
  8560  000BD8  2617               	addwf	??_FillBuf,f,c
  8561  000BDA  0E00               	movlw	0
  8562  000BDC  2218               	addwfc	??_FillBuf+1,f,c
  8563  000BDE  C017  FFF6         	movff	??_FillBuf,tblptrl
  8564  000BE2  C018  FFF7         	movff	??_FillBuf+1,tblptrh
  8565  000BE6                     	if	0	;tblptru may be non-zero
  8566  000BE6                     	endif
  8567  000BE6                     	if	0	;tblptru may be non-zero
  8568  000BE6                     	endif
  8569  000BE6  5019               	movf	FillBuf@i,w,c
  8570  000BE8  0012               	return	
  8571  000BEA                     __end_ofPL6:
  8572                           	opt stack 0
  8573  000BEA                     PL32:
  8574                           	opt stack 24
  8575  000BEA  0D03               	mullw	3
  8576  000BEC  0EC8               	movlw	low _FontS
  8577  000BEE  6E17               	movwf	??_FillBuf& (0+255),c
  8578  000BF0  0EBF               	movlw	high _FontS
  8579  000BF2  0012               	return	
  8580  000BF4                     __end_ofPL32:
  8581                           	opt stack 0
  8582  000BF4                     PL40:
  8583                           	opt stack 24
  8584  000BF4  6ED9               	movwf	fsr2l,c
  8585  000BF6  6ADA               	clrf	fsr2h,c
  8586  000BF8  0008               	tblrd		*
  8587  000BFA  CFF5 FFDF          	movff	tablat,indf2
  8588  000BFE  0012               	return	
  8589  000C00                     __end_ofPL40:
  8590                           	opt stack 0
  8591  000C00                     PL46:
  8592                           	opt stack 22
  8593  000C00  0E0A               	movlw	10
  8594  000C02  6E13               	movwf	___lbmod@divisor,c
  8595  000C04  6E0F               	movwf	___lbdiv@divisor,c
  8596  000C06  0100               	movlb	0	; () banked
  8597  000C08  0C0A               	retlw	10
  8598  000C0A                     __end_ofPL46:
  8599                           	opt stack 0
  8600  000C0A                     PL124:
  8601                           	opt stack 27
  8602  000C0A  0FAB               	addlw	low _Dis_Buff
  8603  000C0C  6ED9               	movwf	fsr2l,c
  8604  000C0E  6ADA               	clrf	fsr2h,c
  8605  000C10  6ADF               	clrf	indf2,c
  8606  000C12  0012               	return	
  8607  000C14                     __end_ofPL124:
  8608                           	opt stack 0
  8609  000C14                     PL130:
  8610                           	opt stack 22
  8611  000C14  0E0A               	movlw	10
  8612  000C16  6E13               	movwf	___lbmod@divisor,c
  8613  000C18  0100               	movlb	0	; () banked
  8614  000C1A  51CD               	movf	(_TTime+2)& (0+255),w,b
  8615  000C1C  0012               	return	
  8616  000C1E                     __end_ofPL130:
  8617                           	opt stack 0
  8618  000C1E                     PL136:
  8619                           	opt stack 22
  8620  000C1E  0E0A               	movlw	10
  8621  000C20  6E13               	movwf	___lbmod@divisor,c
  8622  000C22  0100               	movlb	0	; () banked
  8623  000C24  51CC               	movf	(_TTime+1)& (0+255),w,b
  8624  000C26  0012               	return	
  8625  000C28                     __end_ofPL136:
  8626                           	opt stack 0
  8627  000C28                     PL138:
  8628                           	opt stack 22
  8629  000C28  0E0A               	movlw	10
  8630  000C2A  6E13               	movwf	___lbmod@divisor,c
  8631  000C2C  0100               	movlb	0	; () banked
  8632  000C2E  51CB               	movf	_TTime& (0+255),w,b
  8633  000C30  0012               	return	
  8634  000C32                     __end_ofPL138:
  8635                           	opt stack 0
  8636                           tosu	equ	0xFFF
  8637                           tosh	equ	0xFFE
  8638                           tosl	equ	0xFFD
  8639                           pclath	equ	0xFFA
  8640                           tblptru	equ	0xFF8
  8641                           tblptrh	equ	0xFF7
  8642                           tblptrl	equ	0xFF6
  8643                           tablat	equ	0xFF5
  8644                           prodh	equ	0xFF4
  8645                           prodl	equ	0xFF3
  8646                           intcon	equ	0xFF2
  8647                           intcon2	equ	0xFF1
  8648                           postinc0	equ	0xFEE
  8649                           wreg	equ	0xFE8
  8650                           indf1	equ	0xFE7
  8651                           plusw1	equ	0xFE3
  8652                           fsr1h	equ	0xFE2
  8653                           fsr1l	equ	0xFE1
  8654                           indf2	equ	0xFDF
  8655                           postinc2	equ	0xFDE
  8656                           postdec2	equ	0xFDD
  8657                           plusw2	equ	0xFDB
  8658                           fsr2h	equ	0xFDA
  8659                           fsr2l	equ	0xFD9
  8660                           status	equ	0xFD8
  8661                           
  8662 ;; *************** function _BMP085Pressure *****************
  8663 ;; Defined at:
  8664 ;;		line 246 in file "bmp180.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;  getTemp         1    wreg     unsigned char 
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;  getTemp         1   74[COMRAM] unsigned char 
  8669 ;; Return value:  Size  Location     Type
  8670 ;;                  4  586[None  ] unsigned long 
  8671 ;; Registers used:
  8672 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8673 ;; Tracked objects:
  8674 ;;		On entry : 3F/0
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;Total ram usage:        1 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:    6
  8685 ;; This function calls:
  8686 ;;		_BMP085GetPressure
  8687 ;;		_BMP085GetTemp
  8688 ;;		_BMP085ReadUT
  8689 ;;		_bmp085ReadUP
  8690 ;; This function is called by:
  8691 ;;		_time_led
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           	psect	text37
  8696  001FA2                     __ptext37:
  8697                           	opt stack 0
  8698  001FA2                     _BMP085Pressure:
  8699                           	opt stack 22
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;incstack = 0
  8703                           ;BMP085Pressure@getTemp stored from wreg
  8704  001FA2  6E4B               	movwf	BMP085Pressure@getTemp,c
  8705                           
  8706                           ;bmp180.c: 249: if (getTemp)
  8707  001FA4  504B               	movf	BMP085Pressure@getTemp,w,c
  8708  001FA6  E00C               	bz	l5726
  8709                           
  8710                           ;bmp180.c: 250: T = BMP085GetTemp(BMP085ReadUT());
  8711  001FA8  EC2E  F011         	call	_BMP085ReadUT	;wreg free
  8712  001FAC  C00F  F029         	movff	?_BMP085ReadUT,BMP085GetTemp@_tu
  8713  001FB0  C010  F02A         	movff	?_BMP085ReadUT+1,BMP085GetTemp@_tu+1
  8714  001FB4  C011  F02B         	movff	?_BMP085ReadUT+2,BMP085GetTemp@_tu+2
  8715  001FB8  C012  F02C         	movff	?_BMP085ReadUT+3,BMP085GetTemp@_tu+3
  8716  001FBC  EC2F  F007         	call	_BMP085GetTemp	;wreg free
  8717  001FC0                     l5726:
  8718                           
  8719                           ;bmp180.c: 251: return(BMP085GetPressure(bmp085ReadUP()));
  8720                           ;	Return value of _BMP085Pressure is never used
  8721  001FC0  ECD7  F00C         	call	_bmp085ReadUP	;wreg free
  8722  001FC4  C00F  F03F         	movff	?_bmp085ReadUP,BMP085GetPressure@_pu
  8723  001FC8  C010  F040         	movff	?_bmp085ReadUP+1,BMP085GetPressure@_pu+1
  8724  001FCC  C011  F041         	movff	?_bmp085ReadUP+2,BMP085GetPressure@_pu+2
  8725  001FD0  C012  F042         	movff	?_bmp085ReadUP+3,BMP085GetPressure@_pu+3
  8726  001FD4  EF09  F000         	goto	_BMP085GetPressure	;wreg free
  8727  001FD8                     __end_of_BMP085Pressure:
  8728                           	opt stack 0
  8729                           tosu	equ	0xFFF
  8730                           tosh	equ	0xFFE
  8731                           tosl	equ	0xFFD
  8732                           pclath	equ	0xFFA
  8733                           tblptru	equ	0xFF8
  8734                           tblptrh	equ	0xFF7
  8735                           tblptrl	equ	0xFF6
  8736                           tablat	equ	0xFF5
  8737                           prodh	equ	0xFF4
  8738                           prodl	equ	0xFF3
  8739                           intcon	equ	0xFF2
  8740                           intcon2	equ	0xFF1
  8741                           postinc0	equ	0xFEE
  8742                           wreg	equ	0xFE8
  8743                           indf1	equ	0xFE7
  8744                           plusw1	equ	0xFE3
  8745                           fsr1h	equ	0xFE2
  8746                           fsr1l	equ	0xFE1
  8747                           indf2	equ	0xFDF
  8748                           postinc2	equ	0xFDE
  8749                           postdec2	equ	0xFDD
  8750                           plusw2	equ	0xFDB
  8751                           fsr2h	equ	0xFDA
  8752                           fsr2l	equ	0xFD9
  8753                           status	equ	0xFD8
  8754                           
  8755 ;; *************** function _bmp085ReadUP *****************
  8756 ;; Defined at:
  8757 ;;		line 162 in file "bmp180.c"
  8758 ;; Parameters:    Size  Location     Type
  8759 ;;		None
  8760 ;; Auto vars:     Size  Location     Type
  8761 ;;  p               4    0        long 
  8762 ;;  xlsb            1    0        unsigned char 
  8763 ;;  lsb             1    0        unsigned char 
  8764 ;;  msb             1    0        unsigned char 
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  4   14[COMRAM] long 
  8767 ;; Registers used:
  8768 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8774 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;Total ram usage:        6 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; Hardware stack levels required when called:    3
  8781 ;; This function calls:
  8782 ;;		Nothing
  8783 ;; This function is called by:
  8784 ;;		_BMP085Pressure
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           	psect	text38
  8789  0019AE                     __ptext38:
  8790                           	opt stack 0
  8791  0019AE                     _bmp085ReadUP:
  8792                           	opt stack 24
  8793                           
  8794                           ;bmp180.c: 165: uint8_t msb, lsb, xlsb;
  8795                           ;bmp180.c: 166: int32_t p;
  8796                           ;bmp180.c: 173: switch (OSS)
  8797                           
  8798                           ;incstack = 0
  8799  0019AE  D025               	goto	l5286
  8800  0019B0                     l5276:
  8801  0019B0  0E41               	movlw	65
  8802  0019B2  6E13               	movwf	??_bmp085ReadUP& (0+255),c
  8803  0019B4  0EEE               	movlw	238
  8804  0019B6                     u5177:
  8805  0019B6  2EE8               	decfsz	wreg,f,c
  8806  0019B8  D7FE               	bra	u5177
  8807  0019BA  2E13               	decfsz	??_bmp085ReadUP& (0+255),f,c
  8808  0019BC  D7FC               	bra	u5177
  8809  0019BE  D01B               	goto	L7
  8810  0019C0                     l5278:
  8811  0019C0  0E68               	movlw	104
  8812  0019C2  6E13               	movwf	??_bmp085ReadUP& (0+255),c
  8813  0019C4  0EE4               	movlw	228
  8814  0019C6                     u5187:
  8815  0019C6  2EE8               	decfsz	wreg,f,c
  8816  0019C8  D7FE               	bra	u5187
  8817  0019CA  2E13               	decfsz	??_bmp085ReadUP& (0+255),f,c
  8818  0019CC  D7FC               	bra	u5187
  8819  0019CE  D013               	goto	L7
  8820  0019D0                     l5280:
  8821  0019D0  0EB6               	movlw	182
  8822  0019D2  6E13               	movwf	??_bmp085ReadUP& (0+255),c
  8823  0019D4  0ED0               	movlw	208
  8824  0019D6                     u5197:
  8825  0019D6  2EE8               	decfsz	wreg,f,c
  8826  0019D8  D7FE               	bra	u5197
  8827  0019DA  2E13               	decfsz	??_bmp085ReadUP& (0+255),f,c
  8828  0019DC  D7FC               	bra	u5197
  8829  0019DE  D00B               	goto	L7
  8830  0019E0                     l5282:
  8831  0019E0  0E02               	movlw	2
  8832  0019E2  6E14               	movwf	(??_bmp085ReadUP+1)& (0+255),c
  8833  0019E4  0E52               	movlw	82
  8834  0019E6  6E13               	movwf	??_bmp085ReadUP& (0+255),c
  8835  0019E8  0EA6               	movlw	166
  8836  0019EA                     u5207:
  8837  0019EA  2EE8               	decfsz	wreg,f,c
  8838  0019EC  D7FE               	bra	u5207
  8839  0019EE  2E13               	decfsz	??_bmp085ReadUP& (0+255),f,c
  8840  0019F0  D7FC               	bra	u5207
  8841  0019F2  2E14               	decfsz	(??_bmp085ReadUP+1)& (0+255),f,c
  8842  0019F4  D7FA               	bra	u5207
  8843  0019F6                     L7:
  8844  0019F6  D000               	nop2	
  8845  0019F8  D00D               	goto	l5288
  8846  0019FA                     l5286:
  8847  0019FA  0EC7               	movlw	low _OSS
  8848  0019FC  6EF6               	movwf	tblptrl,c
  8849  0019FE                     	if	1	;There is more than 1 active tblptr byte
  8850  0019FE  0EBA               	movlw	high _OSS
  8851  001A00  6EF7               	movwf	tblptrh,c
  8852  001A02                     	endif
  8853  001A02                     	if	0	;There are less than 3 active tblptr bytes
  8854  001A02                     	endif
  8855  001A02  0008               	tblrd		*
  8856  001A04  50F5               	movf	tablat,w,c
  8857                           
  8858                           ; Switch size 1, requested type "space"
  8859                           ; Number of cases is 4, Range of values is 0 to 3
  8860                           ; switch strategies available:
  8861                           ; Name         Instructions Cycles
  8862                           ; simple_byte           13     7 (average)
  8863                           ;	Chosen strategy is simple_byte
  8864  001A06  E0D4               	bz	l5276
  8865  001A08  0A01               	xorlw	1	; case 1
  8866  001A0A  E0DA               	bz	l5278
  8867  001A0C  0A03               	xorlw	3	; case 2
  8868  001A0E  E0E0               	bz	l5280
  8869  001A10  0A01               	xorlw	1	; case 3
  8870  001A12  E0E6               	bz	l5282
  8871  001A14                     l5288:
  8872                           
  8873                           ;bmp180.c: 187: return 23843;
  8874  001A14  0E23               	movlw	35
  8875  001A16  6E0F               	movwf	?_bmp085ReadUP,c
  8876  001A18  0E5D               	movlw	93
  8877  001A1A  6E10               	movwf	?_bmp085ReadUP+1,c
  8878  001A1C  6A11               	clrf	?_bmp085ReadUP+2,c
  8879  001A1E  6A12               	clrf	?_bmp085ReadUP+3,c
  8880  001A20  0C00               	retlw	0	;funcret
  8881  001A22                     __end_of_bmp085ReadUP:
  8882                           	opt stack 0
  8883                           tosu	equ	0xFFF
  8884                           tosh	equ	0xFFE
  8885                           tosl	equ	0xFFD
  8886                           pclath	equ	0xFFA
  8887                           tblptru	equ	0xFF8
  8888                           tblptrh	equ	0xFF7
  8889                           tblptrl	equ	0xFF6
  8890                           tablat	equ	0xFF5
  8891                           prodh	equ	0xFF4
  8892                           prodl	equ	0xFF3
  8893                           intcon	equ	0xFF2
  8894                           intcon2	equ	0xFF1
  8895                           postinc0	equ	0xFEE
  8896                           wreg	equ	0xFE8
  8897                           indf1	equ	0xFE7
  8898                           plusw1	equ	0xFE3
  8899                           fsr1h	equ	0xFE2
  8900                           fsr1l	equ	0xFE1
  8901                           indf2	equ	0xFDF
  8902                           postinc2	equ	0xFDE
  8903                           postdec2	equ	0xFDD
  8904                           plusw2	equ	0xFDB
  8905                           fsr2h	equ	0xFDA
  8906                           fsr2l	equ	0xFD9
  8907                           status	equ	0xFD8
  8908                           
  8909 ;; *************** function _BMP085ReadUT *****************
  8910 ;; Defined at:
  8911 ;;		line 147 in file "bmp180.c"
  8912 ;; Parameters:    Size  Location     Type
  8913 ;;		None
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;		None
  8916 ;; Return value:  Size  Location     Type
  8917 ;;                  4   14[COMRAM] long 
  8918 ;; Registers used:
  8919 ;;		wreg, status,2
  8920 ;; Tracked objects:
  8921 ;;		On entry : 0/0
  8922 ;;		On exit  : 0/0
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8925 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8928 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8929 ;;Total ram usage:        5 bytes
  8930 ;; Hardware stack levels used:    1
  8931 ;; Hardware stack levels required when called:    3
  8932 ;; This function calls:
  8933 ;;		Nothing
  8934 ;; This function is called by:
  8935 ;;		_BMP085Pressure
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           	psect	text39
  8940  00225C                     __ptext39:
  8941                           	opt stack 0
  8942  00225C                     _BMP085ReadUT:
  8943                           	opt stack 24
  8944                           
  8945                           ;bmp180.c: 153: _delay((unsigned long)((5)*(40000000/4000.0)));
  8946                           
  8947                           ;incstack = 0
  8948  00225C  0E41               	movlw	65
  8949  00225E  6E13               	movwf	??_BMP085ReadUT& (0+255),c
  8950  002260  0EEE               	movlw	238
  8951  002262                     u5217:
  8952  002262  2EE8               	decfsz	wreg,f,c
  8953  002264  D7FE               	bra	u5217
  8954  002266  2E13               	decfsz	??_BMP085ReadUT& (0+255),f,c
  8955  002268  D7FC               	bra	u5217
  8956  00226A  D000               	nop2	
  8957                           
  8958                           ;bmp180.c: 156: return 27898;
  8959  00226C  0EFA               	movlw	250
  8960  00226E  6E0F               	movwf	?_BMP085ReadUT,c
  8961  002270  0E6C               	movlw	108
  8962  002272  6E10               	movwf	?_BMP085ReadUT+1,c
  8963  002274  6A11               	clrf	?_BMP085ReadUT+2,c
  8964  002276  6A12               	clrf	?_BMP085ReadUT+3,c
  8965  002278  0C00               	retlw	0	;funcret
  8966  00227A                     __end_of_BMP085ReadUT:
  8967                           	opt stack 0
  8968                           tosu	equ	0xFFF
  8969                           tosh	equ	0xFFE
  8970                           tosl	equ	0xFFD
  8971                           pclath	equ	0xFFA
  8972                           tblptru	equ	0xFF8
  8973                           tblptrh	equ	0xFF7
  8974                           tblptrl	equ	0xFF6
  8975                           tablat	equ	0xFF5
  8976                           prodh	equ	0xFF4
  8977                           prodl	equ	0xFF3
  8978                           intcon	equ	0xFF2
  8979                           intcon2	equ	0xFF1
  8980                           postinc0	equ	0xFEE
  8981                           wreg	equ	0xFE8
  8982                           indf1	equ	0xFE7
  8983                           plusw1	equ	0xFE3
  8984                           fsr1h	equ	0xFE2
  8985                           fsr1l	equ	0xFE1
  8986                           indf2	equ	0xFDF
  8987                           postinc2	equ	0xFDE
  8988                           postdec2	equ	0xFDD
  8989                           plusw2	equ	0xFDB
  8990                           fsr2h	equ	0xFDA
  8991                           fsr2l	equ	0xFD9
  8992                           status	equ	0xFD8
  8993                           
  8994 ;; *************** function _BMP085GetTemp *****************
  8995 ;; Defined at:
  8996 ;;		line 192 in file "bmp180.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;  _tu             4   40[COMRAM] long 
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;  Tt              4   52[COMRAM] long 
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  4   40[COMRAM] long 
  9003 ;; Registers used:
  9004 ;;		wreg, status,2, status,0, cstack
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9010 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9012 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9014 ;;Total ram usage:       16 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; Hardware stack levels required when called:    4
  9017 ;; This function calls:
  9018 ;;		___aldiv
  9019 ;;		___lmul
  9020 ;; This function is called by:
  9021 ;;		_BMP085Pressure
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text40
  9026  000E5E                     __ptext40:
  9027                           	opt stack 0
  9028  000E5E                     _BMP085GetTemp:
  9029                           	opt stack 23
  9030                           
  9031                           ;bmp180.c: 195: int32_t Tt;
  9032                           ;bmp180.c: 197: X1 = (((int32_t)_tu - (int32_t)ac6) * (int32_t)ac5) / 32768;
  9033                           
  9034                           ;incstack = 0
  9035  000E5E  0100               	movlb	0	; () banked
  9036  000E60  51A1               	movf	_ac6& (0+255),w,b
  9037  000E62  6E2D               	movwf	??_BMP085GetTemp& (0+255),c
  9038  000E64  51A2               	movf	(_ac6+1)& (0+255),w,b
  9039  000E66  6E2E               	movwf	(??_BMP085GetTemp+1)& (0+255),c
  9040  000E68  6A2F               	clrf	(??_BMP085GetTemp+2)& (0+255),c
  9041  000E6A  6A30               	clrf	(??_BMP085GetTemp+3)& (0+255),c
  9042  000E6C  502D               	movf	??_BMP085GetTemp,w,c
  9043  000E6E  5C29               	subwf	BMP085GetTemp@_tu,w,c
  9044  000E70  6E0F               	movwf	___lmul@multiplier,c
  9045  000E72  502E               	movf	??_BMP085GetTemp+1,w,c
  9046  000E74  582A               	subwfb	BMP085GetTemp@_tu+1,w,c
  9047  000E76  6E10               	movwf	___lmul@multiplier+1,c
  9048  000E78  502F               	movf	??_BMP085GetTemp+2,w,c
  9049  000E7A  582B               	subwfb	BMP085GetTemp@_tu+2,w,c
  9050  000E7C  6E11               	movwf	___lmul@multiplier+2,c
  9051  000E7E  5030               	movf	??_BMP085GetTemp+3,w,c
  9052  000E80  582C               	subwfb	BMP085GetTemp@_tu+3,w,c
  9053  000E82  6E12               	movwf	___lmul@multiplier+3,c
  9054  000E84  C0A3  F013         	movff	_ac5,___lmul@multiplicand
  9055  000E88  C0A4  F014         	movff	_ac5+1,___lmul@multiplicand+1
  9056  000E8C  6A15               	clrf	___lmul@multiplicand+2,c
  9057  000E8E  6A16               	clrf	___lmul@multiplicand+3,c
  9058  000E90  EC91  F00E         	call	___lmul	;wreg free
  9059  000E94  ECA9  F001         	call	PL14	;call to abstracted procedure
  9060  000E98  0E80               	movlw	128
  9061  000E9A  EC3F  F002         	call	PL94	;call to abstracted procedure
  9062  000E9E  ECE9  F009         	call	___aldiv	;wreg free
  9063  000EA2  ECDB  F001         	call	PL36	;call to abstracted procedure
  9064                           
  9065                           ;bmp180.c: 198: X2 = ((int32_t)mc << 11) / (X1 + md);
  9066  000EA6  C09B  F02D         	movff	_mc,??_BMP085GetTemp
  9067  000EAA  C09C  F02E         	movff	_mc+1,??_BMP085GetTemp+1
  9068  000EAE  0E00               	movlw	0
  9069  000EB0  BE2E               	btfsc	(??_BMP085GetTemp+1)& (0+255),7,c
  9070  000EB2  0EFF               	movlw	255
  9071  000EB4  6E2F               	movwf	(??_BMP085GetTemp+2)& (0+255),c
  9072  000EB6  6E30               	movwf	(??_BMP085GetTemp+3)& (0+255),c
  9073  000EB8  0E0B               	movlw	11
  9074  000EBA                     u4055:
  9075  000EBA  90D8               	bcf	status,0,c
  9076  000EBC  362D               	rlcf	??_BMP085GetTemp,f,c
  9077  000EBE  362E               	rlcf	??_BMP085GetTemp+1,f,c
  9078  000EC0  362F               	rlcf	??_BMP085GetTemp+2,f,c
  9079  000EC2  3630               	rlcf	??_BMP085GetTemp+3,f,c
  9080  000EC4  2EE8               	decfsz	wreg,f,c
  9081  000EC6  D7F9               	goto	u4055
  9082  000EC8  C02D  F01B         	movff	??_BMP085GetTemp,___aldiv@dividend
  9083  000ECC  C02E  F01C         	movff	??_BMP085GetTemp+1,___aldiv@dividend+1
  9084  000ED0  C02F  F01D         	movff	??_BMP085GetTemp+2,___aldiv@dividend+2
  9085  000ED4  C030  F01E         	movff	??_BMP085GetTemp+3,___aldiv@dividend+3
  9086  000ED8  C099  F031         	movff	_md,??_BMP085GetTemp+4
  9087  000EDC  C09A  F032         	movff	_md+1,??_BMP085GetTemp+5
  9088  000EE0  0E00               	movlw	0
  9089  000EE2  BE32               	btfsc	(??_BMP085GetTemp+5)& (0+255),7,c
  9090  000EE4  0EFF               	movlw	255
  9091  000EE6  6E33               	movwf	(??_BMP085GetTemp+6)& (0+255),c
  9092  000EE8  6E34               	movwf	(??_BMP085GetTemp+7)& (0+255),c
  9093  000EEA  5060               	movf	_X1,w,c
  9094  000EEC  2431               	addwf	??_BMP085GetTemp+4,w,c
  9095  000EEE  6E1F               	movwf	___aldiv@divisor,c
  9096  000EF0  5061               	movf	_X1+1,w,c
  9097  000EF2  2032               	addwfc	??_BMP085GetTemp+5,w,c
  9098  000EF4  6E20               	movwf	___aldiv@divisor+1,c
  9099  000EF6  5062               	movf	_X1+2,w,c
  9100  000EF8  2033               	addwfc	??_BMP085GetTemp+6,w,c
  9101  000EFA  6E21               	movwf	___aldiv@divisor+2,c
  9102  000EFC  5063               	movf	_X1+3,w,c
  9103  000EFE  2034               	addwfc	??_BMP085GetTemp+7,w,c
  9104  000F00  6E22               	movwf	___aldiv@divisor+3,c
  9105  000F02  ECE9  F009         	call	___aldiv	;wreg free
  9106                           
  9107                           ;bmp180.c: 199: B5 = X1 + X2;
  9108  000F06  ECBA  F001         	call	PL28	;call to abstracted procedure
  9109  000F0A  0100               	movlb	0	; () banked
  9110  000F0C  6F89               	movwf	_B5& (0+255),b
  9111  000F0E  505D               	movf	_X2+1,w,c
  9112  000F10  2061               	addwfc	_X1+1,w,c
  9113  000F12  6F8A               	movwf	(_B5+1)& (0+255),b
  9114  000F14  505E               	movf	_X2+2,w,c
  9115  000F16  2062               	addwfc	_X1+2,w,c
  9116  000F18  6F8B               	movwf	(_B5+2)& (0+255),b
  9117  000F1A  505F               	movf	_X2+3,w,c
  9118  000F1C  2063               	addwfc	_X1+3,w,c
  9119  000F1E  6F8C               	movwf	(_B5+3)& (0+255),b
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;bmp180.c: 201: Tt = (B5+8) / 16;
  9123  000F20  0E08               	movlw	8
  9124  000F22  2589               	addwf	_B5& (0+255),w,b
  9125  000F24  6E1B               	movwf	___aldiv@dividend,c
  9126  000F26  0E00               	movlw	0
  9127  000F28  218A               	addwfc	(_B5+1)& (0+255),w,b
  9128  000F2A  6E1C               	movwf	___aldiv@dividend+1,c
  9129  000F2C  0E00               	movlw	0
  9130  000F2E  218B               	addwfc	(_B5+2)& (0+255),w,b
  9131  000F30  6E1D               	movwf	___aldiv@dividend+2,c
  9132  000F32  0E00               	movlw	0
  9133  000F34  218C               	addwfc	(_B5+3)& (0+255),w,b
  9134  000F36  6E1E               	movwf	___aldiv@dividend+3,c
  9135  000F38  0E10               	movlw	16
  9136  000F3A  EC30  F002         	call	PL64	;call to abstracted procedure
  9137  000F3E  ECE9  F009         	call	___aldiv	;wreg free
  9138  000F42  C01B  F035         	movff	?___aldiv,BMP085GetTemp@Tt
  9139  000F46  C01C  F036         	movff	?___aldiv+1,BMP085GetTemp@Tt+1
  9140  000F4A  C01D  F037         	movff	?___aldiv+2,BMP085GetTemp@Tt+2
  9141  000F4E  C01E  F038         	movff	?___aldiv+3,BMP085GetTemp@Tt+3
  9142                           
  9143                           ;bmp180.c: 202: return(Tt);
  9144  000F52  C035  F029         	movff	BMP085GetTemp@Tt,?_BMP085GetTemp
  9145  000F56  C036  F02A         	movff	BMP085GetTemp@Tt+1,?_BMP085GetTemp+1
  9146  000F5A  C037  F02B         	movff	BMP085GetTemp@Tt+2,?_BMP085GetTemp+2
  9147  000F5E  C038  F02C         	movff	BMP085GetTemp@Tt+3,?_BMP085GetTemp+3
  9148  000F62  0012               	return		;funcret
  9149  000F64                     __end_of_BMP085GetTemp:
  9150                           	opt stack 0
  9151                           tosu	equ	0xFFF
  9152                           tosh	equ	0xFFE
  9153                           tosl	equ	0xFFD
  9154                           pclath	equ	0xFFA
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           intcon	equ	0xFF2
  9162                           intcon2	equ	0xFF1
  9163                           postinc0	equ	0xFEE
  9164                           wreg	equ	0xFE8
  9165                           indf1	equ	0xFE7
  9166                           plusw1	equ	0xFE3
  9167                           fsr1h	equ	0xFE2
  9168                           fsr1l	equ	0xFE1
  9169                           indf2	equ	0xFDF
  9170                           postinc2	equ	0xFDE
  9171                           postdec2	equ	0xFDD
  9172                           plusw2	equ	0xFDB
  9173                           fsr2h	equ	0xFDA
  9174                           fsr2l	equ	0xFD9
  9175                           status	equ	0xFD8
  9176                           
  9177 ;; *************** function _BMP085GetPressure *****************
  9178 ;; Defined at:
  9179 ;;		line 208 in file "bmp180.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;  _pu             4   62[COMRAM] long 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;  Pp              4    4[BANK0 ] long 
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  4   62[COMRAM] long 
  9186 ;; Registers used:
  9187 ;;		wreg, status,2, status,0, cstack
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9193 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;      Totals:        12       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;Total ram usage:       20 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    5
  9200 ;; This function calls:
  9201 ;;		___aldiv
  9202 ;;		___altoft
  9203 ;;		___ftmul
  9204 ;;		___fttol
  9205 ;;		___lldiv
  9206 ;;		___lmul
  9207 ;; This function is called by:
  9208 ;;		_BMP085Pressure
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           	psect	text41
  9213  000012                     __ptext41:
  9214                           	opt stack 0
  9215  000012                     _BMP085GetPressure:
  9216                           	opt stack 22
  9217                           
  9218                           ;bmp180.c: 211: int32_t Pp;
  9219                           ;bmp180.c: 213: B6 = B5 - 4000;
  9220                           
  9221                           ;incstack = 0
  9222  000012  0E60               	movlw	96
  9223  000014  0100               	movlb	0	; () banked
  9224  000016  2589               	addwf	_B5& (0+255),w,b
  9225  000018  6E58               	movwf	_B6,c
  9226  00001A  0EF0               	movlw	240
  9227  00001C  218A               	addwfc	(_B5+1)& (0+255),w,b
  9228  00001E  6E59               	movwf	_B6+1,c
  9229  000020  0EFF               	movlw	255
  9230  000022  218B               	addwfc	(_B5+2)& (0+255),w,b
  9231  000024  6E5A               	movwf	_B6+2,c
  9232  000026  0EFF               	movlw	255
  9233  000028  218C               	addwfc	(_B5+3)& (0+255),w,b
  9234  00002A  6E5B               	movwf	_B6+3,c
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;bmp180.c: 215: X1 = (b2*(B6*B6/4096))/2048;
  9238  00002C  D9AE               	call	PL34	;call to abstracted procedure
  9239  00002E  EC91  F00E         	call	___lmul	;wreg free
  9240  000032  C00F  F01B         	movff	?___lmul,___aldiv@dividend
  9241  000036  D997               	call	PL20	;call to abstracted procedure
  9242  000038  ECE9  F009         	call	___aldiv	;wreg free
  9243  00003C  D9FF               	call	PL56	;call to abstracted procedure
  9244                           
  9245                           ;bmp180.c: 215: X1 = (b2*(B6*B6/4096))/2048;
  9246  00003E  C09D  F00F         	movff	_b2,___lmul@multiplier
  9247  000042  C09E  F010         	movff	_b2+1,___lmul@multiplier+1
  9248  000046  D9D7               	call	PL48	;call to abstracted procedure
  9249  000048  DA02               	call	PL58	;call to abstracted procedure
  9250  00004A  EC91  F00E         	call	___lmul	;wreg free
  9251  00004E  D981               	call	PL14	;call to abstracted procedure
  9252  000050  DA11               	call	PL88	;call to abstracted procedure
  9253  000052  ECE9  F009         	call	___aldiv	;wreg free
  9254  000056  D9AF               	call	PL36	;call to abstracted procedure
  9255                           
  9256                           ;bmp180.c: 217: X2 = ac2 * B6 / 2048;
  9257  000058  C0A9  F00F         	movff	_ac2,___lmul@multiplier
  9258  00005C  C0AA  F010         	movff	_ac2+1,___lmul@multiplier+1
  9259  000060  D9CA               	call	PL48	;call to abstracted procedure
  9260  000062  D9B2               	call	PL38	;call to abstracted procedure
  9261  000064  EC91  F00E         	call	___lmul	;wreg free
  9262  000068  D974               	call	PL14	;call to abstracted procedure
  9263  00006A  DA04               	call	PL88	;call to abstracted procedure
  9264  00006C  ECE9  F009         	call	___aldiv	;wreg free
  9265                           
  9266                           ;bmp180.c: 218: X3 = X1 + X2;
  9267  000070  D981               	call	PL28	;call to abstracted procedure
  9268  000072  0100               	movlb	0	; () banked
  9269  000074  6F95               	movwf	_X3& (0+255),b
  9270  000076  505D               	movf	_X2+1,w,c
  9271  000078  2061               	addwfc	_X1+1,w,c
  9272  00007A  6F96               	movwf	(_X3+1)& (0+255),b
  9273  00007C  505E               	movf	_X2+2,w,c
  9274  00007E  2062               	addwfc	_X1+2,w,c
  9275  000080  6F97               	movwf	(_X3+2)& (0+255),b
  9276  000082  505F               	movf	_X2+3,w,c
  9277  000084  2063               	addwfc	_X1+3,w,c
  9278  000086  6F98               	movwf	(_X3+3)& (0+255),b
  9279                           
  9280                           ;bmp180.c: 219: B3 = ((((int32_t)ac1 * 4 + X3) << OSS) + 2) / 4;
  9281  000088  C064  F043         	movff	_ac1,??_BMP085GetPressure
  9282  00008C  C065  F044         	movff	_ac1+1,??_BMP085GetPressure+1
  9283  000090  0E00               	movlw	0
  9284  000092  BE44               	btfsc	(??_BMP085GetPressure+1)& (0+255),7,c
  9285  000094  0EFF               	movlw	255
  9286  000096  6E45               	movwf	(??_BMP085GetPressure+2)& (0+255),c
  9287  000098  6E46               	movwf	(??_BMP085GetPressure+3)& (0+255),c
  9288  00009A  0E02               	movlw	2
  9289  00009C                     u4065:
  9290  00009C  90D8               	bcf	status,0,c
  9291  00009E  3643               	rlcf	??_BMP085GetPressure,f,c
  9292  0000A0  3644               	rlcf	??_BMP085GetPressure+1,f,c
  9293  0000A2  3645               	rlcf	??_BMP085GetPressure+2,f,c
  9294  0000A4  3646               	rlcf	??_BMP085GetPressure+3,f,c
  9295  0000A6  2EE8               	decfsz	wreg,f,c
  9296  0000A8  D7F9               	goto	u4065
  9297  0000AA  5195               	movf	_X3& (0+255),w,b
  9298  0000AC  2443               	addwf	??_BMP085GetPressure,w,c
  9299  0000AE  6E47               	movwf	(??_BMP085GetPressure+4)& (0+255),c
  9300  0000B0  5196               	movf	(_X3+1)& (0+255),w,b
  9301  0000B2  2044               	addwfc	??_BMP085GetPressure+1,w,c
  9302  0000B4  6E48               	movwf	(??_BMP085GetPressure+5)& (0+255),c
  9303  0000B6  5197               	movf	(_X3+2)& (0+255),w,b
  9304  0000B8  2045               	addwfc	??_BMP085GetPressure+2,w,c
  9305  0000BA  6E49               	movwf	(??_BMP085GetPressure+6)& (0+255),c
  9306  0000BC  5198               	movf	(_X3+3)& (0+255),w,b
  9307  0000BE  2046               	addwfc	??_BMP085GetPressure+3,w,c
  9308  0000C0  6E4A               	movwf	(??_BMP085GetPressure+7)& (0+255),c
  9309  0000C2  0E02               	movlw	2
  9310  0000C4  2447               	addwf	??_BMP085GetPressure+4,w,c
  9311  0000C6  6E1B               	movwf	___aldiv@dividend,c
  9312  0000C8  0E00               	movlw	0
  9313  0000CA  2048               	addwfc	??_BMP085GetPressure+5,w,c
  9314  0000CC  6E1C               	movwf	___aldiv@dividend+1,c
  9315  0000CE  0E00               	movlw	0
  9316  0000D0  2049               	addwfc	??_BMP085GetPressure+6,w,c
  9317  0000D2  6E1D               	movwf	___aldiv@dividend+2,c
  9318  0000D4  0E00               	movlw	0
  9319  0000D6  204A               	addwfc	??_BMP085GetPressure+7,w,c
  9320  0000D8  6E1E               	movwf	___aldiv@dividend+3,c
  9321  0000DA  0E04               	movlw	4
  9322  0000DC  D9C1               	call	PL64	;call to abstracted procedure
  9323  0000DE  ECE9  F009         	call	___aldiv	;wreg free
  9324  0000E2  C01B  F091         	movff	?___aldiv,_B3
  9325  0000E6  C01C  F092         	movff	?___aldiv+1,_B3+1
  9326  0000EA  C01D  F093         	movff	?___aldiv+2,_B3+2
  9327  0000EE  C01E  F094         	movff	?___aldiv+3,_B3+3
  9328                           
  9329                           ;bmp180.c: 221: X1 = ac3 * B6 / 8192;
  9330  0000F2  C0A7  F00F         	movff	_ac3,___lmul@multiplier
  9331  0000F6  C0A8  F010         	movff	_ac3+1,___lmul@multiplier+1
  9332  0000FA  D97D               	call	PL48	;call to abstracted procedure
  9333  0000FC  D965               	call	PL38	;call to abstracted procedure
  9334  0000FE  EC91  F00E         	call	___lmul	;wreg free
  9335  000102  D927               	call	PL14	;call to abstracted procedure
  9336  000104  0E20               	movlw	32
  9337  000106  D9BB               	call	PL94	;call to abstracted procedure
  9338  000108  ECE9  F009         	call	___aldiv	;wreg free
  9339  00010C  D954               	call	PL36	;call to abstracted procedure
  9340                           
  9341                           ;bmp180.c: 223: X2 = (b1*(B6*B6 / 4096)) / 65536;
  9342  00010E  D93D               	call	PL34	;call to abstracted procedure
  9343  000110  EC91  F00E         	call	___lmul	;wreg free
  9344  000114  C00F  F01B         	movff	?___lmul,___aldiv@dividend
  9345  000118  D926               	call	PL20	;call to abstracted procedure
  9346  00011A  ECE9  F009         	call	___aldiv	;wreg free
  9347  00011E  D98E               	call	PL56	;call to abstracted procedure
  9348                           
  9349                           ;bmp180.c: 223: X2 = (b1*(B6*B6 / 4096)) / 65536;
  9350  000120  C09F  F00F         	movff	_b1,___lmul@multiplier
  9351  000124  C0A0  F010         	movff	_b1+1,___lmul@multiplier+1
  9352  000128  D966               	call	PL48	;call to abstracted procedure
  9353  00012A  D991               	call	PL58	;call to abstracted procedure
  9354  00012C  EC91  F00E         	call	___lmul	;wreg free
  9355  000130  D910               	call	PL14	;call to abstracted procedure
  9356  000132  D99B               	call	PL74	;call to abstracted procedure
  9357  000134  ECE9  F009         	call	___aldiv	;wreg free
  9358                           
  9359                           ;bmp180.c: 225: X3 = ((X1 + X2)+2) / 4;
  9360  000138  D91D               	call	PL28	;call to abstracted procedure
  9361  00013A  D963               	call	PL50	;call to abstracted procedure
  9362  00013C  0E02               	movlw	2
  9363  00013E  2443               	addwf	??_BMP085GetPressure,w,c
  9364  000140  6E1B               	movwf	___aldiv@dividend,c
  9365  000142  0E00               	movlw	0
  9366  000144  D969               	call	PL52	;call to abstracted procedure
  9367  000146  0E04               	movlw	4
  9368  000148  D98B               	call	PL64	;call to abstracted procedure
  9369  00014A  ECE9  F009         	call	___aldiv	;wreg free
  9370  00014E  C01B  F095         	movff	?___aldiv,_X3
  9371  000152  C01C  F096         	movff	?___aldiv+1,_X3+1
  9372  000156  C01D  F097         	movff	?___aldiv+2,_X3+2
  9373  00015A  C01E  F098         	movff	?___aldiv+3,_X3+3
  9374                           
  9375                           ;bmp180.c: 227: B4 = (ac4 * (uint32_t)(X3 + 32768)) / 32768;
  9376  00015E  0E00               	movlw	0
  9377  000160  0100               	movlb	0	; () banked
  9378  000162  2595               	addwf	_X3& (0+255),w,b
  9379  000164  6E0F               	movwf	___lmul@multiplier,c
  9380  000166  0E80               	movlw	128
  9381  000168  2196               	addwfc	(_X3+1)& (0+255),w,b
  9382  00016A  6E10               	movwf	___lmul@multiplier+1,c
  9383  00016C  0E00               	movlw	0
  9384  00016E  2197               	addwfc	(_X3+2)& (0+255),w,b
  9385  000170  6E11               	movwf	___lmul@multiplier+2,c
  9386  000172  0E00               	movlw	0
  9387  000174  2198               	addwfc	(_X3+3)& (0+255),w,b
  9388  000176  6E12               	movwf	___lmul@multiplier+3,c
  9389  000178  C0A5  F013         	movff	_ac4,___lmul@multiplicand
  9390  00017C  C0A6  F014         	movff	_ac4+1,___lmul@multiplicand+1
  9391  000180  6A15               	clrf	___lmul@multiplicand+2,c
  9392  000182  6A16               	clrf	___lmul@multiplicand+3,c
  9393  000184  EC91  F00E         	call	___lmul	;wreg free
  9394  000188  0E10               	movlw	16
  9395  00018A  D005               	goto	u4070
  9396  00018C                     u4075:
  9397  00018C  90D8               	bcf	status,0,c
  9398  00018E  3212               	rrcf	?___lmul+3,f,c
  9399  000190  3211               	rrcf	?___lmul+2,f,c
  9400  000192  3210               	rrcf	?___lmul+1,f,c
  9401  000194  320F               	rrcf	?___lmul,f,c
  9402  000196                     u4070:
  9403  000196  2EE8               	decfsz	wreg,f,c
  9404  000198  D7F9               	goto	u4075
  9405  00019A  C00F  F08D         	movff	?___lmul,_B4
  9406  00019E  C010  F08E         	movff	?___lmul+1,_B4+1
  9407  0001A2  C011  F08F         	movff	?___lmul+2,_B4+2
  9408  0001A6  C012  F090         	movff	?___lmul+3,_B4+3
  9409                           
  9410                           ;bmp180.c: 228: B7 = ((uint32_t)_pu - B3) * (50000>>OSS);
  9411  0001AA  0100               	movlb	0	; () banked
  9412  0001AC  5191               	movf	_B3& (0+255),w,b
  9413  0001AE  5C3F               	subwf	BMP085GetPressure@_pu,w,c
  9414  0001B0  6E0F               	movwf	___lmul@multiplier,c
  9415  0001B2  5192               	movf	(_B3+1)& (0+255),w,b
  9416  0001B4  5840               	subwfb	BMP085GetPressure@_pu+1,w,c
  9417  0001B6  6E10               	movwf	___lmul@multiplier+1,c
  9418  0001B8  5193               	movf	(_B3+2)& (0+255),w,b
  9419  0001BA  5841               	subwfb	BMP085GetPressure@_pu+2,w,c
  9420  0001BC  6E11               	movwf	___lmul@multiplier+2,c
  9421  0001BE  5194               	movf	(_B3+3)& (0+255),w,b
  9422  0001C0  5842               	subwfb	BMP085GetPressure@_pu+3,w,c
  9423  0001C2  6E12               	movwf	___lmul@multiplier+3,c
  9424  0001C4  0E50               	movlw	80
  9425  0001C6  6E13               	movwf	___lmul@multiplicand,c
  9426  0001C8  0EC3               	movlw	195
  9427  0001CA  D95D               	call	PL150	;call to abstracted procedure
  9428  0001CC  EC91  F00E         	call	___lmul	;wreg free
  9429  0001D0  C00F  F054         	movff	?___lmul,_B7
  9430  0001D4  C010  F055         	movff	?___lmul+1,_B7+1
  9431  0001D8  C011  F056         	movff	?___lmul+2,_B7+2
  9432  0001DC  C012  F057         	movff	?___lmul+3,_B7+3
  9433                           
  9434                           ;bmp180.c: 230: if (B7 < 0x80000000)
  9435  0001E0  0E80               	movlw	128
  9436  0001E2  5C57               	subwf	_B7+3,w,c
  9437  0001E4  E215               	bc	l5316
  9438                           
  9439                           ;bmp180.c: 231: Pp = (B7*2)/B4;
  9440  0001E6  90D8               	bcf	status,0,c
  9441  0001E8  3454               	rlcf	_B7,w,c
  9442  0001EA  6E0F               	movwf	___lldiv@dividend,c
  9443  0001EC  3455               	rlcf	_B7+1,w,c
  9444  0001EE  6E10               	movwf	___lldiv@dividend+1,c
  9445  0001F0  3456               	rlcf	_B7+2,w,c
  9446  0001F2  6E11               	movwf	___lldiv@dividend+2,c
  9447  0001F4  3457               	rlcf	_B7+3,w,c
  9448  0001F6  6E12               	movwf	___lldiv@dividend+3,c
  9449  0001F8  D918               	call	PL54	;call to abstracted procedure
  9450  0001FA  EC9C  F00C         	call	___lldiv	;wreg free
  9451  0001FE  C00F  F0D6         	movff	?___lldiv,BMP085GetPressure@Pp
  9452  000202  C010  F0D7         	movff	?___lldiv+1,BMP085GetPressure@Pp+1
  9453  000206  C011  F0D8         	movff	?___lldiv+2,BMP085GetPressure@Pp+2
  9454  00020A  C012  F0D9         	movff	?___lldiv+3,BMP085GetPressure@Pp+3
  9455  00020E  D015               	goto	l1003
  9456  000210                     l5316:
  9457                           
  9458                           ;bmp180.c: 232: else
  9459                           ;bmp180.c: 233: Pp = (B7/B4)*2;
  9460  000210  C054  F00F         	movff	_B7,___lldiv@dividend
  9461  000214  C055  F010         	movff	_B7+1,___lldiv@dividend+1
  9462  000218  C056  F011         	movff	_B7+2,___lldiv@dividend+2
  9463  00021C  C057  F012         	movff	_B7+3,___lldiv@dividend+3
  9464  000220  D904               	call	PL54	;call to abstracted procedure
  9465  000222  EC9C  F00C         	call	___lldiv	;wreg free
  9466  000226  90D8               	bcf	status,0,c
  9467  000228  340F               	rlcf	?___lldiv,w,c
  9468  00022A  0100               	movlb	0	; () banked
  9469  00022C  6FD6               	movwf	BMP085GetPressure@Pp& (0+255),b
  9470  00022E  3410               	rlcf	?___lldiv+1,w,c
  9471  000230  6FD7               	movwf	(BMP085GetPressure@Pp+1)& (0+255),b
  9472  000232  3411               	rlcf	?___lldiv+2,w,c
  9473  000234  6FD8               	movwf	(BMP085GetPressure@Pp+2)& (0+255),b
  9474  000236  3412               	rlcf	?___lldiv+3,w,c
  9475  000238  6FD9               	movwf	(BMP085GetPressure@Pp+3)& (0+255),b
  9476  00023A                     l1003:
  9477                           
  9478                           ;bmp180.c: 234: X1 = (Pp/256)*(Pp/256);
  9479  00023A  D8CF               	call	PL44	;call to abstracted procedure
  9480  00023C  ECE9  F009         	call	___aldiv	;wreg free
  9481  000240  C01B  F00F         	movff	?___aldiv,___lmul@multiplier
  9482  000244  C01C  F010         	movff	?___aldiv+1,___lmul@multiplier+1
  9483  000248  C01D  F011         	movff	?___aldiv+2,___lmul@multiplier+2
  9484  00024C  C01E  F012         	movff	?___aldiv+3,___lmul@multiplier+3
  9485  000250  D8C4               	call	PL44	;call to abstracted procedure
  9486  000252  ECE9  F009         	call	___aldiv	;wreg free
  9487  000256  C01B  F013         	movff	?___aldiv,___lmul@multiplicand
  9488  00025A  C01C  F014         	movff	?___aldiv+1,___lmul@multiplicand+1
  9489  00025E  C01D  F015         	movff	?___aldiv+2,___lmul@multiplicand+2
  9490  000262  C01E  F016         	movff	?___aldiv+3,___lmul@multiplicand+3
  9491  000266  EC91  F00E         	call	___lmul	;wreg free
  9492  00026A  C00F  F060         	movff	?___lmul,_X1
  9493  00026E  C010  F061         	movff	?___lmul+1,_X1+1
  9494  000272  C011  F062         	movff	?___lmul+2,_X1+2
  9495  000276  C012  F063         	movff	?___lmul+3,_X1+3
  9496                           
  9497                           ;bmp180.c: 235: X1 = (X1*3038)/65536;
  9498  00027A  C060  F00F         	movff	_X1,___lmul@multiplier
  9499  00027E  C061  F010         	movff	_X1+1,___lmul@multiplier+1
  9500  000282  C062  F011         	movff	_X1+2,___lmul@multiplier+2
  9501  000286  C063  F012         	movff	_X1+3,___lmul@multiplier+3
  9502  00028A  0EDE               	movlw	222
  9503  00028C  6E13               	movwf	___lmul@multiplicand,c
  9504  00028E  0E0B               	movlw	11
  9505  000290  D8FA               	call	PL150	;call to abstracted procedure
  9506  000292  EC91  F00E         	call	___lmul	;wreg free
  9507  000296  D85D               	call	PL14	;call to abstracted procedure
  9508  000298  D8E8               	call	PL74	;call to abstracted procedure
  9509  00029A  ECE9  F009         	call	___aldiv	;wreg free
  9510  00029E  D88B               	call	PL36	;call to abstracted procedure
  9511                           
  9512                           ;bmp180.c: 236: X2 = -7357 * Pp / 65536;
  9513  0002A0  C0D6  F00F         	movff	BMP085GetPressure@Pp,___lmul@multiplier
  9514  0002A4  C0D7  F010         	movff	BMP085GetPressure@Pp+1,___lmul@multiplier+1
  9515  0002A8  C0D8  F011         	movff	BMP085GetPressure@Pp+2,___lmul@multiplier+2
  9516  0002AC  C0D9  F012         	movff	BMP085GetPressure@Pp+3,___lmul@multiplier+3
  9517  0002B0  0E43               	movlw	67
  9518  0002B2  6E13               	movwf	___lmul@multiplicand,c
  9519  0002B4  0EE3               	movlw	227
  9520  0002B6  6E14               	movwf	___lmul@multiplicand+1,c
  9521  0002B8  6815               	setf	___lmul@multiplicand+2,c
  9522  0002BA  6816               	setf	___lmul@multiplicand+3,c
  9523  0002BC  EC91  F00E         	call	___lmul	;wreg free
  9524  0002C0  D848               	call	PL14	;call to abstracted procedure
  9525  0002C2  D8D3               	call	PL74	;call to abstracted procedure
  9526  0002C4  ECE9  F009         	call	___aldiv	;wreg free
  9527                           
  9528                           ;bmp180.c: 237: Pp = Pp+((X1+X2+3791)/16);
  9529  0002C8  D855               	call	PL28	;call to abstracted procedure
  9530  0002CA  D89B               	call	PL50	;call to abstracted procedure
  9531  0002CC  0ECF               	movlw	207
  9532  0002CE  2443               	addwf	??_BMP085GetPressure,w,c
  9533  0002D0  6E1B               	movwf	___aldiv@dividend,c
  9534  0002D2  0E0E               	movlw	14
  9535  0002D4  D8A1               	call	PL52	;call to abstracted procedure
  9536  0002D6  0E10               	movlw	16
  9537  0002D8  D8C3               	call	PL64	;call to abstracted procedure
  9538  0002DA  ECE9  F009         	call	___aldiv	;wreg free
  9539  0002DE  501B               	movf	?___aldiv,w,c
  9540  0002E0  0100               	movlb	0	; () banked
  9541  0002E2  27D6               	addwf	BMP085GetPressure@Pp& (0+255),f,b
  9542  0002E4  501C               	movf	?___aldiv+1,w,c
  9543  0002E6  23D7               	addwfc	(BMP085GetPressure@Pp+1)& (0+255),f,b
  9544  0002E8  501D               	movf	?___aldiv+2,w,c
  9545  0002EA  23D8               	addwfc	(BMP085GetPressure@Pp+2)& (0+255),f,b
  9546  0002EC  501E               	movf	?___aldiv+3,w,c
  9547  0002EE  23D9               	addwfc	(BMP085GetPressure@Pp+3)& (0+255),f,b
  9548                           
  9549                           ;bmp180.c: 238: Pp = Pp * 0.7501;
  9550  0002F0  0E07               	movlw	7
  9551  0002F2  6E24               	movwf	___ftmul@f2,c
  9552  0002F4  0E40               	movlw	64
  9553  0002F6  6E25               	movwf	___ftmul@f2+1,c
  9554  0002F8  0E3F               	movlw	63
  9555  0002FA  6E26               	movwf	___ftmul@f2+2,c
  9556  0002FC  C0D6  F017         	movff	BMP085GetPressure@Pp,___altoft@c
  9557  000300  C0D7  F018         	movff	BMP085GetPressure@Pp+1,___altoft@c+1
  9558  000304  C0D8  F019         	movff	BMP085GetPressure@Pp+2,___altoft@c+2
  9559  000308  C0D9  F01A         	movff	BMP085GetPressure@Pp+3,___altoft@c+3
  9560  00030C  ECB1  F00D         	call	___altoft	;wreg free
  9561  000310  C017  F021         	movff	?___altoft,___ftmul@f1
  9562  000314  C018  F022         	movff	?___altoft+1,___ftmul@f1+1
  9563  000318  C019  F023         	movff	?___altoft+2,___ftmul@f1+2
  9564  00031C  EC85  F009         	call	___ftmul	;wreg free
  9565  000320  C021  F030         	movff	?___ftmul,___fttol@f1
  9566  000324  C022  F031         	movff	?___ftmul+1,___fttol@f1+1
  9567  000328  C023  F032         	movff	?___ftmul+2,___fttol@f1+2
  9568  00032C  EC47  F00A         	call	___fttol	;wreg free
  9569  000330  C030  F0D6         	movff	?___fttol,BMP085GetPressure@Pp
  9570  000334  C031  F0D7         	movff	?___fttol+1,BMP085GetPressure@Pp+1
  9571  000338  C032  F0D8         	movff	?___fttol+2,BMP085GetPressure@Pp+2
  9572  00033C  C033  F0D9         	movff	?___fttol+3,BMP085GetPressure@Pp+3
  9573                           
  9574                           ;bmp180.c: 240: return(Pp);
  9575  000340  C0D6  F03F         	movff	BMP085GetPressure@Pp,?_BMP085GetPressure
  9576  000344  C0D7  F040         	movff	BMP085GetPressure@Pp+1,?_BMP085GetPressure+1
  9577  000348  C0D8  F041         	movff	BMP085GetPressure@Pp+2,?_BMP085GetPressure+2
  9578  00034C  C0D9  F042         	movff	BMP085GetPressure@Pp+3,?_BMP085GetPressure+3
  9579  000350  0012               	return		;funcret
  9580  000352                     __end_of_BMP085GetPressure:
  9581                           	opt stack 0
  9582  000352                     PL14:
  9583                           	opt stack 23
  9584  000352  C00F  F01B         	movff	?___lmul,___aldiv@dividend
  9585  000356  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
  9586  00035A  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
  9587  00035E  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
  9588  000362  6A1F               	clrf	___aldiv@divisor,c
  9589  000364  0012               	return	
  9590  000366                     __end_ofPL14:
  9591                           	opt stack 0
  9592  000366                     PL20:
  9593                           	opt stack 22
  9594  000366  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
  9595  00036A  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
  9596  00036E  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
  9597  000372  0012               	return	
  9598  000374                     __end_ofPL20:
  9599                           	opt stack 0
  9600  000374                     PL28:
  9601                           	opt stack 23
  9602  000374  C01B  F05C         	movff	?___aldiv,_X2
  9603  000378  C01C  F05D         	movff	?___aldiv+1,_X2+1
  9604  00037C  C01D  F05E         	movff	?___aldiv+2,_X2+2
  9605  000380  C01E  F05F         	movff	?___aldiv+3,_X2+3
  9606  000384  505C               	movf	_X2,w,c
  9607  000386  2460               	addwf	_X1,w,c
  9608  000388  0012               	return	
  9609  00038A                     __end_ofPL28:
  9610                           	opt stack 0
  9611  00038A                     PL34:
  9612                           	opt stack 22
  9613  00038A  6A1F               	clrf	___aldiv@divisor,c
  9614  00038C  0E10               	movlw	16
  9615  00038E  6E20               	movwf	___aldiv@divisor+1,c
  9616  000390  6A21               	clrf	___aldiv@divisor+2,c
  9617  000392  6A22               	clrf	___aldiv@divisor+3,c
  9618  000394  C058  F00F         	movff	_B6,___lmul@multiplier
  9619  000398  C059  F010         	movff	_B6+1,___lmul@multiplier+1
  9620  00039C  C05A  F011         	movff	_B6+2,___lmul@multiplier+2
  9621  0003A0  C05B  F012         	movff	_B6+3,___lmul@multiplier+3
  9622  0003A4  C058  F013         	movff	_B6,___lmul@multiplicand
  9623  0003A8  C059  F014         	movff	_B6+1,___lmul@multiplicand+1
  9624  0003AC  C05A  F015         	movff	_B6+2,___lmul@multiplicand+2
  9625  0003B0  C05B  F016         	movff	_B6+3,___lmul@multiplicand+3
  9626  0003B4  0C10               	retlw	16
  9627  0003B6                     __end_ofPL34:
  9628                           	opt stack 0
  9629  0003B6                     PL36:
  9630                           	opt stack 23
  9631  0003B6  C01B  F060         	movff	?___aldiv,_X1
  9632  0003BA  C01C  F061         	movff	?___aldiv+1,_X1+1
  9633  0003BE  C01D  F062         	movff	?___aldiv+2,_X1+2
  9634  0003C2  C01E  F063         	movff	?___aldiv+3,_X1+3
  9635  0003C6  0012               	return	
  9636  0003C8                     __end_ofPL36:
  9637                           	opt stack 0
  9638  0003C8                     PL38:
  9639                           	opt stack 22
  9640  0003C8  C058  F013         	movff	_B6,___lmul@multiplicand
  9641  0003CC  C059  F014         	movff	_B6+1,___lmul@multiplicand+1
  9642  0003D0  C05A  F015         	movff	_B6+2,___lmul@multiplicand+2
  9643  0003D4  C05B  F016         	movff	_B6+3,___lmul@multiplicand+3
  9644  0003D8  0012               	return	
  9645  0003DA                     __end_ofPL38:
  9646                           	opt stack 0
  9647  0003DA                     PL44:
  9648                           	opt stack 22
  9649  0003DA  6A1F               	clrf	___aldiv@divisor,c
  9650  0003DC  0E01               	movlw	1
  9651  0003DE  6E20               	movwf	___aldiv@divisor+1,c
  9652  0003E0  6A21               	clrf	___aldiv@divisor+2,c
  9653  0003E2  6A22               	clrf	___aldiv@divisor+3,c
  9654  0003E4  C0D6  F01B         	movff	BMP085GetPressure@Pp,___aldiv@dividend
  9655  0003E8  C0D7  F01C         	movff	BMP085GetPressure@Pp+1,___aldiv@dividend+1
  9656  0003EC  C0D8  F01D         	movff	BMP085GetPressure@Pp+2,___aldiv@dividend+2
  9657  0003F0  C0D9  F01E         	movff	BMP085GetPressure@Pp+3,___aldiv@dividend+3
  9658  0003F4  0C01               	retlw	1
  9659  0003F6                     __end_ofPL44:
  9660                           	opt stack 0
  9661  0003F6                     PL48:
  9662                           	opt stack 22
  9663  0003F6  0E00               	movlw	0
  9664  0003F8  BE10               	btfsc	___lmul@multiplier+1,7,c
  9665  0003FA  0EFF               	movlw	-1
  9666  0003FC  6E11               	movwf	___lmul@multiplier+2,c
  9667  0003FE  6E12               	movwf	___lmul@multiplier+3,c
  9668  000400  0012               	return	
  9669  000402                     __end_ofPL48:
  9670                           	opt stack 0
  9671  000402                     PL50:
  9672                           	opt stack 22
  9673  000402  6E43               	movwf	??_BMP085GetPressure& (0+255),c
  9674  000404  505D               	movf	_X2+1,w,c
  9675  000406  2061               	addwfc	_X1+1,w,c
  9676  000408  6E44               	movwf	(??_BMP085GetPressure+1)& (0+255),c
  9677  00040A  505E               	movf	_X2+2,w,c
  9678  00040C  2062               	addwfc	_X1+2,w,c
  9679  00040E  6E45               	movwf	(??_BMP085GetPressure+2)& (0+255),c
  9680  000410  505F               	movf	_X2+3,w,c
  9681  000412  2063               	addwfc	_X1+3,w,c
  9682  000414  6E46               	movwf	(??_BMP085GetPressure+3)& (0+255),c
  9683  000416  0012               	return	
  9684  000418                     __end_ofPL50:
  9685                           	opt stack 0
  9686  000418                     PL52:
  9687                           	opt stack 22
  9688  000418  2044               	addwfc	??_BMP085GetPressure+1,w,c
  9689  00041A  6E1C               	movwf	___aldiv@dividend+1,c
  9690  00041C  0E00               	movlw	0
  9691  00041E  2045               	addwfc	??_BMP085GetPressure+2,w,c
  9692  000420  6E1D               	movwf	___aldiv@dividend+2,c
  9693  000422  0E00               	movlw	0
  9694  000424  2046               	addwfc	??_BMP085GetPressure+3,w,c
  9695  000426  6E1E               	movwf	___aldiv@dividend+3,c
  9696  000428  0012               	return	
  9697  00042A                     __end_ofPL52:
  9698                           	opt stack 0
  9699  00042A                     PL54:
  9700                           	opt stack 22
  9701  00042A  C08D  F013         	movff	_B4,___lldiv@divisor
  9702  00042E  C08E  F014         	movff	_B4+1,___lldiv@divisor+1
  9703  000432  C08F  F015         	movff	_B4+2,___lldiv@divisor+2
  9704  000436  C090  F016         	movff	_B4+3,___lldiv@divisor+3
  9705  00043A  0012               	return	
  9706  00043C                     __end_ofPL54:
  9707                           	opt stack 0
  9708  00043C                     PL56:
  9709                           	opt stack 22
  9710  00043C  C01B  F0D2         	movff	?___aldiv,_BMP085GetPressure$2268
  9711  000440  C01C  F0D3         	movff	?___aldiv+1,_BMP085GetPressure$2268+1
  9712  000444  C01D  F0D4         	movff	?___aldiv+2,_BMP085GetPressure$2268+2
  9713  000448  C01E  F0D5         	movff	?___aldiv+3,_BMP085GetPressure$2268+3
  9714  00044C  0012               	return	
  9715  00044E                     __end_ofPL56:
  9716                           	opt stack 0
  9717  00044E                     PL58:
  9718                           	opt stack 22
  9719  00044E  C0D2  F013         	movff	_BMP085GetPressure$2268,___lmul@multiplicand
  9720  000452  C0D3  F014         	movff	_BMP085GetPressure$2268+1,___lmul@multiplicand+1
  9721  000456  C0D4  F015         	movff	_BMP085GetPressure$2268+2,___lmul@multiplicand+2
  9722  00045A  C0D5  F016         	movff	_BMP085GetPressure$2268+3,___lmul@multiplicand+3
  9723  00045E  0012               	return	
  9724  000460                     __end_ofPL58:
  9725                           	opt stack 0
  9726  000460                     PL64:
  9727                           	opt stack 23
  9728  000460  6E1F               	movwf	___aldiv@divisor,c
  9729  000462  6A20               	clrf	___aldiv@divisor+1,c
  9730  000464  6A21               	clrf	___aldiv@divisor+2,c
  9731  000466  6A22               	clrf	___aldiv@divisor+3,c
  9732  000468  0012               	return	
  9733  00046A                     __end_ofPL64:
  9734                           	opt stack 0
  9735  00046A                     PL74:
  9736                           	opt stack 22
  9737  00046A  6A20               	clrf	___aldiv@divisor+1,c
  9738  00046C  0E01               	movlw	1
  9739  00046E  6E21               	movwf	___aldiv@divisor+2,c
  9740  000470  6A22               	clrf	___aldiv@divisor+3,c
  9741  000472  0C01               	retlw	1
  9742  000474                     __end_ofPL74:
  9743                           	opt stack 0
  9744  000474                     PL88:
  9745                           	opt stack 22
  9746  000474  0E08               	movlw	8
  9747  000476  6E20               	movwf	___aldiv@divisor+1,c
  9748  000478  6A21               	clrf	___aldiv@divisor+2,c
  9749  00047A  6A22               	clrf	___aldiv@divisor+3,c
  9750  00047C  0C08               	retlw	8
  9751  00047E                     __end_ofPL88:
  9752                           	opt stack 0
  9753  00047E                     PL94:
  9754                           	opt stack 23
  9755  00047E  6E20               	movwf	___aldiv@divisor+1,c
  9756  000480  6A21               	clrf	___aldiv@divisor+2,c
  9757  000482  6A22               	clrf	___aldiv@divisor+3,c
  9758  000484  0012               	return	
  9759  000486                     __end_ofPL94:
  9760                           	opt stack 0
  9761  000486                     PL150:
  9762                           	opt stack 22
  9763  000486  6E14               	movwf	___lmul@multiplicand+1,c
  9764  000488  6A15               	clrf	___lmul@multiplicand+2,c
  9765  00048A  6A16               	clrf	___lmul@multiplicand+3,c
  9766  00048C  0012               	return	
  9767  00048E                     __end_ofPL150:
  9768                           	opt stack 0
  9769                           tosu	equ	0xFFF
  9770                           tosh	equ	0xFFE
  9771                           tosl	equ	0xFFD
  9772                           pclath	equ	0xFFA
  9773                           tblptru	equ	0xFF8
  9774                           tblptrh	equ	0xFF7
  9775                           tblptrl	equ	0xFF6
  9776                           tablat	equ	0xFF5
  9777                           prodh	equ	0xFF4
  9778                           prodl	equ	0xFF3
  9779                           intcon	equ	0xFF2
  9780                           intcon2	equ	0xFF1
  9781                           postinc0	equ	0xFEE
  9782                           wreg	equ	0xFE8
  9783                           indf1	equ	0xFE7
  9784                           plusw1	equ	0xFE3
  9785                           fsr1h	equ	0xFE2
  9786                           fsr1l	equ	0xFE1
  9787                           indf2	equ	0xFDF
  9788                           postinc2	equ	0xFDE
  9789                           postdec2	equ	0xFDD
  9790                           plusw2	equ	0xFDB
  9791                           fsr2h	equ	0xFDA
  9792                           fsr2l	equ	0xFD9
  9793                           status	equ	0xFD8
  9794                           
  9795 ;; *************** function ___lmul *****************
  9796 ;; Defined at:
  9797 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;  multiplier      4   14[COMRAM] unsigned long 
  9800 ;;  multiplicand    4   18[COMRAM] unsigned long 
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;  product         4   22[COMRAM] unsigned long 
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  4   14[COMRAM] unsigned long 
  9805 ;; Registers used:
  9806 ;;		wreg, status,2, status,0
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9812 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;Total ram usage:       12 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    3
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_BMP085GetTemp
  9823 ;;		_BMP085GetPressure
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           	psect	text42
  9828  001D22                     __ptext42:
  9829                           	opt stack 0
  9830  001D22                     ___lmul:
  9831                           	opt stack 23
  9832                           
  9833                           ;incstack = 0
  9834  001D22  6A17               	clrf	___lmul@product,c
  9835  001D24  6A18               	clrf	___lmul@product+1,c
  9836  001D26  6A19               	clrf	___lmul@product+2,c
  9837  001D28  6A1A               	clrf	___lmul@product+3,c
  9838  001D2A                     l1056:
  9839  001D2A  A00F               	btfss	___lmul@multiplier,0,c
  9840  001D2C  D008               	goto	l4960
  9841  001D2E  5013               	movf	___lmul@multiplicand,w,c
  9842  001D30  2617               	addwf	___lmul@product,f,c
  9843  001D32  5014               	movf	___lmul@multiplicand+1,w,c
  9844  001D34  2218               	addwfc	___lmul@product+1,f,c
  9845  001D36  5015               	movf	___lmul@multiplicand+2,w,c
  9846  001D38  2219               	addwfc	___lmul@product+2,f,c
  9847  001D3A  5016               	movf	___lmul@multiplicand+3,w,c
  9848  001D3C  221A               	addwfc	___lmul@product+3,f,c
  9849  001D3E                     l4960:
  9850  001D3E  90D8               	bcf	status,0,c
  9851  001D40  3613               	rlcf	___lmul@multiplicand,f,c
  9852  001D42  3614               	rlcf	___lmul@multiplicand+1,f,c
  9853  001D44  3615               	rlcf	___lmul@multiplicand+2,f,c
  9854  001D46  3616               	rlcf	___lmul@multiplicand+3,f,c
  9855  001D48  90D8               	bcf	status,0,c
  9856  001D4A  3212               	rrcf	___lmul@multiplier+3,f,c
  9857  001D4C  3211               	rrcf	___lmul@multiplier+2,f,c
  9858  001D4E  3210               	rrcf	___lmul@multiplier+1,f,c
  9859  001D50  320F               	rrcf	___lmul@multiplier,f,c
  9860  001D52  500F               	movf	___lmul@multiplier,w,c
  9861  001D54  1010               	iorwf	___lmul@multiplier+1,w,c
  9862  001D56  1011               	iorwf	___lmul@multiplier+2,w,c
  9863  001D58  1012               	iorwf	___lmul@multiplier+3,w,c
  9864  001D5A  E1E7               	bnz	l1056
  9865  001D5C  C017  F00F         	movff	___lmul@product,?___lmul
  9866  001D60  C018  F010         	movff	___lmul@product+1,?___lmul+1
  9867  001D64  C019  F011         	movff	___lmul@product+2,?___lmul+2
  9868  001D68  C01A  F012         	movff	___lmul@product+3,?___lmul+3
  9869  001D6C  0012               	return		;funcret
  9870  001D6E                     __end_of___lmul:
  9871                           	opt stack 0
  9872                           tosu	equ	0xFFF
  9873                           tosh	equ	0xFFE
  9874                           tosl	equ	0xFFD
  9875                           pclath	equ	0xFFA
  9876                           tblptru	equ	0xFF8
  9877                           tblptrh	equ	0xFF7
  9878                           tblptrl	equ	0xFF6
  9879                           tablat	equ	0xFF5
  9880                           prodh	equ	0xFF4
  9881                           prodl	equ	0xFF3
  9882                           intcon	equ	0xFF2
  9883                           intcon2	equ	0xFF1
  9884                           postinc0	equ	0xFEE
  9885                           wreg	equ	0xFE8
  9886                           indf1	equ	0xFE7
  9887                           plusw1	equ	0xFE3
  9888                           fsr1h	equ	0xFE2
  9889                           fsr1l	equ	0xFE1
  9890                           indf2	equ	0xFDF
  9891                           postinc2	equ	0xFDE
  9892                           postdec2	equ	0xFDD
  9893                           plusw2	equ	0xFDB
  9894                           fsr2h	equ	0xFDA
  9895                           fsr2l	equ	0xFD9
  9896                           status	equ	0xFD8
  9897                           
  9898 ;; *************** function ___lldiv *****************
  9899 ;; Defined at:
  9900 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  9901 ;; Parameters:    Size  Location     Type
  9902 ;;  dividend        4   14[COMRAM] unsigned long 
  9903 ;;  divisor         4   18[COMRAM] unsigned long 
  9904 ;; Auto vars:     Size  Location     Type
  9905 ;;  quotient        4   22[COMRAM] unsigned long 
  9906 ;;  counter         1   26[COMRAM] unsigned char 
  9907 ;; Return value:  Size  Location     Type
  9908 ;;                  4   14[COMRAM] unsigned long 
  9909 ;; Registers used:
  9910 ;;		wreg, status,2, status,0
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9916 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9917 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9919 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;Total ram usage:       13 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    3
  9923 ;; This function calls:
  9924 ;;		Nothing
  9925 ;; This function is called by:
  9926 ;;		_BMP085GetPressure
  9927 ;; This function uses a non-reentrant model
  9928 ;;
  9929                           
  9930                           	psect	text43
  9931  001938                     __ptext43:
  9932                           	opt stack 0
  9933  001938                     ___lldiv:
  9934                           	opt stack 23
  9935                           
  9936                           ;incstack = 0
  9937  001938  6A17               	clrf	___lldiv@quotient,c
  9938  00193A  6A18               	clrf	___lldiv@quotient+1,c
  9939  00193C  6A19               	clrf	___lldiv@quotient+2,c
  9940  00193E  6A1A               	clrf	___lldiv@quotient+3,c
  9941  001940  5013               	movf	___lldiv@divisor,w,c
  9942  001942  1014               	iorwf	___lldiv@divisor+1,w,c
  9943  001944  1015               	iorwf	___lldiv@divisor+2,w,c
  9944  001946  1016               	iorwf	___lldiv@divisor+3,w,c
  9945  001948  E029               	bz	l1394
  9946  00194A  0E01               	movlw	1
  9947  00194C  6E1B               	movwf	___lldiv@counter,c
  9948  00194E  D006               	goto	l5162
  9949  001950                     l5160:
  9950  001950  90D8               	bcf	status,0,c
  9951  001952  3613               	rlcf	___lldiv@divisor,f,c
  9952  001954  3614               	rlcf	___lldiv@divisor+1,f,c
  9953  001956  3615               	rlcf	___lldiv@divisor+2,f,c
  9954  001958  3616               	rlcf	___lldiv@divisor+3,f,c
  9955  00195A  2A1B               	incf	___lldiv@counter,f,c
  9956  00195C                     l5162:
  9957  00195C  AE16               	btfss	___lldiv@divisor+3,7,c
  9958  00195E  D7F8               	goto	l5160
  9959  001960                     l5164:
  9960  001960  90D8               	bcf	status,0,c
  9961  001962  3617               	rlcf	___lldiv@quotient,f,c
  9962  001964  3618               	rlcf	___lldiv@quotient+1,f,c
  9963  001966  3619               	rlcf	___lldiv@quotient+2,f,c
  9964  001968  361A               	rlcf	___lldiv@quotient+3,f,c
  9965  00196A  5013               	movf	___lldiv@divisor,w,c
  9966  00196C  5C0F               	subwf	___lldiv@dividend,w,c
  9967  00196E  5014               	movf	___lldiv@divisor+1,w,c
  9968  001970  5810               	subwfb	___lldiv@dividend+1,w,c
  9969  001972  5015               	movf	___lldiv@divisor+2,w,c
  9970  001974  5811               	subwfb	___lldiv@dividend+2,w,c
  9971  001976  5016               	movf	___lldiv@divisor+3,w,c
  9972  001978  5812               	subwfb	___lldiv@dividend+3,w,c
  9973  00197A  E309               	bnc	l5172
  9974  00197C  5013               	movf	___lldiv@divisor,w,c
  9975  00197E  5E0F               	subwf	___lldiv@dividend,f,c
  9976  001980  5014               	movf	___lldiv@divisor+1,w,c
  9977  001982  5A10               	subwfb	___lldiv@dividend+1,f,c
  9978  001984  5015               	movf	___lldiv@divisor+2,w,c
  9979  001986  5A11               	subwfb	___lldiv@dividend+2,f,c
  9980  001988  5016               	movf	___lldiv@divisor+3,w,c
  9981  00198A  5A12               	subwfb	___lldiv@dividend+3,f,c
  9982  00198C  8017               	bsf	___lldiv@quotient,0,c
  9983  00198E                     l5172:
  9984  00198E  90D8               	bcf	status,0,c
  9985  001990  3216               	rrcf	___lldiv@divisor+3,f,c
  9986  001992  3215               	rrcf	___lldiv@divisor+2,f,c
  9987  001994  3214               	rrcf	___lldiv@divisor+1,f,c
  9988  001996  3213               	rrcf	___lldiv@divisor,f,c
  9989  001998  2E1B               	decfsz	___lldiv@counter,f,c
  9990  00199A  D7E2               	goto	l5164
  9991  00199C                     l1394:
  9992  00199C  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  9993  0019A0  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  9994  0019A4  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  9995  0019A8  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  9996  0019AC  0012               	return		;funcret
  9997  0019AE                     __end_of___lldiv:
  9998                           	opt stack 0
  9999                           tosu	equ	0xFFF
 10000                           tosh	equ	0xFFE
 10001                           tosl	equ	0xFFD
 10002                           pclath	equ	0xFFA
 10003                           tblptru	equ	0xFF8
 10004                           tblptrh	equ	0xFF7
 10005                           tblptrl	equ	0xFF6
 10006                           tablat	equ	0xFF5
 10007                           prodh	equ	0xFF4
 10008                           prodl	equ	0xFF3
 10009                           intcon	equ	0xFF2
 10010                           intcon2	equ	0xFF1
 10011                           postinc0	equ	0xFEE
 10012                           wreg	equ	0xFE8
 10013                           indf1	equ	0xFE7
 10014                           plusw1	equ	0xFE3
 10015                           fsr1h	equ	0xFE2
 10016                           fsr1l	equ	0xFE1
 10017                           indf2	equ	0xFDF
 10018                           postinc2	equ	0xFDE
 10019                           postdec2	equ	0xFDD
 10020                           plusw2	equ	0xFDB
 10021                           fsr2h	equ	0xFDA
 10022                           fsr2l	equ	0xFD9
 10023                           status	equ	0xFD8
 10024                           
 10025 ;; *************** function ___fttol *****************
 10026 ;; Defined at:
 10027 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;  f1              3   47[COMRAM] float 
 10030 ;; Auto vars:     Size  Location     Type
 10031 ;;  lval            4   57[COMRAM] unsigned long 
 10032 ;;  exp1            1   61[COMRAM] unsigned char 
 10033 ;;  sign1           1   56[COMRAM] unsigned char 
 10034 ;; Return value:  Size  Location     Type
 10035 ;;                  4   47[COMRAM] long 
 10036 ;; Registers used:
 10037 ;;		wreg, status,2, status,0
 10038 ;; Tracked objects:
 10039 ;;		On entry : 0/0
 10040 ;;		On exit  : 0/0
 10041 ;;		Unchanged: 0/0
 10042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10044 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10045 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10046 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10047 ;;Total ram usage:       15 bytes
 10048 ;; Hardware stack levels used:    1
 10049 ;; Hardware stack levels required when called:    3
 10050 ;; This function calls:
 10051 ;;		Nothing
 10052 ;; This function is called by:
 10053 ;;		_BMP085GetPressure
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           	psect	text44
 10058  00148E                     __ptext44:
 10059                           	opt stack 0
 10060  00148E                     ___fttol:
 10061                           	opt stack 23
 10062                           
 10063                           ;incstack = 0
 10064  00148E  C032  F034         	movff	___fttol@f1+2,??___fttol
 10065  001492  6A35               	clrf	(??___fttol+1)& (0+255),c
 10066  001494  6A36               	clrf	(??___fttol+2)& (0+255),c
 10067  001496  3431               	rlcf	___fttol@f1+1,w,c
 10068  001498  3634               	rlcf	??___fttol& (0+255),f,c
 10069  00149A  E301               	bnc	u3811
 10070  00149C  8035               	bsf	(??___fttol+1)& (0+255),0,c
 10071  00149E                     u3811:
 10072  00149E  5034               	movf	??___fttol,w,c
 10073  0014A0  6E3E               	movwf	___fttol@exp1,c
 10074  0014A2  503E               	movf	___fttol@exp1,w,c
 10075  0014A4  E105               	bnz	l5074
 10076  0014A6                     l5072:
 10077  0014A6  6A30               	clrf	?___fttol,c
 10078  0014A8  6A31               	clrf	?___fttol+1,c
 10079  0014AA  6A32               	clrf	?___fttol+2,c
 10080  0014AC  6A33               	clrf	?___fttol+3,c
 10081  0014AE  0012               	return	
 10082  0014B0                     l5074:
 10083  0014B0  0E17               	movlw	23
 10084  0014B2  6E34               	movwf	??___fttol& (0+255),c
 10085  0014B4  C030  F035         	movff	___fttol@f1,??___fttol+1
 10086  0014B8  C031  F036         	movff	___fttol@f1+1,??___fttol+2
 10087  0014BC  C032  F037         	movff	___fttol@f1+2,??___fttol+3
 10088  0014C0  2834               	incf	??___fttol,w,c
 10089  0014C2  6E38               	movwf	(??___fttol+4)& (0+255),c
 10090  0014C4  D004               	goto	u3830
 10091  0014C6                     u3835:
 10092  0014C6  90D8               	bcf	status,0,c
 10093  0014C8  3237               	rrcf	??___fttol+3,f,c
 10094  0014CA  3236               	rrcf	??___fttol+2,f,c
 10095  0014CC  3235               	rrcf	??___fttol+1,f,c
 10096  0014CE                     u3830:
 10097  0014CE  2E38               	decfsz	(??___fttol+4)& (0+255),f,c
 10098  0014D0  D7FA               	goto	u3835
 10099  0014D2  5035               	movf	??___fttol+1,w,c
 10100  0014D4  6E39               	movwf	___fttol@sign1,c
 10101  0014D6  8E31               	bsf	___fttol@f1+1,7,c
 10102  0014D8  6A32               	clrf	___fttol@f1+2,c
 10103  0014DA  5030               	movf	___fttol@f1,w,c
 10104  0014DC  6E3A               	movwf	___fttol@lval,c
 10105  0014DE  5031               	movf	___fttol@f1+1,w,c
 10106  0014E0  6E3B               	movwf	___fttol@lval+1,c
 10107  0014E2  5032               	movf	___fttol@f1+2,w,c
 10108  0014E4  6E3C               	movwf	___fttol@lval+2,c
 10109  0014E6  6A3D               	clrf	___fttol@lval+3,c
 10110  0014E8  0E8E               	movlw	142
 10111  0014EA  5E3E               	subwf	___fttol@exp1,f,c
 10112  0014EC  AE3E               	btfss	___fttol@exp1,7,c
 10113  0014EE  D00C               	goto	l5094
 10114  0014F0  503E               	movf	___fttol@exp1,w,c
 10115  0014F2  0A80               	xorlw	128
 10116  0014F4  0F8F               	addlw	143
 10117  0014F6  E3D7               	bnc	l5072
 10118  0014F8                     l5090:
 10119  0014F8  90D8               	bcf	status,0,c
 10120  0014FA  323D               	rrcf	___fttol@lval+3,f,c
 10121  0014FC  323C               	rrcf	___fttol@lval+2,f,c
 10122  0014FE  323B               	rrcf	___fttol@lval+1,f,c
 10123  001500  323A               	rrcf	___fttol@lval,f,c
 10124  001502  3E3E               	incfsz	___fttol@exp1,f,c
 10125  001504  D7F9               	goto	l5090
 10126  001506  D00C               	goto	l5102
 10127  001508                     l5094:
 10128  001508  0E17               	movlw	23
 10129  00150A  643E               	cpfsgt	___fttol@exp1,c
 10130  00150C  D007               	goto	l5100
 10131  00150E  D7CB               	goto	l5072
 10132  001510                     l5098:
 10133  001510  90D8               	bcf	status,0,c
 10134  001512  363A               	rlcf	___fttol@lval,f,c
 10135  001514  363B               	rlcf	___fttol@lval+1,f,c
 10136  001516  363C               	rlcf	___fttol@lval+2,f,c
 10137  001518  363D               	rlcf	___fttol@lval+3,f,c
 10138  00151A  063E               	decf	___fttol@exp1,f,c
 10139  00151C                     l5100:
 10140  00151C  503E               	movf	___fttol@exp1,w,c
 10141  00151E  E1F8               	bnz	l5098
 10142  001520                     l5102:
 10143  001520  5039               	movf	___fttol@sign1,w,c
 10144  001522  E008               	bz	l5106
 10145  001524  1E3D               	comf	___fttol@lval+3,f,c
 10146  001526  1E3C               	comf	___fttol@lval+2,f,c
 10147  001528  1E3B               	comf	___fttol@lval+1,f,c
 10148  00152A  6C3A               	negf	___fttol@lval,c
 10149  00152C  0E00               	movlw	0
 10150  00152E  223B               	addwfc	___fttol@lval+1,f,c
 10151  001530  223C               	addwfc	___fttol@lval+2,f,c
 10152  001532  223D               	addwfc	___fttol@lval+3,f,c
 10153  001534                     l5106:
 10154  001534  C03A  F030         	movff	___fttol@lval,?___fttol
 10155  001538  C03B  F031         	movff	___fttol@lval+1,?___fttol+1
 10156  00153C  C03C  F032         	movff	___fttol@lval+2,?___fttol+2
 10157  001540  C03D  F033         	movff	___fttol@lval+3,?___fttol+3
 10158  001544  0012               	return		;funcret
 10159  001546                     __end_of___fttol:
 10160                           	opt stack 0
 10161                           tosu	equ	0xFFF
 10162                           tosh	equ	0xFFE
 10163                           tosl	equ	0xFFD
 10164                           pclath	equ	0xFFA
 10165                           tblptru	equ	0xFF8
 10166                           tblptrh	equ	0xFF7
 10167                           tblptrl	equ	0xFF6
 10168                           tablat	equ	0xFF5
 10169                           prodh	equ	0xFF4
 10170                           prodl	equ	0xFF3
 10171                           intcon	equ	0xFF2
 10172                           intcon2	equ	0xFF1
 10173                           postinc0	equ	0xFEE
 10174                           wreg	equ	0xFE8
 10175                           indf1	equ	0xFE7
 10176                           plusw1	equ	0xFE3
 10177                           fsr1h	equ	0xFE2
 10178                           fsr1l	equ	0xFE1
 10179                           indf2	equ	0xFDF
 10180                           postinc2	equ	0xFDE
 10181                           postdec2	equ	0xFDD
 10182                           plusw2	equ	0xFDB
 10183                           fsr2h	equ	0xFDA
 10184                           fsr2l	equ	0xFD9
 10185                           status	equ	0xFD8
 10186                           
 10187 ;; *************** function ___ftmul *****************
 10188 ;; Defined at:
 10189 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;  f1              3   32[COMRAM] float 
 10192 ;;  f2              3   35[COMRAM] float 
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;  f3_as_produc    3   42[COMRAM] unsigned um
 10195 ;;  sign            1   46[COMRAM] unsigned char 
 10196 ;;  cntr            1   45[COMRAM] unsigned char 
 10197 ;;  exp             1   41[COMRAM] unsigned char 
 10198 ;; Return value:  Size  Location     Type
 10199 ;;                  3   32[COMRAM] float 
 10200 ;; Registers used:
 10201 ;;		wreg, status,2, status,0, cstack
 10202 ;; Tracked objects:
 10203 ;;		On entry : 0/0
 10204 ;;		On exit  : 0/0
 10205 ;;		Unchanged: 0/0
 10206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10207 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10208 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10209 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10210 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10211 ;;Total ram usage:       15 bytes
 10212 ;; Hardware stack levels used:    1
 10213 ;; Hardware stack levels required when called:    4
 10214 ;; This function calls:
 10215 ;;		___ftpack
 10216 ;; This function is called by:
 10217 ;;		_BMP085GetPressure
 10218 ;; This function uses a non-reentrant model
 10219 ;;
 10220                           
 10221                           	psect	text45
 10222  00130A                     __ptext45:
 10223                           	opt stack 0
 10224  00130A                     ___ftmul:
 10225                           	opt stack 22
 10226                           
 10227                           ;incstack = 0
 10228  00130A  C023  F027         	movff	___ftmul@f1+2,??___ftmul
 10229  00130E  6A28               	clrf	(??___ftmul+1)& (0+255),c
 10230  001310  6A29               	clrf	(??___ftmul+2)& (0+255),c
 10231  001312  3422               	rlcf	___ftmul@f1+1,w,c
 10232  001314  3627               	rlcf	??___ftmul& (0+255),f,c
 10233  001316  E301               	bnc	u3751
 10234  001318  8028               	bsf	(??___ftmul+1)& (0+255),0,c
 10235  00131A                     u3751:
 10236  00131A  5027               	movf	??___ftmul,w,c
 10237  00131C  6E2A               	movwf	___ftmul@exp,c
 10238  00131E  502A               	movf	___ftmul@exp,w,c
 10239  001320  E101               	bnz	l5030
 10240  001322  D053               	goto	PL140	;call to abstracted procedure
 10241  001324                     l5030:
 10242  001324  C026  F027         	movff	___ftmul@f2+2,??___ftmul
 10243  001328  6A28               	clrf	(??___ftmul+1)& (0+255),c
 10244  00132A  6A29               	clrf	(??___ftmul+2)& (0+255),c
 10245  00132C  3425               	rlcf	___ftmul@f2+1,w,c
 10246  00132E  3627               	rlcf	??___ftmul& (0+255),f,c
 10247  001330  E301               	bnc	u3771
 10248  001332  8028               	bsf	(??___ftmul+1)& (0+255),0,c
 10249  001334                     u3771:
 10250  001334  5027               	movf	??___ftmul,w,c
 10251  001336  6E2F               	movwf	___ftmul@sign,c
 10252  001338  502F               	movf	___ftmul@sign,w,c
 10253  00133A  E101               	bnz	l5034
 10254  00133C  D046               	goto	PL140	;call to abstracted procedure
 10255  00133E                     l5034:
 10256  00133E  502F               	movf	___ftmul@sign,w,c
 10257  001340  0F7B               	addlw	123
 10258  001342  262A               	addwf	___ftmul@exp,f,c
 10259  001344  C023  F02F         	movff	___ftmul@f1+2,___ftmul@sign
 10260  001348  5026               	movf	___ftmul@f2+2,w,c
 10261  00134A  1A2F               	xorwf	___ftmul@sign,f,c
 10262  00134C  0E80               	movlw	128
 10263  00134E  162F               	andwf	___ftmul@sign,f,c
 10264  001350  8E22               	bsf	___ftmul@f1+1,7,c
 10265  001352  8E25               	bsf	___ftmul@f2+1,7,c
 10266  001354  0E00               	movlw	0
 10267  001356  1626               	andwf	___ftmul@f2+2,f,c
 10268  001358  6A2B               	clrf	___ftmul@f3_as_product,c
 10269  00135A  6A2C               	clrf	___ftmul@f3_as_product+1,c
 10270  00135C  6A2D               	clrf	___ftmul@f3_as_product+2,c
 10271  00135E  0E07               	movlw	7
 10272  001360  6E2E               	movwf	___ftmul@cntr,c
 10273  001362                     l5048:
 10274  001362  B021               	btfsc	___ftmul@f1,0,c
 10275  001364  D82B               	call	PL70	;call to abstracted procedure
 10276  001366                     l5052:
 10277  001366  90D8               	bcf	status,0,c
 10278  001368  3223               	rrcf	___ftmul@f1+2,f,c
 10279  00136A  3222               	rrcf	___ftmul@f1+1,f,c
 10280  00136C  3221               	rrcf	___ftmul@f1,f,c
 10281  00136E  90D8               	bcf	status,0,c
 10282  001370  3624               	rlcf	___ftmul@f2,f,c
 10283  001372  3625               	rlcf	___ftmul@f2+1,f,c
 10284  001374  3626               	rlcf	___ftmul@f2+2,f,c
 10285  001376  2E2E               	decfsz	___ftmul@cntr,f,c
 10286  001378  D7F4               	goto	l5048
 10287  00137A  0E09               	movlw	9
 10288  00137C  6E2E               	movwf	___ftmul@cntr,c
 10289  00137E                     l5058:
 10290  00137E  B021               	btfsc	___ftmul@f1,0,c
 10291  001380  D81D               	call	PL70	;call to abstracted procedure
 10292  001382                     l5062:
 10293  001382  90D8               	bcf	status,0,c
 10294  001384  3223               	rrcf	___ftmul@f1+2,f,c
 10295  001386  3222               	rrcf	___ftmul@f1+1,f,c
 10296  001388  3221               	rrcf	___ftmul@f1,f,c
 10297  00138A  90D8               	bcf	status,0,c
 10298  00138C  322D               	rrcf	___ftmul@f3_as_product+2,f,c
 10299  00138E  322C               	rrcf	___ftmul@f3_as_product+1,f,c
 10300  001390  322B               	rrcf	___ftmul@f3_as_product,f,c
 10301  001392  2E2E               	decfsz	___ftmul@cntr,f,c
 10302  001394  D7F4               	goto	l5058
 10303  001396  C02B  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
 10304  00139A  C02C  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10305  00139E  C02D  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10306  0013A2  C02A  F012         	movff	___ftmul@exp,___ftpack@exp
 10307  0013A6  C02F  F013         	movff	___ftmul@sign,___ftpack@sign
 10308  0013AA  ECD5  F00B         	call	___ftpack	;wreg free
 10309  0013AE  C00F  F021         	movff	?___ftpack,?___ftmul
 10310  0013B2  C010  F022         	movff	?___ftpack+1,?___ftmul+1
 10311  0013B6  C011  F023         	movff	?___ftpack+2,?___ftmul+2
 10312  0013BA  0012               	return		;funcret
 10313  0013BC                     __end_of___ftmul:
 10314                           	opt stack 0
 10315  0013BC                     PL70:
 10316                           	opt stack 22
 10317  0013BC  5024               	movf	___ftmul@f2,w,c
 10318  0013BE  262B               	addwf	___ftmul@f3_as_product,f,c
 10319  0013C0  5025               	movf	___ftmul@f2+1,w,c
 10320  0013C2  222C               	addwfc	___ftmul@f3_as_product+1,f,c
 10321  0013C4  5026               	movf	___ftmul@f2+2,w,c
 10322  0013C6  222D               	addwfc	___ftmul@f3_as_product+2,f,c
 10323  0013C8  0012               	return	
 10324  0013CA                     __end_ofPL70:
 10325                           	opt stack 0
 10326  0013CA                     PL140:
 10327                           	opt stack 22
 10328  0013CA  6A21               	clrf	?___ftmul,c
 10329  0013CC  6A22               	clrf	?___ftmul+1,c
 10330  0013CE  6A23               	clrf	?___ftmul+2,c
 10331  0013D0  0012               	return	
 10332  0013D2                     __end_ofPL140:
 10333                           	opt stack 0
 10334                           tosu	equ	0xFFF
 10335                           tosh	equ	0xFFE
 10336                           tosl	equ	0xFFD
 10337                           pclath	equ	0xFFA
 10338                           tblptru	equ	0xFF8
 10339                           tblptrh	equ	0xFF7
 10340                           tblptrl	equ	0xFF6
 10341                           tablat	equ	0xFF5
 10342                           prodh	equ	0xFF4
 10343                           prodl	equ	0xFF3
 10344                           intcon	equ	0xFF2
 10345                           intcon2	equ	0xFF1
 10346                           postinc0	equ	0xFEE
 10347                           wreg	equ	0xFE8
 10348                           indf1	equ	0xFE7
 10349                           plusw1	equ	0xFE3
 10350                           fsr1h	equ	0xFE2
 10351                           fsr1l	equ	0xFE1
 10352                           indf2	equ	0xFDF
 10353                           postinc2	equ	0xFDE
 10354                           postdec2	equ	0xFDD
 10355                           plusw2	equ	0xFDB
 10356                           fsr2h	equ	0xFDA
 10357                           fsr2l	equ	0xFD9
 10358                           status	equ	0xFD8
 10359                           
 10360 ;; *************** function ___altoft *****************
 10361 ;; Defined at:
 10362 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
 10363 ;; Parameters:    Size  Location     Type
 10364 ;;  c               4   22[COMRAM] long 
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;  sign            1   31[COMRAM] unsigned char 
 10367 ;;  exp             1   30[COMRAM] unsigned char 
 10368 ;; Return value:  Size  Location     Type
 10369 ;;                  3   22[COMRAM] float 
 10370 ;; Registers used:
 10371 ;;		wreg, status,2, status,0, cstack
 10372 ;; Tracked objects:
 10373 ;;		On entry : 3F/0
 10374 ;;		On exit  : 0/0
 10375 ;;		Unchanged: 0/0
 10376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10377 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10379 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10380 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;Total ram usage:       10 bytes
 10382 ;; Hardware stack levels used:    1
 10383 ;; Hardware stack levels required when called:    4
 10384 ;; This function calls:
 10385 ;;		___ftpack
 10386 ;; This function is called by:
 10387 ;;		_BMP085GetPressure
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391                           	psect	text46
 10392  001B62                     __ptext46:
 10393                           	opt stack 0
 10394  001B62                     ___altoft:
 10395                           	opt stack 22
 10396                           
 10397                           ; BSR set to: 0
 10398                           
 10399                           ;incstack = 0
 10400  001B62  6A20               	clrf	___altoft@sign,c
 10401                           
 10402                           ; BSR set to: 0
 10403  001B64  0E8E               	movlw	142
 10404  001B66  6E1F               	movwf	___altoft@exp,c
 10405                           
 10406                           ; BSR set to: 0
 10407  001B68  AE1A               	btfss	___altoft@c+3,7,c
 10408  001B6A  D011               	goto	l5020
 10409                           
 10410                           ; BSR set to: 0
 10411  001B6C  1E1A               	comf	___altoft@c+3,f,c
 10412  001B6E  1E19               	comf	___altoft@c+2,f,c
 10413  001B70  1E18               	comf	___altoft@c+1,f,c
 10414  001B72  6C17               	negf	___altoft@c,c
 10415  001B74  0E00               	movlw	0
 10416  001B76  2218               	addwfc	___altoft@c+1,f,c
 10417  001B78  2219               	addwfc	___altoft@c+2,f,c
 10418  001B7A  221A               	addwfc	___altoft@c+3,f,c
 10419                           
 10420                           ; BSR set to: 0
 10421  001B7C  0E01               	movlw	1
 10422  001B7E  6E20               	movwf	___altoft@sign,c
 10423  001B80  D006               	goto	l5020
 10424  001B82                     l5018:
 10425                           
 10426                           ; BSR set to: 0
 10427  001B82  90D8               	bcf	status,0,c
 10428  001B84  321A               	rrcf	___altoft@c+3,f,c
 10429  001B86  3219               	rrcf	___altoft@c+2,f,c
 10430  001B88  3218               	rrcf	___altoft@c+1,f,c
 10431  001B8A  3217               	rrcf	___altoft@c,f,c
 10432  001B8C  2A1F               	incf	___altoft@exp,f,c
 10433  001B8E                     l5020:
 10434                           
 10435                           ; BSR set to: 0
 10436  001B8E  6A1B               	clrf	??___altoft& (0+255),c
 10437  001B90  6A1C               	clrf	(??___altoft+1)& (0+255),c
 10438  001B92  6A1D               	clrf	(??___altoft+2)& (0+255),c
 10439  001B94  501A               	movf	___altoft@c+3,w,c
 10440  001B96  6E1E               	movwf	(??___altoft+3)& (0+255),c
 10441  001B98  501B               	movf	??___altoft,w,c
 10442  001B9A  101C               	iorwf	??___altoft+1,w,c
 10443  001B9C  101D               	iorwf	??___altoft+2,w,c
 10444  001B9E  101E               	iorwf	??___altoft+3,w,c
 10445  001BA0  E1F0               	bnz	l5018
 10446                           
 10447                           ; BSR set to: 0
 10448  001BA2  C017  F00F         	movff	___altoft@c,___ftpack@arg
 10449  001BA6  C018  F010         	movff	___altoft@c+1,___ftpack@arg+1
 10450  001BAA  C019  F011         	movff	___altoft@c+2,___ftpack@arg+2
 10451  001BAE  C01F  F012         	movff	___altoft@exp,___ftpack@exp
 10452  001BB2  C020  F013         	movff	___altoft@sign,___ftpack@sign
 10453  001BB6  ECD5  F00B         	call	___ftpack	;wreg free
 10454  001BBA  C00F  F017         	movff	?___ftpack,?___altoft
 10455  001BBE  C010  F018         	movff	?___ftpack+1,?___altoft+1
 10456  001BC2  C011  F019         	movff	?___ftpack+2,?___altoft+2
 10457  001BC6  0012               	return		;funcret
 10458  001BC8                     __end_of___altoft:
 10459                           	opt stack 0
 10460                           tosu	equ	0xFFF
 10461                           tosh	equ	0xFFE
 10462                           tosl	equ	0xFFD
 10463                           pclath	equ	0xFFA
 10464                           tblptru	equ	0xFF8
 10465                           tblptrh	equ	0xFF7
 10466                           tblptrl	equ	0xFF6
 10467                           tablat	equ	0xFF5
 10468                           prodh	equ	0xFF4
 10469                           prodl	equ	0xFF3
 10470                           intcon	equ	0xFF2
 10471                           intcon2	equ	0xFF1
 10472                           postinc0	equ	0xFEE
 10473                           wreg	equ	0xFE8
 10474                           indf1	equ	0xFE7
 10475                           plusw1	equ	0xFE3
 10476                           fsr1h	equ	0xFE2
 10477                           fsr1l	equ	0xFE1
 10478                           indf2	equ	0xFDF
 10479                           postinc2	equ	0xFDE
 10480                           postdec2	equ	0xFDD
 10481                           plusw2	equ	0xFDB
 10482                           fsr2h	equ	0xFDA
 10483                           fsr2l	equ	0xFD9
 10484                           status	equ	0xFD8
 10485                           
 10486 ;; *************** function ___ftpack *****************
 10487 ;; Defined at:
 10488 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;  arg             3   14[COMRAM] unsigned um
 10491 ;;  exp             1   17[COMRAM] unsigned char 
 10492 ;;  sign            1   18[COMRAM] unsigned char 
 10493 ;; Auto vars:     Size  Location     Type
 10494 ;;		None
 10495 ;; Return value:  Size  Location     Type
 10496 ;;                  3   14[COMRAM] float 
 10497 ;; Registers used:
 10498 ;;		wreg, status,2, status,0
 10499 ;; Tracked objects:
 10500 ;;		On entry : 0/0
 10501 ;;		On exit  : 0/0
 10502 ;;		Unchanged: 0/0
 10503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10504 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10507 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;Total ram usage:        8 bytes
 10509 ;; Hardware stack levels used:    1
 10510 ;; Hardware stack levels required when called:    3
 10511 ;; This function calls:
 10512 ;;		Nothing
 10513 ;; This function is called by:
 10514 ;;		___altoft
 10515 ;;		___ftmul
 10516 ;; This function uses a non-reentrant model
 10517 ;;
 10518                           
 10519                           	psect	text47
 10520  0017AA                     __ptext47:
 10521                           	opt stack 0
 10522  0017AA                     ___ftpack:
 10523                           	opt stack 22
 10524                           
 10525                           ;incstack = 0
 10526  0017AA  5012               	movf	___ftpack@exp,w,c
 10527  0017AC  E004               	bz	l1257
 10528  0017AE  500F               	movf	___ftpack@arg,w,c
 10529  0017B0  1010               	iorwf	___ftpack@arg+1,w,c
 10530  0017B2  1011               	iorwf	___ftpack@arg+2,w,c
 10531  0017B4  E106               	bnz	l4822
 10532  0017B6                     l1257:
 10533  0017B6  6A0F               	clrf	?___ftpack,c
 10534  0017B8  6A10               	clrf	?___ftpack+1,c
 10535  0017BA  6A11               	clrf	?___ftpack+2,c
 10536  0017BC  0012               	return	
 10537  0017BE                     l4820:
 10538  0017BE  2A12               	incf	___ftpack@exp,f,c
 10539  0017C0  D82D               	call	PL84	;call to abstracted procedure
 10540  0017C2                     l4822:
 10541  0017C2  6A14               	clrf	??___ftpack& (0+255),c
 10542  0017C4  6A15               	clrf	(??___ftpack+1)& (0+255),c
 10543  0017C6  0EFE               	movlw	254
 10544  0017C8  1411               	andwf	___ftpack@arg+2,w,c
 10545  0017CA  D82D               	call	PL96	;call to abstracted procedure
 10546  0017CC  E007               	bz	l4828
 10547  0017CE  D7F7               	goto	l4820
 10548  0017D0                     l4824:
 10549  0017D0  2A12               	incf	___ftpack@exp,f,c
 10550  0017D2  2A0F               	incf	___ftpack@arg,f,c
 10551  0017D4  0E00               	movlw	0
 10552  0017D6  2210               	addwfc	___ftpack@arg+1,f,c
 10553  0017D8  2211               	addwfc	___ftpack@arg+2,f,c
 10554  0017DA  D820               	call	PL84	;call to abstracted procedure
 10555  0017DC                     l4828:
 10556  0017DC  6A14               	clrf	??___ftpack& (0+255),c
 10557  0017DE  6A15               	clrf	(??___ftpack+1)& (0+255),c
 10558  0017E0  5011               	movf	___ftpack@arg+2,w,c
 10559  0017E2  D821               	call	PL96	;call to abstracted procedure
 10560  0017E4  E006               	bz	l4832
 10561  0017E6  D7F4               	goto	l4824
 10562  0017E8                     l4830:
 10563  0017E8  0612               	decf	___ftpack@exp,f,c
 10564  0017EA  90D8               	bcf	status,0,c
 10565  0017EC  360F               	rlcf	___ftpack@arg,f,c
 10566  0017EE  3610               	rlcf	___ftpack@arg+1,f,c
 10567  0017F0  3611               	rlcf	___ftpack@arg+2,f,c
 10568  0017F2                     l4832:
 10569  0017F2  BE10               	btfsc	___ftpack@arg+1,7,c
 10570  0017F4  D003               	goto	l1269
 10571  0017F6  0E02               	movlw	2
 10572  0017F8  6012               	cpfslt	___ftpack@exp,c
 10573  0017FA  D7F6               	goto	l4830
 10574  0017FC                     l1269:
 10575  0017FC  A012               	btfss	___ftpack@exp,0,c
 10576  0017FE  9E10               	bcf	___ftpack@arg+1,7,c
 10577  001800  90D8               	bcf	status,0,c
 10578  001802  3212               	rrcf	___ftpack@exp,f,c
 10579  001804  5012               	movf	___ftpack@exp,w,c
 10580  001806  1211               	iorwf	___ftpack@arg+2,f,c
 10581  001808  5013               	movf	___ftpack@sign,w,c
 10582  00180A  E001               	bz	l4846
 10583  00180C  8E11               	bsf	___ftpack@arg+2,7,c
 10584  00180E                     l4846:
 10585  00180E  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 10586  001812  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 10587  001816  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 10588  00181A  0012               	return		;funcret
 10589  00181C                     __end_of___ftpack:
 10590                           	opt stack 0
 10591  00181C                     PL84:
 10592                           	opt stack 22
 10593  00181C  90D8               	bcf	status,0,c
 10594  00181E  3211               	rrcf	___ftpack@arg+2,f,c
 10595  001820  3210               	rrcf	___ftpack@arg+1,f,c
 10596  001822  320F               	rrcf	___ftpack@arg,f,c
 10597  001824  0012               	return	
 10598  001826                     __end_ofPL84:
 10599                           	opt stack 0
 10600  001826                     PL96:
 10601                           	opt stack 22
 10602  001826  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10603  001828  5014               	movf	??___ftpack,w,c
 10604  00182A  1015               	iorwf	??___ftpack+1,w,c
 10605  00182C  1016               	iorwf	??___ftpack+2,w,c
 10606  00182E  0012               	return	
 10607  001830                     __end_ofPL96:
 10608                           	opt stack 0
 10609                           tosu	equ	0xFFF
 10610                           tosh	equ	0xFFE
 10611                           tosl	equ	0xFFD
 10612                           pclath	equ	0xFFA
 10613                           tblptru	equ	0xFF8
 10614                           tblptrh	equ	0xFF7
 10615                           tblptrl	equ	0xFF6
 10616                           tablat	equ	0xFF5
 10617                           prodh	equ	0xFF4
 10618                           prodl	equ	0xFF3
 10619                           intcon	equ	0xFF2
 10620                           intcon2	equ	0xFF1
 10621                           postinc0	equ	0xFEE
 10622                           wreg	equ	0xFE8
 10623                           indf1	equ	0xFE7
 10624                           plusw1	equ	0xFE3
 10625                           fsr1h	equ	0xFE2
 10626                           fsr1l	equ	0xFE1
 10627                           indf2	equ	0xFDF
 10628                           postinc2	equ	0xFDE
 10629                           postdec2	equ	0xFDD
 10630                           plusw2	equ	0xFDB
 10631                           fsr2h	equ	0xFDA
 10632                           fsr2l	equ	0xFD9
 10633                           status	equ	0xFD8
 10634                           
 10635 ;; *************** function ___aldiv *****************
 10636 ;; Defined at:
 10637 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;  dividend        4   26[COMRAM] long 
 10640 ;;  divisor         4   30[COMRAM] long 
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;  quotient        4   36[COMRAM] long 
 10643 ;;  sign            1   35[COMRAM] unsigned char 
 10644 ;;  counter         1   34[COMRAM] unsigned char 
 10645 ;; Return value:  Size  Location     Type
 10646 ;;                  4   26[COMRAM] long 
 10647 ;; Registers used:
 10648 ;;		wreg, status,2, status,0
 10649 ;; Tracked objects:
 10650 ;;		On entry : 0/0
 10651 ;;		On exit  : 0/0
 10652 ;;		Unchanged: 0/0
 10653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10654 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10655 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10657 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;Total ram usage:       14 bytes
 10659 ;; Hardware stack levels used:    1
 10660 ;; Hardware stack levels required when called:    3
 10661 ;; This function calls:
 10662 ;;		Nothing
 10663 ;; This function is called by:
 10664 ;;		_BMP085GetTemp
 10665 ;;		_BMP085GetPressure
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text48
 10670  0013D2                     __ptext48:
 10671                           	opt stack 0
 10672  0013D2                     ___aldiv:
 10673                           	opt stack 23
 10674                           
 10675                           ;incstack = 0
 10676  0013D2  6A24               	clrf	___aldiv@sign,c
 10677  0013D4  AE22               	btfss	___aldiv@divisor+3,7,c
 10678  0013D6  D00A               	goto	l4972
 10679  0013D8  1E22               	comf	___aldiv@divisor+3,f,c
 10680  0013DA  1E21               	comf	___aldiv@divisor+2,f,c
 10681  0013DC  1E20               	comf	___aldiv@divisor+1,f,c
 10682  0013DE  6C1F               	negf	___aldiv@divisor,c
 10683  0013E0  0E00               	movlw	0
 10684  0013E2  2220               	addwfc	___aldiv@divisor+1,f,c
 10685  0013E4  2221               	addwfc	___aldiv@divisor+2,f,c
 10686  0013E6  2222               	addwfc	___aldiv@divisor+3,f,c
 10687  0013E8  0E01               	movlw	1
 10688  0013EA  6E24               	movwf	___aldiv@sign,c
 10689  0013EC                     l4972:
 10690  0013EC  AE1E               	btfss	___aldiv@dividend+3,7,c
 10691  0013EE  D00A               	goto	l4978
 10692  0013F0  1E1E               	comf	___aldiv@dividend+3,f,c
 10693  0013F2  1E1D               	comf	___aldiv@dividend+2,f,c
 10694  0013F4  1E1C               	comf	___aldiv@dividend+1,f,c
 10695  0013F6  6C1B               	negf	___aldiv@dividend,c
 10696  0013F8  0E00               	movlw	0
 10697  0013FA  221C               	addwfc	___aldiv@dividend+1,f,c
 10698  0013FC  221D               	addwfc	___aldiv@dividend+2,f,c
 10699  0013FE  221E               	addwfc	___aldiv@dividend+3,f,c
 10700  001400  0E01               	movlw	1
 10701  001402  1A24               	xorwf	___aldiv@sign,f,c
 10702  001404                     l4978:
 10703  001404  6A25               	clrf	___aldiv@quotient,c
 10704  001406  6A26               	clrf	___aldiv@quotient+1,c
 10705  001408  6A27               	clrf	___aldiv@quotient+2,c
 10706  00140A  6A28               	clrf	___aldiv@quotient+3,c
 10707  00140C  501F               	movf	___aldiv@divisor,w,c
 10708  00140E  1020               	iorwf	___aldiv@divisor+1,w,c
 10709  001410  1021               	iorwf	___aldiv@divisor+2,w,c
 10710  001412  1022               	iorwf	___aldiv@divisor+3,w,c
 10711  001414  E029               	bz	l5000
 10712  001416  0E01               	movlw	1
 10713  001418  6E23               	movwf	___aldiv@counter,c
 10714  00141A  D006               	goto	l4986
 10715  00141C                     l4984:
 10716  00141C  90D8               	bcf	status,0,c
 10717  00141E  361F               	rlcf	___aldiv@divisor,f,c
 10718  001420  3620               	rlcf	___aldiv@divisor+1,f,c
 10719  001422  3621               	rlcf	___aldiv@divisor+2,f,c
 10720  001424  3622               	rlcf	___aldiv@divisor+3,f,c
 10721  001426  2A23               	incf	___aldiv@counter,f,c
 10722  001428                     l4986:
 10723  001428  AE22               	btfss	___aldiv@divisor+3,7,c
 10724  00142A  D7F8               	goto	l4984
 10725  00142C                     l4988:
 10726  00142C  90D8               	bcf	status,0,c
 10727  00142E  3625               	rlcf	___aldiv@quotient,f,c
 10728  001430  3626               	rlcf	___aldiv@quotient+1,f,c
 10729  001432  3627               	rlcf	___aldiv@quotient+2,f,c
 10730  001434  3628               	rlcf	___aldiv@quotient+3,f,c
 10731  001436  501F               	movf	___aldiv@divisor,w,c
 10732  001438  5C1B               	subwf	___aldiv@dividend,w,c
 10733  00143A  5020               	movf	___aldiv@divisor+1,w,c
 10734  00143C  581C               	subwfb	___aldiv@dividend+1,w,c
 10735  00143E  5021               	movf	___aldiv@divisor+2,w,c
 10736  001440  581D               	subwfb	___aldiv@dividend+2,w,c
 10737  001442  5022               	movf	___aldiv@divisor+3,w,c
 10738  001444  581E               	subwfb	___aldiv@dividend+3,w,c
 10739  001446  E309               	bnc	l4996
 10740  001448  501F               	movf	___aldiv@divisor,w,c
 10741  00144A  5E1B               	subwf	___aldiv@dividend,f,c
 10742  00144C  5020               	movf	___aldiv@divisor+1,w,c
 10743  00144E  5A1C               	subwfb	___aldiv@dividend+1,f,c
 10744  001450  5021               	movf	___aldiv@divisor+2,w,c
 10745  001452  5A1D               	subwfb	___aldiv@dividend+2,f,c
 10746  001454  5022               	movf	___aldiv@divisor+3,w,c
 10747  001456  5A1E               	subwfb	___aldiv@dividend+3,f,c
 10748  001458  8025               	bsf	___aldiv@quotient,0,c
 10749  00145A                     l4996:
 10750  00145A  90D8               	bcf	status,0,c
 10751  00145C  3222               	rrcf	___aldiv@divisor+3,f,c
 10752  00145E  3221               	rrcf	___aldiv@divisor+2,f,c
 10753  001460  3220               	rrcf	___aldiv@divisor+1,f,c
 10754  001462  321F               	rrcf	___aldiv@divisor,f,c
 10755  001464  2E23               	decfsz	___aldiv@counter,f,c
 10756  001466  D7E2               	goto	l4988
 10757  001468                     l5000:
 10758  001468  5024               	movf	___aldiv@sign,w,c
 10759  00146A  E008               	bz	l5004
 10760  00146C  1E28               	comf	___aldiv@quotient+3,f,c
 10761  00146E  1E27               	comf	___aldiv@quotient+2,f,c
 10762  001470  1E26               	comf	___aldiv@quotient+1,f,c
 10763  001472  6C25               	negf	___aldiv@quotient,c
 10764  001474  0E00               	movlw	0
 10765  001476  2226               	addwfc	___aldiv@quotient+1,f,c
 10766  001478  2227               	addwfc	___aldiv@quotient+2,f,c
 10767  00147A  2228               	addwfc	___aldiv@quotient+3,f,c
 10768  00147C                     l5004:
 10769  00147C  C025  F01B         	movff	___aldiv@quotient,?___aldiv
 10770  001480  C026  F01C         	movff	___aldiv@quotient+1,?___aldiv+1
 10771  001484  C027  F01D         	movff	___aldiv@quotient+2,?___aldiv+2
 10772  001488  C028  F01E         	movff	___aldiv@quotient+3,?___aldiv+3
 10773  00148C  0012               	return		;funcret
 10774  00148E                     __end_of___aldiv:
 10775                           	opt stack 0
 10776                           tosu	equ	0xFFF
 10777                           tosh	equ	0xFFE
 10778                           tosl	equ	0xFFD
 10779                           pclath	equ	0xFFA
 10780                           tblptru	equ	0xFF8
 10781                           tblptrh	equ	0xFF7
 10782                           tblptrl	equ	0xFF6
 10783                           tablat	equ	0xFF5
 10784                           prodh	equ	0xFF4
 10785                           prodl	equ	0xFF3
 10786                           intcon	equ	0xFF2
 10787                           intcon2	equ	0xFF1
 10788                           postinc0	equ	0xFEE
 10789                           wreg	equ	0xFE8
 10790                           indf1	equ	0xFE7
 10791                           plusw1	equ	0xFE3
 10792                           fsr1h	equ	0xFE2
 10793                           fsr1l	equ	0xFE1
 10794                           indf2	equ	0xFDF
 10795                           postinc2	equ	0xFDE
 10796                           postdec2	equ	0xFDD
 10797                           plusw2	equ	0xFDB
 10798                           fsr2h	equ	0xFDA
 10799                           fsr2l	equ	0xFD9
 10800                           status	equ	0xFD8
 10801                           
 10802 ;; *************** function _scroll_left *****************
 10803 ;; Defined at:
 10804 ;;		line 275 in file "display.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;  i               1   24[COMRAM] unsigned char 
 10809 ;;  speed           1   23[COMRAM] unsigned char 
 10810 ;;  k               1   22[COMRAM] unsigned char 
 10811 ;;  j               1   21[COMRAM] unsigned char 
 10812 ;; Return value:  Size  Location     Type
 10813 ;;                  1    wreg      void 
 10814 ;; Registers used:
 10815 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10816 ;; Tracked objects:
 10817 ;;		On entry : 3F/0
 10818 ;;		On exit  : 0/0
 10819 ;;		Unchanged: 0/0
 10820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10823 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10824 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10825 ;;Total ram usage:        5 bytes
 10826 ;; Hardware stack levels used:    1
 10827 ;; Hardware stack levels required when called:    5
 10828 ;; This function calls:
 10829 ;;		_Update_Matrix
 10830 ;; This function is called by:
 10831 ;;		_home_temp
 10832 ;;		_time_led
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           	psect	text49
 10837  001C28                     __ptext49:
 10838                           	opt stack 0
 10839  001C28                     _scroll_left:
 10840                           	opt stack 23
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;display.c: 277: uint8_t i,j,k,speed = 100;
 10844                           
 10845                           ;incstack = 0
 10846  001C28  0E64               	movlw	100
 10847  001C2A  6E18               	movwf	scroll_left@speed,c
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;display.c: 280: for (k=0;k<=31;k++)
 10851  001C2C  6A17               	clrf	scroll_left@k,c
 10852  001C2E                     l454:
 10853                           
 10854                           ;display.c: 281: {
 10855                           ;display.c: 282: for (i=0; i<=31; i++)
 10856  001C2E  6A19               	clrf	scroll_left@i,c
 10857  001C30                     l5604:
 10858                           
 10859                           ;display.c: 283: Dis_Buff[i] = Dis_Buff[i+1];
 10860  001C30  5019               	movf	scroll_left@i,w,c
 10861  001C32  0FAC               	addlw	low (_Dis_Buff+1)
 10862  001C34  6ED9               	movwf	fsr2l,c
 10863  001C36  6ADA               	clrf	fsr2h,c
 10864  001C38  5019               	movf	scroll_left@i,w,c
 10865  001C3A  0FAB               	addlw	low _Dis_Buff
 10866  001C3C  6EE1               	movwf	fsr1l,c
 10867  001C3E  6AE2               	clrf	fsr1h,c
 10868  001C40  CFDF FFE7          	movff	indf2,indf1
 10869  001C44  2A19               	incf	scroll_left@i,f,c
 10870  001C46  0E1F               	movlw	31
 10871  001C48  6419               	cpfsgt	scroll_left@i,c
 10872  001C4A  D7F2               	goto	l5604
 10873                           
 10874                           ;display.c: 285: Dis_Buff[31] = 0;
 10875  001C4C  0100               	movlb	0	; () banked
 10876  001C4E  6BCA               	clrf	(_Dis_Buff+31)& (0+255),b
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;display.c: 286: Update_Matrix(Dis_Buff);
 10880  001C50  0EAB               	movlw	low _Dis_Buff
 10881  001C52  6E11               	movwf	Update_Matrix@buf,c
 10882  001C54  EC5E  F00F         	call	_Update_Matrix	;wreg free
 10883                           
 10884                           ;display.c: 287: for(j=0; j<speed; j++)
 10885  001C58  6A16               	clrf	scroll_left@j,c
 10886  001C5A  D008               	goto	l458
 10887  001C5C                     l5614:
 10888                           
 10889                           ;display.c: 288: _delay((unsigned long)((1)*(40000000/4000.0)));
 10890  001C5C  0E0D               	movlw	13
 10891  001C5E  6E15               	movwf	??_scroll_left& (0+255),c
 10892  001C60  0EFC               	movlw	252
 10893  001C62                     u5227:
 10894  001C62  2EE8               	decfsz	wreg,f,c
 10895  001C64  D7FE               	bra	u5227
 10896  001C66  2E15               	decfsz	??_scroll_left& (0+255),f,c
 10897  001C68  D7FC               	bra	u5227
 10898  001C6A  2A16               	incf	scroll_left@j,f,c
 10899  001C6C                     l458:
 10900  001C6C  5018               	movf	scroll_left@speed,w,c
 10901  001C6E  5C16               	subwf	scroll_left@j,w,c
 10902  001C70  E3F5               	bnc	l5614
 10903                           
 10904                           ;display.c: 289: if (speed > 10) speed -=10;
 10905  001C72  0E0A               	movlw	10
 10906  001C74  6418               	cpfsgt	scroll_left@speed,c
 10907  001C76  D001               	goto	l5622
 10908  001C78  5E18               	subwf	scroll_left@speed,f,c
 10909  001C7A                     l5622:
 10910  001C7A  2A17               	incf	scroll_left@k,f,c
 10911  001C7C  0E1F               	movlw	31
 10912  001C7E  6417               	cpfsgt	scroll_left@k,c
 10913  001C80  D7D6               	goto	l454
 10914  001C82  0C1F               	retlw	31
 10915  001C84                     __end_of_scroll_left:
 10916                           	opt stack 0
 10917                           tosu	equ	0xFFF
 10918                           tosh	equ	0xFFE
 10919                           tosl	equ	0xFFD
 10920                           pclath	equ	0xFFA
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           intcon2	equ	0xFF1
 10929                           postinc0	equ	0xFEE
 10930                           wreg	equ	0xFE8
 10931                           indf1	equ	0xFE7
 10932                           plusw1	equ	0xFE3
 10933                           fsr1h	equ	0xFE2
 10934                           fsr1l	equ	0xFE1
 10935                           indf2	equ	0xFDF
 10936                           postinc2	equ	0xFDE
 10937                           postdec2	equ	0xFDD
 10938                           plusw2	equ	0xFDB
 10939                           fsr2h	equ	0xFDA
 10940                           fsr2l	equ	0xFD9
 10941                           status	equ	0xFD8
 10942                           
 10943 ;; *************** function _putchar_down_s *****************
 10944 ;; Defined at:
 10945 ;;		line 120 in file "display.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;  x               1    wreg     unsigned char 
 10948 ;;  symbol          1   22[COMRAM] unsigned char 
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;  x               1   28[COMRAM] unsigned char 
 10951 ;;  i               1   31[COMRAM] unsigned char 
 10952 ;;  j               1   30[COMRAM] unsigned char 
 10953 ;;  k               1   29[COMRAM] unsigned char 
 10954 ;; Return value:  Size  Location     Type
 10955 ;;                  1    wreg      void 
 10956 ;; Registers used:
 10957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10958 ;; Tracked objects:
 10959 ;;		On entry : 0/0
 10960 ;;		On exit  : 0/0
 10961 ;;		Unchanged: 0/0
 10962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10963 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10964 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10965 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10966 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10967 ;;Total ram usage:       10 bytes
 10968 ;; Hardware stack levels used:    1
 10969 ;; Hardware stack levels required when called:    5
 10970 ;; This function calls:
 10971 ;;		_Update_Matrix
 10972 ;; This function is called by:
 10973 ;;		_home_temp
 10974 ;; This function uses a non-reentrant model
 10975 ;;
 10976                           
 10977                           	psect	text50
 10978  0015F8                     __ptext50:
 10979                           	opt stack 0
 10980  0015F8                     _putchar_down_s:
 10981                           	opt stack 23
 10982                           
 10983                           ;incstack = 0
 10984                           ;putchar_down_s@x stored from wreg
 10985  0015F8  6E1D               	movwf	putchar_down_s@x,c
 10986                           
 10987                           ;display.c: 122: uint8_t i, j, k;
 10988                           ;display.c: 127: for(j=0;j<=7;j++)
 10989  0015FA  6A1F               	clrf	putchar_down_s@j,c
 10990  0015FC                     l410:
 10991                           
 10992                           ;display.c: 128: {
 10993                           ;display.c: 129: for(i=0;i<3;i++)
 10994  0015FC  6A20               	clrf	putchar_down_s@i,c
 10995  0015FE                     l5532:
 10996                           
 10997                           ;display.c: 130: {
 10998                           ;display.c: 131: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | (FontS[symbol][i] >> (8-1-j));
 10999  0015FE  501D               	movf	putchar_down_s@x,w,c
 11000  001600  0FAB               	addlw	low _Dis_Buff
 11001  001602  2420               	addwf	putchar_down_s@i,w,c
 11002  001604  6ED9               	movwf	fsr2l,c
 11003  001606  6ADA               	clrf	fsr2h,c
 11004  001608  501F               	movf	putchar_down_s@j,w,c
 11005  00160A  0807               	sublw	7
 11006  00160C  6E18               	movwf	??_putchar_down_s& (0+255),c
 11007  00160E  5017               	movf	putchar_down_s@symbol,w,c
 11008  001610  0D03               	mullw	3
 11009  001612  0EC8               	movlw	low _FontS
 11010  001614  6E19               	movwf	(??_putchar_down_s+1)& (0+255),c
 11011  001616  0EBF               	movlw	high _FontS
 11012  001618  6E1A               	movwf	(??_putchar_down_s+2)& (0+255),c
 11013  00161A  50F3               	movf	prodl,w,c
 11014  00161C  2619               	addwf	??_putchar_down_s+1,f,c
 11015  00161E  50F4               	movf	prodh,w,c
 11016  001620  221A               	addwfc	??_putchar_down_s+2,f,c
 11017  001622  5020               	movf	putchar_down_s@i,w,c
 11018  001624  2619               	addwf	??_putchar_down_s+1,f,c
 11019  001626  0E00               	movlw	0
 11020  001628  221A               	addwfc	??_putchar_down_s+2,f,c
 11021  00162A  C019  FFF6         	movff	??_putchar_down_s+1,tblptrl
 11022  00162E  C01A  FFF7         	movff	??_putchar_down_s+2,tblptrh
 11023  001632                     	if	0	;tblptru may be non-zero
 11024  001632                     	endif
 11025  001632                     	if	0	;tblptru may be non-zero
 11026  001632                     	endif
 11027  001632  0008               	tblrd		*
 11028  001634  CFF5 F01B          	movff	tablat,??_putchar_down_s+3
 11029  001638  2A18               	incf	??_putchar_down_s,f,c
 11030  00163A  D002               	goto	u4354
 11031  00163C                     u4355:
 11032  00163C  90D8               	bcf	status,0,c
 11033  00163E  321B               	rrcf	??_putchar_down_s+3,f,c
 11034  001640                     u4354:
 11035  001640  2E18               	decfsz	??_putchar_down_s,f,c
 11036  001642  D7FC               	goto	u4355
 11037  001644  501D               	movf	putchar_down_s@x,w,c
 11038  001646  0FAB               	addlw	low _Dis_Buff
 11039  001648  2420               	addwf	putchar_down_s@i,w,c
 11040  00164A  6EE1               	movwf	fsr1l,c
 11041  00164C  6AE2               	clrf	fsr1h,c
 11042  00164E  50E7               	movf	indf1,w,c
 11043  001650  6E1C               	movwf	(??_putchar_down_s+4)& (0+255),c
 11044  001652  90D8               	bcf	status,0,c
 11045  001654  341C               	rlcf	??_putchar_down_s+4,w,c
 11046  001656  101B               	iorwf	??_putchar_down_s+3,w,c
 11047  001658  6EDF               	movwf	indf2,c
 11048  00165A  2A20               	incf	putchar_down_s@i,f,c
 11049  00165C  0E02               	movlw	2
 11050  00165E  6420               	cpfsgt	putchar_down_s@i,c
 11051  001660  D7CE               	goto	l5532
 11052                           
 11053                           ;display.c: 132: }
 11054                           ;display.c: 134: for(k=0;k<20;k++)
 11055  001662  6A1E               	clrf	putchar_down_s@k,c
 11056  001664                     l5542:
 11057                           
 11058                           ;display.c: 135: _delay((unsigned long)((1)*(40000000/4000.0)));
 11059  001664  0E0D               	movlw	13
 11060  001666  6E18               	movwf	??_putchar_down_s& (0+255),c
 11061  001668  0EFC               	movlw	252
 11062  00166A                     u5237:
 11063  00166A  2EE8               	decfsz	wreg,f,c
 11064  00166C  D7FE               	bra	u5237
 11065  00166E  2E18               	decfsz	??_putchar_down_s& (0+255),f,c
 11066  001670  D7FC               	bra	u5237
 11067  001672  2A1E               	incf	putchar_down_s@k,f,c
 11068  001674  0E13               	movlw	19
 11069  001676  641E               	cpfsgt	putchar_down_s@k,c
 11070  001678  D7F5               	goto	l5542
 11071                           
 11072                           ;display.c: 136: Update_Matrix(Dis_Buff);
 11073  00167A  0EAB               	movlw	low _Dis_Buff
 11074  00167C  6E11               	movwf	Update_Matrix@buf,c
 11075  00167E  EC5E  F00F         	call	_Update_Matrix	;wreg free
 11076  001682  2A1F               	incf	putchar_down_s@j,f,c
 11077  001684  0E07               	movlw	7
 11078  001686  641F               	cpfsgt	putchar_down_s@j,c
 11079  001688  D7B9               	goto	l410
 11080  00168A  0C07               	retlw	7
 11081  00168C                     __end_of_putchar_down_s:
 11082                           	opt stack 0
 11083                           tosu	equ	0xFFF
 11084                           tosh	equ	0xFFE
 11085                           tosl	equ	0xFFD
 11086                           pclath	equ	0xFFA
 11087                           tblptru	equ	0xFF8
 11088                           tblptrh	equ	0xFF7
 11089                           tblptrl	equ	0xFF6
 11090                           tablat	equ	0xFF5
 11091                           prodh	equ	0xFF4
 11092                           prodl	equ	0xFF3
 11093                           intcon	equ	0xFF2
 11094                           intcon2	equ	0xFF1
 11095                           postinc0	equ	0xFEE
 11096                           wreg	equ	0xFE8
 11097                           indf1	equ	0xFE7
 11098                           plusw1	equ	0xFE3
 11099                           fsr1h	equ	0xFE2
 11100                           fsr1l	equ	0xFE1
 11101                           indf2	equ	0xFDF
 11102                           postinc2	equ	0xFDE
 11103                           postdec2	equ	0xFDD
 11104                           plusw2	equ	0xFDB
 11105                           fsr2h	equ	0xFDA
 11106                           fsr2l	equ	0xFD9
 11107                           status	equ	0xFD8
 11108                           
 11109 ;; *************** function _putchar_down *****************
 11110 ;; Defined at:
 11111 ;;		line 98 in file "display.c"
 11112 ;; Parameters:    Size  Location     Type
 11113 ;;  x               1    wreg     unsigned char 
 11114 ;;  symbol          1   26[COMRAM] unsigned char 
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;  x               1   32[COMRAM] unsigned char 
 11117 ;;  i               1   35[COMRAM] unsigned char 
 11118 ;;  j               1   34[COMRAM] unsigned char 
 11119 ;;  k               1   33[COMRAM] unsigned char 
 11120 ;; Return value:  Size  Location     Type
 11121 ;;                  1    wreg      void 
 11122 ;; Registers used:
 11123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11124 ;; Tracked objects:
 11125 ;;		On entry : 0/0
 11126 ;;		On exit  : 0/0
 11127 ;;		Unchanged: 0/0
 11128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11129 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11130 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11131 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11132 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11133 ;;Total ram usage:       10 bytes
 11134 ;; Hardware stack levels used:    1
 11135 ;; Hardware stack levels required when called:    5
 11136 ;; This function calls:
 11137 ;;		_Update_Matrix
 11138 ;; This function is called by:
 11139 ;;		_home_temp
 11140 ;; This function uses a non-reentrant model
 11141 ;;
 11142                           
 11143                           	psect	text51
 11144  00168C                     __ptext51:
 11145                           	opt stack 0
 11146  00168C                     _putchar_down:
 11147                           	opt stack 23
 11148                           
 11149                           ;incstack = 0
 11150                           ;putchar_down@x stored from wreg
 11151  00168C  6E21               	movwf	putchar_down@x,c
 11152                           
 11153                           ;display.c: 100: uint8_t i, j, k;
 11154                           ;display.c: 102: for(j=0;j<=7;j++)
 11155  00168E  6A23               	clrf	putchar_down@j,c
 11156  001690                     l401:
 11157                           
 11158                           ;display.c: 103: {
 11159                           ;display.c: 104: for(i=0;i<5;i++)
 11160  001690  6A24               	clrf	putchar_down@i,c
 11161  001692                     l5502:
 11162                           
 11163                           ;display.c: 105: {
 11164                           ;display.c: 106: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | (Font[symbol][i] >> (8-1-j));
 11165  001692  5021               	movf	putchar_down@x,w,c
 11166  001694  0FAB               	addlw	low _Dis_Buff
 11167  001696  2424               	addwf	putchar_down@i,w,c
 11168  001698  6ED9               	movwf	fsr2l,c
 11169  00169A  6ADA               	clrf	fsr2h,c
 11170  00169C  5023               	movf	putchar_down@j,w,c
 11171  00169E  0807               	sublw	7
 11172  0016A0  6E1C               	movwf	??_putchar_down& (0+255),c
 11173  0016A2  501B               	movf	putchar_down@symbol,w,c
 11174  0016A4  0D05               	mullw	5
 11175  0016A6  0EC8               	movlw	low _Font
 11176  0016A8  6E1D               	movwf	(??_putchar_down+1)& (0+255),c
 11177  0016AA  0EBA               	movlw	high _Font
 11178  0016AC  6E1E               	movwf	(??_putchar_down+2)& (0+255),c
 11179  0016AE  50F3               	movf	prodl,w,c
 11180  0016B0  261D               	addwf	??_putchar_down+1,f,c
 11181  0016B2  50F4               	movf	prodh,w,c
 11182  0016B4  221E               	addwfc	??_putchar_down+2,f,c
 11183  0016B6  5024               	movf	putchar_down@i,w,c
 11184  0016B8  261D               	addwf	??_putchar_down+1,f,c
 11185  0016BA  0E00               	movlw	0
 11186  0016BC  221E               	addwfc	??_putchar_down+2,f,c
 11187  0016BE  C01D  FFF6         	movff	??_putchar_down+1,tblptrl
 11188  0016C2  C01E  FFF7         	movff	??_putchar_down+2,tblptrh
 11189  0016C6                     	if	0	;tblptru may be non-zero
 11190  0016C6                     	endif
 11191  0016C6                     	if	0	;tblptru may be non-zero
 11192  0016C6                     	endif
 11193  0016C6  0008               	tblrd		*
 11194  0016C8  CFF5 F01F          	movff	tablat,??_putchar_down+3
 11195  0016CC  2A1C               	incf	??_putchar_down,f,c
 11196  0016CE  D002               	goto	u4314
 11197  0016D0                     u4315:
 11198  0016D0  90D8               	bcf	status,0,c
 11199  0016D2  321F               	rrcf	??_putchar_down+3,f,c
 11200  0016D4                     u4314:
 11201  0016D4  2E1C               	decfsz	??_putchar_down,f,c
 11202  0016D6  D7FC               	goto	u4315
 11203  0016D8  5021               	movf	putchar_down@x,w,c
 11204  0016DA  0FAB               	addlw	low _Dis_Buff
 11205  0016DC  2424               	addwf	putchar_down@i,w,c
 11206  0016DE  6EE1               	movwf	fsr1l,c
 11207  0016E0  6AE2               	clrf	fsr1h,c
 11208  0016E2  50E7               	movf	indf1,w,c
 11209  0016E4  6E20               	movwf	(??_putchar_down+4)& (0+255),c
 11210  0016E6  90D8               	bcf	status,0,c
 11211  0016E8  3420               	rlcf	??_putchar_down+4,w,c
 11212  0016EA  101F               	iorwf	??_putchar_down+3,w,c
 11213  0016EC  6EDF               	movwf	indf2,c
 11214  0016EE  2A24               	incf	putchar_down@i,f,c
 11215  0016F0  0E04               	movlw	4
 11216  0016F2  6424               	cpfsgt	putchar_down@i,c
 11217  0016F4  D7CE               	goto	l5502
 11218                           
 11219                           ;display.c: 107: }
 11220                           ;display.c: 109: for(k=0;k<20;k++)
 11221  0016F6  6A22               	clrf	putchar_down@k,c
 11222  0016F8                     l5512:
 11223                           
 11224                           ;display.c: 110: _delay((unsigned long)((1)*(40000000/4000.0)));
 11225  0016F8  0E0D               	movlw	13
 11226  0016FA  6E1C               	movwf	??_putchar_down& (0+255),c
 11227  0016FC  0EFC               	movlw	252
 11228  0016FE                     u5247:
 11229  0016FE  2EE8               	decfsz	wreg,f,c
 11230  001700  D7FE               	bra	u5247
 11231  001702  2E1C               	decfsz	??_putchar_down& (0+255),f,c
 11232  001704  D7FC               	bra	u5247
 11233  001706  2A22               	incf	putchar_down@k,f,c
 11234  001708  0E13               	movlw	19
 11235  00170A  6422               	cpfsgt	putchar_down@k,c
 11236  00170C  D7F5               	goto	l5512
 11237                           
 11238                           ;display.c: 111: Update_Matrix(Dis_Buff);
 11239  00170E  0EAB               	movlw	low _Dis_Buff
 11240  001710  6E11               	movwf	Update_Matrix@buf,c
 11241  001712  EC5E  F00F         	call	_Update_Matrix	;wreg free
 11242  001716  2A23               	incf	putchar_down@j,f,c
 11243  001718  0E07               	movlw	7
 11244  00171A  6423               	cpfsgt	putchar_down@j,c
 11245  00171C  D7B9               	goto	l401
 11246  00171E  0C07               	retlw	7
 11247  001720                     __end_of_putchar_down:
 11248                           	opt stack 0
 11249                           tosu	equ	0xFFF
 11250                           tosh	equ	0xFFE
 11251                           tosl	equ	0xFFD
 11252                           pclath	equ	0xFFA
 11253                           tblptru	equ	0xFF8
 11254                           tblptrh	equ	0xFF7
 11255                           tblptrl	equ	0xFF6
 11256                           tablat	equ	0xFF5
 11257                           prodh	equ	0xFF4
 11258                           prodl	equ	0xFF3
 11259                           intcon	equ	0xFF2
 11260                           intcon2	equ	0xFF1
 11261                           postinc0	equ	0xFEE
 11262                           wreg	equ	0xFE8
 11263                           indf1	equ	0xFE7
 11264                           plusw1	equ	0xFE3
 11265                           fsr1h	equ	0xFE2
 11266                           fsr1l	equ	0xFE1
 11267                           indf2	equ	0xFDF
 11268                           postinc2	equ	0xFDE
 11269                           postdec2	equ	0xFDD
 11270                           plusw2	equ	0xFDB
 11271                           fsr2h	equ	0xFDA
 11272                           fsr2l	equ	0xFD9
 11273                           status	equ	0xFD8
 11274                           
 11275 ;; *************** function _Update_Matrix *****************
 11276 ;; Defined at:
 11277 ;;		line 51 in file "max7221.c"
 11278 ;; Parameters:    Size  Location     Type
 11279 ;;  buf             1   16[COMRAM] PTR unsigned char 
 11280 ;;		 -> Dis_Buff(32), 
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;  i               1   19[COMRAM] unsigned char 
 11283 ;;  j               1   18[COMRAM] unsigned char 
 11284 ;;  data            1   17[COMRAM] unsigned char 
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  1    wreg      void 
 11287 ;; Registers used:
 11288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11289 ;; Tracked objects:
 11290 ;;		On entry : 0/0
 11291 ;;		On exit  : 0/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11294 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11295 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11298 ;;Total ram usage:        4 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:    4
 11301 ;; This function calls:
 11302 ;;		_Send_Byte_7221
 11303 ;; This function is called by:
 11304 ;;		_putchar_down
 11305 ;;		_putchar_down_s
 11306 ;;		_scroll_left
 11307 ;;		_time_set_min
 11308 ;;		_time_set_hr
 11309 ;;		_time_set_yr
 11310 ;;		_time_set_mt
 11311 ;;		_time_set_dt
 11312 ;;		_time_set_dy
 11313 ;;		_time_led
 11314 ;; This function uses a non-reentrant model
 11315 ;;
 11316                           
 11317                           	psect	text52
 11318  001EBC                     __ptext52:
 11319                           	opt stack 0
 11320  001EBC                     _Update_Matrix:
 11321                           	opt stack 24
 11322                           
 11323                           ;max7221.c: 53: uint8_t i, j, data;
 11324                           ;max7221.c: 56: for (i = 0; i < 8; i++)
 11325                           
 11326                           ;incstack = 0
 11327  001EBC  6A14               	clrf	Update_Matrix@i,c
 11328  001EBE                     l330:
 11329                           
 11330                           ;max7221.c: 57: {
 11331                           ;max7221.c: 58: LATDbits.LD0 = 0;
 11332  001EBE  908C               	bcf	3980,0,c	;volatile
 11333                           
 11334                           ;max7221.c: 59: for (j = 0; j < 4; j++)
 11335  001EC0  6A13               	clrf	Update_Matrix@j,c
 11336  001EC2                     l5186:
 11337                           
 11338                           ;max7221.c: 60: {
 11339                           ;max7221.c: 62: data = buf[8 * (4 - 1 - j) + i];
 11340  001EC2  5013               	movf	Update_Matrix@j,w,c
 11341  001EC4  0DF8               	mullw	-8
 11342  001EC6  5011               	movf	Update_Matrix@buf,w,c
 11343  001EC8  24F3               	addwf	prodl,w,c
 11344  001ECA  2414               	addwf	Update_Matrix@i,w,c
 11345  001ECC  6ED9               	movwf	fsr2l,c
 11346  001ECE  6ADA               	clrf	fsr2h,c
 11347  001ED0  0E18               	movlw	24
 11348  001ED2  26D9               	addwf	fsr2l,f,c
 11349  001ED4  50DF               	movf	indf2,w,c
 11350  001ED6  6E12               	movwf	Update_Matrix@data,c
 11351                           
 11352                           ;max7221.c: 64: Send_Byte_7221(1 + i);
 11353  001ED8  2814               	incf	Update_Matrix@i,w,c
 11354  001EDA  ECFB  F010         	call	_Send_Byte_7221
 11355                           
 11356                           ;max7221.c: 65: Send_Byte_7221(data);
 11357  001EDE  5012               	movf	Update_Matrix@data,w,c
 11358  001EE0  ECFB  F010         	call	_Send_Byte_7221
 11359  001EE4  2A13               	incf	Update_Matrix@j,f,c
 11360  001EE6  0E03               	movlw	3
 11361  001EE8  6413               	cpfsgt	Update_Matrix@j,c
 11362  001EEA  D7EB               	goto	l5186
 11363                           
 11364                           ;max7221.c: 66: }
 11365                           ;max7221.c: 67: LATDbits.LD0 = 1;
 11366  001EEC  808C               	bsf	3980,0,c	;volatile
 11367  001EEE  2A14               	incf	Update_Matrix@i,f,c
 11368  001EF0  0E07               	movlw	7
 11369  001EF2  6414               	cpfsgt	Update_Matrix@i,c
 11370  001EF4  D7E4               	goto	l330
 11371  001EF6  0C07               	retlw	7
 11372  001EF8                     __end_of_Update_Matrix:
 11373                           	opt stack 0
 11374                           tosu	equ	0xFFF
 11375                           tosh	equ	0xFFE
 11376                           tosl	equ	0xFFD
 11377                           pclath	equ	0xFFA
 11378                           tblptru	equ	0xFF8
 11379                           tblptrh	equ	0xFF7
 11380                           tblptrl	equ	0xFF6
 11381                           tablat	equ	0xFF5
 11382                           prodh	equ	0xFF4
 11383                           prodl	equ	0xFF3
 11384                           intcon	equ	0xFF2
 11385                           intcon2	equ	0xFF1
 11386                           postinc0	equ	0xFEE
 11387                           wreg	equ	0xFE8
 11388                           indf1	equ	0xFE7
 11389                           plusw1	equ	0xFE3
 11390                           fsr1h	equ	0xFE2
 11391                           fsr1l	equ	0xFE1
 11392                           indf2	equ	0xFDF
 11393                           postinc2	equ	0xFDE
 11394                           postdec2	equ	0xFDD
 11395                           plusw2	equ	0xFDB
 11396                           fsr2h	equ	0xFDA
 11397                           fsr2l	equ	0xFD9
 11398                           status	equ	0xFD8
 11399                           
 11400 ;; *************** function _Send_Byte_7221 *****************
 11401 ;; Defined at:
 11402 ;;		line 6 in file "max7221.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;  dat             1    wreg     unsigned char 
 11405 ;; Auto vars:     Size  Location     Type
 11406 ;;  dat             1   14[COMRAM] unsigned char 
 11407 ;;  i               1   15[COMRAM] unsigned char 
 11408 ;; Return value:  Size  Location     Type
 11409 ;;                  1    wreg      void 
 11410 ;; Registers used:
 11411 ;;		wreg, status,2, status,0
 11412 ;; Tracked objects:
 11413 ;;		On entry : 0/0
 11414 ;;		On exit  : 0/0
 11415 ;;		Unchanged: 0/0
 11416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11418 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11420 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11421 ;;Total ram usage:        2 bytes
 11422 ;; Hardware stack levels used:    1
 11423 ;; Hardware stack levels required when called:    3
 11424 ;; This function calls:
 11425 ;;		Nothing
 11426 ;; This function is called by:
 11427 ;;		_Cmd7221
 11428 ;;		_Update_Matrix
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text53
 11433  0021F6                     __ptext53:
 11434                           	opt stack 0
 11435  0021F6                     _Send_Byte_7221:
 11436                           	opt stack 24
 11437                           
 11438                           ;incstack = 0
 11439                           ;Send_Byte_7221@dat stored from wreg
 11440  0021F6  6E0F               	movwf	Send_Byte_7221@dat,c
 11441                           
 11442                           ;max7221.c: 8: uint8_t i;
 11443                           ;max7221.c: 10: for (i = 0; i < 8; i++)
 11444  0021F8  6A10               	clrf	Send_Byte_7221@i,c
 11445  0021FA                     l318:
 11446                           
 11447                           ;max7221.c: 11: {
 11448                           ;max7221.c: 12: if (dat & 0x80)
 11449  0021FA  AE0F               	btfss	Send_Byte_7221@dat,7,c
 11450  0021FC  D002               	goto	l320
 11451                           
 11452                           ;max7221.c: 13: LATDbits.LD2 = 1;
 11453  0021FE  848C               	bsf	3980,2,c	;volatile
 11454  002200  D001               	goto	l321
 11455  002202                     l320:
 11456                           
 11457                           ;max7221.c: 14: else
 11458                           ;max7221.c: 15: LATDbits.LD2 = 0;
 11459  002202  948C               	bcf	3980,2,c	;volatile
 11460  002204                     l321:
 11461                           
 11462                           ;max7221.c: 16: LATDbits.LD1 = 1;
 11463  002204  828C               	bsf	3980,1,c	;volatile
 11464  002206  F000               	nop		;# 
 11465  002208  F000               	nop		;# 
 11466                           
 11467                           ;max7221.c: 23: LATDbits.LD1 = 0;
 11468  00220A  928C               	bcf	3980,1,c	;volatile
 11469                           
 11470                           ;max7221.c: 24: dat <<= 1;
 11471  00220C  90D8               	bcf	status,0,c
 11472  00220E  360F               	rlcf	Send_Byte_7221@dat,f,c
 11473  002210  2A10               	incf	Send_Byte_7221@i,f,c
 11474  002212  0E07               	movlw	7
 11475  002214  6410               	cpfsgt	Send_Byte_7221@i,c
 11476  002216  D7F1               	goto	l318
 11477  002218  0C07               	retlw	7
 11478  00221A                     __end_of_Send_Byte_7221:
 11479                           	opt stack 0
 11480                           tosu	equ	0xFFF
 11481                           tosh	equ	0xFFE
 11482                           tosl	equ	0xFFD
 11483                           pclath	equ	0xFFA
 11484                           tblptru	equ	0xFF8
 11485                           tblptrh	equ	0xFF7
 11486                           tblptrl	equ	0xFF6
 11487                           tablat	equ	0xFF5
 11488                           prodh	equ	0xFF4
 11489                           prodl	equ	0xFF3
 11490                           intcon	equ	0xFF2
 11491                           intcon2	equ	0xFF1
 11492                           postinc0	equ	0xFEE
 11493                           wreg	equ	0xFE8
 11494                           indf1	equ	0xFE7
 11495                           plusw1	equ	0xFE3
 11496                           fsr1h	equ	0xFE2
 11497                           fsr1l	equ	0xFE1
 11498                           indf2	equ	0xFDF
 11499                           postinc2	equ	0xFDE
 11500                           postdec2	equ	0xFDD
 11501                           plusw2	equ	0xFDB
 11502                           fsr2h	equ	0xFDA
 11503                           fsr2l	equ	0xFD9
 11504                           status	equ	0xFD8
 11505                           
 11506 ;; *************** function _pic_to_led *****************
 11507 ;; Defined at:
 11508 ;;		line 29 in file "display.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;  x               1    wreg     unsigned char 
 11511 ;;  pic             1   19[COMRAM] unsigned char 
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;  x               1   23[COMRAM] unsigned char 
 11514 ;;  i               1   25[COMRAM] unsigned char 
 11515 ;;  j               1   24[COMRAM] unsigned char 
 11516 ;;  mask            1   22[COMRAM] unsigned char 
 11517 ;; Return value:  Size  Location     Type
 11518 ;;                  1    wreg      void 
 11519 ;; Registers used:
 11520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11521 ;; Tracked objects:
 11522 ;;		On entry : 0/0
 11523 ;;		On exit  : 0/0
 11524 ;;		Unchanged: 0/0
 11525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11526 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11527 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;Total ram usage:        7 bytes
 11531 ;; Hardware stack levels used:    1
 11532 ;; Hardware stack levels required when called:    4
 11533 ;; This function calls:
 11534 ;;		_pixel_off
 11535 ;;		_pixel_on
 11536 ;; This function is called by:
 11537 ;;		_home_temp
 11538 ;; This function uses a non-reentrant model
 11539 ;;
 11540                           
 11541                           	psect	text54
 11542  001AF8                     __ptext54:
 11543                           	opt stack 0
 11544  001AF8                     _pic_to_led:
 11545                           	opt stack 24
 11546                           
 11547                           ;incstack = 0
 11548                           ;pic_to_led@x stored from wreg
 11549  001AF8  6E18               	movwf	pic_to_led@x,c
 11550                           
 11551                           ;display.c: 31: uint8_t i, j, mask=0x01;
 11552  001AFA  0E01               	movlw	1
 11553  001AFC  6E17               	movwf	pic_to_led@mask,c
 11554                           
 11555                           ;display.c: 33: for(i=0; i<7; i++){
 11556  001AFE  6A1A               	clrf	pic_to_led@i,c
 11557  001B00                     l374:
 11558                           
 11559                           ;display.c: 34: for(j=0;j<8;j++){
 11560  001B00  6A19               	clrf	pic_to_led@j,c
 11561  001B02                     l5444:
 11562                           
 11563                           ;display.c: 35: if(pic7x8[pic][i] & mask){
 11564  001B02  5014               	movf	pic_to_led@pic,w,c
 11565  001B04  0D07               	mullw	7
 11566  001B06  0E9B               	movlw	low _pic7x8
 11567  001B08  6E15               	movwf	??_pic_to_led& (0+255),c
 11568  001B0A  0EBA               	movlw	high _pic7x8
 11569  001B0C  6E16               	movwf	(??_pic_to_led+1)& (0+255),c
 11570  001B0E  50F3               	movf	prodl,w,c
 11571  001B10  2615               	addwf	??_pic_to_led,f,c
 11572  001B12  50F4               	movf	prodh,w,c
 11573  001B14  2216               	addwfc	??_pic_to_led+1,f,c
 11574  001B16  501A               	movf	pic_to_led@i,w,c
 11575  001B18  2615               	addwf	??_pic_to_led,f,c
 11576  001B1A  0E00               	movlw	0
 11577  001B1C  2216               	addwfc	??_pic_to_led+1,f,c
 11578  001B1E  C015  FFF6         	movff	??_pic_to_led,tblptrl
 11579  001B22  C016  FFF7         	movff	??_pic_to_led+1,tblptrh
 11580  001B26                     	if	0	;tblptru may be non-zero
 11581  001B26                     	endif
 11582  001B26                     	if	0	;tblptru may be non-zero
 11583  001B26                     	endif
 11584  001B26  0008               	tblrd		*
 11585  001B28  50F5               	movf	tablat,w,c
 11586  001B2A  1417               	andwf	pic_to_led@mask,w,c
 11587  001B2C  E007               	bz	l5448
 11588                           
 11589                           ;display.c: 36: pixel_on(x+i,j);
 11590  001B2E  C019  F00F         	movff	pic_to_led@j,pixel_on@y
 11591  001B32  5018               	movf	pic_to_led@x,w,c
 11592  001B34  241A               	addwf	pic_to_led@i,w,c
 11593  001B36  EC0D  F011         	call	_pixel_on
 11594                           
 11595                           ;display.c: 37: }
 11596  001B3A  D006               	goto	l5450
 11597  001B3C                     l5448:
 11598                           
 11599                           ;display.c: 38: else {
 11600                           ;display.c: 39: pixel_off(x+i,j);
 11601  001B3C  C019  F00F         	movff	pic_to_led@j,pixel_off@y
 11602  001B40  5018               	movf	pic_to_led@x,w,c
 11603  001B42  241A               	addwf	pic_to_led@i,w,c
 11604  001B44  EC9B  F010         	call	_pixel_off
 11605  001B48                     l5450:
 11606                           
 11607                           ;display.c: 40: };
 11608                           ;display.c: 41: mask = mask<<1;
 11609  001B48  90D8               	bcf	status,0,c
 11610  001B4A  3617               	rlcf	pic_to_led@mask,f,c
 11611  001B4C  2A19               	incf	pic_to_led@j,f,c
 11612  001B4E  0E07               	movlw	7
 11613  001B50  6419               	cpfsgt	pic_to_led@j,c
 11614  001B52  D7D7               	goto	l5444
 11615                           
 11616                           ;display.c: 42: };
 11617                           ;display.c: 43: mask=0x01;
 11618  001B54  0E01               	movlw	1
 11619  001B56  6E17               	movwf	pic_to_led@mask,c
 11620  001B58  2A1A               	incf	pic_to_led@i,f,c
 11621  001B5A  0E06               	movlw	6
 11622  001B5C  641A               	cpfsgt	pic_to_led@i,c
 11623  001B5E  D7D0               	goto	l374
 11624  001B60  0C06               	retlw	6
 11625  001B62                     __end_of_pic_to_led:
 11626                           	opt stack 0
 11627                           tosu	equ	0xFFF
 11628                           tosh	equ	0xFFE
 11629                           tosl	equ	0xFFD
 11630                           pclath	equ	0xFFA
 11631                           tblptru	equ	0xFF8
 11632                           tblptrh	equ	0xFF7
 11633                           tblptrl	equ	0xFF6
 11634                           tablat	equ	0xFF5
 11635                           prodh	equ	0xFF4
 11636                           prodl	equ	0xFF3
 11637                           intcon	equ	0xFF2
 11638                           intcon2	equ	0xFF1
 11639                           postinc0	equ	0xFEE
 11640                           wreg	equ	0xFE8
 11641                           indf1	equ	0xFE7
 11642                           plusw1	equ	0xFE3
 11643                           fsr1h	equ	0xFE2
 11644                           fsr1l	equ	0xFE1
 11645                           indf2	equ	0xFDF
 11646                           postinc2	equ	0xFDE
 11647                           postdec2	equ	0xFDD
 11648                           plusw2	equ	0xFDB
 11649                           fsr2h	equ	0xFDA
 11650                           fsr2l	equ	0xFD9
 11651                           status	equ	0xFD8
 11652                           
 11653 ;; *************** function _pixel_on *****************
 11654 ;; Defined at:
 11655 ;;		line 13 in file "display.c"
 11656 ;; Parameters:    Size  Location     Type
 11657 ;;  x               1    wreg     unsigned char 
 11658 ;;  y               1   14[COMRAM] unsigned char 
 11659 ;; Auto vars:     Size  Location     Type
 11660 ;;  x               1   17[COMRAM] unsigned char 
 11661 ;; Return value:  Size  Location     Type
 11662 ;;                  1    wreg      void 
 11663 ;; Registers used:
 11664 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11665 ;; Tracked objects:
 11666 ;;		On entry : 0/0
 11667 ;;		On exit  : 0/0
 11668 ;;		Unchanged: 0/0
 11669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11670 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11671 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11672 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11673 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11674 ;;Total ram usage:        4 bytes
 11675 ;; Hardware stack levels used:    1
 11676 ;; Hardware stack levels required when called:    3
 11677 ;; This function calls:
 11678 ;;		Nothing
 11679 ;; This function is called by:
 11680 ;;		_pic_to_led
 11681 ;;		_putchar_b_buf
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           	psect	text55
 11686  00221A                     __ptext55:
 11687                           	opt stack 0
 11688  00221A                     _pixel_on:
 11689                           	opt stack 24
 11690                           
 11691                           ;incstack = 0
 11692                           ;pixel_on@x stored from wreg
 11693  00221A  6E12               	movwf	pixel_on@x,c
 11694                           
 11695                           ;display.c: 15: Dis_Buff[x] |= (1<<y);
 11696  00221C  C00F  F010         	movff	pixel_on@y,??_pixel_on
 11697  002220  0E01               	movlw	1
 11698  002222  6E11               	movwf	(??_pixel_on+1)& (0+255),c
 11699  002224  2A10               	incf	??_pixel_on,f,c
 11700  002226  D002               	goto	u3984
 11701  002228                     u3985:
 11702  002228  90D8               	bcf	status,0,c
 11703  00222A  3611               	rlcf	??_pixel_on+1,f,c
 11704  00222C                     u3984:
 11705  00222C  2E10               	decfsz	??_pixel_on,f,c
 11706  00222E  D7FC               	goto	u3985
 11707  002230  5012               	movf	pixel_on@x,w,c
 11708  002232  0FAB               	addlw	low _Dis_Buff
 11709  002234  6ED9               	movwf	fsr2l,c
 11710  002236  6ADA               	clrf	fsr2h,c
 11711  002238  5011               	movf	??_pixel_on+1,w,c
 11712  00223A  12DF               	iorwf	indf2,f,c
 11713  00223C  0012               	return		;funcret
 11714  00223E                     __end_of_pixel_on:
 11715                           	opt stack 0
 11716                           tosu	equ	0xFFF
 11717                           tosh	equ	0xFFE
 11718                           tosl	equ	0xFFD
 11719                           pclath	equ	0xFFA
 11720                           tblptru	equ	0xFF8
 11721                           tblptrh	equ	0xFF7
 11722                           tblptrl	equ	0xFF6
 11723                           tablat	equ	0xFF5
 11724                           prodh	equ	0xFF4
 11725                           prodl	equ	0xFF3
 11726                           intcon	equ	0xFF2
 11727                           intcon2	equ	0xFF1
 11728                           postinc0	equ	0xFEE
 11729                           wreg	equ	0xFE8
 11730                           indf1	equ	0xFE7
 11731                           plusw1	equ	0xFE3
 11732                           fsr1h	equ	0xFE2
 11733                           fsr1l	equ	0xFE1
 11734                           indf2	equ	0xFDF
 11735                           postinc2	equ	0xFDE
 11736                           postdec2	equ	0xFDD
 11737                           plusw2	equ	0xFDB
 11738                           fsr2h	equ	0xFDA
 11739                           fsr2l	equ	0xFD9
 11740                           status	equ	0xFD8
 11741                           
 11742 ;; *************** function _pixel_off *****************
 11743 ;; Defined at:
 11744 ;;		line 21 in file "display.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  x               1    wreg     unsigned char 
 11747 ;;  y               1   14[COMRAM] unsigned char 
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;  x               1   18[COMRAM] unsigned char 
 11750 ;; Return value:  Size  Location     Type
 11751 ;;                  1    wreg      void 
 11752 ;; Registers used:
 11753 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11759 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;Total ram usage:        5 bytes
 11764 ;; Hardware stack levels used:    1
 11765 ;; Hardware stack levels required when called:    3
 11766 ;; This function calls:
 11767 ;;		Nothing
 11768 ;; This function is called by:
 11769 ;;		_pic_to_led
 11770 ;;		_putchar_b_buf
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           	psect	text56
 11775  002136                     __ptext56:
 11776                           	opt stack 0
 11777  002136                     _pixel_off:
 11778                           	opt stack 24
 11779                           
 11780                           ;incstack = 0
 11781                           ;pixel_off@x stored from wreg
 11782  002136  6E13               	movwf	pixel_off@x,c
 11783                           
 11784                           ;display.c: 23: Dis_Buff[x] &= ~(1<<y);
 11785  002138  C00F  F010         	movff	pixel_off@y,??_pixel_off
 11786  00213C  0E01               	movlw	1
 11787  00213E  6E11               	movwf	(??_pixel_off+1)& (0+255),c
 11788  002140  2A10               	incf	??_pixel_off,f,c
 11789  002142  D002               	goto	u3994
 11790  002144                     u3995:
 11791  002144  90D8               	bcf	status,0,c
 11792  002146  3611               	rlcf	??_pixel_off+1,f,c
 11793  002148                     u3994:
 11794  002148  2E10               	decfsz	??_pixel_off,f,c
 11795  00214A  D7FC               	goto	u3995
 11796  00214C  1C11               	comf	??_pixel_off+1,w,c
 11797  00214E  6E12               	movwf	(??_pixel_off+2)& (0+255),c
 11798  002150  5013               	movf	pixel_off@x,w,c
 11799  002152  0FAB               	addlw	low _Dis_Buff
 11800  002154  6ED9               	movwf	fsr2l,c
 11801  002156  6ADA               	clrf	fsr2h,c
 11802  002158  5012               	movf	??_pixel_off+2,w,c
 11803  00215A  16DF               	andwf	indf2,f,c
 11804  00215C  0012               	return		;funcret
 11805  00215E                     __end_of_pixel_off:
 11806                           	opt stack 0
 11807                           tosu	equ	0xFFF
 11808                           tosh	equ	0xFFE
 11809                           tosl	equ	0xFFD
 11810                           pclath	equ	0xFFA
 11811                           tblptru	equ	0xFF8
 11812                           tblptrh	equ	0xFF7
 11813                           tblptrl	equ	0xFF6
 11814                           tablat	equ	0xFF5
 11815                           prodh	equ	0xFF4
 11816                           prodl	equ	0xFF3
 11817                           intcon	equ	0xFF2
 11818                           intcon2	equ	0xFF1
 11819                           postinc0	equ	0xFEE
 11820                           wreg	equ	0xFE8
 11821                           indf1	equ	0xFE7
 11822                           plusw1	equ	0xFE3
 11823                           fsr1h	equ	0xFE2
 11824                           fsr1l	equ	0xFE1
 11825                           indf2	equ	0xFDF
 11826                           postinc2	equ	0xFDE
 11827                           postdec2	equ	0xFDD
 11828                           plusw2	equ	0xFDB
 11829                           fsr2h	equ	0xFDA
 11830                           fsr2l	equ	0xFD9
 11831                           status	equ	0xFD8
 11832                           
 11833 ;; *************** function _clear_matrix *****************
 11834 ;; Defined at:
 11835 ;;		line 145 in file "display.c"
 11836 ;; Parameters:    Size  Location     Type
 11837 ;;		None
 11838 ;; Auto vars:     Size  Location     Type
 11839 ;;  i               1   14[COMRAM] unsigned char 
 11840 ;; Return value:  Size  Location     Type
 11841 ;;                  1    wreg      void 
 11842 ;; Registers used:
 11843 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11844 ;; Tracked objects:
 11845 ;;		On entry : 0/0
 11846 ;;		On exit  : 0/0
 11847 ;;		Unchanged: 0/0
 11848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11850 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11852 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11853 ;;Total ram usage:        1 bytes
 11854 ;; Hardware stack levels used:    1
 11855 ;; Hardware stack levels required when called:    3
 11856 ;; This function calls:
 11857 ;;		Nothing
 11858 ;; This function is called by:
 11859 ;;		_main
 11860 ;;		_time_set_hr
 11861 ;;		_home_temp
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           	psect	text57
 11866  002356                     __ptext57:
 11867                           	opt stack 0
 11868  002356                     _clear_matrix:
 11869                           	opt stack 27
 11870                           
 11871                           ;display.c: 147: uint8_t i;
 11872                           ;display.c: 148: for (i=0; i<=4 * 8; i++)
 11873                           
 11874                           ;incstack = 0
 11875  002356  6A0F               	clrf	clear_matrix@i,c
 11876  002358                     l5366:
 11877                           
 11878                           ;display.c: 149: Dis_Buff[i] = 0;
 11879  002358  500F               	movf	clear_matrix@i,w,c
 11880  00235A  EC05  F006         	call	PL124	;call to abstracted procedure
 11881  00235E  2A0F               	incf	clear_matrix@i,f,c
 11882  002360  0E20               	movlw	32
 11883  002362  640F               	cpfsgt	clear_matrix@i,c
 11884  002364  D7F9               	goto	l5366
 11885  002366  0C20               	retlw	32
 11886  002368                     __end_of_clear_matrix:
 11887                           	opt stack 0
 11888                           tosu	equ	0xFFF
 11889                           tosh	equ	0xFFE
 11890                           tosl	equ	0xFFD
 11891                           pclath	equ	0xFFA
 11892                           tblptru	equ	0xFF8
 11893                           tblptrh	equ	0xFF7
 11894                           tblptrl	equ	0xFF6
 11895                           tablat	equ	0xFF5
 11896                           prodh	equ	0xFF4
 11897                           prodl	equ	0xFF3
 11898                           intcon	equ	0xFF2
 11899                           intcon2	equ	0xFF1
 11900                           postinc0	equ	0xFEE
 11901                           wreg	equ	0xFE8
 11902                           indf1	equ	0xFE7
 11903                           plusw1	equ	0xFE3
 11904                           fsr1h	equ	0xFE2
 11905                           fsr1l	equ	0xFE1
 11906                           indf2	equ	0xFDF
 11907                           postinc2	equ	0xFDE
 11908                           postdec2	equ	0xFDD
 11909                           plusw2	equ	0xFDB
 11910                           fsr2h	equ	0xFDA
 11911                           fsr2l	equ	0xFD9
 11912                           status	equ	0xFD8
 11913                           
 11914 ;; *************** function ___lwmod *****************
 11915 ;; Defined at:
 11916 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11917 ;; Parameters:    Size  Location     Type
 11918 ;;  dividend        2   21[COMRAM] unsigned int 
 11919 ;;  divisor         2   23[COMRAM] unsigned int 
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;  counter         1   25[COMRAM] unsigned char 
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  2   21[COMRAM] unsigned int 
 11924 ;; Registers used:
 11925 ;;		wreg, status,2, status,0
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11934 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11935 ;;Total ram usage:        5 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    3
 11938 ;; This function calls:
 11939 ;;		Nothing
 11940 ;; This function is called by:
 11941 ;;		_home_temp
 11942 ;;		_readTemp_Single
 11943 ;; This function uses a non-reentrant model
 11944 ;;
 11945                           
 11946                           	psect	text58
 11947  001E42                     __ptext58:
 11948                           	opt stack 0
 11949  001E42                     ___lwmod:
 11950                           	opt stack 24
 11951                           
 11952                           ;incstack = 0
 11953  001E42  5018               	movf	___lwmod@divisor,w,c
 11954  001E44  1019               	iorwf	___lwmod@divisor+1,w,c
 11955  001E46  E017               	bz	l1457
 11956  001E48  0E01               	movlw	1
 11957  001E4A  6E1A               	movwf	___lwmod@counter,c
 11958  001E4C  D004               	goto	l5350
 11959  001E4E                     l5348:
 11960  001E4E  90D8               	bcf	status,0,c
 11961  001E50  3618               	rlcf	___lwmod@divisor,f,c
 11962  001E52  3619               	rlcf	___lwmod@divisor+1,f,c
 11963  001E54  2A1A               	incf	___lwmod@counter,f,c
 11964  001E56                     l5350:
 11965  001E56  AE19               	btfss	___lwmod@divisor+1,7,c
 11966  001E58  D7FA               	goto	l5348
 11967  001E5A                     l5352:
 11968  001E5A  5018               	movf	___lwmod@divisor,w,c
 11969  001E5C  5C16               	subwf	___lwmod@dividend,w,c
 11970  001E5E  5019               	movf	___lwmod@divisor+1,w,c
 11971  001E60  5817               	subwfb	___lwmod@dividend+1,w,c
 11972  001E62  E304               	bnc	l5356
 11973  001E64  5018               	movf	___lwmod@divisor,w,c
 11974  001E66  5E16               	subwf	___lwmod@dividend,f,c
 11975  001E68  5019               	movf	___lwmod@divisor+1,w,c
 11976  001E6A  5A17               	subwfb	___lwmod@dividend+1,f,c
 11977  001E6C                     l5356:
 11978  001E6C  90D8               	bcf	status,0,c
 11979  001E6E  3219               	rrcf	___lwmod@divisor+1,f,c
 11980  001E70  3218               	rrcf	___lwmod@divisor,f,c
 11981  001E72  2E1A               	decfsz	___lwmod@counter,f,c
 11982  001E74  D7F2               	goto	l5352
 11983  001E76                     l1457:
 11984  001E76  C016  F016         	movff	___lwmod@dividend,?___lwmod
 11985  001E7A  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 11986  001E7E  0012               	return		;funcret
 11987  001E80                     __end_of___lwmod:
 11988                           	opt stack 0
 11989                           tosu	equ	0xFFF
 11990                           tosh	equ	0xFFE
 11991                           tosl	equ	0xFFD
 11992                           pclath	equ	0xFFA
 11993                           tblptru	equ	0xFF8
 11994                           tblptrh	equ	0xFF7
 11995                           tblptrl	equ	0xFF6
 11996                           tablat	equ	0xFF5
 11997                           prodh	equ	0xFF4
 11998                           prodl	equ	0xFF3
 11999                           intcon	equ	0xFF2
 12000                           intcon2	equ	0xFF1
 12001                           postinc0	equ	0xFEE
 12002                           wreg	equ	0xFE8
 12003                           indf1	equ	0xFE7
 12004                           plusw1	equ	0xFE3
 12005                           fsr1h	equ	0xFE2
 12006                           fsr1l	equ	0xFE1
 12007                           indf2	equ	0xFDF
 12008                           postinc2	equ	0xFDE
 12009                           postdec2	equ	0xFDD
 12010                           plusw2	equ	0xFDB
 12011                           fsr2h	equ	0xFDA
 12012                           fsr2l	equ	0xFD9
 12013                           status	equ	0xFD8
 12014                           
 12015 ;; *************** function ___lwdiv *****************
 12016 ;; Defined at:
 12017 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 12018 ;; Parameters:    Size  Location     Type
 12019 ;;  dividend        2   14[COMRAM] unsigned int 
 12020 ;;  divisor         2   16[COMRAM] unsigned int 
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;  quotient        2   19[COMRAM] unsigned int 
 12023 ;;  counter         1   18[COMRAM] unsigned char 
 12024 ;; Return value:  Size  Location     Type
 12025 ;;                  2   14[COMRAM] unsigned int 
 12026 ;; Registers used:
 12027 ;;		wreg, status,2, status,0
 12028 ;; Tracked objects:
 12029 ;;		On entry : 0/0
 12030 ;;		On exit  : 0/0
 12031 ;;		Unchanged: 0/0
 12032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12033 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12034 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12036 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12037 ;;Total ram usage:        7 bytes
 12038 ;; Hardware stack levels used:    1
 12039 ;; Hardware stack levels required when called:    3
 12040 ;; This function calls:
 12041 ;;		Nothing
 12042 ;; This function is called by:
 12043 ;;		_home_temp
 12044 ;;		_readTemp_Single
 12045 ;; This function uses a non-reentrant model
 12046 ;;
 12047                           
 12048                           	psect	text59
 12049  001D6E                     __ptext59:
 12050                           	opt stack 0
 12051  001D6E                     ___lwdiv:
 12052                           	opt stack 24
 12053                           
 12054                           ;incstack = 0
 12055  001D6E  6A14               	clrf	___lwdiv@quotient,c
 12056  001D70  6A15               	clrf	___lwdiv@quotient+1,c
 12057  001D72  5011               	movf	___lwdiv@divisor,w,c
 12058  001D74  1012               	iorwf	___lwdiv@divisor+1,w,c
 12059  001D76  E01B               	bz	l1447
 12060  001D78  0E01               	movlw	1
 12061  001D7A  6E13               	movwf	___lwdiv@counter,c
 12062  001D7C  D004               	goto	l5330
 12063  001D7E                     l5328:
 12064  001D7E  90D8               	bcf	status,0,c
 12065  001D80  3611               	rlcf	___lwdiv@divisor,f,c
 12066  001D82  3612               	rlcf	___lwdiv@divisor+1,f,c
 12067  001D84  2A13               	incf	___lwdiv@counter,f,c
 12068  001D86                     l5330:
 12069  001D86  AE12               	btfss	___lwdiv@divisor+1,7,c
 12070  001D88  D7FA               	goto	l5328
 12071  001D8A                     l5332:
 12072  001D8A  90D8               	bcf	status,0,c
 12073  001D8C  3614               	rlcf	___lwdiv@quotient,f,c
 12074  001D8E  3615               	rlcf	___lwdiv@quotient+1,f,c
 12075  001D90  5011               	movf	___lwdiv@divisor,w,c
 12076  001D92  5C0F               	subwf	___lwdiv@dividend,w,c
 12077  001D94  5012               	movf	___lwdiv@divisor+1,w,c
 12078  001D96  5810               	subwfb	___lwdiv@dividend+1,w,c
 12079  001D98  E305               	bnc	l5340
 12080  001D9A  5011               	movf	___lwdiv@divisor,w,c
 12081  001D9C  5E0F               	subwf	___lwdiv@dividend,f,c
 12082  001D9E  5012               	movf	___lwdiv@divisor+1,w,c
 12083  001DA0  5A10               	subwfb	___lwdiv@dividend+1,f,c
 12084  001DA2  8014               	bsf	___lwdiv@quotient,0,c
 12085  001DA4                     l5340:
 12086  001DA4  90D8               	bcf	status,0,c
 12087  001DA6  3212               	rrcf	___lwdiv@divisor+1,f,c
 12088  001DA8  3211               	rrcf	___lwdiv@divisor,f,c
 12089  001DAA  2E13               	decfsz	___lwdiv@counter,f,c
 12090  001DAC  D7EE               	goto	l5332
 12091  001DAE                     l1447:
 12092  001DAE  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 12093  001DB2  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12094  001DB6  0012               	return		;funcret
 12095  001DB8                     __end_of___lwdiv:
 12096                           	opt stack 0
 12097                           tosu	equ	0xFFF
 12098                           tosh	equ	0xFFE
 12099                           tosl	equ	0xFFD
 12100                           pclath	equ	0xFFA
 12101                           tblptru	equ	0xFF8
 12102                           tblptrh	equ	0xFF7
 12103                           tblptrl	equ	0xFF6
 12104                           tablat	equ	0xFF5
 12105                           prodh	equ	0xFF4
 12106                           prodl	equ	0xFF3
 12107                           intcon	equ	0xFF2
 12108                           intcon2	equ	0xFF1
 12109                           postinc0	equ	0xFEE
 12110                           wreg	equ	0xFE8
 12111                           indf1	equ	0xFE7
 12112                           plusw1	equ	0xFE3
 12113                           fsr1h	equ	0xFE2
 12114                           fsr1l	equ	0xFE1
 12115                           indf2	equ	0xFDF
 12116                           postinc2	equ	0xFDE
 12117                           postdec2	equ	0xFDD
 12118                           plusw2	equ	0xFDB
 12119                           fsr2h	equ	0xFDA
 12120                           fsr2l	equ	0xFD9
 12121                           status	equ	0xFD8
 12122                           
 12123 ;; *************** function ___lbmod *****************
 12124 ;; Defined at:
 12125 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbmod.c"
 12126 ;; Parameters:    Size  Location     Type
 12127 ;;  dividend        1    wreg     unsigned char 
 12128 ;;  divisor         1   18[COMRAM] unsigned char 
 12129 ;; Auto vars:     Size  Location     Type
 12130 ;;  dividend        1   19[COMRAM] unsigned char 
 12131 ;;  rem             1   21[COMRAM] unsigned char 
 12132 ;;  counter         1   20[COMRAM] unsigned char 
 12133 ;; Return value:  Size  Location     Type
 12134 ;;                  1    wreg      unsigned char 
 12135 ;; Registers used:
 12136 ;;		wreg, status,2, status,0
 12137 ;; Tracked objects:
 12138 ;;		On entry : 0/0
 12139 ;;		On exit  : 0/0
 12140 ;;		Unchanged: 0/0
 12141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12142 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12143 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12145 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12146 ;;Total ram usage:        4 bytes
 12147 ;; Hardware stack levels used:    1
 12148 ;; Hardware stack levels required when called:    3
 12149 ;; This function calls:
 12150 ;;		Nothing
 12151 ;; This function is called by:
 12152 ;;		_FillBuf
 12153 ;;		_decimal_to_bcd
 12154 ;;		_time_set_min
 12155 ;;		_time_set_hr
 12156 ;;		_time_set_yr
 12157 ;;		_time_set_dt
 12158 ;;		_home_temp
 12159 ;; This function uses a non-reentrant model
 12160 ;;
 12161                           
 12162                           	psect	text60
 12163  0021AC                     __ptext60:
 12164                           	opt stack 0
 12165  0021AC                     ___lbmod:
 12166                           	opt stack 23
 12167                           
 12168                           ;incstack = 0
 12169                           ;___lbmod@dividend stored from wreg
 12170  0021AC  6E14               	movwf	___lbmod@dividend,c
 12171  0021AE  0E08               	movlw	8
 12172  0021B0  6E15               	movwf	___lbmod@counter,c
 12173  0021B2  6A16               	clrf	___lbmod@rem,c
 12174  0021B4                     l5140:
 12175  0021B4  90D8               	bcf	status,0,c
 12176  0021B6  3414               	rlcf	___lbmod@dividend,w,c
 12177  0021B8  3416               	rlcf	___lbmod@rem,w,c
 12178  0021BA  6E16               	movwf	___lbmod@rem,c
 12179  0021BC  90D8               	bcf	status,0,c
 12180  0021BE  3614               	rlcf	___lbmod@dividend,f,c
 12181  0021C0  5013               	movf	___lbmod@divisor,w,c
 12182  0021C2  5C16               	subwf	___lbmod@rem,w,c
 12183  0021C4  E302               	bnc	l5148
 12184  0021C6  5013               	movf	___lbmod@divisor,w,c
 12185  0021C8  5E16               	subwf	___lbmod@rem,f,c
 12186  0021CA                     l5148:
 12187  0021CA  2E15               	decfsz	___lbmod@counter,f,c
 12188  0021CC  D7F3               	goto	l5140
 12189  0021CE  5016               	movf	___lbmod@rem,w,c
 12190  0021D0  0012               	return		;funcret
 12191  0021D2                     __end_of___lbmod:
 12192                           	opt stack 0
 12193                           tosu	equ	0xFFF
 12194                           tosh	equ	0xFFE
 12195                           tosl	equ	0xFFD
 12196                           pclath	equ	0xFFA
 12197                           tblptru	equ	0xFF8
 12198                           tblptrh	equ	0xFF7
 12199                           tblptrl	equ	0xFF6
 12200                           tablat	equ	0xFF5
 12201                           prodh	equ	0xFF4
 12202                           prodl	equ	0xFF3
 12203                           intcon	equ	0xFF2
 12204                           intcon2	equ	0xFF1
 12205                           postinc0	equ	0xFEE
 12206                           wreg	equ	0xFE8
 12207                           indf1	equ	0xFE7
 12208                           plusw1	equ	0xFE3
 12209                           fsr1h	equ	0xFE2
 12210                           fsr1l	equ	0xFE1
 12211                           indf2	equ	0xFDF
 12212                           postinc2	equ	0xFDE
 12213                           postdec2	equ	0xFDD
 12214                           plusw2	equ	0xFDB
 12215                           fsr2h	equ	0xFDA
 12216                           fsr2l	equ	0xFD9
 12217                           status	equ	0xFD8
 12218                           
 12219 ;; *************** function ___lbdiv *****************
 12220 ;; Defined at:
 12221 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbdiv.c"
 12222 ;; Parameters:    Size  Location     Type
 12223 ;;  dividend        1    wreg     unsigned char 
 12224 ;;  divisor         1   14[COMRAM] unsigned char 
 12225 ;; Auto vars:     Size  Location     Type
 12226 ;;  dividend        1   15[COMRAM] unsigned char 
 12227 ;;  quotient        1   17[COMRAM] unsigned char 
 12228 ;;  counter         1   16[COMRAM] unsigned char 
 12229 ;; Return value:  Size  Location     Type
 12230 ;;                  1    wreg      unsigned char 
 12231 ;; Registers used:
 12232 ;;		wreg, status,2, status,0
 12233 ;; Tracked objects:
 12234 ;;		On entry : 0/0
 12235 ;;		On exit  : 0/0
 12236 ;;		Unchanged: 0/0
 12237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12238 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12239 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12241 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12242 ;;Total ram usage:        4 bytes
 12243 ;; Hardware stack levels used:    1
 12244 ;; Hardware stack levels required when called:    3
 12245 ;; This function calls:
 12246 ;;		Nothing
 12247 ;; This function is called by:
 12248 ;;		_FillBuf
 12249 ;;		_decimal_to_bcd
 12250 ;;		_time_set_min
 12251 ;;		_time_set_hr
 12252 ;;		_time_set_yr
 12253 ;;		_time_set_dt
 12254 ;;		_home_temp
 12255 ;; This function uses a non-reentrant model
 12256 ;;
 12257                           
 12258                           	psect	text61
 12259  001FD8                     __ptext61:
 12260                           	opt stack 0
 12261  001FD8                     ___lbdiv:
 12262                           	opt stack 23
 12263                           
 12264                           ;incstack = 0
 12265                           ;___lbdiv@dividend stored from wreg
 12266  001FD8  6E10               	movwf	___lbdiv@dividend,c
 12267  001FDA  6A12               	clrf	___lbdiv@quotient,c
 12268  001FDC  500F               	movf	___lbdiv@divisor,w,c
 12269  001FDE  E014               	bz	l5132
 12270  001FE0  0E01               	movlw	1
 12271  001FE2  6E11               	movwf	___lbdiv@counter,c
 12272  001FE4  D003               	goto	l5120
 12273  001FE6                     l5116:
 12274  001FE6  90D8               	bcf	status,0,c
 12275  001FE8  360F               	rlcf	___lbdiv@divisor,f,c
 12276  001FEA  2A11               	incf	___lbdiv@counter,f,c
 12277  001FEC                     l5120:
 12278  001FEC  AE0F               	btfss	___lbdiv@divisor,7,c
 12279  001FEE  D7FB               	goto	l5116
 12280  001FF0                     l5122:
 12281  001FF0  90D8               	bcf	status,0,c
 12282  001FF2  3612               	rlcf	___lbdiv@quotient,f,c
 12283  001FF4  500F               	movf	___lbdiv@divisor,w,c
 12284  001FF6  5C10               	subwf	___lbdiv@dividend,w,c
 12285  001FF8  E303               	bnc	l5128
 12286  001FFA  500F               	movf	___lbdiv@divisor,w,c
 12287  001FFC  5E10               	subwf	___lbdiv@dividend,f,c
 12288  001FFE  8012               	bsf	___lbdiv@quotient,0,c
 12289  002000                     l5128:
 12290  002000  90D8               	bcf	status,0,c
 12291  002002  320F               	rrcf	___lbdiv@divisor,f,c
 12292  002004  2E11               	decfsz	___lbdiv@counter,f,c
 12293  002006  D7F4               	goto	l5122
 12294  002008                     l5132:
 12295  002008  5012               	movf	___lbdiv@quotient,w,c
 12296  00200A  0012               	return		;funcret
 12297  00200C                     __end_of___lbdiv:
 12298                           	opt stack 0
 12299                           tosu	equ	0xFFF
 12300                           tosh	equ	0xFFE
 12301                           tosl	equ	0xFFD
 12302                           pclath	equ	0xFFA
 12303                           tblptru	equ	0xFF8
 12304                           tblptrh	equ	0xFF7
 12305                           tblptrl	equ	0xFF6
 12306                           tablat	equ	0xFF5
 12307                           prodh	equ	0xFF4
 12308                           prodl	equ	0xFF3
 12309                           intcon	equ	0xFF2
 12310                           intcon2	equ	0xFF1
 12311                           postinc0	equ	0xFEE
 12312                           wreg	equ	0xFE8
 12313                           indf1	equ	0xFE7
 12314                           plusw1	equ	0xFE3
 12315                           fsr1h	equ	0xFE2
 12316                           fsr1l	equ	0xFE1
 12317                           indf2	equ	0xFDF
 12318                           postinc2	equ	0xFDE
 12319                           postdec2	equ	0xFDD
 12320                           plusw2	equ	0xFDB
 12321                           fsr2h	equ	0xFDA
 12322                           fsr2l	equ	0xFD9
 12323                           status	equ	0xFD8
 12324                           
 12325 ;; *************** function _RTOS_SetTask *****************
 12326 ;; Defined at:
 12327 ;;		line 22 in file "dispatcher.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 12330 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
 12331 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
 12332 ;;		 -> GetTime(1), key_press(1), time_led(1), 
 12333 ;;  taskDelay       2   16[COMRAM] unsigned int 
 12334 ;;  taskPeriod      2   18[COMRAM] unsigned int 
 12335 ;; Auto vars:     Size  Location     Type
 12336 ;;  i               1   22[COMRAM] unsigned char 
 12337 ;; Return value:  Size  Location     Type
 12338 ;;                  1    wreg      void 
 12339 ;; Registers used:
 12340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12341 ;; Tracked objects:
 12342 ;;		On entry : 0/0
 12343 ;;		On exit  : 0/0
 12344 ;;		Unchanged: 0/0
 12345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12346 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12348 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12349 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12350 ;;Total ram usage:        9 bytes
 12351 ;; Hardware stack levels used:    1
 12352 ;; Hardware stack levels required when called:    3
 12353 ;; This function calls:
 12354 ;;		Nothing
 12355 ;; This function is called by:
 12356 ;;		_main
 12357 ;;		_time_set_min
 12358 ;;		_time_set_hr
 12359 ;;		_time_set_yr
 12360 ;;		_time_set_mt
 12361 ;;		_time_set_dt
 12362 ;;		_time_set_dy
 12363 ;;		_home_temp
 12364 ;;		_time_led
 12365 ;; This function uses a non-reentrant model
 12366 ;;
 12367                           
 12368                           	psect	text62
 12369  001830                     __ptext62:
 12370                           	opt stack 0
 12371  001830                     _RTOS_SetTask:
 12372                           	opt stack 27
 12373                           
 12374                           ;dispatcher.c: 24: uint8_t i;
 12375                           ;dispatcher.c: 26: if(!taskFunc) return;
 12376                           
 12377                           ;incstack = 0
 12378  001830  500F               	movf	RTOS_SetTask@taskFunc,w,c
 12379  001832  1010               	iorwf	RTOS_SetTask@taskFunc+1,w,c
 12380  001834  E101               	bnz	l227
 12381  001836  0012               	return	
 12382  001838                     l227:
 12383                           
 12384                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 12385  001838  6A17               	clrf	RTOS_SetTask@i,c
 12386  00183A  D018               	goto	l5388
 12387  00183C                     l5376:
 12388                           
 12389                           ;dispatcher.c: 28: {
 12390                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 12391  00183C  5017               	movf	RTOS_SetTask@i,w,c
 12392  00183E  ECD5  F00A         	call	PL22	;call to abstracted procedure
 12393  001842  500F               	movf	RTOS_SetTask@taskFunc,w,c	;volatile
 12394  001844  18DE               	xorwf	postinc2,w,c
 12395  001846  E111               	bnz	l5386
 12396  001848  5010               	movf	RTOS_SetTask@taskFunc+1,w,c	;volatile
 12397  00184A  18DE               	xorwf	postinc2,w,c
 12398  00184C  E10E               	bnz	l5386
 12399                           
 12400                           ;dispatcher.c: 30: {
 12401                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 12402  00184E  9EF2               	bcf	intcon,7,c	;volatile
 12403                           
 12404                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 12405  001850  5017               	movf	RTOS_SetTask@i,w,c
 12406  001852  EC97  F008         	call	PL16	;call to abstracted procedure
 12407  001856  D82A               	call	PL118	;call to abstracted procedure
 12408                           
 12409                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 12410  001858  5017               	movf	RTOS_SetTask@i,w,c
 12411  00185A  ECE7  F00A         	call	PL26	;call to abstracted procedure
 12412  00185E  D821               	call	PL90	;call to abstracted procedure
 12413                           
 12414                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 12415  001860  5017               	movf	RTOS_SetTask@i,w,c
 12416  001862  ECDD  F00A         	call	PL24	;call to abstracted procedure
 12417                           
 12418                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 12419  001866  8EF2               	bsf	intcon,7,c	;volatile
 12420  001868  0C00               	retlw	0
 12421  00186A                     l5386:
 12422  00186A  2A17               	incf	RTOS_SetTask@i,f,c
 12423  00186C                     l5388:
 12424  00186C  5068               	movf	_arrayTail,w,c	;volatile
 12425  00186E  5C17               	subwf	RTOS_SetTask@i,w,c
 12426  001870  E3E5               	bnc	l5376
 12427                           
 12428                           ;dispatcher.c: 39: }
 12429                           ;dispatcher.c: 40: }
 12430                           ;dispatcher.c: 42: if (arrayTail < 15)
 12431  001872  0E0F               	movlw	15
 12432  001874  6068               	cpfslt	_arrayTail,c	;volatile
 12433  001876  0C0F               	retlw	15
 12434                           
 12435                           ;dispatcher.c: 43: {
 12436                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 12437  001878  9EF2               	bcf	intcon,7,c	;volatile
 12438                           
 12439                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 12440  00187A  5068               	movf	_arrayTail,w,c	;volatile
 12441  00187C  ECD5  F00A         	call	PL22	;call to abstracted procedure
 12442  001880  C00F  FFDE         	movff	RTOS_SetTask@taskFunc,postinc2	;volatile
 12443  001884  C010  FFDD         	movff	RTOS_SetTask@taskFunc+1,postdec2	;volatile
 12444                           
 12445                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 12446  001888  5068               	movf	_arrayTail,w,c	;volatile
 12447  00188A  EC97  F008         	call	PL16	;call to abstracted procedure
 12448  00188E  D80E               	call	PL118	;call to abstracted procedure
 12449                           
 12450                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 12451  001890  5068               	movf	_arrayTail,w,c	;volatile
 12452  001892  ECE7  F00A         	call	PL26	;call to abstracted procedure
 12453  001896  D805               	call	PL90	;call to abstracted procedure
 12454                           
 12455                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 12456  001898  5068               	movf	_arrayTail,w,c	;volatile
 12457  00189A  ECDD  F00A         	call	PL24	;call to abstracted procedure
 12458                           
 12459                           ;dispatcher.c: 51: arrayTail++;
 12460                           
 12461                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 12462  00189E  EFF9  F00A         	goto	PL158	;call to abstracted procedure
 12463  0018A2                     __end_of_RTOS_SetTask:
 12464                           	opt stack 0
 12465  0018A2                     PL90:
 12466                           	opt stack 27
 12467  0018A2  C013  FFDE         	movff	RTOS_SetTask@taskPeriod,postinc2
 12468  0018A6  C014  FFDD         	movff	RTOS_SetTask@taskPeriod+1,postdec2
 12469  0018AA  0012               	return	
 12470  0018AC                     __end_ofPL90:
 12471                           	opt stack 0
 12472  0018AC                     PL118:
 12473                           	opt stack 27
 12474  0018AC  C011  FFDE         	movff	RTOS_SetTask@taskDelay,postinc2
 12475  0018B0  C012  FFDD         	movff	RTOS_SetTask@taskDelay+1,postdec2
 12476  0018B4  0012               	return	
 12477  0018B6                     __end_ofPL118:
 12478                           	opt stack 0
 12479                           tosu	equ	0xFFF
 12480                           tosh	equ	0xFFE
 12481                           tosl	equ	0xFFD
 12482                           pclath	equ	0xFFA
 12483                           tblptru	equ	0xFF8
 12484                           tblptrh	equ	0xFF7
 12485                           tblptrl	equ	0xFF6
 12486                           tablat	equ	0xFF5
 12487                           prodh	equ	0xFF4
 12488                           prodl	equ	0xFF3
 12489                           intcon	equ	0xFF2
 12490                           intcon2	equ	0xFF1
 12491                           postinc0	equ	0xFEE
 12492                           wreg	equ	0xFE8
 12493                           indf1	equ	0xFE7
 12494                           plusw1	equ	0xFE3
 12495                           fsr1h	equ	0xFE2
 12496                           fsr1l	equ	0xFE1
 12497                           indf2	equ	0xFDF
 12498                           postinc2	equ	0xFDE
 12499                           postdec2	equ	0xFDD
 12500                           plusw2	equ	0xFDB
 12501                           fsr2h	equ	0xFDA
 12502                           fsr2l	equ	0xFD9
 12503                           status	equ	0xFD8
 12504                           
 12505 ;; *************** function _RTOS_DeleteTask *****************
 12506 ;; Defined at:
 12507 ;;		line 59 in file "dispatcher.c"
 12508 ;; Parameters:    Size  Location     Type
 12509 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 12510 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
 12511 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
 12512 ;;		 -> GetTime(1), key_press(1), time_led(1), 
 12513 ;; Auto vars:     Size  Location     Type
 12514 ;;  i               1   22[COMRAM] unsigned char 
 12515 ;; Return value:  Size  Location     Type
 12516 ;;                  1    wreg      void 
 12517 ;; Registers used:
 12518 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12524 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12526 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12527 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12528 ;;Total ram usage:        9 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    3
 12531 ;; This function calls:
 12532 ;;		Nothing
 12533 ;; This function is called by:
 12534 ;;		_RTOS_DispatchTask
 12535 ;;		_time_set_min
 12536 ;;		_time_set_hr
 12537 ;;		_time_set_yr
 12538 ;;		_time_set_mt
 12539 ;;		_time_set_dt
 12540 ;;		_time_set_dy
 12541 ;;		_home_temp
 12542 ;;		_time_led
 12543 ;; This function uses a non-reentrant model
 12544 ;;
 12545                           
 12546                           	psect	text63
 12547  001720                     __ptext63:
 12548                           	opt stack 0
 12549  001720                     _RTOS_DeleteTask:
 12550                           	opt stack 25
 12551                           
 12552                           ;dispatcher.c: 61: uint8_t i;
 12553                           ;dispatcher.c: 63: for (i=0; i<arrayTail; i++)
 12554                           
 12555                           ;incstack = 0
 12556  001720  6A17               	clrf	RTOS_DeleteTask@i,c
 12557  001722  D03F               	goto	l5418
 12558  001724                     l5402:
 12559                           
 12560                           ;dispatcher.c: 64: {
 12561                           ;dispatcher.c: 65: if(TaskArray[i].pFunc == taskFunc)
 12562  001724  5017               	movf	RTOS_DeleteTask@i,w,c
 12563  001726  ECD5  F00A         	call	PL22	;call to abstracted procedure
 12564  00172A  500F               	movf	RTOS_DeleteTask@taskFunc,w,c	;volatile
 12565  00172C  18DE               	xorwf	postinc2,w,c
 12566  00172E  E138               	bnz	l5416
 12567  001730  5010               	movf	RTOS_DeleteTask@taskFunc+1,w,c	;volatile
 12568  001732  18DE               	xorwf	postinc2,w,c
 12569  001734  E135               	bnz	l5416
 12570                           
 12571                           ;dispatcher.c: 66: {
 12572                           ;dispatcher.c: 68: (INTCONbits.GIE = 0);
 12573  001736  9EF2               	bcf	intcon,7,c	;volatile
 12574                           
 12575                           ;dispatcher.c: 69: if(i != (arrayTail - 1))
 12576  001738  5017               	movf	RTOS_DeleteTask@i,w,c
 12577  00173A  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 12578  00173C  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 12579  00173E  6813               	setf	(??_RTOS_DeleteTask+2)& (0+255),c
 12580  001740  6814               	setf	(??_RTOS_DeleteTask+3)& (0+255),c
 12581  001742  5068               	movf	_arrayTail,w,c	;volatile
 12582  001744  6E15               	movwf	(??_RTOS_DeleteTask+4)& (0+255),c
 12583  001746  6A16               	clrf	(??_RTOS_DeleteTask+5)& (0+255),c
 12584  001748  5013               	movf	??_RTOS_DeleteTask+2,w,c
 12585  00174A  2615               	addwf	??_RTOS_DeleteTask+4,f,c
 12586  00174C  5014               	movf	??_RTOS_DeleteTask+3,w,c
 12587  00174E  2216               	addwfc	??_RTOS_DeleteTask+5,f,c
 12588  001750  5011               	movf	??_RTOS_DeleteTask,w,c
 12589  001752  1815               	xorwf	??_RTOS_DeleteTask+4,w,c
 12590  001754  E103               	bnz	u4210
 12591  001756  5012               	movf	??_RTOS_DeleteTask+1,w,c
 12592  001758  1816               	xorwf	??_RTOS_DeleteTask+5,w,c
 12593  00175A  E01F               	bz	l5410
 12594  00175C                     u4210:
 12595                           
 12596                           ;dispatcher.c: 70: {
 12597                           ;dispatcher.c: 71: TaskArray[i] = TaskArray[arrayTail - 1];
 12598  00175C  5068               	movf	_arrayTail,w,c	;volatile
 12599  00175E  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 12600  001760  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 12601  001762  90D8               	bcf	status,0,c
 12602  001764  3611               	rlcf	??_RTOS_DeleteTask,f,c
 12603  001766  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 12604  001768  90D8               	bcf	status,0,c
 12605  00176A  3611               	rlcf	??_RTOS_DeleteTask,f,c
 12606  00176C  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 12607  00176E  90D8               	bcf	status,0,c
 12608  001770  3611               	rlcf	??_RTOS_DeleteTask,f,c
 12609  001772  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 12610  001774  0EF8               	movlw	low (_TaskArray+65528)
 12611  001776  2411               	addwf	??_RTOS_DeleteTask,w,c
 12612  001778  6ED9               	movwf	fsr2l,c
 12613  00177A  0E00               	movlw	high (_TaskArray+65528)
 12614  00177C  2012               	addwfc	??_RTOS_DeleteTask+1,w,c
 12615  00177E  6EDA               	movwf	fsr2h,c
 12616  001780  5017               	movf	RTOS_DeleteTask@i,w,c
 12617  001782  0D08               	mullw	8
 12618  001784  0E00               	movlw	low _TaskArray
 12619  001786  24F3               	addwf	prodl,w,c
 12620  001788  6EE1               	movwf	fsr1l,c
 12621  00178A  0E01               	movlw	high _TaskArray
 12622  00178C  20F4               	addwfc	prodh,w,c
 12623  00178E  6EE2               	movwf	fsr1h,c
 12624  001790  0E07               	movlw	7
 12625  001792                     u4221:
 12626  001792  CFDB FFE3          	movff	plusw2,plusw1
 12627  001796  06E8               	decf	wreg,f,c
 12628  001798  E2FC               	bc	u4221
 12629  00179A                     l5410:
 12630                           
 12631                           ;dispatcher.c: 72: }
 12632                           ;dispatcher.c: 73: arrayTail--;
 12633  00179A  0668               	decf	_arrayTail,f,c	;volatile
 12634                           
 12635                           ;dispatcher.c: 74: (INTCONbits.GIE = 1);
 12636  00179C  8EF2               	bsf	intcon,7,c	;volatile
 12637  00179E  0012               	return	
 12638  0017A0                     l5416:
 12639  0017A0  2A17               	incf	RTOS_DeleteTask@i,f,c
 12640  0017A2                     l5418:
 12641  0017A2  5068               	movf	_arrayTail,w,c	;volatile
 12642  0017A4  5C17               	subwf	RTOS_DeleteTask@i,w,c
 12643  0017A6  E3BE               	bnc	l5402
 12644  0017A8  0012               	return		;funcret
 12645  0017AA                     __end_of_RTOS_DeleteTask:
 12646                           	opt stack 0
 12647                           tosu	equ	0xFFF
 12648                           tosh	equ	0xFFE
 12649                           tosl	equ	0xFFD
 12650                           pclath	equ	0xFFA
 12651                           tblptru	equ	0xFF8
 12652                           tblptrh	equ	0xFF7
 12653                           tblptrl	equ	0xFF6
 12654                           tablat	equ	0xFF5
 12655                           prodh	equ	0xFF4
 12656                           prodl	equ	0xFF3
 12657                           intcon	equ	0xFF2
 12658                           intcon2	equ	0xFF1
 12659                           postinc0	equ	0xFEE
 12660                           wreg	equ	0xFE8
 12661                           indf1	equ	0xFE7
 12662                           plusw1	equ	0xFE3
 12663                           fsr1h	equ	0xFE2
 12664                           fsr1l	equ	0xFE1
 12665                           indf2	equ	0xFDF
 12666                           postinc2	equ	0xFDE
 12667                           postdec2	equ	0xFDD
 12668                           plusw2	equ	0xFDB
 12669                           fsr2h	equ	0xFDA
 12670                           fsr2l	equ	0xFD9
 12671                           status	equ	0xFD8
 12672                           
 12673 ;; *************** function _getTime *****************
 12674 ;; Defined at:
 12675 ;;		line 46 in file "ds3231.c"
 12676 ;; Parameters:    Size  Location     Type
 12677 ;;  p3              1   19[COMRAM] PTR unsigned char 
 12678 ;;		 -> TTime(7), 
 12679 ;;  p2              1   20[COMRAM] PTR unsigned char 
 12680 ;;		 -> TTime(7), 
 12681 ;;  p1              1   21[COMRAM] PTR unsigned char 
 12682 ;;		 -> TTime(7), 
 12683 ;; Auto vars:     Size  Location     Type
 12684 ;;		None
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      void 
 12687 ;; Registers used:
 12688 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12694 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12698 ;;Total ram usage:        3 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; Hardware stack levels required when called:    6
 12701 ;; This function calls:
 12702 ;;		_DS3231_Read
 12703 ;;		_bcd_to_decimal
 12704 ;; This function is called by:
 12705 ;;		_GetTime
 12706 ;;		_home_temp
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           	psect	text64
 12711  001BC8                     __ptext64:
 12712                           	opt stack 0
 12713  001BC8                     _getTime:
 12714                           	opt stack 22
 12715                           
 12716                           ;ds3231.c: 48: *p1 = DS3231_Read(0x00);
 12717                           
 12718                           ;incstack = 0
 12719  001BC8  5016               	movf	getTime@p1,w,c
 12720  001BCA  6ED9               	movwf	fsr2l,c
 12721  001BCC  6ADA               	clrf	fsr2h,c
 12722  001BCE  0E00               	movlw	0
 12723  001BD0  ECAF  F010         	call	_DS3231_Read
 12724  001BD4  6EDF               	movwf	indf2,c
 12725                           
 12726                           ;ds3231.c: 49: *p1 = bcd_to_decimal(*p1);
 12727  001BD6  5016               	movf	getTime@p1,w,c
 12728  001BD8  6ED9               	movwf	fsr2l,c
 12729  001BDA  6ADA               	clrf	fsr2h,c
 12730  001BDC  5016               	movf	getTime@p1,w,c
 12731  001BDE  EC89  F00C         	call	PL76	;call to abstracted procedure
 12732  001BE2  EC8D  F011         	call	_bcd_to_decimal
 12733                           
 12734                           ;ds3231.c: 50: *p2 = DS3231_Read(0x01);
 12735  001BE6  D81B               	call	PL134	;call to abstracted procedure
 12736  001BE8  0E01               	movlw	1
 12737  001BEA  ECAF  F010         	call	_DS3231_Read
 12738                           
 12739                           ;ds3231.c: 51: *p2 = bcd_to_decimal(*p2);
 12740  001BEE  D817               	call	PL134	;call to abstracted procedure
 12741  001BF0  5015               	movf	getTime@p2,w,c
 12742  001BF2  EC89  F00C         	call	PL76	;call to abstracted procedure
 12743  001BF6  EC8D  F011         	call	_bcd_to_decimal
 12744                           
 12745                           ;ds3231.c: 52: *p3 = (0x3F & DS3231_Read(0x02));
 12746  001BFA  D80C               	call	PL86	;call to abstracted procedure
 12747  001BFC  0E02               	movlw	2
 12748  001BFE  ECAF  F010         	call	_DS3231_Read
 12749  001C02  0B3F               	andlw	63
 12750                           
 12751                           ;ds3231.c: 53: *p3 = bcd_to_decimal(*p3);
 12752  001C04  D807               	call	PL86	;call to abstracted procedure
 12753  001C06  5014               	movf	getTime@p3,w,c
 12754  001C08  EC89  F00C         	call	PL76	;call to abstracted procedure
 12755  001C0C  EC8D  F011         	call	_bcd_to_decimal
 12756  001C10  6EDF               	movwf	indf2,c
 12757  001C12  0012               	return		;funcret
 12758  001C14                     __end_of_getTime:
 12759                           	opt stack 0
 12760  001C14                     PL86:
 12761                           	opt stack 22
 12762  001C14  6EDF               	movwf	indf2,c
 12763  001C16  5014               	movf	getTime@p3,w,c
 12764  001C18  6ED9               	movwf	fsr2l,c
 12765  001C1A  6ADA               	clrf	fsr2h,c
 12766  001C1C  0012               	return	
 12767  001C1E                     __end_ofPL86:
 12768                           	opt stack 0
 12769  001C1E                     PL134:
 12770                           	opt stack 22
 12771  001C1E  6EDF               	movwf	indf2,c
 12772  001C20  5015               	movf	getTime@p2,w,c
 12773  001C22  6ED9               	movwf	fsr2l,c
 12774  001C24  6ADA               	clrf	fsr2h,c
 12775  001C26  0012               	return	
 12776  001C28                     __end_ofPL134:
 12777                           	opt stack 0
 12778                           tosu	equ	0xFFF
 12779                           tosh	equ	0xFFE
 12780                           tosl	equ	0xFFD
 12781                           pclath	equ	0xFFA
 12782                           tblptru	equ	0xFF8
 12783                           tblptrh	equ	0xFF7
 12784                           tblptrl	equ	0xFF6
 12785                           tablat	equ	0xFF5
 12786                           prodh	equ	0xFF4
 12787                           prodl	equ	0xFF3
 12788                           intcon	equ	0xFF2
 12789                           intcon2	equ	0xFF1
 12790                           postinc0	equ	0xFEE
 12791                           wreg	equ	0xFE8
 12792                           indf1	equ	0xFE7
 12793                           plusw1	equ	0xFE3
 12794                           fsr1h	equ	0xFE2
 12795                           fsr1l	equ	0xFE1
 12796                           indf2	equ	0xFDF
 12797                           postinc2	equ	0xFDE
 12798                           postdec2	equ	0xFDD
 12799                           plusw2	equ	0xFDB
 12800                           fsr2h	equ	0xFDA
 12801                           fsr2l	equ	0xFD9
 12802                           status	equ	0xFD8
 12803                           
 12804 ;; *************** function _getDate *****************
 12805 ;; Defined at:
 12806 ;;		line 59 in file "ds3231.c"
 12807 ;; Parameters:    Size  Location     Type
 12808 ;;  p4              1   19[COMRAM] PTR unsigned char 
 12809 ;;		 -> TTime(7), 
 12810 ;;  p3              1   20[COMRAM] PTR unsigned char 
 12811 ;;		 -> TTime(7), 
 12812 ;;  p2              1   21[COMRAM] PTR unsigned char 
 12813 ;;		 -> TTime(7), 
 12814 ;;  p1              1   22[COMRAM] PTR unsigned char 
 12815 ;;		 -> TTime(7), 
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;		None
 12818 ;; Return value:  Size  Location     Type
 12819 ;;                  1    wreg      void 
 12820 ;; Registers used:
 12821 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12822 ;; Tracked objects:
 12823 ;;		On entry : 0/0
 12824 ;;		On exit  : 0/0
 12825 ;;		Unchanged: 0/0
 12826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12827 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12830 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12831 ;;Total ram usage:        4 bytes
 12832 ;; Hardware stack levels used:    1
 12833 ;; Hardware stack levels required when called:    6
 12834 ;; This function calls:
 12835 ;;		_DS3231_Read
 12836 ;;		_bcd_to_decimal
 12837 ;; This function is called by:
 12838 ;;		_GetTime
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           	psect	text65
 12843  0018B6                     __ptext65:
 12844                           	opt stack 0
 12845  0018B6                     _getDate:
 12846                           	opt stack 22
 12847                           
 12848                           ;ds3231.c: 61: *p1 = DS3231_Read(0x06);
 12849                           
 12850                           ;incstack = 0
 12851  0018B6  5017               	movf	getDate@p1,w,c
 12852  0018B8  6ED9               	movwf	fsr2l,c
 12853  0018BA  6ADA               	clrf	fsr2h,c
 12854  0018BC  0E06               	movlw	6
 12855  0018BE  ECAF  F010         	call	_DS3231_Read
 12856  0018C2  6EDF               	movwf	indf2,c
 12857                           
 12858                           ;ds3231.c: 62: *p1 = bcd_to_decimal(*p1);
 12859  0018C4  5017               	movf	getDate@p1,w,c
 12860  0018C6  6ED9               	movwf	fsr2l,c
 12861  0018C8  6ADA               	clrf	fsr2h,c
 12862  0018CA  5017               	movf	getDate@p1,w,c
 12863  0018CC  D822               	call	PL76	;call to abstracted procedure
 12864  0018CE  EC8D  F011         	call	_bcd_to_decimal
 12865                           
 12866                           ;ds3231.c: 63: *p2 = (0x1F & DS3231_Read(0x05));
 12867  0018D2  D82D               	call	PL114	;call to abstracted procedure
 12868  0018D4  0E05               	movlw	5
 12869  0018D6  ECAF  F010         	call	_DS3231_Read
 12870  0018DA  0B1F               	andlw	31
 12871                           
 12872                           ;ds3231.c: 64: *p2 = bcd_to_decimal(*p2);
 12873  0018DC  D828               	call	PL114	;call to abstracted procedure
 12874  0018DE  5016               	movf	getDate@p2,w,c
 12875  0018E0  D818               	call	PL76	;call to abstracted procedure
 12876  0018E2  EC8D  F011         	call	_bcd_to_decimal
 12877                           
 12878                           ;ds3231.c: 65: *p3 = (0x3F & DS3231_Read(0x04));
 12879  0018E6  D819               	call	PL102	;call to abstracted procedure
 12880  0018E8  0E04               	movlw	4
 12881  0018EA  ECAF  F010         	call	_DS3231_Read
 12882  0018EE  0B3F               	andlw	63
 12883                           
 12884                           ;ds3231.c: 66: *p3 = bcd_to_decimal(*p3);
 12885  0018F0  D814               	call	PL102	;call to abstracted procedure
 12886  0018F2  5015               	movf	getDate@p3,w,c
 12887  0018F4  D80E               	call	PL76	;call to abstracted procedure
 12888  0018F6  EC8D  F011         	call	_bcd_to_decimal
 12889                           
 12890                           ;ds3231.c: 67: *p4 = (0x07 & DS3231_Read(0x03));
 12891  0018FA  D814               	call	PL104	;call to abstracted procedure
 12892  0018FC  0E03               	movlw	3
 12893  0018FE  ECAF  F010         	call	_DS3231_Read
 12894  001902  0B07               	andlw	7
 12895                           
 12896                           ;ds3231.c: 68: *p4 = bcd_to_decimal(*p4);
 12897  001904  D80F               	call	PL104	;call to abstracted procedure
 12898  001906  5014               	movf	getDate@p4,w,c
 12899  001908  D804               	call	PL76	;call to abstracted procedure
 12900  00190A  EC8D  F011         	call	_bcd_to_decimal
 12901  00190E  6EDF               	movwf	indf2,c
 12902  001910  0012               	return		;funcret
 12903  001912                     __end_of_getDate:
 12904                           	opt stack 0
 12905  001912                     PL76:
 12906                           	opt stack 22
 12907  001912  6EE1               	movwf	fsr1l,c
 12908  001914  6AE2               	clrf	fsr1h,c
 12909  001916  50E7               	movf	indf1,w,c
 12910  001918  0012               	return	
 12911  00191A                     __end_ofPL76:
 12912                           	opt stack 0
 12913  00191A                     PL102:
 12914                           	opt stack 22
 12915  00191A  6EDF               	movwf	indf2,c
 12916  00191C  5015               	movf	getDate@p3,w,c
 12917  00191E  6ED9               	movwf	fsr2l,c
 12918  001920  6ADA               	clrf	fsr2h,c
 12919  001922  0012               	return	
 12920  001924                     __end_ofPL102:
 12921                           	opt stack 0
 12922  001924                     PL104:
 12923                           	opt stack 22
 12924  001924  6EDF               	movwf	indf2,c
 12925  001926  5014               	movf	getDate@p4,w,c
 12926  001928  6ED9               	movwf	fsr2l,c
 12927  00192A  6ADA               	clrf	fsr2h,c
 12928  00192C  0012               	return	
 12929  00192E                     __end_ofPL104:
 12930                           	opt stack 0
 12931  00192E                     PL114:
 12932                           	opt stack 22
 12933  00192E  6EDF               	movwf	indf2,c
 12934  001930  5016               	movf	getDate@p2,w,c
 12935  001932  6ED9               	movwf	fsr2l,c
 12936  001934  6ADA               	clrf	fsr2h,c
 12937  001936  0012               	return	
 12938  001938                     __end_ofPL114:
 12939                           	opt stack 0
 12940                           tosu	equ	0xFFF
 12941                           tosh	equ	0xFFE
 12942                           tosl	equ	0xFFD
 12943                           pclath	equ	0xFFA
 12944                           tblptru	equ	0xFF8
 12945                           tblptrh	equ	0xFF7
 12946                           tblptrl	equ	0xFF6
 12947                           tablat	equ	0xFF5
 12948                           prodh	equ	0xFF4
 12949                           prodl	equ	0xFF3
 12950                           intcon	equ	0xFF2
 12951                           intcon2	equ	0xFF1
 12952                           postinc0	equ	0xFEE
 12953                           wreg	equ	0xFE8
 12954                           indf1	equ	0xFE7
 12955                           plusw1	equ	0xFE3
 12956                           fsr1h	equ	0xFE2
 12957                           fsr1l	equ	0xFE1
 12958                           indf2	equ	0xFDF
 12959                           postinc2	equ	0xFDE
 12960                           postdec2	equ	0xFDD
 12961                           plusw2	equ	0xFDB
 12962                           fsr2h	equ	0xFDA
 12963                           fsr2l	equ	0xFD9
 12964                           status	equ	0xFD8
 12965                           
 12966 ;; *************** function _bcd_to_decimal *****************
 12967 ;; Defined at:
 12968 ;;		line 4 in file "ds3231.c"
 12969 ;; Parameters:    Size  Location     Type
 12970 ;;  d               1    wreg     unsigned char 
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;  d               1   15[COMRAM] unsigned char 
 12973 ;; Return value:  Size  Location     Type
 12974 ;;                  1    wreg      unsigned char 
 12975 ;; Registers used:
 12976 ;;		wreg, status,2, status,0, prodl, prodh
 12977 ;; Tracked objects:
 12978 ;;		On entry : 0/0
 12979 ;;		On exit  : 0/0
 12980 ;;		Unchanged: 0/0
 12981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12985 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12986 ;;Total ram usage:        2 bytes
 12987 ;; Hardware stack levels used:    1
 12988 ;; Hardware stack levels required when called:    3
 12989 ;; This function calls:
 12990 ;;		Nothing
 12991 ;; This function is called by:
 12992 ;;		_getTime
 12993 ;;		_getDate
 12994 ;; This function uses a non-reentrant model
 12995 ;;
 12996                           
 12997                           	psect	text66
 12998  00231A                     __ptext66:
 12999                           	opt stack 0
 13000  00231A                     _bcd_to_decimal:
 13001                           	opt stack 24
 13002                           
 13003                           ;incstack = 0
 13004                           ;bcd_to_decimal@d stored from wreg
 13005  00231A  6E10               	movwf	bcd_to_decimal@d,c
 13006                           
 13007                           ;ds3231.c: 6: return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10));
 13008  00231C  C010  F00F         	movff	bcd_to_decimal@d,??_bcd_to_decimal
 13009  002320  0E0F               	movlw	15
 13010  002322  160F               	andwf	??_bcd_to_decimal,f,c
 13011  002324  3810               	swapf	bcd_to_decimal@d,w,c
 13012  002326  0B0F               	andlw	15
 13013  002328  0D0A               	mullw	10
 13014  00232A  50F3               	movf	prodl,w,c
 13015  00232C  240F               	addwf	??_bcd_to_decimal,w,c
 13016  00232E  0012               	return		;funcret
 13017  002330                     __end_of_bcd_to_decimal:
 13018                           	opt stack 0
 13019                           tosu	equ	0xFFF
 13020                           tosh	equ	0xFFE
 13021                           tosl	equ	0xFFD
 13022                           pclath	equ	0xFFA
 13023                           tblptru	equ	0xFF8
 13024                           tblptrh	equ	0xFF7
 13025                           tblptrl	equ	0xFF6
 13026                           tablat	equ	0xFF5
 13027                           prodh	equ	0xFF4
 13028                           prodl	equ	0xFF3
 13029                           intcon	equ	0xFF2
 13030                           intcon2	equ	0xFF1
 13031                           postinc0	equ	0xFEE
 13032                           wreg	equ	0xFE8
 13033                           indf1	equ	0xFE7
 13034                           plusw1	equ	0xFE3
 13035                           fsr1h	equ	0xFE2
 13036                           fsr1l	equ	0xFE1
 13037                           indf2	equ	0xFDF
 13038                           postinc2	equ	0xFDE
 13039                           postdec2	equ	0xFDD
 13040                           plusw2	equ	0xFDB
 13041                           fsr2h	equ	0xFDA
 13042                           fsr2l	equ	0xFD9
 13043                           status	equ	0xFD8
 13044                           
 13045 ;; *************** function _DS3231_Read *****************
 13046 ;; Defined at:
 13047 ;;		line 16 in file "ds3231.c"
 13048 ;; Parameters:    Size  Location     Type
 13049 ;;  address         1    wreg     unsigned char 
 13050 ;; Auto vars:     Size  Location     Type
 13051 ;;  address         1   17[COMRAM] unsigned char 
 13052 ;;  value           1   18[COMRAM] unsigned char 
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      unsigned char 
 13055 ;; Registers used:
 13056 ;;		wreg, status,2, status,0, cstack
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;Total ram usage:        2 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    5
 13069 ;; This function calls:
 13070 ;;		_I2C_read_noack
 13071 ;;		_I2C_restart
 13072 ;;		_I2C_start
 13073 ;;		_I2C_stop
 13074 ;;		_I2C_write
 13075 ;; This function is called by:
 13076 ;;		_getTime
 13077 ;;		_getDate
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           	psect	text67
 13082  00215E                     __ptext67:
 13083                           	opt stack 0
 13084  00215E                     _DS3231_Read:
 13085                           	opt stack 22
 13086                           
 13087                           ;incstack = 0
 13088                           ;DS3231_Read@address stored from wreg
 13089  00215E  6E12               	movwf	DS3231_Read@address,c
 13090                           
 13091                           ;ds3231.c: 19: I2C_start(0xD0,0);
 13092  002160  6A10               	clrf	I2C_start@_R_W,c
 13093  002162  0ED0               	movlw	208
 13094  002164  EC35  F010         	call	_I2C_start
 13095                           
 13096                           ;ds3231.c: 20: I2C_write(address);
 13097  002168  5012               	movf	DS3231_Read@address,w,c
 13098  00216A  EC59  F011         	call	_I2C_write
 13099                           
 13100                           ;ds3231.c: 21: I2C_restart(0xD0,1);
 13101  00216E  0E01               	movlw	1
 13102  002170  6E10               	movwf	I2C_restart@_R_W,c
 13103  002172  0ED0               	movlw	208
 13104  002174  EC4A  F010         	call	_I2C_restart
 13105                           
 13106                           ;ds3231.c: 22: value = I2C_read_noack();
 13107  002178  ECB4  F011         	call	_I2C_read_noack	;wreg free
 13108  00217C  6E13               	movwf	DS3231_Read@value,c
 13109                           
 13110                           ;ds3231.c: 23: I2C_stop();
 13111  00217E  ECE4  F011         	call	_I2C_stop	;wreg free
 13112                           
 13113                           ;ds3231.c: 24: return value;
 13114  002182  5013               	movf	DS3231_Read@value,w,c
 13115  002184  0012               	return		;funcret
 13116  002186                     __end_of_DS3231_Read:
 13117                           	opt stack 0
 13118                           tosu	equ	0xFFF
 13119                           tosh	equ	0xFFE
 13120                           tosl	equ	0xFFD
 13121                           pclath	equ	0xFFA
 13122                           tblptru	equ	0xFF8
 13123                           tblptrh	equ	0xFF7
 13124                           tblptrl	equ	0xFF6
 13125                           tablat	equ	0xFF5
 13126                           prodh	equ	0xFF4
 13127                           prodl	equ	0xFF3
 13128                           intcon	equ	0xFF2
 13129                           intcon2	equ	0xFF1
 13130                           postinc0	equ	0xFEE
 13131                           wreg	equ	0xFE8
 13132                           indf1	equ	0xFE7
 13133                           plusw1	equ	0xFE3
 13134                           fsr1h	equ	0xFE2
 13135                           fsr1l	equ	0xFE1
 13136                           indf2	equ	0xFDF
 13137                           postinc2	equ	0xFDE
 13138                           postdec2	equ	0xFDD
 13139                           plusw2	equ	0xFDB
 13140                           fsr2h	equ	0xFDA
 13141                           fsr2l	equ	0xFD9
 13142                           status	equ	0xFD8
 13143                           
 13144 ;; *************** function _I2C_write *****************
 13145 ;; Defined at:
 13146 ;;		line 63 in file "i2c.c"
 13147 ;; Parameters:    Size  Location     Type
 13148 ;;  data            1    wreg     unsigned char 
 13149 ;; Auto vars:     Size  Location     Type
 13150 ;;  data            1   15[COMRAM] unsigned char 
 13151 ;; Return value:  Size  Location     Type
 13152 ;;                  1    wreg      unsigned char 
 13153 ;; Registers used:
 13154 ;;		wreg, status,2, status,0, cstack
 13155 ;; Tracked objects:
 13156 ;;		On entry : 0/0
 13157 ;;		On exit  : 0/0
 13158 ;;		Unchanged: 0/0
 13159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13163 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13164 ;;Total ram usage:        1 bytes
 13165 ;; Hardware stack levels used:    1
 13166 ;; Hardware stack levels required when called:    4
 13167 ;; This function calls:
 13168 ;;		_I2C_idle
 13169 ;; This function is called by:
 13170 ;;		_DS3231_Read
 13171 ;;		_DS3231_Write
 13172 ;; This function uses a non-reentrant model
 13173 ;;
 13174                           
 13175                           	psect	text68
 13176  0022B2                     __ptext68:
 13177                           	opt stack 0
 13178  0022B2                     _I2C_write:
 13179                           	opt stack 23
 13180                           
 13181                           ;incstack = 0
 13182                           ;I2C_write@data stored from wreg
 13183  0022B2  6E10               	movwf	I2C_write@data,c
 13184                           
 13185                           ;i2c.c: 65: I2C_idle();
 13186  0022B4  ECCE  F011         	call	_I2C_idle	;wreg free
 13187                           
 13188                           ;i2c.c: 66: SSPBUF = data;
 13189  0022B8  C010  FFC9         	movff	I2C_write@data,4041	;volatile
 13190                           
 13191                           ;i2c.c: 67: SSPIF = 0;
 13192  0022BC  969E               	bcf	3998,3,c	;volatile
 13193                           
 13194                           ;i2c.c: 68: I2C_idle();
 13195  0022BE  ECCE  F011         	call	_I2C_idle	;wreg free
 13196                           
 13197                           ;i2c.c: 69: if (ACKSTAT == 0) return 0;
 13198  0022C2  ACC5               	btfss	4037,6,c	;volatile
 13199  0022C4  0012               	return	
 13200                           
 13201                           ;i2c.c: 70: else
 13202                           ;i2c.c: 71: { PEN = 1; while (PEN); return 1;}
 13203  0022C6  84C5               	bsf	4037,2,c	;volatile
 13204  0022C8                     l181:
 13205  0022C8  A4C5               	btfss	4037,2,c	;volatile
 13206  0022CA  0012               	return		;funcret
 13207  0022CC  D7FD               	goto	l181
 13208  0022CE                     __end_of_I2C_write:
 13209                           	opt stack 0
 13210                           tosu	equ	0xFFF
 13211                           tosh	equ	0xFFE
 13212                           tosl	equ	0xFFD
 13213                           pclath	equ	0xFFA
 13214                           tblptru	equ	0xFF8
 13215                           tblptrh	equ	0xFF7
 13216                           tblptrl	equ	0xFF6
 13217                           tablat	equ	0xFF5
 13218                           prodh	equ	0xFF4
 13219                           prodl	equ	0xFF3
 13220                           intcon	equ	0xFF2
 13221                           intcon2	equ	0xFF1
 13222                           postinc0	equ	0xFEE
 13223                           wreg	equ	0xFE8
 13224                           indf1	equ	0xFE7
 13225                           plusw1	equ	0xFE3
 13226                           fsr1h	equ	0xFE2
 13227                           fsr1l	equ	0xFE1
 13228                           indf2	equ	0xFDF
 13229                           postinc2	equ	0xFDE
 13230                           postdec2	equ	0xFDD
 13231                           plusw2	equ	0xFDB
 13232                           fsr2h	equ	0xFDA
 13233                           fsr2l	equ	0xFD9
 13234                           status	equ	0xFD8
 13235                           
 13236 ;; *************** function _I2C_stop *****************
 13237 ;; Defined at:
 13238 ;;		line 97 in file "i2c.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;		None
 13241 ;; Auto vars:     Size  Location     Type
 13242 ;;		None
 13243 ;; Return value:  Size  Location     Type
 13244 ;;                  1    wreg      void 
 13245 ;; Registers used:
 13246 ;;		wreg, status,2, status,0, cstack
 13247 ;; Tracked objects:
 13248 ;;		On entry : 0/0
 13249 ;;		On exit  : 0/0
 13250 ;;		Unchanged: 0/0
 13251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13256 ;;Total ram usage:        0 bytes
 13257 ;; Hardware stack levels used:    1
 13258 ;; Hardware stack levels required when called:    4
 13259 ;; This function calls:
 13260 ;;		_I2C_idle
 13261 ;; This function is called by:
 13262 ;;		_DS3231_Read
 13263 ;;		_DS3231_Write
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           	psect	text69
 13268  0023C8                     __ptext69:
 13269                           	opt stack 0
 13270  0023C8                     _I2C_stop:
 13271                           	opt stack 23
 13272                           
 13273                           ;i2c.c: 99: I2C_idle();
 13274                           
 13275                           ;incstack = 0
 13276  0023C8  ECCE  F011         	call	_I2C_idle	;wreg free
 13277                           
 13278                           ;i2c.c: 100: PEN = 1;
 13279  0023CC  84C5               	bsf	4037,2,c	;volatile
 13280  0023CE                     l192:
 13281  0023CE  A4C5               	btfss	4037,2,c	;volatile
 13282  0023D0  0012               	return		;funcret
 13283  0023D2  D7FD               	goto	l192
 13284  0023D4                     __end_of_I2C_stop:
 13285                           	opt stack 0
 13286                           tosu	equ	0xFFF
 13287                           tosh	equ	0xFFE
 13288                           tosl	equ	0xFFD
 13289                           pclath	equ	0xFFA
 13290                           tblptru	equ	0xFF8
 13291                           tblptrh	equ	0xFF7
 13292                           tblptrl	equ	0xFF6
 13293                           tablat	equ	0xFF5
 13294                           prodh	equ	0xFF4
 13295                           prodl	equ	0xFF3
 13296                           intcon	equ	0xFF2
 13297                           intcon2	equ	0xFF1
 13298                           postinc0	equ	0xFEE
 13299                           wreg	equ	0xFE8
 13300                           indf1	equ	0xFE7
 13301                           plusw1	equ	0xFE3
 13302                           fsr1h	equ	0xFE2
 13303                           fsr1l	equ	0xFE1
 13304                           indf2	equ	0xFDF
 13305                           postinc2	equ	0xFDE
 13306                           postdec2	equ	0xFDD
 13307                           plusw2	equ	0xFDB
 13308                           fsr2h	equ	0xFDA
 13309                           fsr2l	equ	0xFD9
 13310                           status	equ	0xFD8
 13311                           
 13312 ;; *************** function _I2C_start *****************
 13313 ;; Defined at:
 13314 ;;		line 32 in file "i2c.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;  adress          1    wreg     unsigned char 
 13317 ;;  _R_W            1   15[COMRAM] unsigned char 
 13318 ;; Auto vars:     Size  Location     Type
 13319 ;;  adress          1   16[COMRAM] unsigned char 
 13320 ;; Return value:  Size  Location     Type
 13321 ;;                  1    wreg      unsigned char 
 13322 ;; Registers used:
 13323 ;;		wreg, status,2, status,0, cstack
 13324 ;; Tracked objects:
 13325 ;;		On entry : 0/0
 13326 ;;		On exit  : 0/0
 13327 ;;		Unchanged: 0/0
 13328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13329 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13332 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13333 ;;Total ram usage:        2 bytes
 13334 ;; Hardware stack levels used:    1
 13335 ;; Hardware stack levels required when called:    4
 13336 ;; This function calls:
 13337 ;;		_I2C_idle
 13338 ;; This function is called by:
 13339 ;;		_DS3231_Read
 13340 ;;		_DS3231_Write
 13341 ;; This function uses a non-reentrant model
 13342 ;;
 13343                           
 13344                           	psect	text70
 13345  00206A                     __ptext70:
 13346                           	opt stack 0
 13347  00206A                     _I2C_start:
 13348                           	opt stack 23
 13349                           
 13350                           ;incstack = 0
 13351                           ;I2C_start@adress stored from wreg
 13352  00206A  6E11               	movwf	I2C_start@adress,c
 13353                           
 13354                           ;i2c.c: 34: I2C_idle();
 13355  00206C  ECCE  F011         	call	_I2C_idle	;wreg free
 13356                           
 13357                           ;i2c.c: 35: SEN = 1;
 13358  002070  80C5               	bsf	4037,0,c	;volatile
 13359                           
 13360                           ;i2c.c: 36: I2C_idle();
 13361  002072  ECCE  F011         	call	_I2C_idle	;wreg free
 13362                           
 13363                           ;i2c.c: 37: if(_R_W == 0) adress &= 0b11111110;
 13364  002076  5010               	movf	I2C_start@_R_W,w,c
 13365  002078  E102               	bnz	l4858
 13366  00207A  9011               	bcf	I2C_start@adress,0,c
 13367  00207C  D001               	goto	l4860
 13368  00207E                     l4858:
 13369                           
 13370                           ;i2c.c: 38: else adress |= 0b00000001;
 13371  00207E  8011               	bsf	I2C_start@adress,0,c
 13372  002080                     l4860:
 13373                           
 13374                           ;i2c.c: 39: SSPBUF=adress;
 13375  002080  C011  FFC9         	movff	I2C_start@adress,4041	;volatile
 13376                           
 13377                           ;i2c.c: 40: I2C_idle();
 13378  002084  ECCE  F011         	call	_I2C_idle	;wreg free
 13379                           
 13380                           ;i2c.c: 41: if (ACKSTAT==0) return 0;
 13381  002088  ACC5               	btfss	4037,6,c	;volatile
 13382  00208A  0012               	return	
 13383                           
 13384                           ;i2c.c: 42: else
 13385                           ;i2c.c: 43: { PEN = 1; while (PEN); return 1;}
 13386  00208C  84C5               	bsf	4037,2,c	;volatile
 13387  00208E                     l163:
 13388  00208E  A4C5               	btfss	4037,2,c	;volatile
 13389  002090  0012               	return		;funcret
 13390  002092  D7FD               	goto	l163
 13391  002094                     __end_of_I2C_start:
 13392                           	opt stack 0
 13393                           tosu	equ	0xFFF
 13394                           tosh	equ	0xFFE
 13395                           tosl	equ	0xFFD
 13396                           pclath	equ	0xFFA
 13397                           tblptru	equ	0xFF8
 13398                           tblptrh	equ	0xFF7
 13399                           tblptrl	equ	0xFF6
 13400                           tablat	equ	0xFF5
 13401                           prodh	equ	0xFF4
 13402                           prodl	equ	0xFF3
 13403                           intcon	equ	0xFF2
 13404                           intcon2	equ	0xFF1
 13405                           postinc0	equ	0xFEE
 13406                           wreg	equ	0xFE8
 13407                           indf1	equ	0xFE7
 13408                           plusw1	equ	0xFE3
 13409                           fsr1h	equ	0xFE2
 13410                           fsr1l	equ	0xFE1
 13411                           indf2	equ	0xFDF
 13412                           postinc2	equ	0xFDE
 13413                           postdec2	equ	0xFDD
 13414                           plusw2	equ	0xFDB
 13415                           fsr2h	equ	0xFDA
 13416                           fsr2l	equ	0xFD9
 13417                           status	equ	0xFD8
 13418                           
 13419 ;; *************** function _I2C_restart *****************
 13420 ;; Defined at:
 13421 ;;		line 48 in file "i2c.c"
 13422 ;; Parameters:    Size  Location     Type
 13423 ;;  adres           1    wreg     unsigned char 
 13424 ;;  _R_W            1   15[COMRAM] unsigned char 
 13425 ;; Auto vars:     Size  Location     Type
 13426 ;;  adres           1   16[COMRAM] unsigned char 
 13427 ;; Return value:  Size  Location     Type
 13428 ;;                  1    wreg      unsigned char 
 13429 ;; Registers used:
 13430 ;;		wreg, status,2, status,0, cstack
 13431 ;; Tracked objects:
 13432 ;;		On entry : 0/0
 13433 ;;		On exit  : 0/0
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13436 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13440 ;;Total ram usage:        2 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    4
 13443 ;; This function calls:
 13444 ;;		_I2C_idle
 13445 ;; This function is called by:
 13446 ;;		_DS3231_Read
 13447 ;; This function uses a non-reentrant model
 13448 ;;
 13449                           
 13450                           	psect	text71
 13451  002094                     __ptext71:
 13452                           	opt stack 0
 13453  002094                     _I2C_restart:
 13454                           	opt stack 22
 13455                           
 13456                           ;incstack = 0
 13457                           ;I2C_restart@adres stored from wreg
 13458  002094  6E11               	movwf	I2C_restart@adres,c
 13459                           
 13460                           ;i2c.c: 50: I2C_idle();
 13461  002096  ECCE  F011         	call	_I2C_idle	;wreg free
 13462                           
 13463                           ;i2c.c: 51: RSEN = 1;
 13464  00209A  82C5               	bsf	4037,1,c	;volatile
 13465                           
 13466                           ;i2c.c: 52: I2C_idle();
 13467  00209C  ECCE  F011         	call	_I2C_idle	;wreg free
 13468                           
 13469                           ;i2c.c: 53: if(_R_W == 0) adres &= 0b11111110;
 13470  0020A0  5010               	movf	I2C_restart@_R_W,w,c
 13471  0020A2  E102               	bnz	l4878
 13472  0020A4  9011               	bcf	I2C_restart@adres,0,c
 13473  0020A6  D001               	goto	l4880
 13474  0020A8                     l4878:
 13475                           
 13476                           ;i2c.c: 54: else adres |= 0b00000001;
 13477  0020A8  8011               	bsf	I2C_restart@adres,0,c
 13478  0020AA                     l4880:
 13479                           
 13480                           ;i2c.c: 55: SSPBUF = adres;
 13481  0020AA  C011  FFC9         	movff	I2C_restart@adres,4041	;volatile
 13482                           
 13483                           ;i2c.c: 56: I2C_idle();
 13484  0020AE  ECCE  F011         	call	_I2C_idle	;wreg free
 13485                           
 13486                           ;i2c.c: 57: if (ACKSTAT == 0) return 0;
 13487  0020B2  ACC5               	btfss	4037,6,c	;volatile
 13488  0020B4  0012               	return	
 13489                           
 13490                           ;i2c.c: 58: else
 13491                           ;i2c.c: 59: { PEN = 1; while (PEN); return 1;}
 13492  0020B6  84C5               	bsf	4037,2,c	;volatile
 13493  0020B8                     l173:
 13494  0020B8  A4C5               	btfss	4037,2,c	;volatile
 13495  0020BA  0012               	return		;funcret
 13496  0020BC  D7FD               	goto	l173
 13497  0020BE                     __end_of_I2C_restart:
 13498                           	opt stack 0
 13499                           tosu	equ	0xFFF
 13500                           tosh	equ	0xFFE
 13501                           tosl	equ	0xFFD
 13502                           pclath	equ	0xFFA
 13503                           tblptru	equ	0xFF8
 13504                           tblptrh	equ	0xFF7
 13505                           tblptrl	equ	0xFF6
 13506                           tablat	equ	0xFF5
 13507                           prodh	equ	0xFF4
 13508                           prodl	equ	0xFF3
 13509                           intcon	equ	0xFF2
 13510                           intcon2	equ	0xFF1
 13511                           postinc0	equ	0xFEE
 13512                           wreg	equ	0xFE8
 13513                           indf1	equ	0xFE7
 13514                           plusw1	equ	0xFE3
 13515                           fsr1h	equ	0xFE2
 13516                           fsr1l	equ	0xFE1
 13517                           indf2	equ	0xFDF
 13518                           postinc2	equ	0xFDE
 13519                           postdec2	equ	0xFDD
 13520                           plusw2	equ	0xFDB
 13521                           fsr2h	equ	0xFDA
 13522                           fsr2l	equ	0xFD9
 13523                           status	equ	0xFD8
 13524                           
 13525 ;; *************** function _I2C_read_noack *****************
 13526 ;; Defined at:
 13527 ;;		line 75 in file "i2c.c"
 13528 ;; Parameters:    Size  Location     Type
 13529 ;;		None
 13530 ;; Auto vars:     Size  Location     Type
 13531 ;;		None
 13532 ;; Return value:  Size  Location     Type
 13533 ;;                  1    wreg      unsigned char 
 13534 ;; Registers used:
 13535 ;;		wreg, status,2, status,0, cstack
 13536 ;; Tracked objects:
 13537 ;;		On entry : 0/0
 13538 ;;		On exit  : 0/0
 13539 ;;		Unchanged: 0/0
 13540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;Total ram usage:        0 bytes
 13546 ;; Hardware stack levels used:    1
 13547 ;; Hardware stack levels required when called:    4
 13548 ;; This function calls:
 13549 ;;		_I2C_idle
 13550 ;; This function is called by:
 13551 ;;		_DS3231_Read
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555                           	psect	text72
 13556  002368                     __ptext72:
 13557                           	opt stack 0
 13558  002368                     _I2C_read_noack:
 13559                           	opt stack 22
 13560                           
 13561                           ;i2c.c: 77: I2C_idle();
 13562                           
 13563                           ;incstack = 0
 13564  002368  ECCE  F011         	call	_I2C_idle	;wreg free
 13565                           
 13566                           ;i2c.c: 78: RCEN = 1;
 13567  00236C  86C5               	bsf	4037,3,c	;volatile
 13568                           
 13569                           ;i2c.c: 79: I2C_idle();
 13570  00236E  ECCE  F011         	call	_I2C_idle	;wreg free
 13571                           
 13572                           ;i2c.c: 80: ACKDT = 1;
 13573  002372  8AC5               	bsf	4037,5,c	;volatile
 13574                           
 13575                           ;i2c.c: 81: ACKEN = 1;
 13576  002374  88C5               	bsf	4037,4,c	;volatile
 13577                           
 13578                           ;i2c.c: 83: return SSPBUF;
 13579  002376  50C9               	movf	4041,w,c	;volatile
 13580  002378  0012               	return		;funcret
 13581  00237A                     __end_of_I2C_read_noack:
 13582                           	opt stack 0
 13583                           tosu	equ	0xFFF
 13584                           tosh	equ	0xFFE
 13585                           tosl	equ	0xFFD
 13586                           pclath	equ	0xFFA
 13587                           tblptru	equ	0xFF8
 13588                           tblptrh	equ	0xFF7
 13589                           tblptrl	equ	0xFF6
 13590                           tablat	equ	0xFF5
 13591                           prodh	equ	0xFF4
 13592                           prodl	equ	0xFF3
 13593                           intcon	equ	0xFF2
 13594                           intcon2	equ	0xFF1
 13595                           postinc0	equ	0xFEE
 13596                           wreg	equ	0xFE8
 13597                           indf1	equ	0xFE7
 13598                           plusw1	equ	0xFE3
 13599                           fsr1h	equ	0xFE2
 13600                           fsr1l	equ	0xFE1
 13601                           indf2	equ	0xFDF
 13602                           postinc2	equ	0xFDE
 13603                           postdec2	equ	0xFDD
 13604                           plusw2	equ	0xFDB
 13605                           fsr2h	equ	0xFDA
 13606                           fsr2l	equ	0xFD9
 13607                           status	equ	0xFD8
 13608                           
 13609 ;; *************** function _I2C_idle *****************
 13610 ;; Defined at:
 13611 ;;		line 24 in file "i2c.c"
 13612 ;; Parameters:    Size  Location     Type
 13613 ;;		None
 13614 ;; Auto vars:     Size  Location     Type
 13615 ;;		None
 13616 ;; Return value:  Size  Location     Type
 13617 ;;                  1    wreg      void 
 13618 ;; Registers used:
 13619 ;;		wreg, status,2, status,0
 13620 ;; Tracked objects:
 13621 ;;		On entry : 0/0
 13622 ;;		On exit  : 0/0
 13623 ;;		Unchanged: 0/0
 13624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13627 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13628 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13629 ;;Total ram usage:        1 bytes
 13630 ;; Hardware stack levels used:    1
 13631 ;; Hardware stack levels required when called:    3
 13632 ;; This function calls:
 13633 ;;		Nothing
 13634 ;; This function is called by:
 13635 ;;		_I2C_start
 13636 ;;		_I2C_restart
 13637 ;;		_I2C_write
 13638 ;;		_I2C_read_noack
 13639 ;;		_I2C_stop
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           	psect	text73
 13644  00239C                     __ptext73:
 13645                           	opt stack 0
 13646  00239C                     _I2C_idle:
 13647                           	opt stack 23
 13648  00239C                     l4812:
 13649  00239C  CFC5 F00F          	movff	4037,??_I2C_idle	;volatile
 13650  0023A0  0E1F               	movlw	31
 13651  0023A2  160F               	andwf	??_I2C_idle,f,c
 13652  0023A4  E1FB               	bnz	l4812
 13653  0023A6  A4C7               	btfss	4039,2,c	;volatile
 13654  0023A8  0C1F               	retlw	31	;funcret
 13655  0023AA  D7F8               	goto	l4812
 13656  0023AC                     __end_of_I2C_idle:
 13657                           	opt stack 0
 13658                           tosu	equ	0xFFF
 13659                           tosh	equ	0xFFE
 13660                           tosl	equ	0xFFD
 13661                           pclath	equ	0xFFA
 13662                           tblptru	equ	0xFF8
 13663                           tblptrh	equ	0xFF7
 13664                           tblptrl	equ	0xFF6
 13665                           tablat	equ	0xFF5
 13666                           prodh	equ	0xFF4
 13667                           prodl	equ	0xFF3
 13668                           intcon	equ	0xFF2
 13669                           intcon2	equ	0xFF1
 13670                           postinc0	equ	0xFEE
 13671                           wreg	equ	0xFE8
 13672                           indf1	equ	0xFE7
 13673                           plusw1	equ	0xFE3
 13674                           fsr1h	equ	0xFE2
 13675                           fsr1l	equ	0xFE1
 13676                           indf2	equ	0xFDF
 13677                           postinc2	equ	0xFDE
 13678                           postdec2	equ	0xFDD
 13679                           plusw2	equ	0xFDB
 13680                           fsr2h	equ	0xFDA
 13681                           fsr2l	equ	0xFD9
 13682                           status	equ	0xFD8
 13683                           
 13684 ;; *************** function _INTERRUPT_InterruptManager *****************
 13685 ;; Defined at:
 13686 ;;		line 4 in file "interrupt.c"
 13687 ;; Parameters:    Size  Location     Type
 13688 ;;		None
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;		None
 13691 ;; Return value:  Size  Location     Type
 13692 ;;                  1    wreg      void 
 13693 ;; Registers used:
 13694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13695 ;; Tracked objects:
 13696 ;;		On entry : 0/0
 13697 ;;		On exit  : 0/0
 13698 ;;		Unchanged: 0/0
 13699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13702 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13703 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13704 ;;Total ram usage:        5 bytes
 13705 ;; Hardware stack levels used:    1
 13706 ;; Hardware stack levels required when called:    2
 13707 ;; This function calls:
 13708 ;;		_INT0_ISR
 13709 ;;		_TMR0_ISR
 13710 ;;		_TMR1_ISR
 13711 ;; This function is called by:
 13712 ;;		Interrupt level 2
 13713 ;; This function uses a non-reentrant model
 13714 ;;
 13715                           
 13716                           	psect	intcode
 13717  000008                     __pintcode:
 13718                           	opt stack 0
 13719  000008                     _INTERRUPT_InterruptManager:
 13720                           	opt stack 22
 13721                           
 13722                           ;incstack = 0
 13723  000008  826F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13724  00000A  ED11  F00D         	call	int_func,f	;refresh shadow registers
 13725                           tosu	equ	0xFFF
 13726                           tosh	equ	0xFFE
 13727                           tosl	equ	0xFFD
 13728                           pclath	equ	0xFFA
 13729                           tblptru	equ	0xFF8
 13730                           tblptrh	equ	0xFF7
 13731                           tblptrl	equ	0xFF6
 13732                           tablat	equ	0xFF5
 13733                           prodh	equ	0xFF4
 13734                           prodl	equ	0xFF3
 13735                           intcon	equ	0xFF2
 13736                           intcon2	equ	0xFF1
 13737                           postinc0	equ	0xFEE
 13738                           wreg	equ	0xFE8
 13739                           indf1	equ	0xFE7
 13740                           plusw1	equ	0xFE3
 13741                           fsr1h	equ	0xFE2
 13742                           fsr1l	equ	0xFE1
 13743                           indf2	equ	0xFDF
 13744                           postinc2	equ	0xFDE
 13745                           postdec2	equ	0xFDD
 13746                           plusw2	equ	0xFDB
 13747                           fsr2h	equ	0xFDA
 13748                           fsr2l	equ	0xFD9
 13749                           status	equ	0xFD8
 13750                           
 13751                           	psect	intcode_body
 13752  001A22                     __pintcode_body:
 13753                           	opt stack 22
 13754  001A22                     int_func:
 13755                           	opt stack 22
 13756  001A22  0006               	pop		; remove dummy address from shadow register refresh
 13757  001A24  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManager+1
 13758  001A28  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManager+2
 13759  001A2C  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManager+3
 13760  001A30  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManager+4
 13761                           
 13762                           ;interrupt.c: 7: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 13763  001A34  BAF2               	btfsc	intcon,5,c	;volatile
 13764  001A36  A4F2               	btfss	intcon,2,c	;volatile
 13765  001A38  D003               	goto	i2l295
 13766                           
 13767                           ;interrupt.c: 8: {
 13768                           ;interrupt.c: 9: TMR0_ISR();
 13769  001A3A  ECDD  F011         	call	_TMR0_ISR	;wreg free
 13770                           
 13771                           ;interrupt.c: 10: }
 13772  001A3E  D013               	goto	i2l6310
 13773  001A40                     i2l295:
 13774                           
 13775                           ;interrupt.c: 11: else if (INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
 13776  001A40  B8F2               	btfsc	intcon,4,c	;volatile
 13777  001A42  A2F2               	btfss	intcon,1,c	;volatile
 13778  001A44  D010               	goto	i2l6310
 13779                           
 13780                           ;interrupt.c: 12: {
 13781                           ;interrupt.c: 13: INTCONbits.INT0IF = 0;
 13782  001A46  92F2               	bcf	intcon,1,c	;volatile
 13783  001A48  0E01               	movlw	1
 13784                           
 13785                           ;interrupt.c: 14: INTCON2bits.INTEDG0 = ~INTCON2bits.INTEDG0;
 13786  001A4A  ACF1               	btfss	intcon2,6,c	;volatile
 13787  001A4C  0E00               	movlw	0
 13788  001A4E  0AFF               	xorlw	255
 13789  001A50  6E0A               	movwf	??_INTERRUPT_InterruptManager& (0+255),c
 13790  001A52  3A0A               	swapf	??_INTERRUPT_InterruptManager,f,c
 13791  001A54  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 13792  001A56  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 13793  001A58  50F1               	movf	intcon2,w,c	;volatile
 13794  001A5A  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 13795  001A5C  0BBF               	andlw	-65
 13796  001A5E  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 13797  001A60  6EF1               	movwf	intcon2,c	;volatile
 13798                           
 13799                           ;interrupt.c: 16: INT0_ISR();
 13800  001A62  EC98  F011         	call	_INT0_ISR	;wreg free
 13801  001A66                     i2l6310:
 13802                           
 13803                           ;interrupt.c: 17: } if (PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF ==1)
 13804  001A66  B09D               	btfsc	3997,0,c	;volatile
 13805  001A68  A09E               	btfss	3998,0,c	;volatile
 13806  001A6A  D007               	goto	i2l299
 13807                           
 13808                           ;interrupt.c: 18: {
 13809                           ;interrupt.c: 19: PIR1bits.TMR1IF = 0;
 13810  001A6C  909E               	bcf	3998,0,c	;volatile
 13811                           
 13812                           ;interrupt.c: 20: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
 13813  001A6E  0E3C               	movlw	60
 13814  001A70  6ECF               	movwf	4047,c	;volatile
 13815                           
 13816                           ;interrupt.c: 21: TMR1L = ((unsigned char)((15536)&0xFF));
 13817  001A72  0EB0               	movlw	176
 13818  001A74  6ECE               	movwf	4046,c	;volatile
 13819                           
 13820                           ;interrupt.c: 22: TMR1_ISR();
 13821  001A76  ECBD  F011         	call	_TMR1_ISR	;wreg free
 13822  001A7A                     i2l299:
 13823  001A7A  C00E  FFF4         	movff	??_INTERRUPT_InterruptManager+4,prodh
 13824  001A7E  C00D  FFF3         	movff	??_INTERRUPT_InterruptManager+3,prodl
 13825  001A82  C00C  FFDA         	movff	??_INTERRUPT_InterruptManager+2,fsr2h
 13826  001A86  C00B  FFD9         	movff	??_INTERRUPT_InterruptManager+1,fsr2l
 13827  001A8A  926F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13828  001A8C  0011               	retfie		f
 13829  001A8E                     __end_of_INTERRUPT_InterruptManager:
 13830                           	opt stack 0
 13831                           tosu	equ	0xFFF
 13832                           tosh	equ	0xFFE
 13833                           tosl	equ	0xFFD
 13834                           pclath	equ	0xFFA
 13835                           tblptru	equ	0xFF8
 13836                           tblptrh	equ	0xFF7
 13837                           tblptrl	equ	0xFF6
 13838                           tablat	equ	0xFF5
 13839                           prodh	equ	0xFF4
 13840                           prodl	equ	0xFF3
 13841                           intcon	equ	0xFF2
 13842                           intcon2	equ	0xFF1
 13843                           postinc0	equ	0xFEE
 13844                           wreg	equ	0xFE8
 13845                           indf1	equ	0xFE7
 13846                           plusw1	equ	0xFE3
 13847                           fsr1h	equ	0xFE2
 13848                           fsr1l	equ	0xFE1
 13849                           indf2	equ	0xFDF
 13850                           postinc2	equ	0xFDE
 13851                           postdec2	equ	0xFDD
 13852                           plusw2	equ	0xFDB
 13853                           fsr2h	equ	0xFDA
 13854                           fsr2l	equ	0xFD9
 13855                           status	equ	0xFD8
 13856                           
 13857 ;; *************** function _TMR1_ISR *****************
 13858 ;; Defined at:
 13859 ;;		line 568 in file "common.c"
 13860 ;; Parameters:    Size  Location     Type
 13861 ;;		None
 13862 ;; Auto vars:     Size  Location     Type
 13863 ;;		None
 13864 ;; Return value:  Size  Location     Type
 13865 ;;                  1    wreg      void 
 13866 ;; Registers used:
 13867 ;;		wreg, status,2, status,0
 13868 ;; Tracked objects:
 13869 ;;		On entry : 0/0
 13870 ;;		On exit  : 0/0
 13871 ;;		Unchanged: 0/0
 13872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;Total ram usage:        0 bytes
 13878 ;; Hardware stack levels used:    1
 13879 ;; This function calls:
 13880 ;;		Nothing
 13881 ;; This function is called by:
 13882 ;;		_INTERRUPT_InterruptManager
 13883 ;; This function uses a non-reentrant model
 13884 ;;
 13885                           
 13886                           	psect	text75
 13887  00237A                     __ptext75:
 13888                           	opt stack 0
 13889  00237A                     _TMR1_ISR:
 13890                           	opt stack 23
 13891                           
 13892                           ;common.c: 572: if(++timer_val >= 150)
 13893                           
 13894                           ;incstack = 0
 13895  00237A  2A6C               	incf	_timer_val,f,c
 13896  00237C  0E95               	movlw	149
 13897  00237E  646C               	cpfsgt	_timer_val,c
 13898  002380  0C95               	retlw	149
 13899                           
 13900                           ;common.c: 573: {
 13901                           ;common.c: 574: timer_val = 0;
 13902  002382  6A6C               	clrf	_timer_val,c
 13903                           
 13904                           ;common.c: 575: time_flag = 1;
 13905  002384  0E01               	movlw	1
 13906  002386  6E6B               	movwf	_time_flag,c
 13907                           
 13908                           ;common.c: 576: T1CONbits.TMR1ON = 0;
 13909  002388  90CD               	bcf	4045,0,c	;volatile
 13910  00238A  0C01               	retlw	1	;funcret
 13911  00238C                     __end_of_TMR1_ISR:
 13912                           	opt stack 0
 13913                           tosu	equ	0xFFF
 13914                           tosh	equ	0xFFE
 13915                           tosl	equ	0xFFD
 13916                           pclath	equ	0xFFA
 13917                           tblptru	equ	0xFF8
 13918                           tblptrh	equ	0xFF7
 13919                           tblptrl	equ	0xFF6
 13920                           tablat	equ	0xFF5
 13921                           prodh	equ	0xFF4
 13922                           prodl	equ	0xFF3
 13923                           intcon	equ	0xFF2
 13924                           intcon2	equ	0xFF1
 13925                           postinc0	equ	0xFEE
 13926                           wreg	equ	0xFE8
 13927                           indf1	equ	0xFE7
 13928                           plusw1	equ	0xFE3
 13929                           fsr1h	equ	0xFE2
 13930                           fsr1l	equ	0xFE1
 13931                           indf2	equ	0xFDF
 13932                           postinc2	equ	0xFDE
 13933                           postdec2	equ	0xFDD
 13934                           plusw2	equ	0xFDB
 13935                           fsr2h	equ	0xFDA
 13936                           fsr2l	equ	0xFD9
 13937                           status	equ	0xFD8
 13938                           
 13939 ;; *************** function _TMR0_ISR *****************
 13940 ;; Defined at:
 13941 ;;		line 127 in file "dispatcher.c"
 13942 ;; Parameters:    Size  Location     Type
 13943 ;;		None
 13944 ;; Auto vars:     Size  Location     Type
 13945 ;;		None
 13946 ;; Return value:  Size  Location     Type
 13947 ;;                  1    wreg      void 
 13948 ;; Registers used:
 13949 ;;		wreg, status,2
 13950 ;; Tracked objects:
 13951 ;;		On entry : 0/0
 13952 ;;		On exit  : 0/0
 13953 ;;		Unchanged: 0/0
 13954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13959 ;;Total ram usage:        0 bytes
 13960 ;; Hardware stack levels used:    1
 13961 ;; This function calls:
 13962 ;;		Nothing
 13963 ;; This function is called by:
 13964 ;;		_INTERRUPT_InterruptManager
 13965 ;; This function uses a non-reentrant model
 13966 ;;
 13967                           
 13968                           	psect	text76
 13969  0023BA                     __ptext76:
 13970                           	opt stack 0
 13971  0023BA                     _TMR0_ISR:
 13972                           	opt stack 23
 13973                           
 13974                           ;dispatcher.c: 131: INTCONbits.TMR0IF = 0;
 13975                           
 13976                           ;incstack = 0
 13977  0023BA  94F2               	bcf	intcon,2,c	;volatile
 13978                           
 13979                           ;dispatcher.c: 132: TMR0 = 61;
 13980  0023BC  6AD7               	clrf	4055,c	;volatile
 13981  0023BE  0E3D               	movlw	61
 13982  0023C0  6ED6               	movwf	4054,c	;volatile
 13983                           
 13984                           ;dispatcher.c: 133: Timer0Interrupt = 1;
 13985  0023C2  0E01               	movlw	1
 13986  0023C4  6E67               	movwf	_Timer0Interrupt,c
 13987  0023C6  0C01               	retlw	1	;funcret
 13988  0023C8                     __end_of_TMR0_ISR:
 13989                           	opt stack 0
 13990                           tosu	equ	0xFFF
 13991                           tosh	equ	0xFFE
 13992                           tosl	equ	0xFFD
 13993                           pclath	equ	0xFFA
 13994                           tblptru	equ	0xFF8
 13995                           tblptrh	equ	0xFF7
 13996                           tblptrl	equ	0xFF6
 13997                           tablat	equ	0xFF5
 13998                           prodh	equ	0xFF4
 13999                           prodl	equ	0xFF3
 14000                           intcon	equ	0xFF2
 14001                           intcon2	equ	0xFF1
 14002                           postinc0	equ	0xFEE
 14003                           wreg	equ	0xFE8
 14004                           indf1	equ	0xFE7
 14005                           plusw1	equ	0xFE3
 14006                           fsr1h	equ	0xFE2
 14007                           fsr1l	equ	0xFE1
 14008                           indf2	equ	0xFDF
 14009                           postinc2	equ	0xFDE
 14010                           postdec2	equ	0xFDD
 14011                           plusw2	equ	0xFDB
 14012                           fsr2h	equ	0xFDA
 14013                           fsr2l	equ	0xFD9
 14014                           status	equ	0xFD8
 14015                           
 14016 ;; *************** function _INT0_ISR *****************
 14017 ;; Defined at:
 14018 ;;		line 551 in file "common.c"
 14019 ;; Parameters:    Size  Location     Type
 14020 ;;		None
 14021 ;; Auto vars:     Size  Location     Type
 14022 ;;		None
 14023 ;; Return value:  Size  Location     Type
 14024 ;;                  1    wreg      void 
 14025 ;; Registers used:
 14026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14027 ;; Tracked objects:
 14028 ;;		On entry : 0/0
 14029 ;;		On exit  : 0/0
 14030 ;;		Unchanged: 0/0
 14031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14036 ;;Total ram usage:        0 bytes
 14037 ;; Hardware stack levels used:    1
 14038 ;; Hardware stack levels required when called:    1
 14039 ;; This function calls:
 14040 ;;		i2_RTOS_SetTask
 14041 ;; This function is called by:
 14042 ;;		_INTERRUPT_InterruptManager
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           	psect	text77
 14047  002330                     __ptext77:
 14048                           	opt stack 0
 14049  002330                     _INT0_ISR:
 14050                           	opt stack 22
 14051                           
 14052                           ;common.c: 560: RTOS_SetTask(GetTime, 0, 0);
 14053                           
 14054                           ;incstack = 0
 14055  002330  0E0E               	movlw	low _GetTime
 14056  002332  6E01               	movwf	i2RTOS_SetTask@taskFunc,c
 14057  002334  0E21               	movlw	high _GetTime
 14058  002336  6E02               	movwf	i2RTOS_SetTask@taskFunc+1,c
 14059  002338  6A04               	clrf	i2RTOS_SetTask@taskDelay+1,c
 14060  00233A  6A03               	clrf	i2RTOS_SetTask@taskDelay,c
 14061  00233C  6A06               	clrf	i2RTOS_SetTask@taskPeriod+1,c
 14062  00233E  6A05               	clrf	i2RTOS_SetTask@taskPeriod,c
 14063  002340  EFA3  F00A         	goto	i2_RTOS_SetTask	;wreg free
 14064  002344                     __end_of_INT0_ISR:
 14065                           	opt stack 0
 14066                           tosu	equ	0xFFF
 14067                           tosh	equ	0xFFE
 14068                           tosl	equ	0xFFD
 14069                           pclath	equ	0xFFA
 14070                           tblptru	equ	0xFF8
 14071                           tblptrh	equ	0xFF7
 14072                           tblptrl	equ	0xFF6
 14073                           tablat	equ	0xFF5
 14074                           prodh	equ	0xFF4
 14075                           prodl	equ	0xFF3
 14076                           intcon	equ	0xFF2
 14077                           intcon2	equ	0xFF1
 14078                           postinc0	equ	0xFEE
 14079                           wreg	equ	0xFE8
 14080                           indf1	equ	0xFE7
 14081                           plusw1	equ	0xFE3
 14082                           fsr1h	equ	0xFE2
 14083                           fsr1l	equ	0xFE1
 14084                           indf2	equ	0xFDF
 14085                           postinc2	equ	0xFDE
 14086                           postdec2	equ	0xFDD
 14087                           plusw2	equ	0xFDB
 14088                           fsr2h	equ	0xFDA
 14089                           fsr2l	equ	0xFD9
 14090                           status	equ	0xFD8
 14091                           
 14092 ;; *************** function i2_RTOS_SetTask *****************
 14093 ;; Defined at:
 14094 ;;		line 22 in file "dispatcher.c"
 14095 ;; Parameters:    Size  Location     Type
 14096 ;;  taskFunc        2    0[COMRAM] PTR FTN()void 
 14097 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
 14098 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
 14099 ;;		 -> GetTime(1), key_press(1), time_led(1), 
 14100 ;;  taskDelay       2    2[COMRAM] unsigned int 
 14101 ;;  taskPeriod      2    4[COMRAM] unsigned int 
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;  RTOS_SetTask    1    8[COMRAM] unsigned char 
 14104 ;; Return value:  Size  Location     Type
 14105 ;;                  1    wreg      void 
 14106 ;; Registers used:
 14107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14108 ;; Tracked objects:
 14109 ;;		On entry : 0/0
 14110 ;;		On exit  : 0/0
 14111 ;;		Unchanged: 0/0
 14112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14113 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14115 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14116 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14117 ;;Total ram usage:        9 bytes
 14118 ;; Hardware stack levels used:    1
 14119 ;; This function calls:
 14120 ;;		Nothing
 14121 ;; This function is called by:
 14122 ;;		_INT0_ISR
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           	psect	text78
 14127  001546                     __ptext78:
 14128                           	opt stack 0
 14129  001546                     i2_RTOS_SetTask:
 14130                           	opt stack 22
 14131                           
 14132                           ;dispatcher.c: 24: uint8_t i;
 14133                           ;dispatcher.c: 26: if(!taskFunc) return;
 14134                           
 14135                           ;incstack = 0
 14136  001546  5001               	movf	i2RTOS_SetTask@taskFunc,w,c
 14137  001548  1002               	iorwf	i2RTOS_SetTask@taskFunc+1,w,c
 14138  00154A  E101               	bnz	i2l227
 14139  00154C  0012               	return	
 14140  00154E                     i2l227:
 14141                           
 14142                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 14143  00154E  6A09               	clrf	i2RTOS_SetTask@i,c
 14144  001550  D015               	goto	i2l4698
 14145  001552                     i2l4686:
 14146                           
 14147                           ;dispatcher.c: 28: {
 14148                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 14149  001552  5009               	movf	i2RTOS_SetTask@i,w,c
 14150  001554  D82A               	call	PL22	;call to abstracted procedure
 14151  001556  5001               	movf	i2RTOS_SetTask@taskFunc,w,c	;volatile
 14152  001558  18DE               	xorwf	postinc2,w,c
 14153  00155A  E10F               	bnz	i2l4696
 14154  00155C  5002               	movf	i2RTOS_SetTask@taskFunc+1,w,c	;volatile
 14155  00155E  18DE               	xorwf	postinc2,w,c
 14156  001560  E10C               	bnz	i2l4696
 14157                           
 14158                           ;dispatcher.c: 30: {
 14159                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 14160  001562  9EF2               	bcf	intcon,7,c	;volatile
 14161                           
 14162                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 14163  001564  5009               	movf	i2RTOS_SetTask@i,w,c
 14164  001566  EC97  F008         	call	PL16	;call to abstracted procedure
 14165  00156A  D839               	call	PL100	;call to abstracted procedure
 14166                           
 14167                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 14168  00156C  5009               	movf	i2RTOS_SetTask@i,w,c
 14169  00156E  D82F               	call	PL26	;call to abstracted procedure
 14170  001570  D83B               	call	PL126	;call to abstracted procedure
 14171                           
 14172                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 14173  001572  5009               	movf	i2RTOS_SetTask@i,w,c
 14174  001574  D822               	call	PL24	;call to abstracted procedure
 14175                           
 14176                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 14177  001576  8EF2               	bsf	intcon,7,c	;volatile
 14178  001578  0C00               	retlw	0
 14179  00157A                     i2l4696:
 14180  00157A  2A09               	incf	i2RTOS_SetTask@i,f,c
 14181  00157C                     i2l4698:
 14182  00157C  5068               	movf	_arrayTail,w,c	;volatile
 14183  00157E  5C09               	subwf	i2RTOS_SetTask@i,w,c
 14184  001580  E3E8               	bnc	i2l4686
 14185                           
 14186                           ;dispatcher.c: 39: }
 14187                           ;dispatcher.c: 40: }
 14188                           ;dispatcher.c: 42: if (arrayTail < 15)
 14189  001582  0E0F               	movlw	15
 14190  001584  6068               	cpfslt	_arrayTail,c	;volatile
 14191  001586  0C0F               	retlw	15
 14192                           
 14193                           ;dispatcher.c: 43: {
 14194                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 14195  001588  9EF2               	bcf	intcon,7,c	;volatile
 14196                           
 14197                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 14198  00158A  5068               	movf	_arrayTail,w,c	;volatile
 14199  00158C  D80E               	call	PL22	;call to abstracted procedure
 14200  00158E  C001  FFDE         	movff	i2RTOS_SetTask@taskFunc,postinc2	;volatile
 14201  001592  C002  FFDD         	movff	i2RTOS_SetTask@taskFunc+1,postdec2	;volatile
 14202                           
 14203                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 14204  001596  5068               	movf	_arrayTail,w,c	;volatile
 14205  001598  EC97  F008         	call	PL16	;call to abstracted procedure
 14206  00159C  D820               	call	PL100	;call to abstracted procedure
 14207                           
 14208                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 14209  00159E  5068               	movf	_arrayTail,w,c	;volatile
 14210  0015A0  D816               	call	PL26	;call to abstracted procedure
 14211  0015A2  D822               	call	PL126	;call to abstracted procedure
 14212                           
 14213                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 14214  0015A4  5068               	movf	_arrayTail,w,c	;volatile
 14215  0015A6  D809               	call	PL24	;call to abstracted procedure
 14216                           
 14217                           ;dispatcher.c: 51: arrayTail++;
 14218                           
 14219                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 14220  0015A8  D024               	goto	PL158	;call to abstracted procedure
 14221  0015AA                     __end_ofi2_RTOS_SetTask:
 14222                           	opt stack 0
 14223  0015AA                     PL22:
 14224                           	opt stack 27
 14225  0015AA  0D08               	mullw	8
 14226  0015AC  0E00               	movlw	low _TaskArray
 14227  0015AE  24F3               	addwf	prodl,w,c
 14228  0015B0  6ED9               	movwf	fsr2l,c
 14229  0015B2  0E01               	movlw	high _TaskArray
 14230  0015B4  20F4               	addwfc	prodh,w,c
 14231  0015B6  6EDA               	movwf	fsr2h,c
 14232  0015B8  0012               	return	
 14233  0015BA                     __end_ofPL22:
 14234                           	opt stack 0
 14235  0015BA                     PL24:
 14236                           	opt stack 27
 14237  0015BA  0D08               	mullw	8
 14238  0015BC  0E06               	movlw	low (_TaskArray+6)
 14239  0015BE  24F3               	addwf	prodl,w,c
 14240  0015C0  6ED9               	movwf	fsr2l,c
 14241  0015C2  0E01               	movlw	high (_TaskArray+6)
 14242  0015C4  20F4               	addwfc	prodh,w,c
 14243  0015C6  6EDA               	movwf	fsr2h,c
 14244  0015C8  6ADE               	clrf	postinc2,c
 14245  0015CA  6ADD               	clrf	postdec2,c
 14246  0015CC  0012               	return	
 14247  0015CE                     __end_ofPL24:
 14248                           	opt stack 0
 14249  0015CE                     PL26:
 14250                           	opt stack 27
 14251  0015CE  0D08               	mullw	8
 14252  0015D0  0E04               	movlw	low (_TaskArray+4)
 14253  0015D2  24F3               	addwf	prodl,w,c
 14254  0015D4  6ED9               	movwf	fsr2l,c
 14255  0015D6  0E01               	movlw	high (_TaskArray+4)
 14256  0015D8  20F4               	addwfc	prodh,w,c
 14257  0015DA  6EDA               	movwf	fsr2h,c
 14258  0015DC  0012               	return	
 14259  0015DE                     __end_ofPL26:
 14260                           	opt stack 0
 14261  0015DE                     PL100:
 14262                           	opt stack 22
 14263  0015DE  C003  FFDE         	movff	i2RTOS_SetTask@taskDelay,postinc2
 14264  0015E2  C004  FFDD         	movff	i2RTOS_SetTask@taskDelay+1,postdec2
 14265  0015E6  0012               	return	
 14266  0015E8                     __end_ofPL100:
 14267                           	opt stack 0
 14268  0015E8                     PL126:
 14269                           	opt stack 22
 14270  0015E8  C005  FFDE         	movff	i2RTOS_SetTask@taskPeriod,postinc2
 14271  0015EC  C006  FFDD         	movff	i2RTOS_SetTask@taskPeriod+1,postdec2
 14272  0015F0  0012               	return	
 14273  0015F2                     __end_ofPL126:
 14274                           	opt stack 0
 14275  0015F2                     PL158:
 14276                           	opt stack 27
 14277  0015F2  2A68               	incf	_arrayTail,f,c	;volatile
 14278  0015F4  8EF2               	bsf	intcon,7,c	;volatile
 14279  0015F6  0C00               	retlw	0	;funcret
 14280  0015F8                     __end_ofPL158:
 14281                           	opt stack 0
 14282                           tosu	equ	0xFFF
 14283                           tosh	equ	0xFFE
 14284                           tosl	equ	0xFFD
 14285                           pclath	equ	0xFFA
 14286                           tblptru	equ	0xFF8
 14287                           tblptrh	equ	0xFF7
 14288                           tblptrl	equ	0xFF6
 14289                           tablat	equ	0xFF5
 14290                           prodh	equ	0xFF4
 14291                           prodl	equ	0xFF3
 14292                           intcon	equ	0xFF2
 14293                           intcon2	equ	0xFF1
 14294                           postinc0	equ	0xFEE
 14295                           wreg	equ	0xFE8
 14296                           indf1	equ	0xFE7
 14297                           plusw1	equ	0xFE3
 14298                           fsr1h	equ	0xFE2
 14299                           fsr1l	equ	0xFE1
 14300                           indf2	equ	0xFDF
 14301                           postinc2	equ	0xFDE
 14302                           postdec2	equ	0xFDD
 14303                           plusw2	equ	0xFDB
 14304                           fsr2h	equ	0xFDA
 14305                           fsr2l	equ	0xFD9
 14306                           status	equ	0xFD8
 14307                           tosu	equ	0xFFF
 14308                           tosh	equ	0xFFE
 14309                           tosl	equ	0xFFD
 14310                           pclath	equ	0xFFA
 14311                           tblptru	equ	0xFF8
 14312                           tblptrh	equ	0xFF7
 14313                           tblptrl	equ	0xFF6
 14314                           tablat	equ	0xFF5
 14315                           prodh	equ	0xFF4
 14316                           prodl	equ	0xFF3
 14317                           intcon	equ	0xFF2
 14318                           intcon2	equ	0xFF1
 14319                           postinc0	equ	0xFEE
 14320                           wreg	equ	0xFE8
 14321                           indf1	equ	0xFE7
 14322                           plusw1	equ	0xFE3
 14323                           fsr1h	equ	0xFE2
 14324                           fsr1l	equ	0xFE1
 14325                           indf2	equ	0xFDF
 14326                           postinc2	equ	0xFDE
 14327                           postdec2	equ	0xFDD
 14328                           plusw2	equ	0xFDB
 14329                           fsr2h	equ	0xFDA
 14330                           fsr2l	equ	0xFD9
 14331                           status	equ	0xFD8
 14332                           
 14333                           	psect	text79
 14334  000000                     __ptext79:
 14335                           	opt stack 0
 14336                           tosu	equ	0xFFF
 14337                           tosh	equ	0xFFE
 14338                           tosl	equ	0xFFD
 14339                           pclath	equ	0xFFA
 14340                           tblptru	equ	0xFF8
 14341                           tblptrh	equ	0xFF7
 14342                           tblptrl	equ	0xFF6
 14343                           tablat	equ	0xFF5
 14344                           prodh	equ	0xFF4
 14345                           prodl	equ	0xFF3
 14346                           intcon	equ	0xFF2
 14347                           intcon2	equ	0xFF1
 14348                           postinc0	equ	0xFEE
 14349                           wreg	equ	0xFE8
 14350                           indf1	equ	0xFE7
 14351                           plusw1	equ	0xFE3
 14352                           fsr1h	equ	0xFE2
 14353                           fsr1l	equ	0xFE1
 14354                           indf2	equ	0xFDF
 14355                           postinc2	equ	0xFDE
 14356                           postdec2	equ	0xFDD
 14357                           plusw2	equ	0xFDB
 14358                           fsr2h	equ	0xFDA
 14359                           fsr2l	equ	0xFD9
 14360                           status	equ	0xFD8
 14361                           
 14362                           	psect	rparam
 14363  0000                     tosu	equ	0xFFF
 14364                           tosh	equ	0xFFE
 14365                           tosl	equ	0xFFD
 14366                           pclath	equ	0xFFA
 14367                           tblptru	equ	0xFF8
 14368                           tblptrh	equ	0xFF7
 14369                           tblptrl	equ	0xFF6
 14370                           tablat	equ	0xFF5
 14371                           prodh	equ	0xFF4
 14372                           prodl	equ	0xFF3
 14373                           intcon	equ	0xFF2
 14374                           intcon2	equ	0xFF1
 14375                           postinc0	equ	0xFEE
 14376                           wreg	equ	0xFE8
 14377                           indf1	equ	0xFE7
 14378                           plusw1	equ	0xFE3
 14379                           fsr1h	equ	0xFE2
 14380                           fsr1l	equ	0xFE1
 14381                           indf2	equ	0xFDF
 14382                           postinc2	equ	0xFDE
 14383                           postdec2	equ	0xFDD
 14384                           plusw2	equ	0xFDB
 14385                           fsr2h	equ	0xFDA
 14386                           fsr2l	equ	0xFD9
 14387                           status	equ	0xFD8
 14388                           
 14389                           	psect	temp
 14390  00006F                     btemp:
 14391                           	opt stack 0
 14392  00006F                     	ds	1
 14393  0000                     int$flags	set	btemp
 14394                           tosu	equ	0xFFF
 14395                           tosh	equ	0xFFE
 14396                           tosl	equ	0xFFD
 14397                           pclath	equ	0xFFA
 14398                           tblptru	equ	0xFF8
 14399                           tblptrh	equ	0xFF7
 14400                           tblptrl	equ	0xFF6
 14401                           tablat	equ	0xFF5
 14402                           prodh	equ	0xFF4
 14403                           prodl	equ	0xFF3
 14404                           intcon	equ	0xFF2
 14405                           intcon2	equ	0xFF1
 14406                           postinc0	equ	0xFEE
 14407                           wreg	equ	0xFE8
 14408                           indf1	equ	0xFE7
 14409                           plusw1	equ	0xFE3
 14410                           fsr1h	equ	0xFE2
 14411                           fsr1l	equ	0xFE1
 14412                           indf2	equ	0xFDF
 14413                           postinc2	equ	0xFDE
 14414                           postdec2	equ	0xFDD
 14415                           plusw2	equ	0xFDB
 14416                           fsr2h	equ	0xFDA
 14417                           fsr2l	equ	0xFD9
 14418                           status	equ	0xFD8
 14419                           tosu	equ	0xFFF
 14420                           tosh	equ	0xFFE
 14421                           tosl	equ	0xFFD
 14422                           pclath	equ	0xFFA
 14423                           tblptru	equ	0xFF8
 14424                           tblptrh	equ	0xFF7
 14425                           tblptrl	equ	0xFF6
 14426                           tablat	equ	0xFF5
 14427                           prodh	equ	0xFF4
 14428                           prodl	equ	0xFF3
 14429                           intcon	equ	0xFF2
 14430                           intcon2	equ	0xFF1
 14431                           postinc0	equ	0xFEE
 14432                           wreg	equ	0xFE8
 14433                           indf1	equ	0xFE7
 14434                           plusw1	equ	0xFE3
 14435                           fsr1h	equ	0xFE2
 14436                           fsr1l	equ	0xFE1
 14437                           indf2	equ	0xFDF
 14438                           postinc2	equ	0xFDE
 14439                           postdec2	equ	0xFDD
 14440                           plusw2	equ	0xFDB
 14441                           fsr2h	equ	0xFDA
 14442                           fsr2l	equ	0xFD9
 14443                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    1358
    Data        1
    BSS         334
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     76     110
    BANK0           128     16      98
    BANK1           256      0     220
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    readTemp_Single@buf	PTR unsigned int  size(1) Largest target is 2
		 -> temperature(COMRAM[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 

    getDate@p4	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getDate@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getDate@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getDate@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getTime@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getTime@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getTime@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    Update_Matrix@buf	PTR unsigned char  size(1) Largest target is 32
		 -> Dis_Buff(BANK0[32]), 

    RTOS_DispatchTask@function	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    RTOS_DeleteTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    S428task$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    TaskArray.pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    RTOS_SetTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 


Critical Paths under _main in COMRAM

    _init_ds18b20->_write_byte
    _Init7221->_Cmd7221
    _Cmd7221->_Send_Byte_7221
    _DS3231_init->_DS3231_Write
    _time_set_yr->_setDate
    _time_set_mt->_setDate
    _time_set_min->_setTime
    _time_set_hr->_setTime
    _setTime->_DS3231_Write
    _time_set_dy->_setDate
    _time_set_dt->_setDate
    _setDate->_DS3231_Write
    _decimal_to_bcd->___lbmod
    _DS3231_Write->_decimal_to_bcd
    _putchar_b_buf->___lbmod
    _time_led->_BMP085Pressure
    _readTemp_Single->___lwmod
    _write_byte->_write_bit
    _FillBuf->___lbmod
    _BMP085Pressure->_BMP085GetPressure
    _BMP085GetTemp->___aldiv
    _BMP085GetPressure->___fttol
    ___fttol->___ftmul
    ___ftmul->___altoft
    ___altoft->___ftpack
    ___aldiv->___lmul
    _home_temp->_putchar_down
    _scroll_left->_Update_Matrix
    _putchar_down_s->___lbmod
    _putchar_down->___lwmod
    _Update_Matrix->_Send_Byte_7221
    _pic_to_led->_pixel_off
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    _GetTime->_getDate
    _getTime->_DS3231_Read
    _getDate->_DS3231_Read
    _DS3231_Read->_I2C_restart
    _DS3231_Read->_I2C_start
    _I2C_write->_I2C_idle
    _I2C_stop->_I2C_idle
    _I2C_start->_I2C_idle
    _I2C_restart->_I2C_idle
    _I2C_read_noack->_I2C_idle

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INT0_ISR->i2_RTOS_SetTask

Critical Paths under _main in BANK0

    _main->_RTOS_DispatchTask
    _BMP085Pressure->_BMP085GetPressure

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  241245
                                             75 COMRAM     1     1      0
                  _RTOS_DispatchTask
                       _RTOS_SetTask
                  _SYSTEM_Initialize
                       _clear_matrix
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2028
                        _DS3231_init
                           _I2C_Init
                           _Init7221
                     _Interrupt_Init
                          _Port_Init
                          _RTOS_Init
                           _TMR1Init
                  _bmp085Calibration
                       _init_ds18b20
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         0     0      0     232
                           _ow_reset
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _bmp085Calibration                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTOS_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init7221                                             0     0      0     617
                            _Cmd7221
 ---------------------------------------------------------------------------------
 (3) _Cmd7221                                              3     2      1     617
                                             16 COMRAM     3     2      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DS3231_init                                          0     0      0    1179
                       _DS3231_Write
 ---------------------------------------------------------------------------------
 (1) _RTOS_DispatchTask                                    8     8      0  230298
                                              8 BANK0      8     8      0
                            _GetTime *
                    _RTOS_DeleteTask
                      _default_state *
                          _home_temp *
                          _key_press *
                           _time_led *
                        _time_set_dt *
                        _time_set_dy *
                        _time_set_hr *
                       _time_set_min *
                        _time_set_mt *
                        _time_set_yr *
 ---------------------------------------------------------------------------------
 (2) _time_set_yr                                          0     0      0   28577
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_mt                                          0     0      0   24947
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_min                                         0     0      0   27314
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _time_set_hr                                          0     0      0   27413
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                       _clear_matrix
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (3) _setTime                                              3     1      2    5580
                                             27 COMRAM     3     1      2
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (2) _time_set_dy                                          0     0      0   24947
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_dt                                          0     0      0   28577
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (3) _setDate                                              4     1      3    6843
                                             27 COMRAM     4     1      3
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (4) _decimal_to_bcd                                       3     3      0    3692
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write                                         2     1      1    1179
                                             25 COMRAM     2     1      1
                          _I2C_start
                           _I2C_stop
                          _I2C_write
                     _decimal_to_bcd (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_b_buf                                        7     6      1    5975
                                             22 COMRAM     7     6      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (2) _time_led                                             0     0      0   38108
                     _BMP085Pressure
                            _FillBuf
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                    _readTemp_Single
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _readTemp_Single                                     10     7      3    2901
                                             26 COMRAM    10     7      3
                            ___lwdiv
                            ___lwmod
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (3) _write_byte                                           5     5      0     198
                                             15 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (4) _write_bit                                            1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _read_byte                                            4     4      0     136
                                             14 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (5) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ow_reset                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _FillBuf                                              3     3      0    4169
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _BMP085Pressure                                       1     1      0   17383
                                             74 COMRAM     1     1      0
                  _BMP085GetPressure
                      _BMP085GetTemp
                       _BMP085ReadUT
                       _bmp085ReadUP
 ---------------------------------------------------------------------------------
 (4) _bmp085ReadUP                                        13     9      4       0
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _BMP085ReadUT                                         5     1      4       0
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _BMP085GetTemp                                       16    12      4    5206
                                             40 COMRAM    16    12      4
                       _BMP085ReadUT (ARG)
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _BMP085GetPressure                                   24    20      4   12146
                                             62 COMRAM    12     8      4
                                              0 BANK0      8     8      0
                            ___aldiv
                           ___altoft
                            ___ftmul
                            ___fttol
                            ___lldiv
                             ___lmul
                       _bmp085ReadUP (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8    2098
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     549
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     448
                                             47 COMRAM    15    11      4
                           ___altoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    3106
                                             32 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2625
                                             22 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2344
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8    2909
                                             26 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _key_press                                            1     1      0      77
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _home_temp                                            1     1      0   24756
                                             36 COMRAM     1     1      0
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                       _clear_matrix
                            _getTime
                         _pic_to_led
                       _putchar_down
                     _putchar_down_s
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _scroll_left                                          5     5      0    1526
                                             20 COMRAM     5     5      0
                      _Update_Matrix
 ---------------------------------------------------------------------------------
 (3) _putchar_down_s                                      10     9      1    1798
                                             22 COMRAM    10     9      1
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_down                                        10     9      1    2414
                                             26 COMRAM    10     9      1
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Update_Matrix                                        4     3      1    1223
                                             16 COMRAM     4     3      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (4) _Send_Byte_7221                                       2     2      0     102
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _pic_to_led                                           7     6      1    1124
                                             19 COMRAM     7     6      1
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (4) _pixel_on                                             4     3      1     273
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _pixel_off                                            5     4      1     273
                                             14 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (1) _clear_matrix                                         1     1      0      99
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1002
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1    2234
                                             18 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1    1396
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _RTOS_SetTask                                         9     3      6    8820
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _RTOS_DeleteTask                                      9     7      2    2086
                                             14 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _default_state                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              0     0      0    3047
                            _getDate
                            _getTime
 ---------------------------------------------------------------------------------
 (3) _getTime                                              3     0      3    1554
                                             19 COMRAM     3     0      3
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (3) _getDate                                              4     0      4    1493
                                             19 COMRAM     4     0      4
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (4) _bcd_to_decimal                                       2     2      0      62
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _DS3231_Read                                          2     2      0     751
                                             17 COMRAM     2     2      0
                     _I2C_read_noack
                        _I2C_restart
                          _I2C_start
                           _I2C_stop
                          _I2C_write
 ---------------------------------------------------------------------------------
 (4) _I2C_write                                            1     1      0      31
                                             15 COMRAM     1     1      0
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_stop                                             0     0      0       0
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_start                                            2     1      1     393
                                             15 COMRAM     2     1      1
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_restart                                          2     1      1     259
                                             15 COMRAM     2     1      1
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_read_noack                                       0     0      0       0
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_idle                                             1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           5     5      0     344
                                              9 COMRAM     5     5      0
                           _INT0_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0_ISR                                             0     0      0     344
                     i2_RTOS_SetTask
 ---------------------------------------------------------------------------------
 (9) i2_RTOS_SetTask                                       9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTOS_DispatchTask
     _GetTime *
       _getDate
         _DS3231_Read
           _I2C_read_noack
             _I2C_idle
           _I2C_restart
             _I2C_idle
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
         _bcd_to_decimal
       _getTime
         _DS3231_Read
           _I2C_read_noack
             _I2C_idle
           _I2C_restart
             _I2C_idle
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
         _bcd_to_decimal
     _RTOS_DeleteTask *
     _default_state *
     _home_temp *
       _RTOS_DeleteTask
       _RTOS_SetTask
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clear_matrix
       _getTime
         _DS3231_Read
           _I2C_read_noack
             _I2C_idle
           _I2C_restart
             _I2C_idle
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
         _bcd_to_decimal
       _pic_to_led
         _pixel_off
         _pixel_on
       _putchar_down
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
       _putchar_down_s
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _key_press *
     _time_led *
       _BMP085Pressure
         _BMP085GetPressure
           ___aldiv
             ___lmul (ARG)
           ___altoft
             ___ftpack
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___lldiv
           ___lmul
           _bmp085ReadUP (ARG)
         _BMP085GetTemp
           _BMP085ReadUT (ARG)
           ___aldiv (ARG)
             ___lmul (ARG)
           ___lmul (ARG)
         _BMP085ReadUT
         _bmp085ReadUP
       _FillBuf
         ___lbdiv
         ___lbmod
           ___lbdiv (ARG)
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _readTemp_Single
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _ow_reset
         _read_byte
           _read_bit
         _write_byte
           _write_bit
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _time_set_dt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_dy *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_hr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _clear_matrix
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_min *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_mt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_yr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
   _RTOS_SetTask
   _SYSTEM_Initialize
     _DS3231_init
       _DS3231_Write
         _I2C_start
           _I2C_idle
         _I2C_stop
           _I2C_idle
         _I2C_write
           _I2C_idle
         _decimal_to_bcd (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _I2C_Init
     _Init7221
       _Cmd7221
         _Send_Byte_7221
     _Interrupt_Init
     _Port_Init
     _RTOS_Init
     _TMR1Init
     _bmp085Calibration
     _init_ds18b20
       _ow_reset
       _write_byte
         _write_bit
     _init_uart
   _clear_matrix

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     i2_RTOS_SetTask
   _TMR0_ISR
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DC       7       85.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      62       5       76.6%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     4C      6E       1       87.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1AC      34        0.0%
DATA                 0      0     1AC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Mar 02 16:06:29 2017

                   ??_Interrupt_Init 000F                         ___altoft@exp 001F  
                                 PL2 0D08                                   PL4 0B96  
                                 PL6 0BC4                                   PL8 0D1E  
                      ___altoft@sign 0020                                   _B3 0091  
                                 _B4 008D                                   _B5 0089  
                                 _B6 0058                                   _B7 0054  
                                 _X1 0060                                   _X2 005C  
                                 _X3 0095                                   _b1 009F  
                                 _b2 009D                                   _mc 009B  
                                 _md 0099                          __CFG_BORV$3 000000  
                    ??_Update_Matrix 0012                         _bmp085ReadUP 19AE  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                     _decimal_to_bcd 2186                   __size_of_I2C_start 002A  
                       __CFG_CP2$OFF 000000                    ??_RTOS_DeleteTask 0011  
                 __size_of_I2C_write 001C                                  PL10 0968  
                                PL20 0366                                  PL12 12F2  
                                PL30 113E                                  PL22 15AA  
                                PL14 0352                                  PL40 0BF4  
                                PL32 0BEA                                  PL24 15BA  
                                PL16 112E                                  PL50 0402  
                                PL42 097C                                  PL34 038A  
                                PL26 15CE                                  PL18 0644  
                                PL60 0AC0                                  PL52 0418  
                                PL44 03DA                                  PL36 03B6  
                                PL28 0374                                  PL70 13BC  
                                PL62 07DC                                  PL54 042A  
                                PL46 0C00                                  PL38 03C8  
                                PL80 0986                                  PL72 2128  
                                PL64 0460                                  PL56 043C  
                                PL48 03F6                                  PL90 18A2  
                                PL82 0ACA                                  PL74 046A  
                                PL66 07EC                                  PL58 044E  
                                PL92 0656                                  PL84 181C  
                                PL76 1912                                  PL68 07FC  
                                PL94 047E                                  PL86 1C14  
                                PL78 0650                                  PL96 1826  
                                PL88 0474                                  PL98 1300  
                                l320 2202                                  l321 2204  
                                l401 1690                                  l330 1EBE  
                                l410 15FC                                  l146 2314  
                                l163 208E                                  l227 1838  
                                l244 1092                                  l173 20B8  
                                l181 22C8                                  l318 21FA  
                                l192 23CE                                  l374 1B00  
                                l454 1C2E                                  l383 1A96  
                                l703 0CB6                                  l632 11DE  
                                l458 1C6C                                  l811 1E20  
                                l716 08A0                                  l813 1E3E  
                                l805 1E06                                  l646 0A3E  
                                l663 0FF4                                  l807 1E0E  
                                l656 0A8E                                  l744 0742  
                                l809 1E16                                  l676 051C  
                                l889 21E8                         __CFG_CPB$OFF 000000  
                                _PEN 007E2A                         __CFG_CPD$OFF 000000  
                                _SEN 007E28                                  _OSS BAC7  
                                _R_W 007E3A                                  _ac1 0064  
                                _ac2 00A9                                  _ac3 00A7  
                                _ac4 00A5                                  _ac5 00A3  
                                _ac6 00A1                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
                               PL100 15DE                                 PL110 0D3C  
                               PL102 191A                                 PL120 1224  
                               PL112 098C                                 PL104 1924  
                               PL130 0C14                                 PL122 080C  
                               PL114 192E                                 PL106 065C  
                               PL140 13CA                                 PL132 1046  
                               PL124 0C0A                                 PL116 0AD4  
                               PL108 0D32                                 PL150 0486  
                               PL142 0D42                                 PL134 1C1E  
                               PL126 15E8                                 PL118 18AC  
                               PL160 0814                                 PL152 066C  
                               PL144 0666                                 PL136 0C1E  
                               PL128 0ADE                                 PL170 1056  
                               PL162 0672                                 PL154 0AF0  
                               PL146 1050                                 PL138 0C28  
                               PL172 0AF6                                 PL164 081A  
                               PL156 0996                                 PL148 0AE8  
                               PL166 0678                                 PL158 15F2  
                               PL168 067E                         __CFG_LVP$OFF 000000  
                      I2C_start@_R_W 0010                         _putchar_down 168C  
                       __CFG_WDT$OFF 000000                                 l1003 023A  
                               l1056 1D2A                                 l1257 17B6  
                               l1269 17FC                                 l1447 1DAE  
                               l5000 1468                                 l1457 1E76  
                               l1394 199C                                 l5004 147C  
                               l5020 1B8E                                 l5100 151C  
                               l5030 1324                                 l5102 1520  
                               l5120 1FEC                                 l5122 1FF0  
                               l5018 1B82                                 l5034 133E  
                               l5106 1534                                 l6002 0C54  
                               l5116 1FE6                                 l5132 2008  
                               l5140 21B4                                 l5052 1366  
                               l6020 0C8A                                 l6100 0914  
                               l5062 1382                                 l6014 0C7C  
                               l6102 0928                                 l5128 2000  
                               l5048 1362                                 l5072 14A6  
                               l5160 1950                                 l5240 1F36  
                               l6200 12C4                                 l6008 0C70  
                               l5410 179A                                 l5402 1724  
                               l5330 1D86                                 l5058 137E  
                               l5090 14F8                                 l5074 14B0  
                               l5162 195C                                 l6026 0C94  
                               l6034 0CA2                                 l6106 093E  
                               l6114 0686                                 l5148 21CA  
                               l5340 1DA4                                 l5332 1D8A  
                               l5172 198E                                 l5164 1960  
                               l5316 0210                                 l5260 1F8E  
                               l6108 095C                                 l6060 0852  
                               l6044 0822                                 l6132 06EA  
                               l6124 06BA                                 l5350 1E56  
                               l5502 1692                                 l5094 1508  
                               l6206 12D2                                 l6222 1E22  
                               l6038 0CFC                                 l6054 083A  
                               l5416 17A0                                 l5328 1D7E  
                               l5352 1E5A                                 l5512 16F8  
                               l5280 19D0                                 l5256 1F6E  
                               l6208 12EA                                 l6072 0870  
                               l6144 073A                                 l6136 0706  
                               l6160 07CC                                 l5418 17A2  
                               l5450 1B48                                 l5186 1EC2  
                               l5098 1510                                 l5282 19E0  
                               l6090 08C2                                 l6066 085E  
                               l5426 2244                                 l4812 239C  
                               l5356 1E6C                                 l5348 1E4E  
                               l5444 1B02                                 l5532 15FE  
                               l5604 1C30                                 l4820 17BE  
                               l5276 19B0                                 l6180 126A  
                               l6172 1250                                 l6164 1230  
                               l6092 08D4                                 l6252 1068  
                               l6260 108C                                 l5366 2358  
                               l5542 1664                                 l5622 1C7A  
                               l5614 1C5C                                 l4830 17E8  
                               l4822 17C2                                 l5278 19C0  
                               l5286 19FA                                 l6190 129A  
                               l6182 126E                                 l6094 08E4  
                               l6078 087A                                 l6086 088C  
                               l6262 1098                                 l5376 183C  
                               l5448 1B3C                                 l4832 17F2  
                               l4824 17D0                                 l5288 1A14  
                               l5720 0E4A                                 l5480 1ADE  
                               l6192 12A0                                 l6176 125E  
                               l6096 08F6                                 l6272 1108  
                               l6256 1080                                 l5386 186A  
                               l5562 0B22                                 l5474 1A98  
                               l6194 12A8                                 l6098 0906  
                               l6274 1122                                 l6258 108A  
                               l4860 2080                                 l5388 186C  
                               l4828 17DC                                 l5564 0B26  
                               l5708 0E32                                 l5820 09F8  
                               l6268 10D2                                 l6276 1126  
                               l4846 180E                                 l5726 1FC0  
                               l5558 0AFE                                 l5654 0D4C  
                               l5478 1AD2                                 l5902 0FE0  
                               l5814 09EE                                 l5750 1174  
                               l6294 1D1C                                 l4880 20AA  
                               l4960 1D3E                                 l5832 0A16  
                               l5808 09D2                                 l5840 0A2A  
                               l5912 0490                                 l5752 117A  
                               l5744 1158                                 l4858 207E  
                               l5578 0B5A                                 l5690 0DBA  
                               l5666 0D78                                 l5906 103A  
                               l5850 0A86                                 l5826 0A0C  
                               l5922 04B2                                 l5770 11AE  
                               l4972 13EC                                 l5860 0F66  
                               l5852 0AA4                                 l5940 04EC  
                               l5764 119C                                 l4878 20A8  
                               l5678 0D8A                                 l5870 0F8C  
                               l5854 0AB4                                 l5934 04DA  
                               l5790 1218                                 l5758 1192  
                               l4984 141C                                 l5960 054C  
                               l5928 04CE                                 l5776 11B8  
                               l5784 11CA                                 l4986 1428  
                               l4978 1404                                 l5882 0FB2  
                               l5970 05A4                                 l5962 055C  
                               l5946 04F6                                 l5954 0508  
                               l4996 145A                                 l4988 142C  
                               l5876 0FA8                                 l5796 09A8  
                               l5980 05F4                                 l5972 05B2  
                               l5964 056E                                 l5788 1208  
                               l5894 0FCE                                 l5974 05C0  
                               l5966 0584                                 l5958 053A  
                               l5888 0FC4                                 l5976 05CE  
                               l5968 0596                                 l5984 0606  
                               l5992 0C34                                 l5978 05E2  
                               l5986 0638                                 STR_1 BFE9  
                   ow_reset@presence 0010                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                       _DS3231_Write 22E8                                 u4004 1F46  
                               u4005 1F42                                 u4210 175C  
                               u4034 1F86                                 u4035 1F82  
                               u4221 1792                                 u4070 0196  
                               u4055 0EBA                                 u4065 009C  
                               u4314 16D4                                 u4315 16D0  
                               u4075 018C                                 u5107 21EA  
                               u5117 1F90                                 u5207 19EA  
                               u5127 229C                                 u4520 1154  
                               u5217 2262                                 u5137 22A8  
                               u4354 1640                                 u4355 163C  
                               u5227 1C62                                 u3811 149E  
                               u5147 1E8A                                 u5237 166A  
                               u5157 1E9A                                 u5077 1CDA  
                               u3830 14CE                                 u5247 16FE  
                               u3751 131A                                 u5167 1EAE  
                               u5087 1F62                                 u5177 19B6  
                               u5097 21DE                                 u4570 09A4  
                               u3771 1334                                 u3835 14C6  
                               u5187 19C6                                 _RCEN 007E2B  
                               u5197 19D6                                 u4841 1292  
                               u3984 222C                                 u3985 2228  
                               u3994 2148                                 u3995 2144  
                               u4988 110C                                 _TMR0 000FD6  
                               _RSEN 007E29                         _RTOS_SetTask 1830  
                       __CFG_PWRT$ON 000000                                 _Font BAC8  
                    __end_of_Cmd7221 225C                      I2C_restart@_R_W 0010  
                               _main 1CD4                         ___ftpack@arg 000F  
                       ___ftpack@exp 0012                     __end_of_I2C_Init 231A  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 006F                        write_byte@val 0012  
                   __end_of_I2C_idle 23AC                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
            __size_ofi2_RTOS_SetTask 0064                     __end_of_I2C_stop 23D4  
                      __CFG_IESO$OFF 000000                      __end_of_FillBuf 0B96  
                    __end_of_GetTime 2128                     ??_I2C_read_noack 0010  
                      __CFG_MCLRE$ON 000000                         ___ftmul@cntr 002E  
                       ___param_bank 000000                         ___ftmul@sign 002F  
               __size_of_I2C_restart 002A                __size_of_BMP085ReadUT 001E  
                       ___fttol@exp1 003E                         ___fttol@lval 003A  
             __end_of_decimal_to_bcd 21AC                 RTOS_SetTask@taskFunc 000F  
                      I2C_write@data 0010                        _putchar_b_buf 1A8E  
                   __end_of_INT0_ISR 2344                      __end_of___aldiv 148E  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___lbdiv 200C  
                    __end_of___lbmod 21D2                __end_of_default_state 23E0  
                    __end_of___lldiv 19AE                      __end_of___ftmul 13BC  
                              _T0CON 000FD5                      __end_of___fttol 1546  
                    __end_of___lwdiv 1DB8                      __end_of___lwmod 1E80  
                              i2l227 154E                                i2l295 1A40  
                              i2l299 1A7A                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _SPBRG 000FAF  
                              _PORTB 000F81                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _SSPIF 007CF3                        __CFG_WRT0$OFF 000000  
                    __end_of_getDate 1912                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                 __end_of_clear_matrix 2368  
                ___lmul@multiplicand 0013                                _TTime 00CB  
                              _FontS BFC8                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                      __end_of_getTime 1C14  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                   __end_of_TMR0_ISR 23C8                     __end_of_TMR1_ISR 238C  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                   __end_of_TMR1Init 23BA                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                                _fract BAB7  
                      pic_to_led@pic 0014                        ___ftpack@sign 0013  
                    __end_of_setDate 1F32                     I2C_restart@adres 0011  
                     write_byte@temp 0013                      __end_of_setTime 206A  
                     __pbitbssCOMRAM 0368                                pclath 000FFA  
                              tablat 000FF5                                plusw1 000FE3  
                              plusw2 000FDB                                status 000FD8  
                  __end_of_I2C_start 2094                         _BMP085ReadUT 225C  
                  __end_of_I2C_write 22CE                      ___lbdiv@divisor 000F  
                       __end_ofPL100 15E8                         __end_ofPL110 0D42  
                       __end_ofPL102 1924                         __end_ofPL120 122E  
                       __end_ofPL112 0996                         __end_ofPL104 192E  
                       __end_ofPL130 0C1E                         __end_ofPL122 0814  
                       __end_ofPL114 1938                         __end_ofPL106 0666  
                       __end_ofPL140 13D2                         __end_ofPL132 1050  
                       __end_ofPL124 0C14                         __end_ofPL116 0ADE  
                       __end_ofPL108 0D3C                         __end_ofPL150 048E  
                       __end_ofPL142 0D4A                         __end_ofPL134 1C28  
                       __end_ofPL126 15F2                         __end_ofPL118 18B6  
                       __end_ofPL160 081A                         __end_ofPL152 0672  
                       __end_ofPL144 066C                         __end_ofPL136 0C28  
                       __end_ofPL128 0AE8                         __end_ofPL170 105C  
                       __end_ofPL162 0678                         __end_ofPL154 0AF6  
                       __end_ofPL146 1056                         __end_ofPL138 0C32  
                       __end_ofPL172 0AFC                         __end_ofPL164 0820  
                       __end_ofPL156 099C                         __end_ofPL148 0AF0  
                       __end_ofPL166 067E                         __end_ofPL158 15F8  
                       __end_ofPL168 0684                   __size_of_RTOS_Init 0010  
                    ___lbdiv@counter 0011                      write_bit@bitval 000F  
                    __initialization 1DB8                         __end_of_Font BFC8  
                   __end_of_Init7221 203C               __size_of_BMP085GetTemp 0106  
                       __end_of_main 1D22                      _readTemp_Single 0D4A  
                     ?_putchar_b_buf 0017                      ?_decimal_to_bcd 0001  
        ?_INTERRUPT_InterruptManager 0001                       __CFG_OSC$HSPLL 000000  
              RTOS_SetTask@taskDelay 0011                      decimal_to_bcd@d 0019  
                             ??_main 004C                        ___fttol@sign1 0039  
                      __activetblptr 000002                     ??_Send_Byte_7221 000F  
                      ?_init_ds18b20 0001               _BMP085GetPressure$2268 00D2  
                     _putchar_down_s 15F8                            ??_Cmd7221 0012  
                    I2C_start@adress 0011                     __end_of___altoft 1BC8  
                   __end_of___ftpack 181C                               i2l6310 1A66  
                             i2l4686 1552                               i2l4696 157A  
                             i2l4698 157C                BMP085Pressure@getTemp 004B  
                          ??_FillBuf 0017                               _SPBRGH 000FB0  
                          ??_GetTime 0018                               _SSPADD 000FC8  
                             _SSPBUF 000FC9                        setDate@daySet 001F  
                  DS3231_Write@value 001A                               _TSTime 004D  
                     __CFG_XINST$OFF 000000                      Send_Byte_7221@i 0010  
                             ___lmul 1D22                    _RTOS_DispatchTask 105C  
                          ??___aldiv 0023                            ??___lbdiv 0010  
                     __CFG_STVREN$ON 000000                            ??___lbmod 0014  
                          ??___lldiv 0017                         ?_scroll_left 0001  
                          ??___ftmul 0027                            ??___fttol 0034  
                          ??___lwdiv 0013                     RTOS_DeleteTask@i 0017  
                          ??___lwmod 001A                               _en_put 0368  
                             _pic7x8 BA9B                       pic_to_led@mask 0017  
                 ?_RTOS_DispatchTask 0001                               _events 006E  
                   __end_of_read_bit 22B2                               clear_0 1DD0  
                             clear_1 1DDC                               clear_2 1DEA  
                          ??_getDate 0018                            ??_getTime 0017  
                     ??_init_ds18b20 0015                ___ftmul@f3_as_product 002B  
             __end_of_putchar_down_s 168C                         ?_time_set_dt 0001  
                       ?_time_set_dy 0001                         ?_time_set_hr 0001  
                  __end_of_RTOS_Init 239C                         ?_time_set_mt 0001  
                       ?_time_set_yr 0001                         __pdataCOMRAM 006E  
                          ?_I2C_Init 0001                   __size_of_Port_Init 001C  
                   __end_of_pixel_on 223E                  ??_RTOS_DispatchTask 00DA  
                          ??_setDate 001F                     __end_of_time_led 12F2  
                          ?_I2C_idle 0001                         __mediumconst BA9A  
                   __end_of_ow_reset 1EBC                            ??_setTime 001E  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                            ?_I2C_stop 0001  
                      _BMP085GetTemp 0E5E                     ___lbdiv@dividend 0010  
                  _SYSTEM_Initialize 20BE                      ___lbmod@divisor 0013  
                         __accesstop 0080              __end_of__initialization 1DF0  
                         ___altoft@c 0017                      ___lbmod@counter 0015  
                          ?_INT0_ISR 0001                      __CFG_PBADEN$OFF 000000  
                 ?_SYSTEM_Initialize 0001                       i2_RTOS_SetTask 1546  
                      ___rparam_used 000001              __end_of_readTemp_Single 0E5E  
                    _RTOS_DeleteTask 1720            __end_of_RTOS_DispatchTask 112E  
                         ___ftmul@f1 0021                           ___ftmul@f2 0024  
                      __end_of_FontS BFE9                           ___fttol@f1 0030  
                    ??_putchar_b_buf 0018                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 001C                            ?_TMR0_ISR 0001  
                          ?_TMR1_ISR 0001                            ?_TMR1Init 0001  
                      __end_of_fract BAC7                          pic_to_led@i 001A  
                        pic_to_led@j 0019                          pic_to_led@x 0018  
                         __end_ofPL2 0D1E                           __end_ofPL4 0BC4  
                         __end_ofPL6 0BEA                           __end_ofPL8 0D32  
                   ___lbdiv@quotient 0012                __size_of_clear_matrix 0012  
                    ?_putchar_down_s 0017                           ??_I2C_Init 000F  
                         ??_I2C_idle 000F                       ?_BMP085GetTemp 0029  
                         ??_I2C_stop 0010              __size_of_BMP085Pressure 0036  
                          ?_Init7221 0001            __end_of_SYSTEM_Initialize 20E6  
             RTOS_SetTask@taskPeriod 0013                           __pbssBANK0 0080  
                         __pbssBANK1 0100               __end_ofi2_RTOS_SetTask 15AA  
                      ??_DS3231_Read 0012                           ??_INT0_ISR 000A  
                 __size_of_home_temp 0158                        ??_DS3231_init 001C  
                 __size_of_key_press 0044                    _bmp085Calibration 1C84  
                 __size_of_init_uart 001A                   __size_of_read_byte 0038  
                  __end_of_Port_Init 2296                  BMP085GetPressure@Pp 00D6  
                       _clear_matrix 2356                      bcd_to_decimal@d 0010  
                 ?_bmp085Calibration 0001                              ?___lmul 000F  
                         ??_TMR0_ISR 0001                           ??_TMR1_ISR 0001  
                         ??_TMR1Init 000F                      _Timer0Interrupt 0067  
            i2RTOS_SetTask@taskDelay 0003                            ?___altoft 0017  
                            _ACKSTAT 007E2E                       ___lmul@product 0017  
                          ?___ftpack 000F                  ??_bmp085Calibration 000F  
                 __size_of_pixel_off 0028                __end_of_Update_Matrix 1EF8  
                            _INTCON2 000FF1              __size_of_bcd_to_decimal 0016  
                            _Cmd7221 223E                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                           ??_Init7221 0014  
                        setTime@hSet 001E                          setTime@mSet 001C  
                            _SSPSTAT 000FC7                          setTime@sSet 001D  
            __end_of_RTOS_DeleteTask 17AA                       setDate@dateSet 001C  
                    ?i2_RTOS_SetTask 0001            __end_of_bmp085Calibration 1CD4  
                            _FillBuf 0AFC                              _GetTime 210E  
                          ?_read_bit 0001                        ??_I2C_restart 0011  
               __end_of_init_ds18b20 210E                   __size_of_write_bit 0024  
                   Update_Matrix@buf 0011                     ?_readTemp_Single 001B  
                   ??_decimal_to_bcd 0017                              __Hparam 0000  
         __size_of_RTOS_DispatchTask 00D2                              __Lparam 0000  
                          _I2C_start 206A                            _I2C_write 22B2  
                          ?_pixel_on 000F                       setDate@yearSet 001E  
                          ?_time_led 0001                  __end_of_DS3231_Read 2186  
                          ?_ow_reset 0001                              ___aldiv 13D2  
                __end_of_DS3231_init 2356                              ___lbdiv 1FD8  
                    __size_of___lmul 004C                              ___lbmod 21AC  
                            ___lldiv 1938                              ___ftmul 130A  
                            ___fttol 148E                              ___lwdiv 1D6E  
                            ___lwmod 1E42                           ??___altoft 001B  
                            __pcinit 1DB8                           ??___ftpack 0014  
                            _getDate 18B6                              __ramtop 1000  
               __size_of_scroll_left 005C             readTemp_Single@time_flag 001C  
                            __ptext0 1CD4                              __ptext1 20BE  
                            __ptext2 22CE                              __ptext3 20E6  
                            _getTime 1BC8                              __ptext4 1C84  
                            __ptext5 23AC                              __ptext6 238C  
                            __ptext7 227A                              __ptext8 23D4  
                            __ptext9 200C                    __end_of_home_temp 07DC  
           readTemp_Single@timer_val 001D                      ??_BMP085GetTemp 002D  
                          _T1CONbits 000FCD              __size_of_Interrupt_Init 0006  
                         _pic_to_led 1AF8                    __end_of_key_press 1E42  
                  __end_of_init_uart 22E8                              _setDate 1EF8  
                  __end_of_read_byte 1FA2                     ___aldiv@dividend 001B  
                            _setTime 203C                              _scratch 0080  
               __size_of_time_set_dt 00D6                        putchar_down@i 0024  
               __size_of_time_set_dy 0148                        putchar_down@j 0023  
               __size_of_time_set_hr 0124                        putchar_down@k 0022  
                putchar_b_buf@symbol 0017                 __size_of_time_set_mt 01B6  
                      putchar_down@x 0021                 __size_of_time_set_yr 00E2  
         __size_of_SYSTEM_Initialize 0028                       __pintcode_body 1A22  
               end_of_initialization 1DF0                        ?_time_set_min 0001  
                       key_press@key 000F                        __Lmediumconst BA9A  
                            int_func 1A22                           ??_read_bit 000F  
                  __end_of_pixel_off 215E                     DS3231_Read@value 0013  
             __size_of_default_state 0006                   RTOS_DispatchTask@i 00E1  
                 RTOS_DispatchTask@j 00E0                      ___lldiv@divisor 0013  
                      RTOS_SetTask@i 0017                      ___lldiv@counter 001B  
                         ?_I2C_start 0010                           ?_I2C_write 0001  
                         ??_pixel_on 0010                           ??_time_led 004C  
                          _RCSTAbits 000FAB                     ___aldiv@quotient 0025  
                         ??_ow_reset 000F                     scroll_left@speed 0018  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                         read_byte@val 0011  
                __end_of_I2C_restart 20BE                            _PORTCbits 000F82  
                         _show_digit 0369              __size_of_I2C_read_noack 0012  
                  __end_of_write_bit 21F6                     ___lbmod@dividend 0014  
                          _TRISCbits 000F94                    __size_of_I2C_Init 0018  
                     _BMP085Pressure 1FA2                            _RTOS_Init 238C  
                  __size_of_I2C_idle 0010                    __size_of_I2C_stop 000C  
                   ?_RTOS_DeleteTask 000F                       ??_time_set_min 001F  
                        ___lbmod@rem 0016           __size_of_bmp085Calibration 0050  
                        _DS3231_Read 215E                            _TXSTAbits 000FAC  
                        _DS3231_init 2344                    __size_of_INT0_ISR 0014  
                        ___ftmul@exp 002A                     ??_putchar_down_s 0018  
                     __end_of___lmul 1D6E                          _BAUDCONbits 000FB8  
                      ?_bmp085ReadUP 000F                        __pidataCOMRAM 23E0  
                         _write_byte 1F32                    __size_of_TMR0_ISR 000E  
                  __size_of_TMR1_ISR 0012                       __end_of_pic7x8 BAB7  
                  __size_of_TMR1Init 000E                        _default_state 23DA  
                        ?_pic_to_led 0014                          __end_ofPL10 097C  
                        __end_ofPL20 0374                          __end_ofPL12 1300  
                        __end_ofPL30 114C                          __end_ofPL22 15BA  
                        __end_ofPL14 0366                          __end_ofPL40 0C00  
                        __end_ofPL32 0BF4                          __end_ofPL24 15CE  
                        __end_ofPL16 113E                          __end_ofPL50 0418  
                        __end_ofPL42 0986                          __end_ofPL34 03B6  
                        __end_ofPL26 15DE                          __end_ofPL18 0650  
                        __end_ofPL60 0ACA                          __end_ofPL52 042A  
                        __end_ofPL44 03F6                          __end_ofPL36 03C8  
                        __end_ofPL28 038A                          __end_ofPL70 13CA  
                        __end_ofPL62 07EC                          __end_ofPL54 043C  
                        __end_ofPL46 0C0A                          __end_ofPL38 03DA  
                        __end_ofPL80 098C                          __end_ofPL72 2136  
                        __end_ofPL64 046A                          __end_ofPL56 044E  
                        __end_ofPL48 0402                          __end_ofPL90 18AC  
                        __end_ofPL82 0AD4                          __end_ofPL74 0474  
                        __end_ofPL66 07FC                          __end_ofPL58 0460  
                        __end_ofPL92 065C                          __end_ofPL84 1826  
                        __end_ofPL76 191A                          __end_ofPL68 080C  
                        __end_ofPL94 0486                          __end_ofPL86 1C1E  
                        __end_ofPL78 0656                          __end_ofPL96 1830  
                        __end_ofPL88 047E                          __end_ofPL98 130A  
                start_initialization 1DB8               __end_of_BMP085Pressure 1FD8  
                     _bcd_to_decimal 231A                          __end_of_OSS BAC8  
                         ?_RTOS_Init 0001                        ?_putchar_down 001B  
                      ?_DS3231_Write 001A                __size_of_init_ds18b20 0028  
                      ?_RTOS_SetTask 000F                    __size_of_Init7221 0030  
            __size_of_Send_Byte_7221 0024                            _TaskArray 0100  
                        _I2C_restart 2094                          ??_I2C_start 0011  
                      clear_matrix@i 000F                          ??_I2C_write 0010  
                           ??___lmul 0017                            _Port_Init 227A  
              __end_of_putchar_b_buf 1AF8                       ??_bmp085ReadUP 0013  
                   __CFG_LPT1OSC$OFF 000000                           read_byte@i 0012  
                     ?_default_state 0001               __end_of_bcd_to_decimal 2330  
                  __size_of___altoft 0066                       _Interrupt_Init 23D4  
                  __size_of___ftpack 0072                         _init_ds18b20 20E6  
                        __pbssCOMRAM 004D                      ?_BMP085Pressure 0001  
                      __pcstackBANK0 00D2                     ??i2_RTOS_SetTask 0007  
                     ??_putchar_down 001C            RTOS_DispatchTask@function 00DE  
                           ?_Cmd7221 0011                       ??_DS3231_Write 001B  
                     ??_RTOS_SetTask 0015                 readTemp_Single@fptmp 0020  
                           ?_FillBuf 0001                             ?_GetTime 0001  
                      ?_BMP085ReadUT 000F                 BMP085GetPressure@_pu 003F  
                  __size_of_read_bit 001C                     ___lwdiv@dividend 000F  
                __size_of_pic_to_led 006A                    __CFG_CCP2MX$PORTC 000000  
                          __pintcode 0008                        __pmediumconst BA9A  
                           ?___aldiv 001B                             ?___lbdiv 000F  
             i2RTOS_SetTask@taskFunc 0001                             ?___lbmod 0013  
                           ?___lldiv 000F                           ?_Port_Init 0001  
                           ?___ftmul 0021                             ?___fttol 0030  
                           ?___lwdiv 000F                             ?___lwmod 0016  
                  __size_of_pixel_on 0024                             Cmd7221@i 0013  
                  __size_of_time_led 00C4                    __size_of_ow_reset 003C  
                        ?_write_byte 0001               __end_of_Interrupt_Init 23DA  
                           ?_getDate 0014         ??_INTERRUPT_InterruptManager 000A  
                          _arrayTail 0068                 __end_of_time_set_min 1224  
                           ?_getTime 0014                       _I2C_read_noack 2368  
                    ?_bcd_to_decimal 0001                             _I2C_Init 2302  
                           ?_setDate 001C                             _I2C_idle 239C  
                           ?_setTime 001C             i2RTOS_SetTask@taskPeriod 0005  
                           _I2C_stop 23C8                            _home_temp 0684  
                        ??_RTOS_Init 000F                     ___lwdiv@quotient 0014  
                          _key_press 1DFE                            _init_uart 22CE  
                          _read_byte 1F6A                           Cmd7221@adr 0012  
                         Cmd7221@val 0011                       ??_BMP085ReadUT 0013  
                    ___aldiv@divisor 001F                      ___aldiv@counter 0023  
                           _INT0_ISR 2330                             _LATDbits 000F8C  
                          getDate@p1 0017                            getDate@p2 0016  
                          getDate@p3 0015                            getDate@p4 0014  
                           _PIE1bits 000F9D                           pixel_off@x 0013  
                         pixel_off@y 000F                     readTemp_Single@i 0022  
             __size_of_Update_Matrix 003C  __size_of_INTERRUPT_InterruptManager 1A86  
                           _PIR1bits 000F9E                             FillBuf@i 0019  
                          _pixel_off 2136                     __CFG_WDTPS$32768 000000  
                          _time_flag 006B                        ??_scroll_left 0015  
                           _TMR0_ISR 23BA                             _TMR1_ISR 237A  
                           _TMR1Init 23AC                            getTime@p1 0016  
                          getTime@p2 0015                            getTime@p3 0014  
                          _timer_val 006C                  DS3231_Write@address 001B  
                    putchar_down_s@i 0020                      putchar_down_s@j 001F  
                    putchar_down_s@k 001E                      putchar_down_s@x 001D  
             __end_of_I2C_read_noack 237A             __size_of_readTemp_Single 0114  
                    ??_default_state 000F                      ?_Interrupt_Init 0001  
                  _BMP085GetPressure 0012                        ??_time_set_dt 0020  
                      ??_time_set_dy 0020                        ??_time_set_hr 001F  
                      ??_time_set_mt 0020                        ??_time_set_yr 0020  
              __end_of_BMP085GetTemp 0F64                          write_byte@i 0014  
                 ?_BMP085GetPressure 003F                             _Dis_Buff 00AB  
                         ?_home_temp 0001                             _Init7221 200C  
                         ?_key_press 0001                            _write_bit 21D2  
                         ?_init_uart 0001                    ___lmul@multiplier 000F  
                        _INTCON2bits 000FF1                     __size_of_Cmd7221 001E  
                         ?_read_byte 0001                  ??_BMP085GetPressure 0043  
                     _Send_Byte_7221 21F6                 __end_of_bmp085ReadUP 1A22  
                       ?_DS3231_Read 0001                  __size_of_write_byte 0038  
                  Update_Matrix@data 0012                     __size_of_FillBuf 009A  
                   __size_of_GetTime 001A                         ?_DS3231_init 0001  
                           __Hrparam 0000                      setDate@monthSet 001D  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                         ?_pixel_off 000F                 __end_of_putchar_down 1720  
                 DS3231_Read@address 0012                          ??_Port_Init 000F  
                  Send_Byte_7221@dat 000F                       key_press@count 0066  
               __end_of_DS3231_Write 2302                     __size_of___aldiv 00BC  
                   __size_of___lbdiv 0034                     __size_of___lbmod 0026  
               __end_of_RTOS_SetTask 18A2                     __size_of___lldiv 0076  
                           ___altoft 1B62                     __size_of___ftmul 00B2  
                   __size_of___fttol 00B8                      ?_I2C_read_noack 0001  
          __end_of_BMP085GetPressure 0352                     __size_of___lwdiv 004A  
                   __size_of___lwmod 003E                             ___ftpack 17AA  
            __size_of_decimal_to_bcd 0026                     __size_of_getDate 005C  
                   __size_of_getTime 004C                  __end_of_scroll_left 1C84  
                readTemp_Single@temp 0023                         ??_pic_to_led 0015  
                      _Update_Matrix 1EBC                      ___lwdiv@divisor 0011  
                   __size_of_setDate 003A                      ___lwdiv@counter 0013  
                   __size_of_setTime 002E                             __ptext10 223E  
                           __ptext11 2302                             __ptext20 23DA  
                           __ptext12 2344                             __ptext21 099C  
                           __ptext13 105C                             __ptext30 0D4A  
                           __ptext22 1DFE                             __ptext14 0684  
                           __ptext31 1F32                             __ptext23 122E  
                           __ptext15 114C                             __ptext40 0E5E  
                           __ptext32 21D2                             __ptext24 0F64  
                           __ptext16 210E                             __ptext41 0012  
                           __ptext33 1F6A                             __ptext25 203C  
                           __ptext17 0820                             __ptext50 15F8  
                           __ptext42 1D22                             __ptext34 2296  
                           __ptext26 1EF8                             __ptext18 0C32  
                           __ptext51 168C                             __ptext43 1938  
                           __ptext35 1E80                             __ptext27 2186  
                           __ptext19 048E                             __ptext60 21AC  
                           __ptext52 1EBC                             __ptext44 148E  
                           __ptext36 0AFC                             __ptext28 22E8  
                           __ptext61 1FD8                             __ptext53 21F6  
                           __ptext45 130A                             __ptext37 1FA2  
                           __ptext29 1A8E                             __ptext70 206A  
                           __ptext62 1830                             __ptext54 1AF8  
                           __ptext46 1B62                             __ptext38 19AE  
                           __ptext71 2094                             __ptext63 1720  
                           __ptext55 221A                             __ptext47 17AA  
                           __ptext39 225C                             __ptext72 2368  
                           __ptext64 1BC8                             __ptext56 2136  
                           __ptext48 13D2                             __ptext73 239C  
                           __ptext65 18B6                             __ptext57 2356  
                           __ptext49 1C28                             __ptext66 231A  
                           __ptext58 1E42                             __ptext75 237A  
                           __ptext67 215E                             __ptext59 1D6E  
                           __ptext76 23BA                             __ptext68 22B2  
                           __ptext77 2330                             __ptext69 23C8  
                           __ptext78 1546                             __ptext79 0000  
             __end_of_Send_Byte_7221 221A                           ?_write_bit 0001  
                __end_of_time_set_dt 0D08                  __end_of_time_set_dy 0968  
                __end_of_time_set_hr 0AC0                  __end_of_time_set_mt 0644  
                __end_of_time_set_yr 1046                       Update_Matrix@i 0014  
                     Update_Matrix@j 0013                        __size_of_main 004E  
                           _read_bit 2296                    putchar_b_buf@mask 001A  
                     putchar_b_buf@i 001D                       putchar_b_buf@j 001C  
                     putchar_b_buf@x 001B                         ?_I2C_restart 0010  
            RTOS_DeleteTask@taskFunc 000F                            pixel_on@x 0012  
                          pixel_on@y 000F                        ?_clear_matrix 0001  
           __size_of_RTOS_DeleteTask 008A                             _pixel_on 221A  
                 __end_of_pic_to_led 1B62                             _time_led 122E  
               putchar_down_s@symbol 0017                             _ow_reset 1E80  
              __size_of_time_set_min 00D8                             int$flags 006F  
                           _text_buf 0178   __end_of_INTERRUPT_InterruptManager 1A8E  
         _INTERRUPT_InterruptManager 0008                      i2RTOS_SetTask@i 0009  
                   ??_BMP085Pressure 004B                 __end_of_BMP085ReadUT 227A  
                     ?_Update_Matrix 0011                           _INTCONbits 000FF2  
                  ??_readTemp_Single 001E                          ??_home_temp 0025  
                       scroll_left@i 0019                         scroll_left@j 0016  
                       scroll_left@k 0017                      ?_Send_Byte_7221 0001  
                   BMP085GetTemp@_tu 0029                          ??_key_press 000F  
                        ??_init_uart 000F                          ??_read_byte 000F  
                 readTemp_Single@buf 001B                             intlevel2 0000  
                 readTemp_Single@tmp 0021                     ___lwmod@dividend 0016  
                   ___lldiv@dividend 000F                         _time_set_min 114C  
                     ??_clear_matrix 000F                          ??_pixel_off 0010  
                   ??_bcd_to_decimal 000F                          _scroll_left 1C28  
                 putchar_down@symbol 001B           __size_of_BMP085GetPressure 0340  
                       ??_write_byte 0010                      BMP085GetTemp@Tt 0035  
                        _temperature 0069                          _time_set_dt 0C32  
                   ___lldiv@quotient 0017                          _time_set_dy 0820  
                        _time_set_hr 099C                          _time_set_mt 048E  
                    ___lwmod@divisor 0018                          _time_set_yr 0F64  
                    ___lwmod@counter 001A                         ___aldiv@sign 0024  
              __size_of_bmp085ReadUP 0074              __size_of_putchar_down_s 0094  
                        ??_write_bit 000F               __size_of_putchar_b_buf 006A  
                 __end_of_write_byte 1F6A                __size_of_putchar_down 0094  
              __size_of_DS3231_Write 001A                 __size_of_DS3231_Read 0028  
              __size_of_RTOS_SetTask 0072                 __size_of_DS3231_init 0012  
