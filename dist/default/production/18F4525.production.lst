

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Fri Mar 24 14:50:25 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18F4525
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    97                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    98                           	psect	pa_nodes0,global,class=CODE,delta=1
    99  0000                     
   100                           ; Version 1.41
   101                           ; Generated 25/01/2017 GMT
   102                           ; 
   103                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   104                           ; All rights reserved.
   105                           ; 
   106                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   107                           ; 
   108                           ; Redistribution and use in source and binary forms, with or without modification, are
   109                           ; permitted provided that the following conditions are met:
   110                           ; 
   111                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   112                           ;        conditions and the following disclaimer.
   113                           ; 
   114                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   115                           ;        of conditions and the following disclaimer in the documentation and/or other
   116                           ;        materials provided with the distribution.
   117                           ; 
   118                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   119                           ;        software without specific prior written permission.
   120                           ; 
   121                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   122                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   123                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   124                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   125                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   126                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   127                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   128                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   129                           ; 
   130                           ; 
   131                           ; Code-generator required, PIC18F4525 Definitions
   132                           ; 
   133                           ; SFR Addresses
   134  0000                     tosu	equ	0xFFF
   135                           tosh	equ	0xFFE
   136                           tosl	equ	0xFFD
   137                           pclath	equ	0xFFA
   138                           tblptru	equ	0xFF8
   139                           tblptrh	equ	0xFF7
   140                           tblptrl	equ	0xFF6
   141                           tablat	equ	0xFF5
   142                           prodh	equ	0xFF4
   143                           prodl	equ	0xFF3
   144                           intcon	equ	0xFF2
   145                           intcon2	equ	0xFF1
   146                           wreg	equ	0xFE8
   147                           indf1	equ	0xFE7
   148                           plusw1	equ	0xFE3
   149                           fsr1h	equ	0xFE2
   150                           fsr1l	equ	0xFE1
   151                           indf2	equ	0xFDF
   152                           postinc2	equ	0xFDE
   153                           postdec2	equ	0xFDD
   154                           plusw2	equ	0xFDB
   155                           fsr2h	equ	0xFDA
   156                           fsr2l	equ	0xFD9
   157                           status	equ	0xFD8
   158                           
   159                           	psect	eeprom_data
   160  F00000  01 00 00 00 00 00 00 00 	db	1,0,0,0,0,0,0,0	;# 
   161  0000                     tosu	equ	0xFFF
   162                           tosh	equ	0xFFE
   163                           tosl	equ	0xFFD
   164                           pclath	equ	0xFFA
   165                           tblptru	equ	0xFF8
   166                           tblptrh	equ	0xFF7
   167                           tblptrl	equ	0xFF6
   168                           tablat	equ	0xFF5
   169                           prodh	equ	0xFF4
   170                           prodl	equ	0xFF3
   171                           intcon	equ	0xFF2
   172                           intcon2	equ	0xFF1
   173                           wreg	equ	0xFE8
   174                           indf1	equ	0xFE7
   175                           plusw1	equ	0xFE3
   176                           fsr1h	equ	0xFE2
   177                           fsr1l	equ	0xFE1
   178                           indf2	equ	0xFDF
   179                           postinc2	equ	0xFDE
   180                           postdec2	equ	0xFDD
   181                           plusw2	equ	0xFDB
   182                           fsr2h	equ	0xFDA
   183                           fsr2l	equ	0xFD9
   184                           status	equ	0xFD8
   185                           
   186                           	psect	idataCOMRAM
   187  002086                     __pidataCOMRAM:
   188                           	opt stack 0
   189                           
   190                           ;initializer for _pFont
   191  002086  97                 	db	low _dFont1
   192  002087  BE                 	db	high _dFont1
   193                           
   194                           ;initializer for _events
   195  002088  05                 	db	5
   196                           tosu	equ	0xFFF
   197                           tosh	equ	0xFFE
   198                           tosl	equ	0xFFD
   199                           pclath	equ	0xFFA
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           prodh	equ	0xFF4
   205                           prodl	equ	0xFF3
   206                           intcon	equ	0xFF2
   207                           intcon2	equ	0xFF1
   208                           wreg	equ	0xFE8
   209                           indf1	equ	0xFE7
   210                           plusw1	equ	0xFE3
   211                           fsr1h	equ	0xFE2
   212                           fsr1l	equ	0xFE1
   213                           indf2	equ	0xFDF
   214                           postinc2	equ	0xFDE
   215                           postdec2	equ	0xFDD
   216                           plusw2	equ	0xFDB
   217                           fsr2h	equ	0xFDA
   218                           fsr2l	equ	0xFD9
   219                           status	equ	0xFD8
   220                           
   221                           	psect	mediumconst
   222  00B8AC                     __pmediumconst:
   223                           	opt stack 0
   224  00B8AC  00                 	db	0
   225  00B8AD                     _dpowers:
   226                           	opt stack 0
   227  00B8AD  0001               	dw	1
   228  00B8AF  0000               	dw	0
   229  00B8B1  000A               	dw	10
   230  00B8B3  0000               	dw	0
   231  00B8B5  0064               	dw	100
   232  00B8B7  0000               	dw	0
   233  00B8B9  03E8               	dw	1000
   234  00B8BB  0000               	dw	0
   235  00B8BD  2710               	dw	10000
   236  00B8BF  0000               	dw	0
   237  00B8C1  86A0               	dw	34464
   238  00B8C3  0001               	dw	1
   239  00B8C5  4240               	dw	16960
   240  00B8C7  000F               	dw	15
   241  00B8C9  9680               	dw	38528
   242  00B8CB  0098               	dw	152
   243  00B8CD  E100               	dw	57600
   244  00B8CF  05F5               	dw	1525
   245  00B8D1  CA00               	dw	51712
   246  00B8D3  3B9A               	dw	15258
   247  00B8D5                     __end_of_dpowers:
   248                           	opt stack 0
   249  00B8D5                     _pic7x8:
   250                           	opt stack 0
   251  00B8D5  00                 	db	0
   252  00B8D6  00                 	db	0
   253  00B8D7  00                 	db	0
   254  00B8D8  00                 	db	0
   255  00B8D9  00                 	db	0
   256  00B8DA  00                 	db	0
   257  00B8DB  00                 	db	0
   258  00B8DC  08                 	db	8
   259  00B8DD  7C                 	db	124
   260  00B8DE  4E                 	db	78
   261  00B8DF  4F                 	db	79
   262  00B8E0  4E                 	db	78
   263  00B8E1  7C                 	db	124
   264  00B8E2  08                 	db	8
   265  00B8E3  04                 	db	4
   266  00B8E4  26                 	db	38
   267  00B8E5  47                 	db	71
   268  00B8E6  3F                 	db	63
   269  00B8E7  07                 	db	7
   270  00B8E8  06                 	db	6
   271  00B8E9  04                 	db	4
   272  00B8EA  20                 	db	32
   273  00B8EB  3E                 	db	62
   274  00B8EC  7F                 	db	127
   275  00B8ED  7F                 	db	127
   276  00B8EE  3F                 	db	63
   277  00B8EF  3E                 	db	62
   278  00B8F0  20                 	db	32
   279  00B8F1                     __end_of_pic7x8:
   280                           	opt stack 0
   281  00B8F1                     _fract:
   282                           	opt stack 0
   283  00B8F1  00                 	db	0
   284  00B8F2  01                 	db	1
   285  00B8F3  01                 	db	1
   286  00B8F4  02                 	db	2
   287  00B8F5  02                 	db	2
   288  00B8F6  03                 	db	3
   289  00B8F7  04                 	db	4
   290  00B8F8  04                 	db	4
   291  00B8F9  05                 	db	5
   292  00B8FA  06                 	db	6
   293  00B8FB  06                 	db	6
   294  00B8FC  07                 	db	7
   295  00B8FD  07                 	db	7
   296  00B8FE  08                 	db	8
   297  00B8FF  09                 	db	9
   298  00B900  09                 	db	9
   299  00B901                     __end_of_fract:
   300                           	opt stack 0
   301  00B901                     _Font:
   302                           	opt stack 0
   303  00B901  00                 	db	0
   304  00B902  00                 	db	0
   305  00B903  00                 	db	0
   306  00B904  00                 	db	0
   307  00B905  00                 	db	0
   308  00B906  45                 	db	69
   309  00B907  51                 	db	81
   310  00B908  45                 	db	69
   311  00B909  3E                 	db	62
   312  00B90A  00                 	db	0
   313  00B90B  6B                 	db	107
   314  00B90C  6F                 	db	111
   315  00B90D  6B                 	db	107
   316  00B90E  3E                 	db	62
   317  00B90F  00                 	db	0
   318  00B910  3E                 	db	62
   319  00B911  7C                 	db	124
   320  00B912  3E                 	db	62
   321  00B913  1C                 	db	28
   322  00B914  00                 	db	0
   323  00B915  3C                 	db	60
   324  00B916  7E                 	db	126
   325  00B917  3C                 	db	60
   326  00B918  18                 	db	24
   327  00B919  00                 	db	0
   328  00B91A  36                 	db	54
   329  00B91B  7F                 	db	127
   330  00B91C  36                 	db	54
   331  00B91D  30                 	db	48
   332  00B91E  00                 	db	0
   333  00B91F  00                 	db	0
   334  00B920  00                 	db	0
   335  00B921  00                 	db	0
   336  00B922  00                 	db	0
   337  00B923  00                 	db	0
   338  00B924  00                 	db	0
   339  00B925  00                 	db	0
   340  00B926  00                 	db	0
   341  00B927  00                 	db	0
   342  00B928  00                 	db	0
   343  00B929  00                 	db	0
   344  00B92A  00                 	db	0
   345  00B92B  00                 	db	0
   346  00B92C  00                 	db	0
   347  00B92D  00                 	db	0
   348  00B92E  00                 	db	0
   349  00B92F  00                 	db	0
   350  00B930  00                 	db	0
   351  00B931  00                 	db	0
   352  00B932  00                 	db	0
   353  00B933  00                 	db	0
   354  00B934  00                 	db	0
   355  00B935  00                 	db	0
   356  00B936  00                 	db	0
   357  00B937  00                 	db	0
   358  00B938  00                 	db	0
   359  00B939  00                 	db	0
   360  00B93A  00                 	db	0
   361  00B93B  00                 	db	0
   362  00B93C  00                 	db	0
   363  00B93D  00                 	db	0
   364  00B93E  00                 	db	0
   365  00B93F  00                 	db	0
   366  00B940  00                 	db	0
   367  00B941  00                 	db	0
   368  00B942  00                 	db	0
   369  00B943  00                 	db	0
   370  00B944  00                 	db	0
   371  00B945  00                 	db	0
   372  00B946  00                 	db	0
   373  00B947  00                 	db	0
   374  00B948  00                 	db	0
   375  00B949  00                 	db	0
   376  00B94A  00                 	db	0
   377  00B94B  00                 	db	0
   378  00B94C  00                 	db	0
   379  00B94D  00                 	db	0
   380  00B94E  00                 	db	0
   381  00B94F  00                 	db	0
   382  00B950  00                 	db	0
   383  00B951  00                 	db	0
   384  00B952  00                 	db	0
   385  00B953  00                 	db	0
   386  00B954  00                 	db	0
   387  00B955  00                 	db	0
   388  00B956  00                 	db	0
   389  00B957  00                 	db	0
   390  00B958  00                 	db	0
   391  00B959  00                 	db	0
   392  00B95A  00                 	db	0
   393  00B95B  00                 	db	0
   394  00B95C  00                 	db	0
   395  00B95D  00                 	db	0
   396  00B95E  00                 	db	0
   397  00B95F  00                 	db	0
   398  00B960  00                 	db	0
   399  00B961  00                 	db	0
   400  00B962  00                 	db	0
   401  00B963  00                 	db	0
   402  00B964  00                 	db	0
   403  00B965  00                 	db	0
   404  00B966  00                 	db	0
   405  00B967  00                 	db	0
   406  00B968  00                 	db	0
   407  00B969  00                 	db	0
   408  00B96A  00                 	db	0
   409  00B96B  00                 	db	0
   410  00B96C  00                 	db	0
   411  00B96D  00                 	db	0
   412  00B96E  00                 	db	0
   413  00B96F  00                 	db	0
   414  00B970  00                 	db	0
   415  00B971  00                 	db	0
   416  00B972  00                 	db	0
   417  00B973  00                 	db	0
   418  00B974  00                 	db	0
   419  00B975  00                 	db	0
   420  00B976  00                 	db	0
   421  00B977  00                 	db	0
   422  00B978  00                 	db	0
   423  00B979  7C                 	db	124
   424  00B97A  4E                 	db	78
   425  00B97B  4E                 	db	78
   426  00B97C  7C                 	db	124
   427  00B97D  08                 	db	8
   428  00B97E  20                 	db	32
   429  00B97F  34                 	db	52
   430  00B980  7E                 	db	126
   431  00B981  34                 	db	52
   432  00B982  20                 	db	32
   433  00B983  00                 	db	0
   434  00B984  00                 	db	0
   435  00B985  36                 	db	54
   436  00B986  36                 	db	54
   437  00B987  00                 	db	0
   438  00B988  00                 	db	0
   439  00B989  00                 	db	0
   440  00B98A  00                 	db	0
   441  00B98B  00                 	db	0
   442  00B98C  00                 	db	0
   443  00B98D  00                 	db	0
   444  00B98E  00                 	db	0
   445  00B98F  00                 	db	0
   446  00B990  00                 	db	0
   447  00B991  00                 	db	0
   448  00B992  00                 	db	0
   449  00B993  00                 	db	0
   450  00B994  00                 	db	0
   451  00B995  00                 	db	0
   452  00B996  00                 	db	0
   453  00B997  00                 	db	0
   454  00B998  00                 	db	0
   455  00B999  00                 	db	0
   456  00B99A  00                 	db	0
   457  00B99B  00                 	db	0
   458  00B99C  00                 	db	0
   459  00B99D  00                 	db	0
   460  00B99E  00                 	db	0
   461  00B99F  00                 	db	0
   462  00B9A0  00                 	db	0
   463  00B9A1  00                 	db	0
   464  00B9A2  00                 	db	0
   465  00B9A3  00                 	db	0
   466  00B9A4  00                 	db	0
   467  00B9A5  00                 	db	0
   468  00B9A6  00                 	db	0
   469  00B9A7  00                 	db	0
   470  00B9A8  5F                 	db	95
   471  00B9A9  00                 	db	0
   472  00B9AA  00                 	db	0
   473  00B9AB  00                 	db	0
   474  00B9AC  07                 	db	7
   475  00B9AD  00                 	db	0
   476  00B9AE  07                 	db	7
   477  00B9AF  00                 	db	0
   478  00B9B0  14                 	db	20
   479  00B9B1  7F                 	db	127
   480  00B9B2  14                 	db	20
   481  00B9B3  7F                 	db	127
   482  00B9B4  14                 	db	20
   483  00B9B5  24                 	db	36
   484  00B9B6  2A                 	db	42
   485  00B9B7  7F                 	db	127
   486  00B9B8  2A                 	db	42
   487  00B9B9  12                 	db	18
   488  00B9BA  23                 	db	35
   489  00B9BB  13                 	db	19
   490  00B9BC  08                 	db	8
   491  00B9BD  64                 	db	100
   492  00B9BE  62                 	db	98
   493  00B9BF  36                 	db	54
   494  00B9C0  49                 	db	73
   495  00B9C1  56                 	db	86
   496  00B9C2  20                 	db	32
   497  00B9C3  50                 	db	80
   498  00B9C4  00                 	db	0
   499  00B9C5  08                 	db	8
   500  00B9C6  07                 	db	7
   501  00B9C7  03                 	db	3
   502  00B9C8  00                 	db	0
   503  00B9C9  00                 	db	0
   504  00B9CA  1C                 	db	28
   505  00B9CB  22                 	db	34
   506  00B9CC  41                 	db	65
   507  00B9CD  00                 	db	0
   508  00B9CE  00                 	db	0
   509  00B9CF  41                 	db	65
   510  00B9D0  22                 	db	34
   511  00B9D1  1C                 	db	28
   512  00B9D2  00                 	db	0
   513  00B9D3  2A                 	db	42
   514  00B9D4  1C                 	db	28
   515  00B9D5  7F                 	db	127
   516  00B9D6  1C                 	db	28
   517  00B9D7  2A                 	db	42
   518  00B9D8  08                 	db	8
   519  00B9D9  08                 	db	8
   520  00B9DA  3E                 	db	62
   521  00B9DB  08                 	db	8
   522  00B9DC  08                 	db	8
   523  00B9DD  00                 	db	0
   524  00B9DE  80                 	db	128
   525  00B9DF  70                 	db	112
   526  00B9E0  30                 	db	48
   527  00B9E1  00                 	db	0
   528  00B9E2  08                 	db	8
   529  00B9E3  08                 	db	8
   530  00B9E4  08                 	db	8
   531  00B9E5  08                 	db	8
   532  00B9E6  08                 	db	8
   533  00B9E7  60                 	db	96
   534  00B9E8  60                 	db	96
   535  00B9E9  00                 	db	0
   536  00B9EA  00                 	db	0
   537  00B9EB  00                 	db	0
   538  00B9EC  20                 	db	32
   539  00B9ED  10                 	db	16
   540  00B9EE  08                 	db	8
   541  00B9EF  04                 	db	4
   542  00B9F0  02                 	db	2
   543  00B9F1  3E                 	db	62
   544  00B9F2  51                 	db	81
   545  00B9F3  49                 	db	73
   546  00B9F4  45                 	db	69
   547  00B9F5  3E                 	db	62
   548  00B9F6  00                 	db	0
   549  00B9F7  42                 	db	66
   550  00B9F8  7F                 	db	127
   551  00B9F9  40                 	db	64
   552  00B9FA  00                 	db	0
   553  00B9FB  42                 	db	66
   554  00B9FC  61                 	db	97
   555  00B9FD  51                 	db	81
   556  00B9FE  49                 	db	73
   557  00B9FF  46                 	db	70
   558  00BA00  21                 	db	33
   559  00BA01  41                 	db	65
   560  00BA02  45                 	db	69
   561  00BA03  4B                 	db	75
   562  00BA04  31                 	db	49
   563  00BA05  18                 	db	24
   564  00BA06  14                 	db	20
   565  00BA07  12                 	db	18
   566  00BA08  7F                 	db	127
   567  00BA09  10                 	db	16
   568  00BA0A  27                 	db	39
   569  00BA0B  45                 	db	69
   570  00BA0C  45                 	db	69
   571  00BA0D  45                 	db	69
   572  00BA0E  39                 	db	57
   573  00BA0F  3C                 	db	60
   574  00BA10  4A                 	db	74
   575  00BA11  49                 	db	73
   576  00BA12  49                 	db	73
   577  00BA13  30                 	db	48
   578  00BA14  01                 	db	1
   579  00BA15  71                 	db	113
   580  00BA16  09                 	db	9
   581  00BA17  05                 	db	5
   582  00BA18  03                 	db	3
   583  00BA19  36                 	db	54
   584  00BA1A  49                 	db	73
   585  00BA1B  49                 	db	73
   586  00BA1C  49                 	db	73
   587  00BA1D  36                 	db	54
   588  00BA1E  06                 	db	6
   589  00BA1F  49                 	db	73
   590  00BA20  49                 	db	73
   591  00BA21  29                 	db	41
   592  00BA22  1E                 	db	30
   593  00BA23  00                 	db	0
   594  00BA24  00                 	db	0
   595  00BA25  36                 	db	54
   596  00BA26  36                 	db	54
   597  00BA27  00                 	db	0
   598  00BA28  00                 	db	0
   599  00BA29  40                 	db	64
   600  00BA2A  34                 	db	52
   601  00BA2B  00                 	db	0
   602  00BA2C  00                 	db	0
   603  00BA2D  00                 	db	0
   604  00BA2E  08                 	db	8
   605  00BA2F  14                 	db	20
   606  00BA30  22                 	db	34
   607  00BA31  41                 	db	65
   608  00BA32  14                 	db	20
   609  00BA33  14                 	db	20
   610  00BA34  14                 	db	20
   611  00BA35  14                 	db	20
   612  00BA36  14                 	db	20
   613  00BA37  00                 	db	0
   614  00BA38  41                 	db	65
   615  00BA39  22                 	db	34
   616  00BA3A  14                 	db	20
   617  00BA3B  08                 	db	8
   618  00BA3C  02                 	db	2
   619  00BA3D  01                 	db	1
   620  00BA3E  59                 	db	89
   621  00BA3F  09                 	db	9
   622  00BA40  06                 	db	6
   623  00BA41  3E                 	db	62
   624  00BA42  41                 	db	65
   625  00BA43  5D                 	db	93
   626  00BA44  59                 	db	89
   627  00BA45  4E                 	db	78
   628  00BA46  7C                 	db	124
   629  00BA47  12                 	db	18
   630  00BA48  11                 	db	17
   631  00BA49  12                 	db	18
   632  00BA4A  7C                 	db	124
   633  00BA4B  7F                 	db	127
   634  00BA4C  49                 	db	73
   635  00BA4D  49                 	db	73
   636  00BA4E  49                 	db	73
   637  00BA4F  36                 	db	54
   638  00BA50  3E                 	db	62
   639  00BA51  41                 	db	65
   640  00BA52  41                 	db	65
   641  00BA53  41                 	db	65
   642  00BA54  22                 	db	34
   643  00BA55  7F                 	db	127
   644  00BA56  41                 	db	65
   645  00BA57  41                 	db	65
   646  00BA58  41                 	db	65
   647  00BA59  3E                 	db	62
   648  00BA5A  7F                 	db	127
   649  00BA5B  49                 	db	73
   650  00BA5C  49                 	db	73
   651  00BA5D  49                 	db	73
   652  00BA5E  41                 	db	65
   653  00BA5F  7F                 	db	127
   654  00BA60  09                 	db	9
   655  00BA61  09                 	db	9
   656  00BA62  09                 	db	9
   657  00BA63  01                 	db	1
   658  00BA64  3E                 	db	62
   659  00BA65  41                 	db	65
   660  00BA66  41                 	db	65
   661  00BA67  51                 	db	81
   662  00BA68  72                 	db	114
   663  00BA69  7F                 	db	127
   664  00BA6A  08                 	db	8
   665  00BA6B  08                 	db	8
   666  00BA6C  08                 	db	8
   667  00BA6D  7F                 	db	127
   668  00BA6E  00                 	db	0
   669  00BA6F  41                 	db	65
   670  00BA70  7F                 	db	127
   671  00BA71  41                 	db	65
   672  00BA72  00                 	db	0
   673  00BA73  20                 	db	32
   674  00BA74  40                 	db	64
   675  00BA75  41                 	db	65
   676  00BA76  3F                 	db	63
   677  00BA77  01                 	db	1
   678  00BA78  7F                 	db	127
   679  00BA79  08                 	db	8
   680  00BA7A  14                 	db	20
   681  00BA7B  22                 	db	34
   682  00BA7C  41                 	db	65
   683  00BA7D  7F                 	db	127
   684  00BA7E  40                 	db	64
   685  00BA7F  40                 	db	64
   686  00BA80  40                 	db	64
   687  00BA81  40                 	db	64
   688  00BA82  7F                 	db	127
   689  00BA83  02                 	db	2
   690  00BA84  04                 	db	4
   691  00BA85  02                 	db	2
   692  00BA86  7F                 	db	127
   693  00BA87  7F                 	db	127
   694  00BA88  04                 	db	4
   695  00BA89  08                 	db	8
   696  00BA8A  10                 	db	16
   697  00BA8B  7F                 	db	127
   698  00BA8C  3E                 	db	62
   699  00BA8D  41                 	db	65
   700  00BA8E  41                 	db	65
   701  00BA8F  41                 	db	65
   702  00BA90  3E                 	db	62
   703  00BA91  7F                 	db	127
   704  00BA92  09                 	db	9
   705  00BA93  09                 	db	9
   706  00BA94  09                 	db	9
   707  00BA95  06                 	db	6
   708  00BA96  3E                 	db	62
   709  00BA97  41                 	db	65
   710  00BA98  51                 	db	81
   711  00BA99  21                 	db	33
   712  00BA9A  5E                 	db	94
   713  00BA9B  7F                 	db	127
   714  00BA9C  09                 	db	9
   715  00BA9D  19                 	db	25
   716  00BA9E  29                 	db	41
   717  00BA9F  46                 	db	70
   718  00BAA0  26                 	db	38
   719  00BAA1  49                 	db	73
   720  00BAA2  49                 	db	73
   721  00BAA3  49                 	db	73
   722  00BAA4  32                 	db	50
   723  00BAA5  01                 	db	1
   724  00BAA6  01                 	db	1
   725  00BAA7  7F                 	db	127
   726  00BAA8  01                 	db	1
   727  00BAA9  01                 	db	1
   728  00BAAA  3F                 	db	63
   729  00BAAB  40                 	db	64
   730  00BAAC  40                 	db	64
   731  00BAAD  40                 	db	64
   732  00BAAE  3F                 	db	63
   733  00BAAF  1F                 	db	31
   734  00BAB0  20                 	db	32
   735  00BAB1  40                 	db	64
   736  00BAB2  20                 	db	32
   737  00BAB3  1F                 	db	31
   738  00BAB4  3F                 	db	63
   739  00BAB5  40                 	db	64
   740  00BAB6  38                 	db	56
   741  00BAB7  40                 	db	64
   742  00BAB8  3F                 	db	63
   743  00BAB9  63                 	db	99
   744  00BABA  14                 	db	20
   745  00BABB  08                 	db	8
   746  00BABC  14                 	db	20
   747  00BABD  63                 	db	99
   748  00BABE  03                 	db	3
   749  00BABF  04                 	db	4
   750  00BAC0  78                 	db	120
   751  00BAC1  04                 	db	4
   752  00BAC2  03                 	db	3
   753  00BAC3  61                 	db	97
   754  00BAC4  51                 	db	81
   755  00BAC5  49                 	db	73
   756  00BAC6  45                 	db	69
   757  00BAC7  43                 	db	67
   758  00BAC8  00                 	db	0
   759  00BAC9  7F                 	db	127
   760  00BACA  41                 	db	65
   761  00BACB  41                 	db	65
   762  00BACC  00                 	db	0
   763  00BACD  02                 	db	2
   764  00BACE  04                 	db	4
   765  00BACF  08                 	db	8
   766  00BAD0  10                 	db	16
   767  00BAD1  20                 	db	32
   768  00BAD2  00                 	db	0
   769  00BAD3  41                 	db	65
   770  00BAD4  41                 	db	65
   771  00BAD5  7F                 	db	127
   772  00BAD6  00                 	db	0
   773  00BAD7  04                 	db	4
   774  00BAD8  02                 	db	2
   775  00BAD9  01                 	db	1
   776  00BADA  02                 	db	2
   777  00BADB  04                 	db	4
   778  00BADC  40                 	db	64
   779  00BADD  40                 	db	64
   780  00BADE  40                 	db	64
   781  00BADF  40                 	db	64
   782  00BAE0  40                 	db	64
   783  00BAE1  00                 	db	0
   784  00BAE2  03                 	db	3
   785  00BAE3  07                 	db	7
   786  00BAE4  08                 	db	8
   787  00BAE5  00                 	db	0
   788  00BAE6  20                 	db	32
   789  00BAE7  54                 	db	84
   790  00BAE8  54                 	db	84
   791  00BAE9  78                 	db	120
   792  00BAEA  40                 	db	64
   793  00BAEB  7F                 	db	127
   794  00BAEC  28                 	db	40
   795  00BAED  44                 	db	68
   796  00BAEE  44                 	db	68
   797  00BAEF  38                 	db	56
   798  00BAF0  38                 	db	56
   799  00BAF1  44                 	db	68
   800  00BAF2  44                 	db	68
   801  00BAF3  44                 	db	68
   802  00BAF4  28                 	db	40
   803  00BAF5  38                 	db	56
   804  00BAF6  44                 	db	68
   805  00BAF7  44                 	db	68
   806  00BAF8  28                 	db	40
   807  00BAF9  7F                 	db	127
   808  00BAFA  38                 	db	56
   809  00BAFB  54                 	db	84
   810  00BAFC  54                 	db	84
   811  00BAFD  54                 	db	84
   812  00BAFE  18                 	db	24
   813  00BAFF  08                 	db	8
   814  00BB00  7E                 	db	126
   815  00BB01  09                 	db	9
   816  00BB02  02                 	db	2
   817  00BB03  00                 	db	0
   818  00BB04  18                 	db	24
   819  00BB05  A4                 	db	164
   820  00BB06  A4                 	db	164
   821  00BB07  9C                 	db	156
   822  00BB08  78                 	db	120
   823  00BB09  7F                 	db	127
   824  00BB0A  08                 	db	8
   825  00BB0B  04                 	db	4
   826  00BB0C  04                 	db	4
   827  00BB0D  78                 	db	120
   828  00BB0E  00                 	db	0
   829  00BB0F  44                 	db	68
   830  00BB10  7D                 	db	125
   831  00BB11  40                 	db	64
   832  00BB12  00                 	db	0
   833  00BB13  20                 	db	32
   834  00BB14  40                 	db	64
   835  00BB15  40                 	db	64
   836  00BB16  3D                 	db	61
   837  00BB17  00                 	db	0
   838  00BB18  7F                 	db	127
   839  00BB19  10                 	db	16
   840  00BB1A  28                 	db	40
   841  00BB1B  44                 	db	68
   842  00BB1C  00                 	db	0
   843  00BB1D  00                 	db	0
   844  00BB1E  41                 	db	65
   845  00BB1F  7F                 	db	127
   846  00BB20  40                 	db	64
   847  00BB21  00                 	db	0
   848  00BB22  7C                 	db	124
   849  00BB23  04                 	db	4
   850  00BB24  78                 	db	120
   851  00BB25  04                 	db	4
   852  00BB26  78                 	db	120
   853  00BB27  7C                 	db	124
   854  00BB28  08                 	db	8
   855  00BB29  04                 	db	4
   856  00BB2A  04                 	db	4
   857  00BB2B  78                 	db	120
   858  00BB2C  38                 	db	56
   859  00BB2D  44                 	db	68
   860  00BB2E  44                 	db	68
   861  00BB2F  44                 	db	68
   862  00BB30  38                 	db	56
   863  00BB31  FC                 	db	252
   864  00BB32  18                 	db	24
   865  00BB33  24                 	db	36
   866  00BB34  24                 	db	36
   867  00BB35  18                 	db	24
   868  00BB36  18                 	db	24
   869  00BB37  24                 	db	36
   870  00BB38  24                 	db	36
   871  00BB39  18                 	db	24
   872  00BB3A  FC                 	db	252
   873  00BB3B  7C                 	db	124
   874  00BB3C  04                 	db	4
   875  00BB3D  04                 	db	4
   876  00BB3E  08                 	db	8
   877  00BB3F  00                 	db	0
   878  00BB40  48                 	db	72
   879  00BB41  54                 	db	84
   880  00BB42  54                 	db	84
   881  00BB43  54                 	db	84
   882  00BB44  24                 	db	36
   883  00BB45  00                 	db	0
   884  00BB46  04                 	db	4
   885  00BB47  3F                 	db	63
   886  00BB48  44                 	db	68
   887  00BB49  20                 	db	32
   888  00BB4A  3C                 	db	60
   889  00BB4B  40                 	db	64
   890  00BB4C  40                 	db	64
   891  00BB4D  20                 	db	32
   892  00BB4E  7C                 	db	124
   893  00BB4F  1C                 	db	28
   894  00BB50  20                 	db	32
   895  00BB51  40                 	db	64
   896  00BB52  20                 	db	32
   897  00BB53  1C                 	db	28
   898  00BB54  3C                 	db	60
   899  00BB55  40                 	db	64
   900  00BB56  30                 	db	48
   901  00BB57  40                 	db	64
   902  00BB58  3C                 	db	60
   903  00BB59  44                 	db	68
   904  00BB5A  28                 	db	40
   905  00BB5B  10                 	db	16
   906  00BB5C  28                 	db	40
   907  00BB5D  44                 	db	68
   908  00BB5E  4C                 	db	76
   909  00BB5F  90                 	db	144
   910  00BB60  90                 	db	144
   911  00BB61  90                 	db	144
   912  00BB62  7C                 	db	124
   913  00BB63  44                 	db	68
   914  00BB64  64                 	db	100
   915  00BB65  54                 	db	84
   916  00BB66  4C                 	db	76
   917  00BB67  44                 	db	68
   918  00BB68  00                 	db	0
   919  00BB69  08                 	db	8
   920  00BB6A  36                 	db	54
   921  00BB6B  41                 	db	65
   922  00BB6C  00                 	db	0
   923  00BB6D  00                 	db	0
   924  00BB6E  00                 	db	0
   925  00BB6F  77                 	db	119
   926  00BB70  00                 	db	0
   927  00BB71  00                 	db	0
   928  00BB72  00                 	db	0
   929  00BB73  41                 	db	65
   930  00BB74  36                 	db	54
   931  00BB75  08                 	db	8
   932  00BB76  00                 	db	0
   933  00BB77  02                 	db	2
   934  00BB78  01                 	db	1
   935  00BB79  02                 	db	2
   936  00BB7A  04                 	db	4
   937  00BB7B  02                 	db	2
   938  00BB7C  00                 	db	0
   939  00BB7D  00                 	db	0
   940  00BB7E  00                 	db	0
   941  00BB7F  00                 	db	0
   942  00BB80  00                 	db	0
   943  00BB81  00                 	db	0
   944  00BB82  00                 	db	0
   945  00BB83  00                 	db	0
   946  00BB84  00                 	db	0
   947  00BB85  00                 	db	0
   948  00BB86  00                 	db	0
   949  00BB87  00                 	db	0
   950  00BB88  00                 	db	0
   951  00BB89  00                 	db	0
   952  00BB8A  00                 	db	0
   953  00BB8B  00                 	db	0
   954  00BB8C  00                 	db	0
   955  00BB8D  00                 	db	0
   956  00BB8E  00                 	db	0
   957  00BB8F  00                 	db	0
   958  00BB90  00                 	db	0
   959  00BB91  00                 	db	0
   960  00BB92  00                 	db	0
   961  00BB93  00                 	db	0
   962  00BB94  00                 	db	0
   963  00BB95  00                 	db	0
   964  00BB96  00                 	db	0
   965  00BB97  00                 	db	0
   966  00BB98  00                 	db	0
   967  00BB99  00                 	db	0
   968  00BB9A  40                 	db	64
   969  00BB9B  00                 	db	0
   970  00BB9C  40                 	db	64
   971  00BB9D  00                 	db	0
   972  00BB9E  40                 	db	64
   973  00BB9F  00                 	db	0
   974  00BBA0  00                 	db	0
   975  00BBA1  00                 	db	0
   976  00BBA2  00                 	db	0
   977  00BBA3  00                 	db	0
   978  00BBA4  00                 	db	0
   979  00BBA5  00                 	db	0
   980  00BBA6  00                 	db	0
   981  00BBA7  00                 	db	0
   982  00BBA8  00                 	db	0
   983  00BBA9  3E                 	db	62
   984  00BBAA  55                 	db	85
   985  00BBAB  55                 	db	85
   986  00BBAC  41                 	db	65
   987  00BBAD  22                 	db	34
   988  00BBAE  00                 	db	0
   989  00BBAF  00                 	db	0
   990  00BBB0  00                 	db	0
   991  00BBB1  00                 	db	0
   992  00BBB2  00                 	db	0
   993  00BBB3  00                 	db	0
   994  00BBB4  00                 	db	0
   995  00BBB5  00                 	db	0
   996  00BBB6  00                 	db	0
   997  00BBB7  00                 	db	0
   998  00BBB8  00                 	db	0
   999  00BBB9  00                 	db	0
  1000  00BBBA  00                 	db	0
  1001  00BBBB  00                 	db	0
  1002  00BBBC  00                 	db	0
  1003  00BBBD  00                 	db	0
  1004  00BBBE  00                 	db	0
  1005  00BBBF  00                 	db	0
  1006  00BBC0  00                 	db	0
  1007  00BBC1  00                 	db	0
  1008  00BBC2  00                 	db	0
  1009  00BBC3  00                 	db	0
  1010  00BBC4  00                 	db	0
  1011  00BBC5  00                 	db	0
  1012  00BBC6  00                 	db	0
  1013  00BBC7  00                 	db	0
  1014  00BBC8  00                 	db	0
  1015  00BBC9  00                 	db	0
  1016  00BBCA  00                 	db	0
  1017  00BBCB  00                 	db	0
  1018  00BBCC  00                 	db	0
  1019  00BBCD  00                 	db	0
  1020  00BBCE  00                 	db	0
  1021  00BBCF  00                 	db	0
  1022  00BBD0  00                 	db	0
  1023  00BBD1  00                 	db	0
  1024  00BBD2  00                 	db	0
  1025  00BBD3  00                 	db	0
  1026  00BBD4  00                 	db	0
  1027  00BBD5  00                 	db	0
  1028  00BBD6  00                 	db	0
  1029  00BBD7  00                 	db	0
  1030  00BBD8  00                 	db	0
  1031  00BBD9  00                 	db	0
  1032  00BBDA  00                 	db	0
  1033  00BBDB  00                 	db	0
  1034  00BBDC  00                 	db	0
  1035  00BBDD  00                 	db	0
  1036  00BBDE  00                 	db	0
  1037  00BBDF  00                 	db	0
  1038  00BBE0  00                 	db	0
  1039  00BBE1  00                 	db	0
  1040  00BBE2  00                 	db	0
  1041  00BBE3  00                 	db	0
  1042  00BBE4  00                 	db	0
  1043  00BBE5  00                 	db	0
  1044  00BBE6  00                 	db	0
  1045  00BBE7  00                 	db	0
  1046  00BBE8  00                 	db	0
  1047  00BBE9  00                 	db	0
  1048  00BBEA  00                 	db	0
  1049  00BBEB  0C                 	db	12
  1050  00BBEC  1E                 	db	30
  1051  00BBED  1E                 	db	30
  1052  00BBEE  0C                 	db	12
  1053  00BBEF  00                 	db	0
  1054  00BBF0  00                 	db	0
  1055  00BBF1  00                 	db	0
  1056  00BBF2  00                 	db	0
  1057  00BBF3  00                 	db	0
  1058  00BBF4  00                 	db	0
  1059  00BBF5  00                 	db	0
  1060  00BBF6  00                 	db	0
  1061  00BBF7  00                 	db	0
  1062  00BBF8  00                 	db	0
  1063  00BBF9  00                 	db	0
  1064  00BBFA  00                 	db	0
  1065  00BBFB  00                 	db	0
  1066  00BBFC  00                 	db	0
  1067  00BBFD  00                 	db	0
  1068  00BBFE  00                 	db	0
  1069  00BBFF  00                 	db	0
  1070  00BC00  00                 	db	0
  1071  00BC01  00                 	db	0
  1072  00BC02  00                 	db	0
  1073  00BC03  00                 	db	0
  1074  00BC04  00                 	db	0
  1075  00BC05  00                 	db	0
  1076  00BC06  00                 	db	0
  1077  00BC07  00                 	db	0
  1078  00BC08  00                 	db	0
  1079  00BC09  00                 	db	0
  1080  00BC0A  00                 	db	0
  1081  00BC0B  00                 	db	0
  1082  00BC0C  00                 	db	0
  1083  00BC0D  00                 	db	0
  1084  00BC0E  00                 	db	0
  1085  00BC0F  00                 	db	0
  1086  00BC10  00                 	db	0
  1087  00BC11  00                 	db	0
  1088  00BC12  00                 	db	0
  1089  00BC13  00                 	db	0
  1090  00BC14  00                 	db	0
  1091  00BC15  00                 	db	0
  1092  00BC16  00                 	db	0
  1093  00BC17  00                 	db	0
  1094  00BC18  00                 	db	0
  1095  00BC19  00                 	db	0
  1096  00BC1A  00                 	db	0
  1097  00BC1B  00                 	db	0
  1098  00BC1C  00                 	db	0
  1099  00BC1D  00                 	db	0
  1100  00BC1E  00                 	db	0
  1101  00BC1F  00                 	db	0
  1102  00BC20  00                 	db	0
  1103  00BC21  00                 	db	0
  1104  00BC22  00                 	db	0
  1105  00BC23  00                 	db	0
  1106  00BC24  00                 	db	0
  1107  00BC25  00                 	db	0
  1108  00BC26  00                 	db	0
  1109  00BC27  00                 	db	0
  1110  00BC28  00                 	db	0
  1111  00BC29  00                 	db	0
  1112  00BC2A  00                 	db	0
  1113  00BC2B  00                 	db	0
  1114  00BC2C  00                 	db	0
  1115  00BC2D  00                 	db	0
  1116  00BC2E  00                 	db	0
  1117  00BC2F  00                 	db	0
  1118  00BC30  00                 	db	0
  1119  00BC31  00                 	db	0
  1120  00BC32  00                 	db	0
  1121  00BC33  00                 	db	0
  1122  00BC34  00                 	db	0
  1123  00BC35  00                 	db	0
  1124  00BC36  00                 	db	0
  1125  00BC37  00                 	db	0
  1126  00BC38  00                 	db	0
  1127  00BC39  00                 	db	0
  1128  00BC3A  7E                 	db	126
  1129  00BC3B  02                 	db	2
  1130  00BC3C  02                 	db	2
  1131  00BC3D  02                 	db	2
  1132  00BC3E  03                 	db	3
  1133  00BC3F  00                 	db	0
  1134  00BC40  00                 	db	0
  1135  00BC41  00                 	db	0
  1136  00BC42  00                 	db	0
  1137  00BC43  00                 	db	0
  1138  00BC44  00                 	db	0
  1139  00BC45  00                 	db	0
  1140  00BC46  00                 	db	0
  1141  00BC47  00                 	db	0
  1142  00BC48  00                 	db	0
  1143  00BC49  7E                 	db	126
  1144  00BC4A  4B                 	db	75
  1145  00BC4B  4A                 	db	74
  1146  00BC4C  4B                 	db	75
  1147  00BC4D  42                 	db	66
  1148  00BC4E  00                 	db	0
  1149  00BC4F  00                 	db	0
  1150  00BC50  00                 	db	0
  1151  00BC51  00                 	db	0
  1152  00BC52  00                 	db	0
  1153  00BC53  3E                 	db	62
  1154  00BC54  49                 	db	73
  1155  00BC55  49                 	db	73
  1156  00BC56  49                 	db	73
  1157  00BC57  22                 	db	34
  1158  00BC58  00                 	db	0
  1159  00BC59  00                 	db	0
  1160  00BC5A  00                 	db	0
  1161  00BC5B  00                 	db	0
  1162  00BC5C  00                 	db	0
  1163  00BC5D  00                 	db	0
  1164  00BC5E  00                 	db	0
  1165  00BC5F  00                 	db	0
  1166  00BC60  00                 	db	0
  1167  00BC61  00                 	db	0
  1168  00BC62  00                 	db	0
  1169  00BC63  00                 	db	0
  1170  00BC64  00                 	db	0
  1171  00BC65  00                 	db	0
  1172  00BC66  00                 	db	0
  1173  00BC67  00                 	db	0
  1174  00BC68  00                 	db	0
  1175  00BC69  00                 	db	0
  1176  00BC6A  00                 	db	0
  1177  00BC6B  00                 	db	0
  1178  00BC6C  00                 	db	0
  1179  00BC6D  41                 	db	65
  1180  00BC6E  7E                 	db	126
  1181  00BC6F  41                 	db	65
  1182  00BC70  00                 	db	0
  1183  00BC71  00                 	db	0
  1184  00BC72  06                 	db	6
  1185  00BC73  09                 	db	9
  1186  00BC74  09                 	db	9
  1187  00BC75  06                 	db	6
  1188  00BC76  44                 	db	68
  1189  00BC77  44                 	db	68
  1190  00BC78  5F                 	db	95
  1191  00BC79  44                 	db	68
  1192  00BC7A  44                 	db	68
  1193  00BC7B  00                 	db	0
  1194  00BC7C  41                 	db	65
  1195  00BC7D  7F                 	db	127
  1196  00BC7E  41                 	db	65
  1197  00BC7F  00                 	db	0
  1198  00BC80  00                 	db	0
  1199  00BC81  44                 	db	68
  1200  00BC82  7D                 	db	125
  1201  00BC83  40                 	db	64
  1202  00BC84  00                 	db	0
  1203  00BC85  00                 	db	0
  1204  00BC86  7C                 	db	124
  1205  00BC87  04                 	db	4
  1206  00BC88  04                 	db	4
  1207  00BC89  06                 	db	6
  1208  00BC8A  00                 	db	0
  1209  00BC8B  00                 	db	0
  1210  00BC8C  00                 	db	0
  1211  00BC8D  00                 	db	0
  1212  00BC8E  00                 	db	0
  1213  00BC8F  00                 	db	0
  1214  00BC90  00                 	db	0
  1215  00BC91  00                 	db	0
  1216  00BC92  00                 	db	0
  1217  00BC93  00                 	db	0
  1218  00BC94  00                 	db	0
  1219  00BC95  00                 	db	0
  1220  00BC96  00                 	db	0
  1221  00BC97  00                 	db	0
  1222  00BC98  00                 	db	0
  1223  00BC99  38                 	db	56
  1224  00BC9A  55                 	db	85
  1225  00BC9B  54                 	db	84
  1226  00BC9C  55                 	db	85
  1227  00BC9D  18                 	db	24
  1228  00BC9E  00                 	db	0
  1229  00BC9F  00                 	db	0
  1230  00BCA0  00                 	db	0
  1231  00BCA1  00                 	db	0
  1232  00BCA2  00                 	db	0
  1233  00BCA3  38                 	db	56
  1234  00BCA4  54                 	db	84
  1235  00BCA5  54                 	db	84
  1236  00BCA6  54                 	db	84
  1237  00BCA7  44                 	db	68
  1238  00BCA8  22                 	db	34
  1239  00BCA9  14                 	db	20
  1240  00BCAA  2A                 	db	42
  1241  00BCAB  14                 	db	20
  1242  00BCAC  08                 	db	8
  1243  00BCAD  20                 	db	32
  1244  00BCAE  40                 	db	64
  1245  00BCAF  40                 	db	64
  1246  00BCB0  3D                 	db	61
  1247  00BCB1  00                 	db	0
  1248  00BCB2  00                 	db	0
  1249  00BCB3  00                 	db	0
  1250  00BCB4  00                 	db	0
  1251  00BCB5  00                 	db	0
  1252  00BCB6  00                 	db	0
  1253  00BCB7  00                 	db	0
  1254  00BCB8  00                 	db	0
  1255  00BCB9  00                 	db	0
  1256  00BCBA  00                 	db	0
  1257  00BCBB  00                 	db	0
  1258  00BCBC  00                 	db	0
  1259  00BCBD  45                 	db	69
  1260  00BCBE  7C                 	db	124
  1261  00BCBF  41                 	db	65
  1262  00BCC0  00                 	db	0
  1263  00BCC1  7E                 	db	126
  1264  00BCC2  11                 	db	17
  1265  00BCC3  11                 	db	17
  1266  00BCC4  11                 	db	17
  1267  00BCC5  7E                 	db	126
  1268  00BCC6  7F                 	db	127
  1269  00BCC7  49                 	db	73
  1270  00BCC8  49                 	db	73
  1271  00BCC9  49                 	db	73
  1272  00BCCA  31                 	db	49
  1273  00BCCB  7F                 	db	127
  1274  00BCCC  49                 	db	73
  1275  00BCCD  49                 	db	73
  1276  00BCCE  49                 	db	73
  1277  00BCCF  36                 	db	54
  1278  00BCD0  7F                 	db	127
  1279  00BCD1  01                 	db	1
  1280  00BCD2  01                 	db	1
  1281  00BCD3  01                 	db	1
  1282  00BCD4  01                 	db	1
  1283  00BCD5  C0                 	db	192
  1284  00BCD6  7E                 	db	126
  1285  00BCD7  41                 	db	65
  1286  00BCD8  7E                 	db	126
  1287  00BCD9  C0                 	db	192
  1288  00BCDA  7F                 	db	127
  1289  00BCDB  49                 	db	73
  1290  00BCDC  49                 	db	73
  1291  00BCDD  49                 	db	73
  1292  00BCDE  41                 	db	65
  1293  00BCDF  77                 	db	119
  1294  00BCE0  08                 	db	8
  1295  00BCE1  7F                 	db	127
  1296  00BCE2  08                 	db	8
  1297  00BCE3  77                 	db	119
  1298  00BCE4  22                 	db	34
  1299  00BCE5  41                 	db	65
  1300  00BCE6  49                 	db	73
  1301  00BCE7  49                 	db	73
  1302  00BCE8  36                 	db	54
  1303  00BCE9  7F                 	db	127
  1304  00BCEA  10                 	db	16
  1305  00BCEB  08                 	db	8
  1306  00BCEC  04                 	db	4
  1307  00BCED  7F                 	db	127
  1308  00BCEE  7E                 	db	126
  1309  00BCEF  11                 	db	17
  1310  00BCF0  09                 	db	9
  1311  00BCF1  05                 	db	5
  1312  00BCF2  7E                 	db	126
  1313  00BCF3  7F                 	db	127
  1314  00BCF4  08                 	db	8
  1315  00BCF5  14                 	db	20
  1316  00BCF6  22                 	db	34
  1317  00BCF7  41                 	db	65
  1318  00BCF8  40                 	db	64
  1319  00BCF9  7E                 	db	126
  1320  00BCFA  01                 	db	1
  1321  00BCFB  01                 	db	1
  1322  00BCFC  7F                 	db	127
  1323  00BCFD  7F                 	db	127
  1324  00BCFE  02                 	db	2
  1325  00BCFF  0C                 	db	12
  1326  00BD00  02                 	db	2
  1327  00BD01  7F                 	db	127
  1328  00BD02  7F                 	db	127
  1329  00BD03  08                 	db	8
  1330  00BD04  08                 	db	8
  1331  00BD05  08                 	db	8
  1332  00BD06  7F                 	db	127
  1333  00BD07  3E                 	db	62
  1334  00BD08  41                 	db	65
  1335  00BD09  41                 	db	65
  1336  00BD0A  41                 	db	65
  1337  00BD0B  3E                 	db	62
  1338  00BD0C  7F                 	db	127
  1339  00BD0D  01                 	db	1
  1340  00BD0E  01                 	db	1
  1341  00BD0F  01                 	db	1
  1342  00BD10  7F                 	db	127
  1343  00BD11  7F                 	db	127
  1344  00BD12  09                 	db	9
  1345  00BD13  09                 	db	9
  1346  00BD14  09                 	db	9
  1347  00BD15  06                 	db	6
  1348  00BD16  3E                 	db	62
  1349  00BD17  41                 	db	65
  1350  00BD18  41                 	db	65
  1351  00BD19  41                 	db	65
  1352  00BD1A  22                 	db	34
  1353  00BD1B  01                 	db	1
  1354  00BD1C  01                 	db	1
  1355  00BD1D  7F                 	db	127
  1356  00BD1E  01                 	db	1
  1357  00BD1F  01                 	db	1
  1358  00BD20  27                 	db	39
  1359  00BD21  48                 	db	72
  1360  00BD22  48                 	db	72
  1361  00BD23  48                 	db	72
  1362  00BD24  3F                 	db	63
  1363  00BD25  0E                 	db	14
  1364  00BD26  11                 	db	17
  1365  00BD27  7F                 	db	127
  1366  00BD28  11                 	db	17
  1367  00BD29  0E                 	db	14
  1368  00BD2A  63                 	db	99
  1369  00BD2B  14                 	db	20
  1370  00BD2C  08                 	db	8
  1371  00BD2D  14                 	db	20
  1372  00BD2E  63                 	db	99
  1373  00BD2F  7F                 	db	127
  1374  00BD30  40                 	db	64
  1375  00BD31  40                 	db	64
  1376  00BD32  7F                 	db	127
  1377  00BD33  C0                 	db	192
  1378  00BD34  07                 	db	7
  1379  00BD35  08                 	db	8
  1380  00BD36  08                 	db	8
  1381  00BD37  08                 	db	8
  1382  00BD38  7F                 	db	127
  1383  00BD39  7F                 	db	127
  1384  00BD3A  40                 	db	64
  1385  00BD3B  7E                 	db	126
  1386  00BD3C  40                 	db	64
  1387  00BD3D  7F                 	db	127
  1388  00BD3E  7F                 	db	127
  1389  00BD3F  40                 	db	64
  1390  00BD40  7E                 	db	126
  1391  00BD41  40                 	db	64
  1392  00BD42  FF                 	db	255
  1393  00BD43  01                 	db	1
  1394  00BD44  7F                 	db	127
  1395  00BD45  44                 	db	68
  1396  00BD46  44                 	db	68
  1397  00BD47  38                 	db	56
  1398  00BD48  7F                 	db	127
  1399  00BD49  44                 	db	68
  1400  00BD4A  38                 	db	56
  1401  00BD4B  00                 	db	0
  1402  00BD4C  7F                 	db	127
  1403  00BD4D  7F                 	db	127
  1404  00BD4E  44                 	db	68
  1405  00BD4F  44                 	db	68
  1406  00BD50  44                 	db	68
  1407  00BD51  38                 	db	56
  1408  00BD52  22                 	db	34
  1409  00BD53  41                 	db	65
  1410  00BD54  49                 	db	73
  1411  00BD55  49                 	db	73
  1412  00BD56  3E                 	db	62
  1413  00BD57  7F                 	db	127
  1414  00BD58  08                 	db	8
  1415  00BD59  3E                 	db	62
  1416  00BD5A  41                 	db	65
  1417  00BD5B  3E                 	db	62
  1418  00BD5C  46                 	db	70
  1419  00BD5D  29                 	db	41
  1420  00BD5E  19                 	db	25
  1421  00BD5F  09                 	db	9
  1422  00BD60  7F                 	db	127
  1423  00BD61  20                 	db	32
  1424  00BD62  54                 	db	84
  1425  00BD63  54                 	db	84
  1426  00BD64  54                 	db	84
  1427  00BD65  78                 	db	120
  1428  00BD66  3C                 	db	60
  1429  00BD67  4A                 	db	74
  1430  00BD68  4A                 	db	74
  1431  00BD69  4A                 	db	74
  1432  00BD6A  31                 	db	49
  1433  00BD6B  7C                 	db	124
  1434  00BD6C  54                 	db	84
  1435  00BD6D  54                 	db	84
  1436  00BD6E  54                 	db	84
  1437  00BD6F  28                 	db	40
  1438  00BD70  00                 	db	0
  1439  00BD71  7C                 	db	124
  1440  00BD72  04                 	db	4
  1441  00BD73  04                 	db	4
  1442  00BD74  04                 	db	4
  1443  00BD75  C0                 	db	192
  1444  00BD76  78                 	db	120
  1445  00BD77  44                 	db	68
  1446  00BD78  7C                 	db	124
  1447  00BD79  C0                 	db	192
  1448  00BD7A  38                 	db	56
  1449  00BD7B  54                 	db	84
  1450  00BD7C  54                 	db	84
  1451  00BD7D  54                 	db	84
  1452  00BD7E  18                 	db	24
  1453  00BD7F  6C                 	db	108
  1454  00BD80  10                 	db	16
  1455  00BD81  7C                 	db	124
  1456  00BD82  10                 	db	16
  1457  00BD83  6C                 	db	108
  1458  00BD84  28                 	db	40
  1459  00BD85  44                 	db	68
  1460  00BD86  54                 	db	84
  1461  00BD87  54                 	db	84
  1462  00BD88  28                 	db	40
  1463  00BD89  7C                 	db	124
  1464  00BD8A  20                 	db	32
  1465  00BD8B  10                 	db	16
  1466  00BD8C  08                 	db	8
  1467  00BD8D  7C                 	db	124
  1468  00BD8E  7C                 	db	124
  1469  00BD8F  21                 	db	33
  1470  00BD90  11                 	db	17
  1471  00BD91  09                 	db	9
  1472  00BD92  7C                 	db	124
  1473  00BD93  7C                 	db	124
  1474  00BD94  10                 	db	16
  1475  00BD95  10                 	db	16
  1476  00BD96  28                 	db	40
  1477  00BD97  44                 	db	68
  1478  00BD98  40                 	db	64
  1479  00BD99  38                 	db	56
  1480  00BD9A  04                 	db	4
  1481  00BD9B  04                 	db	4
  1482  00BD9C  7C                 	db	124
  1483  00BD9D  7C                 	db	124
  1484  00BD9E  08                 	db	8
  1485  00BD9F  10                 	db	16
  1486  00BDA0  08                 	db	8
  1487  00BDA1  7C                 	db	124
  1488  00BDA2  7C                 	db	124
  1489  00BDA3  10                 	db	16
  1490  00BDA4  10                 	db	16
  1491  00BDA5  10                 	db	16
  1492  00BDA6  7C                 	db	124
  1493  00BDA7  38                 	db	56
  1494  00BDA8  44                 	db	68
  1495  00BDA9  44                 	db	68
  1496  00BDAA  44                 	db	68
  1497  00BDAB  38                 	db	56
  1498  00BDAC  7C                 	db	124
  1499  00BDAD  04                 	db	4
  1500  00BDAE  04                 	db	4
  1501  00BDAF  04                 	db	4
  1502  00BDB0  7C                 	db	124
  1503  00BDB1  7C                 	db	124
  1504  00BDB2  14                 	db	20
  1505  00BDB3  14                 	db	20
  1506  00BDB4  14                 	db	20
  1507  00BDB5  08                 	db	8
  1508  00BDB6  38                 	db	56
  1509  00BDB7  44                 	db	68
  1510  00BDB8  44                 	db	68
  1511  00BDB9  44                 	db	68
  1512  00BDBA  28                 	db	40
  1513  00BDBB  04                 	db	4
  1514  00BDBC  04                 	db	4
  1515  00BDBD  7C                 	db	124
  1516  00BDBE  04                 	db	4
  1517  00BDBF  04                 	db	4
  1518  00BDC0  4C                 	db	76
  1519  00BDC1  50                 	db	80
  1520  00BDC2  50                 	db	80
  1521  00BDC3  50                 	db	80
  1522  00BDC4  3C                 	db	60
  1523  00BDC5  18                 	db	24
  1524  00BDC6  24                 	db	36
  1525  00BDC7  7C                 	db	124
  1526  00BDC8  24                 	db	36
  1527  00BDC9  18                 	db	24
  1528  00BDCA  00                 	db	0
  1529  00BDCB  6C                 	db	108
  1530  00BDCC  10                 	db	16
  1531  00BDCD  10                 	db	16
  1532  00BDCE  6C                 	db	108
  1533  00BDCF  7C                 	db	124
  1534  00BDD0  40                 	db	64
  1535  00BDD1  40                 	db	64
  1536  00BDD2  7C                 	db	124
  1537  00BDD3  C0                 	db	192
  1538  00BDD4  0C                 	db	12
  1539  00BDD5  10                 	db	16
  1540  00BDD6  10                 	db	16
  1541  00BDD7  10                 	db	16
  1542  00BDD8  7C                 	db	124
  1543  00BDD9  7C                 	db	124
  1544  00BDDA  40                 	db	64
  1545  00BDDB  78                 	db	120
  1546  00BDDC  40                 	db	64
  1547  00BDDD  7C                 	db	124
  1548  00BDDE  7C                 	db	124
  1549  00BDDF  40                 	db	64
  1550  00BDE0  78                 	db	120
  1551  00BDE1  40                 	db	64
  1552  00BDE2  FC                 	db	252
  1553  00BDE3  04                 	db	4
  1554  00BDE4  7C                 	db	124
  1555  00BDE5  50                 	db	80
  1556  00BDE6  50                 	db	80
  1557  00BDE7  20                 	db	32
  1558  00BDE8  7C                 	db	124
  1559  00BDE9  50                 	db	80
  1560  00BDEA  20                 	db	32
  1561  00BDEB  00                 	db	0
  1562  00BDEC  7C                 	db	124
  1563  00BDED  00                 	db	0
  1564  00BDEE  7C                 	db	124
  1565  00BDEF  50                 	db	80
  1566  00BDF0  50                 	db	80
  1567  00BDF1  20                 	db	32
  1568  00BDF2  44                 	db	68
  1569  00BDF3  54                 	db	84
  1570  00BDF4  54                 	db	84
  1571  00BDF5  54                 	db	84
  1572  00BDF6  38                 	db	56
  1573  00BDF7  7C                 	db	124
  1574  00BDF8  10                 	db	16
  1575  00BDF9  38                 	db	56
  1576  00BDFA  44                 	db	68
  1577  00BDFB  38                 	db	56
  1578  00BDFC  48                 	db	72
  1579  00BDFD  54                 	db	84
  1580  00BDFE  34                 	db	52
  1581  00BDFF  14                 	db	20
  1582  00BE00  7C                 	db	124
  1583  00BE01                     __end_of_Font:
  1584                           	opt stack 0
  1585  00BE01                     _dFont4:
  1586                           	opt stack 0
  1587  00BE01  3E                 	db	62
  1588  00BE02  7F                 	db	127
  1589  00BE03  41                 	db	65
  1590  00BE04  7F                 	db	127
  1591  00BE05  3E                 	db	62
  1592  00BE06  00                 	db	0
  1593  00BE07  02                 	db	2
  1594  00BE08  7F                 	db	127
  1595  00BE09  7F                 	db	127
  1596  00BE0A  00                 	db	0
  1597  00BE0B  62                 	db	98
  1598  00BE0C  73                 	db	115
  1599  00BE0D  59                 	db	89
  1600  00BE0E  4F                 	db	79
  1601  00BE0F  46                 	db	70
  1602  00BE10  22                 	db	34
  1603  00BE11  63                 	db	99
  1604  00BE12  49                 	db	73
  1605  00BE13  7F                 	db	127
  1606  00BE14  36                 	db	54
  1607  00BE15  18                 	db	24
  1608  00BE16  14                 	db	20
  1609  00BE17  12                 	db	18
  1610  00BE18  7F                 	db	127
  1611  00BE19  7F                 	db	127
  1612  00BE1A  2F                 	db	47
  1613  00BE1B  6F                 	db	111
  1614  00BE1C  45                 	db	69
  1615  00BE1D  7D                 	db	125
  1616  00BE1E  39                 	db	57
  1617  00BE1F  3E                 	db	62
  1618  00BE20  7F                 	db	127
  1619  00BE21  49                 	db	73
  1620  00BE22  7B                 	db	123
  1621  00BE23  32                 	db	50
  1622  00BE24  03                 	db	3
  1623  00BE25  73                 	db	115
  1624  00BE26  79                 	db	121
  1625  00BE27  0F                 	db	15
  1626  00BE28  07                 	db	7
  1627  00BE29  36                 	db	54
  1628  00BE2A  7F                 	db	127
  1629  00BE2B  49                 	db	73
  1630  00BE2C  7F                 	db	127
  1631  00BE2D  36                 	db	54
  1632  00BE2E  26                 	db	38
  1633  00BE2F  6F                 	db	111
  1634  00BE30  49                 	db	73
  1635  00BE31  7F                 	db	127
  1636  00BE32  3E                 	db	62
  1637  00BE33                     __end_of_dFont4:
  1638                           	opt stack 0
  1639  00BE33                     _dFont3:
  1640                           	opt stack 0
  1641  00BE33  7F                 	db	127
  1642  00BE34  41                 	db	65
  1643  00BE35  41                 	db	65
  1644  00BE36  7F                 	db	127
  1645  00BE37  7F                 	db	127
  1646  00BE38  00                 	db	0
  1647  00BE39  00                 	db	0
  1648  00BE3A  7F                 	db	127
  1649  00BE3B  7F                 	db	127
  1650  00BE3C  00                 	db	0
  1651  00BE3D  61                 	db	97
  1652  00BE3E  71                 	db	113
  1653  00BE3F  59                 	db	89
  1654  00BE40  4F                 	db	79
  1655  00BE41  47                 	db	71
  1656  00BE42  41                 	db	65
  1657  00BE43  49                 	db	73
  1658  00BE44  49                 	db	73
  1659  00BE45  7F                 	db	127
  1660  00BE46  7F                 	db	127
  1661  00BE47  1F                 	db	31
  1662  00BE48  10                 	db	16
  1663  00BE49  10                 	db	16
  1664  00BE4A  7F                 	db	127
  1665  00BE4B  7F                 	db	127
  1666  00BE4C  4F                 	db	79
  1667  00BE4D  49                 	db	73
  1668  00BE4E  49                 	db	73
  1669  00BE4F  79                 	db	121
  1670  00BE50  79                 	db	121
  1671  00BE51  7F                 	db	127
  1672  00BE52  49                 	db	73
  1673  00BE53  49                 	db	73
  1674  00BE54  79                 	db	121
  1675  00BE55  79                 	db	121
  1676  00BE56  01                 	db	1
  1677  00BE57  01                 	db	1
  1678  00BE58  01                 	db	1
  1679  00BE59  7F                 	db	127
  1680  00BE5A  7F                 	db	127
  1681  00BE5B  7F                 	db	127
  1682  00BE5C  49                 	db	73
  1683  00BE5D  49                 	db	73
  1684  00BE5E  7F                 	db	127
  1685  00BE5F  7F                 	db	127
  1686  00BE60  4F                 	db	79
  1687  00BE61  49                 	db	73
  1688  00BE62  49                 	db	73
  1689  00BE63  7F                 	db	127
  1690  00BE64  7F                 	db	127
  1691  00BE65                     __end_of_dFont3:
  1692                           	opt stack 0
  1693  00BE65                     _dFont2:
  1694                           	opt stack 0
  1695  00BE65  7F                 	db	127
  1696  00BE66  7F                 	db	127
  1697  00BE67  41                 	db	65
  1698  00BE68  7F                 	db	127
  1699  00BE69  7F                 	db	127
  1700  00BE6A  00                 	db	0
  1701  00BE6B  01                 	db	1
  1702  00BE6C  7F                 	db	127
  1703  00BE6D  7F                 	db	127
  1704  00BE6E  00                 	db	0
  1705  00BE6F  63                 	db	99
  1706  00BE70  73                 	db	115
  1707  00BE71  59                 	db	89
  1708  00BE72  4F                 	db	79
  1709  00BE73  47                 	db	71
  1710  00BE74  63                 	db	99
  1711  00BE75  6B                 	db	107
  1712  00BE76  49                 	db	73
  1713  00BE77  7F                 	db	127
  1714  00BE78  7F                 	db	127
  1715  00BE79  1F                 	db	31
  1716  00BE7A  1F                 	db	31
  1717  00BE7B  10                 	db	16
  1718  00BE7C  7F                 	db	127
  1719  00BE7D  7F                 	db	127
  1720  00BE7E  6F                 	db	111
  1721  00BE7F  6F                 	db	111
  1722  00BE80  49                 	db	73
  1723  00BE81  79                 	db	121
  1724  00BE82  79                 	db	121
  1725  00BE83  7F                 	db	127
  1726  00BE84  7F                 	db	127
  1727  00BE85  49                 	db	73
  1728  00BE86  7B                 	db	123
  1729  00BE87  7B                 	db	123
  1730  00BE88  03                 	db	3
  1731  00BE89  73                 	db	115
  1732  00BE8A  79                 	db	121
  1733  00BE8B  0F                 	db	15
  1734  00BE8C  07                 	db	7
  1735  00BE8D  7F                 	db	127
  1736  00BE8E  7F                 	db	127
  1737  00BE8F  49                 	db	73
  1738  00BE90  7F                 	db	127
  1739  00BE91  7F                 	db	127
  1740  00BE92  6F                 	db	111
  1741  00BE93  6F                 	db	111
  1742  00BE94  49                 	db	73
  1743  00BE95  7F                 	db	127
  1744  00BE96  7F                 	db	127
  1745  00BE97                     __end_of_dFont2:
  1746                           	opt stack 0
  1747  00BE97                     _dFont1:
  1748                           	opt stack 0
  1749  00BE97  7F                 	db	127
  1750  00BE98  7F                 	db	127
  1751  00BE99  41                 	db	65
  1752  00BE9A  7F                 	db	127
  1753  00BE9B  7F                 	db	127
  1754  00BE9C  00                 	db	0
  1755  00BE9D  00                 	db	0
  1756  00BE9E  7F                 	db	127
  1757  00BE9F  7F                 	db	127
  1758  00BEA0  00                 	db	0
  1759  00BEA1  61                 	db	97
  1760  00BEA2  71                 	db	113
  1761  00BEA3  59                 	db	89
  1762  00BEA4  4F                 	db	79
  1763  00BEA5  47                 	db	71
  1764  00BEA6  41                 	db	65
  1765  00BEA7  49                 	db	73
  1766  00BEA8  49                 	db	73
  1767  00BEA9  7F                 	db	127
  1768  00BEAA  7F                 	db	127
  1769  00BEAB  1F                 	db	31
  1770  00BEAC  1F                 	db	31
  1771  00BEAD  10                 	db	16
  1772  00BEAE  7F                 	db	127
  1773  00BEAF  7F                 	db	127
  1774  00BEB0  4F                 	db	79
  1775  00BEB1  4F                 	db	79
  1776  00BEB2  49                 	db	73
  1777  00BEB3  79                 	db	121
  1778  00BEB4  79                 	db	121
  1779  00BEB5  7F                 	db	127
  1780  00BEB6  7F                 	db	127
  1781  00BEB7  49                 	db	73
  1782  00BEB8  79                 	db	121
  1783  00BEB9  79                 	db	121
  1784  00BEBA  01                 	db	1
  1785  00BEBB  71                 	db	113
  1786  00BEBC  79                 	db	121
  1787  00BEBD  0F                 	db	15
  1788  00BEBE  07                 	db	7
  1789  00BEBF  7F                 	db	127
  1790  00BEC0  7F                 	db	127
  1791  00BEC1  49                 	db	73
  1792  00BEC2  7F                 	db	127
  1793  00BEC3  7F                 	db	127
  1794  00BEC4  5F                 	db	95
  1795  00BEC5  5F                 	db	95
  1796  00BEC6  51                 	db	81
  1797  00BEC7  7F                 	db	127
  1798  00BEC8  7F                 	db	127
  1799  00BEC9                     __end_of_dFont1:
  1800                           	opt stack 0
  1801  00BEC9                     _FontS:
  1802                           	opt stack 0
  1803  00BEC9  00                 	db	0
  1804  00BECA  00                 	db	0
  1805  00BECB  00                 	db	0
  1806  00BECC  7C                 	db	124
  1807  00BECD  44                 	db	68
  1808  00BECE  7C                 	db	124
  1809  00BECF  00                 	db	0
  1810  00BED0  7C                 	db	124
  1811  00BED1  00                 	db	0
  1812  00BED2  74                 	db	116
  1813  00BED3  54                 	db	84
  1814  00BED4  5C                 	db	92
  1815  00BED5  54                 	db	84
  1816  00BED6  54                 	db	84
  1817  00BED7  7C                 	db	124
  1818  00BED8  1C                 	db	28
  1819  00BED9  10                 	db	16
  1820  00BEDA  7C                 	db	124
  1821  00BEDB  5C                 	db	92
  1822  00BEDC  54                 	db	84
  1823  00BEDD  74                 	db	116
  1824  00BEDE  7C                 	db	124
  1825  00BEDF  54                 	db	84
  1826  00BEE0  74                 	db	116
  1827  00BEE1  04                 	db	4
  1828  00BEE2  04                 	db	4
  1829  00BEE3  7C                 	db	124
  1830  00BEE4  7C                 	db	124
  1831  00BEE5  54                 	db	84
  1832  00BEE6  7C                 	db	124
  1833  00BEE7  5C                 	db	92
  1834  00BEE8  54                 	db	84
  1835  00BEE9  7C                 	db	124
  1836  00BEEA                     __end_of_FontS:
  1837                           	opt stack 0
  1838  00BEEA  03                 	db	3
  1839  00BEEB                     __end_of_OSS:
  1840                           	opt stack 0
  1841  0000                     _TMR0	set	4054
  1842  0000                     _EECON2	set	4007
  1843  0000                     _EEDATA	set	4008
  1844  0000                     _EEADR	set	4009
  1845  0000                     _EECON1bits	set	4006
  1846  0000                     _SPBRG	set	4015
  1847  0000                     _SPBRGH	set	4016
  1848  0000                     _BAUDCONbits	set	4024
  1849  0000                     _RCSTAbits	set	4011
  1850  0000                     _TXSTAbits	set	4012
  1851  0000                     _TXREG	set	4013
  1852  0000                     _TRISCbits	set	3988
  1853  0000                     _PORTB	set	3969
  1854  0000                     _T1CONbits	set	4045
  1855  0000                     _LATDbits	set	3980
  1856  0000                     _TMR1L	set	4046
  1857  0000                     _TMR1H	set	4047
  1858  0000                     _PIR1bits	set	3998
  1859  0000                     _PIE1bits	set	3997
  1860  0000                     _T0CON	set	4053
  1861  0000                     _SSPBUF	set	4041
  1862  0000                     _SSPCON2	set	4037
  1863  0000                     _SSPADD	set	4040
  1864  0000                     _SSPSTAT	set	4039
  1865  0000                     _SSPCON1	set	4038
  1866  0000                     _PORTCbits	set	3970
  1867  0000                     _INTCON2bits	set	4081
  1868  0000                     _TRISD	set	3989
  1869  0000                     _LATD	set	3980
  1870  0000                     _INTCON2	set	4081
  1871  0000                     _TRISB	set	3987
  1872  0000                     _LATB	set	3978
  1873  0000                     _TRISC	set	3988
  1874  0000                     _LATC	set	3979
  1875  0000                     _INTCONbits	set	4082
  1876  0000                     _TXIF	set	31988
  1877  0000                     _ACKEN	set	32300
  1878  0000                     _ACKDT	set	32301
  1879  0000                     _RCEN	set	32299
  1880  0000                     _RSEN	set	32297
  1881  0000                     _SEN	set	32296
  1882  0000                     _PEN	set	32298
  1883  00BEEB  43                 	db	67	;'C'
  1884  00BEEC  6C                 	db	108	;'l'
  1885  00BEED  6F                 	db	111	;'o'
  1886  00BEEE  63                 	db	99	;'c'
  1887  00BEEF  6B                 	db	107	;'k'
  1888  00BEF0  20                 	db	32
  1889  00BEF1  76                 	db	118	;'v'
  1890  00BEF2  31                 	db	49	;'1'
  1891  00BEF3  2E                 	db	46
  1892  00BEF4  30                 	db	48	;'0'
  1893  00BEF5  20                 	db	32
  1894  00BEF6  62                 	db	98	;'b'
  1895  00BEF7  79                 	db	121	;'y'
  1896  00BEF8  20                 	db	32
  1897  00BEF9  49                 	db	73	;'I'
  1898  00BEFA  76                 	db	118	;'v'
  1899  00BEFB  61                 	db	97	;'a'
  1900  00BEFC  6E                 	db	110	;'n'
  1901  00BEFD  5F                 	db	95	;'_'
  1902  00BEFE  66                 	db	102	;'f'
  1903  00BEFF  64                 	db	100	;'d'
  1904  00BF00  00                 	db	0
  1905  00BF01                     STR_2:
  1906  00BF01  54                 	db	84	;'T'
  1907  00BF02  65                 	db	101	;'e'
  1908  00BF03  6D                 	db	109	;'m'
  1909  00BF04  70                 	db	112	;'p'
  1910  00BF05  65                 	db	101	;'e'
  1911  00BF06  72                 	db	114	;'r'
  1912  00BF07  61                 	db	97	;'a'
  1913  00BF08  74                 	db	116	;'t'
  1914  00BF09  75                 	db	117	;'u'
  1915  00BF0A  72                 	db	114	;'r'
  1916  00BF0B  65                 	db	101	;'e'
  1917  00BF0C  3A                 	db	58	;':'
  1918  00BF0D  20                 	db	32
  1919  00BF0E  25                 	db	37
  1920  00BF0F  64                 	db	100	;'d'
  1921  00BF10  0A                 	db	10
  1922  00BF11  0D                 	db	13
  1923  00BF12  20                 	db	32
  1924  00BF13  00                 	db	0
  1925  00BF14  54                 	db	84	;'T'
  1926  00BF15  65                 	db	101	;'e'
  1927  00BF16  6D                 	db	109	;'m'
  1928  00BF17  70                 	db	112	;'p'
  1929  00BF18  65                 	db	101	;'e'
  1930  00BF19  72                 	db	114	;'r'
  1931  00BF1A  42                 	db	66	;'B'
  1932  00BF1B  4D                 	db	77	;'M'
  1933  00BF1C  50                 	db	80	;'P'
  1934  00BF1D  3A                 	db	58	;':'
  1935  00BF1E  20                 	db	32
  1936  00BF1F  25                 	db	37
  1937  00BF20  64                 	db	100	;'d'
  1938  00BF21  0A                 	db	10
  1939  00BF22  0D                 	db	13
  1940  00BF23  00                 	db	0
  1941  00BF24                     STR_3:
  1942  00BF24  41                 	db	65	;'A'
  1943  00BF25  43                 	db	67	;'C'
  1944  00BF26  31                 	db	49	;'1'
  1945  00BF27  3A                 	db	58	;':'
  1946  00BF28  20                 	db	32
  1947  00BF29  25                 	db	37
  1948  00BF2A  64                 	db	100	;'d'
  1949  00BF2B  0A                 	db	10
  1950  00BF2C  0D                 	db	13
  1951  00BF2D  00                 	db	0
  1952  00BF2E                     STR_4:
  1953  00BF2E  41                 	db	65	;'A'
  1954  00BF2F  43                 	db	67	;'C'
  1955  00BF30  32                 	db	50	;'2'
  1956  00BF31  3A                 	db	58	;':'
  1957  00BF32  20                 	db	32
  1958  00BF33  25                 	db	37
  1959  00BF34  64                 	db	100	;'d'
  1960  00BF35  0A                 	db	10
  1961  00BF36  0D                 	db	13
  1962  00BF37  00                 	db	0
  1963  00BF38                     STR_5:
  1964  00BF38  41                 	db	65	;'A'
  1965  00BF39  43                 	db	67	;'C'
  1966  00BF3A  33                 	db	51	;'3'
  1967  00BF3B  3A                 	db	58	;':'
  1968  00BF3C  20                 	db	32
  1969  00BF3D  25                 	db	37
  1970  00BF3E  64                 	db	100	;'d'
  1971  00BF3F  0A                 	db	10
  1972  00BF40  0D                 	db	13
  1973  00BF41  00                 	db	0
  1974  00BF42                     STR_29:
  1975  00BF42  58                 	db	88	;'X'
  1976  00BF43  31                 	db	49	;'1'
  1977  00BF44  3A                 	db	58	;':'
  1978  00BF45  20                 	db	32
  1979  00BF46  25                 	db	37
  1980  00BF47  6C                 	db	108	;'l'
  1981  00BF48  69                 	db	105	;'i'
  1982  00BF49  0A                 	db	10
  1983  00BF4A  0D                 	db	13
  1984  00BF4B  00                 	db	0
  1985  00BF4C  58                 	db	88	;'X'
  1986  00BF4D  32                 	db	50	;'2'
  1987  00BF4E  3A                 	db	58	;':'
  1988  00BF4F  20                 	db	32
  1989  00BF50  25                 	db	37
  1990  00BF51  6C                 	db	108	;'l'
  1991  00BF52  69                 	db	105	;'i'
  1992  00BF53  0A                 	db	10
  1993  00BF54  0D                 	db	13
  1994  00BF55  00                 	db	0
  1995  00BF56  42                 	db	66	;'B'
  1996  00BF57  33                 	db	51	;'3'
  1997  00BF58  3A                 	db	58	;':'
  1998  00BF59  20                 	db	32
  1999  00BF5A  25                 	db	37
  2000  00BF5B  6C                 	db	108	;'l'
  2001  00BF5C  69                 	db	105	;'i'
  2002  00BF5D  0A                 	db	10
  2003  00BF5E  0D                 	db	13
  2004  00BF5F  00                 	db	0
  2005  00BF60  42                 	db	66	;'B'
  2006  00BF61  34                 	db	52	;'4'
  2007  00BF62  3A                 	db	58	;':'
  2008  00BF63  20                 	db	32
  2009  00BF64  25                 	db	37
  2010  00BF65  6C                 	db	108	;'l'
  2011  00BF66  69                 	db	105	;'i'
  2012  00BF67  0A                 	db	10
  2013  00BF68  0D                 	db	13
  2014  00BF69  00                 	db	0
  2015  00BF6A  42                 	db	66	;'B'
  2016  00BF6B  37                 	db	55	;'7'
  2017  00BF6C  3A                 	db	58	;':'
  2018  00BF6D  20                 	db	32
  2019  00BF6E  25                 	db	37
  2020  00BF6F  6C                 	db	108	;'l'
  2021  00BF70  69                 	db	105	;'i'
  2022  00BF71  0A                 	db	10
  2023  00BF72  0D                 	db	13
  2024  00BF73  00                 	db	0
  2025  00BF74                     STR_28:
  2026  00BF74  50                 	db	80	;'P'
  2027  00BF75  70                 	db	112	;'p'
  2028  00BF76  3A                 	db	58	;':'
  2029  00BF77  20                 	db	32
  2030  00BF78  25                 	db	37
  2031  00BF79  6C                 	db	108	;'l'
  2032  00BF7A  69                 	db	105	;'i'
  2033  00BF7B  0A                 	db	10
  2034  00BF7C  0D                 	db	13
  2035  00BF7D  00                 	db	0
  2036  00BF7E                     STR_6:
  2037  00BF7E  41                 	db	65	;'A'
  2038  00BF7F  43                 	db	67	;'C'
  2039  00BF80  34                 	db	52	;'4'
  2040  00BF81  3A                 	db	58	;':'
  2041  00BF82  20                 	db	32
  2042  00BF83  25                 	db	37
  2043  00BF84  75                 	db	117	;'u'
  2044  00BF85  0A                 	db	10
  2045  00BF86  0D                 	db	13
  2046  00BF87  00                 	db	0
  2047  00BF88                     STR_7:
  2048  00BF88  41                 	db	65	;'A'
  2049  00BF89  43                 	db	67	;'C'
  2050  00BF8A  35                 	db	53	;'5'
  2051  00BF8B  3A                 	db	58	;':'
  2052  00BF8C  20                 	db	32
  2053  00BF8D  25                 	db	37
  2054  00BF8E  75                 	db	117	;'u'
  2055  00BF8F  0A                 	db	10
  2056  00BF90  0D                 	db	13
  2057  00BF91  00                 	db	0
  2058  00BF92                     STR_8:
  2059  00BF92  41                 	db	65	;'A'
  2060  00BF93  43                 	db	67	;'C'
  2061  00BF94  36                 	db	54	;'6'
  2062  00BF95  3A                 	db	58	;':'
  2063  00BF96  20                 	db	32
  2064  00BF97  25                 	db	37
  2065  00BF98  75                 	db	117	;'u'
  2066  00BF99  0A                 	db	10
  2067  00BF9A  0D                 	db	13
  2068  00BF9B  00                 	db	0
  2069  00BF9C                     STR_9:
  2070  00BF9C  42                 	db	66	;'B'
  2071  00BF9D  31                 	db	49	;'1'
  2072  00BF9E  3A                 	db	58	;':'
  2073  00BF9F  20                 	db	32
  2074  00BFA0  25                 	db	37
  2075  00BFA1  64                 	db	100	;'d'
  2076  00BFA2  0A                 	db	10
  2077  00BFA3  0D                 	db	13
  2078  00BFA4  00                 	db	0
  2079  00BFA5                     STR_14:
  2080  00BFA5  58                 	db	88	;'X'
  2081  00BFA6  31                 	db	49	;'1'
  2082  00BFA7  3A                 	db	58	;':'
  2083  00BFA8  20                 	db	32
  2084  00BFA9  25                 	db	37
  2085  00BFAA  64                 	db	100	;'d'
  2086  00BFAB  0A                 	db	10
  2087  00BFAC  0D                 	db	13
  2088  00BFAD  00                 	db	0
  2089  00BFAE                     STR_10:
  2090  00BFAE  42                 	db	66	;'B'
  2091  00BFAF  32                 	db	50	;'2'
  2092  00BFB0  3A                 	db	58	;':'
  2093  00BFB1  20                 	db	32
  2094  00BFB2  25                 	db	37
  2095  00BFB3  64                 	db	100	;'d'
  2096  00BFB4  0A                 	db	10
  2097  00BFB5  0D                 	db	13
  2098  00BFB6  00                 	db	0
  2099  00BFB7                     STR_15:
  2100  00BFB7  58                 	db	88	;'X'
  2101  00BFB8  32                 	db	50	;'2'
  2102  00BFB9  3A                 	db	58	;':'
  2103  00BFBA  20                 	db	32
  2104  00BFBB  25                 	db	37
  2105  00BFBC  64                 	db	100	;'d'
  2106  00BFBD  0A                 	db	10
  2107  00BFBE  0D                 	db	13
  2108  00BFBF  00                 	db	0
  2109  00BFC0                     STR_21:
  2110  00BFC0  58                 	db	88	;'X'
  2111  00BFC1  33                 	db	51	;'3'
  2112  00BFC2  3A                 	db	58	;':'
  2113  00BFC3  20                 	db	32
  2114  00BFC4  25                 	db	37
  2115  00BFC5  64                 	db	100	;'d'
  2116  00BFC6  0A                 	db	10
  2117  00BFC7  0D                 	db	13
  2118  00BFC8  00                 	db	0
  2119  00BFC9  42                 	db	66	;'B'
  2120  00BFCA  35                 	db	53	;'5'
  2121  00BFCB  3A                 	db	58	;':'
  2122  00BFCC  20                 	db	32
  2123  00BFCD  25                 	db	37
  2124  00BFCE  64                 	db	100	;'d'
  2125  00BFCF  0A                 	db	10
  2126  00BFD0  0D                 	db	13
  2127  00BFD1  00                 	db	0
  2128  00BFD2  42                 	db	66	;'B'
  2129  00BFD3  36                 	db	54	;'6'
  2130  00BFD4  3A                 	db	58	;':'
  2131  00BFD5  20                 	db	32
  2132  00BFD6  25                 	db	37
  2133  00BFD7  64                 	db	100	;'d'
  2134  00BFD8  0A                 	db	10
  2135  00BFD9  0D                 	db	13
  2136  00BFDA  00                 	db	0
  2137  00BFDB                     STR_11:
  2138  00BFDB  4D                 	db	77	;'M'
  2139  00BFDC  42                 	db	66	;'B'
  2140  00BFDD  3A                 	db	58	;':'
  2141  00BFDE  20                 	db	32
  2142  00BFDF  25                 	db	37
  2143  00BFE0  64                 	db	100	;'d'
  2144  00BFE1  0A                 	db	10
  2145  00BFE2  0D                 	db	13
  2146  00BFE3  00                 	db	0
  2147  00BFE4                     STR_12:
  2148  00BFE4  4D                 	db	77	;'M'
  2149  00BFE5  43                 	db	67	;'C'
  2150  00BFE6  3A                 	db	58	;':'
  2151  00BFE7  20                 	db	32
  2152  00BFE8  25                 	db	37
  2153  00BFE9  64                 	db	100	;'d'
  2154  00BFEA  0A                 	db	10
  2155  00BFEB  0D                 	db	13
  2156  00BFEC  00                 	db	0
  2157  00BFED                     STR_13:
  2158  00BFED  4D                 	db	77	;'M'
  2159  00BFEE  44                 	db	68	;'D'
  2160  00BFEF  3A                 	db	58	;':'
  2161  00BFF0  20                 	db	32
  2162  00BFF1  25                 	db	37
  2163  00BFF2  64                 	db	100	;'d'
  2164  00BFF3  0A                 	db	10
  2165  00BFF4  0D                 	db	13
  2166  00BFF5  00                 	db	0
  2167  00BFF6  50                 	db	80	;'P'
  2168  00BFF7  70                 	db	112	;'p'
  2169  00BFF8  3A                 	db	58	;':'
  2170  00BFF9  20                 	db	32
  2171  00BFFA  25                 	db	37
  2172  00BFFB  64                 	db	100	;'d'
  2173  00BFFC  0A                 	db	10
  2174  00BFFD  0D                 	db	13
  2175  00BFFE  00                 	db	0
  2176  0000                     
  2177                           ; #config settings
  2178  00BFFF  00                 	db	0	; dummy byte at the end
  2179  0000                     tosu	equ	0xFFF
  2180                           tosh	equ	0xFFE
  2181                           tosl	equ	0xFFD
  2182                           pclath	equ	0xFFA
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           prodh	equ	0xFF4
  2188                           prodl	equ	0xFF3
  2189                           intcon	equ	0xFF2
  2190                           intcon2	equ	0xFF1
  2191                           wreg	equ	0xFE8
  2192                           indf1	equ	0xFE7
  2193                           plusw1	equ	0xFE3
  2194                           fsr1h	equ	0xFE2
  2195                           fsr1l	equ	0xFE1
  2196                           indf2	equ	0xFDF
  2197                           postinc2	equ	0xFDE
  2198                           postdec2	equ	0xFDD
  2199                           plusw2	equ	0xFDB
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204                           	psect	cinit
  2205  001950                     __pcinit:
  2206                           	opt stack 0
  2207  001950                     start_initialization:
  2208                           	opt stack 0
  2209  001950                     __initialization:
  2210                           	opt stack 0
  2211                           
  2212                           ; Initialize objects allocated to COMRAM (3 bytes)
  2213                           ; load TBLPTR registers with __pidataCOMRAM
  2214  001950  0E86               	movlw	low __pidataCOMRAM
  2215  001952  6EF6               	movwf	tblptrl,c
  2216  001954  0E20               	movlw	high __pidataCOMRAM
  2217  001956  6EF7               	movwf	tblptrh,c
  2218  001958  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2219  00195A  6EF8               	movwf	tblptru,c
  2220  00195C  0009               	tblrd		*+	;fetch initializer
  2221  00195E  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  2222  001962  0009               	tblrd		*+	;fetch initializer
  2223  001964  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  2224  001968  0009               	tblrd		*+	;fetch initializer
  2225  00196A  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  2226                           
  2227                           ; Clear objects allocated to BANK1 (220 bytes)
  2228  00196E  EE01  F000         	lfsr	0,__pbssBANK1
  2229  001972  0EDC               	movlw	220
  2230  001974                     clear_0:
  2231  001974  6AEE               	clrf	postinc0,c
  2232  001976  06E8               	decf	wreg,f,c
  2233  001978  E1FD               	bnz	clear_0
  2234                           
  2235                           ; Clear objects allocated to BANK0 (41 bytes)
  2236  00197A  EE00  F080         	lfsr	0,__pbssBANK0
  2237  00197E  0E29               	movlw	41
  2238  001980                     clear_1:
  2239  001980  6AEE               	clrf	postinc0,c
  2240  001982  06E8               	decf	wreg,f,c
  2241  001984  E1FD               	bnz	clear_1
  2242                           
  2243                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  2244  001986  6A70               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  2245                           
  2246                           ; Clear objects allocated to COMRAM (44 bytes)
  2247  001988  EE00  F041         	lfsr	0,__pbssCOMRAM
  2248  00198C  0E2C               	movlw	44
  2249  00198E                     clear_2:
  2250  00198E  6AEE               	clrf	postinc0,c
  2251  001990  06E8               	decf	wreg,f,c
  2252  001992  E1FD               	bnz	clear_2
  2253  001994                     end_of_initialization:
  2254                           	opt stack 0
  2255  001994                     __end_of__initialization:
  2256                           	opt stack 0
  2257  001994  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2258  001996  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2259  001998  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2260  00199A  6EF8               	movwf	tblptru,c
  2261  00199C  0100               	movlb	0
  2262  00199E  EFD1  F00C         	goto	_main	;jump to C main() function
  2263                           tosu	equ	0xFFF
  2264                           tosh	equ	0xFFE
  2265                           tosl	equ	0xFFD
  2266                           pclath	equ	0xFFA
  2267                           tblptru	equ	0xFF8
  2268                           tblptrh	equ	0xFF7
  2269                           tblptrl	equ	0xFF6
  2270                           tablat	equ	0xFF5
  2271                           prodh	equ	0xFF4
  2272                           prodl	equ	0xFF3
  2273                           intcon	equ	0xFF2
  2274                           intcon2	equ	0xFF1
  2275                           postinc0	equ	0xFEE
  2276                           wreg	equ	0xFE8
  2277                           indf1	equ	0xFE7
  2278                           plusw1	equ	0xFE3
  2279                           fsr1h	equ	0xFE2
  2280                           fsr1l	equ	0xFE1
  2281                           indf2	equ	0xFDF
  2282                           postinc2	equ	0xFDE
  2283                           postdec2	equ	0xFDD
  2284                           plusw2	equ	0xFDB
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289                           	psect	bitbssCOMRAM
  2290  000380                     __pbitbssCOMRAM:
  2291                           	opt stack 0
  2292  000380                     _en_put:
  2293                           	opt stack 0
  2294  000380                     	ds	1
  2295  000381                     _show_digit:
  2296                           	opt stack 0
  2297  000381                     	ds	1
  2298                           tosu	equ	0xFFF
  2299                           tosh	equ	0xFFE
  2300                           tosl	equ	0xFFD
  2301                           pclath	equ	0xFFA
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           prodh	equ	0xFF4
  2307                           prodl	equ	0xFF3
  2308                           intcon	equ	0xFF2
  2309                           intcon2	equ	0xFF1
  2310                           postinc0	equ	0xFEE
  2311                           wreg	equ	0xFE8
  2312                           indf1	equ	0xFE7
  2313                           plusw1	equ	0xFE3
  2314                           fsr1h	equ	0xFE2
  2315                           fsr1l	equ	0xFE1
  2316                           indf2	equ	0xFDF
  2317                           postinc2	equ	0xFDE
  2318                           postdec2	equ	0xFDD
  2319                           plusw2	equ	0xFDB
  2320                           fsr2h	equ	0xFDA
  2321                           fsr2l	equ	0xFD9
  2322                           status	equ	0xFD8
  2323                           
  2324                           	psect	bssCOMRAM
  2325  000041                     __pbssCOMRAM:
  2326                           	opt stack 0
  2327  000041                     _TSTime:
  2328                           	opt stack 0
  2329  000041                     	ds	7
  2330  000048                     _md:
  2331                           	opt stack 0
  2332  000048                     	ds	2
  2333  00004A                     _mc:
  2334                           	opt stack 0
  2335  00004A                     	ds	2
  2336  00004C                     _mb:
  2337                           	opt stack 0
  2338  00004C                     	ds	2
  2339  00004E                     _b2:
  2340                           	opt stack 0
  2341  00004E                     	ds	2
  2342  000050                     _b1:
  2343                           	opt stack 0
  2344  000050                     	ds	2
  2345  000052                     _ac6:
  2346                           	opt stack 0
  2347  000052                     	ds	2
  2348  000054                     _ac5:
  2349                           	opt stack 0
  2350  000054                     	ds	2
  2351  000056                     _ac4:
  2352                           	opt stack 0
  2353  000056                     	ds	2
  2354  000058                     _ac3:
  2355                           	opt stack 0
  2356  000058                     	ds	2
  2357  00005A                     _ac2:
  2358                           	opt stack 0
  2359  00005A                     	ds	2
  2360  00005C                     _ac1:
  2361                           	opt stack 0
  2362  00005C                     	ds	2
  2363  00005E                     key_press@count:
  2364                           	opt stack 0
  2365  00005E                     	ds	1
  2366  00005F                     _Timer0Interrupt:
  2367                           	opt stack 0
  2368  00005F                     	ds	1
  2369  000060                     _arrayTail:
  2370                           	opt stack 0
  2371  000060                     	ds	1
  2372  000061                     _type_font:
  2373                           	opt stack 0
  2374  000061                     	ds	1
  2375  000062                     _TTime:
  2376                           	opt stack 0
  2377  000062                     	ds	7
  2378  000069                     _temperature:
  2379                           	opt stack 0
  2380  000069                     	ds	2
  2381  00006B                     _time_flag:
  2382                           	opt stack 0
  2383  00006B                     	ds	1
  2384  00006C                     _timer_val:
  2385                           	opt stack 0
  2386  00006C                     	ds	1
  2387                           tosu	equ	0xFFF
  2388                           tosh	equ	0xFFE
  2389                           tosl	equ	0xFFD
  2390                           pclath	equ	0xFFA
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon	equ	0xFF2
  2398                           intcon2	equ	0xFF1
  2399                           postinc0	equ	0xFEE
  2400                           wreg	equ	0xFE8
  2401                           indf1	equ	0xFE7
  2402                           plusw1	equ	0xFE3
  2403                           fsr1h	equ	0xFE2
  2404                           fsr1l	equ	0xFE1
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           postdec2	equ	0xFDD
  2408                           plusw2	equ	0xFDB
  2409                           fsr2h	equ	0xFDA
  2410                           fsr2l	equ	0xFD9
  2411                           status	equ	0xFD8
  2412                           
  2413                           	psect	dataCOMRAM
  2414  00006D                     __pdataCOMRAM:
  2415                           	opt stack 0
  2416  00006D                     _pFont:
  2417                           	opt stack 0
  2418  00006D                     	ds	2
  2419  00006F                     _events:
  2420                           	opt stack 0
  2421  00006F                     	ds	1
  2422                           tosu	equ	0xFFF
  2423                           tosh	equ	0xFFE
  2424                           tosl	equ	0xFFD
  2425                           pclath	equ	0xFFA
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           intcon	equ	0xFF2
  2433                           intcon2	equ	0xFF1
  2434                           postinc0	equ	0xFEE
  2435                           wreg	equ	0xFE8
  2436                           indf1	equ	0xFE7
  2437                           plusw1	equ	0xFE3
  2438                           fsr1h	equ	0xFE2
  2439                           fsr1l	equ	0xFE1
  2440                           indf2	equ	0xFDF
  2441                           postinc2	equ	0xFDE
  2442                           postdec2	equ	0xFDD
  2443                           plusw2	equ	0xFDB
  2444                           fsr2h	equ	0xFDA
  2445                           fsr2l	equ	0xFD9
  2446                           status	equ	0xFD8
  2447                           
  2448                           	psect	bssBANK0
  2449  000080                     __pbssBANK0:
  2450                           	opt stack 0
  2451  000080                     _scratch:
  2452                           	opt stack 0
  2453  000080                     	ds	9
  2454  000089                     _Dis_Buff:
  2455                           	opt stack 0
  2456  000089                     	ds	32
  2457                           tosu	equ	0xFFF
  2458                           tosh	equ	0xFFE
  2459                           tosl	equ	0xFFD
  2460                           pclath	equ	0xFFA
  2461                           tblptru	equ	0xFF8
  2462                           tblptrh	equ	0xFF7
  2463                           tblptrl	equ	0xFF6
  2464                           tablat	equ	0xFF5
  2465                           prodh	equ	0xFF4
  2466                           prodl	equ	0xFF3
  2467                           intcon	equ	0xFF2
  2468                           intcon2	equ	0xFF1
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           indf1	equ	0xFE7
  2472                           plusw1	equ	0xFE3
  2473                           fsr1h	equ	0xFE2
  2474                           fsr1l	equ	0xFE1
  2475                           indf2	equ	0xFDF
  2476                           postinc2	equ	0xFDE
  2477                           postdec2	equ	0xFDD
  2478                           plusw2	equ	0xFDB
  2479                           fsr2h	equ	0xFDA
  2480                           fsr2l	equ	0xFD9
  2481                           status	equ	0xFD8
  2482                           
  2483                           	psect	bssBANK1
  2484  000100                     __pbssBANK1:
  2485                           	opt stack 0
  2486  000100                     _TaskArray:
  2487                           	opt stack 0
  2488  000100                     	ds	120
  2489  000178                     _text_buf:
  2490                           	opt stack 0
  2491  000178                     	ds	100
  2492                           tosu	equ	0xFFF
  2493                           tosh	equ	0xFFE
  2494                           tosl	equ	0xFFD
  2495                           pclath	equ	0xFFA
  2496                           tblptru	equ	0xFF8
  2497                           tblptrh	equ	0xFF7
  2498                           tblptrl	equ	0xFF6
  2499                           tablat	equ	0xFF5
  2500                           prodh	equ	0xFF4
  2501                           prodl	equ	0xFF3
  2502                           intcon	equ	0xFF2
  2503                           intcon2	equ	0xFF1
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           indf1	equ	0xFE7
  2507                           plusw1	equ	0xFE3
  2508                           fsr1h	equ	0xFE2
  2509                           fsr1l	equ	0xFE1
  2510                           indf2	equ	0xFDF
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           plusw2	equ	0xFDB
  2514                           fsr2h	equ	0xFDA
  2515                           fsr2l	equ	0xFD9
  2516                           status	equ	0xFD8
  2517                           
  2518                           	psect	cstackBANK0
  2519  0000A9                     __pcstackBANK0:
  2520                           	opt stack 0
  2521  0000A9                     readTemp_Single@fptmp:
  2522                           	opt stack 0
  2523                           
  2524                           ; 1 bytes @ 0x0
  2525  0000A9                     	ds	1
  2526  0000AA                     readTemp_Single@tmp:
  2527                           	opt stack 0
  2528                           
  2529                           ; 1 bytes @ 0x1
  2530  0000AA                     	ds	1
  2531  0000AB                     readTemp_Single@i:
  2532                           	opt stack 0
  2533                           
  2534                           ; 1 bytes @ 0x2
  2535  0000AB                     	ds	1
  2536  0000AC                     readTemp_Single@temp:
  2537                           	opt stack 0
  2538                           
  2539                           ; 2 bytes @ 0x3
  2540  0000AC                     	ds	2
  2541  0000AE                     ??_RTOS_DispatchTask:
  2542                           
  2543                           ; 1 bytes @ 0x5
  2544  0000AE                     	ds	4
  2545  0000B2                     RTOS_DispatchTask@function:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x9
  2549  0000B2                     	ds	2
  2550  0000B4                     RTOS_DispatchTask@j:
  2551                           	opt stack 0
  2552                           
  2553                           ; 1 bytes @ 0xB
  2554  0000B4                     	ds	1
  2555  0000B5                     RTOS_DispatchTask@i:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0xC
  2559  0000B5                     	ds	1
  2560  0000B6                     ??_main:
  2561                           
  2562                           ; 1 bytes @ 0xD
  2563  0000B6                     	ds	1
  2564                           tosu	equ	0xFFF
  2565                           tosh	equ	0xFFE
  2566                           tosl	equ	0xFFD
  2567                           pclath	equ	0xFFA
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           intcon	equ	0xFF2
  2575                           intcon2	equ	0xFF1
  2576                           postinc0	equ	0xFEE
  2577                           wreg	equ	0xFE8
  2578                           indf1	equ	0xFE7
  2579                           plusw1	equ	0xFE3
  2580                           fsr1h	equ	0xFE2
  2581                           fsr1l	equ	0xFE1
  2582                           indf2	equ	0xFDF
  2583                           postinc2	equ	0xFDE
  2584                           postdec2	equ	0xFDD
  2585                           plusw2	equ	0xFDB
  2586                           fsr2h	equ	0xFDA
  2587                           fsr2l	equ	0xFD9
  2588                           status	equ	0xFD8
  2589                           
  2590                           	psect	cstackCOMRAM
  2591  000001                     __pcstackCOMRAM:
  2592                           	opt stack 0
  2593  000001                     i2RTOS_SetTask@taskFunc:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0x0
  2597  000001                     	ds	2
  2598  000003                     i2RTOS_SetTask@taskDelay:
  2599                           	opt stack 0
  2600                           
  2601                           ; 2 bytes @ 0x2
  2602  000003                     	ds	2
  2603  000005                     i2RTOS_SetTask@taskPeriod:
  2604                           	opt stack 0
  2605                           
  2606                           ; 2 bytes @ 0x4
  2607  000005                     	ds	2
  2608  000007                     
  2609                           ; 1 bytes @ 0x6
  2610  000007                     	ds	2
  2611  000009                     i2RTOS_SetTask@i:
  2612                           	opt stack 0
  2613                           
  2614                           ; 1 bytes @ 0x8
  2615  000009                     	ds	1
  2616  00000A                     ??_INTERRUPT_InterruptManager:
  2617                           
  2618                           ; 1 bytes @ 0x9
  2619  00000A                     	ds	5
  2620  00000F                     ??_ow_reset:
  2621  00000F                     ??_read_byte:
  2622  00000F                     ??_I2C_Master_Wait:
  2623  00000F                     ??_bcd_to_decimal:
  2624  00000F                     ?___lwdiv:
  2625                           	opt stack 0
  2626  00000F                     ?___lldiv:
  2627                           	opt stack 0
  2628  00000F                     Send_Byte_7221@dat:
  2629                           	opt stack 0
  2630  00000F                     pixel_on@y:
  2631                           	opt stack 0
  2632  00000F                     pixel_off@y:
  2633                           	opt stack 0
  2634  00000F                     clear_matrix@i:
  2635                           	opt stack 0
  2636  00000F                     key_press@key:
  2637                           	opt stack 0
  2638  00000F                     write_bit@bitval:
  2639                           	opt stack 0
  2640  00000F                     putch@data:
  2641                           	opt stack 0
  2642  00000F                     write_eep@data:
  2643                           	opt stack 0
  2644  00000F                     ___lbdiv@divisor:
  2645                           	opt stack 0
  2646  00000F                     RTOS_SetTask@taskFunc:
  2647                           	opt stack 0
  2648  00000F                     RTOS_DeleteTask@taskFunc:
  2649                           	opt stack 0
  2650  00000F                     read_eep@address:
  2651                           	opt stack 0
  2652  00000F                     ___lwdiv@dividend:
  2653                           	opt stack 0
  2654  00000F                     ___lldiv@dividend:
  2655                           	opt stack 0
  2656                           
  2657                           ; 4 bytes @ 0xE
  2658  00000F                     	ds	1
  2659  000010                     ??_write_byte:
  2660  000010                     ??_pixel_on:
  2661  000010                     ??_pixel_off:
  2662  000010                     I2C_Master_Write@d:
  2663                           	opt stack 0
  2664  000010                     I2C_Master_Read@a:
  2665                           	opt stack 0
  2666  000010                     Send_Byte_7221@i:
  2667                           	opt stack 0
  2668  000010                     bcd_to_decimal@d:
  2669                           	opt stack 0
  2670  000010                     ow_reset@presence:
  2671                           	opt stack 0
  2672  000010                     write_eep@address:
  2673                           	opt stack 0
  2674  000010                     ___lbdiv@dividend:
  2675                           	opt stack 0
  2676                           
  2677                           ; 1 bytes @ 0xF
  2678  000010                     	ds	1
  2679  000011                     ??_RTOS_DeleteTask:
  2680  000011                     I2C_Master_Read@temp:
  2681                           	opt stack 0
  2682  000011                     Cmd7221@val:
  2683                           	opt stack 0
  2684  000011                     Update_Matrix@buf:
  2685                           	opt stack 0
  2686  000011                     read_byte@val:
  2687                           	opt stack 0
  2688  000011                     ___lbdiv@counter:
  2689                           	opt stack 0
  2690  000011                     RTOS_SetTask@taskDelay:
  2691                           	opt stack 0
  2692  000011                     ___lwdiv@divisor:
  2693                           	opt stack 0
  2694                           
  2695                           ; 2 bytes @ 0x10
  2696  000011                     	ds	1
  2697  000012                     ?_bmp085ReadInt:
  2698                           	opt stack 0
  2699  000012                     Cmd7221@adr:
  2700                           	opt stack 0
  2701  000012                     Update_Matrix@data:
  2702                           	opt stack 0
  2703  000012                     pixel_on@x:
  2704                           	opt stack 0
  2705  000012                     DS3231_Read@address:
  2706                           	opt stack 0
  2707  000012                     read_byte@i:
  2708                           	opt stack 0
  2709  000012                     write_byte@val:
  2710                           	opt stack 0
  2711  000012                     ___lbdiv@quotient:
  2712                           	opt stack 0
  2713                           
  2714                           ; 1 bytes @ 0x11
  2715  000012                     	ds	1
  2716  000013                     Cmd7221@i:
  2717                           	opt stack 0
  2718  000013                     Update_Matrix@j:
  2719                           	opt stack 0
  2720  000013                     pixel_off@x:
  2721                           	opt stack 0
  2722  000013                     DS3231_Read@value:
  2723                           	opt stack 0
  2724  000013                     write_byte@temp:
  2725                           	opt stack 0
  2726  000013                     ___lbmod@divisor:
  2727                           	opt stack 0
  2728  000013                     ___lwdiv@counter:
  2729                           	opt stack 0
  2730  000013                     RTOS_SetTask@taskPeriod:
  2731                           	opt stack 0
  2732  000013                     ___lldiv@divisor:
  2733                           	opt stack 0
  2734                           
  2735                           ; 4 bytes @ 0x12
  2736  000013                     	ds	1
  2737  000014                     ??_bmp085ReadInt:
  2738  000014                     Update_Matrix@i:
  2739                           	opt stack 0
  2740  000014                     pic_to_led@pic:
  2741                           	opt stack 0
  2742  000014                     getTime@p3:
  2743                           	opt stack 0
  2744  000014                     getDate@p4:
  2745                           	opt stack 0
  2746  000014                     write_byte@i:
  2747                           	opt stack 0
  2748  000014                     ___lbmod@dividend:
  2749                           	opt stack 0
  2750  000014                     ___lwdiv@quotient:
  2751                           	opt stack 0
  2752                           
  2753                           ; 2 bytes @ 0x13
  2754  000014                     	ds	1
  2755  000015                     ??_pic_to_led:
  2756  000015                     ??_scroll_left:
  2757  000015                     getTime@p2:
  2758                           	opt stack 0
  2759  000015                     getDate@p3:
  2760                           	opt stack 0
  2761  000015                     ___lbmod@counter:
  2762                           	opt stack 0
  2763                           
  2764                           ; 1 bytes @ 0x14
  2765  000015                     	ds	1
  2766  000016                     ?___lwmod:
  2767                           	opt stack 0
  2768  000016                     scroll_left@j:
  2769                           	opt stack 0
  2770  000016                     getTime@p1:
  2771                           	opt stack 0
  2772  000016                     getDate@p2:
  2773                           	opt stack 0
  2774  000016                     bmp085ReadInt@address:
  2775                           	opt stack 0
  2776  000016                     ___lbmod@rem:
  2777                           	opt stack 0
  2778  000016                     ___lwmod@dividend:
  2779                           	opt stack 0
  2780                           
  2781                           ; 2 bytes @ 0x15
  2782  000016                     	ds	1
  2783  000017                     ??_FillBuf:
  2784  000017                     ??_decimal_to_bcd:
  2785  000017                     RTOS_SetTask@i:
  2786                           	opt stack 0
  2787  000017                     RTOS_DeleteTask@i:
  2788                           	opt stack 0
  2789  000017                     pic_to_led@mask:
  2790                           	opt stack 0
  2791  000017                     putchar_b_buf@symbol:
  2792                           	opt stack 0
  2793  000017                     putchar_down_s@symbol:
  2794                           	opt stack 0
  2795  000017                     scroll_left@k:
  2796                           	opt stack 0
  2797  000017                     getDate@p1:
  2798                           	opt stack 0
  2799  000017                     bmp085ReadInt@msb:
  2800                           	opt stack 0
  2801  000017                     ___lldiv@quotient:
  2802                           	opt stack 0
  2803                           
  2804                           ; 4 bytes @ 0x16
  2805  000017                     	ds	1
  2806  000018                     ??_putchar_down_s:
  2807  000018                     pic_to_led@x:
  2808                           	opt stack 0
  2809  000018                     scroll_left@speed:
  2810                           	opt stack 0
  2811  000018                     putchar_b_buf@pF:
  2812                           	opt stack 0
  2813  000018                     ___lwmod@divisor:
  2814                           	opt stack 0
  2815                           
  2816                           ; 2 bytes @ 0x17
  2817  000018                     	ds	1
  2818  000019                     pic_to_led@j:
  2819                           	opt stack 0
  2820  000019                     FillBuf@i:
  2821                           	opt stack 0
  2822  000019                     scroll_left@i:
  2823                           	opt stack 0
  2824  000019                     decimal_to_bcd@d:
  2825                           	opt stack 0
  2826  000019                     bmp085ReadInt@lsb:
  2827                           	opt stack 0
  2828                           
  2829                           ; 2 bytes @ 0x18
  2830  000019                     	ds	1
  2831  00001A                     ??_putchar_b_buf:
  2832  00001A                     pic_to_led@i:
  2833                           	opt stack 0
  2834  00001A                     DS3231_Write@value:
  2835                           	opt stack 0
  2836  00001A                     ___lwmod@counter:
  2837                           	opt stack 0
  2838                           
  2839                           ; 1 bytes @ 0x19
  2840  00001A                     	ds	1
  2841  00001B                     putchar_down@symbol:
  2842                           	opt stack 0
  2843  00001B                     DS3231_Write@address:
  2844                           	opt stack 0
  2845  00001B                     ___lldiv@counter:
  2846                           	opt stack 0
  2847                           
  2848                           ; 1 bytes @ 0x1A
  2849  00001B                     	ds	1
  2850  00001C                     ?___llmod:
  2851                           	opt stack 0
  2852  00001C                     putchar_b_buf@mask:
  2853                           	opt stack 0
  2854  00001C                     setTime@mSet:
  2855                           	opt stack 0
  2856  00001C                     setDate@dateSet:
  2857                           	opt stack 0
  2858  00001C                     putchar_down@pF:
  2859                           	opt stack 0
  2860  00001C                     ___llmod@dividend:
  2861                           	opt stack 0
  2862                           
  2863                           ; 4 bytes @ 0x1B
  2864  00001C                     	ds	1
  2865  00001D                     putchar_b_buf@x:
  2866                           	opt stack 0
  2867  00001D                     putchar_down_s@x:
  2868                           	opt stack 0
  2869  00001D                     setTime@sSet:
  2870                           	opt stack 0
  2871  00001D                     setDate@monthSet:
  2872                           	opt stack 0
  2873                           
  2874                           ; 1 bytes @ 0x1C
  2875  00001D                     	ds	1
  2876  00001E                     ??_putchar_down:
  2877  00001E                     putchar_b_buf@j:
  2878                           	opt stack 0
  2879  00001E                     putchar_down_s@k:
  2880                           	opt stack 0
  2881  00001E                     setTime@hSet:
  2882                           	opt stack 0
  2883  00001E                     setDate@yearSet:
  2884                           	opt stack 0
  2885                           
  2886                           ; 1 bytes @ 0x1D
  2887  00001E                     	ds	1
  2888  00001F                     putchar_b_buf@i:
  2889                           	opt stack 0
  2890  00001F                     putchar_down_s@j:
  2891                           	opt stack 0
  2892  00001F                     setDate@daySet:
  2893                           	opt stack 0
  2894                           
  2895                           ; 1 bytes @ 0x1E
  2896  00001F                     	ds	1
  2897  000020                     putchar_down_s@i:
  2898                           	opt stack 0
  2899  000020                     ___llmod@divisor:
  2900                           	opt stack 0
  2901                           
  2902                           ; 4 bytes @ 0x1F
  2903  000020                     	ds	3
  2904  000023                     putchar_down@x:
  2905                           	opt stack 0
  2906                           
  2907                           ; 1 bytes @ 0x22
  2908  000023                     	ds	1
  2909  000024                     putchar_down@k:
  2910                           	opt stack 0
  2911  000024                     ___llmod@counter:
  2912                           	opt stack 0
  2913                           
  2914                           ; 1 bytes @ 0x23
  2915  000024                     	ds	1
  2916  000025                     ?__doprnt:
  2917                           	opt stack 0
  2918  000025                     putchar_down@j:
  2919                           	opt stack 0
  2920  000025                     __doprnt@pb:
  2921                           	opt stack 0
  2922                           
  2923                           ; 1 bytes @ 0x24
  2924  000025                     	ds	1
  2925  000026                     putchar_down@i:
  2926                           	opt stack 0
  2927  000026                     __doprnt@f:
  2928                           	opt stack 0
  2929                           
  2930                           ; 2 bytes @ 0x25
  2931  000026                     	ds	1
  2932  000027                     ??_home_temp:
  2933                           
  2934                           ; 1 bytes @ 0x26
  2935  000027                     	ds	1
  2936  000028                     __doprnt@ap:
  2937                           	opt stack 0
  2938                           
  2939                           ; 1 bytes @ 0x27
  2940  000028                     	ds	1
  2941  000029                     ??__doprnt:
  2942                           
  2943                           ; 1 bytes @ 0x28
  2944  000029                     	ds	2
  2945  00002B                     __doprnt@prec:
  2946                           	opt stack 0
  2947                           
  2948                           ; 2 bytes @ 0x2A
  2949  00002B                     	ds	2
  2950  00002D                     __doprnt@val:
  2951                           	opt stack 0
  2952                           
  2953                           ; 4 bytes @ 0x2C
  2954  00002D                     	ds	4
  2955  000031                     __doprnt@flag:
  2956                           	opt stack 0
  2957                           
  2958                           ; 1 bytes @ 0x30
  2959  000031                     	ds	1
  2960  000032                     __doprnt@c:
  2961                           	opt stack 0
  2962                           
  2963                           ; 1 bytes @ 0x31
  2964  000032                     	ds	1
  2965  000033                     ?_printf:
  2966                           	opt stack 0
  2967  000033                     printf@f:
  2968                           	opt stack 0
  2969                           
  2970                           ; 2 bytes @ 0x32
  2971  000033                     	ds	4
  2972  000037                     printf@ap:
  2973                           	opt stack 0
  2974                           
  2975                           ; 1 bytes @ 0x36
  2976  000037                     	ds	1
  2977  000038                     printf@pb:
  2978                           	opt stack 0
  2979                           
  2980                           ; 4 bytes @ 0x37
  2981  000038                     	ds	4
  2982  00003C                     ??_bmp085Calibration:
  2983  00003C                     readTemp_Single@buf:
  2984                           	opt stack 0
  2985                           
  2986                           ; 1 bytes @ 0x3B
  2987  00003C                     	ds	1
  2988  00003D                     readTemp_Single@time_flag:
  2989                           	opt stack 0
  2990                           
  2991                           ; 1 bytes @ 0x3C
  2992  00003D                     	ds	1
  2993  00003E                     readTemp_Single@timer_val:
  2994                           	opt stack 0
  2995                           
  2996                           ; 1 bytes @ 0x3D
  2997  00003E                     	ds	1
  2998  00003F                     ??_readTemp_Single:
  2999                           
  3000                           ; 1 bytes @ 0x3E
  3001  00003F                     	ds	2
  3002  000041                     tosu	equ	0xFFF
  3003                           tosh	equ	0xFFE
  3004                           tosl	equ	0xFFD
  3005                           pclath	equ	0xFFA
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           prodh	equ	0xFF4
  3011                           prodl	equ	0xFF3
  3012                           intcon	equ	0xFF2
  3013                           intcon2	equ	0xFF1
  3014                           postinc0	equ	0xFEE
  3015                           wreg	equ	0xFE8
  3016                           indf1	equ	0xFE7
  3017                           plusw1	equ	0xFE3
  3018                           fsr1h	equ	0xFE2
  3019                           fsr1l	equ	0xFE1
  3020                           indf2	equ	0xFDF
  3021                           postinc2	equ	0xFDE
  3022                           postdec2	equ	0xFDD
  3023                           plusw2	equ	0xFDB
  3024                           fsr2h	equ	0xFDA
  3025                           fsr2l	equ	0xFD9
  3026                           status	equ	0xFD8
  3027                           
  3028                           ; 1 bytes @ 0x40
  3029 ;;
  3030 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3031 ;;
  3032 ;; *************** function _main *****************
  3033 ;; Defined at:
  3034 ;;		line 18 in file "main.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 3F/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;Total ram usage:        1 bytes
  3053 ;; Hardware stack levels required when called:    9
  3054 ;; This function calls:
  3055 ;;		_RTOS_DispatchTask
  3056 ;;		_RTOS_SetTask
  3057 ;;		_SYSTEM_Initialize
  3058 ;;		_clear_matrix
  3059 ;; This function is called by:
  3060 ;;		Startup code after reset
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text0
  3065  0019A2                     __ptext0:
  3066                           	opt stack 0
  3067  0019A2                     _main:
  3068                           	opt stack 22
  3069                           
  3070                           ;main.c: 20: _delay((unsigned long)((10)*(40000000/4000.0)));
  3071                           
  3072                           ;incstack = 0
  3073  0019A2  0E82               	movlw	130
  3074  0019A4  0100               	movlb	0	; () banked
  3075  0019A6  6FB6               	movwf	??_main& (0+255),b
  3076  0019A8  0EDD               	movlw	221
  3077  0019AA                     u4487:
  3078  0019AA  2EE8               	decfsz	wreg,f,c
  3079  0019AC  D7FE               	bra	u4487
  3080  0019AE  2FB6               	decfsz	??_main& (0+255),f,b
  3081  0019B0  D7FC               	bra	u4487
  3082  0019B2  D000               	nop2	
  3083                           
  3084                           ;main.c: 22: SYSTEM_Initialize();
  3085  0019B4  EC35  F00E         	call	_SYSTEM_Initialize	;wreg free
  3086                           
  3087                           ;main.c: 27: clear_matrix();
  3088  0019B8  ECF5  F00F         	call	_clear_matrix	;wreg free
  3089                           
  3090                           ;main.c: 30: (INTCONbits.GIE = 0);
  3091  0019BC  9EF2               	bcf	intcon,7,c	;volatile
  3092                           
  3093                           ;main.c: 31: RTOS_SetTask(time_led, 100, 20);
  3094  0019BE  0E38               	movlw	low _time_led
  3095  0019C0  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  3096  0019C2  0E12               	movlw	high _time_led
  3097  0019C4  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  3098  0019C6  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  3099  0019C8  0E64               	movlw	100
  3100  0019CA  6E11               	movwf	RTOS_SetTask@taskDelay,c
  3101  0019CC  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  3102  0019CE  0E14               	movlw	20
  3103  0019D0  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  3104  0019D2  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  3105                           
  3106                           ;main.c: 32: RTOS_SetTask(key_press,0,1);
  3107  0019D6  0E86               	movlw	low _key_press
  3108  0019D8  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  3109  0019DA  0E1A               	movlw	high _key_press
  3110  0019DC  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  3111  0019DE  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  3112  0019E0  6A11               	clrf	RTOS_SetTask@taskDelay,c
  3113  0019E2  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  3114  0019E4  0E01               	movlw	1
  3115  0019E6  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  3116  0019E8  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  3117                           
  3118                           ;main.c: 33: (INTCONbits.GIE = 1);
  3119  0019EC  8EF2               	bsf	intcon,7,c	;volatile
  3120  0019EE                     l6326:
  3121                           
  3122                           ;main.c: 36: {
  3123                           ;main.c: 37: RTOS_DispatchTask();
  3124  0019EE  EC2D  F008         	call	_RTOS_DispatchTask	;wreg free
  3125  0019F2  D7FD               	goto	l6326
  3126  0019F4                     __end_of_main:
  3127                           	opt stack 0
  3128                           tosu	equ	0xFFF
  3129                           tosh	equ	0xFFE
  3130                           tosl	equ	0xFFD
  3131                           pclath	equ	0xFFA
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           prodh	equ	0xFF4
  3137                           prodl	equ	0xFF3
  3138                           intcon	equ	0xFF2
  3139                           intcon2	equ	0xFF1
  3140                           postinc0	equ	0xFEE
  3141                           wreg	equ	0xFE8
  3142                           indf1	equ	0xFE7
  3143                           plusw1	equ	0xFE3
  3144                           fsr1h	equ	0xFE2
  3145                           fsr1l	equ	0xFE1
  3146                           indf2	equ	0xFDF
  3147                           postinc2	equ	0xFDE
  3148                           postdec2	equ	0xFDD
  3149                           plusw2	equ	0xFDB
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _SYSTEM_Initialize *****************
  3155 ;; Defined at:
  3156 ;;		line 65 in file "init.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;		None
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;		None
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  1    wreg      void 
  3163 ;; Registers used:
  3164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;Total ram usage:        0 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    7
  3177 ;; This function calls:
  3178 ;;		_DS3231_init
  3179 ;;		_I2C_Init
  3180 ;;		_Init7221
  3181 ;;		_Interrupt_Init
  3182 ;;		_Port_Init
  3183 ;;		_RTOS_Init
  3184 ;;		_TMR1Init
  3185 ;;		_bmp085Calibration
  3186 ;;		_init_ds18b20
  3187 ;;		_init_uart
  3188 ;;		_read_eep
  3189 ;;		_set_font
  3190 ;; This function is called by:
  3191 ;;		_main
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text1
  3196  001C6A                     __ptext1:
  3197                           	opt stack 0
  3198  001C6A                     _SYSTEM_Initialize:
  3199                           	opt stack 23
  3200                           
  3201                           ;init.c: 68: Port_Init();
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;incstack = 0
  3205  001C6A  EC8C  F00F         	call	_Port_Init	;wreg free
  3206                           
  3207                           ;init.c: 69: I2C_Init();
  3208  001C6E  ECC3  F00F         	call	_I2C_Init	;wreg free
  3209                           
  3210                           ;init.c: 70: Init7221();
  3211  001C72  EC6A  F00E         	call	_Init7221	;wreg free
  3212                           
  3213                           ;init.c: 71: TMR1Init();
  3214  001C76  EC17  F010         	call	_TMR1Init	;wreg free
  3215                           
  3216                           ;init.c: 72: Interrupt_Init();
  3217  001C7A  EC3D  F010         	call	_Interrupt_Init	;wreg free
  3218                           
  3219                           ;init.c: 73: DS3231_init();
  3220  001C7E  ECEC  F00F         	call	_DS3231_init	;wreg free
  3221                           
  3222                           ;init.c: 74: init_ds18b20();
  3223  001C82  ECAF  F00E         	call	_init_ds18b20	;wreg free
  3224                           
  3225                           ;init.c: 75: RTOS_Init();
  3226  001C86  EC07  F010         	call	_RTOS_Init	;wreg free
  3227                           
  3228                           ;init.c: 76: init_uart();
  3229  001C8A  ECB6  F00F         	call	_init_uart	;wreg free
  3230                           
  3231                           ;init.c: 77: bmp085Calibration();
  3232  001C8E  ECEE  F003         	call	_bmp085Calibration	;wreg free
  3233                           
  3234                           ;init.c: 78: type_font = read_eep(0);
  3235  001C92  6A10               	clrf	read_eep@address+1,c
  3236  001C94  6A0F               	clrf	read_eep@address,c
  3237  001C96  ECE3  F00F         	call	_read_eep	;wreg free
  3238  001C9A  6E61               	movwf	_type_font,c
  3239                           
  3240                           ;init.c: 79: set_font();
  3241  001C9C  EF65  F00D         	goto	_set_font	;wreg free
  3242  001CA0                     __end_of_SYSTEM_Initialize:
  3243                           	opt stack 0
  3244                           tosu	equ	0xFFF
  3245                           tosh	equ	0xFFE
  3246                           tosl	equ	0xFFD
  3247                           pclath	equ	0xFFA
  3248                           tblptru	equ	0xFF8
  3249                           tblptrh	equ	0xFF7
  3250                           tblptrl	equ	0xFF6
  3251                           tablat	equ	0xFF5
  3252                           prodh	equ	0xFF4
  3253                           prodl	equ	0xFF3
  3254                           intcon	equ	0xFF2
  3255                           intcon2	equ	0xFF1
  3256                           postinc0	equ	0xFEE
  3257                           wreg	equ	0xFE8
  3258                           indf1	equ	0xFE7
  3259                           plusw1	equ	0xFE3
  3260                           fsr1h	equ	0xFE2
  3261                           fsr1l	equ	0xFE1
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           postdec2	equ	0xFDD
  3265                           plusw2	equ	0xFDB
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _read_eep *****************
  3271 ;; Defined at:
  3272 ;;		line 25 in file "eeprom.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  address         2   14[COMRAM] unsigned short 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;		None
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      unsigned char 
  3279 ;; Registers used:
  3280 ;;		wreg, status,2
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;Total ram usage:        2 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    3
  3293 ;; This function calls:
  3294 ;;		Nothing
  3295 ;; This function is called by:
  3296 ;;		_SYSTEM_Initialize
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text2
  3301  001FC6                     __ptext2:
  3302                           	opt stack 0
  3303  001FC6                     _read_eep:
  3304                           	opt stack 26
  3305  001FC6                     l1178:
  3306  001FC6  B2A6               	btfsc	4006,1,c	;volatile
  3307  001FC8  D7FE               	goto	l1178
  3308                           
  3309                           ;eeprom.c: 30: EEADR = address;
  3310  001FCA  C00F  FFA9         	movff	read_eep@address,4009	;volatile
  3311                           
  3312                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  3313  001FCE  9EA6               	bcf	4006,7,c	;volatile
  3314                           
  3315                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  3316  001FD0  9CA6               	bcf	4006,6,c	;volatile
  3317                           
  3318                           ;eeprom.c: 33: EECON1bits.RD = 1;
  3319  001FD2  80A6               	bsf	4006,0,c	;volatile
  3320                           
  3321                           ;eeprom.c: 34: return( EEDATA );
  3322  001FD4  50A8               	movf	4008,w,c	;volatile
  3323  001FD6  0012               	return		;funcret
  3324  001FD8                     __end_of_read_eep:
  3325                           	opt stack 0
  3326                           tosu	equ	0xFFF
  3327                           tosh	equ	0xFFE
  3328                           tosl	equ	0xFFD
  3329                           pclath	equ	0xFFA
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           intcon	equ	0xFF2
  3337                           intcon2	equ	0xFF1
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           indf1	equ	0xFE7
  3341                           plusw1	equ	0xFE3
  3342                           fsr1h	equ	0xFE2
  3343                           fsr1l	equ	0xFE1
  3344                           indf2	equ	0xFDF
  3345                           postinc2	equ	0xFDE
  3346                           postdec2	equ	0xFDD
  3347                           plusw2	equ	0xFDB
  3348                           fsr2h	equ	0xFDA
  3349                           fsr2l	equ	0xFD9
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _init_uart *****************
  3353 ;; Defined at:
  3354 ;;		line 13 in file "eusart.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    3
  3375 ;; This function calls:
  3376 ;;		Nothing
  3377 ;; This function is called by:
  3378 ;;		_SYSTEM_Initialize
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text3
  3383  001F6C                     __ptext3:
  3384                           	opt stack 0
  3385  001F6C                     _init_uart:
  3386                           	opt stack 26
  3387                           
  3388                           ;eusart.c: 15: TRISCbits.RC6 = 1;
  3389                           
  3390                           ;incstack = 0
  3391  001F6C  8C94               	bsf	3988,6,c	;volatile
  3392                           
  3393                           ;eusart.c: 16: TRISCbits.RC7 = 1;
  3394  001F6E  8E94               	bsf	3988,7,c	;volatile
  3395                           
  3396                           ;eusart.c: 17: TXSTAbits.BRGH = 1;
  3397  001F70  84AC               	bsf	4012,2,c	;volatile
  3398                           
  3399                           ;eusart.c: 18: TXSTAbits.SYNC = 0;
  3400  001F72  98AC               	bcf	4012,4,c	;volatile
  3401                           
  3402                           ;eusart.c: 19: TXSTAbits.TXEN = 1;
  3403  001F74  8AAC               	bsf	4012,5,c	;volatile
  3404                           
  3405                           ;eusart.c: 20: RCSTAbits.CREN = 1;
  3406  001F76  88AB               	bsf	4011,4,c	;volatile
  3407                           
  3408                           ;eusart.c: 21: RCSTAbits.SPEN = 1;
  3409  001F78  8EAB               	bsf	4011,7,c	;volatile
  3410                           
  3411                           ;eusart.c: 22: BAUDCONbits.BRG16 = 1;
  3412  001F7A  86B8               	bsf	4024,3,c	;volatile
  3413                           
  3414                           ;eusart.c: 30: SPBRGH = 0x04;
  3415  001F7C  0E04               	movlw	4
  3416  001F7E  6EB0               	movwf	4016,c	;volatile
  3417                           
  3418                           ;eusart.c: 31: SPBRG = 0x10;
  3419  001F80  0E10               	movlw	16
  3420  001F82  6EAF               	movwf	4015,c	;volatile
  3421  001F84  0C10               	retlw	16	;funcret
  3422  001F86                     __end_of_init_uart:
  3423                           	opt stack 0
  3424                           tosu	equ	0xFFF
  3425                           tosh	equ	0xFFE
  3426                           tosl	equ	0xFFD
  3427                           pclath	equ	0xFFA
  3428                           tblptru	equ	0xFF8
  3429                           tblptrh	equ	0xFF7
  3430                           tblptrl	equ	0xFF6
  3431                           tablat	equ	0xFF5
  3432                           prodh	equ	0xFF4
  3433                           prodl	equ	0xFF3
  3434                           intcon	equ	0xFF2
  3435                           intcon2	equ	0xFF1
  3436                           postinc0	equ	0xFEE
  3437                           wreg	equ	0xFE8
  3438                           indf1	equ	0xFE7
  3439                           plusw1	equ	0xFE3
  3440                           fsr1h	equ	0xFE2
  3441                           fsr1l	equ	0xFE1
  3442                           indf2	equ	0xFDF
  3443                           postinc2	equ	0xFDE
  3444                           postdec2	equ	0xFDD
  3445                           plusw2	equ	0xFDB
  3446                           fsr2h	equ	0xFDA
  3447                           fsr2l	equ	0xFD9
  3448                           status	equ	0xFD8
  3449                           
  3450 ;; *************** function _init_ds18b20 *****************
  3451 ;; Defined at:
  3452 ;;		line 12 in file "ds18b20.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      void 
  3459 ;; Registers used:
  3460 ;;		wreg, status,2, status,0, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;Total ram usage:        0 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    5
  3473 ;; This function calls:
  3474 ;;		_ow_reset
  3475 ;;		_write_byte
  3476 ;; This function is called by:
  3477 ;;		_SYSTEM_Initialize
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text4
  3482  001D5E                     __ptext4:
  3483                           	opt stack 0
  3484  001D5E                     _init_ds18b20:
  3485                           	opt stack 24
  3486                           
  3487                           ;ds18b20.c: 15: if (!ow_reset())
  3488                           
  3489                           ;incstack = 0
  3490  001D5E  ECA4  F00D         	call	_ow_reset	;wreg free
  3491  001D62  0900               	iorlw	0
  3492  001D64  A4D8               	btfss	status,2,c
  3493  001D66  0012               	return	
  3494                           
  3495                           ;ds18b20.c: 16: {
  3496                           ;ds18b20.c: 18: write_byte(0xCC);
  3497  001D68  0ECC               	movlw	204
  3498  001D6A  ECFD  F00D         	call	_write_byte
  3499                           
  3500                           ;ds18b20.c: 19: write_byte(0x4E);
  3501  001D6E  0E4E               	movlw	78
  3502  001D70  ECFD  F00D         	call	_write_byte
  3503                           
  3504                           ;ds18b20.c: 20: write_byte(0x00);
  3505  001D74  0E00               	movlw	0
  3506  001D76  ECFD  F00D         	call	_write_byte
  3507                           
  3508                           ;ds18b20.c: 21: write_byte(0x00);
  3509  001D7A  0E00               	movlw	0
  3510  001D7C  ECFD  F00D         	call	_write_byte
  3511                           
  3512                           ;ds18b20.c: 22: write_byte(0x7F);
  3513  001D80  0E7F               	movlw	127
  3514  001D82  EFFD  F00D         	goto	_write_byte
  3515  001D86                     __end_of_init_ds18b20:
  3516                           	opt stack 0
  3517                           tosu	equ	0xFFF
  3518                           tosh	equ	0xFFE
  3519                           tosl	equ	0xFFD
  3520                           pclath	equ	0xFFA
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           intcon2	equ	0xFF1
  3529                           postinc0	equ	0xFEE
  3530                           wreg	equ	0xFE8
  3531                           indf1	equ	0xFE7
  3532                           plusw1	equ	0xFE3
  3533                           fsr1h	equ	0xFE2
  3534                           fsr1l	equ	0xFE1
  3535                           indf2	equ	0xFDF
  3536                           postinc2	equ	0xFDE
  3537                           postdec2	equ	0xFDD
  3538                           plusw2	equ	0xFDB
  3539                           fsr2h	equ	0xFDA
  3540                           fsr2l	equ	0xFD9
  3541                           status	equ	0xFD8
  3542                           
  3543 ;; *************** function _bmp085Calibration *****************
  3544 ;; Defined at:
  3545 ;;		line 107 in file "bmp180.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;		None
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      void 
  3552 ;; Registers used:
  3553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;Total ram usage:        2 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    6
  3566 ;; This function calls:
  3567 ;;		_bmp085ReadInt
  3568 ;;		_printf
  3569 ;; This function is called by:
  3570 ;;		_SYSTEM_Initialize
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text5
  3575  0007DC                     __ptext5:
  3576                           	opt stack 0
  3577  0007DC                     _bmp085Calibration:
  3578                           	opt stack 23
  3579                           
  3580                           ;bmp180.c: 111: ac1 = bmp085ReadInt(0xAA);
  3581                           
  3582                           ;incstack = 0
  3583  0007DC  0EAA               	movlw	170
  3584  0007DE  EC1F  F00D         	call	_bmp085ReadInt
  3585  0007E2  C012  F05C         	movff	?_bmp085ReadInt,_ac1
  3586  0007E6  C013  F05D         	movff	?_bmp085ReadInt+1,_ac1+1
  3587                           
  3588                           ;bmp180.c: 112: ac2 = bmp085ReadInt(0xAC);
  3589  0007EA  0EAC               	movlw	172
  3590  0007EC  EC1F  F00D         	call	_bmp085ReadInt
  3591  0007F0  C012  F05A         	movff	?_bmp085ReadInt,_ac2
  3592  0007F4  C013  F05B         	movff	?_bmp085ReadInt+1,_ac2+1
  3593                           
  3594                           ;bmp180.c: 113: ac3 = bmp085ReadInt(0xAE);
  3595  0007F8  0EAE               	movlw	174
  3596  0007FA  EC1F  F00D         	call	_bmp085ReadInt
  3597  0007FE  C012  F058         	movff	?_bmp085ReadInt,_ac3
  3598  000802  C013  F059         	movff	?_bmp085ReadInt+1,_ac3+1
  3599                           
  3600                           ;bmp180.c: 114: ac4 = bmp085ReadInt(0xB0);
  3601  000806  0EB0               	movlw	176
  3602  000808  EC1F  F00D         	call	_bmp085ReadInt
  3603  00080C  C012  F056         	movff	?_bmp085ReadInt,_ac4
  3604  000810  C013  F057         	movff	?_bmp085ReadInt+1,_ac4+1
  3605                           
  3606                           ;bmp180.c: 115: ac5 = bmp085ReadInt(0xB2);
  3607  000814  0EB2               	movlw	178
  3608  000816  EC1F  F00D         	call	_bmp085ReadInt
  3609  00081A  C012  F054         	movff	?_bmp085ReadInt,_ac5
  3610  00081E  C013  F055         	movff	?_bmp085ReadInt+1,_ac5+1
  3611                           
  3612                           ;bmp180.c: 116: ac6 = bmp085ReadInt(0xB4);
  3613  000822  0EB4               	movlw	180
  3614  000824  EC1F  F00D         	call	_bmp085ReadInt
  3615  000828  C012  F052         	movff	?_bmp085ReadInt,_ac6
  3616  00082C  C013  F053         	movff	?_bmp085ReadInt+1,_ac6+1
  3617                           
  3618                           ;bmp180.c: 117: b1 = bmp085ReadInt(0xB6);
  3619  000830  0EB6               	movlw	182
  3620  000832  EC1F  F00D         	call	_bmp085ReadInt
  3621  000836  C012  F050         	movff	?_bmp085ReadInt,_b1
  3622  00083A  C013  F051         	movff	?_bmp085ReadInt+1,_b1+1
  3623                           
  3624                           ;bmp180.c: 118: b2 = bmp085ReadInt(0xB8);
  3625  00083E  0EB8               	movlw	184
  3626  000840  EC1F  F00D         	call	_bmp085ReadInt
  3627  000844  C012  F04E         	movff	?_bmp085ReadInt,_b2
  3628  000848  C013  F04F         	movff	?_bmp085ReadInt+1,_b2+1
  3629                           
  3630                           ;bmp180.c: 119: mb = bmp085ReadInt(0xBA);
  3631  00084C  0EBA               	movlw	186
  3632  00084E  EC1F  F00D         	call	_bmp085ReadInt
  3633  000852  C012  F04C         	movff	?_bmp085ReadInt,_mb
  3634  000856  C013  F04D         	movff	?_bmp085ReadInt+1,_mb+1
  3635                           
  3636                           ;bmp180.c: 120: mc = bmp085ReadInt(0xBC);
  3637  00085A  0EBC               	movlw	188
  3638  00085C  EC1F  F00D         	call	_bmp085ReadInt
  3639  000860  C012  F04A         	movff	?_bmp085ReadInt,_mc
  3640  000864  C013  F04B         	movff	?_bmp085ReadInt+1,_mc+1
  3641                           
  3642                           ;bmp180.c: 121: md = bmp085ReadInt(0xBE);
  3643  000868  0EBE               	movlw	190
  3644  00086A  EC1F  F00D         	call	_bmp085ReadInt
  3645  00086E  C012  F048         	movff	?_bmp085ReadInt,_md
  3646  000872  C013  F049         	movff	?_bmp085ReadInt+1,_md+1
  3647                           
  3648                           ;bmp180.c: 138: _delay((unsigned long)((200)*(40000000/4000.0)));
  3649  000876  0E0B               	movlw	11
  3650  000878  6E3D               	movwf	(??_bmp085Calibration+1)& (0+255),c
  3651  00087A  0E26               	movlw	38
  3652  00087C  6E3C               	movwf	??_bmp085Calibration& (0+255),c
  3653  00087E  0E5E               	movlw	94
  3654  000880                     u4497:
  3655  000880  2EE8               	decfsz	wreg,f,c
  3656  000882  D7FE               	bra	u4497
  3657  000884  2E3C               	decfsz	??_bmp085Calibration& (0+255),f,c
  3658  000886  D7FC               	bra	u4497
  3659  000888  2E3D               	decfsz	(??_bmp085Calibration+1)& (0+255),f,c
  3660  00088A  D7FA               	bra	u4497
  3661                           
  3662                           ;bmp180.c: 139: printf("AC1: %d\n\r", ac1);
  3663  00088C  0E24               	movlw	low STR_3
  3664  00088E  6E33               	movwf	printf@f,c
  3665  000890  0EBF               	movlw	high STR_3
  3666  000892  6E34               	movwf	printf@f+1,c
  3667  000894  C05C  F035         	movff	_ac1,?_printf+2
  3668  000898  C05D  F036         	movff	_ac1+1,?_printf+3
  3669  00089C  EC23  F00F         	call	_printf	;wreg free
  3670                           
  3671                           ;bmp180.c: 140: printf("AC2: %d\n\r", ac2);
  3672  0008A0  0E2E               	movlw	low STR_4
  3673  0008A2  6E33               	movwf	printf@f,c
  3674  0008A4  0EBF               	movlw	high STR_4
  3675  0008A6  6E34               	movwf	printf@f+1,c
  3676  0008A8  C05A  F035         	movff	_ac2,?_printf+2
  3677  0008AC  C05B  F036         	movff	_ac2+1,?_printf+3
  3678  0008B0  EC23  F00F         	call	_printf	;wreg free
  3679                           
  3680                           ;bmp180.c: 141: printf("AC3: %d\n\r", ac3);
  3681  0008B4  0E38               	movlw	low STR_5
  3682  0008B6  6E33               	movwf	printf@f,c
  3683  0008B8  0EBF               	movlw	high STR_5
  3684  0008BA  6E34               	movwf	printf@f+1,c
  3685  0008BC  C058  F035         	movff	_ac3,?_printf+2
  3686  0008C0  C059  F036         	movff	_ac3+1,?_printf+3
  3687  0008C4  EC23  F00F         	call	_printf	;wreg free
  3688                           
  3689                           ;bmp180.c: 142: printf("AC4: %u\n\r", ac4);
  3690  0008C8  0E7E               	movlw	low STR_6
  3691  0008CA  6E33               	movwf	printf@f,c
  3692  0008CC  0EBF               	movlw	high STR_6
  3693  0008CE  6E34               	movwf	printf@f+1,c
  3694  0008D0  C056  F035         	movff	_ac4,?_printf+2
  3695  0008D4  C057  F036         	movff	_ac4+1,?_printf+3
  3696  0008D8  EC23  F00F         	call	_printf	;wreg free
  3697                           
  3698                           ;bmp180.c: 143: printf("AC5: %u\n\r", ac5);
  3699  0008DC  0E88               	movlw	low STR_7
  3700  0008DE  6E33               	movwf	printf@f,c
  3701  0008E0  0EBF               	movlw	high STR_7
  3702  0008E2  6E34               	movwf	printf@f+1,c
  3703  0008E4  C054  F035         	movff	_ac5,?_printf+2
  3704  0008E8  C055  F036         	movff	_ac5+1,?_printf+3
  3705  0008EC  EC23  F00F         	call	_printf	;wreg free
  3706                           
  3707                           ;bmp180.c: 144: printf("AC6: %u\n\r", ac6);
  3708  0008F0  0E92               	movlw	low STR_8
  3709  0008F2  6E33               	movwf	printf@f,c
  3710  0008F4  0EBF               	movlw	high STR_8
  3711  0008F6  6E34               	movwf	printf@f+1,c
  3712  0008F8  C052  F035         	movff	_ac6,?_printf+2
  3713  0008FC  C053  F036         	movff	_ac6+1,?_printf+3
  3714  000900  EC23  F00F         	call	_printf	;wreg free
  3715                           
  3716                           ;bmp180.c: 145: printf("B1: %d\n\r", b1);
  3717  000904  0E9C               	movlw	low STR_9
  3718  000906  6E33               	movwf	printf@f,c
  3719  000908  0EBF               	movlw	high STR_9
  3720  00090A  6E34               	movwf	printf@f+1,c
  3721  00090C  C050  F035         	movff	_b1,?_printf+2
  3722  000910  C051  F036         	movff	_b1+1,?_printf+3
  3723  000914  EC23  F00F         	call	_printf	;wreg free
  3724                           
  3725                           ;bmp180.c: 146: printf("B2: %d\n\r", b2);
  3726  000918  0EAE               	movlw	low STR_10
  3727  00091A  6E33               	movwf	printf@f,c
  3728  00091C  0EBF               	movlw	high STR_10
  3729  00091E  6E34               	movwf	printf@f+1,c
  3730  000920  C04E  F035         	movff	_b2,?_printf+2
  3731  000924  C04F  F036         	movff	_b2+1,?_printf+3
  3732  000928  EC23  F00F         	call	_printf	;wreg free
  3733                           
  3734                           ;bmp180.c: 147: printf("MB: %d\n\r", mb);
  3735  00092C  0EDB               	movlw	low STR_11
  3736  00092E  6E33               	movwf	printf@f,c
  3737  000930  0EBF               	movlw	high STR_11
  3738  000932  6E34               	movwf	printf@f+1,c
  3739  000934  C04C  F035         	movff	_mb,?_printf+2
  3740  000938  C04D  F036         	movff	_mb+1,?_printf+3
  3741  00093C  EC23  F00F         	call	_printf	;wreg free
  3742                           
  3743                           ;bmp180.c: 148: printf("MC: %d\n\r", mc);
  3744  000940  0EE4               	movlw	low STR_12
  3745  000942  6E33               	movwf	printf@f,c
  3746  000944  0EBF               	movlw	high STR_12
  3747  000946  6E34               	movwf	printf@f+1,c
  3748  000948  C04A  F035         	movff	_mc,?_printf+2
  3749  00094C  C04B  F036         	movff	_mc+1,?_printf+3
  3750  000950  EC23  F00F         	call	_printf	;wreg free
  3751                           
  3752                           ;bmp180.c: 149: printf("MD: %d\n\r", md);
  3753  000954  0EED               	movlw	low STR_13
  3754  000956  6E33               	movwf	printf@f,c
  3755  000958  0EBF               	movlw	high STR_13
  3756  00095A  6E34               	movwf	printf@f+1,c
  3757  00095C  C048  F035         	movff	_md,?_printf+2
  3758  000960  C049  F036         	movff	_md+1,?_printf+3
  3759  000964  EF23  F00F         	goto	_printf	;wreg free
  3760  000968                     __end_of_bmp085Calibration:
  3761                           	opt stack 0
  3762                           tosu	equ	0xFFF
  3763                           tosh	equ	0xFFE
  3764                           tosl	equ	0xFFD
  3765                           pclath	equ	0xFFA
  3766                           tblptru	equ	0xFF8
  3767                           tblptrh	equ	0xFF7
  3768                           tblptrl	equ	0xFF6
  3769                           tablat	equ	0xFF5
  3770                           prodh	equ	0xFF4
  3771                           prodl	equ	0xFF3
  3772                           intcon	equ	0xFF2
  3773                           intcon2	equ	0xFF1
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           indf1	equ	0xFE7
  3777                           plusw1	equ	0xFE3
  3778                           fsr1h	equ	0xFE2
  3779                           fsr1l	equ	0xFE1
  3780                           indf2	equ	0xFDF
  3781                           postinc2	equ	0xFDE
  3782                           postdec2	equ	0xFDD
  3783                           plusw2	equ	0xFDB
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _bmp085ReadInt *****************
  3789 ;; Defined at:
  3790 ;;		line 67 in file "bmp180.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  address         1    wreg     unsigned char 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  address         1   21[COMRAM] unsigned char 
  3795 ;;  lsb             2   24[COMRAM] int 
  3796 ;;  msb             2   22[COMRAM] int 
  3797 ;;  temp            2    0        int 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  2   17[COMRAM] int 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0, cstack
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3807 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;Total ram usage:        9 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    5
  3814 ;; This function calls:
  3815 ;;		_I2C_Master_Read
  3816 ;;		_I2C_Master_RepeatedStart
  3817 ;;		_I2C_Master_Start
  3818 ;;		_I2C_Master_Stop
  3819 ;;		_I2C_Master_Write
  3820 ;; This function is called by:
  3821 ;;		_bmp085Calibration
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text6
  3826  001A3E                     __ptext6:
  3827                           	opt stack 0
  3828  001A3E                     _bmp085ReadInt:
  3829                           	opt stack 23
  3830                           
  3831                           ;incstack = 0
  3832                           ;bmp085ReadInt@address stored from wreg
  3833  001A3E  6E16               	movwf	bmp085ReadInt@address,c
  3834                           
  3835                           ;bmp180.c: 70: int16_t msb, lsb;
  3836                           ;bmp180.c: 71: int16_t temp;
  3837                           ;bmp180.c: 73: I2C_Master_Start();
  3838  001A40  EC35  F010         	call	_I2C_Master_Start	;wreg free
  3839                           
  3840                           ;bmp180.c: 74: I2C_Master_Write(0xEE);
  3841  001A44  0EEE               	movlw	238
  3842  001A46  EC2B  F010         	call	_I2C_Master_Write
  3843                           
  3844                           ;bmp180.c: 75: I2C_Master_Write(address);
  3845  001A4A  5016               	movf	bmp085ReadInt@address,w,c
  3846  001A4C  EC2B  F010         	call	_I2C_Master_Write
  3847                           
  3848                           ;bmp180.c: 76: I2C_Master_RepeatedStart();
  3849  001A50  EC39  F010         	call	_I2C_Master_RepeatedStart	;wreg free
  3850                           
  3851                           ;bmp180.c: 77: I2C_Master_Write(0xEE | 0x01);
  3852  001A54  0EEF               	movlw	239
  3853  001A56  EC2B  F010         	call	_I2C_Master_Write
  3854                           
  3855                           ;bmp180.c: 78: msb = (int16_t)I2C_Master_Read(1);
  3856  001A5A  0E01               	movlw	1
  3857  001A5C  EC6B  F00F         	call	_I2C_Master_Read
  3858  001A60  6E17               	movwf	bmp085ReadInt@msb,c
  3859  001A62  6A18               	clrf	bmp085ReadInt@msb+1,c
  3860                           
  3861                           ;bmp180.c: 79: lsb = I2C_Master_Read(0);
  3862  001A64  0E00               	movlw	0
  3863  001A66  EC6B  F00F         	call	_I2C_Master_Read
  3864  001A6A  6E19               	movwf	bmp085ReadInt@lsb,c
  3865  001A6C  6A1A               	clrf	bmp085ReadInt@lsb+1,c
  3866                           
  3867                           ;bmp180.c: 80: I2C_Master_Stop();
  3868  001A6E  EC31  F010         	call	_I2C_Master_Stop	;wreg free
  3869                           
  3870                           ;bmp180.c: 83: return (msb << 8) | lsb;
  3871  001A72  5017               	movf	bmp085ReadInt@msb,w,c
  3872  001A74  6E15               	movwf	(??_bmp085ReadInt+1)& (0+255),c
  3873  001A76  6A14               	clrf	??_bmp085ReadInt& (0+255),c
  3874  001A78  5019               	movf	bmp085ReadInt@lsb,w,c
  3875  001A7A  1014               	iorwf	??_bmp085ReadInt,w,c
  3876  001A7C  6E12               	movwf	?_bmp085ReadInt,c
  3877  001A7E  501A               	movf	bmp085ReadInt@lsb+1,w,c
  3878  001A80  1015               	iorwf	??_bmp085ReadInt+1,w,c
  3879  001A82  6E13               	movwf	?_bmp085ReadInt+1,c
  3880  001A84  0012               	return		;funcret
  3881  001A86                     __end_of_bmp085ReadInt:
  3882                           	opt stack 0
  3883                           tosu	equ	0xFFF
  3884                           tosh	equ	0xFFE
  3885                           tosl	equ	0xFFD
  3886                           pclath	equ	0xFFA
  3887                           tblptru	equ	0xFF8
  3888                           tblptrh	equ	0xFF7
  3889                           tblptrl	equ	0xFF6
  3890                           tablat	equ	0xFF5
  3891                           prodh	equ	0xFF4
  3892                           prodl	equ	0xFF3
  3893                           intcon	equ	0xFF2
  3894                           intcon2	equ	0xFF1
  3895                           postinc0	equ	0xFEE
  3896                           wreg	equ	0xFE8
  3897                           indf1	equ	0xFE7
  3898                           plusw1	equ	0xFE3
  3899                           fsr1h	equ	0xFE2
  3900                           fsr1l	equ	0xFE1
  3901                           indf2	equ	0xFDF
  3902                           postinc2	equ	0xFDE
  3903                           postdec2	equ	0xFDD
  3904                           plusw2	equ	0xFDB
  3905                           fsr2h	equ	0xFDA
  3906                           fsr2l	equ	0xFD9
  3907                           status	equ	0xFD8
  3908                           
  3909 ;; *************** function _TMR1Init *****************
  3910 ;; Defined at:
  3911 ;;		line 5 in file "timer.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;		None
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;Total ram usage:        0 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    3
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_SYSTEM_Initialize
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text7
  3940  00202E                     __ptext7:
  3941                           	opt stack 0
  3942  00202E                     _TMR1Init:
  3943                           	opt stack 26
  3944                           
  3945                           ;timer.c: 7: T1CONbits.TMR1ON = 0;
  3946                           
  3947                           ;incstack = 0
  3948  00202E  90CD               	bcf	4045,0,c	;volatile
  3949                           
  3950                           ;timer.c: 8: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  3951  002030  0E3C               	movlw	60
  3952  002032  6ECF               	movwf	4047,c	;volatile
  3953                           
  3954                           ;timer.c: 9: TMR1L = ((unsigned char)((15536)&0xFF));
  3955  002034  0EB0               	movlw	176
  3956  002036  6ECE               	movwf	4046,c	;volatile
  3957                           
  3958                           ;timer.c: 10: PIE1bits.TMR1IE = 1;
  3959  002038  809D               	bsf	3997,0,c	;volatile
  3960  00203A  0CB0               	retlw	176	;funcret
  3961  00203C                     __end_of_TMR1Init:
  3962                           	opt stack 0
  3963                           tosu	equ	0xFFF
  3964                           tosh	equ	0xFFE
  3965                           tosl	equ	0xFFD
  3966                           pclath	equ	0xFFA
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           intcon2	equ	0xFF1
  3975                           postinc0	equ	0xFEE
  3976                           wreg	equ	0xFE8
  3977                           indf1	equ	0xFE7
  3978                           plusw1	equ	0xFE3
  3979                           fsr1h	equ	0xFE2
  3980                           fsr1l	equ	0xFE1
  3981                           indf2	equ	0xFDF
  3982                           postinc2	equ	0xFDE
  3983                           postdec2	equ	0xFDD
  3984                           plusw2	equ	0xFDB
  3985                           fsr2h	equ	0xFDA
  3986                           fsr2l	equ	0xFD9
  3987                           status	equ	0xFD8
  3988                           
  3989 ;; *************** function _RTOS_Init *****************
  3990 ;; Defined at:
  3991 ;;		line 10 in file "dispatcher.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;		None
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;		None
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, status,2
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4009 ;;Total ram usage:        0 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    3
  4012 ;; This function calls:
  4013 ;;		Nothing
  4014 ;; This function is called by:
  4015 ;;		_SYSTEM_Initialize
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text8
  4020  00200E                     __ptext8:
  4021                           	opt stack 0
  4022  00200E                     _RTOS_Init:
  4023                           	opt stack 26
  4024                           
  4025                           ;dispatcher.c: 12: T0CON = 0b11000111;
  4026                           
  4027                           ;incstack = 0
  4028  00200E  0EC7               	movlw	199
  4029  002010  6ED5               	movwf	4053,c	;volatile
  4030                           
  4031                           ;dispatcher.c: 13: INTCONbits.TMR0IE = 1;
  4032  002012  8AF2               	bsf	intcon,5,c	;volatile
  4033                           
  4034                           ;dispatcher.c: 14: TMR0 = 61;
  4035  002014  6AD7               	clrf	4055,c	;volatile
  4036  002016  0E3D               	movlw	61
  4037  002018  6ED6               	movwf	4054,c	;volatile
  4038                           
  4039                           ;dispatcher.c: 16: arrayTail = 0;
  4040  00201A  6A60               	clrf	_arrayTail,c	;volatile
  4041  00201C  0012               	return		;funcret
  4042  00201E                     __end_of_RTOS_Init:
  4043                           	opt stack 0
  4044                           tosu	equ	0xFFF
  4045                           tosh	equ	0xFFE
  4046                           tosl	equ	0xFFD
  4047                           pclath	equ	0xFFA
  4048                           tblptru	equ	0xFF8
  4049                           tblptrh	equ	0xFF7
  4050                           tblptrl	equ	0xFF6
  4051                           tablat	equ	0xFF5
  4052                           prodh	equ	0xFF4
  4053                           prodl	equ	0xFF3
  4054                           intcon	equ	0xFF2
  4055                           intcon2	equ	0xFF1
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           indf1	equ	0xFE7
  4059                           plusw1	equ	0xFE3
  4060                           fsr1h	equ	0xFE2
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           plusw2	equ	0xFDB
  4066                           fsr2h	equ	0xFDA
  4067                           fsr2l	equ	0xFD9
  4068                           status	equ	0xFD8
  4069                           
  4070 ;; *************** function _Port_Init *****************
  4071 ;; Defined at:
  4072 ;;		line 83 in file "init.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;		None
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;		None
  4077 ;; Return value:  Size  Location     Type
  4078 ;;                  1    wreg      void 
  4079 ;; Registers used:
  4080 ;;		wreg, status,2, status,0
  4081 ;; Tracked objects:
  4082 ;;		On entry : 0/0
  4083 ;;		On exit  : 0/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;Total ram usage:        0 bytes
  4091 ;; Hardware stack levels used:    1
  4092 ;; Hardware stack levels required when called:    3
  4093 ;; This function calls:
  4094 ;;		Nothing
  4095 ;; This function is called by:
  4096 ;;		_SYSTEM_Initialize
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text9
  4101  001F18                     __ptext9:
  4102                           	opt stack 0
  4103  001F18                     _Port_Init:
  4104                           	opt stack 26
  4105                           
  4106                           ;init.c: 85: LATC = 0x00;
  4107                           
  4108                           ;incstack = 0
  4109  001F18  6A8B               	clrf	3979,c	;volatile
  4110                           
  4111                           ;init.c: 86: TRISC = 0b00011000;
  4112  001F1A  0E18               	movlw	24
  4113  001F1C  6E94               	movwf	3988,c	;volatile
  4114                           
  4115                           ;init.c: 87: LATB = 0x00;
  4116  001F1E  6A8A               	clrf	3978,c	;volatile
  4117                           
  4118                           ;init.c: 88: TRISB = 0b00011111;
  4119  001F20  0E1F               	movlw	31
  4120  001F22  6E93               	movwf	3987,c	;volatile
  4121                           
  4122                           ;init.c: 89: INTCON2 &= (~(1<<7));
  4123  001F24  9EF1               	bcf	intcon2,7,c	;volatile
  4124                           
  4125                           ;init.c: 90: LATD = 0x00;
  4126  001F26  6A8C               	clrf	3980,c	;volatile
  4127                           
  4128                           ;init.c: 91: TRISD = 0x00;
  4129  001F28  6A95               	clrf	3989,c	;volatile
  4130                           
  4131                           ;init.c: 92: INTCON2bits.INTEDG0 = 1;
  4132  001F2A  8CF1               	bsf	intcon2,6,c	;volatile
  4133                           
  4134                           ;init.c: 93: INTCONbits.INT0IF = 0;
  4135  001F2C  92F2               	bcf	intcon,1,c	;volatile
  4136                           
  4137                           ;init.c: 94: INTCONbits.INT0IE = 1;
  4138  001F2E  88F2               	bsf	intcon,4,c	;volatile
  4139                           
  4140                           ;init.c: 95: PORTCbits.RC0 = 1;
  4141  001F30  8082               	bsf	3970,0,c	;volatile
  4142  001F32  0012               	return		;funcret
  4143  001F34                     __end_of_Port_Init:
  4144                           	opt stack 0
  4145                           tosu	equ	0xFFF
  4146                           tosh	equ	0xFFE
  4147                           tosl	equ	0xFFD
  4148                           pclath	equ	0xFFA
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           intcon	equ	0xFF2
  4156                           intcon2	equ	0xFF1
  4157                           postinc0	equ	0xFEE
  4158                           wreg	equ	0xFE8
  4159                           indf1	equ	0xFE7
  4160                           plusw1	equ	0xFE3
  4161                           fsr1h	equ	0xFE2
  4162                           fsr1l	equ	0xFE1
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           postdec2	equ	0xFDD
  4166                           plusw2	equ	0xFDB
  4167                           fsr2h	equ	0xFDA
  4168                           fsr2l	equ	0xFD9
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function _Interrupt_Init *****************
  4172 ;; Defined at:
  4173 ;;		line 98 in file "init.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;		None
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;		None
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  1    wreg      void 
  4180 ;; Registers used:
  4181 ;;		None
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;Total ram usage:        0 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    3
  4194 ;; This function calls:
  4195 ;;		Nothing
  4196 ;; This function is called by:
  4197 ;;		_SYSTEM_Initialize
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text10
  4202  00207A                     __ptext10:
  4203                           	opt stack 0
  4204  00207A                     _Interrupt_Init:
  4205                           	opt stack 26
  4206                           
  4207                           ;init.c: 100: (INTCONbits.GIE = 1);
  4208                           
  4209                           ;incstack = 0
  4210  00207A  8EF2               	bsf	intcon,7,c	;volatile
  4211                           
  4212                           ;init.c: 101: (INTCONbits.PEIE = 1);
  4213  00207C  8CF2               	bsf	intcon,6,c	;volatile
  4214  00207E  0012               	return		;funcret
  4215  002080                     __end_of_Interrupt_Init:
  4216                           	opt stack 0
  4217                           tosu	equ	0xFFF
  4218                           tosh	equ	0xFFE
  4219                           tosl	equ	0xFFD
  4220                           pclath	equ	0xFFA
  4221                           tblptru	equ	0xFF8
  4222                           tblptrh	equ	0xFF7
  4223                           tblptrl	equ	0xFF6
  4224                           tablat	equ	0xFF5
  4225                           prodh	equ	0xFF4
  4226                           prodl	equ	0xFF3
  4227                           intcon	equ	0xFF2
  4228                           intcon2	equ	0xFF1
  4229                           postinc0	equ	0xFEE
  4230                           wreg	equ	0xFE8
  4231                           indf1	equ	0xFE7
  4232                           plusw1	equ	0xFE3
  4233                           fsr1h	equ	0xFE2
  4234                           fsr1l	equ	0xFE1
  4235                           indf2	equ	0xFDF
  4236                           postinc2	equ	0xFDE
  4237                           postdec2	equ	0xFDD
  4238                           plusw2	equ	0xFDB
  4239                           fsr2h	equ	0xFDA
  4240                           fsr2l	equ	0xFD9
  4241                           status	equ	0xFD8
  4242                           
  4243 ;; *************** function _Init7221 *****************
  4244 ;; Defined at:
  4245 ;;		line 77 in file "max7221.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;Total ram usage:        0 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    5
  4266 ;; This function calls:
  4267 ;;		_Cmd7221
  4268 ;; This function is called by:
  4269 ;;		_SYSTEM_Initialize
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text11
  4274  001CD4                     __ptext11:
  4275                           	opt stack 0
  4276  001CD4                     _Init7221:
  4277                           	opt stack 24
  4278                           
  4279                           ;max7221.c: 79: LATDbits.LD0 = 1;
  4280                           
  4281                           ;incstack = 0
  4282  001CD4  808C               	bsf	3980,0,c	;volatile
  4283                           
  4284                           ;max7221.c: 81: Cmd7221(0x0C,1);
  4285  001CD6  0E01               	movlw	1
  4286  001CD8  6E11               	movwf	Cmd7221@val,c
  4287  001CDA  0E0C               	movlw	12
  4288  001CDC  EC7D  F00F         	call	_Cmd7221
  4289                           
  4290                           ;max7221.c: 82: Cmd7221(0x09,0);
  4291  001CE0  6A11               	clrf	Cmd7221@val,c
  4292  001CE2  0E09               	movlw	9
  4293  001CE4  EC7D  F00F         	call	_Cmd7221
  4294                           
  4295                           ;max7221.c: 83: Cmd7221(0x0B,7);
  4296  001CE8  0E07               	movlw	7
  4297  001CEA  6E11               	movwf	Cmd7221@val,c
  4298  001CEC  0E0B               	movlw	11
  4299  001CEE  EC7D  F00F         	call	_Cmd7221
  4300                           
  4301                           ;max7221.c: 84: Cmd7221(0x0A,0x01);
  4302  001CF2  0E01               	movlw	1
  4303  001CF4  6E11               	movwf	Cmd7221@val,c
  4304  001CF6  0E0A               	movlw	10
  4305  001CF8  EC7D  F00F         	call	_Cmd7221
  4306                           
  4307                           ;max7221.c: 85: Cmd7221(0x0F,0);
  4308  001CFC  6A11               	clrf	Cmd7221@val,c
  4309  001CFE  0E0F               	movlw	15
  4310  001D00  EF7D  F00F         	goto	_Cmd7221
  4311  001D04                     __end_of_Init7221:
  4312                           	opt stack 0
  4313                           tosu	equ	0xFFF
  4314                           tosh	equ	0xFFE
  4315                           tosl	equ	0xFFD
  4316                           pclath	equ	0xFFA
  4317                           tblptru	equ	0xFF8
  4318                           tblptrh	equ	0xFF7
  4319                           tblptrl	equ	0xFF6
  4320                           tablat	equ	0xFF5
  4321                           prodh	equ	0xFF4
  4322                           prodl	equ	0xFF3
  4323                           intcon	equ	0xFF2
  4324                           intcon2	equ	0xFF1
  4325                           postinc0	equ	0xFEE
  4326                           wreg	equ	0xFE8
  4327                           indf1	equ	0xFE7
  4328                           plusw1	equ	0xFE3
  4329                           fsr1h	equ	0xFE2
  4330                           fsr1l	equ	0xFE1
  4331                           indf2	equ	0xFDF
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           plusw2	equ	0xFDB
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function _Cmd7221 *****************
  4340 ;; Defined at:
  4341 ;;		line 33 in file "max7221.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;  adr             1    wreg     unsigned char 
  4344 ;;  val             1   16[COMRAM] unsigned char 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  adr             1   17[COMRAM] unsigned char 
  4347 ;;  i               1   18[COMRAM] unsigned char 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4357 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;Total ram usage:        3 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    4
  4364 ;; This function calls:
  4365 ;;		_Send_Byte_7221
  4366 ;; This function is called by:
  4367 ;;		_Init7221
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text12
  4372  001EFA                     __ptext12:
  4373                           	opt stack 0
  4374  001EFA                     _Cmd7221:
  4375                           	opt stack 24
  4376                           
  4377                           ;incstack = 0
  4378                           ;Cmd7221@adr stored from wreg
  4379  001EFA  6E12               	movwf	Cmd7221@adr,c
  4380                           
  4381                           ;max7221.c: 35: uint8_t i;
  4382                           ;max7221.c: 36: LATDbits.LD0 = 0;
  4383  001EFC  908C               	bcf	3980,0,c	;volatile
  4384                           
  4385                           ;max7221.c: 37: for (i = 0; i < 4; i++ )
  4386  001EFE  6A13               	clrf	Cmd7221@i,c
  4387  001F00                     l5350:
  4388                           
  4389                           ;max7221.c: 38: {
  4390                           ;max7221.c: 39: Send_Byte_7221(adr);
  4391  001F00  5012               	movf	Cmd7221@adr,w,c
  4392  001F02  EC47  F00F         	call	_Send_Byte_7221
  4393                           
  4394                           ;max7221.c: 40: Send_Byte_7221(val);
  4395  001F06  5011               	movf	Cmd7221@val,w,c
  4396  001F08  EC47  F00F         	call	_Send_Byte_7221
  4397  001F0C  2A13               	incf	Cmd7221@i,f,c
  4398  001F0E  0E03               	movlw	3
  4399  001F10  6413               	cpfsgt	Cmd7221@i,c
  4400  001F12  D7F6               	goto	l5350
  4401                           
  4402                           ;max7221.c: 42: }
  4403                           ;max7221.c: 44: LATDbits.LD0 = 1;
  4404  001F14  808C               	bsf	3980,0,c	;volatile
  4405  001F16  0C03               	retlw	3	;funcret
  4406  001F18                     __end_of_Cmd7221:
  4407                           	opt stack 0
  4408                           tosu	equ	0xFFF
  4409                           tosh	equ	0xFFE
  4410                           tosl	equ	0xFFD
  4411                           pclath	equ	0xFFA
  4412                           tblptru	equ	0xFF8
  4413                           tblptrh	equ	0xFF7
  4414                           tblptrl	equ	0xFF6
  4415                           tablat	equ	0xFF5
  4416                           prodh	equ	0xFF4
  4417                           prodl	equ	0xFF3
  4418                           intcon	equ	0xFF2
  4419                           intcon2	equ	0xFF1
  4420                           postinc0	equ	0xFEE
  4421                           wreg	equ	0xFE8
  4422                           indf1	equ	0xFE7
  4423                           plusw1	equ	0xFE3
  4424                           fsr1h	equ	0xFE2
  4425                           fsr1l	equ	0xFE1
  4426                           indf2	equ	0xFDF
  4427                           postinc2	equ	0xFDE
  4428                           postdec2	equ	0xFDD
  4429                           plusw2	equ	0xFDB
  4430                           fsr2h	equ	0xFDA
  4431                           fsr2l	equ	0xFD9
  4432                           status	equ	0xFD8
  4433                           
  4434 ;; *************** function _I2C_Init *****************
  4435 ;; Defined at:
  4436 ;;		line 11 in file "i2c.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;		None
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;		None
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  2   48[None  ] int 
  4443 ;; Registers used:
  4444 ;;		wreg, status,2, status,0
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;Total ram usage:        0 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    3
  4457 ;; This function calls:
  4458 ;;		Nothing
  4459 ;; This function is called by:
  4460 ;;		_SYSTEM_Initialize
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text13
  4465  001F86                     __ptext13:
  4466                           	opt stack 0
  4467  001F86                     _I2C_Init:
  4468                           	opt stack 26
  4469                           
  4470                           ;i2c.c: 13: TRISC |= 0b00011000;
  4471                           
  4472                           ;incstack = 0
  4473  001F86  0E18               	movlw	24
  4474  001F88  1294               	iorwf	3988,f,c	;volatile
  4475                           
  4476                           ;i2c.c: 14: SSPCON1 = 0b00101000;
  4477  001F8A  0E28               	movlw	40
  4478  001F8C  6EC6               	movwf	4038,c	;volatile
  4479                           
  4480                           ;i2c.c: 15: SSPSTAT = 0b00000000;
  4481  001F8E  6AC7               	clrf	4039,c	;volatile
  4482                           
  4483                           ;i2c.c: 16: SSPADD = 0x63;
  4484  001F90  0E63               	movlw	99
  4485  001F92  6EC8               	movwf	4040,c	;volatile
  4486                           
  4487                           ;i2c.c: 18: PEN = 1;
  4488  001F94  84C5               	bsf	4037,2,c	;volatile
  4489  001F96                     l170:
  4490  001F96  A4C5               	btfss	4037,2,c	;volatile
  4491  001F98  0012               	return		;funcret
  4492  001F9A  D7FD               	goto	l170
  4493  001F9C                     __end_of_I2C_Init:
  4494                           	opt stack 0
  4495                           tosu	equ	0xFFF
  4496                           tosh	equ	0xFFE
  4497                           tosl	equ	0xFFD
  4498                           pclath	equ	0xFFA
  4499                           tblptru	equ	0xFF8
  4500                           tblptrh	equ	0xFF7
  4501                           tblptrl	equ	0xFF6
  4502                           tablat	equ	0xFF5
  4503                           prodh	equ	0xFF4
  4504                           prodl	equ	0xFF3
  4505                           intcon	equ	0xFF2
  4506                           intcon2	equ	0xFF1
  4507                           postinc0	equ	0xFEE
  4508                           wreg	equ	0xFE8
  4509                           indf1	equ	0xFE7
  4510                           plusw1	equ	0xFE3
  4511                           fsr1h	equ	0xFE2
  4512                           fsr1l	equ	0xFE1
  4513                           indf2	equ	0xFDF
  4514                           postinc2	equ	0xFDE
  4515                           postdec2	equ	0xFDD
  4516                           plusw2	equ	0xFDB
  4517                           fsr2h	equ	0xFDA
  4518                           fsr2l	equ	0xFD9
  4519                           status	equ	0xFD8
  4520                           
  4521 ;; *************** function _DS3231_init *****************
  4522 ;; Defined at:
  4523 ;;		line 40 in file "ds3231.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;		None
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;		None
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  1    wreg      void 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0, cstack
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;Total ram usage:        0 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    6
  4544 ;; This function calls:
  4545 ;;		_DS3231_Write
  4546 ;; This function is called by:
  4547 ;;		_SYSTEM_Initialize
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text14
  4552  001FD8                     __ptext14:
  4553                           	opt stack 0
  4554  001FD8                     _DS3231_init:
  4555                           	opt stack 23
  4556                           
  4557                           ;ds3231.c: 42: DS3231_Write(0x0E, 0x00);
  4558                           
  4559                           ;incstack = 0
  4560  001FD8  6A1A               	clrf	DS3231_Write@value,c
  4561  001FDA  0E0E               	movlw	14
  4562  001FDC  EC9A  F00F         	call	_DS3231_Write
  4563                           
  4564                           ;ds3231.c: 43: DS3231_Write(0x0F, 0x08);
  4565  001FE0  0E08               	movlw	8
  4566  001FE2  6E1A               	movwf	DS3231_Write@value,c
  4567  001FE4  0E0F               	movlw	15
  4568  001FE6  EF9A  F00F         	goto	_DS3231_Write
  4569  001FEA                     __end_of_DS3231_init:
  4570                           	opt stack 0
  4571                           tosu	equ	0xFFF
  4572                           tosh	equ	0xFFE
  4573                           tosl	equ	0xFFD
  4574                           pclath	equ	0xFFA
  4575                           tblptru	equ	0xFF8
  4576                           tblptrh	equ	0xFF7
  4577                           tblptrl	equ	0xFF6
  4578                           tablat	equ	0xFF5
  4579                           prodh	equ	0xFF4
  4580                           prodl	equ	0xFF3
  4581                           intcon	equ	0xFF2
  4582                           intcon2	equ	0xFF1
  4583                           postinc0	equ	0xFEE
  4584                           wreg	equ	0xFE8
  4585                           indf1	equ	0xFE7
  4586                           plusw1	equ	0xFE3
  4587                           fsr1h	equ	0xFE2
  4588                           fsr1l	equ	0xFE1
  4589                           indf2	equ	0xFDF
  4590                           postinc2	equ	0xFDE
  4591                           postdec2	equ	0xFDD
  4592                           plusw2	equ	0xFDB
  4593                           fsr2h	equ	0xFDA
  4594                           fsr2l	equ	0xFD9
  4595                           status	equ	0xFD8
  4596                           
  4597 ;; *************** function _RTOS_DispatchTask *****************
  4598 ;; Defined at:
  4599 ;;		line 84 in file "dispatcher.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;		None
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;  function        2    9[BANK0 ] PTR FTN()void 
  4604 ;;		 -> home_temp(1), set_font_set(1), time_set_dy(1), time_set_dt(1), 
  4605 ;;		 -> time_set_mt(1), time_set_yr(1), default_state(1), time_set_hr(1), 
  4606 ;;		 -> time_set_min(1), GetTime(1), key_press(1), time_led(1), 
  4607 ;;  i               1   12[BANK0 ] unsigned char 
  4608 ;;  j               1   11[BANK0 ] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  1    wreg      void 
  4611 ;; Registers used:
  4612 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 3F/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;Total ram usage:        8 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    8
  4625 ;; This function calls:
  4626 ;;		_GetTime
  4627 ;;		_RTOS_DeleteTask
  4628 ;;		_default_state
  4629 ;;		_home_temp
  4630 ;;		_key_press
  4631 ;;		_set_font_set
  4632 ;;		_time_led
  4633 ;;		_time_set_dt
  4634 ;;		_time_set_dy
  4635 ;;		_time_set_hr
  4636 ;;		_time_set_min
  4637 ;;		_time_set_mt
  4638 ;;		_time_set_yr
  4639 ;; This function is called by:
  4640 ;;		_main
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           	psect	text15
  4645  00105A                     __ptext15:
  4646                           	opt stack 0
  4647  00105A                     _RTOS_DispatchTask:
  4648                           	opt stack 22
  4649                           
  4650                           ;dispatcher.c: 86: uint8_t i, j;
  4651                           ;dispatcher.c: 87: void (*function) (void);
  4652                           ;dispatcher.c: 89: if (Timer0Interrupt)
  4653                           
  4654                           ;incstack = 0
  4655  00105A  505F               	movf	_Timer0Interrupt,w,c
  4656  00105C  E019               	bz	l251
  4657                           
  4658                           ;dispatcher.c: 90: {
  4659                           ;dispatcher.c: 91: Timer0Interrupt = 0;
  4660  00105E  6A5F               	clrf	_Timer0Interrupt,c
  4661                           
  4662                           ;dispatcher.c: 92: for (j=0; j<arrayTail; j++)
  4663  001060  0100               	movlb	0	; () banked
  4664  001062  6BB4               	clrf	RTOS_DispatchTask@j& (0+255),b
  4665  001064  D012               	goto	l6292
  4666  001066                     l6284:
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;dispatcher.c: 93: {
  4670                           ;dispatcher.c: 94: if (TaskArray[j].delay == 0)
  4671  001066  51B4               	movf	RTOS_DispatchTask@j& (0+255),w,b
  4672  001068  D861               	call	PL20	;call to abstracted procedure
  4673  00106A  50DE               	movf	postinc2,w,c
  4674  00106C  10DE               	iorwf	postinc2,w,c
  4675  00106E  E107               	bnz	l6288
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;dispatcher.c: 95: TaskArray[j].run = 1;
  4679  001070  51B4               	movf	RTOS_DispatchTask@j& (0+255),w,b
  4680  001072  0D08               	mullw	8
  4681  001074  D863               	call	PL30	;call to abstracted procedure
  4682  001076  0E01               	movlw	1
  4683  001078  6EDE               	movwf	postinc2,c
  4684  00107A  6ADD               	clrf	postdec2,c
  4685  00107C  D005               	goto	l6290
  4686  00107E                     l6288:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;dispatcher.c: 96: else TaskArray[j].delay--;
  4690  00107E  51B4               	movf	RTOS_DispatchTask@j& (0+255),w,b
  4691  001080  D855               	call	PL20	;call to abstracted procedure
  4692  001082  06DE               	decf	postinc2,f,c
  4693  001084  0E00               	movlw	0
  4694  001086  5ADD               	subwfb	postdec2,f,c
  4695  001088                     l6290:
  4696                           
  4697                           ; BSR set to: 0
  4698  001088  2BB4               	incf	RTOS_DispatchTask@j& (0+255),f,b
  4699  00108A                     l6292:
  4700                           
  4701                           ; BSR set to: 0
  4702  00108A  5060               	movf	_arrayTail,w,c	;volatile
  4703  00108C  5DB4               	subwf	RTOS_DispatchTask@j& (0+255),w,b
  4704  00108E  E3EB               	bnc	l6284
  4705  001090                     l251:
  4706                           
  4707                           ;dispatcher.c: 97: }
  4708                           ;dispatcher.c: 98: }
  4709                           ;dispatcher.c: 100: for (i=0; i<arrayTail; i++)
  4710  001090  0100               	movlb	0	; () banked
  4711  001092  6BB5               	clrf	RTOS_DispatchTask@i& (0+255),b
  4712  001094  D047               	goto	l6308
  4713  001096                     l6294:
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;dispatcher.c: 101: {
  4717                           ;dispatcher.c: 102: if (TaskArray[i].run == 1)
  4718  001096  51B5               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4719  001098  0D08               	mullw	8
  4720  00109A  D850               	call	PL30	;call to abstracted procedure
  4721  00109C  04DE               	decf	postinc2,w,c
  4722  00109E  10DE               	iorwf	postinc2,w,c
  4723  0010A0  E13F               	bnz	l6306
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;dispatcher.c: 103: {
  4727                           ;dispatcher.c: 104: function = TaskArray[i].pFunc;
  4728  0010A2  51B5               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4729  0010A4  ECBA  F009         	call	PL22	;call to abstracted procedure
  4730  0010A8  CFDE F0B2          	movff	postinc2,RTOS_DispatchTask@function
  4731  0010AC  CFDD F0B3          	movff	postdec2,RTOS_DispatchTask@function+1
  4732                           
  4733                           ;dispatcher.c: 106: if(TaskArray[i].period == 0)
  4734  0010B0  51B5               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4735  0010B2  ECCC  F009         	call	PL28	;call to abstracted procedure
  4736  0010B6  50DE               	movf	postinc2,w,c
  4737  0010B8  10DE               	iorwf	postinc2,w,c
  4738  0010BA  E10A               	bnz	l6300
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;dispatcher.c: 107: {
  4742                           ;dispatcher.c: 108: RTOS_DeleteTask(TaskArray[i].pFunc);
  4743  0010BC  51B5               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4744  0010BE  ECBA  F009         	call	PL22	;call to abstracted procedure
  4745  0010C2  CFDE F00F          	movff	postinc2,RTOS_DeleteTask@taskFunc
  4746  0010C6  CFDD F010          	movff	postdec2,RTOS_DeleteTask@taskFunc+1
  4747  0010CA  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  4748                           
  4749                           ;dispatcher.c: 110: }
  4750  0010CE  D01B               	goto	l6304
  4751  0010D0                     l6300:
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;dispatcher.c: 111: else
  4755                           ;dispatcher.c: 112: {
  4756                           ;dispatcher.c: 113: TaskArray[i].run = 0;
  4757  0010D0  51B5               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4758  0010D2  ECC2  F009         	call	PL24	;call to abstracted procedure
  4759                           
  4760                           ;dispatcher.c: 114: if(!TaskArray[i].delay)
  4761  0010D6  51B5               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4762  0010D8  D829               	call	PL20	;call to abstracted procedure
  4763  0010DA  50DE               	movf	postinc2,w,c
  4764  0010DC  10DE               	iorwf	postinc2,w,c
  4765  0010DE  E113               	bnz	l6304
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;dispatcher.c: 115: {
  4769                           ;dispatcher.c: 116: TaskArray[i].delay = TaskArray[i].period-1;
  4770  0010E0  69AE               	setf	??_RTOS_DispatchTask& (0+255),b
  4771  0010E2  69AF               	setf	(??_RTOS_DispatchTask+1)& (0+255),b
  4772  0010E4  51B5               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4773  0010E6  ECCC  F009         	call	PL28	;call to abstracted procedure
  4774  0010EA  CFDE F0B0          	movff	postinc2,??_RTOS_DispatchTask+2
  4775  0010EE  CFDD F0B1          	movff	postdec2,??_RTOS_DispatchTask+3
  4776  0010F2  51AE               	movf	??_RTOS_DispatchTask& (0+255),w,b
  4777  0010F4  27B0               	addwf	(??_RTOS_DispatchTask+2)& (0+255),f,b
  4778  0010F6  51AF               	movf	(??_RTOS_DispatchTask+1)& (0+255),w,b
  4779  0010F8  23B1               	addwfc	(??_RTOS_DispatchTask+3)& (0+255),f,b
  4780  0010FA  51B5               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4781  0010FC  D817               	call	PL20	;call to abstracted procedure
  4782  0010FE  C0B0  FFDE         	movff	??_RTOS_DispatchTask+2,postinc2
  4783  001102  C0B1  FFDD         	movff	??_RTOS_DispatchTask+3,postdec2
  4784  001106                     l6304:
  4785                           
  4786                           ;dispatcher.c: 117: }
  4787                           ;dispatcher.c: 118: }
  4788                           ;dispatcher.c: 119: (*function)();
  4789  001106  D801               	call	u4398
  4790  001108  D00B               	goto	l6306
  4791  00110A                     u4398:
  4792  00110A  0005               	push	
  4793  00110C  0100               	movlb	0	; () banked
  4794  00110E  6EFA               	movwf	pclath,c
  4795  001110  51B2               	movf	RTOS_DispatchTask@function& (0+255),w,b
  4796  001112  6EFD               	movwf	tosl,c
  4797  001114  51B3               	movf	(RTOS_DispatchTask@function+1)& (0+255),w,b
  4798  001116  6EFE               	movwf	tosh,c
  4799  001118  50F8               	movf	tblptru,w,c
  4800  00111A  6EFF               	movwf	tosu,c
  4801  00111C  50FA               	movf	pclath,w,c
  4802  00111E  0012               	return		;indir
  4803  001120                     l6306:
  4804  001120  0100               	movlb	0	; () banked
  4805  001122  2BB5               	incf	RTOS_DispatchTask@i& (0+255),f,b
  4806  001124                     l6308:
  4807                           
  4808                           ; BSR set to: 0
  4809  001124  5060               	movf	_arrayTail,w,c	;volatile
  4810  001126  5DB5               	subwf	RTOS_DispatchTask@i& (0+255),w,b
  4811  001128  E3B6               	bnc	l6294
  4812                           
  4813                           ; BSR set to: 0
  4814  00112A  0012               	return		;funcret
  4815  00112C                     __end_of_RTOS_DispatchTask:
  4816                           	opt stack 0
  4817  00112C                     PL20:
  4818                           	opt stack 27
  4819  00112C  0D08               	mullw	8
  4820  00112E  0E02               	movlw	low (_TaskArray+2)
  4821  001130  24F3               	addwf	prodl,w,c
  4822  001132  6ED9               	movwf	fsr2l,c
  4823  001134  0E01               	movlw	high (_TaskArray+2)
  4824  001136  20F4               	addwfc	prodh,w,c
  4825  001138  6EDA               	movwf	fsr2h,c
  4826  00113A  0012               	return	
  4827  00113C                     __end_ofPL20:
  4828                           	opt stack 0
  4829  00113C                     PL30:
  4830                           	opt stack 22
  4831  00113C  0E06               	movlw	low (_TaskArray+6)
  4832  00113E  24F3               	addwf	prodl,w,c
  4833  001140  6ED9               	movwf	fsr2l,c
  4834  001142  0E01               	movlw	high (_TaskArray+6)
  4835  001144  20F4               	addwfc	prodh,w,c
  4836  001146  6EDA               	movwf	fsr2h,c
  4837  001148  0012               	return	
  4838  00114A                     __end_ofPL30:
  4839                           	opt stack 0
  4840                           tosu	equ	0xFFF
  4841                           tosh	equ	0xFFE
  4842                           tosl	equ	0xFFD
  4843                           pclath	equ	0xFFA
  4844                           tblptru	equ	0xFF8
  4845                           tblptrh	equ	0xFF7
  4846                           tblptrl	equ	0xFF6
  4847                           tablat	equ	0xFF5
  4848                           prodh	equ	0xFF4
  4849                           prodl	equ	0xFF3
  4850                           intcon	equ	0xFF2
  4851                           intcon2	equ	0xFF1
  4852                           postinc0	equ	0xFEE
  4853                           wreg	equ	0xFE8
  4854                           indf1	equ	0xFE7
  4855                           plusw1	equ	0xFE3
  4856                           fsr1h	equ	0xFE2
  4857                           fsr1l	equ	0xFE1
  4858                           indf2	equ	0xFDF
  4859                           postinc2	equ	0xFDE
  4860                           postdec2	equ	0xFDD
  4861                           plusw2	equ	0xFDB
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function _home_temp *****************
  4867 ;; Defined at:
  4868 ;;		line 481 in file "common.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;		None
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 3F/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;Total ram usage:        1 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    7
  4889 ;; This function calls:
  4890 ;;		_RTOS_DeleteTask
  4891 ;;		_RTOS_SetTask
  4892 ;;		___lbdiv
  4893 ;;		___lbmod
  4894 ;;		___lwdiv
  4895 ;;		___lwmod
  4896 ;;		_clear_matrix
  4897 ;;		_getTime
  4898 ;;		_pic_to_led
  4899 ;;		_putchar_down
  4900 ;;		_putchar_down_s
  4901 ;;		_scroll_left
  4902 ;; This function is called by:
  4903 ;;		_time_led
  4904 ;;		_RTOS_DispatchTask
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text16
  4909  000632                     __ptext16:
  4910                           	opt stack 0
  4911  000632                     _home_temp:
  4912                           	opt stack 22
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;common.c: 483: switch (events)
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;incstack = 0
  4919  000632  D0A4               	goto	l6186
  4920  000634                     l6140:
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;common.c: 488: clear_matrix();
  4924  000634  ECF5  F00F         	call	_clear_matrix	;wreg free
  4925                           
  4926                           ;common.c: 489: if (!((temperature/10) % 10))
  4927  000638  D8B7               	call	PL56	;call to abstracted procedure
  4928  00063A  ECFA  F00C         	call	___lwdiv	;wreg free
  4929  00063E  D8AC               	call	PL52	;call to abstracted procedure
  4930  000640  EC85  F00D         	call	___lwmod	;wreg free
  4931  000644  5016               	movf	?___lwmod,w,c
  4932  000646  1017               	iorwf	?___lwmod+1,w,c
  4933  000648  E110               	bnz	l6150
  4934                           
  4935                           ;common.c: 490: {
  4936                           ;common.c: 491: pic_to_led(3,1);
  4937  00064A  D8C5               	call	PL120	;call to abstracted procedure
  4938  00064C  ECE4  F00B         	call	_pic_to_led
  4939                           
  4940                           ;common.c: 493: putchar_down(13,temperature % 10, pFont);
  4941  000650  D8B3               	call	PL60	;call to abstracted procedure
  4942  000652  EC85  F00D         	call	___lwmod	;wreg free
  4943  000656  5016               	movf	?___lwmod,w,c
  4944  000658  D899               	call	PL36	;call to abstracted procedure
  4945  00065A  0E0D               	movlw	13
  4946  00065C  EC2B  F00A         	call	_putchar_down
  4947                           
  4948                           ;common.c: 494: putchar_down(19,176, &Font);
  4949  000660  D8B3               	call	PL64	;call to abstracted procedure
  4950  000662  0E13               	movlw	19
  4951  000664  EC2B  F00A         	call	_putchar_down
  4952                           
  4953                           ;common.c: 495: }else
  4954  000668  D01A               	goto	l6158
  4955  00066A                     l6150:
  4956                           
  4957                           ;common.c: 496: {
  4958                           ;common.c: 497: pic_to_led(3,1);
  4959  00066A  D8B5               	call	PL120	;call to abstracted procedure
  4960  00066C  ECE4  F00B         	call	_pic_to_led
  4961                           
  4962                           ;common.c: 498: putchar_down(13,(temperature/10) % 10, pFont);
  4963  000670  D89B               	call	PL56	;call to abstracted procedure
  4964  000672  ECFA  F00C         	call	___lwdiv	;wreg free
  4965  000676  D890               	call	PL52	;call to abstracted procedure
  4966  000678  EC85  F00D         	call	___lwmod	;wreg free
  4967  00067C  5016               	movf	?___lwmod,w,c
  4968  00067E  D886               	call	PL36	;call to abstracted procedure
  4969  000680  0E0D               	movlw	13
  4970  000682  EC2B  F00A         	call	_putchar_down
  4971                           
  4972                           ;common.c: 499: putchar_down(19,temperature % 10, pFont);
  4973  000686  D898               	call	PL60	;call to abstracted procedure
  4974  000688  EC85  F00D         	call	___lwmod	;wreg free
  4975  00068C  5016               	movf	?___lwmod,w,c
  4976  00068E  D87E               	call	PL36	;call to abstracted procedure
  4977  000690  0E13               	movlw	19
  4978  000692  EC2B  F00A         	call	_putchar_down
  4979                           
  4980                           ;common.c: 500: putchar_down(25,176, &Font);
  4981  000696  D898               	call	PL64	;call to abstracted procedure
  4982  000698  0E19               	movlw	25
  4983  00069A  EC2B  F00A         	call	_putchar_down
  4984  00069E                     l6158:
  4985                           
  4986                           ;common.c: 502: }
  4987                           ;common.c: 503: events = 6;
  4988  00069E  0E06               	movlw	6
  4989  0006A0  6E6F               	movwf	_events,c
  4990                           
  4991                           ;common.c: 504: RTOS_SetTask(default_state, 750, 0);
  4992  0006A2  0E80               	movlw	low _default_state
  4993  0006A4  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  4994  0006A6  0E20               	movlw	high _default_state
  4995  0006A8  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  4996  0006AA  0E02               	movlw	2
  4997  0006AC  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  4998  0006AE  0EEE               	movlw	238
  4999  0006B0  6E11               	movwf	RTOS_SetTask@taskDelay,c
  5000  0006B2  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5001  0006B4  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  5002  0006B6  EFBA  F00A         	goto	_RTOS_SetTask	;wreg free
  5003  0006BA                     l6162:
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;common.c: 512: events = 5;
  5007  0006BA  0E05               	movlw	5
  5008  0006BC  6E6F               	movwf	_events,c
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;common.c: 513: scroll_left();
  5012  0006BE  EC7A  F00C         	call	_scroll_left	;wreg free
  5013                           
  5014                           ;common.c: 514: if((TTime.Thr/10) % 10)
  5015  0006C2  ECE9  F005         	call	PL58	;call to abstracted procedure
  5016  0006C6  EC50  F00E         	call	___lbdiv
  5017  0006CA  ECFE  F00E         	call	___lbmod
  5018  0006CE  0900               	iorlw	0
  5019  0006D0  E00B               	bz	l6170
  5020                           
  5021                           ;common.c: 515: putchar_down(0, (TTime.Thr/10) % 10, pFont);
  5022  0006D2  ECE9  F005         	call	PL58	;call to abstracted procedure
  5023  0006D6  EC50  F00E         	call	___lbdiv
  5024  0006DA  ECFE  F00E         	call	___lbmod
  5025  0006DE  D856               	call	PL36	;call to abstracted procedure
  5026  0006E0  0E00               	movlw	0
  5027  0006E2  EC2B  F00A         	call	_putchar_down
  5028  0006E6  D008               	goto	l824
  5029  0006E8                     l6170:
  5030                           
  5031                           ;common.c: 516: else putchar_down(0, 0, pFont);
  5032  0006E8  0E00               	movlw	0
  5033  0006EA  6A1B               	clrf	putchar_down@symbol,c
  5034  0006EC  C06D  F01C         	movff	_pFont,putchar_down@pF
  5035  0006F0  C06E  F01D         	movff	_pFont+1,putchar_down@pF+1
  5036  0006F4  EC2B  F00A         	call	_putchar_down
  5037  0006F8                     l824:
  5038                           
  5039                           ;common.c: 517: putchar_down(6, TTime.Thr % 10, pFont);
  5040  0006F8  EC01  F006         	call	PL124	;call to abstracted procedure
  5041  0006FC  ECFE  F00E         	call	___lbmod
  5042  000700  D845               	call	PL36	;call to abstracted procedure
  5043  000702  0E06               	movlw	6
  5044  000704  EC2B  F00A         	call	_putchar_down
  5045                           
  5046                           ;common.c: 518: putchar_down(13, (TTime.Tmin/10) % 10, pFont);
  5047  000708  ECEE  F005         	call	PL80	;call to abstracted procedure
  5048  00070C  EC50  F00E         	call	___lbdiv
  5049  000710  ECFE  F00E         	call	___lbmod
  5050  000714  D83B               	call	PL36	;call to abstracted procedure
  5051  000716  0E0D               	movlw	13
  5052  000718  EC2B  F00A         	call	_putchar_down
  5053                           
  5054                           ;common.c: 519: putchar_down(19, TTime.Tmin % 10, pFont);
  5055  00071C  EC05  F006         	call	PL128	;call to abstracted procedure
  5056  000720  ECFE  F00E         	call	___lbmod
  5057  000724  D833               	call	PL36	;call to abstracted procedure
  5058  000726  0E13               	movlw	19
  5059  000728  EC2B  F00A         	call	_putchar_down
  5060                           
  5061                           ;common.c: 520: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  5062  00072C  ECD0  F00E         	call	PL62	;call to abstracted procedure
  5063  000730  EC4A  F00C         	call	_getTime	;wreg free
  5064                           
  5065                           ;common.c: 521: putchar_down_s(25, (TTime.Ts/10) % 10 + 1);
  5066  000734  ECF8  F005         	call	PL100	;call to abstracted procedure
  5067  000738  EC50  F00E         	call	___lbdiv
  5068  00073C  ECFE  F00E         	call	___lbmod
  5069  000740  6E27               	movwf	??_home_temp& (0+255),c
  5070  000742  2827               	incf	??_home_temp,w,c
  5071  000744  6E17               	movwf	putchar_down_s@symbol,c
  5072  000746  0E19               	movlw	25
  5073  000748  ECE1  F009         	call	_putchar_down_s
  5074                           
  5075                           ;common.c: 522: putchar_down_s(29, TTime.Ts % 10 + 1);
  5076  00074C  ECFD  F005         	call	PL122	;call to abstracted procedure
  5077  000750  ECFE  F00E         	call	___lbmod
  5078  000754  6E27               	movwf	??_home_temp& (0+255),c
  5079  000756  2827               	incf	??_home_temp,w,c
  5080  000758  6E17               	movwf	putchar_down_s@symbol,c
  5081  00075A  0E1D               	movlw	29
  5082  00075C  ECE1  F009         	call	_putchar_down_s
  5083                           
  5084                           ;common.c: 523: RTOS_DeleteTask(default_state);
  5085  000760  ECA0  F007         	call	PL38	;call to abstracted procedure
  5086  000764  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5087                           
  5088                           ;common.c: 524: RTOS_DeleteTask(home_temp);
  5089  000768  0E32               	movlw	low _home_temp
  5090  00076A  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5091  00076C  0E06               	movlw	high _home_temp
  5092  00076E  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5093  000770  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5094                           
  5095                           ;common.c: 525: RTOS_SetTask(time_led,0,20);
  5096  000774  EC96  F007         	call	PL8	;call to abstracted procedure
  5097  000778  EFBA  F00A         	goto	_RTOS_SetTask	;wreg free
  5098  00077C                     l6186:
  5099                           
  5100                           ; BSR set to: 0
  5101  00077C  506F               	movf	_events,w,c
  5102                           
  5103                           ; Switch size 1, requested type "space"
  5104                           ; Number of cases is 3, Range of values is 4 to 6
  5105                           ; switch strategies available:
  5106                           ; Name         Instructions Cycles
  5107                           ; simple_byte           10     6 (average)
  5108                           ;	Chosen strategy is simple_byte
  5109  00077E  0A04               	xorlw	4	; case 4
  5110  000780  E09C               	bz	l6162
  5111  000782  0A01               	xorlw	1	; case 5
  5112  000784  E101 D756          	bz	l6140
  5113  000788  0A03               	xorlw	3	; case 6
  5114  00078A  0012               	return	
  5115  00078C                     __end_of_home_temp:
  5116                           	opt stack 0
  5117  00078C                     PL36:
  5118                           	opt stack 22
  5119  00078C  6E1B               	movwf	putchar_down@symbol,c
  5120  00078E  C06D  F01C         	movff	_pFont,putchar_down@pF
  5121  000792  C06E  F01D         	movff	_pFont+1,putchar_down@pF+1
  5122  000796  0012               	return	
  5123  000798                     __end_ofPL36:
  5124                           	opt stack 0
  5125  000798                     PL52:
  5126                           	opt stack 22
  5127  000798  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  5128  00079C  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  5129  0007A0  6A19               	clrf	___lwmod@divisor+1,c
  5130  0007A2  0E0A               	movlw	10
  5131  0007A4  6E18               	movwf	___lwmod@divisor,c
  5132  0007A6  0C0A               	retlw	10
  5133  0007A8                     __end_ofPL52:
  5134                           	opt stack 0
  5135  0007A8                     PL56:
  5136                           	opt stack 22
  5137  0007A8  6A12               	clrf	___lwdiv@divisor+1,c
  5138  0007AA  0E0A               	movlw	10
  5139  0007AC  6E11               	movwf	___lwdiv@divisor,c
  5140  0007AE  C069  F00F         	movff	_temperature,___lwdiv@dividend
  5141  0007B2  C06A  F010         	movff	_temperature+1,___lwdiv@dividend+1
  5142  0007B6  0C0A               	retlw	10
  5143  0007B8                     __end_ofPL56:
  5144                           	opt stack 0
  5145  0007B8                     PL60:
  5146                           	opt stack 22
  5147  0007B8  C069  F016         	movff	_temperature,___lwmod@dividend
  5148  0007BC  C06A  F017         	movff	_temperature+1,___lwmod@dividend+1
  5149  0007C0  6A19               	clrf	___lwmod@divisor+1,c
  5150  0007C2  0E0A               	movlw	10
  5151  0007C4  6E18               	movwf	___lwmod@divisor,c
  5152  0007C6  0C0A               	retlw	10
  5153  0007C8                     __end_ofPL60:
  5154                           	opt stack 0
  5155  0007C8                     PL64:
  5156                           	opt stack 22
  5157  0007C8  0EB0               	movlw	176
  5158  0007CA  6E1B               	movwf	putchar_down@symbol,c
  5159  0007CC  0E01               	movlw	low _Font
  5160  0007CE  6E1C               	movwf	putchar_down@pF,c
  5161  0007D0  0EB9               	movlw	high _Font
  5162  0007D2  6E1D               	movwf	putchar_down@pF+1,c
  5163  0007D4  0012               	return	
  5164  0007D6                     __end_ofPL64:
  5165                           	opt stack 0
  5166  0007D6                     PL120:
  5167                           	opt stack 22
  5168  0007D6  0E01               	movlw	1
  5169  0007D8  6E14               	movwf	pic_to_led@pic,c
  5170  0007DA  0C03               	retlw	3
  5171  0007DC                     __end_ofPL120:
  5172                           	opt stack 0
  5173                           tosu	equ	0xFFF
  5174                           tosh	equ	0xFFE
  5175                           tosl	equ	0xFFD
  5176                           pclath	equ	0xFFA
  5177                           tblptru	equ	0xFF8
  5178                           tblptrh	equ	0xFF7
  5179                           tblptrl	equ	0xFF6
  5180                           tablat	equ	0xFF5
  5181                           prodh	equ	0xFF4
  5182                           prodl	equ	0xFF3
  5183                           intcon	equ	0xFF2
  5184                           intcon2	equ	0xFF1
  5185                           postinc0	equ	0xFEE
  5186                           wreg	equ	0xFE8
  5187                           indf1	equ	0xFE7
  5188                           plusw1	equ	0xFE3
  5189                           fsr1h	equ	0xFE2
  5190                           fsr1l	equ	0xFE1
  5191                           indf2	equ	0xFDF
  5192                           postinc2	equ	0xFDE
  5193                           postdec2	equ	0xFDD
  5194                           plusw2	equ	0xFDB
  5195                           fsr2h	equ	0xFDA
  5196                           fsr2l	equ	0xFD9
  5197                           status	equ	0xFD8
  5198                           
  5199 ;; *************** function _time_set_min *****************
  5200 ;; Defined at:
  5201 ;;		line 30 in file "common.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;		None
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;		None
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  1    wreg      void 
  5208 ;; Registers used:
  5209 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5210 ;; Tracked objects:
  5211 ;;		On entry : 3F/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;Total ram usage:        0 bytes
  5220 ;; Hardware stack levels used:    1
  5221 ;; Hardware stack levels required when called:    7
  5222 ;; This function calls:
  5223 ;;		_RTOS_DeleteTask
  5224 ;;		_RTOS_SetTask
  5225 ;;		_Update_Matrix
  5226 ;;		___lbdiv
  5227 ;;		___lbmod
  5228 ;;		_putchar_b_buf
  5229 ;;		_setTime
  5230 ;; This function is called by:
  5231 ;;		_time_led
  5232 ;;		_RTOS_DispatchTask
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text17
  5237  00114A                     __ptext17:
  5238                           	opt stack 0
  5239  00114A                     _time_set_min:
  5240                           	opt stack 22
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;common.c: 32: show_digit = ~show_digit;
  5244                           
  5245                           ;incstack = 0
  5246  00114A  B270               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  5247  00114C  D002               	goto	u3900
  5248  00114E  8270               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  5249  001150  D03B               	goto	l5756
  5250  001152                     u3900:
  5251  001152  9270               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  5252                           
  5253                           ;common.c: 33: switch (events)
  5254  001154  D039               	goto	l5756
  5255  001156                     l5716:
  5256                           
  5257                           ;common.c: 40: RTOS_DeleteTask(time_set_min);
  5258  001156  D86B               	call	PL78	;call to abstracted procedure
  5259  001158  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5260                           
  5261                           ;common.c: 41: RTOS_SetTask(time_set_hr, 0, 50);
  5262  00115C  0E68               	movlw	low _time_set_hr
  5263  00115E  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5264  001160  0E09               	movlw	high _time_set_hr
  5265  001162  EC7C  F009         	call	PL10	;call to abstracted procedure
  5266  001166  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5267                           
  5268                           ;common.c: 42: RTOS_SetTask(default_state, 2000, 0);
  5269  00116A  EC09  F003         	call	PL2	;call to abstracted procedure
  5270  00116E  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5271  001172                     l5722:
  5272                           
  5273                           ;common.c: 43: events = 5;
  5274  001172  0E05               	movlw	5
  5275  001174  6E6F               	movwf	_events,c
  5276                           
  5277                           ;common.c: 44: break;
  5278  001176  D032               	goto	l699
  5279  001178                     l5724:
  5280                           
  5281                           ;common.c: 46: RTOS_DeleteTask(time_set_min);
  5282  001178  D85A               	call	PL78	;call to abstracted procedure
  5283  00117A  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5284                           
  5285                           ;common.c: 47: RTOS_DeleteTask(default_state);
  5286  00117E  ECA0  F007         	call	PL38	;call to abstracted procedure
  5287  001182  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5288                           
  5289                           ;common.c: 48: RTOS_SetTask(time_led, 0, 20);
  5290  001186  EC96  F007         	call	PL8	;call to abstracted procedure
  5291  00118A  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5292  00118E  D7F1               	goto	l5722
  5293  001190                     l5730:
  5294                           
  5295                           ;common.c: 52: TSTime.Tmin++;
  5296  001190  2A42               	incf	_TSTime+1,f,c
  5297                           
  5298                           ;common.c: 53: if(TSTime.Tmin > 59) TSTime.Tmin = 0;
  5299  001192  0E3B               	movlw	59
  5300  001194  6442               	cpfsgt	_TSTime+1,c
  5301  001196  D001               	goto	l5736
  5302  001198  6A42               	clrf	_TSTime+1,c
  5303  00119A                     l5736:
  5304                           
  5305                           ;common.c: 54: RTOS_SetTask(default_state, 2000, 0);
  5306  00119A  EC09  F003         	call	PL2	;call to abstracted procedure
  5307  00119E  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5308                           
  5309                           ;common.c: 55: setTime(TSTime.Thr,TSTime.Tmin,0);
  5310  0011A2  EC57  F005         	call	PL54	;call to abstracted procedure
  5311  0011A6  EC82  F00E         	call	_setTime
  5312  0011AA  D7E3               	goto	l5722
  5313  0011AC                     l5742:
  5314                           
  5315                           ;common.c: 59: TSTime.Tmin--;
  5316  0011AC  0642               	decf	_TSTime+1,f,c
  5317                           
  5318                           ;common.c: 60: if(TSTime.Tmin == 255) TSTime.Tmin = 59;
  5319  0011AE  2842               	incf	_TSTime+1,w,c
  5320  0011B0  E102               	bnz	l5748
  5321  0011B2  0E3B               	movlw	59
  5322  0011B4  6E42               	movwf	_TSTime+1,c
  5323  0011B6                     l5748:
  5324                           
  5325                           ;common.c: 61: RTOS_SetTask(default_state, 2000, 0);
  5326  0011B6  EC09  F003         	call	PL2	;call to abstracted procedure
  5327  0011BA  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5328                           
  5329                           ;common.c: 62: setTime(TSTime.Thr,TSTime.Tmin,0);
  5330  0011BE  EC57  F005         	call	PL54	;call to abstracted procedure
  5331  0011C2  EC82  F00E         	call	_setTime
  5332  0011C6  D7D5               	goto	l5722
  5333  0011C8                     l5756:
  5334  0011C8  506F               	movf	_events,w,c
  5335                           
  5336                           ; Switch size 1, requested type "space"
  5337                           ; Number of cases is 5, Range of values is 1 to 5
  5338                           ; switch strategies available:
  5339                           ; Name         Instructions Cycles
  5340                           ; simple_byte           16     9 (average)
  5341                           ;	Chosen strategy is simple_byte
  5342  0011CA  0A01               	xorlw	1	; case 1
  5343  0011CC  E0C4               	bz	l5716
  5344  0011CE  0A03               	xorlw	3	; case 2
  5345  0011D0  E0DF               	bz	l5730
  5346  0011D2  0A01               	xorlw	1	; case 3
  5347  0011D4  E0EB               	bz	l5742
  5348  0011D6  0A07               	xorlw	7	; case 4
  5349  0011D8  E0CF               	bz	l5724
  5350  0011DA  0A01               	xorlw	1	; case 5
  5351  0011DC                     l699:
  5352                           
  5353                           ;common.c: 67: if(show_digit)
  5354  0011DC  A270               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  5355  0011DE  D015               	goto	l5760
  5356                           
  5357                           ;common.c: 68: {
  5358                           ;common.c: 69: putchar_b_buf(13,(TSTime.Tmin/10) % 10 , pFont);
  5359  0011E0  EC5C  F005         	call	PL74	;call to abstracted procedure
  5360  0011E4  EC50  F00E         	call	___lbdiv
  5361  0011E8  ECFE  F00E         	call	___lbmod
  5362  0011EC  EC51  F005         	call	PL26	;call to abstracted procedure
  5363  0011F0  0E0D               	movlw	13
  5364  0011F2  ECAF  F00B         	call	_putchar_b_buf
  5365                           
  5366                           ;common.c: 70: putchar_b_buf(19,TSTime.Tmin % 10 , pFont);
  5367  0011F6  EC6B  F005         	call	PL126	;call to abstracted procedure
  5368  0011FA  ECFE  F00E         	call	___lbmod
  5369  0011FE  EC51  F005         	call	PL26	;call to abstracted procedure
  5370  001202  0E13               	movlw	19
  5371  001204  ECAF  F00B         	call	_putchar_b_buf
  5372                           
  5373                           ;common.c: 71: }
  5374  001208  D00C               	goto	l5762
  5375  00120A                     l5760:
  5376                           
  5377                           ;common.c: 72: else
  5378                           ;common.c: 73: {
  5379                           ;common.c: 74: putchar_b_buf(13,0, &Font);
  5380  00120A  6A17               	clrf	putchar_b_buf@symbol,c
  5381  00120C  EC4C  F005         	call	PL6	;call to abstracted procedure
  5382  001210  0E0D               	movlw	13
  5383  001212  ECAF  F00B         	call	_putchar_b_buf
  5384                           
  5385                           ;common.c: 75: putchar_b_buf(19,0, &Font);
  5386  001216  6A17               	clrf	putchar_b_buf@symbol,c
  5387  001218  EC4C  F005         	call	PL6	;call to abstracted procedure
  5388  00121C  0E13               	movlw	19
  5389  00121E  ECAF  F00B         	call	_putchar_b_buf
  5390  001222                     l5762:
  5391                           
  5392                           ;common.c: 76: }
  5393                           ;common.c: 77: Update_Matrix(Dis_Buff);
  5394  001222  0E89               	movlw	low _Dis_Buff
  5395  001224  6E11               	movwf	Update_Matrix@buf,c
  5396  001226  ECC2  F00D         	call	_Update_Matrix	;wreg free
  5397                           
  5398                           ;common.c: 78: en_put = 1;
  5399  00122A  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5400  00122C  0012               	return		;funcret
  5401  00122E                     __end_of_time_set_min:
  5402                           	opt stack 0
  5403  00122E                     PL78:
  5404                           	opt stack 22
  5405  00122E  0E4A               	movlw	low _time_set_min
  5406  001230  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5407  001232  0E11               	movlw	high _time_set_min
  5408  001234  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5409  001236  0012               	return	
  5410  001238                     __end_ofPL78:
  5411                           	opt stack 0
  5412                           tosu	equ	0xFFF
  5413                           tosh	equ	0xFFE
  5414                           tosl	equ	0xFFD
  5415                           pclath	equ	0xFFA
  5416                           tblptru	equ	0xFF8
  5417                           tblptrh	equ	0xFF7
  5418                           tblptrl	equ	0xFF6
  5419                           tablat	equ	0xFF5
  5420                           prodh	equ	0xFF4
  5421                           prodl	equ	0xFF3
  5422                           intcon	equ	0xFF2
  5423                           intcon2	equ	0xFF1
  5424                           postinc0	equ	0xFEE
  5425                           wreg	equ	0xFE8
  5426                           indf1	equ	0xFE7
  5427                           plusw1	equ	0xFE3
  5428                           fsr1h	equ	0xFE2
  5429                           fsr1l	equ	0xFE1
  5430                           indf2	equ	0xFDF
  5431                           postinc2	equ	0xFDE
  5432                           postdec2	equ	0xFDD
  5433                           plusw2	equ	0xFDB
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8
  5437                           
  5438 ;; *************** function _GetTime *****************
  5439 ;; Defined at:
  5440 ;;		line 21 in file "common.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;		None
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;		None
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  1    wreg      void 
  5447 ;; Registers used:
  5448 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 3F/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;Total ram usage:        0 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    7
  5461 ;; This function calls:
  5462 ;;		_getDate
  5463 ;;		_getTime
  5464 ;; This function is called by:
  5465 ;;		_INT0_ISR
  5466 ;;		_RTOS_DispatchTask
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text18
  5471  001D86                     __ptext18:
  5472                           	opt stack 0
  5473  001D86                     _GetTime:
  5474                           	opt stack 0
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;common.c: 23: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  5478                           
  5479                           ;incstack = 0
  5480  001D86  D80C               	call	PL62	;call to abstracted procedure
  5481  001D88  EC4A  F00C         	call	_getTime	;wreg free
  5482                           
  5483                           ;common.c: 24: getDate(&TTime.Tdy,&TTime.Tdt,&TTime.Tmt,&TTime.Tyr);
  5484  001D8C  0E65               	movlw	low (_TTime+3)
  5485  001D8E  6E14               	movwf	getDate@p4,c
  5486  001D90  0E66               	movlw	low (_TTime+4)
  5487  001D92  6E15               	movwf	getDate@p3,c
  5488  001D94  0E67               	movlw	low (_TTime+5)
  5489  001D96  6E16               	movwf	getDate@p2,c
  5490  001D98  0E68               	movlw	low (_TTime+6)
  5491  001D9A  6E17               	movwf	getDate@p1,c
  5492  001D9C  EFFD  F00A         	goto	_getDate	;wreg free
  5493  001DA0                     __end_of_GetTime:
  5494                           	opt stack 0
  5495  001DA0                     PL62:
  5496                           	opt stack 22
  5497  001DA0  0E64               	movlw	low (_TTime+2)
  5498  001DA2  6E14               	movwf	getTime@p3,c
  5499  001DA4  0E63               	movlw	low (_TTime+1)
  5500  001DA6  6E15               	movwf	getTime@p2,c
  5501  001DA8  0E62               	movlw	low _TTime
  5502  001DAA  6E16               	movwf	getTime@p1,c
  5503  001DAC  0012               	return	
  5504  001DAE                     __end_ofPL62:
  5505                           	opt stack 0
  5506                           tosu	equ	0xFFF
  5507                           tosh	equ	0xFFE
  5508                           tosl	equ	0xFFD
  5509                           pclath	equ	0xFFA
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           intcon	equ	0xFF2
  5517                           intcon2	equ	0xFF1
  5518                           postinc0	equ	0xFEE
  5519                           wreg	equ	0xFE8
  5520                           indf1	equ	0xFE7
  5521                           plusw1	equ	0xFE3
  5522                           fsr1h	equ	0xFE2
  5523                           fsr1l	equ	0xFE1
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           plusw2	equ	0xFDB
  5528                           fsr2h	equ	0xFDA
  5529                           fsr2l	equ	0xFD9
  5530                           status	equ	0xFD8
  5531                           
  5532 ;; *************** function _set_font_set *****************
  5533 ;; Defined at:
  5534 ;;		line 429 in file "common.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;		None
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;		None
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      void 
  5541 ;; Registers used:
  5542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 3F/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;Total ram usage:        0 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    5
  5555 ;; This function calls:
  5556 ;;		_RTOS_DeleteTask
  5557 ;;		_RTOS_SetTask
  5558 ;;		_Update_Matrix
  5559 ;;		___lbmod
  5560 ;;		_putchar_b_buf
  5561 ;;		_set_font
  5562 ;;		_write_eep
  5563 ;; This function is called by:
  5564 ;;		_time_set_dy
  5565 ;;		_RTOS_DispatchTask
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text19
  5570  000E5C                     __ptext19:
  5571                           	opt stack 0
  5572  000E5C                     _set_font_set:
  5573                           	opt stack 24
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;common.c: 431: switch (events)
  5577                           
  5578                           ;incstack = 0
  5579  000E5C  D033               	goto	l6130
  5580  000E5E                     l6086:
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;common.c: 437: RTOS_DeleteTask(set_font_set);
  5584  000E5E  D87A               	call	PL72	;call to abstracted procedure
  5585  000E60  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5586                           
  5587                           ;common.c: 438: RTOS_SetTask(time_led, 0, 20);
  5588  000E64  D863               	call	PL8	;call to abstracted procedure
  5589  000E66  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5590                           
  5591                           ;common.c: 439: RTOS_DeleteTask(default_state);
  5592  000E6A  D86A               	call	PL38	;call to abstracted procedure
  5593  000E6C  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5594  000E70                     l6092:
  5595                           
  5596                           ;common.c: 440: events = 5;
  5597  000E70  0E05               	movlw	5
  5598  000E72  6E6F               	movwf	_events,c
  5599                           
  5600                           ;common.c: 441: break;
  5601  000E74  D031               	goto	l805
  5602  000E76                     l6094:
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;common.c: 443: RTOS_DeleteTask(set_font_set);
  5606  000E76  D86E               	call	PL72	;call to abstracted procedure
  5607  000E78  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5608                           
  5609                           ;common.c: 444: RTOS_DeleteTask(default_state);
  5610  000E7C  D861               	call	PL38	;call to abstracted procedure
  5611  000E7E  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5612                           
  5613                           ;common.c: 445: RTOS_SetTask(time_led, 0, 20);
  5614  000E82  D854               	call	PL8	;call to abstracted procedure
  5615  000E84  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5616  000E88  D7F3               	goto	l6092
  5617  000E8A                     l6100:
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;common.c: 449: type_font++;
  5621  000E8A  2A61               	incf	_type_font,f,c
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;common.c: 450: if(type_font > 4) type_font = 1;
  5625  000E8C  0E04               	movlw	4
  5626  000E8E  6461               	cpfsgt	_type_font,c
  5627  000E90  D002               	goto	l6106
  5628                           
  5629                           ; BSR set to: 0
  5630  000E92  0E01               	movlw	1
  5631  000E94  6E61               	movwf	_type_font,c
  5632  000E96                     l6106:
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;common.c: 451: RTOS_SetTask(default_state, 2000, 0);
  5636  000E96  EC09  F003         	call	PL2	;call to abstracted procedure
  5637  000E9A  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5638                           
  5639                           ;common.c: 452: events = 5;
  5640                           
  5641                           ;common.c: 453: write_eep(0,type_font);
  5642  000E9E  D855               	call	PL68	;call to abstracted procedure
  5643  000EA0  EC35  F00F         	call	_write_eep
  5644  000EA4                     l6112:
  5645                           
  5646                           ;common.c: 454: set_font();
  5647  000EA4  EC65  F00D         	call	_set_font	;wreg free
  5648                           
  5649                           ;common.c: 455: break;
  5650  000EA8  D017               	goto	l805
  5651  000EAA                     l6114:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;common.c: 457: type_font--;
  5655  000EAA  0661               	decf	_type_font,f,c
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;common.c: 458: if(type_font == 0) type_font = 4;
  5659  000EAC  5061               	movf	_type_font,w,c
  5660  000EAE  E102               	bnz	l6120
  5661                           
  5662                           ; BSR set to: 0
  5663  000EB0  0E04               	movlw	4
  5664  000EB2  6E61               	movwf	_type_font,c
  5665  000EB4                     l6120:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;common.c: 459: RTOS_SetTask(default_state, 2000, 0);
  5669  000EB4  EC09  F003         	call	PL2	;call to abstracted procedure
  5670  000EB8  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5671                           
  5672                           ;common.c: 460: events = 5;
  5673                           
  5674                           ;common.c: 461: write_eep(0,type_font);
  5675  000EBC  D846               	call	PL68	;call to abstracted procedure
  5676  000EBE  EC35  F00F         	call	_write_eep
  5677  000EC2  D7F0               	goto	l6112
  5678  000EC4                     l6130:
  5679                           
  5680                           ; BSR set to: 0
  5681  000EC4  506F               	movf	_events,w,c
  5682                           
  5683                           ; Switch size 1, requested type "space"
  5684                           ; Number of cases is 5, Range of values is 1 to 5
  5685                           ; switch strategies available:
  5686                           ; Name         Instructions Cycles
  5687                           ; simple_byte           16     9 (average)
  5688                           ;	Chosen strategy is simple_byte
  5689  000EC6  0A01               	xorlw	1	; case 1
  5690  000EC8  E0CA               	bz	l6086
  5691  000ECA  0A03               	xorlw	3	; case 2
  5692  000ECC  E0DE               	bz	l6100
  5693  000ECE  0A01               	xorlw	1	; case 3
  5694  000ED0  E0EC               	bz	l6114
  5695  000ED2  0A07               	xorlw	7	; case 4
  5696  000ED4  E0D0               	bz	l6094
  5697  000ED6  0A01               	xorlw	1	; case 5
  5698  000ED8                     l805:
  5699                           
  5700                           ;common.c: 465: if(en_put)
  5701  000ED8  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5702  000EDA  D022               	goto	l6134
  5703                           
  5704                           ;common.c: 466: {
  5705                           ;common.c: 467: putchar_b_buf(0,'Ø', &Font);
  5706  000EDC  0ED8               	movlw	216
  5707  000EDE  EC34  F002         	call	PL4	;call to abstracted procedure
  5708  000EE2  0E00               	movlw	0
  5709  000EE4  ECAF  F00B         	call	_putchar_b_buf
  5710                           
  5711                           ;common.c: 468: putchar_b_buf(6,'ð', &Font);
  5712  000EE8  0EF0               	movlw	240
  5713  000EEA  EC34  F002         	call	PL4	;call to abstracted procedure
  5714  000EEE  0E06               	movlw	6
  5715  000EF0  ECAF  F00B         	call	_putchar_b_buf
  5716                           
  5717                           ;common.c: 469: putchar_b_buf(12,':', &Font);
  5718  000EF4  0E3A               	movlw	58
  5719  000EF6  EC34  F002         	call	PL4	;call to abstracted procedure
  5720  000EFA  0E0C               	movlw	12
  5721  000EFC  ECAF  F00B         	call	_putchar_b_buf
  5722                           
  5723                           ;common.c: 470: putchar_b_buf(18,type_font % 10, pFont);
  5724  000F00  0E0A               	movlw	10
  5725  000F02  6E13               	movwf	___lbmod@divisor,c
  5726  000F04  5061               	movf	_type_font,w,c
  5727  000F06  ECFE  F00E         	call	___lbmod
  5728  000F0A  EC51  F005         	call	PL26	;call to abstracted procedure
  5729  000F0E  0E12               	movlw	18
  5730  000F10  ECAF  F00B         	call	_putchar_b_buf
  5731                           
  5732                           ;common.c: 471: putchar_b_buf(24,0, &Font);
  5733  000F14  6A17               	clrf	putchar_b_buf@symbol,c
  5734  000F16  EC4C  F005         	call	PL6	;call to abstracted procedure
  5735  000F1A  0E18               	movlw	24
  5736  000F1C  ECAF  F00B         	call	_putchar_b_buf
  5737  000F20                     l6134:
  5738                           
  5739                           ;common.c: 472: }
  5740                           ;common.c: 473: Update_Matrix(Dis_Buff);
  5741  000F20  0E89               	movlw	low _Dis_Buff
  5742  000F22  6E11               	movwf	Update_Matrix@buf,c
  5743  000F24  ECC2  F00D         	call	_Update_Matrix	;wreg free
  5744                           
  5745                           ;common.c: 474: en_put=1;
  5746  000F28  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5747  000F2A  0012               	return		;funcret
  5748  000F2C                     __end_of_set_font_set:
  5749                           	opt stack 0
  5750  000F2C                     PL8:
  5751                           	opt stack 22
  5752  000F2C  0E38               	movlw	low _time_led
  5753  000F2E  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5754  000F30  0E12               	movlw	high _time_led
  5755  000F32  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5756  000F34  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  5757  000F36  6A11               	clrf	RTOS_SetTask@taskDelay,c
  5758  000F38  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5759  000F3A  0E14               	movlw	20
  5760  000F3C  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  5761  000F3E  0C14               	retlw	20
  5762  000F40                     __end_ofPL8:
  5763                           	opt stack 0
  5764  000F40                     PL38:
  5765                           	opt stack 22
  5766  000F40  0E80               	movlw	low _default_state
  5767  000F42  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5768  000F44  0E20               	movlw	high _default_state
  5769  000F46  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5770  000F48  0012               	return	
  5771  000F4A                     __end_ofPL38:
  5772                           	opt stack 0
  5773  000F4A                     PL68:
  5774                           	opt stack 24
  5775  000F4A  0E05               	movlw	5
  5776  000F4C  6E6F               	movwf	_events,c
  5777  000F4E  C061  F00F         	movff	_type_font,write_eep@data
  5778  000F52  0C00               	retlw	0
  5779  000F54                     __end_ofPL68:
  5780                           	opt stack 0
  5781  000F54                     PL72:
  5782                           	opt stack 24
  5783  000F54  0E5C               	movlw	low _set_font_set
  5784  000F56  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5785  000F58  0E0E               	movlw	high _set_font_set
  5786  000F5A  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5787  000F5C  0012               	return	
  5788  000F5E                     __end_ofPL72:
  5789                           	opt stack 0
  5790                           tosu	equ	0xFFF
  5791                           tosh	equ	0xFFE
  5792                           tosl	equ	0xFFD
  5793                           pclath	equ	0xFFA
  5794                           tblptru	equ	0xFF8
  5795                           tblptrh	equ	0xFF7
  5796                           tblptrl	equ	0xFF6
  5797                           tablat	equ	0xFF5
  5798                           prodh	equ	0xFF4
  5799                           prodl	equ	0xFF3
  5800                           intcon	equ	0xFF2
  5801                           intcon2	equ	0xFF1
  5802                           postinc0	equ	0xFEE
  5803                           wreg	equ	0xFE8
  5804                           indf1	equ	0xFE7
  5805                           plusw1	equ	0xFE3
  5806                           fsr1h	equ	0xFE2
  5807                           fsr1l	equ	0xFE1
  5808                           indf2	equ	0xFDF
  5809                           postinc2	equ	0xFDE
  5810                           postdec2	equ	0xFDD
  5811                           plusw2	equ	0xFDB
  5812                           fsr2h	equ	0xFDA
  5813                           fsr2l	equ	0xFD9
  5814                           status	equ	0xFD8
  5815                           
  5816 ;; *************** function _time_set_dy *****************
  5817 ;; Defined at:
  5818 ;;		line 350 in file "common.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;		None
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;		None
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  1    wreg      void 
  5825 ;; Registers used:
  5826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5827 ;; Tracked objects:
  5828 ;;		On entry : 3F/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;Total ram usage:        0 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:    7
  5839 ;; This function calls:
  5840 ;;		_RTOS_DeleteTask
  5841 ;;		_RTOS_SetTask
  5842 ;;		_Update_Matrix
  5843 ;;		_putchar_b_buf
  5844 ;;		_setDate
  5845 ;; This function is called by:
  5846 ;;		_time_set_dt
  5847 ;;		_RTOS_DispatchTask
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text20
  5852  00047E                     __ptext20:
  5853                           	opt stack 0
  5854  00047E                     _time_set_dy:
  5855                           	opt stack 22
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;common.c: 352: switch (events)
  5859                           
  5860                           ;incstack = 0
  5861  00047E  D03A               	goto	l6058
  5862  000480                     l6016:
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;common.c: 358: RTOS_DeleteTask(time_set_dy);
  5866  000480  D8D3               	call	PL114	;call to abstracted procedure
  5867  000482  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5868                           
  5869                           ;common.c: 359: RTOS_SetTask(set_font_set, 0, 20);
  5870  000486  0E5C               	movlw	low _set_font_set
  5871  000488  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5872  00048A  0E0E               	movlw	high _set_font_set
  5873  00048C  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5874  00048E  EC1F  F007         	call	PL16	;call to abstracted procedure
  5875  000492  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5876                           
  5877                           ;common.c: 360: RTOS_SetTask(default_state, 2000, 0);
  5878  000496  D8BD               	call	PL2	;call to abstracted procedure
  5879  000498  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5880                           
  5881                           ;common.c: 361: events = 5;
  5882                           
  5883                           ;common.c: 362: en_put=1;
  5884  00049C  EC2A  F007         	call	PL116	;call to abstracted procedure
  5885                           
  5886                           ;common.c: 363: break;
  5887  0004A0  D033               	goto	l783
  5888  0004A2                     l6026:
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;common.c: 365: RTOS_DeleteTask(time_set_dy);
  5892  0004A2  D8C2               	call	PL114	;call to abstracted procedure
  5893  0004A4  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5894                           
  5895                           ;common.c: 366: RTOS_DeleteTask(default_state);
  5896  0004A8  ECA0  F007         	call	PL38	;call to abstracted procedure
  5897  0004AC  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  5898                           
  5899                           ;common.c: 367: RTOS_SetTask(time_led, 0, 20);
  5900  0004B0  EC96  F007         	call	PL8	;call to abstracted procedure
  5901  0004B4  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5902                           
  5903                           ;common.c: 368: events = 5;
  5904  0004B8  0E05               	movlw	5
  5905  0004BA  6E6F               	movwf	_events,c
  5906                           
  5907                           ;common.c: 369: break;
  5908  0004BC  D025               	goto	l783
  5909  0004BE                     l6032:
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;common.c: 371: TSTime.Tdy++;
  5913  0004BE  2A44               	incf	_TSTime+3,f,c
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;common.c: 372: if(TSTime.Tdy > 7) TSTime.Tdy = 1;
  5917  0004C0  0E07               	movlw	7
  5918  0004C2  6444               	cpfsgt	_TSTime+3,c
  5919  0004C4  D002               	goto	l6038
  5920                           
  5921                           ; BSR set to: 0
  5922  0004C6  0E01               	movlw	1
  5923  0004C8  6E44               	movwf	_TSTime+3,c
  5924  0004CA                     l6038:
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;common.c: 373: RTOS_SetTask(default_state, 2000, 0);
  5928  0004CA  D8A3               	call	PL2	;call to abstracted procedure
  5929  0004CC  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5930                           
  5931                           ;common.c: 374: events = 5;
  5932                           
  5933                           ;common.c: 375: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5934  0004D0  EC15  F007         	call	PL14	;call to abstracted procedure
  5935  0004D4  ECE0  F00D         	call	_setDate
  5936                           
  5937                           ;common.c: 376: break;
  5938  0004D8  D017               	goto	l783
  5939  0004DA                     l6044:
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;common.c: 378: TSTime.Tdy--;
  5943  0004DA  0644               	decf	_TSTime+3,f,c
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;common.c: 379: if(TSTime.Tdy == 0) TSTime.Tdy = 7;
  5947  0004DC  5044               	movf	_TSTime+3,w,c
  5948  0004DE  E102               	bnz	l6050
  5949                           
  5950                           ; BSR set to: 0
  5951  0004E0  0E07               	movlw	7
  5952  0004E2  6E44               	movwf	_TSTime+3,c
  5953  0004E4                     l6050:
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;common.c: 380: RTOS_SetTask(default_state, 2000, 0);
  5957  0004E4  D896               	call	PL2	;call to abstracted procedure
  5958  0004E6  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  5959                           
  5960                           ;common.c: 381: events = 5;
  5961                           
  5962                           ;common.c: 382: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5963  0004EA  EC15  F007         	call	PL14	;call to abstracted procedure
  5964  0004EE  ECE0  F00D         	call	_setDate
  5965                           
  5966                           ;common.c: 383: break;
  5967  0004F2  D00A               	goto	l783
  5968  0004F4                     l6058:
  5969                           
  5970                           ; BSR set to: 0
  5971  0004F4  506F               	movf	_events,w,c
  5972                           
  5973                           ; Switch size 1, requested type "space"
  5974                           ; Number of cases is 5, Range of values is 1 to 5
  5975                           ; switch strategies available:
  5976                           ; Name         Instructions Cycles
  5977                           ; simple_byte           16     9 (average)
  5978                           ;	Chosen strategy is simple_byte
  5979  0004F6  0A01               	xorlw	1	; case 1
  5980  0004F8  E0C3               	bz	l6016
  5981  0004FA  0A03               	xorlw	3	; case 2
  5982  0004FC  E0E0               	bz	l6032
  5983  0004FE  0A01               	xorlw	1	; case 3
  5984  000500  E0EC               	bz	l6044
  5985  000502  0A07               	xorlw	7	; case 4
  5986  000504  E0CE               	bz	l6026
  5987  000506  0A01               	xorlw	1	; case 5
  5988  000508                     l783:
  5989                           
  5990                           ;common.c: 385: if(en_put)
  5991  000508  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5992  00050A  D07D               	goto	l6080
  5993                           
  5994                           ;common.c: 386: {
  5995                           ;common.c: 387: putchar_b_buf(0,'Ä', &Font);
  5996  00050C  0EC4               	movlw	196
  5997  00050E  EC34  F002         	call	PL4	;call to abstracted procedure
  5998  000512  0E00               	movlw	0
  5999  000514  ECAF  F00B         	call	_putchar_b_buf
  6000                           
  6001                           ;common.c: 388: putchar_b_buf(6,'í', &Font);
  6002  000518  0EED               	movlw	237
  6003  00051A  EC34  F002         	call	PL4	;call to abstracted procedure
  6004  00051E  0E06               	movlw	6
  6005  000520  ECAF  F00B         	call	_putchar_b_buf
  6006                           
  6007                           ;common.c: 389: putchar_b_buf(12,':', &Font);
  6008  000524  0E3A               	movlw	58
  6009  000526  EC34  F002         	call	PL4	;call to abstracted procedure
  6010  00052A  0E0C               	movlw	12
  6011  00052C  ECAF  F00B         	call	_putchar_b_buf
  6012                           
  6013                           ;common.c: 390: switch(TSTime.Tdy)
  6014  000530  D05B               	goto	l6078
  6015  000532                     l6062:
  6016                           
  6017                           ;common.c: 393: putchar_b_buf(18,'Ï', &Font);
  6018  000532  0ECF               	movlw	207
  6019  000534  EC34  F002         	call	PL4	;call to abstracted procedure
  6020  000538  0E12               	movlw	18
  6021  00053A  ECAF  F00B         	call	_putchar_b_buf
  6022                           
  6023                           ;common.c: 394: putchar_b_buf(24,'í', &Font);
  6024  00053E  0EED               	movlw	237
  6025  000540  EC34  F002         	call	PL4	;call to abstracted procedure
  6026  000544  0E18               	movlw	24
  6027  000546  ECAF  F00B         	call	_putchar_b_buf
  6028                           
  6029                           ;common.c: 395: break;
  6030  00054A  D05D               	goto	l6080
  6031  00054C                     l6064:
  6032                           
  6033                           ;common.c: 397: putchar_b_buf(18,'Â', &Font);
  6034  00054C  0EC2               	movlw	194
  6035  00054E  EC34  F002         	call	PL4	;call to abstracted procedure
  6036  000552  0E12               	movlw	18
  6037  000554  ECAF  F00B         	call	_putchar_b_buf
  6038                           
  6039                           ;common.c: 398: putchar_b_buf(24,'ò', &Font);
  6040  000558  0EF2               	movlw	242
  6041  00055A  EC34  F002         	call	PL4	;call to abstracted procedure
  6042  00055E  0E18               	movlw	24
  6043  000560  ECAF  F00B         	call	_putchar_b_buf
  6044                           
  6045                           ;common.c: 399: break;
  6046  000564  D050               	goto	l6080
  6047  000566                     l6066:
  6048                           
  6049                           ;common.c: 401: putchar_b_buf(18,'Ñ', &Font);
  6050  000566  0ED1               	movlw	209
  6051  000568  EC34  F002         	call	PL4	;call to abstracted procedure
  6052  00056C  0E12               	movlw	18
  6053  00056E  ECAF  F00B         	call	_putchar_b_buf
  6054                           
  6055                           ;common.c: 402: putchar_b_buf(24,'ð', &Font);
  6056  000572  0EF0               	movlw	240
  6057  000574  EC34  F002         	call	PL4	;call to abstracted procedure
  6058  000578  0E18               	movlw	24
  6059  00057A  ECAF  F00B         	call	_putchar_b_buf
  6060                           
  6061                           ;common.c: 403: break;
  6062  00057E  D043               	goto	l6080
  6063  000580                     l6068:
  6064                           
  6065                           ;common.c: 405: putchar_b_buf(18,'×', &Font);
  6066  000580  0ED7               	movlw	215
  6067  000582  EC34  F002         	call	PL4	;call to abstracted procedure
  6068  000586  0E12               	movlw	18
  6069  000588  ECAF  F00B         	call	_putchar_b_buf
  6070                           
  6071                           ;common.c: 406: putchar_b_buf(24,'ò', &Font);
  6072  00058C  0EF2               	movlw	242
  6073  00058E  EC34  F002         	call	PL4	;call to abstracted procedure
  6074  000592  0E18               	movlw	24
  6075  000594  ECAF  F00B         	call	_putchar_b_buf
  6076                           
  6077                           ;common.c: 407: break;
  6078  000598  D036               	goto	l6080
  6079  00059A                     l6070:
  6080                           
  6081                           ;common.c: 409: putchar_b_buf(18,'Ï', &Font);
  6082  00059A  0ECF               	movlw	207
  6083  00059C  EC34  F002         	call	PL4	;call to abstracted procedure
  6084  0005A0  0E12               	movlw	18
  6085  0005A2  ECAF  F00B         	call	_putchar_b_buf
  6086                           
  6087                           ;common.c: 410: putchar_b_buf(24,'ò', &Font);
  6088  0005A6  0EF2               	movlw	242
  6089  0005A8  EC34  F002         	call	PL4	;call to abstracted procedure
  6090  0005AC  0E18               	movlw	24
  6091  0005AE  ECAF  F00B         	call	_putchar_b_buf
  6092                           
  6093                           ;common.c: 411: break;
  6094  0005B2  D029               	goto	l6080
  6095  0005B4                     l6072:
  6096                           
  6097                           ;common.c: 413: putchar_b_buf(18,'Ñ', &Font);
  6098  0005B4  0ED1               	movlw	209
  6099  0005B6  EC34  F002         	call	PL4	;call to abstracted procedure
  6100  0005BA  0E12               	movlw	18
  6101  0005BC  ECAF  F00B         	call	_putchar_b_buf
  6102                           
  6103                           ;common.c: 414: putchar_b_buf(24,'á', &Font);
  6104  0005C0  0EE1               	movlw	225
  6105  0005C2  EC34  F002         	call	PL4	;call to abstracted procedure
  6106  0005C6  0E18               	movlw	24
  6107  0005C8  ECAF  F00B         	call	_putchar_b_buf
  6108                           
  6109                           ;common.c: 415: break;
  6110  0005CC  D01C               	goto	l6080
  6111  0005CE                     l6074:
  6112                           
  6113                           ;common.c: 417: putchar_b_buf(18,'Í', &Font);
  6114  0005CE  0ECD               	movlw	205
  6115  0005D0  EC34  F002         	call	PL4	;call to abstracted procedure
  6116  0005D4  0E12               	movlw	18
  6117  0005D6  ECAF  F00B         	call	_putchar_b_buf
  6118                           
  6119                           ;common.c: 418: putchar_b_buf(24,'ä', &Font);
  6120  0005DA  0EE4               	movlw	228
  6121  0005DC  EC34  F002         	call	PL4	;call to abstracted procedure
  6122  0005E0  0E18               	movlw	24
  6123  0005E2  ECAF  F00B         	call	_putchar_b_buf
  6124                           
  6125                           ;common.c: 419: break;
  6126  0005E6  D00F               	goto	l6080
  6127  0005E8                     l6078:
  6128  0005E8  5044               	movf	_TSTime+3,w,c
  6129                           
  6130                           ; Switch size 1, requested type "space"
  6131                           ; Number of cases is 7, Range of values is 1 to 7
  6132                           ; switch strategies available:
  6133                           ; Name         Instructions Cycles
  6134                           ; simple_byte           22    12 (average)
  6135                           ;	Chosen strategy is simple_byte
  6136  0005EA  0A01               	xorlw	1	; case 1
  6137  0005EC  E0F0               	bz	l6074
  6138  0005EE  0A03               	xorlw	3	; case 2
  6139  0005F0  E0A0               	bz	l6062
  6140  0005F2  0A01               	xorlw	1	; case 3
  6141  0005F4  E0AB               	bz	l6064
  6142  0005F6  0A07               	xorlw	7	; case 4
  6143  0005F8  E0B6               	bz	l6066
  6144  0005FA  0A01               	xorlw	1	; case 5
  6145  0005FC  E0C1               	bz	l6068
  6146  0005FE  0A03               	xorlw	3	; case 6
  6147  000600  E0CC               	bz	l6070
  6148  000602  0A01               	xorlw	1	; case 7
  6149  000604  E0D7               	bz	l6072
  6150  000606                     l6080:
  6151                           
  6152                           ;common.c: 421: }
  6153                           ;common.c: 422: Update_Matrix(Dis_Buff);
  6154  000606  0E89               	movlw	low _Dis_Buff
  6155  000608  6E11               	movwf	Update_Matrix@buf,c
  6156  00060A  ECC2  F00D         	call	_Update_Matrix	;wreg free
  6157                           
  6158                           ;common.c: 423: en_put=1;
  6159  00060E  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6160  000610  0012               	return		;funcret
  6161  000612                     __end_of_time_set_dy:
  6162                           	opt stack 0
  6163  000612                     PL2:
  6164                           	opt stack 22
  6165  000612  0E80               	movlw	low _default_state
  6166  000614  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6167  000616  0E20               	movlw	high _default_state
  6168  000618  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6169  00061A  0E07               	movlw	7
  6170  00061C  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  6171  00061E  0ED0               	movlw	208
  6172  000620  6E11               	movwf	RTOS_SetTask@taskDelay,c
  6173  000622  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  6174  000624  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  6175  000626  0CD0               	retlw	208
  6176  000628                     __end_ofPL2:
  6177                           	opt stack 0
  6178  000628                     PL114:
  6179                           	opt stack 22
  6180  000628  0E7E               	movlw	low _time_set_dy
  6181  00062A  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6182  00062C  0E04               	movlw	high _time_set_dy
  6183  00062E  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6184  000630  0012               	return	
  6185  000632                     __end_ofPL114:
  6186                           	opt stack 0
  6187                           tosu	equ	0xFFF
  6188                           tosh	equ	0xFFE
  6189                           tosl	equ	0xFFD
  6190                           pclath	equ	0xFFA
  6191                           tblptru	equ	0xFF8
  6192                           tblptrh	equ	0xFF7
  6193                           tblptrl	equ	0xFF6
  6194                           tablat	equ	0xFF5
  6195                           prodh	equ	0xFF4
  6196                           prodl	equ	0xFF3
  6197                           intcon	equ	0xFF2
  6198                           intcon2	equ	0xFF1
  6199                           postinc0	equ	0xFEE
  6200                           wreg	equ	0xFE8
  6201                           indf1	equ	0xFE7
  6202                           plusw1	equ	0xFE3
  6203                           fsr1h	equ	0xFE2
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           plusw2	equ	0xFDB
  6209                           fsr2h	equ	0xFDA
  6210                           fsr2l	equ	0xFD9
  6211                           status	equ	0xFD8
  6212                           
  6213 ;; *************** function _time_set_dt *****************
  6214 ;; Defined at:
  6215 ;;		line 299 in file "common.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;		None
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      void 
  6222 ;; Registers used:
  6223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6224 ;; Tracked objects:
  6225 ;;		On entry : 3F/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;Total ram usage:        0 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    7
  6236 ;; This function calls:
  6237 ;;		_RTOS_DeleteTask
  6238 ;;		_RTOS_SetTask
  6239 ;;		_Update_Matrix
  6240 ;;		___lbdiv
  6241 ;;		___lbmod
  6242 ;;		_putchar_b_buf
  6243 ;;		_setDate
  6244 ;; This function is called by:
  6245 ;;		_time_set_mt
  6246 ;;		_RTOS_DispatchTask
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           	psect	text21
  6251  000D40                     __ptext21:
  6252                           	opt stack 0
  6253  000D40                     _time_set_dt:
  6254                           	opt stack 22
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;common.c: 301: switch (events)
  6258                           
  6259                           ;incstack = 0
  6260  000D40  D039               	goto	l6006
  6261  000D42                     l5964:
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;common.c: 307: RTOS_DeleteTask(time_set_dt);
  6265  000D42  D883               	call	PL112	;call to abstracted procedure
  6266  000D44  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  6267                           
  6268                           ;common.c: 308: RTOS_SetTask(time_set_dy, 0, 20);
  6269  000D48  0E7E               	movlw	low _time_set_dy
  6270  000D4A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6271  000D4C  0E04               	movlw	high _time_set_dy
  6272  000D4E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6273  000D50  D876               	call	PL16	;call to abstracted procedure
  6274  000D52  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6275                           
  6276                           ;common.c: 309: RTOS_SetTask(default_state, 2000, 0);
  6277  000D56  EC09  F003         	call	PL2	;call to abstracted procedure
  6278  000D5A  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6279                           
  6280                           ;common.c: 310: events = 5;
  6281                           
  6282                           ;common.c: 311: en_put=1;
  6283  000D5E  D87A               	call	PL116	;call to abstracted procedure
  6284                           
  6285                           ;common.c: 312: break;
  6286  000D60  D033               	goto	l770
  6287  000D62                     l5974:
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;common.c: 314: RTOS_DeleteTask(time_set_dt);
  6291  000D62  D873               	call	PL112	;call to abstracted procedure
  6292  000D64  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  6293                           
  6294                           ;common.c: 315: RTOS_DeleteTask(default_state);
  6295  000D68  ECA0  F007         	call	PL38	;call to abstracted procedure
  6296  000D6C  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  6297                           
  6298                           ;common.c: 316: RTOS_SetTask(time_led, 0, 20);
  6299  000D70  EC96  F007         	call	PL8	;call to abstracted procedure
  6300  000D74  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6301                           
  6302                           ;common.c: 317: events = 5;
  6303  000D78  0E05               	movlw	5
  6304  000D7A  6E6F               	movwf	_events,c
  6305                           
  6306                           ;common.c: 318: break;
  6307  000D7C  D025               	goto	l770
  6308  000D7E                     l5980:
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;common.c: 320: TSTime.Tdt++;
  6312  000D7E  2A45               	incf	_TSTime+4,f,c
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;common.c: 321: if(TSTime.Tdt > 31) TSTime.Tdt = 1;
  6316  000D80  0E1F               	movlw	31
  6317  000D82  6445               	cpfsgt	_TSTime+4,c
  6318  000D84  D002               	goto	l5986
  6319                           
  6320                           ; BSR set to: 0
  6321  000D86  0E01               	movlw	1
  6322  000D88  6E45               	movwf	_TSTime+4,c
  6323  000D8A                     l5986:
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;common.c: 322: RTOS_SetTask(default_state, 2000, 0);
  6327  000D8A  EC09  F003         	call	PL2	;call to abstracted procedure
  6328  000D8E  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6329                           
  6330                           ;common.c: 323: events = 5;
  6331                           
  6332                           ;common.c: 324: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6333  000D92  D84B               	call	PL14	;call to abstracted procedure
  6334  000D94  ECE0  F00D         	call	_setDate
  6335                           
  6336                           ;common.c: 325: break;
  6337  000D98  D017               	goto	l770
  6338  000D9A                     l5992:
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;common.c: 327: TSTime.Tdt--;
  6342  000D9A  0645               	decf	_TSTime+4,f,c
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;common.c: 328: if(TSTime.Tdt == 0) TSTime.Tdt = 31;
  6346  000D9C  5045               	movf	_TSTime+4,w,c
  6347  000D9E  E102               	bnz	l5998
  6348                           
  6349                           ; BSR set to: 0
  6350  000DA0  0E1F               	movlw	31
  6351  000DA2  6E45               	movwf	_TSTime+4,c
  6352  000DA4                     l5998:
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;common.c: 329: RTOS_SetTask(default_state, 2000, 0);
  6356  000DA4  EC09  F003         	call	PL2	;call to abstracted procedure
  6357  000DA8  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6358                           
  6359                           ;common.c: 330: events = 5;
  6360                           
  6361                           ;common.c: 331: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6362  000DAC  D83E               	call	PL14	;call to abstracted procedure
  6363  000DAE  ECE0  F00D         	call	_setDate
  6364                           
  6365                           ;common.c: 332: break;
  6366  000DB2  D00A               	goto	l770
  6367  000DB4                     l6006:
  6368                           
  6369                           ; BSR set to: 0
  6370  000DB4  506F               	movf	_events,w,c
  6371                           
  6372                           ; Switch size 1, requested type "space"
  6373                           ; Number of cases is 5, Range of values is 1 to 5
  6374                           ; switch strategies available:
  6375                           ; Name         Instructions Cycles
  6376                           ; simple_byte           16     9 (average)
  6377                           ;	Chosen strategy is simple_byte
  6378  000DB6  0A01               	xorlw	1	; case 1
  6379  000DB8  E0C4               	bz	l5964
  6380  000DBA  0A03               	xorlw	3	; case 2
  6381  000DBC  E0E0               	bz	l5980
  6382  000DBE  0A01               	xorlw	1	; case 3
  6383  000DC0  E0EC               	bz	l5992
  6384  000DC2  0A07               	xorlw	7	; case 4
  6385  000DC4  E0CE               	bz	l5974
  6386  000DC6  0A01               	xorlw	1	; case 5
  6387  000DC8                     l770:
  6388                           
  6389                           ;common.c: 334: if(en_put)
  6390  000DC8  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6391  000DCA  D029               	goto	l6010
  6392                           
  6393                           ;common.c: 335: {
  6394                           ;common.c: 336: putchar_b_buf(0,'×', &Font);
  6395  000DCC  0ED7               	movlw	215
  6396  000DCE  EC34  F002         	call	PL4	;call to abstracted procedure
  6397  000DD2  0E00               	movlw	0
  6398  000DD4  ECAF  F00B         	call	_putchar_b_buf
  6399                           
  6400                           ;common.c: 337: putchar_b_buf(6,'ñ', &Font);
  6401  000DD8  0EF1               	movlw	241
  6402  000DDA  EC34  F002         	call	PL4	;call to abstracted procedure
  6403  000DDE  0E06               	movlw	6
  6404  000DE0  ECAF  F00B         	call	_putchar_b_buf
  6405                           
  6406                           ;common.c: 338: putchar_b_buf(12,':', &Font);
  6407  000DE4  0E3A               	movlw	58
  6408  000DE6  EC34  F002         	call	PL4	;call to abstracted procedure
  6409  000DEA  0E0C               	movlw	12
  6410  000DEC  ECAF  F00B         	call	_putchar_b_buf
  6411                           
  6412                           ;common.c: 339: putchar_b_buf(18,(TSTime.Tdt/10) % 10, pFont);
  6413  000DF0  0E0A               	movlw	10
  6414  000DF2  6E13               	movwf	___lbmod@divisor,c
  6415  000DF4  6E0F               	movwf	___lbdiv@divisor,c
  6416  000DF6  5045               	movf	_TSTime+4,w,c
  6417  000DF8  EC50  F00E         	call	___lbdiv
  6418  000DFC  ECFE  F00E         	call	___lbmod
  6419  000E00  EC51  F005         	call	PL26	;call to abstracted procedure
  6420  000E04  0E12               	movlw	18
  6421  000E06  ECAF  F00B         	call	_putchar_b_buf
  6422                           
  6423                           ;common.c: 340: putchar_b_buf(24,TSTime.Tdt % 10 , pFont);
  6424  000E0A  0E0A               	movlw	10
  6425  000E0C  6E13               	movwf	___lbmod@divisor,c
  6426  000E0E  5045               	movf	_TSTime+4,w,c
  6427  000E10  ECFE  F00E         	call	___lbmod
  6428  000E14  EC51  F005         	call	PL26	;call to abstracted procedure
  6429  000E18  0E18               	movlw	24
  6430  000E1A  ECAF  F00B         	call	_putchar_b_buf
  6431  000E1E                     l6010:
  6432                           
  6433                           ;common.c: 341: }
  6434                           ;common.c: 342: Update_Matrix(Dis_Buff);
  6435  000E1E  0E89               	movlw	low _Dis_Buff
  6436  000E20  6E11               	movwf	Update_Matrix@buf,c
  6437  000E22  ECC2  F00D         	call	_Update_Matrix	;wreg free
  6438                           
  6439                           ;common.c: 343: en_put=1;
  6440  000E26  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6441  000E28  0012               	return		;funcret
  6442  000E2A                     __end_of_time_set_dt:
  6443                           	opt stack 0
  6444  000E2A                     PL14:
  6445                           	opt stack 22
  6446  000E2A  0E05               	movlw	5
  6447  000E2C  6E6F               	movwf	_events,c
  6448  000E2E  C045  F01C         	movff	_TSTime+4,setDate@dateSet
  6449  000E32  C046  F01D         	movff	_TSTime+5,setDate@monthSet
  6450  000E36  C047  F01E         	movff	_TSTime+6,setDate@yearSet
  6451  000E3A  5044               	movf	_TSTime+3,w,c
  6452  000E3C  0012               	return	
  6453  000E3E                     __end_ofPL14:
  6454                           	opt stack 0
  6455  000E3E                     PL16:
  6456                           	opt stack 22
  6457  000E3E  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  6458  000E40  6A11               	clrf	RTOS_SetTask@taskDelay,c
  6459  000E42  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  6460  000E44  0E14               	movlw	20
  6461  000E46  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  6462  000E48  0C14               	retlw	20
  6463  000E4A                     __end_ofPL16:
  6464                           	opt stack 0
  6465  000E4A                     PL112:
  6466                           	opt stack 22
  6467  000E4A  0E40               	movlw	low _time_set_dt
  6468  000E4C  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6469  000E4E  0E0D               	movlw	high _time_set_dt
  6470  000E50  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6471  000E52  0012               	return	
  6472  000E54                     __end_ofPL112:
  6473                           	opt stack 0
  6474  000E54                     PL116:
  6475                           	opt stack 22
  6476  000E54  0E05               	movlw	5
  6477  000E56  6E6F               	movwf	_events,c
  6478  000E58  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6479  000E5A  0C05               	retlw	5
  6480  000E5C                     __end_ofPL116:
  6481                           	opt stack 0
  6482                           tosu	equ	0xFFF
  6483                           tosh	equ	0xFFE
  6484                           tosl	equ	0xFFD
  6485                           pclath	equ	0xFFA
  6486                           tblptru	equ	0xFF8
  6487                           tblptrh	equ	0xFF7
  6488                           tblptrl	equ	0xFF6
  6489                           tablat	equ	0xFF5
  6490                           prodh	equ	0xFF4
  6491                           prodl	equ	0xFF3
  6492                           intcon	equ	0xFF2
  6493                           intcon2	equ	0xFF1
  6494                           postinc0	equ	0xFEE
  6495                           wreg	equ	0xFE8
  6496                           indf1	equ	0xFE7
  6497                           plusw1	equ	0xFE3
  6498                           fsr1h	equ	0xFE2
  6499                           fsr1l	equ	0xFE1
  6500                           indf2	equ	0xFDF
  6501                           postinc2	equ	0xFDE
  6502                           postdec2	equ	0xFDD
  6503                           plusw2	equ	0xFDB
  6504                           fsr2h	equ	0xFDA
  6505                           fsr2l	equ	0xFD9
  6506                           status	equ	0xFD8
  6507                           
  6508 ;; *************** function _time_set_mt *****************
  6509 ;; Defined at:
  6510 ;;		line 199 in file "common.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;		None
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;		None
  6515 ;; Return value:  Size  Location     Type
  6516 ;;                  1    wreg      void 
  6517 ;; Registers used:
  6518 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6519 ;; Tracked objects:
  6520 ;;		On entry : 3F/0
  6521 ;;		On exit  : 0/0
  6522 ;;		Unchanged: 0/0
  6523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;Total ram usage:        0 bytes
  6529 ;; Hardware stack levels used:    1
  6530 ;; Hardware stack levels required when called:    7
  6531 ;; This function calls:
  6532 ;;		_RTOS_DeleteTask
  6533 ;;		_RTOS_SetTask
  6534 ;;		_Update_Matrix
  6535 ;;		_putchar_b_buf
  6536 ;;		_setDate
  6537 ;; This function is called by:
  6538 ;;		_time_set_yr
  6539 ;;		_RTOS_DispatchTask
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text22
  6544  00026C                     __ptext22:
  6545                           	opt stack 0
  6546  00026C                     _time_set_mt:
  6547                           	opt stack 22
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;common.c: 201: switch (events)
  6551                           
  6552                           ;incstack = 0
  6553  00026C  D03D               	goto	l5926
  6554  00026E                     l5884:
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;common.c: 207: RTOS_DeleteTask(time_set_mt);
  6558  00026E  D902               	call	PL110	;call to abstracted procedure
  6559  000270  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  6560                           
  6561                           ;common.c: 208: RTOS_SetTask(time_set_dt, 0, 20);
  6562  000274  0E40               	movlw	low _time_set_dt
  6563  000276  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6564  000278  0E0D               	movlw	high _time_set_dt
  6565  00027A  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6566  00027C  EC1F  F007         	call	PL16	;call to abstracted procedure
  6567  000280  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6568                           
  6569                           ;common.c: 209: RTOS_SetTask(default_state, 2000, 0);
  6570  000284  EC09  F003         	call	PL2	;call to abstracted procedure
  6571  000288  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6572                           
  6573                           ;common.c: 210: events = 5;
  6574                           
  6575                           ;common.c: 211: en_put=1;
  6576  00028C  EC2A  F007         	call	PL116	;call to abstracted procedure
  6577                           
  6578                           ;common.c: 212: break;
  6579  000290  D035               	goto	l743
  6580  000292                     l5894:
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;common.c: 214: RTOS_DeleteTask(time_set_mt);
  6584  000292  D8F0               	call	PL110	;call to abstracted procedure
  6585  000294  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  6586                           
  6587                           ;common.c: 215: RTOS_DeleteTask(default_state);
  6588  000298  ECA0  F007         	call	PL38	;call to abstracted procedure
  6589  00029C  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  6590                           
  6591                           ;common.c: 216: RTOS_SetTask(time_led, 0, 20);
  6592  0002A0  EC96  F007         	call	PL8	;call to abstracted procedure
  6593  0002A4  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6594                           
  6595                           ;common.c: 217: events = 5;
  6596  0002A8  0E05               	movlw	5
  6597  0002AA  6E6F               	movwf	_events,c
  6598                           
  6599                           ;common.c: 218: break;
  6600  0002AC  D027               	goto	l743
  6601  0002AE                     l5900:
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;common.c: 220: TSTime.Tmt++;
  6605  0002AE  2A46               	incf	_TSTime+5,f,c
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;common.c: 221: if(TSTime.Tmt > 12) TSTime.Tmt = 1;
  6609  0002B0  0E0C               	movlw	12
  6610  0002B2  6446               	cpfsgt	_TSTime+5,c
  6611  0002B4  D002               	goto	l5906
  6612                           
  6613                           ; BSR set to: 0
  6614  0002B6  0E01               	movlw	1
  6615  0002B8  6E46               	movwf	_TSTime+5,c
  6616  0002BA                     l5906:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;common.c: 222: RTOS_SetTask(default_state, 2000, 0);
  6620  0002BA  EC09  F003         	call	PL2	;call to abstracted procedure
  6621  0002BE  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6622                           
  6623                           ;common.c: 223: events = 5;
  6624                           
  6625                           ;common.c: 224: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6626  0002C2  EC15  F007         	call	PL14	;call to abstracted procedure
  6627  0002C6  ECE0  F00D         	call	_setDate
  6628                           
  6629                           ;common.c: 225: break;
  6630  0002CA  D018               	goto	l743
  6631  0002CC                     l5912:
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;common.c: 227: TSTime.Tmt--;
  6635  0002CC  0646               	decf	_TSTime+5,f,c
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;common.c: 228: if(TSTime.Tmt == 0) TSTime.Tmt = 12;
  6639  0002CE  5046               	movf	_TSTime+5,w,c
  6640  0002D0  E102               	bnz	l5918
  6641                           
  6642                           ; BSR set to: 0
  6643  0002D2  0E0C               	movlw	12
  6644  0002D4  6E46               	movwf	_TSTime+5,c
  6645  0002D6                     l5918:
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;common.c: 229: RTOS_SetTask(default_state, 2000, 0);
  6649  0002D6  EC09  F003         	call	PL2	;call to abstracted procedure
  6650  0002DA  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  6651                           
  6652                           ;common.c: 230: events = 5;
  6653                           
  6654                           ;common.c: 231: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6655  0002DE  EC15  F007         	call	PL14	;call to abstracted procedure
  6656  0002E2  ECE0  F00D         	call	_setDate
  6657                           
  6658                           ;common.c: 232: break;
  6659  0002E6  D00A               	goto	l743
  6660  0002E8                     l5926:
  6661                           
  6662                           ; BSR set to: 0
  6663  0002E8  506F               	movf	_events,w,c
  6664                           
  6665                           ; Switch size 1, requested type "space"
  6666                           ; Number of cases is 5, Range of values is 1 to 5
  6667                           ; switch strategies available:
  6668                           ; Name         Instructions Cycles
  6669                           ; simple_byte           16     9 (average)
  6670                           ;	Chosen strategy is simple_byte
  6671  0002EA  0A01               	xorlw	1	; case 1
  6672  0002EC  E0C0               	bz	l5884
  6673  0002EE  0A03               	xorlw	3	; case 2
  6674  0002F0  E0DE               	bz	l5900
  6675  0002F2  0A01               	xorlw	1	; case 3
  6676  0002F4  E0EB               	bz	l5912
  6677  0002F6  0A07               	xorlw	7	; case 4
  6678  0002F8  E0CC               	bz	l5894
  6679  0002FA  0A01               	xorlw	1	; case 5
  6680  0002FC                     l743:
  6681                           
  6682                           ;common.c: 234: if(en_put)
  6683  0002FC  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6684  0002FE  D0AE               	goto	l5958
  6685                           
  6686                           ;common.c: 235: {
  6687                           ;common.c: 236: putchar_b_buf(0,'Ì', &Font);
  6688  000300  0ECC               	movlw	204
  6689  000302  D8B2               	call	PL4	;call to abstracted procedure
  6690  000304  0E00               	movlw	0
  6691  000306  ECAF  F00B         	call	_putchar_b_buf
  6692                           
  6693                           ;common.c: 237: putchar_b_buf(6,'ñ', &Font);
  6694  00030A  0EF1               	movlw	241
  6695  00030C  D8AD               	call	PL4	;call to abstracted procedure
  6696  00030E  0E06               	movlw	6
  6697  000310  ECAF  F00B         	call	_putchar_b_buf
  6698                           
  6699                           ;common.c: 238: putchar_b_buf(12,':', &Font);
  6700  000314  0E3A               	movlw	58
  6701  000316  D8A8               	call	PL4	;call to abstracted procedure
  6702  000318  0E0C               	movlw	12
  6703  00031A  ECAF  F00B         	call	_putchar_b_buf
  6704                           
  6705                           ;common.c: 239: switch(TSTime.Tmt)
  6706  00031E  D084               	goto	l5956
  6707  000320                     l5930:
  6708                           
  6709                           ;common.c: 242: putchar_b_buf(18,'Ñ', &Font);
  6710  000320  0ED1               	movlw	209
  6711  000322  D8A2               	call	PL4	;call to abstracted procedure
  6712  000324  0E12               	movlw	18
  6713  000326  ECAF  F00B         	call	_putchar_b_buf
  6714                           
  6715                           ;common.c: 243: putchar_b_buf(24,'÷', &Font);
  6716  00032A  0EF7               	movlw	247
  6717  00032C  D89D               	call	PL4	;call to abstracted procedure
  6718  00032E  0E18               	movlw	24
  6719  000330  ECAF  F00B         	call	_putchar_b_buf
  6720                           
  6721                           ;common.c: 244: break;
  6722  000334  D093               	goto	l5958
  6723  000336                     l5932:
  6724                           
  6725                           ;common.c: 246: putchar_b_buf(18,'Ë', &Font);
  6726  000336  0ECB               	movlw	203
  6727  000338  D897               	call	PL4	;call to abstracted procedure
  6728  00033A  0E12               	movlw	18
  6729  00033C  ECAF  F00B         	call	_putchar_b_buf
  6730                           
  6731                           ;common.c: 247: putchar_b_buf(24,'ò', &Font);
  6732  000340  0EF2               	movlw	242
  6733  000342  D892               	call	PL4	;call to abstracted procedure
  6734  000344  0E18               	movlw	24
  6735  000346  ECAF  F00B         	call	_putchar_b_buf
  6736                           
  6737                           ;common.c: 248: break;
  6738  00034A  D088               	goto	l5958
  6739  00034C                     l5934:
  6740                           
  6741                           ;common.c: 250: putchar_b_buf(18,'Á', &Font);
  6742  00034C  0EC1               	movlw	193
  6743  00034E  D88C               	call	PL4	;call to abstracted procedure
  6744  000350  0E12               	movlw	18
  6745  000352  ECAF  F00B         	call	_putchar_b_buf
  6746                           
  6747                           ;common.c: 251: putchar_b_buf(24,'ð', &Font);
  6748  000356  0EF0               	movlw	240
  6749  000358  D887               	call	PL4	;call to abstracted procedure
  6750  00035A  0E18               	movlw	24
  6751  00035C  ECAF  F00B         	call	_putchar_b_buf
  6752                           
  6753                           ;common.c: 252: break;
  6754  000360  D07D               	goto	l5958
  6755  000362                     l5936:
  6756                           
  6757                           ;common.c: 254: putchar_b_buf(18,'Ê', &Font);
  6758  000362  0ECA               	movlw	202
  6759  000364  D881               	call	PL4	;call to abstracted procedure
  6760  000366  0E12               	movlw	18
  6761  000368  ECAF  F00B         	call	_putchar_b_buf
  6762                           
  6763                           ;common.c: 255: putchar_b_buf(24,'â', &Font);
  6764  00036C  0EE2               	movlw	226
  6765  00036E  D87C               	call	PL4	;call to abstracted procedure
  6766  000370  0E18               	movlw	24
  6767  000372  ECAF  F00B         	call	_putchar_b_buf
  6768                           
  6769                           ;common.c: 256: break;
  6770  000376  D072               	goto	l5958
  6771  000378                     l5938:
  6772                           
  6773                           ;common.c: 258: putchar_b_buf(18,'Ò', &Font);
  6774  000378  0ED2               	movlw	210
  6775  00037A  D876               	call	PL4	;call to abstracted procedure
  6776  00037C  0E12               	movlw	18
  6777  00037E  ECAF  F00B         	call	_putchar_b_buf
  6778                           
  6779                           ;common.c: 259: putchar_b_buf(24,'ð', &Font);
  6780  000382  0EF0               	movlw	240
  6781  000384  D871               	call	PL4	;call to abstracted procedure
  6782  000386  0E18               	movlw	24
  6783  000388  ECAF  F00B         	call	_putchar_b_buf
  6784                           
  6785                           ;common.c: 260: break;
  6786  00038C  D067               	goto	l5958
  6787  00038E                     l5940:
  6788                           
  6789                           ;common.c: 262: putchar_b_buf(18,'×', &Font);
  6790  00038E  0ED7               	movlw	215
  6791  000390  D86B               	call	PL4	;call to abstracted procedure
  6792  000392  0E12               	movlw	18
  6793  000394  ECAF  F00B         	call	_putchar_b_buf
  6794                           
  6795                           ;common.c: 263: putchar_b_buf(24,'ð', &Font);
  6796  000398  0EF0               	movlw	240
  6797  00039A  D866               	call	PL4	;call to abstracted procedure
  6798  00039C  0E18               	movlw	24
  6799  00039E  ECAF  F00B         	call	_putchar_b_buf
  6800                           
  6801                           ;common.c: 264: break;
  6802  0003A2  D05C               	goto	l5958
  6803  0003A4                     l5942:
  6804                           
  6805                           ;common.c: 266: putchar_b_buf(18,'Ë', &Font);
  6806  0003A4  0ECB               	movlw	203
  6807  0003A6  D860               	call	PL4	;call to abstracted procedure
  6808  0003A8  0E12               	movlw	18
  6809  0003AA  ECAF  F00B         	call	_putchar_b_buf
  6810                           
  6811                           ;common.c: 267: putchar_b_buf(24,'ï', &Font);
  6812  0003AE  0EEF               	movlw	239
  6813  0003B0  D85B               	call	PL4	;call to abstracted procedure
  6814  0003B2  0E18               	movlw	24
  6815  0003B4  ECAF  F00B         	call	_putchar_b_buf
  6816                           
  6817                           ;common.c: 268: break;
  6818  0003B8  D051               	goto	l5958
  6819  0003BA                     l5944:
  6820                           
  6821                           ;common.c: 270: putchar_b_buf(18,'Ñ', &Font);
  6822  0003BA  0ED1               	movlw	209
  6823  0003BC  D855               	call	PL4	;call to abstracted procedure
  6824  0003BE  0E12               	movlw	18
  6825  0003C0  ECAF  F00B         	call	_putchar_b_buf
  6826                           
  6827                           ;common.c: 271: putchar_b_buf(24,'ï', &Font);
  6828  0003C4  0EEF               	movlw	239
  6829  0003C6  D850               	call	PL4	;call to abstracted procedure
  6830  0003C8  0E18               	movlw	24
  6831  0003CA  ECAF  F00B         	call	_putchar_b_buf
  6832                           
  6833                           ;common.c: 272: break;
  6834  0003CE  D046               	goto	l5958
  6835  0003D0                     l5946:
  6836                           
  6837                           ;common.c: 274: putchar_b_buf(18,'Â', &Font);
  6838  0003D0  0EC2               	movlw	194
  6839  0003D2  D84A               	call	PL4	;call to abstracted procedure
  6840  0003D4  0E12               	movlw	18
  6841  0003D6  ECAF  F00B         	call	_putchar_b_buf
  6842                           
  6843                           ;common.c: 275: putchar_b_buf(24,'ð', &Font);
  6844  0003DA  0EF0               	movlw	240
  6845  0003DC  D845               	call	PL4	;call to abstracted procedure
  6846  0003DE  0E18               	movlw	24
  6847  0003E0  ECAF  F00B         	call	_putchar_b_buf
  6848                           
  6849                           ;common.c: 276: break;
  6850  0003E4  D03B               	goto	l5958
  6851  0003E6                     l5948:
  6852                           
  6853                           ;common.c: 278: putchar_b_buf(18,'Æ', &Font);
  6854  0003E6  0EC6               	movlw	198
  6855  0003E8  D83F               	call	PL4	;call to abstracted procedure
  6856  0003EA  0E12               	movlw	18
  6857  0003EC  ECAF  F00B         	call	_putchar_b_buf
  6858                           
  6859                           ;common.c: 279: putchar_b_buf(24,'ò', &Font);
  6860  0003F0  0EF2               	movlw	242
  6861  0003F2  D83A               	call	PL4	;call to abstracted procedure
  6862  0003F4  0E18               	movlw	24
  6863  0003F6  ECAF  F00B         	call	_putchar_b_buf
  6864                           
  6865                           ;common.c: 280: break;
  6866  0003FA  D030               	goto	l5958
  6867  0003FC                     l5950:
  6868                           
  6869                           ;common.c: 282: putchar_b_buf(18,'Ë', &Font);
  6870  0003FC  0ECB               	movlw	203
  6871  0003FE  D834               	call	PL4	;call to abstracted procedure
  6872  000400  0E12               	movlw	18
  6873  000402  ECAF  F00B         	call	_putchar_b_buf
  6874                           
  6875                           ;common.c: 283: putchar_b_buf(24,'ñ', &Font);
  6876  000406  0EF1               	movlw	241
  6877  000408  D82F               	call	PL4	;call to abstracted procedure
  6878  00040A  0E18               	movlw	24
  6879  00040C  ECAF  F00B         	call	_putchar_b_buf
  6880                           
  6881                           ;common.c: 284: break;
  6882  000410  D025               	goto	l5958
  6883  000412                     l5952:
  6884                           
  6885                           ;common.c: 286: putchar_b_buf(18,'Ã', &Font);
  6886  000412  0EC3               	movlw	195
  6887  000414  D829               	call	PL4	;call to abstracted procedure
  6888  000416  0E12               	movlw	18
  6889  000418  ECAF  F00B         	call	_putchar_b_buf
  6890                           
  6891                           ;common.c: 287: putchar_b_buf(24,'ð', &Font);
  6892  00041C  0EF0               	movlw	240
  6893  00041E  D824               	call	PL4	;call to abstracted procedure
  6894  000420  0E18               	movlw	24
  6895  000422  ECAF  F00B         	call	_putchar_b_buf
  6896                           
  6897                           ;common.c: 288: break;
  6898  000426  D01A               	goto	l5958
  6899  000428                     l5956:
  6900  000428  5046               	movf	_TSTime+5,w,c
  6901                           
  6902                           ; Switch size 1, requested type "space"
  6903                           ; Number of cases is 12, Range of values is 1 to 12
  6904                           ; switch strategies available:
  6905                           ; Name         Instructions Cycles
  6906                           ; simple_byte           37    19 (average)
  6907                           ;	Chosen strategy is simple_byte
  6908  00042A  0A01               	xorlw	1	; case 1
  6909  00042C  E101 D778          	bz	l5930
  6910  000430  0A03               	xorlw	3	; case 2
  6911  000432  E081               	bz	l5932
  6912  000434  0A01               	xorlw	1	; case 3
  6913  000436  E08A               	bz	l5934
  6914  000438  0A07               	xorlw	7	; case 4
  6915  00043A  E093               	bz	l5936
  6916  00043C  0A01               	xorlw	1	; case 5
  6917  00043E  E09C               	bz	l5938
  6918  000440  0A03               	xorlw	3	; case 6
  6919  000442  E0A5               	bz	l5940
  6920  000444  0A01               	xorlw	1	; case 7
  6921  000446  E0AE               	bz	l5942
  6922  000448  0A0F               	xorlw	15	; case 8
  6923  00044A  E0B7               	bz	l5944
  6924  00044C  0A01               	xorlw	1	; case 9
  6925  00044E  E0C0               	bz	l5946
  6926  000450  0A03               	xorlw	3	; case 10
  6927  000452  E0C9               	bz	l5948
  6928  000454  0A01               	xorlw	1	; case 11
  6929  000456  E0D2               	bz	l5950
  6930  000458  0A07               	xorlw	7	; case 12
  6931  00045A  E0DB               	bz	l5952
  6932  00045C                     l5958:
  6933                           
  6934                           ;common.c: 291: }
  6935                           ;common.c: 292: Update_Matrix(Dis_Buff);
  6936  00045C  0E89               	movlw	low _Dis_Buff
  6937  00045E  6E11               	movwf	Update_Matrix@buf,c
  6938  000460  ECC2  F00D         	call	_Update_Matrix	;wreg free
  6939                           
  6940                           ;common.c: 293: en_put=1;
  6941  000464  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6942  000466  0012               	return		;funcret
  6943  000468                     __end_of_time_set_mt:
  6944                           	opt stack 0
  6945  000468                     PL4:
  6946                           	opt stack 24
  6947  000468  6E17               	movwf	putchar_b_buf@symbol,c
  6948  00046A  0E01               	movlw	low _Font
  6949  00046C  6E18               	movwf	putchar_b_buf@pF,c
  6950  00046E  0EB9               	movlw	high _Font
  6951  000470  6E19               	movwf	putchar_b_buf@pF+1,c
  6952  000472  0012               	return	
  6953  000474                     __end_ofPL4:
  6954                           	opt stack 0
  6955  000474                     PL110:
  6956                           	opt stack 22
  6957  000474  0E6C               	movlw	low _time_set_mt
  6958  000476  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6959  000478  0E02               	movlw	high _time_set_mt
  6960  00047A  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6961  00047C  0012               	return	
  6962  00047E                     __end_ofPL110:
  6963                           	opt stack 0
  6964                           tosu	equ	0xFFF
  6965                           tosh	equ	0xFFE
  6966                           tosl	equ	0xFFD
  6967                           pclath	equ	0xFFA
  6968                           tblptru	equ	0xFF8
  6969                           tblptrh	equ	0xFF7
  6970                           tblptrl	equ	0xFF6
  6971                           tablat	equ	0xFF5
  6972                           prodh	equ	0xFF4
  6973                           prodl	equ	0xFF3
  6974                           intcon	equ	0xFF2
  6975                           intcon2	equ	0xFF1
  6976                           postinc0	equ	0xFEE
  6977                           wreg	equ	0xFE8
  6978                           indf1	equ	0xFE7
  6979                           plusw1	equ	0xFE3
  6980                           fsr1h	equ	0xFE2
  6981                           fsr1l	equ	0xFE1
  6982                           indf2	equ	0xFDF
  6983                           postinc2	equ	0xFDE
  6984                           postdec2	equ	0xFDD
  6985                           plusw2	equ	0xFDB
  6986                           fsr2h	equ	0xFDA
  6987                           fsr2l	equ	0xFD9
  6988                           status	equ	0xFD8
  6989                           
  6990 ;; *************** function _default_state *****************
  6991 ;; Defined at:
  6992 ;;		line 628 in file "common.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;		None
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;		None
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  1    wreg      void 
  6999 ;; Registers used:
  7000 ;;		wreg, status,2
  7001 ;; Tracked objects:
  7002 ;;		On entry : 3F/0
  7003 ;;		On exit  : 3F/0
  7004 ;;		Unchanged: 3F/0
  7005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;Total ram usage:        0 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    3
  7013 ;; This function calls:
  7014 ;;		Nothing
  7015 ;; This function is called by:
  7016 ;;		_time_set_min
  7017 ;;		_time_set_hr
  7018 ;;		_time_set_yr
  7019 ;;		_time_set_mt
  7020 ;;		_time_set_dt
  7021 ;;		_time_set_dy
  7022 ;;		_set_font_set
  7023 ;;		_home_temp
  7024 ;;		_time_led
  7025 ;;		_RTOS_DispatchTask
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029                           	psect	text23
  7030  002080                     __ptext23:
  7031                           	opt stack 0
  7032  002080                     _default_state:
  7033                           	opt stack 26
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;common.c: 630: events = 4;
  7037                           
  7038                           ;incstack = 0
  7039  002080  0E04               	movlw	4
  7040  002082  6E6F               	movwf	_events,c
  7041                           
  7042                           ; BSR set to: 0
  7043  002084  0C04               	retlw	4	;funcret
  7044  002086                     __end_of_default_state:
  7045                           	opt stack 0
  7046                           tosu	equ	0xFFF
  7047                           tosh	equ	0xFFE
  7048                           tosl	equ	0xFFD
  7049                           pclath	equ	0xFFA
  7050                           tblptru	equ	0xFF8
  7051                           tblptrh	equ	0xFF7
  7052                           tblptrl	equ	0xFF6
  7053                           tablat	equ	0xFF5
  7054                           prodh	equ	0xFF4
  7055                           prodl	equ	0xFF3
  7056                           intcon	equ	0xFF2
  7057                           intcon2	equ	0xFF1
  7058                           postinc0	equ	0xFEE
  7059                           wreg	equ	0xFE8
  7060                           indf1	equ	0xFE7
  7061                           plusw1	equ	0xFE3
  7062                           fsr1h	equ	0xFE2
  7063                           fsr1l	equ	0xFE1
  7064                           indf2	equ	0xFDF
  7065                           postinc2	equ	0xFDE
  7066                           postdec2	equ	0xFDD
  7067                           plusw2	equ	0xFDB
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function _time_set_hr *****************
  7073 ;; Defined at:
  7074 ;;		line 84 in file "common.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;		None
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;		None
  7079 ;; Return value:  Size  Location     Type
  7080 ;;                  1    wreg      void 
  7081 ;; Registers used:
  7082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7083 ;; Tracked objects:
  7084 ;;		On entry : 3F/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;Total ram usage:        0 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    7
  7095 ;; This function calls:
  7096 ;;		_RTOS_DeleteTask
  7097 ;;		_RTOS_SetTask
  7098 ;;		_Update_Matrix
  7099 ;;		___lbdiv
  7100 ;;		___lbmod
  7101 ;;		_clear_matrix
  7102 ;;		_putchar_b_buf
  7103 ;;		_setTime
  7104 ;; This function is called by:
  7105 ;;		_time_set_min
  7106 ;;		_RTOS_DispatchTask
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           	psect	text24
  7111  000968                     __ptext24:
  7112                           	opt stack 0
  7113  000968                     _time_set_hr:
  7114                           	opt stack 22
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;common.c: 86: show_digit = ~show_digit;
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;incstack = 0
  7121  000968  B270               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  7122  00096A  D002               	goto	u3950
  7123  00096C  8270               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  7124  00096E  D043               	goto	l5812
  7125  000970                     u3950:
  7126  000970  9270               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  7127                           
  7128                           ;common.c: 87: switch (events)
  7129  000972  D041               	goto	l5812
  7130  000974                     l5768:
  7131                           
  7132                           ;common.c: 93: RTOS_DeleteTask(time_set_hr);
  7133  000974  D8A6               	call	PL88	;call to abstracted procedure
  7134  000976  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  7135                           
  7136                           ;common.c: 94: RTOS_SetTask(time_set_yr, 0, 20);
  7137  00097A  0E5E               	movlw	low _time_set_yr
  7138  00097C  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7139  00097E  0E0F               	movlw	high _time_set_yr
  7140  000980  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7141  000982  EC1F  F007         	call	PL16	;call to abstracted procedure
  7142  000986  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7143                           
  7144                           ;common.c: 95: RTOS_SetTask(default_state, 2000, 0);
  7145  00098A  EC09  F003         	call	PL2	;call to abstracted procedure
  7146  00098E  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7147                           
  7148                           ;common.c: 97: events = 5;
  7149  000992  0E05               	movlw	5
  7150  000994  6E6F               	movwf	_events,c
  7151                           
  7152                           ;common.c: 98: clear_matrix();
  7153  000996  ECF5  F00F         	call	_clear_matrix	;wreg free
  7154                           
  7155                           ;common.c: 99: en_put = 0;
  7156  00099A  9070               	bcf	_en_put/(0+8),_en_put& (0+7),c
  7157                           
  7158                           ;common.c: 100: break;
  7159  00099C  D036               	goto	l713
  7160  00099E                     l5780:
  7161                           
  7162                           ;common.c: 102: RTOS_DeleteTask(time_set_hr);
  7163  00099E  D891               	call	PL88	;call to abstracted procedure
  7164  0009A0  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  7165                           
  7166                           ;common.c: 103: RTOS_DeleteTask(default_state);
  7167  0009A4  ECA0  F007         	call	PL38	;call to abstracted procedure
  7168  0009A8  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  7169                           
  7170                           ;common.c: 104: RTOS_SetTask(time_led, 0, 20);
  7171  0009AC  EC96  F007         	call	PL8	;call to abstracted procedure
  7172  0009B0  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7173                           
  7174                           ;common.c: 105: events = 5;
  7175  0009B4  0E05               	movlw	5
  7176  0009B6  6E6F               	movwf	_events,c
  7177                           
  7178                           ;common.c: 106: break;
  7179  0009B8  D028               	goto	l713
  7180  0009BA                     l5786:
  7181                           
  7182                           ;common.c: 108: TSTime.Thr++;
  7183  0009BA  2A43               	incf	_TSTime+2,f,c
  7184                           
  7185                           ;common.c: 109: if(TSTime.Thr > 23) TSTime.Thr = 0;
  7186  0009BC  0E17               	movlw	23
  7187  0009BE  6443               	cpfsgt	_TSTime+2,c
  7188  0009C0  D001               	goto	l5792
  7189  0009C2  6A43               	clrf	_TSTime+2,c
  7190  0009C4                     l5792:
  7191                           
  7192                           ;common.c: 110: RTOS_SetTask(default_state, 2000, 0);
  7193  0009C4  EC09  F003         	call	PL2	;call to abstracted procedure
  7194  0009C8  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7195                           
  7196                           ;common.c: 111: events = 5;
  7197  0009CC  0E05               	movlw	5
  7198  0009CE  6E6F               	movwf	_events,c
  7199                           
  7200                           ;common.c: 112: setTime(TSTime.Thr,TSTime.Tmin,0);
  7201  0009D0  D86E               	call	PL54	;call to abstracted procedure
  7202  0009D2  EC82  F00E         	call	_setTime
  7203                           
  7204                           ;common.c: 113: break;
  7205  0009D6  D019               	goto	l713
  7206  0009D8                     l5798:
  7207                           
  7208                           ;common.c: 115: TSTime.Thr--;
  7209  0009D8  0643               	decf	_TSTime+2,f,c
  7210                           
  7211                           ;common.c: 116: if(TSTime.Thr == 255) TSTime.Thr = 23;
  7212  0009DA  2843               	incf	_TSTime+2,w,c
  7213  0009DC  E102               	bnz	l5804
  7214  0009DE  0E17               	movlw	23
  7215  0009E0  6E43               	movwf	_TSTime+2,c
  7216  0009E2                     l5804:
  7217                           
  7218                           ;common.c: 117: RTOS_SetTask(default_state, 2000, 0);
  7219  0009E2  EC09  F003         	call	PL2	;call to abstracted procedure
  7220  0009E6  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7221                           
  7222                           ;common.c: 118: events = 5;
  7223  0009EA  0E05               	movlw	5
  7224  0009EC  6E6F               	movwf	_events,c
  7225                           
  7226                           ;common.c: 119: setTime(TSTime.Thr,TSTime.Tmin,0);
  7227  0009EE  D85F               	call	PL54	;call to abstracted procedure
  7228  0009F0  EC82  F00E         	call	_setTime
  7229                           
  7230                           ;common.c: 120: break;
  7231  0009F4  D00A               	goto	l713
  7232  0009F6                     l5812:
  7233  0009F6  506F               	movf	_events,w,c
  7234                           
  7235                           ; Switch size 1, requested type "space"
  7236                           ; Number of cases is 5, Range of values is 1 to 5
  7237                           ; switch strategies available:
  7238                           ; Name         Instructions Cycles
  7239                           ; simple_byte           16     9 (average)
  7240                           ;	Chosen strategy is simple_byte
  7241  0009F8  0A01               	xorlw	1	; case 1
  7242  0009FA  E0BC               	bz	l5768
  7243  0009FC  0A03               	xorlw	3	; case 2
  7244  0009FE  E0DD               	bz	l5786
  7245  000A00  0A01               	xorlw	1	; case 3
  7246  000A02  E0EA               	bz	l5798
  7247  000A04  0A07               	xorlw	7	; case 4
  7248  000A06  E0CB               	bz	l5780
  7249  000A08  0A01               	xorlw	1	; case 5
  7250  000A0A                     l713:
  7251                           
  7252                           ;common.c: 122: if(en_put)
  7253  000A0A  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  7254  000A0C  D03F               	goto	l5826
  7255                           
  7256                           ;common.c: 123: {
  7257                           ;common.c: 124: if(show_digit)
  7258  000A0E  A270               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  7259  000A10  D033               	goto	l5824
  7260                           
  7261                           ;common.c: 125: {
  7262                           ;common.c: 127: putchar_b_buf(13,(TSTime.Tmin/10) % 10, pFont);
  7263  000A12  D852               	call	PL74	;call to abstracted procedure
  7264  000A14  EC50  F00E         	call	___lbdiv
  7265  000A18  ECFE  F00E         	call	___lbmod
  7266  000A1C  D842               	call	PL26	;call to abstracted procedure
  7267  000A1E  0E0D               	movlw	13
  7268  000A20  ECAF  F00B         	call	_putchar_b_buf
  7269                           
  7270                           ;common.c: 128: putchar_b_buf(19,TSTime.Tmin % 10, pFont);
  7271  000A24  D858               	call	PL126	;call to abstracted procedure
  7272  000A26  ECFE  F00E         	call	___lbmod
  7273  000A2A  D83B               	call	PL26	;call to abstracted procedure
  7274  000A2C  0E13               	movlw	19
  7275  000A2E  ECAF  F00B         	call	_putchar_b_buf
  7276                           
  7277                           ;common.c: 130: if((TSTime.Thr/10) % 10)
  7278  000A32  D84C               	call	PL94	;call to abstracted procedure
  7279  000A34  EC50  F00E         	call	___lbdiv
  7280  000A38  ECFE  F00E         	call	___lbmod
  7281  000A3C  0900               	iorlw	0
  7282  000A3E  E00A               	bz	l5822
  7283                           
  7284                           ;common.c: 131: putchar_b_buf(0,(TSTime.Thr/10) % 10, pFont);
  7285  000A40  D845               	call	PL94	;call to abstracted procedure
  7286  000A42  EC50  F00E         	call	___lbdiv
  7287  000A46  ECFE  F00E         	call	___lbmod
  7288  000A4A  D82B               	call	PL26	;call to abstracted procedure
  7289  000A4C  0E00               	movlw	0
  7290  000A4E  ECAF  F00B         	call	_putchar_b_buf
  7291  000A52  D008               	goto	l723
  7292  000A54                     l5822:
  7293                           
  7294                           ;common.c: 132: else
  7295                           ;common.c: 133: putchar_b_buf(0,0, pFont);
  7296  000A54  0E00               	movlw	0
  7297  000A56  6A17               	clrf	putchar_b_buf@symbol,c
  7298  000A58  C06D  F018         	movff	_pFont,putchar_b_buf@pF
  7299  000A5C  C06E  F019         	movff	_pFont+1,putchar_b_buf@pF+1
  7300  000A60  ECAF  F00B         	call	_putchar_b_buf
  7301  000A64                     l723:
  7302                           
  7303                           ;common.c: 134: putchar_b_buf(6,TSTime.Thr % 10, pFont);
  7304  000A64  0E0A               	movlw	10
  7305  000A66  6E13               	movwf	___lbmod@divisor,c
  7306  000A68  5043               	movf	_TSTime+2,w,c
  7307  000A6A  ECFE  F00E         	call	___lbmod
  7308  000A6E  D819               	call	PL26	;call to abstracted procedure
  7309  000A70  0E06               	movlw	6
  7310  000A72  ECAF  F00B         	call	_putchar_b_buf
  7311                           
  7312                           ;common.c: 135: }
  7313  000A76  D00A               	goto	l5826
  7314  000A78                     l5824:
  7315                           
  7316                           ;common.c: 136: else
  7317                           ;common.c: 137: {
  7318                           ;common.c: 139: putchar_b_buf(0,0, &Font);
  7319  000A78  6A17               	clrf	putchar_b_buf@symbol,c
  7320  000A7A  D80E               	call	PL6	;call to abstracted procedure
  7321  000A7C  0E00               	movlw	0
  7322  000A7E  ECAF  F00B         	call	_putchar_b_buf
  7323                           
  7324                           ;common.c: 140: putchar_b_buf(6,0, &Font);
  7325  000A82  6A17               	clrf	putchar_b_buf@symbol,c
  7326  000A84  D809               	call	PL6	;call to abstracted procedure
  7327  000A86  0E06               	movlw	6
  7328  000A88  ECAF  F00B         	call	_putchar_b_buf
  7329  000A8C                     l5826:
  7330                           
  7331                           ;common.c: 141: }
  7332                           ;common.c: 142: }
  7333                           ;common.c: 143: Update_Matrix(Dis_Buff);
  7334  000A8C  0E89               	movlw	low _Dis_Buff
  7335  000A8E  6E11               	movwf	Update_Matrix@buf,c
  7336  000A90  ECC2  F00D         	call	_Update_Matrix	;wreg free
  7337                           
  7338                           ;common.c: 144: en_put = 1;
  7339  000A94  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  7340  000A96  0012               	return		;funcret
  7341  000A98                     __end_of_time_set_hr:
  7342                           	opt stack 0
  7343  000A98                     PL6:
  7344                           	opt stack 22
  7345  000A98  0E01               	movlw	low _Font
  7346  000A9A  6E18               	movwf	putchar_b_buf@pF,c
  7347  000A9C  0EB9               	movlw	high _Font
  7348  000A9E  6E19               	movwf	putchar_b_buf@pF+1,c
  7349  000AA0  0012               	return	
  7350  000AA2                     __end_ofPL6:
  7351                           	opt stack 0
  7352  000AA2                     PL26:
  7353                           	opt stack 22
  7354  000AA2  6E17               	movwf	putchar_b_buf@symbol,c
  7355  000AA4  C06D  F018         	movff	_pFont,putchar_b_buf@pF
  7356  000AA8  C06E  F019         	movff	_pFont+1,putchar_b_buf@pF+1
  7357  000AAC  0012               	return	
  7358  000AAE                     __end_ofPL26:
  7359                           	opt stack 0
  7360  000AAE                     PL54:
  7361                           	opt stack 22
  7362  000AAE  C042  F01C         	movff	_TSTime+1,setTime@mSet
  7363  000AB2  6A1D               	clrf	setTime@sSet,c
  7364  000AB4  5043               	movf	_TSTime+2,w,c
  7365  000AB6  0012               	return	
  7366  000AB8                     __end_ofPL54:
  7367                           	opt stack 0
  7368  000AB8                     PL74:
  7369                           	opt stack 22
  7370  000AB8  0E0A               	movlw	10
  7371  000ABA  6E13               	movwf	___lbmod@divisor,c
  7372  000ABC  6E0F               	movwf	___lbdiv@divisor,c
  7373  000ABE  5042               	movf	_TSTime+1,w,c
  7374  000AC0  0012               	return	
  7375  000AC2                     __end_ofPL74:
  7376                           	opt stack 0
  7377  000AC2                     PL88:
  7378                           	opt stack 22
  7379  000AC2  0E68               	movlw	low _time_set_hr
  7380  000AC4  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  7381  000AC6  0E09               	movlw	high _time_set_hr
  7382  000AC8  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  7383  000ACA  0012               	return	
  7384  000ACC                     __end_ofPL88:
  7385                           	opt stack 0
  7386  000ACC                     PL94:
  7387                           	opt stack 22
  7388  000ACC  0E0A               	movlw	10
  7389  000ACE  6E13               	movwf	___lbmod@divisor,c
  7390  000AD0  6E0F               	movwf	___lbdiv@divisor,c
  7391  000AD2  5043               	movf	_TSTime+2,w,c
  7392  000AD4  0012               	return	
  7393  000AD6                     __end_ofPL94:
  7394                           	opt stack 0
  7395  000AD6                     PL126:
  7396                           	opt stack 22
  7397  000AD6  0E0A               	movlw	10
  7398  000AD8  6E13               	movwf	___lbmod@divisor,c
  7399  000ADA  5042               	movf	_TSTime+1,w,c
  7400  000ADC  0012               	return	
  7401  000ADE                     __end_ofPL126:
  7402                           	opt stack 0
  7403                           tosu	equ	0xFFF
  7404                           tosh	equ	0xFFE
  7405                           tosl	equ	0xFFD
  7406                           pclath	equ	0xFFA
  7407                           tblptru	equ	0xFF8
  7408                           tblptrh	equ	0xFF7
  7409                           tblptrl	equ	0xFF6
  7410                           tablat	equ	0xFF5
  7411                           prodh	equ	0xFF4
  7412                           prodl	equ	0xFF3
  7413                           intcon	equ	0xFF2
  7414                           intcon2	equ	0xFF1
  7415                           postinc0	equ	0xFEE
  7416                           wreg	equ	0xFE8
  7417                           indf1	equ	0xFE7
  7418                           plusw1	equ	0xFE3
  7419                           fsr1h	equ	0xFE2
  7420                           fsr1l	equ	0xFE1
  7421                           indf2	equ	0xFDF
  7422                           postinc2	equ	0xFDE
  7423                           postdec2	equ	0xFDD
  7424                           plusw2	equ	0xFDB
  7425                           fsr2h	equ	0xFDA
  7426                           fsr2l	equ	0xFD9
  7427                           status	equ	0xFD8
  7428                           
  7429 ;; *************** function _key_press *****************
  7430 ;; Defined at:
  7431 ;;		line 5 in file "key.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;		None
  7434 ;; Auto vars:     Size  Location     Type
  7435 ;;  key             1   14[COMRAM] unsigned char 
  7436 ;; Return value:  Size  Location     Type
  7437 ;;                  1    wreg      void 
  7438 ;; Registers used:
  7439 ;;		wreg, status,2, status,0
  7440 ;; Tracked objects:
  7441 ;;		On entry : 3F/0
  7442 ;;		On exit  : 3F/0
  7443 ;;		Unchanged: 3F/0
  7444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;Total ram usage:        1 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    3
  7452 ;; This function calls:
  7453 ;;		Nothing
  7454 ;; This function is called by:
  7455 ;;		_main
  7456 ;;		_RTOS_DispatchTask
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           	psect	text25
  7461  001A86                     __ptext25:
  7462                           	opt stack 0
  7463  001A86                     _key_press:
  7464                           	opt stack 26
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;key.c: 7: static uint8_t count = 0;
  7468                           ;key.c: 8: uint8_t key;
  7469                           ;key.c: 10: if ((PORTB & (1<<4))==0)
  7470                           
  7471                           ;incstack = 0
  7472  001A86  B881               	btfsc	3969,4,c	;volatile
  7473  001A88  D002               	goto	l902
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;key.c: 11: key = 1;
  7477  001A8A  0E01               	movlw	1
  7478  001A8C  D00B               	goto	L3
  7479  001A8E                     l902:
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;key.c: 12: else if ((PORTB & (1<<1))==0)
  7483  001A8E  B281               	btfsc	3969,1,c	;volatile
  7484  001A90  D002               	goto	l904
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;key.c: 13: key = 2;
  7488  001A92  0E02               	movlw	2
  7489  001A94  D007               	goto	L3
  7490  001A96                     l904:
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;key.c: 14: else if ((PORTB & (1<<2))==0)
  7494  001A96  B481               	btfsc	3969,2,c	;volatile
  7495  001A98  D002               	goto	l906
  7496                           
  7497                           ; BSR set to: 0
  7498                           ;key.c: 15: key = 3;
  7499  001A9A  0E03               	movlw	3
  7500  001A9C  D003               	goto	L3
  7501  001A9E                     l906:
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;key.c: 16: else if ((PORTB & (1<<3))==0)
  7505  001A9E  B681               	btfsc	3969,3,c	;volatile
  7506  001AA0  D003               	goto	l908
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;key.c: 17: key = 4;
  7510  001AA2  0E04               	movlw	4
  7511  001AA4                     L3:
  7512  001AA4  6E0F               	movwf	key_press@key,c
  7513  001AA6  D001               	goto	l6250
  7514  001AA8                     l908:
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;key.c: 18: else
  7518                           ;key.c: 19: key = (0);
  7519  001AA8  6A0F               	clrf	key_press@key,c
  7520  001AAA                     l6250:
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;key.c: 22: if(key){
  7524  001AAA  500F               	movf	key_press@key,w,c
  7525  001AAC  E00C               	bz	l910
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;key.c: 23: if(count <= 30)
  7529  001AAE  0E1F               	movlw	31
  7530  001AB0  605E               	cpfslt	key_press@count,c
  7531  001AB2  0C1F               	retlw	31
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;key.c: 24: {
  7535                           ;key.c: 25: count++;
  7536  001AB4  2A5E               	incf	key_press@count,f,c
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;key.c: 26: if(count == 30)
  7540  001AB6  0E1E               	movlw	30
  7541  001AB8  185E               	xorwf	key_press@count,w,c
  7542  001ABA  A4D8               	btfss	status,2,c
  7543  001ABC  0012               	return	
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;key.c: 27: {
  7547                           ;key.c: 29: events = key;
  7548  001ABE  C00F  F06F         	movff	key_press@key,_events
  7549                           
  7550                           ;key.c: 30: count = 0;
  7551  001AC2  6A5E               	clrf	key_press@count,c
  7552  001AC4  0012               	return	
  7553  001AC6                     l910:
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;key.c: 34: else
  7557                           ;key.c: 35: {
  7558                           ;key.c: 36: count = 0;
  7559  001AC6  6A5E               	clrf	key_press@count,c
  7560                           
  7561                           ; BSR set to: 0
  7562  001AC8  0012               	return		;funcret
  7563  001ACA                     __end_of_key_press:
  7564                           	opt stack 0
  7565                           tosu	equ	0xFFF
  7566                           tosh	equ	0xFFE
  7567                           tosl	equ	0xFFD
  7568                           pclath	equ	0xFFA
  7569                           tblptru	equ	0xFF8
  7570                           tblptrh	equ	0xFF7
  7571                           tblptrl	equ	0xFF6
  7572                           tablat	equ	0xFF5
  7573                           prodh	equ	0xFF4
  7574                           prodl	equ	0xFF3
  7575                           intcon	equ	0xFF2
  7576                           intcon2	equ	0xFF1
  7577                           postinc0	equ	0xFEE
  7578                           wreg	equ	0xFE8
  7579                           indf1	equ	0xFE7
  7580                           plusw1	equ	0xFE3
  7581                           fsr1h	equ	0xFE2
  7582                           fsr1l	equ	0xFE1
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           plusw2	equ	0xFDB
  7587                           fsr2h	equ	0xFDA
  7588                           fsr2l	equ	0xFD9
  7589                           status	equ	0xFD8
  7590                           
  7591 ;; *************** function _time_led *****************
  7592 ;; Defined at:
  7593 ;;		line 556 in file "common.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;		None
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;		None
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  1    wreg      void 
  7600 ;; Registers used:
  7601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 3F/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;Total ram usage:        0 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    7
  7614 ;; This function calls:
  7615 ;;		_FillBuf
  7616 ;;		_RTOS_DeleteTask
  7617 ;;		_RTOS_SetTask
  7618 ;;		_Update_Matrix
  7619 ;;		_readTemp_Single
  7620 ;;		_scroll_left
  7621 ;; This function is called by:
  7622 ;;		_main
  7623 ;;		_time_set_min
  7624 ;;		_time_set_hr
  7625 ;;		_time_set_yr
  7626 ;;		_time_set_mt
  7627 ;;		_time_set_dt
  7628 ;;		_time_set_dy
  7629 ;;		_set_font_set
  7630 ;;		_home_temp
  7631 ;;		_RTOS_DispatchTask
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text26
  7636  001238                     __ptext26:
  7637                           	opt stack 0
  7638  001238                     _time_led:
  7639                           	opt stack 22
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;common.c: 560: switch (events)
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;incstack = 0
  7646  001238  D04F               	goto	l6234
  7647  00123A                     l6190:
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;common.c: 563: FillBuf();
  7651  00123A  EC6F  F005         	call	_FillBuf	;wreg free
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;common.c: 564: if((TTime.Ts>5)&&(TTime.Ts<7))
  7655  00123E  0E05               	movlw	5
  7656  001240  6462               	cpfsgt	_TTime,c
  7657  001242  D00B               	goto	l6198
  7658                           
  7659                           ; BSR set to: 0
  7660  001244  0E07               	movlw	7
  7661  001246  6062               	cpfslt	_TTime,c
  7662  001248  D008               	goto	l6198
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;common.c: 565: {
  7666                           ;common.c: 566: readTemp_Single(&temperature, &time_flag, &timer_val);
  7667  00124A  0E69               	movlw	low _temperature
  7668  00124C  6E3C               	movwf	readTemp_Single@buf,c
  7669  00124E  0E6B               	movlw	low _time_flag
  7670  001250  6E3D               	movwf	readTemp_Single@time_flag,c
  7671  001252  0E6C               	movlw	low _timer_val
  7672  001254  6E3E               	movwf	readTemp_Single@timer_val,c
  7673  001256  EC09  F006         	call	_readTemp_Single	;wreg free
  7674  00125A                     l6198:
  7675                           
  7676                           ;common.c: 567: }
  7677                           ;common.c: 568: if(((TTime.Ts>14)&&(TTime.Ts<16))||((TTime.Ts>45)&&(TTime.Ts<47)))
  7678  00125A  0E0E               	movlw	14
  7679  00125C  6462               	cpfsgt	_TTime,c
  7680  00125E  D003               	goto	l6202
  7681  001260  0E0F               	movlw	15
  7682  001262  6462               	cpfsgt	_TTime,c
  7683  001264  D006               	goto	l6206
  7684  001266                     l6202:
  7685  001266  0E2D               	movlw	45
  7686  001268  6462               	cpfsgt	_TTime,c
  7687  00126A  D042               	goto	l6236
  7688  00126C  0E2F               	movlw	47
  7689  00126E  6062               	cpfslt	_TTime,c
  7690  001270  D03F               	goto	l6236
  7691  001272                     l6206:
  7692                           
  7693                           ;common.c: 569: events = 3;
  7694  001272  0E03               	movlw	3
  7695  001274  D017               	goto	L4
  7696  001276                     l6208:
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;common.c: 572: RTOS_DeleteTask(time_led);
  7700  001276  D847               	call	PL102	;call to abstracted procedure
  7701  001278  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  7702                           
  7703                           ;common.c: 573: RTOS_SetTask(time_set_min, 0, 50);
  7704  00127C  0E4A               	movlw	low _time_set_min
  7705  00127E  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7706  001280  0E11               	movlw	high _time_set_min
  7707  001282  D83A               	call	PL10	;call to abstracted procedure
  7708  001284  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7709                           
  7710                           ;common.c: 574: RTOS_SetTask(default_state, 2000, 0);
  7711  001288  EC09  F003         	call	PL2	;call to abstracted procedure
  7712  00128C  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7713                           
  7714                           ;common.c: 575: TSTime = TTime;
  7715  001290  EE20  F062         	lfsr	2,_TTime
  7716  001294  EE10  F041         	lfsr	1,_TSTime
  7717  001298  0E06               	movlw	6
  7718  00129A                     u4251:
  7719  00129A  CFDB FFE3          	movff	plusw2,plusw1
  7720  00129E  06E8               	decf	wreg,f,c
  7721  0012A0  E2FC               	bc	u4251
  7722  0012A2                     l6216:
  7723                           
  7724                           ;common.c: 576: events = 5;
  7725  0012A2  0E05               	movlw	5
  7726  0012A4                     L4:
  7727  0012A4  6E6F               	movwf	_events,c
  7728                           
  7729                           ;common.c: 577: break;
  7730  0012A6  D024               	goto	l6236
  7731  0012A8                     l6218:
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;common.c: 582: pFont = &dFont4;
  7735  0012A8  EC80  F00D         	call	PL84	;call to abstracted procedure
  7736  0012AC  D7FA               	goto	l6216
  7737  0012AE                     l6222:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;common.c: 594: scroll_left();
  7741  0012AE  EC7A  F00C         	call	_scroll_left	;wreg free
  7742                           
  7743                           ;common.c: 595: RTOS_DeleteTask(time_led);
  7744  0012B2  D829               	call	PL102	;call to abstracted procedure
  7745  0012B4  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  7746                           
  7747                           ;common.c: 596: RTOS_SetTask(home_temp, 0, 20);
  7748  0012B8  0E32               	movlw	low _home_temp
  7749  0012BA  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7750  0012BC  0E06               	movlw	high _home_temp
  7751  0012BE  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7752  0012C0  EC1F  F007         	call	PL16	;call to abstracted procedure
  7753  0012C4  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7754  0012C8  D7EC               	goto	l6216
  7755  0012CA                     l6228:
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;common.c: 600: events = 5;
  7759  0012CA  0E05               	movlw	5
  7760  0012CC  6E6F               	movwf	_events,c
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;common.c: 601: RTOS_DeleteTask(default_state);
  7764  0012CE  ECA0  F007         	call	PL38	;call to abstracted procedure
  7765  0012D2  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  7766                           
  7767                           ;common.c: 602: break;
  7768  0012D6  D00C               	goto	l6236
  7769  0012D8                     l6234:
  7770                           
  7771                           ; BSR set to: 0
  7772  0012D8  506F               	movf	_events,w,c
  7773                           
  7774                           ; Switch size 1, requested type "space"
  7775                           ; Number of cases is 6, Range of values is 1 to 6
  7776                           ; switch strategies available:
  7777                           ; Name         Instructions Cycles
  7778                           ; simple_byte           19    10 (average)
  7779                           ;	Chosen strategy is simple_byte
  7780  0012DA  0A01               	xorlw	1	; case 1
  7781  0012DC  E0CC               	bz	l6208
  7782  0012DE  0A03               	xorlw	3	; case 2
  7783  0012E0  E0E3               	bz	l6218
  7784  0012E2  0A01               	xorlw	1	; case 3
  7785  0012E4  E0E4               	bz	l6222
  7786  0012E6  0A07               	xorlw	7	; case 4
  7787  0012E8  E0F0               	bz	l6228
  7788  0012EA  0A01               	xorlw	1	; case 5
  7789  0012EC  E0A6               	bz	l6190
  7790  0012EE  0A03               	xorlw	3	; case 6
  7791  0012F0                     l6236:
  7792                           
  7793                           ;common.c: 607: Update_Matrix(Dis_Buff);
  7794  0012F0  0E89               	movlw	low _Dis_Buff
  7795  0012F2  6E11               	movwf	Update_Matrix@buf,c
  7796  0012F4  EFC2  F00D         	goto	_Update_Matrix	;wreg free
  7797  0012F8                     __end_of_time_led:
  7798                           	opt stack 0
  7799  0012F8                     PL10:
  7800                           	opt stack 22
  7801  0012F8  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7802  0012FA  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  7803  0012FC  6A11               	clrf	RTOS_SetTask@taskDelay,c
  7804  0012FE  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  7805  001300  0E32               	movlw	50
  7806  001302  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  7807  001304  0C32               	retlw	50
  7808  001306                     __end_ofPL10:
  7809                           	opt stack 0
  7810  001306                     PL102:
  7811                           	opt stack 22
  7812  001306  0E38               	movlw	low _time_led
  7813  001308  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  7814  00130A  0E12               	movlw	high _time_led
  7815  00130C  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  7816  00130E  0012               	return	
  7817  001310                     __end_ofPL102:
  7818                           	opt stack 0
  7819                           tosu	equ	0xFFF
  7820                           tosh	equ	0xFFE
  7821                           tosl	equ	0xFFD
  7822                           pclath	equ	0xFFA
  7823                           tblptru	equ	0xFF8
  7824                           tblptrh	equ	0xFF7
  7825                           tblptrl	equ	0xFF6
  7826                           tablat	equ	0xFF5
  7827                           prodh	equ	0xFF4
  7828                           prodl	equ	0xFF3
  7829                           intcon	equ	0xFF2
  7830                           intcon2	equ	0xFF1
  7831                           postinc0	equ	0xFEE
  7832                           wreg	equ	0xFE8
  7833                           indf1	equ	0xFE7
  7834                           plusw1	equ	0xFE3
  7835                           fsr1h	equ	0xFE2
  7836                           fsr1l	equ	0xFE1
  7837                           indf2	equ	0xFDF
  7838                           postinc2	equ	0xFDE
  7839                           postdec2	equ	0xFDD
  7840                           plusw2	equ	0xFDB
  7841                           fsr2h	equ	0xFDA
  7842                           fsr2l	equ	0xFD9
  7843                           status	equ	0xFD8
  7844                           
  7845 ;; *************** function _time_set_yr *****************
  7846 ;; Defined at:
  7847 ;;		line 149 in file "common.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;		None
  7850 ;; Auto vars:     Size  Location     Type
  7851 ;;		None
  7852 ;; Return value:  Size  Location     Type
  7853 ;;                  1    wreg      void 
  7854 ;; Registers used:
  7855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7856 ;; Tracked objects:
  7857 ;;		On entry : 3F/0
  7858 ;;		On exit  : 0/0
  7859 ;;		Unchanged: 0/0
  7860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7865 ;;Total ram usage:        0 bytes
  7866 ;; Hardware stack levels used:    1
  7867 ;; Hardware stack levels required when called:    7
  7868 ;; This function calls:
  7869 ;;		_RTOS_DeleteTask
  7870 ;;		_RTOS_SetTask
  7871 ;;		_Update_Matrix
  7872 ;;		___lbdiv
  7873 ;;		___lbmod
  7874 ;;		_putchar_b_buf
  7875 ;;		_setDate
  7876 ;; This function is called by:
  7877 ;;		_time_set_hr
  7878 ;;		_RTOS_DispatchTask
  7879 ;; This function uses a non-reentrant model
  7880 ;;
  7881                           
  7882                           	psect	text27
  7883  000F5E                     __ptext27:
  7884                           	opt stack 0
  7885  000F5E                     _time_set_yr:
  7886                           	opt stack 22
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;common.c: 151: switch (events)
  7890                           
  7891                           ;incstack = 0
  7892  000F5E  D03D               	goto	l5874
  7893  000F60                     l5832:
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;common.c: 157: RTOS_DeleteTask(time_set_yr);
  7897  000F60  D877               	call	PL90	;call to abstracted procedure
  7898  000F62  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  7899                           
  7900                           ;common.c: 158: RTOS_SetTask(time_set_mt, 0, 20);
  7901  000F66  0E6C               	movlw	low _time_set_mt
  7902  000F68  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7903  000F6A  0E02               	movlw	high _time_set_mt
  7904  000F6C  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7905  000F6E  EC1F  F007         	call	PL16	;call to abstracted procedure
  7906  000F72  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7907                           
  7908                           ;common.c: 159: RTOS_SetTask(default_state, 2000, 0);
  7909  000F76  EC09  F003         	call	PL2	;call to abstracted procedure
  7910  000F7A  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7911                           
  7912                           ;common.c: 160: events = 5;
  7913  000F7E  0E05               	movlw	5
  7914  000F80  6E6F               	movwf	_events,c
  7915                           
  7916                           ;common.c: 161: en_put=0;
  7917  000F82  9070               	bcf	_en_put/(0+8),_en_put& (0+7),c
  7918                           
  7919                           ;common.c: 162: break;
  7920  000F84  D034               	goto	l730
  7921  000F86                     l5842:
  7922                           
  7923                           ; BSR set to: 0
  7924                           ;common.c: 164: RTOS_DeleteTask(time_set_yr);
  7925  000F86  D864               	call	PL90	;call to abstracted procedure
  7926  000F88  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  7927                           
  7928                           ;common.c: 165: RTOS_DeleteTask(default_state);
  7929  000F8C  ECA0  F007         	call	PL38	;call to abstracted procedure
  7930  000F90  EC75  F00A         	call	_RTOS_DeleteTask	;wreg free
  7931                           
  7932                           ;common.c: 166: RTOS_SetTask(time_led, 0, 20);
  7933  000F94  EC96  F007         	call	PL8	;call to abstracted procedure
  7934  000F98  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7935                           
  7936                           ;common.c: 167: events = 5;
  7937  000F9C  0E05               	movlw	5
  7938  000F9E  6E6F               	movwf	_events,c
  7939                           
  7940                           ;common.c: 168: break;
  7941  000FA0  D026               	goto	l730
  7942  000FA2                     l5848:
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;common.c: 170: TSTime.Tyr++;
  7946  000FA2  2A47               	incf	_TSTime+6,f,c
  7947                           
  7948                           ; BSR set to: 0
  7949                           ;common.c: 171: if(TSTime.Tyr > 99) TSTime.Tyr = 0;
  7950  000FA4  0E63               	movlw	99
  7951  000FA6  6447               	cpfsgt	_TSTime+6,c
  7952  000FA8  D001               	goto	l5854
  7953                           
  7954                           ; BSR set to: 0
  7955  000FAA  6A47               	clrf	_TSTime+6,c
  7956  000FAC                     l5854:
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;common.c: 172: RTOS_SetTask(default_state, 2000, 0);
  7960  000FAC  EC09  F003         	call	PL2	;call to abstracted procedure
  7961  000FB0  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7962                           
  7963                           ;common.c: 173: events = 5;
  7964                           
  7965                           ;common.c: 174: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  7966  000FB4  EC15  F007         	call	PL14	;call to abstracted procedure
  7967  000FB8  ECE0  F00D         	call	_setDate
  7968                           
  7969                           ;common.c: 175: break;
  7970  000FBC  D018               	goto	l730
  7971  000FBE                     l5860:
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;common.c: 177: TSTime.Tyr--;
  7975  000FBE  0647               	decf	_TSTime+6,f,c
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;common.c: 178: if(TSTime.Tyr == 255) TSTime.Tyr = 99;
  7979  000FC0  2847               	incf	_TSTime+6,w,c
  7980  000FC2  E102               	bnz	l5866
  7981                           
  7982                           ; BSR set to: 0
  7983  000FC4  0E63               	movlw	99
  7984  000FC6  6E47               	movwf	_TSTime+6,c
  7985  000FC8                     l5866:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;common.c: 179: RTOS_SetTask(default_state, 2000, 0);
  7989  000FC8  EC09  F003         	call	PL2	;call to abstracted procedure
  7990  000FCC  ECBA  F00A         	call	_RTOS_SetTask	;wreg free
  7991                           
  7992                           ;common.c: 180: events = 5;
  7993                           
  7994                           ;common.c: 181: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  7995  000FD0  EC15  F007         	call	PL14	;call to abstracted procedure
  7996  000FD4  ECE0  F00D         	call	_setDate
  7997                           
  7998                           ;common.c: 182: break;
  7999  000FD8  D00A               	goto	l730
  8000  000FDA                     l5874:
  8001                           
  8002                           ; BSR set to: 0
  8003  000FDA  506F               	movf	_events,w,c
  8004                           
  8005                           ; Switch size 1, requested type "space"
  8006                           ; Number of cases is 5, Range of values is 1 to 5
  8007                           ; switch strategies available:
  8008                           ; Name         Instructions Cycles
  8009                           ; simple_byte           16     9 (average)
  8010                           ;	Chosen strategy is simple_byte
  8011  000FDC  0A01               	xorlw	1	; case 1
  8012  000FDE  E0C0               	bz	l5832
  8013  000FE0  0A03               	xorlw	3	; case 2
  8014  000FE2  E0DF               	bz	l5848
  8015  000FE4  0A01               	xorlw	1	; case 3
  8016  000FE6  E0EB               	bz	l5860
  8017  000FE8  0A07               	xorlw	7	; case 4
  8018  000FEA  E0CD               	bz	l5842
  8019  000FEC  0A01               	xorlw	1	; case 5
  8020  000FEE                     l730:
  8021                           
  8022                           ;common.c: 184: if(en_put)
  8023  000FEE  A070               	btfss	_en_put/(0+8),_en_put& (0+7),c
  8024  000FF0  D029               	goto	l5878
  8025                           
  8026                           ;common.c: 185: {
  8027                           ;common.c: 186: putchar_b_buf(0,'Ð', &Font);
  8028  000FF2  0ED0               	movlw	208
  8029  000FF4  EC34  F002         	call	PL4	;call to abstracted procedure
  8030  000FF8  0E00               	movlw	0
  8031  000FFA  ECAF  F00B         	call	_putchar_b_buf
  8032                           
  8033                           ;common.c: 187: putchar_b_buf(6,'ê', &Font);
  8034  000FFE  0EEA               	movlw	234
  8035  001000  EC34  F002         	call	PL4	;call to abstracted procedure
  8036  001004  0E06               	movlw	6
  8037  001006  ECAF  F00B         	call	_putchar_b_buf
  8038                           
  8039                           ;common.c: 188: putchar_b_buf(12,':', &Font);
  8040  00100A  0E3A               	movlw	58
  8041  00100C  EC34  F002         	call	PL4	;call to abstracted procedure
  8042  001010  0E0C               	movlw	12
  8043  001012  ECAF  F00B         	call	_putchar_b_buf
  8044                           
  8045                           ;common.c: 189: putchar_b_buf(18,(TSTime.Tyr/10) % 10, pFont);
  8046  001016  0E0A               	movlw	10
  8047  001018  6E13               	movwf	___lbmod@divisor,c
  8048  00101A  6E0F               	movwf	___lbdiv@divisor,c
  8049  00101C  5047               	movf	_TSTime+6,w,c
  8050  00101E  EC50  F00E         	call	___lbdiv
  8051  001022  ECFE  F00E         	call	___lbmod
  8052  001026  EC51  F005         	call	PL26	;call to abstracted procedure
  8053  00102A  0E12               	movlw	18
  8054  00102C  ECAF  F00B         	call	_putchar_b_buf
  8055                           
  8056                           ;common.c: 190: putchar_b_buf(24,TSTime.Tyr % 10, pFont);
  8057  001030  0E0A               	movlw	10
  8058  001032  6E13               	movwf	___lbmod@divisor,c
  8059  001034  5047               	movf	_TSTime+6,w,c
  8060  001036  ECFE  F00E         	call	___lbmod
  8061  00103A  EC51  F005         	call	PL26	;call to abstracted procedure
  8062  00103E  0E18               	movlw	24
  8063  001040  ECAF  F00B         	call	_putchar_b_buf
  8064  001044                     l5878:
  8065                           
  8066                           ;common.c: 191: }
  8067                           ;common.c: 192: Update_Matrix(Dis_Buff);
  8068  001044  0E89               	movlw	low _Dis_Buff
  8069  001046  6E11               	movwf	Update_Matrix@buf,c
  8070  001048  ECC2  F00D         	call	_Update_Matrix	;wreg free
  8071                           
  8072                           ;common.c: 193: en_put=1;
  8073  00104C  8070               	bsf	_en_put/(0+8),_en_put& (0+7),c
  8074  00104E  0012               	return		;funcret
  8075  001050                     __end_of_time_set_yr:
  8076                           	opt stack 0
  8077  001050                     PL90:
  8078                           	opt stack 22
  8079  001050  0E5E               	movlw	low _time_set_yr
  8080  001052  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  8081  001054  0E0F               	movlw	high _time_set_yr
  8082  001056  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  8083  001058  0012               	return	
  8084  00105A                     __end_ofPL90:
  8085                           	opt stack 0
  8086                           tosu	equ	0xFFF
  8087                           tosh	equ	0xFFE
  8088                           tosl	equ	0xFFD
  8089                           pclath	equ	0xFFA
  8090                           tblptru	equ	0xFF8
  8091                           tblptrh	equ	0xFF7
  8092                           tblptrl	equ	0xFF6
  8093                           tablat	equ	0xFF5
  8094                           prodh	equ	0xFF4
  8095                           prodl	equ	0xFF3
  8096                           intcon	equ	0xFF2
  8097                           intcon2	equ	0xFF1
  8098                           postinc0	equ	0xFEE
  8099                           wreg	equ	0xFE8
  8100                           indf1	equ	0xFE7
  8101                           plusw1	equ	0xFE3
  8102                           fsr1h	equ	0xFE2
  8103                           fsr1l	equ	0xFE1
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           plusw2	equ	0xFDB
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _setTime *****************
  8113 ;; Defined at:
  8114 ;;		line 74 in file "ds3231.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;  hSet            1    wreg     unsigned char 
  8117 ;;  mSet            1   27[COMRAM] unsigned char 
  8118 ;;  sSet            1   28[COMRAM] unsigned char 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  hSet            1   29[COMRAM] unsigned char 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      void 
  8123 ;; Registers used:
  8124 ;;		wreg, status,2, status,0, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8130 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8134 ;;Total ram usage:        3 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    6
  8137 ;; This function calls:
  8138 ;;		_DS3231_Write
  8139 ;;		_decimal_to_bcd
  8140 ;; This function is called by:
  8141 ;;		_time_set_min
  8142 ;;		_time_set_hr
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text28
  8147  001D04                     __ptext28:
  8148                           	opt stack 0
  8149  001D04                     _setTime:
  8150                           	opt stack 22
  8151                           
  8152                           ;incstack = 0
  8153                           ;setTime@hSet stored from wreg
  8154  001D04  6E1E               	movwf	setTime@hSet,c
  8155                           
  8156                           ;ds3231.c: 76: DS3231_Write(0x00, (decimal_to_bcd(sSet)));
  8157  001D06  501D               	movf	setTime@sSet,w,c
  8158  001D08  ECEB  F00E         	call	_decimal_to_bcd
  8159  001D0C  6E1A               	movwf	DS3231_Write@value,c
  8160  001D0E  0E00               	movlw	0
  8161  001D10  EC9A  F00F         	call	_DS3231_Write
  8162                           
  8163                           ;ds3231.c: 77: DS3231_Write(0x01, (decimal_to_bcd(mSet)));
  8164  001D14  501C               	movf	setTime@mSet,w,c
  8165  001D16  ECEB  F00E         	call	_decimal_to_bcd
  8166  001D1A  6E1A               	movwf	DS3231_Write@value,c
  8167  001D1C  0E01               	movlw	1
  8168  001D1E  EC9A  F00F         	call	_DS3231_Write
  8169                           
  8170                           ;ds3231.c: 78: DS3231_Write(0x02, (0x3F & (decimal_to_bcd(hSet))));
  8171  001D22  501E               	movf	setTime@hSet,w,c
  8172  001D24  ECEB  F00E         	call	_decimal_to_bcd
  8173  001D28  0B3F               	andlw	63
  8174  001D2A  6E1A               	movwf	DS3231_Write@value,c
  8175  001D2C  0E02               	movlw	2
  8176  001D2E  EF9A  F00F         	goto	_DS3231_Write
  8177  001D32                     __end_of_setTime:
  8178                           	opt stack 0
  8179                           tosu	equ	0xFFF
  8180                           tosh	equ	0xFFE
  8181                           tosl	equ	0xFFD
  8182                           pclath	equ	0xFFA
  8183                           tblptru	equ	0xFF8
  8184                           tblptrh	equ	0xFF7
  8185                           tblptrl	equ	0xFF6
  8186                           tablat	equ	0xFF5
  8187                           prodh	equ	0xFF4
  8188                           prodl	equ	0xFF3
  8189                           intcon	equ	0xFF2
  8190                           intcon2	equ	0xFF1
  8191                           postinc0	equ	0xFEE
  8192                           wreg	equ	0xFE8
  8193                           indf1	equ	0xFE7
  8194                           plusw1	equ	0xFE3
  8195                           fsr1h	equ	0xFE2
  8196                           fsr1l	equ	0xFE1
  8197                           indf2	equ	0xFDF
  8198                           postinc2	equ	0xFDE
  8199                           postdec2	equ	0xFDD
  8200                           plusw2	equ	0xFDB
  8201                           fsr2h	equ	0xFDA
  8202                           fsr2l	equ	0xFD9
  8203                           status	equ	0xFD8
  8204                           
  8205 ;; *************** function _setDate *****************
  8206 ;; Defined at:
  8207 ;;		line 82 in file "ds3231.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;  daySet          1    wreg     unsigned char 
  8210 ;;  dateSet         1   27[COMRAM] unsigned char 
  8211 ;;  monthSet        1   28[COMRAM] unsigned char 
  8212 ;;  yearSet         1   29[COMRAM] unsigned char 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  daySet          1   30[COMRAM] unsigned char 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  1    wreg      void 
  8217 ;; Registers used:
  8218 ;;		wreg, status,2, status,0, cstack
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8224 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;Total ram usage:        4 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    6
  8231 ;; This function calls:
  8232 ;;		_DS3231_Write
  8233 ;;		_decimal_to_bcd
  8234 ;; This function is called by:
  8235 ;;		_time_set_yr
  8236 ;;		_time_set_mt
  8237 ;;		_time_set_dt
  8238 ;;		_time_set_dy
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           	psect	text29
  8243  001BC0                     __ptext29:
  8244                           	opt stack 0
  8245  001BC0                     _setDate:
  8246                           	opt stack 22
  8247                           
  8248                           ;incstack = 0
  8249                           ;setDate@daySet stored from wreg
  8250  001BC0  6E1F               	movwf	setDate@daySet,c
  8251                           
  8252                           ;ds3231.c: 84: DS3231_Write(0x03, (decimal_to_bcd(daySet)));
  8253  001BC2  501F               	movf	setDate@daySet,w,c
  8254  001BC4  ECEB  F00E         	call	_decimal_to_bcd
  8255  001BC8  6E1A               	movwf	DS3231_Write@value,c
  8256  001BCA  0E03               	movlw	3
  8257  001BCC  EC9A  F00F         	call	_DS3231_Write
  8258                           
  8259                           ;ds3231.c: 85: DS3231_Write(0x04, (decimal_to_bcd(dateSet)));
  8260  001BD0  501C               	movf	setDate@dateSet,w,c
  8261  001BD2  ECEB  F00E         	call	_decimal_to_bcd
  8262  001BD6  6E1A               	movwf	DS3231_Write@value,c
  8263  001BD8  0E04               	movlw	4
  8264  001BDA  EC9A  F00F         	call	_DS3231_Write
  8265                           
  8266                           ;ds3231.c: 86: DS3231_Write(0x05, (decimal_to_bcd(monthSet)));
  8267  001BDE  501D               	movf	setDate@monthSet,w,c
  8268  001BE0  ECEB  F00E         	call	_decimal_to_bcd
  8269  001BE4  6E1A               	movwf	DS3231_Write@value,c
  8270  001BE6  0E05               	movlw	5
  8271  001BE8  EC9A  F00F         	call	_DS3231_Write
  8272                           
  8273                           ;ds3231.c: 87: DS3231_Write(0x06, (decimal_to_bcd(yearSet)));
  8274  001BEC  501E               	movf	setDate@yearSet,w,c
  8275  001BEE  ECEB  F00E         	call	_decimal_to_bcd
  8276  001BF2  6E1A               	movwf	DS3231_Write@value,c
  8277  001BF4  0E06               	movlw	6
  8278  001BF6  EF9A  F00F         	goto	_DS3231_Write
  8279  001BFA                     __end_of_setDate:
  8280                           	opt stack 0
  8281                           tosu	equ	0xFFF
  8282                           tosh	equ	0xFFE
  8283                           tosl	equ	0xFFD
  8284                           pclath	equ	0xFFA
  8285                           tblptru	equ	0xFF8
  8286                           tblptrh	equ	0xFF7
  8287                           tblptrl	equ	0xFF6
  8288                           tablat	equ	0xFF5
  8289                           prodh	equ	0xFF4
  8290                           prodl	equ	0xFF3
  8291                           intcon	equ	0xFF2
  8292                           intcon2	equ	0xFF1
  8293                           postinc0	equ	0xFEE
  8294                           wreg	equ	0xFE8
  8295                           indf1	equ	0xFE7
  8296                           plusw1	equ	0xFE3
  8297                           fsr1h	equ	0xFE2
  8298                           fsr1l	equ	0xFE1
  8299                           indf2	equ	0xFDF
  8300                           postinc2	equ	0xFDE
  8301                           postdec2	equ	0xFDD
  8302                           plusw2	equ	0xFDB
  8303                           fsr2h	equ	0xFDA
  8304                           fsr2l	equ	0xFD9
  8305                           status	equ	0xFD8
  8306                           
  8307 ;; *************** function _decimal_to_bcd *****************
  8308 ;; Defined at:
  8309 ;;		line 10 in file "ds3231.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  d               1    wreg     unsigned char 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  d               1   24[COMRAM] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  1    wreg      unsigned char 
  8316 ;; Registers used:
  8317 ;;		wreg, status,2, status,0, cstack
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;Total ram usage:        3 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    4
  8330 ;; This function calls:
  8331 ;;		___lbdiv
  8332 ;;		___lbmod
  8333 ;; This function is called by:
  8334 ;;		_setTime
  8335 ;;		_setDate
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           	psect	text30
  8340  001DD6                     __ptext30:
  8341                           	opt stack 0
  8342  001DD6                     _decimal_to_bcd:
  8343                           	opt stack 23
  8344                           
  8345                           ;incstack = 0
  8346                           ;decimal_to_bcd@d stored from wreg
  8347  001DD6  6E19               	movwf	decimal_to_bcd@d,c
  8348                           
  8349                           ;ds3231.c: 12: return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
  8350  001DD8  0E0A               	movlw	10
  8351  001DDA  6E13               	movwf	___lbmod@divisor,c
  8352  001DDC  5019               	movf	decimal_to_bcd@d,w,c
  8353  001DDE  ECFE  F00E         	call	___lbmod
  8354  001DE2  6E17               	movwf	??_decimal_to_bcd& (0+255),c
  8355  001DE4  0E0F               	movlw	15
  8356  001DE6  1617               	andwf	??_decimal_to_bcd,f,c
  8357  001DE8  0E0A               	movlw	10
  8358  001DEA  6E0F               	movwf	___lbdiv@divisor,c
  8359  001DEC  5019               	movf	decimal_to_bcd@d,w,c
  8360  001DEE  EC50  F00E         	call	___lbdiv
  8361  001DF2  6E18               	movwf	(??_decimal_to_bcd+1)& (0+255),c
  8362  001DF4  3818               	swapf	??_decimal_to_bcd+1,w,c
  8363  001DF6  0BF0               	andlw	240
  8364  001DF8  1017               	iorwf	??_decimal_to_bcd,w,c
  8365  001DFA  0012               	return		;funcret
  8366  001DFC                     __end_of_decimal_to_bcd:
  8367                           	opt stack 0
  8368                           tosu	equ	0xFFF
  8369                           tosh	equ	0xFFE
  8370                           tosl	equ	0xFFD
  8371                           pclath	equ	0xFFA
  8372                           tblptru	equ	0xFF8
  8373                           tblptrh	equ	0xFF7
  8374                           tblptrl	equ	0xFF6
  8375                           tablat	equ	0xFF5
  8376                           prodh	equ	0xFF4
  8377                           prodl	equ	0xFF3
  8378                           intcon	equ	0xFF2
  8379                           intcon2	equ	0xFF1
  8380                           postinc0	equ	0xFEE
  8381                           wreg	equ	0xFE8
  8382                           indf1	equ	0xFE7
  8383                           plusw1	equ	0xFE3
  8384                           fsr1h	equ	0xFE2
  8385                           fsr1l	equ	0xFE1
  8386                           indf2	equ	0xFDF
  8387                           postinc2	equ	0xFDE
  8388                           postdec2	equ	0xFDD
  8389                           plusw2	equ	0xFDB
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function _DS3231_Write *****************
  8395 ;; Defined at:
  8396 ;;		line 30 in file "ds3231.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  address         1    wreg     unsigned char 
  8399 ;;  value           1   25[COMRAM] unsigned char 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  address         1   26[COMRAM] unsigned char 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      void 
  8404 ;; Registers used:
  8405 ;;		wreg, status,2, status,0, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8411 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;Total ram usage:        2 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    5
  8418 ;; This function calls:
  8419 ;;		_I2C_Master_Start
  8420 ;;		_I2C_Master_Stop
  8421 ;;		_I2C_Master_Write
  8422 ;; This function is called by:
  8423 ;;		_DS3231_init
  8424 ;;		_setTime
  8425 ;;		_setDate
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           	psect	text31
  8430  001F34                     __ptext31:
  8431                           	opt stack 0
  8432  001F34                     _DS3231_Write:
  8433                           	opt stack 23
  8434                           
  8435                           ;incstack = 0
  8436                           ;DS3231_Write@address stored from wreg
  8437  001F34  6E1B               	movwf	DS3231_Write@address,c
  8438                           
  8439                           ;ds3231.c: 32: I2C_Master_Start();
  8440  001F36  EC35  F010         	call	_I2C_Master_Start	;wreg free
  8441                           
  8442                           ;ds3231.c: 33: I2C_Master_Write(0xD0);
  8443  001F3A  0ED0               	movlw	208
  8444  001F3C  EC2B  F010         	call	_I2C_Master_Write
  8445                           
  8446                           ;ds3231.c: 34: I2C_Master_Write(address);
  8447  001F40  501B               	movf	DS3231_Write@address,w,c
  8448  001F42  EC2B  F010         	call	_I2C_Master_Write
  8449                           
  8450                           ;ds3231.c: 35: I2C_Master_Write(value);
  8451  001F46  501A               	movf	DS3231_Write@value,w,c
  8452  001F48  EC2B  F010         	call	_I2C_Master_Write
  8453                           
  8454                           ;ds3231.c: 36: I2C_Master_Stop();
  8455  001F4C  EF31  F010         	goto	_I2C_Master_Stop	;wreg free
  8456  001F50                     __end_of_DS3231_Write:
  8457                           	opt stack 0
  8458                           tosu	equ	0xFFF
  8459                           tosh	equ	0xFFE
  8460                           tosl	equ	0xFFD
  8461                           pclath	equ	0xFFA
  8462                           tblptru	equ	0xFF8
  8463                           tblptrh	equ	0xFF7
  8464                           tblptrl	equ	0xFF6
  8465                           tablat	equ	0xFF5
  8466                           prodh	equ	0xFF4
  8467                           prodl	equ	0xFF3
  8468                           intcon	equ	0xFF2
  8469                           intcon2	equ	0xFF1
  8470                           postinc0	equ	0xFEE
  8471                           wreg	equ	0xFE8
  8472                           indf1	equ	0xFE7
  8473                           plusw1	equ	0xFE3
  8474                           fsr1h	equ	0xFE2
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           plusw2	equ	0xFDB
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _readTemp_Single *****************
  8485 ;; Defined at:
  8486 ;;		line 32 in file "ds18b20.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  buf             1   59[COMRAM] PTR unsigned int 
  8489 ;;		 -> temperature(2), 
  8490 ;;  time_flag       1   60[COMRAM] PTR unsigned char 
  8491 ;;		 -> time_flag(1), 
  8492 ;;  timer_val       1   61[COMRAM] PTR unsigned char 
  8493 ;;		 -> timer_val(1), 
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;  temp            2    3[BANK0 ] unsigned int 
  8496 ;;  i               1    2[BANK0 ] unsigned char 
  8497 ;;  tmp             1    1[BANK0 ] unsigned char 
  8498 ;;  fptmp           1    0[BANK0 ] unsigned char 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  1    wreg      unsigned char 
  8501 ;; Registers used:
  8502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8503 ;; Tracked objects:
  8504 ;;		On entry : 3F/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8508 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Totals:         5       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;Total ram usage:       10 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    6
  8515 ;; This function calls:
  8516 ;;		___lwdiv
  8517 ;;		___lwmod
  8518 ;;		_ow_reset
  8519 ;;		_printf
  8520 ;;		_read_byte
  8521 ;;		_write_byte
  8522 ;; This function is called by:
  8523 ;;		_time_led
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           	psect	text32
  8528  000C12                     __ptext32:
  8529                           	opt stack 0
  8530  000C12                     _readTemp_Single:
  8531                           	opt stack 22
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;ds18b20.c: 36: uint8_t i, tmp, fptmp;
  8535                           ;ds18b20.c: 38: switch(*time_flag)
  8536                           
  8537                           ;incstack = 0
  8538  000C12  D08C               	goto	l5668
  8539  000C14                     l5600:
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;ds18b20.c: 41: if (!ow_reset())
  8543  000C14  ECA4  F00D         	call	_ow_reset	;wreg free
  8544  000C18  0900               	iorlw	0
  8545  000C1A  A4D8               	btfss	status,2,c
  8546  000C1C  0012               	return	
  8547                           
  8548                           ;ds18b20.c: 42: {
  8549                           ;ds18b20.c: 49: write_byte(0xCC);
  8550  000C1E  0ECC               	movlw	204
  8551  000C20  ECFD  F00D         	call	_write_byte
  8552                           
  8553                           ;ds18b20.c: 50: write_byte(0x44);
  8554  000C24  0E44               	movlw	68
  8555  000C26  ECFD  F00D         	call	_write_byte
  8556                           
  8557                           ;ds18b20.c: 51: *timer_val = 0;
  8558  000C2A  503E               	movf	readTemp_Single@timer_val,w,c
  8559  000C2C  6ED9               	movwf	fsr2l,c
  8560  000C2E  6ADA               	clrf	fsr2h,c
  8561  000C30  6ADF               	clrf	indf2,c
  8562                           
  8563                           ;ds18b20.c: 52: *time_flag = 2;
  8564  000C32  503D               	movf	readTemp_Single@time_flag,w,c
  8565  000C34  6ED9               	movwf	fsr2l,c
  8566  000C36  6ADA               	clrf	fsr2h,c
  8567  000C38  0E02               	movlw	2
  8568  000C3A  6EDF               	movwf	indf2,c
  8569                           
  8570                           ;ds18b20.c: 53: T1CONbits.TMR1ON = 1;
  8571  000C3C  80CD               	bsf	4045,0,c	;volatile
  8572  000C3E  0C02               	retlw	2
  8573  000C40                     l5612:
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;ds18b20.c: 72: ow_reset();
  8577  000C40  ECA4  F00D         	call	_ow_reset	;wreg free
  8578                           
  8579                           ;ds18b20.c: 73: write_byte(0xCC);
  8580  000C44  0ECC               	movlw	204
  8581  000C46  ECFD  F00D         	call	_write_byte
  8582                           
  8583                           ;ds18b20.c: 74: write_byte(0xBE);
  8584  000C4A  0EBE               	movlw	190
  8585  000C4C  ECFD  F00D         	call	_write_byte
  8586                           
  8587                           ;ds18b20.c: 75: for(i=0; i<2; i++)
  8588  000C50  0100               	movlb	0	; () banked
  8589  000C52  6BAB               	clrf	readTemp_Single@i& (0+255),b
  8590  000C54                     l5624:
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;ds18b20.c: 76: {
  8594                           ;ds18b20.c: 77: scratch[i]= read_byte();
  8595  000C54  51AB               	movf	readTemp_Single@i& (0+255),w,b
  8596  000C56  0F80               	addlw	low _scratch
  8597  000C58  6ED9               	movwf	fsr2l,c
  8598  000C5A  6ADA               	clrf	fsr2h,c
  8599  000C5C  EC19  F00E         	call	_read_byte	;wreg free
  8600  000C60  6EDF               	movwf	indf2,c
  8601  000C62  0100               	movlb	0	; () banked
  8602  000C64  2BAB               	incf	readTemp_Single@i& (0+255),f,b
  8603                           
  8604                           ; BSR set to: 0
  8605  000C66  0E01               	movlw	1
  8606  000C68  65AB               	cpfsgt	readTemp_Single@i& (0+255),b
  8607  000C6A  D7F4               	goto	l5624
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;ds18b20.c: 78: }
  8611                           ;ds18b20.c: 80: temp =(((uint16_t)scratch[1])<<8)|((uint16_t)scratch[0]);
  8612  000C6C  5181               	movf	(_scratch+1)& (0+255),w,b
  8613  000C6E  6E3F               	movwf	??_readTemp_Single& (0+255),c
  8614  000C70  5180               	movf	_scratch& (0+255),w,b
  8615  000C72  6FAC               	movwf	readTemp_Single@temp& (0+255),b
  8616  000C74  C03F  F0AD         	movff	??_readTemp_Single,readTemp_Single@temp+1
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;ds18b20.c: 83: if (temp & 0x8000)
  8620  000C78  AFAD               	btfss	(readTemp_Single@temp+1)& (0+255),7,b
  8621  000C7A  D004               	goto	l5636
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;ds18b20.c: 86: minus=1;
  8625  000C7C  6DAC               	negf	readTemp_Single@temp& (0+255),b
  8626  000C7E  1FAD               	comf	(readTemp_Single@temp+1)& (0+255),f,b
  8627  000C80  B0D8               	btfsc	status,0,c
  8628  000C82  2BAD               	incf	(readTemp_Single@temp+1)& (0+255),f,b
  8629  000C84                     l5636:
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;ds18b20.c: 87: }
  8633                           ;ds18b20.c: 89: tmp = temp & 0x0f;
  8634  000C84  51AC               	movf	readTemp_Single@temp& (0+255),w,b
  8635  000C86  0B0F               	andlw	15
  8636  000C88  6FAA               	movwf	readTemp_Single@tmp& (0+255),b
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;ds18b20.c: 90: tmp = fract[tmp];
  8640  000C8A  0EF1               	movlw	low _fract
  8641  000C8C  25AA               	addwf	readTemp_Single@tmp& (0+255),w,b
  8642  000C8E  6EF6               	movwf	tblptrl,c
  8643  000C90  6AF7               	clrf	tblptrh,c
  8644  000C92  0EB8               	movlw	high _fract
  8645  000C94  22F7               	addwfc	tblptrh,f,c
  8646  000C96                     	if	0	;There are less than 3 active tblptr bytes
  8647  000C96                     	endif
  8648  000C96  0008               	tblrd		*
  8649  000C98  CFF5 F0AA          	movff	tablat,readTemp_Single@tmp
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;ds18b20.c: 91: temp = temp>>4;
  8653  000C9C  3BAC               	swapf	readTemp_Single@temp& (0+255),f,b
  8654  000C9E  3BAD               	swapf	(readTemp_Single@temp+1)& (0+255),f,b
  8655  000CA0  0E0F               	movlw	15
  8656  000CA2  17AC               	andwf	readTemp_Single@temp& (0+255),f,b
  8657  000CA4  51AD               	movf	(readTemp_Single@temp+1)& (0+255),w,b
  8658  000CA6  0BF0               	andlw	240
  8659  000CA8  13AC               	iorwf	readTemp_Single@temp& (0+255),f,b
  8660  000CAA  0E0F               	movlw	15
  8661  000CAC  17AD               	andwf	(readTemp_Single@temp+1)& (0+255),f,b
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;ds18b20.c: 92: temp = (temp & 0x00ff) * 10;
  8665  000CAE  51AC               	movf	readTemp_Single@temp& (0+255),w,b
  8666  000CB0  0D0A               	mullw	10
  8667  000CB2  CFF3 F0AC          	movff	prodl,readTemp_Single@temp
  8668  000CB6  CFF4 F0AD          	movff	prodh,readTemp_Single@temp+1
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;ds18b20.c: 93: temp = temp + tmp;
  8672  000CBA  51AA               	movf	readTemp_Single@tmp& (0+255),w,b
  8673  000CBC  27AC               	addwf	readTemp_Single@temp& (0+255),f,b
  8674  000CBE  0E00               	movlw	0
  8675  000CC0  23AD               	addwfc	(readTemp_Single@temp+1)& (0+255),f,b
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;ds18b20.c: 96: printf("Temperature: %d\n\r ", temp);
  8679  000CC2  0E01               	movlw	low STR_2
  8680  000CC4  6E33               	movwf	printf@f,c
  8681  000CC6  0EBF               	movlw	high STR_2
  8682  000CC8  6E34               	movwf	printf@f+1,c
  8683  000CCA  C0AC  F035         	movff	readTemp_Single@temp,?_printf+2
  8684  000CCE  C0AD  F036         	movff	readTemp_Single@temp+1,?_printf+3
  8685  000CD2  EC23  F00F         	call	_printf	;wreg free
  8686                           
  8687                           ;ds18b20.c: 99: fptmp = temp % 10;
  8688  000CD6  C0AC  F016         	movff	readTemp_Single@temp,___lwmod@dividend
  8689  000CDA  C0AD  F017         	movff	readTemp_Single@temp+1,___lwmod@dividend+1
  8690  000CDE  6A19               	clrf	___lwmod@divisor+1,c
  8691  000CE0  0E0A               	movlw	10
  8692  000CE2  6E18               	movwf	___lwmod@divisor,c
  8693  000CE4  EC85  F00D         	call	___lwmod	;wreg free
  8694  000CE8  5016               	movf	?___lwmod,w,c
  8695  000CEA  0100               	movlb	0	; () banked
  8696  000CEC  6FA9               	movwf	readTemp_Single@fptmp& (0+255),b
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;ds18b20.c: 100: temp = temp / 10;
  8700  000CEE  C0AC  F00F         	movff	readTemp_Single@temp,___lwdiv@dividend
  8701  000CF2  C0AD  F010         	movff	readTemp_Single@temp+1,___lwdiv@dividend+1
  8702  000CF6  6A12               	clrf	___lwdiv@divisor+1,c
  8703  000CF8  0E0A               	movlw	10
  8704  000CFA  6E11               	movwf	___lwdiv@divisor,c
  8705  000CFC  ECFA  F00C         	call	___lwdiv	;wreg free
  8706  000D00  C00F  F0AC         	movff	?___lwdiv,readTemp_Single@temp
  8707  000D04  C010  F0AD         	movff	?___lwdiv+1,readTemp_Single@temp+1
  8708                           
  8709                           ;ds18b20.c: 102: if (fptmp >=6) temp += 1;
  8710  000D08  0E05               	movlw	5
  8711  000D0A  0100               	movlb	0	; () banked
  8712  000D0C  65A9               	cpfsgt	readTemp_Single@fptmp& (0+255),b
  8713  000D0E  D002               	goto	l5656
  8714                           
  8715                           ; BSR set to: 0
  8716  000D10  4BAC               	infsnz	readTemp_Single@temp& (0+255),f,b
  8717  000D12  2BAD               	incf	(readTemp_Single@temp+1)& (0+255),f,b
  8718  000D14                     l5656:
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;ds18b20.c: 105: *buf = temp;
  8722  000D14  503C               	movf	readTemp_Single@buf,w,c
  8723  000D16  6ED9               	movwf	fsr2l,c
  8724  000D18  6ADA               	clrf	fsr2h,c
  8725  000D1A  C0AC  FFDE         	movff	readTemp_Single@temp,postinc2
  8726  000D1E  C0AD  FFDD         	movff	readTemp_Single@temp+1,postdec2
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;ds18b20.c: 106: *time_flag = 0;
  8730  000D22  503D               	movf	readTemp_Single@time_flag,w,c
  8731  000D24  6ED9               	movwf	fsr2l,c
  8732  000D26  6ADA               	clrf	fsr2h,c
  8733  000D28  6ADF               	clrf	indf2,c
  8734  000D2A  0C00               	retlw	0
  8735  000D2C                     l5668:
  8736                           
  8737                           ; BSR set to: 0
  8738  000D2C  503D               	movf	readTemp_Single@time_flag,w,c
  8739  000D2E  6ED9               	movwf	fsr2l,c
  8740  000D30  6ADA               	clrf	fsr2h,c
  8741  000D32  50DF               	movf	indf2,w,c
  8742                           
  8743                           ; Switch size 1, requested type "space"
  8744                           ; Number of cases is 3, Range of values is 0 to 2
  8745                           ; switch strategies available:
  8746                           ; Name         Instructions Cycles
  8747                           ; simple_byte           10     6 (average)
  8748                           ;	Chosen strategy is simple_byte
  8749  000D34  E101 D76E          	bz	l5600
  8750  000D38  0A01               	xorlw	1	; case 1
  8751  000D3A  E082               	bz	l5612
  8752  000D3C  0A03               	xorlw	3	; case 2
  8753  000D3E  0012               	return	
  8754  000D40                     __end_of_readTemp_Single:
  8755                           	opt stack 0
  8756                           tosu	equ	0xFFF
  8757                           tosh	equ	0xFFE
  8758                           tosl	equ	0xFFD
  8759                           pclath	equ	0xFFA
  8760                           tblptru	equ	0xFF8
  8761                           tblptrh	equ	0xFF7
  8762                           tblptrl	equ	0xFF6
  8763                           tablat	equ	0xFF5
  8764                           prodh	equ	0xFF4
  8765                           prodl	equ	0xFF3
  8766                           intcon	equ	0xFF2
  8767                           intcon2	equ	0xFF1
  8768                           postinc0	equ	0xFEE
  8769                           wreg	equ	0xFE8
  8770                           indf1	equ	0xFE7
  8771                           plusw1	equ	0xFE3
  8772                           fsr1h	equ	0xFE2
  8773                           fsr1l	equ	0xFE1
  8774                           indf2	equ	0xFDF
  8775                           postinc2	equ	0xFDE
  8776                           postdec2	equ	0xFDD
  8777                           plusw2	equ	0xFDB
  8778                           fsr2h	equ	0xFDA
  8779                           fsr2l	equ	0xFD9
  8780                           status	equ	0xFD8
  8781                           
  8782 ;; *************** function _write_byte *****************
  8783 ;; Defined at:
  8784 ;;		line 66 in file "onewire.c"
  8785 ;; Parameters:    Size  Location     Type
  8786 ;;  val             1    wreg     unsigned char 
  8787 ;; Auto vars:     Size  Location     Type
  8788 ;;  val             1   17[COMRAM] unsigned char 
  8789 ;;  i               1   19[COMRAM] unsigned char 
  8790 ;;  temp            1   18[COMRAM] unsigned char 
  8791 ;; Return value:  Size  Location     Type
  8792 ;;                  1    wreg      void 
  8793 ;; Registers used:
  8794 ;;		wreg, status,2, status,0, cstack
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8801 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8802 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8803 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8804 ;;Total ram usage:        5 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    4
  8807 ;; This function calls:
  8808 ;;		_write_bit
  8809 ;; This function is called by:
  8810 ;;		_init_ds18b20
  8811 ;;		_readTemp_Single
  8812 ;; This function uses a non-reentrant model
  8813 ;;
  8814                           
  8815                           	psect	text33
  8816  001BFA                     __ptext33:
  8817                           	opt stack 0
  8818  001BFA                     _write_byte:
  8819                           	opt stack 24
  8820                           
  8821                           ;incstack = 0
  8822                           ;write_byte@val stored from wreg
  8823  001BFA  6E12               	movwf	write_byte@val,c
  8824                           
  8825                           ;onewire.c: 68: uint8_t i;
  8826                           ;onewire.c: 69: uint8_t temp;
  8827                           ;onewire.c: 71: for (i=0;i<8;i++)
  8828  001BFC  6A14               	clrf	write_byte@i,c
  8829  001BFE                     l5196:
  8830                           
  8831                           ;onewire.c: 72: {
  8832                           ;onewire.c: 73: temp = val >> i;
  8833  001BFE  C014  F010         	movff	write_byte@i,??_write_byte
  8834  001C02  C012  F011         	movff	write_byte@val,??_write_byte+1
  8835  001C06  2A10               	incf	??_write_byte,f,c
  8836  001C08  D002               	goto	u3424
  8837  001C0A                     u3425:
  8838  001C0A  90D8               	bcf	status,0,c
  8839  001C0C  3211               	rrcf	??_write_byte+1,f,c
  8840  001C0E                     u3424:
  8841  001C0E  2E10               	decfsz	??_write_byte,f,c
  8842  001C10  D7FC               	goto	u3425
  8843  001C12  5011               	movf	??_write_byte+1,w,c
  8844  001C14  6E13               	movwf	write_byte@temp,c
  8845                           
  8846                           ;onewire.c: 74: temp &= 0x01;
  8847  001C16  0E01               	movlw	1
  8848  001C18  1613               	andwf	write_byte@temp,f,c
  8849                           
  8850                           ;onewire.c: 75: write_bit(temp);
  8851  001C1A  5013               	movf	write_byte@temp,w,c
  8852  001C1C  EC11  F00F         	call	_write_bit
  8853  001C20  2A14               	incf	write_byte@i,f,c
  8854  001C22  0E07               	movlw	7
  8855  001C24  6414               	cpfsgt	write_byte@i,c
  8856  001C26  D7EB               	goto	l5196
  8857                           
  8858                           ;onewire.c: 76: }
  8859                           ;onewire.c: 78: _delay((unsigned long)((105)*(40000000/4000000.0)));
  8860  001C28  0ED2               	movlw	210
  8861  001C2A                     u4507:
  8862  001C2A  D000               	nop2	
  8863  001C2C  2EE8               	decfsz	wreg,f,c
  8864  001C2E  D7FD               	bra	u4507
  8865  001C30  0012               	return		;funcret
  8866  001C32                     __end_of_write_byte:
  8867                           	opt stack 0
  8868                           tosu	equ	0xFFF
  8869                           tosh	equ	0xFFE
  8870                           tosl	equ	0xFFD
  8871                           pclath	equ	0xFFA
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodh	equ	0xFF4
  8877                           prodl	equ	0xFF3
  8878                           intcon	equ	0xFF2
  8879                           intcon2	equ	0xFF1
  8880                           postinc0	equ	0xFEE
  8881                           wreg	equ	0xFE8
  8882                           indf1	equ	0xFE7
  8883                           plusw1	equ	0xFE3
  8884                           fsr1h	equ	0xFE2
  8885                           fsr1l	equ	0xFE1
  8886                           indf2	equ	0xFDF
  8887                           postinc2	equ	0xFDE
  8888                           postdec2	equ	0xFDD
  8889                           plusw2	equ	0xFDB
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _write_bit *****************
  8895 ;; Defined at:
  8896 ;;		line 34 in file "onewire.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  bitval          1    wreg     unsigned char 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  bitval          1   14[COMRAM] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg, status,2, status,0, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;Total ram usage:        1 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    3
  8917 ;; This function calls:
  8918 ;;		Nothing
  8919 ;; This function is called by:
  8920 ;;		_write_byte
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text34
  8925  001E22                     __ptext34:
  8926                           	opt stack 0
  8927  001E22                     _write_bit:
  8928                           	opt stack 24
  8929                           
  8930                           ;incstack = 0
  8931                           ;write_bit@bitval stored from wreg
  8932  001E22  6E0F               	movwf	write_bit@bitval,c
  8933                           
  8934                           ;onewire.c: 36: PORTCbits.RC0 = 0;
  8935  001E24  9082               	bcf	3970,0,c	;volatile
  8936                           
  8937                           ;onewire.c: 37: TRISCbits.RC0 = 0;
  8938  001E26  9094               	bcf	3988,0,c	;volatile
  8939                           
  8940                           ;onewire.c: 38: if(bitval == 1) {
  8941  001E28  040F               	decf	write_bit@bitval,w,c
  8942  001E2A  E106               	bnz	l1004
  8943                           
  8944                           ;onewire.c: 39: _delay((unsigned long)((2)*(40000000/4000000.0)));
  8945  001E2C  0E06               	movlw	6
  8946  001E2E                     u4517:
  8947  001E2E  2EE8               	decfsz	wreg,f,c
  8948  001E30  D7FE               	bra	u4517
  8949  001E32  D000               	nop2	
  8950                           
  8951                           ;onewire.c: 40: PORTCbits.RC0 = 1;
  8952  001E34  8082               	bsf	3970,0,c	;volatile
  8953                           
  8954                           ;onewire.c: 41: TRISCbits.RC0 = 1;
  8955  001E36  8094               	bsf	3988,0,c	;volatile
  8956  001E38                     l1004:
  8957                           
  8958                           ;onewire.c: 42: }
  8959                           ;onewire.c: 43: _delay((unsigned long)((105)*(40000000/4000000.0)));
  8960  001E38  0ED2               	movlw	210
  8961  001E3A                     u4527:
  8962  001E3A  D000               	nop2	
  8963  001E3C  2EE8               	decfsz	wreg,f,c
  8964  001E3E  D7FD               	bra	u4527
  8965                           
  8966                           ;onewire.c: 44: PORTCbits.RC0 = 1;
  8967  001E40  8082               	bsf	3970,0,c	;volatile
  8968                           
  8969                           ;onewire.c: 45: TRISCbits.RC0 = 1;
  8970  001E42  8094               	bsf	3988,0,c	;volatile
  8971  001E44  0012               	return		;funcret
  8972  001E46                     __end_of_write_bit:
  8973                           	opt stack 0
  8974                           tosu	equ	0xFFF
  8975                           tosh	equ	0xFFE
  8976                           tosl	equ	0xFFD
  8977                           pclath	equ	0xFFA
  8978                           tblptru	equ	0xFF8
  8979                           tblptrh	equ	0xFF7
  8980                           tblptrl	equ	0xFF6
  8981                           tablat	equ	0xFF5
  8982                           prodh	equ	0xFF4
  8983                           prodl	equ	0xFF3
  8984                           intcon	equ	0xFF2
  8985                           intcon2	equ	0xFF1
  8986                           postinc0	equ	0xFEE
  8987                           wreg	equ	0xFE8
  8988                           indf1	equ	0xFE7
  8989                           plusw1	equ	0xFE3
  8990                           fsr1h	equ	0xFE2
  8991                           fsr1l	equ	0xFE1
  8992                           indf2	equ	0xFDF
  8993                           postinc2	equ	0xFDE
  8994                           postdec2	equ	0xFDD
  8995                           plusw2	equ	0xFDB
  8996                           fsr2h	equ	0xFDA
  8997                           fsr2l	equ	0xFD9
  8998                           status	equ	0xFD8
  8999                           
  9000 ;; *************** function _read_byte *****************
  9001 ;; Defined at:
  9002 ;;		line 50 in file "onewire.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;		None
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  i               1   17[COMRAM] unsigned char 
  9007 ;;  val             1   16[COMRAM] unsigned char 
  9008 ;; Return value:  Size  Location     Type
  9009 ;;                  1    wreg      unsigned char 
  9010 ;; Registers used:
  9011 ;;		wreg, status,2, status,0, cstack
  9012 ;; Tracked objects:
  9013 ;;		On entry : 3F/0
  9014 ;;		On exit  : 0/0
  9015 ;;		Unchanged: 0/0
  9016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;Total ram usage:        4 bytes
  9022 ;; Hardware stack levels used:    1
  9023 ;; Hardware stack levels required when called:    4
  9024 ;; This function calls:
  9025 ;;		_read_bit
  9026 ;; This function is called by:
  9027 ;;		_readTemp_Single
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           	psect	text35
  9032  001C32                     __ptext35:
  9033                           	opt stack 0
  9034  001C32                     _read_byte:
  9035                           	opt stack 23
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;onewire.c: 52: uint8_t i;
  9039                           ;onewire.c: 53: uint8_t val = 0;
  9040                           
  9041                           ;incstack = 0
  9042  001C32  6A11               	clrf	read_byte@val,c
  9043                           
  9044                           ;onewire.c: 55: for(i=0;i<8;i++)
  9045  001C34  6A12               	clrf	read_byte@i,c
  9046  001C36                     l5212:
  9047                           
  9048                           ;onewire.c: 56: {
  9049                           ;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  9050  001C36  ECA8  F00F         	call	_read_bit	;wreg free
  9051  001C3A  0900               	iorlw	0
  9052  001C3C  E00C               	bz	l5216
  9053  001C3E  C012  F00F         	movff	read_byte@i,??_read_byte
  9054  001C42  0E01               	movlw	1
  9055  001C44  6E10               	movwf	(??_read_byte+1)& (0+255),c
  9056  001C46  2A0F               	incf	??_read_byte,f,c
  9057  001C48  D002               	goto	u3454
  9058  001C4A                     u3455:
  9059  001C4A  90D8               	bcf	status,0,c
  9060  001C4C  3610               	rlcf	??_read_byte+1,f,c
  9061  001C4E                     u3454:
  9062  001C4E  2E0F               	decfsz	??_read_byte,f,c
  9063  001C50  D7FC               	goto	u3455
  9064  001C52  5010               	movf	??_read_byte+1,w,c
  9065  001C54  1211               	iorwf	read_byte@val,f,c
  9066  001C56                     l5216:
  9067                           
  9068                           ;onewire.c: 58: _delay((unsigned long)((120)*(40000000/4000000.0)));
  9069  001C56  0EF0               	movlw	240
  9070  001C58                     u4537:
  9071  001C58  D000               	nop2	
  9072  001C5A  2EE8               	decfsz	wreg,f,c
  9073  001C5C  D7FD               	bra	u4537
  9074  001C5E  2A12               	incf	read_byte@i,f,c
  9075  001C60  0E07               	movlw	7
  9076  001C62  6412               	cpfsgt	read_byte@i,c
  9077  001C64  D7E8               	goto	l5212
  9078                           
  9079                           ;onewire.c: 59: }
  9080                           ;onewire.c: 61: return val;
  9081  001C66  5011               	movf	read_byte@val,w,c
  9082  001C68  0012               	return		;funcret
  9083  001C6A                     __end_of_read_byte:
  9084                           	opt stack 0
  9085                           tosu	equ	0xFFF
  9086                           tosh	equ	0xFFE
  9087                           tosl	equ	0xFFD
  9088                           pclath	equ	0xFFA
  9089                           tblptru	equ	0xFF8
  9090                           tblptrh	equ	0xFF7
  9091                           tblptrl	equ	0xFF6
  9092                           tablat	equ	0xFF5
  9093                           prodh	equ	0xFF4
  9094                           prodl	equ	0xFF3
  9095                           intcon	equ	0xFF2
  9096                           intcon2	equ	0xFF1
  9097                           postinc0	equ	0xFEE
  9098                           wreg	equ	0xFE8
  9099                           indf1	equ	0xFE7
  9100                           plusw1	equ	0xFE3
  9101                           fsr1h	equ	0xFE2
  9102                           fsr1l	equ	0xFE1
  9103                           indf2	equ	0xFDF
  9104                           postinc2	equ	0xFDE
  9105                           postdec2	equ	0xFDD
  9106                           plusw2	equ	0xFDB
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111 ;; *************** function _read_bit *****************
  9112 ;; Defined at:
  9113 ;;		line 22 in file "onewire.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;		None
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;		None
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  1    wreg      unsigned char 
  9120 ;; Registers used:
  9121 ;;		wreg
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;Total ram usage:        0 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    3
  9134 ;; This function calls:
  9135 ;;		Nothing
  9136 ;; This function is called by:
  9137 ;;		_read_byte
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           	psect	text36
  9142  001F50                     __ptext36:
  9143                           	opt stack 0
  9144  001F50                     _read_bit:
  9145                           	opt stack 23
  9146                           
  9147                           ;onewire.c: 24: PORTCbits.RC0 = 0;
  9148                           
  9149                           ;incstack = 0
  9150  001F50  9082               	bcf	3970,0,c	;volatile
  9151                           
  9152                           ;onewire.c: 25: TRISCbits.RC0 = 0;
  9153  001F52  9094               	bcf	3988,0,c	;volatile
  9154                           
  9155                           ;onewire.c: 26: _delay((unsigned long)((1)*(40000000/4000000.0)));
  9156  001F54  0E03               	movlw	3
  9157  001F56                     u4547:
  9158  001F56  2EE8               	decfsz	wreg,f,c
  9159  001F58  D7FE               	bra	u4547
  9160  001F5A  F000               	nop	
  9161                           
  9162                           ;onewire.c: 27: PORTCbits.RC0 = 1;
  9163  001F5C  8082               	bsf	3970,0,c	;volatile
  9164                           
  9165                           ;onewire.c: 28: TRISCbits.RC0 = 1;
  9166  001F5E  8094               	bsf	3988,0,c	;volatile
  9167                           
  9168                           ;onewire.c: 29: _delay((unsigned long)((6)*(40000000/4000000.0)));
  9169  001F60  0E14               	movlw	20
  9170  001F62                     u4557:
  9171  001F62  2EE8               	decfsz	wreg,f,c
  9172  001F64  D7FE               	bra	u4557
  9173                           
  9174                           ;onewire.c: 30: return(PORTCbits.RC0);
  9175  001F66  B082               	btfsc	3970,0,c	;volatile
  9176  001F68  0C01               	retlw	1
  9177  001F6A  0C00               	retlw	0	;funcret
  9178  001F6C                     __end_of_read_bit:
  9179                           	opt stack 0
  9180                           tosu	equ	0xFFF
  9181                           tosh	equ	0xFFE
  9182                           tosl	equ	0xFFD
  9183                           pclath	equ	0xFFA
  9184                           tblptru	equ	0xFF8
  9185                           tblptrh	equ	0xFF7
  9186                           tblptrl	equ	0xFF6
  9187                           tablat	equ	0xFF5
  9188                           prodh	equ	0xFF4
  9189                           prodl	equ	0xFF3
  9190                           intcon	equ	0xFF2
  9191                           intcon2	equ	0xFF1
  9192                           postinc0	equ	0xFEE
  9193                           wreg	equ	0xFE8
  9194                           indf1	equ	0xFE7
  9195                           plusw1	equ	0xFE3
  9196                           fsr1h	equ	0xFE2
  9197                           fsr1l	equ	0xFE1
  9198                           indf2	equ	0xFDF
  9199                           postinc2	equ	0xFDE
  9200                           postdec2	equ	0xFDD
  9201                           plusw2	equ	0xFDB
  9202                           fsr2h	equ	0xFDA
  9203                           fsr2l	equ	0xFD9
  9204                           status	equ	0xFD8
  9205                           
  9206 ;; *************** function _printf *****************
  9207 ;; Defined at:
  9208 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\printf.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;  f               2   50[COMRAM] PTR const unsigned char 
  9211 ;;		 -> STR_33(9), STR_32(10), STR_31(10), STR_30(10), 
  9212 ;;		 -> STR_29(10), STR_28(10), STR_27(10), STR_26(10), 
  9213 ;;		 -> STR_25(9), STR_24(9), STR_23(9), STR_22(10), 
  9214 ;;		 -> STR_21(9), STR_20(9), STR_19(9), STR_18(9), 
  9215 ;;		 -> STR_17(16), STR_16(9), STR_15(9), STR_14(9), 
  9216 ;;		 -> STR_13(9), STR_12(9), STR_11(9), STR_10(9), 
  9217 ;;		 -> STR_9(9), STR_8(10), STR_7(10), STR_6(10), 
  9218 ;;		 -> STR_5(10), STR_4(10), STR_3(10), STR_2(19), 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;  pb              4   55[COMRAM] struct __prbuf
  9221 ;;  ap              1   54[COMRAM] PTR void [1]
  9222 ;;		 -> ?_sprintf(2), ?_printf(2), 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  2   50[COMRAM] int 
  9225 ;; Registers used:
  9226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;Total ram usage:        9 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    5
  9239 ;; This function calls:
  9240 ;;		__doprnt
  9241 ;; This function is called by:
  9242 ;;		_readTemp_Single
  9243 ;;		_bmp085Calibration
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text37
  9248  001E46                     __ptext37:
  9249                           	opt stack 0
  9250  001E46                     _printf:
  9251                           	opt stack 23
  9252                           
  9253                           ;incstack = 0
  9254  001E46  6A38               	clrf	printf@pb,c
  9255  001E48  6A39               	clrf	printf@pb+1,c
  9256  001E4A  0E4A               	movlw	low _putch
  9257  001E4C  6E3A               	movwf	printf@pb+2,c
  9258  001E4E  0E20               	movlw	high _putch
  9259  001E50  6E3B               	movwf	printf@pb+3,c
  9260  001E52  0E35               	movlw	low (?_printf+2)
  9261  001E54  6E37               	movwf	printf@ap,c
  9262                           
  9263                           ;	Return value of _printf is never used
  9264  001E56  0E38               	movlw	low printf@pb
  9265  001E58  6E25               	movwf	__doprnt@pb,c
  9266  001E5A  C033  F026         	movff	printf@f,__doprnt@f
  9267  001E5E  C034  F027         	movff	printf@f+1,__doprnt@f+1
  9268  001E62  0E37               	movlw	low printf@ap
  9269  001E64  6E28               	movwf	__doprnt@ap,c
  9270  001E66  EF09  F000         	goto	__doprnt	;wreg free
  9271  001E6A                     __end_of_printf:
  9272                           	opt stack 0
  9273                           tosu	equ	0xFFF
  9274                           tosh	equ	0xFFE
  9275                           tosl	equ	0xFFD
  9276                           pclath	equ	0xFFA
  9277                           tblptru	equ	0xFF8
  9278                           tblptrh	equ	0xFF7
  9279                           tblptrl	equ	0xFF6
  9280                           tablat	equ	0xFF5
  9281                           prodh	equ	0xFF4
  9282                           prodl	equ	0xFF3
  9283                           intcon	equ	0xFF2
  9284                           intcon2	equ	0xFF1
  9285                           postinc0	equ	0xFEE
  9286                           wreg	equ	0xFE8
  9287                           indf1	equ	0xFE7
  9288                           plusw1	equ	0xFE3
  9289                           fsr1h	equ	0xFE2
  9290                           fsr1l	equ	0xFE1
  9291                           indf2	equ	0xFDF
  9292                           postinc2	equ	0xFDE
  9293                           postdec2	equ	0xFDD
  9294                           plusw2	equ	0xFDB
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function __doprnt *****************
  9300 ;; Defined at:
  9301 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;  pb              1   36[COMRAM] PTR struct __prbuf
  9304 ;;		 -> sprintf@pb(4), printf@pb(4), 
  9305 ;;  f               2   37[COMRAM] PTR const unsigned char 
  9306 ;;		 -> STR_33(9), STR_32(10), STR_31(10), STR_30(10), 
  9307 ;;		 -> STR_29(10), STR_28(10), STR_27(10), STR_26(10), 
  9308 ;;		 -> STR_25(9), STR_24(9), STR_23(9), STR_22(10), 
  9309 ;;		 -> STR_21(9), STR_20(9), STR_19(9), STR_18(9), 
  9310 ;;		 -> STR_17(16), STR_16(9), STR_15(9), STR_14(9), 
  9311 ;;		 -> STR_13(9), STR_12(9), STR_11(9), STR_10(9), 
  9312 ;;		 -> STR_9(9), STR_8(10), STR_7(10), STR_6(10), 
  9313 ;;		 -> STR_5(10), STR_4(10), STR_3(10), STR_2(19), 
  9314 ;;		 -> STR_1(22), 
  9315 ;;  ap              1   39[COMRAM] PTR PTR void 
  9316 ;;		 -> sprintf@ap(1), printf@ap(1), 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;  val             4   44[COMRAM] unsigned long 
  9319 ;;  tmpval          4    0        struct .
  9320 ;;  cp              3    0        PTR const unsigned char 
  9321 ;;  prec            2   42[COMRAM] int 
  9322 ;;  len             2    0        unsigned int 
  9323 ;;  c               1   49[COMRAM] char 
  9324 ;;  flag            1   48[COMRAM] unsigned char 
  9325 ;; Return value:  Size  Location     Type
  9326 ;;                  2   36[COMRAM] int 
  9327 ;; Registers used:
  9328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9329 ;; Tracked objects:
  9330 ;;		On entry : 0/0
  9331 ;;		On exit  : 0/0
  9332 ;;		Unchanged: 0/0
  9333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9334 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9338 ;;Total ram usage:       14 bytes
  9339 ;; Hardware stack levels used:    1
  9340 ;; Hardware stack levels required when called:    4
  9341 ;; This function calls:
  9342 ;;		Absolute function
  9343 ;;		___lldiv
  9344 ;;		___llmod
  9345 ;;		_putch
  9346 ;; This function is called by:
  9347 ;;		_printf
  9348 ;;		_sprintf
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           	psect	text38
  9353  000012                     __ptext38:
  9354                           	opt stack 0
  9355  000012                     __doprnt:
  9356                           	opt stack 23
  9357                           
  9358                           ;doprnt.c: 499: signed char c;
  9359                           ;doprnt.c: 504: int prec;
  9360                           ;doprnt.c: 508: unsigned char flag;
  9361                           ;doprnt.c: 523: union {
  9362                           ;doprnt.c: 524: unsigned long vd;
  9363                           ;doprnt.c: 525: double integ;
  9364                           ;doprnt.c: 526: } tmpval;
  9365                           ;doprnt.c: 528: unsigned long val;
  9366                           ;doprnt.c: 529: unsigned len;
  9367                           ;doprnt.c: 530: const char * cp;
  9368                           ;doprnt.c: 536: while(c = *f++) {
  9369                           
  9370                           ;incstack = 0
  9371  000012  D0E8               	goto	l5086
  9372  000014                     l5014:
  9373                           
  9374                           ;doprnt.c: 538: if(c != '%')
  9375  000014  0E25               	movlw	37
  9376  000016  1832               	xorwf	__doprnt@c,w,c
  9377  000018  E017               	bz	l1190
  9378                           
  9379                           ;doprnt.c: 540: {
  9380                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  9381  00001A  D907               	call	PL44	;call to abstracted procedure
  9382  00001C  50DE               	movf	postinc2,w,c
  9383  00001E  10DE               	iorwf	postinc2,w,c
  9384  000020  E00E               	bz	l5020
  9385  000022  D903               	call	PL44	;call to abstracted procedure
  9386  000024  D801               	call	u3208
  9387  000026  D0DE               	goto	l5086
  9388  000028                     u3208:
  9389  000028  0005               	push	
  9390  00002A  6EFA               	movwf	pclath,c
  9391  00002C  50DE               	movf	postinc2,w,c
  9392  00002E  6EFD               	movwf	tosl,c
  9393  000030  50DE               	movf	postinc2,w,c
  9394  000032  6EFE               	movwf	tosh,c
  9395  000034  50F8               	movf	tblptru,w,c
  9396  000036  6EFF               	movwf	tosu,c
  9397  000038  50FA               	movf	pclath,w,c
  9398  00003A  5032               	movf	__doprnt@c,w,c
  9399  00003C  0012               	return		;indir
  9400  00003E                     l5020:
  9401  00003E  D8D8               	call	PL34	;call to abstracted procedure
  9402  000040  C032  FFDF         	movff	__doprnt@c,indf2
  9403  000044  D903               	call	PL48	;call to abstracted procedure
  9404  000046  D0CE               	goto	l5086
  9405  000048                     l1190:
  9406                           
  9407                           ;doprnt.c: 543: }
  9408                           ;doprnt.c: 548: flag = 0;
  9409  000048  6A31               	clrf	__doprnt@flag,c
  9410  00004A  D004               	goto	l5030
  9411  00004C                     l5024:
  9412                           
  9413                           ;doprnt.c: 643: flag |= 0x10;
  9414  00004C  8831               	bsf	__doprnt@flag,4,c
  9415                           
  9416                           ;doprnt.c: 644: goto loop;
  9417  00004E  D002               	goto	l5030
  9418  000050                     l5026:
  9419                           
  9420                           ;doprnt.c: 818: flag |= 0x40;
  9421  000050  8C31               	bsf	__doprnt@flag,6,c
  9422                           
  9423                           ;doprnt.c: 819: break;
  9424  000052  D00C               	goto	l1200
  9425  000054                     l5030:
  9426  000054  D8F0               	call	PL46	;call to abstracted procedure
  9427                           
  9428                           ; Switch size 1, requested type "space"
  9429                           ; Number of cases is 5, Range of values is 0 to 117
  9430                           ; switch strategies available:
  9431                           ; Name         Instructions Cycles
  9432                           ; simple_byte           16     9 (average)
  9433                           ;	Chosen strategy is simple_byte
  9434  000056  E101 D0C8          	bz	l1196
  9435  00005A  0A64               	xorlw	100	; case 100
  9436  00005C  E007               	bz	l1200
  9437  00005E  0A0D               	xorlw	13	; case 105
  9438  000060  E005               	bz	l1200
  9439  000062  0A05               	xorlw	5	; case 108
  9440  000064  E0F3               	bz	l5024
  9441  000066  0A19               	xorlw	25	; case 117
  9442  000068  E0F3               	bz	l5026
  9443  00006A  D0BC               	goto	l5086
  9444  00006C                     l1200:
  9445                           
  9446                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  9447  00006C  BC31               	btfsc	__doprnt@flag,6,c
  9448  00006E  D01B               	goto	l1203
  9449                           
  9450                           ;doprnt.c: 1253: {
  9451                           ;doprnt.c: 1255: if(flag & 0x10)
  9452  000070  A831               	btfss	__doprnt@flag,4,c
  9453  000072  D002               	goto	l5036
  9454                           
  9455                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  9456  000074  D8C9               	call	PL40	;call to abstracted procedure
  9457  000076  D00A               	goto	l5038
  9458  000078                     l5036:
  9459                           
  9460                           ;doprnt.c: 1257: else
  9461                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  9462  000078  D8F0               	call	PL50	;call to abstracted procedure
  9463  00007A  CFDE F02D          	movff	postinc2,__doprnt@val
  9464  00007E  CFDD F02E          	movff	postdec2,__doprnt@val+1
  9465  000082  0E00               	movlw	0
  9466  000084  BE2E               	btfsc	__doprnt@val+1,7,c
  9467  000086  0EFF               	movlw	-1
  9468  000088  6E2F               	movwf	__doprnt@val+2,c
  9469  00008A  6E30               	movwf	__doprnt@val+3,c
  9470  00008C                     l5038:
  9471                           
  9472                           ;doprnt.c: 1261: if((long)val < 0) {
  9473  00008C  AE30               	btfss	__doprnt@val+3,7,c
  9474  00008E  D01A               	goto	l5048
  9475                           
  9476                           ;doprnt.c: 1262: flag |= 0x03;
  9477  000090  0E03               	movlw	3
  9478  000092  1231               	iorwf	__doprnt@flag,f,c
  9479                           
  9480                           ;doprnt.c: 1263: val = -val;
  9481  000094  1E30               	comf	__doprnt@val+3,f,c
  9482  000096  1E2F               	comf	__doprnt@val+2,f,c
  9483  000098  1E2E               	comf	__doprnt@val+1,f,c
  9484  00009A  6C2D               	negf	__doprnt@val,c
  9485  00009C  0E00               	movlw	0
  9486  00009E  222E               	addwfc	__doprnt@val+1,f,c
  9487  0000A0  222F               	addwfc	__doprnt@val+2,f,c
  9488  0000A2  2230               	addwfc	__doprnt@val+3,f,c
  9489  0000A4  D00F               	goto	l5048
  9490  0000A6                     l1203:
  9491                           
  9492                           ;doprnt.c: 1268: else
  9493                           ;doprnt.c: 1273: {
  9494                           ;doprnt.c: 1281: if(flag & 0x10)
  9495  0000A6  A831               	btfss	__doprnt@flag,4,c
  9496  0000A8  D002               	goto	l5046
  9497                           
  9498                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  9499  0000AA  D8AE               	call	PL40	;call to abstracted procedure
  9500  0000AC  D00B               	goto	l5048
  9501  0000AE                     l5046:
  9502                           
  9503                           ;doprnt.c: 1283: else
  9504                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9505  0000AE  D8D5               	call	PL50	;call to abstracted procedure
  9506  0000B0  CFDE F029          	movff	postinc2,??__doprnt
  9507  0000B4  CFDD F02A          	movff	postdec2,??__doprnt+1
  9508  0000B8  C029  F02D         	movff	??__doprnt,__doprnt@val
  9509  0000BC  C02A  F02E         	movff	??__doprnt+1,__doprnt@val+1
  9510  0000C0  6A2F               	clrf	__doprnt@val+2,c
  9511  0000C2  6A30               	clrf	__doprnt@val+3,c
  9512  0000C4                     l5048:
  9513                           
  9514                           ;doprnt.c: 1287: }
  9515                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9516  0000C4  0E01               	movlw	1
  9517  0000C6  6E32               	movwf	__doprnt@c,c
  9518  0000C8                     l5054:
  9519                           
  9520                           ;doprnt.c: 1306: if(val < dpowers[c])
  9521  0000C8  5032               	movf	__doprnt@c,w,c
  9522  0000CA  0D04               	mullw	4
  9523  0000CC  0EAD               	movlw	low _dpowers
  9524  0000CE  24F3               	addwf	prodl,w,c
  9525  0000D0  6EF6               	movwf	tblptrl,c
  9526  0000D2  0EB8               	movlw	high _dpowers
  9527  0000D4  20F4               	addwfc	prodh,w,c
  9528  0000D6  6EF7               	movwf	tblptrh,c
  9529  0000D8                     	if	0	;There are less than 3 active tblptr bytes
  9530  0000D8                     	endif
  9531  0000D8  0009               	tblrd		*+
  9532  0000DA  50F5               	movf	tablat,w,c
  9533  0000DC  5C2D               	subwf	__doprnt@val,w,c
  9534  0000DE  0009               	tblrd		*+
  9535  0000E0  50F5               	movf	tablat,w,c
  9536  0000E2  582E               	subwfb	__doprnt@val+1,w,c
  9537  0000E4  0009               	tblrd		*+
  9538  0000E6  50F5               	movf	tablat,w,c
  9539  0000E8  582F               	subwfb	__doprnt@val+2,w,c
  9540  0000EA  0009               	tblrd		*+
  9541  0000EC  50F5               	movf	tablat,w,c
  9542  0000EE  5830               	subwfb	__doprnt@val+3,w,c
  9543  0000F0  E304               	bnc	l5062
  9544  0000F2  2A32               	incf	__doprnt@c,f,c
  9545  0000F4  0E0A               	movlw	10
  9546  0000F6  1832               	xorwf	__doprnt@c,w,c
  9547  0000F8  E1E7               	bnz	l5054
  9548  0000FA                     l5062:
  9549                           
  9550                           ;doprnt.c: 1422: {
  9551                           ;doprnt.c: 1438: if(flag & 0x03)
  9552  0000FA  C031  F029         	movff	__doprnt@flag,??__doprnt
  9553  0000FE  0E03               	movlw	3
  9554  000100  1629               	andwf	??__doprnt,f,c
  9555  000102  E015               	bz	l5072
  9556                           
  9557                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  9558  000104  D892               	call	PL44	;call to abstracted procedure
  9559  000106  50DE               	movf	postinc2,w,c
  9560  000108  10DE               	iorwf	postinc2,w,c
  9561  00010A  E00D               	bz	l5068
  9562  00010C  D88E               	call	PL44	;call to abstracted procedure
  9563  00010E  D801               	call	u3298
  9564  000110  D00E               	goto	l5072
  9565  000112                     u3298:
  9566  000112  0005               	push	
  9567  000114  6EFA               	movwf	pclath,c
  9568  000116  50DE               	movf	postinc2,w,c
  9569  000118  6EFD               	movwf	tosl,c
  9570  00011A  50DE               	movf	postinc2,w,c
  9571  00011C  6EFE               	movwf	tosh,c
  9572  00011E  50F8               	movf	tblptru,w,c
  9573  000120  6EFF               	movwf	tosu,c
  9574  000122  50FA               	movf	pclath,w,c
  9575  000124  0C2D               	retlw	45	;indir
  9576  000126                     l5068:
  9577  000126  D864               	call	PL34	;call to abstracted procedure
  9578  000128  0E2D               	movlw	45
  9579  00012A  6EDF               	movwf	indf2,c
  9580  00012C  D88F               	call	PL48	;call to abstracted procedure
  9581  00012E                     l5072:
  9582                           
  9583                           ;doprnt.c: 1469: }
  9584                           ;doprnt.c: 1472: prec = c;
  9585  00012E  5032               	movf	__doprnt@c,w,c
  9586  000130  6E2B               	movwf	__doprnt@prec,c
  9587  000132  6A2C               	clrf	__doprnt@prec+1,c
  9588  000134  BE2B               	btfsc	__doprnt@prec,7,c
  9589  000136  062C               	decf	__doprnt@prec+1,f,c
  9590                           
  9591                           ;doprnt.c: 1474: while(prec--) {
  9592  000138  D04E               	goto	l5084
  9593  00013A                     l5074:
  9594                           
  9595                           ;doprnt.c: 1478: {
  9596                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9597  00013A  C02B  F029         	movff	__doprnt@prec,??__doprnt
  9598  00013E  C02C  F02A         	movff	__doprnt@prec+1,??__doprnt+1
  9599  000142  90D8               	bcf	status,0,c
  9600  000144  3629               	rlcf	??__doprnt,f,c
  9601  000146  362A               	rlcf	??__doprnt+1,f,c
  9602  000148  90D8               	bcf	status,0,c
  9603  00014A  3629               	rlcf	??__doprnt,f,c
  9604  00014C  362A               	rlcf	??__doprnt+1,f,c
  9605  00014E  0EAD               	movlw	low _dpowers
  9606  000150  2429               	addwf	??__doprnt,w,c
  9607  000152  6EF6               	movwf	tblptrl,c
  9608  000154  0EB8               	movlw	high _dpowers
  9609  000156  202A               	addwfc	??__doprnt+1,w,c
  9610  000158  6EF7               	movwf	tblptrh,c
  9611  00015A                     	if	0	;There are less than 3 active tblptr bytes
  9612  00015A                     	endif
  9613  00015A  0009               	tblrd		*+
  9614  00015C  CFF5 F013          	movff	tablat,___lldiv@divisor
  9615  000160  0009               	tblrd		*+
  9616  000162  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  9617  000166  0009               	tblrd		*+
  9618  000168  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  9619  00016C  000A               	tblrd		*-
  9620  00016E  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  9621  000172  C02D  F00F         	movff	__doprnt@val,___lldiv@dividend
  9622  000176  C02E  F010         	movff	__doprnt@val+1,___lldiv@dividend+1
  9623  00017A  C02F  F011         	movff	__doprnt@val+2,___lldiv@dividend+2
  9624  00017E  C030  F012         	movff	__doprnt@val+3,___lldiv@dividend+3
  9625  000182  EC3E  F00B         	call	___lldiv
  9626  000186  C00F  F01C         	movff	?___lldiv,___llmod@dividend
  9627  00018A  C010  F01D         	movff	?___lldiv+1,___llmod@dividend+1
  9628  00018E  C011  F01E         	movff	?___lldiv+2,___llmod@dividend+2
  9629  000192  C012  F01F         	movff	?___lldiv+3,___llmod@dividend+3
  9630  000196  0E0A               	movlw	10
  9631  000198  6E20               	movwf	___llmod@divisor,c
  9632  00019A  6A21               	clrf	___llmod@divisor+1,c
  9633  00019C  6A22               	clrf	___llmod@divisor+2,c
  9634  00019E  6A23               	clrf	___llmod@divisor+3,c
  9635  0001A0  EC19  F00C         	call	___llmod	;wreg free
  9636  0001A4  501C               	movf	?___llmod,w,c
  9637  0001A6  0F30               	addlw	48
  9638  0001A8  6E32               	movwf	__doprnt@c,c
  9639                           
  9640                           ;doprnt.c: 1523: }
  9641                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  9642  0001AA  D83F               	call	PL44	;call to abstracted procedure
  9643  0001AC  50DE               	movf	postinc2,w,c
  9644  0001AE  10DE               	iorwf	postinc2,w,c
  9645  0001B0  E00E               	bz	l5080
  9646  0001B2  D83B               	call	PL44	;call to abstracted procedure
  9647  0001B4  D801               	call	u3318
  9648  0001B6  D00F               	goto	l5084
  9649  0001B8                     u3318:
  9650  0001B8  0005               	push	
  9651  0001BA  6EFA               	movwf	pclath,c
  9652  0001BC  50DE               	movf	postinc2,w,c
  9653  0001BE  6EFD               	movwf	tosl,c
  9654  0001C0  50DE               	movf	postinc2,w,c
  9655  0001C2  6EFE               	movwf	tosh,c
  9656  0001C4  50F8               	movf	tblptru,w,c
  9657  0001C6  6EFF               	movwf	tosu,c
  9658  0001C8  50FA               	movf	pclath,w,c
  9659  0001CA  5032               	movf	__doprnt@c,w,c
  9660  0001CC  0012               	return		;indir
  9661  0001CE                     l5080:
  9662  0001CE  D810               	call	PL34	;call to abstracted procedure
  9663  0001D0  C032  FFDF         	movff	__doprnt@c,indf2
  9664  0001D4  D83B               	call	PL48	;call to abstracted procedure
  9665  0001D6                     l5084:
  9666  0001D6  062B               	decf	__doprnt@prec,f,c
  9667  0001D8  A0D8               	btfss	status,0,c
  9668  0001DA  062C               	decf	__doprnt@prec+1,f,c
  9669  0001DC  282B               	incf	__doprnt@prec,w,c
  9670  0001DE  E1AD               	bnz	l5074
  9671  0001E0  282C               	incf	__doprnt@prec+1,w,c
  9672  0001E2  E1AB               	bnz	l5074
  9673  0001E4                     l5086:
  9674  0001E4  D828               	call	PL46	;call to abstracted procedure
  9675  0001E6  E001 D715          	bnz	l5014
  9676  0001EA                     l1196:
  9677                           
  9678                           ;doprnt.c: 1540: return 0;
  9679  0001EA  6A25               	clrf	?__doprnt,c
  9680  0001EC  6A26               	clrf	?__doprnt+1,c
  9681  0001EE  0012               	return		;funcret
  9682  0001F0                     __end_of__doprnt:
  9683                           	opt stack 0
  9684  0001F0                     PL34:
  9685                           	opt stack 23
  9686  0001F0  5025               	movf	__doprnt@pb,w,c
  9687  0001F2  6ED9               	movwf	fsr2l,c
  9688  0001F4  6ADA               	clrf	fsr2h,c
  9689  0001F6  CFDE F029          	movff	postinc2,??__doprnt
  9690  0001FA  CFDD F02A          	movff	postdec2,??__doprnt+1
  9691  0001FE  C029  FFD9         	movff	??__doprnt,fsr2l
  9692  000202  C02A  FFDA         	movff	??__doprnt+1,fsr2h
  9693  000206  0012               	return	
  9694  000208                     __end_ofPL34:
  9695                           	opt stack 0
  9696  000208                     PL40:
  9697                           	opt stack 23
  9698  000208  5028               	movf	__doprnt@ap,w,c
  9699  00020A  6ED9               	movwf	fsr2l,c
  9700  00020C  6ADA               	clrf	fsr2h,c
  9701  00020E  0E04               	movlw	4
  9702  000210  26DF               	addwf	indf2,f,c
  9703  000212  5CDF               	subwf	indf2,w,c
  9704  000214  6ED9               	movwf	fsr2l,c
  9705  000216  6ADA               	clrf	fsr2h,c
  9706  000218  CFDE F02D          	movff	postinc2,__doprnt@val
  9707  00021C  CFDE F02E          	movff	postinc2,__doprnt@val+1
  9708  000220  CFDE F02F          	movff	postinc2,__doprnt@val+2
  9709  000224  CFDE F030          	movff	postinc2,__doprnt@val+3
  9710  000228  0012               	return	
  9711  00022A                     __end_ofPL40:
  9712                           	opt stack 0
  9713  00022A                     PL44:
  9714                           	opt stack 23
  9715  00022A  5025               	movf	__doprnt@pb,w,c
  9716  00022C  6ED9               	movwf	fsr2l,c
  9717  00022E  6ADA               	clrf	fsr2h,c
  9718  000230  0E02               	movlw	2
  9719  000232  26D9               	addwf	fsr2l,f,c
  9720  000234  0C02               	retlw	2
  9721  000236                     __end_ofPL44:
  9722                           	opt stack 0
  9723  000236                     PL46:
  9724                           	opt stack 23
  9725  000236  C026  FFF6         	movff	__doprnt@f,tblptrl
  9726  00023A  C027  FFF7         	movff	__doprnt@f+1,tblptrh
  9727  00023E  4A26               	infsnz	__doprnt@f,f,c
  9728  000240  2A27               	incf	__doprnt@f+1,f,c
  9729  000242                     	if	0	;tblptru may be non-zero
  9730  000242                     	endif
  9731  000242                     	if	0	;tblptru may be non-zero
  9732  000242                     	endif
  9733  000242  0008               	tblrd		*
  9734  000244  CFF5 F032          	movff	tablat,__doprnt@c
  9735  000248  5032               	movf	__doprnt@c,w,c
  9736  00024A  0012               	return	
  9737  00024C                     __end_ofPL46:
  9738                           	opt stack 0
  9739  00024C                     PL48:
  9740                           	opt stack 23
  9741  00024C  5025               	movf	__doprnt@pb,w,c
  9742  00024E  6ED9               	movwf	fsr2l,c
  9743  000250  6ADA               	clrf	fsr2h,c
  9744  000252  2ADE               	incf	postinc2,f,c
  9745  000254  0E00               	movlw	0
  9746  000256  22DD               	addwfc	postdec2,f,c
  9747  000258  0C00               	retlw	0
  9748  00025A                     __end_ofPL48:
  9749                           	opt stack 0
  9750  00025A                     PL50:
  9751                           	opt stack 23
  9752  00025A  5028               	movf	__doprnt@ap,w,c
  9753  00025C  6ED9               	movwf	fsr2l,c
  9754  00025E  6ADA               	clrf	fsr2h,c
  9755  000260  50DF               	movf	indf2,w,c
  9756  000262  2ADF               	incf	indf2,f,c
  9757  000264  2ADF               	incf	indf2,f,c
  9758  000266  6ED9               	movwf	fsr2l,c
  9759  000268  6ADA               	clrf	fsr2h,c
  9760  00026A  0012               	return	
  9761  00026C                     __end_ofPL50:
  9762                           	opt stack 0
  9763                           tosu	equ	0xFFF
  9764                           tosh	equ	0xFFE
  9765                           tosl	equ	0xFFD
  9766                           pclath	equ	0xFFA
  9767                           tblptru	equ	0xFF8
  9768                           tblptrh	equ	0xFF7
  9769                           tblptrl	equ	0xFF6
  9770                           tablat	equ	0xFF5
  9771                           prodh	equ	0xFF4
  9772                           prodl	equ	0xFF3
  9773                           intcon	equ	0xFF2
  9774                           intcon2	equ	0xFF1
  9775                           postinc0	equ	0xFEE
  9776                           wreg	equ	0xFE8
  9777                           indf1	equ	0xFE7
  9778                           plusw1	equ	0xFE3
  9779                           fsr1h	equ	0xFE2
  9780                           fsr1l	equ	0xFE1
  9781                           indf2	equ	0xFDF
  9782                           postinc2	equ	0xFDE
  9783                           postdec2	equ	0xFDD
  9784                           plusw2	equ	0xFDB
  9785                           fsr2h	equ	0xFDA
  9786                           fsr2l	equ	0xFD9
  9787                           status	equ	0xFD8
  9788                           
  9789 ;; *************** function _putch *****************
  9790 ;; Defined at:
  9791 ;;		line 5 in file "eusart.c"
  9792 ;; Parameters:    Size  Location     Type
  9793 ;;  data            1    wreg     unsigned char 
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;  data            1   14[COMRAM] unsigned char 
  9796 ;; Return value:  Size  Location     Type
  9797 ;;                  1    wreg      void 
  9798 ;; Registers used:
  9799 ;;		wreg
  9800 ;; Tracked objects:
  9801 ;;		On entry : 0/0
  9802 ;;		On exit  : 0/0
  9803 ;;		Unchanged: 0/0
  9804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9806 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9808 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9809 ;;Total ram usage:        1 bytes
  9810 ;; Hardware stack levels used:    1
  9811 ;; Hardware stack levels required when called:    3
  9812 ;; This function calls:
  9813 ;;		Nothing
  9814 ;; This function is called by:
  9815 ;;		_printf
  9816 ;;		__doprnt
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           	psect	text39
  9821  00204A                     __ptext39:
  9822                           	opt stack 0
  9823  00204A                     _putch:
  9824                           	opt stack 23
  9825                           
  9826                           ;incstack = 0
  9827                           ;putch@data stored from wreg
  9828  00204A  6E0F               	movwf	putch@data,c
  9829  00204C                     l1153:
  9830  00204C  A89E               	btfss	3998,4,c	;volatile
  9831  00204E  D7FE               	goto	l1153
  9832                           
  9833                           ;eusart.c: 9: TXREG = data;
  9834  002050  C00F  FFAD         	movff	putch@data,4013	;volatile
  9835  002054  0012               	return		;funcret
  9836  002056                     __end_of_putch:
  9837                           	opt stack 0
  9838                           tosu	equ	0xFFF
  9839                           tosh	equ	0xFFE
  9840                           tosl	equ	0xFFD
  9841                           pclath	equ	0xFFA
  9842                           tblptru	equ	0xFF8
  9843                           tblptrh	equ	0xFF7
  9844                           tblptrl	equ	0xFF6
  9845                           tablat	equ	0xFF5
  9846                           prodh	equ	0xFF4
  9847                           prodl	equ	0xFF3
  9848                           intcon	equ	0xFF2
  9849                           intcon2	equ	0xFF1
  9850                           postinc0	equ	0xFEE
  9851                           wreg	equ	0xFE8
  9852                           indf1	equ	0xFE7
  9853                           plusw1	equ	0xFE3
  9854                           fsr1h	equ	0xFE2
  9855                           fsr1l	equ	0xFE1
  9856                           indf2	equ	0xFDF
  9857                           postinc2	equ	0xFDE
  9858                           postdec2	equ	0xFDD
  9859                           plusw2	equ	0xFDB
  9860                           fsr2h	equ	0xFDA
  9861                           fsr2l	equ	0xFD9
  9862                           status	equ	0xFD8
  9863                           
  9864 ;; *************** function ___llmod *****************
  9865 ;; Defined at:
  9866 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;  dividend        4   27[COMRAM] unsigned long 
  9869 ;;  divisor         4   31[COMRAM] unsigned long 
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;  counter         1   35[COMRAM] unsigned char 
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  4   27[COMRAM] unsigned long 
  9874 ;; Registers used:
  9875 ;;		wreg, status,2, status,0
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9881 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;Total ram usage:        9 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    3
  9888 ;; This function calls:
  9889 ;;		Nothing
  9890 ;; This function is called by:
  9891 ;;		__doprnt
  9892 ;; This function uses a non-reentrant model
  9893 ;;
  9894                           
  9895                           	psect	text40
  9896  001832                     __ptext40:
  9897                           	opt stack 0
  9898  001832                     ___llmod:
  9899                           	opt stack 23
  9900                           
  9901                           ;incstack = 0
  9902  001832  5020               	movf	___llmod@divisor,w,c
  9903  001834  1021               	iorwf	___llmod@divisor+1,w,c
  9904  001836  1022               	iorwf	___llmod@divisor+2,w,c
  9905  001838  1023               	iorwf	___llmod@divisor+3,w,c
  9906  00183A  E023               	bz	l1582
  9907  00183C  0E01               	movlw	1
  9908  00183E  6E24               	movwf	___llmod@counter,c
  9909  001840  D006               	goto	l4934
  9910  001842                     l4932:
  9911  001842  90D8               	bcf	status,0,c
  9912  001844  3620               	rlcf	___llmod@divisor,f,c
  9913  001846  3621               	rlcf	___llmod@divisor+1,f,c
  9914  001848  3622               	rlcf	___llmod@divisor+2,f,c
  9915  00184A  3623               	rlcf	___llmod@divisor+3,f,c
  9916  00184C  2A24               	incf	___llmod@counter,f,c
  9917  00184E                     l4934:
  9918  00184E  AE23               	btfss	___llmod@divisor+3,7,c
  9919  001850  D7F8               	goto	l4932
  9920  001852                     l4936:
  9921  001852  5020               	movf	___llmod@divisor,w,c
  9922  001854  5C1C               	subwf	___llmod@dividend,w,c
  9923  001856  5021               	movf	___llmod@divisor+1,w,c
  9924  001858  581D               	subwfb	___llmod@dividend+1,w,c
  9925  00185A  5022               	movf	___llmod@divisor+2,w,c
  9926  00185C  581E               	subwfb	___llmod@dividend+2,w,c
  9927  00185E  5023               	movf	___llmod@divisor+3,w,c
  9928  001860  581F               	subwfb	___llmod@dividend+3,w,c
  9929  001862  E308               	bnc	l4940
  9930  001864  5020               	movf	___llmod@divisor,w,c
  9931  001866  5E1C               	subwf	___llmod@dividend,f,c
  9932  001868  5021               	movf	___llmod@divisor+1,w,c
  9933  00186A  5A1D               	subwfb	___llmod@dividend+1,f,c
  9934  00186C  5022               	movf	___llmod@divisor+2,w,c
  9935  00186E  5A1E               	subwfb	___llmod@dividend+2,f,c
  9936  001870  5023               	movf	___llmod@divisor+3,w,c
  9937  001872  5A1F               	subwfb	___llmod@dividend+3,f,c
  9938  001874                     l4940:
  9939  001874  90D8               	bcf	status,0,c
  9940  001876  3223               	rrcf	___llmod@divisor+3,f,c
  9941  001878  3222               	rrcf	___llmod@divisor+2,f,c
  9942  00187A  3221               	rrcf	___llmod@divisor+1,f,c
  9943  00187C  3220               	rrcf	___llmod@divisor,f,c
  9944  00187E  2E24               	decfsz	___llmod@counter,f,c
  9945  001880  D7E8               	goto	l4936
  9946  001882                     l1582:
  9947  001882  C01C  F01C         	movff	___llmod@dividend,?___llmod
  9948  001886  C01D  F01D         	movff	___llmod@dividend+1,?___llmod+1
  9949  00188A  C01E  F01E         	movff	___llmod@dividend+2,?___llmod+2
  9950  00188E  C01F  F01F         	movff	___llmod@dividend+3,?___llmod+3
  9951  001892  0012               	return		;funcret
  9952  001894                     __end_of___llmod:
  9953                           	opt stack 0
  9954                           tosu	equ	0xFFF
  9955                           tosh	equ	0xFFE
  9956                           tosl	equ	0xFFD
  9957                           pclath	equ	0xFFA
  9958                           tblptru	equ	0xFF8
  9959                           tblptrh	equ	0xFF7
  9960                           tblptrl	equ	0xFF6
  9961                           tablat	equ	0xFF5
  9962                           prodh	equ	0xFF4
  9963                           prodl	equ	0xFF3
  9964                           intcon	equ	0xFF2
  9965                           intcon2	equ	0xFF1
  9966                           postinc0	equ	0xFEE
  9967                           wreg	equ	0xFE8
  9968                           indf1	equ	0xFE7
  9969                           plusw1	equ	0xFE3
  9970                           fsr1h	equ	0xFE2
  9971                           fsr1l	equ	0xFE1
  9972                           indf2	equ	0xFDF
  9973                           postinc2	equ	0xFDE
  9974                           postdec2	equ	0xFDD
  9975                           plusw2	equ	0xFDB
  9976                           fsr2h	equ	0xFDA
  9977                           fsr2l	equ	0xFD9
  9978                           status	equ	0xFD8
  9979                           
  9980 ;; *************** function ___lldiv *****************
  9981 ;; Defined at:
  9982 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  9983 ;; Parameters:    Size  Location     Type
  9984 ;;  dividend        4   14[COMRAM] unsigned long 
  9985 ;;  divisor         4   18[COMRAM] unsigned long 
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;  quotient        4   22[COMRAM] unsigned long 
  9988 ;;  counter         1   26[COMRAM] unsigned char 
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  4   14[COMRAM] unsigned long 
  9991 ;; Registers used:
  9992 ;;		wreg, status,2, status,0
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9998 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;Total ram usage:       13 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; Hardware stack levels required when called:    3
 10005 ;; This function calls:
 10006 ;;		Nothing
 10007 ;; This function is called by:
 10008 ;;		__doprnt
 10009 ;; This function uses a non-reentrant model
 10010 ;;
 10011                           
 10012                           	psect	text41
 10013  00167C                     __ptext41:
 10014                           	opt stack 0
 10015  00167C                     ___lldiv:
 10016                           	opt stack 23
 10017                           
 10018                           ;incstack = 0
 10019  00167C  6A17               	clrf	___lldiv@quotient,c
 10020  00167E  6A18               	clrf	___lldiv@quotient+1,c
 10021  001680  6A19               	clrf	___lldiv@quotient+2,c
 10022  001682  6A1A               	clrf	___lldiv@quotient+3,c
 10023  001684  5013               	movf	___lldiv@divisor,w,c
 10024  001686  1014               	iorwf	___lldiv@divisor+1,w,c
 10025  001688  1015               	iorwf	___lldiv@divisor+2,w,c
 10026  00168A  1016               	iorwf	___lldiv@divisor+3,w,c
 10027  00168C  E029               	bz	l1572
 10028  00168E  0E01               	movlw	1
 10029  001690  6E1B               	movwf	___lldiv@counter,c
 10030  001692  D006               	goto	l4914
 10031  001694                     l4912:
 10032  001694  90D8               	bcf	status,0,c
 10033  001696  3613               	rlcf	___lldiv@divisor,f,c
 10034  001698  3614               	rlcf	___lldiv@divisor+1,f,c
 10035  00169A  3615               	rlcf	___lldiv@divisor+2,f,c
 10036  00169C  3616               	rlcf	___lldiv@divisor+3,f,c
 10037  00169E  2A1B               	incf	___lldiv@counter,f,c
 10038  0016A0                     l4914:
 10039  0016A0  AE16               	btfss	___lldiv@divisor+3,7,c
 10040  0016A2  D7F8               	goto	l4912
 10041  0016A4                     l4916:
 10042  0016A4  90D8               	bcf	status,0,c
 10043  0016A6  3617               	rlcf	___lldiv@quotient,f,c
 10044  0016A8  3618               	rlcf	___lldiv@quotient+1,f,c
 10045  0016AA  3619               	rlcf	___lldiv@quotient+2,f,c
 10046  0016AC  361A               	rlcf	___lldiv@quotient+3,f,c
 10047  0016AE  5013               	movf	___lldiv@divisor,w,c
 10048  0016B0  5C0F               	subwf	___lldiv@dividend,w,c
 10049  0016B2  5014               	movf	___lldiv@divisor+1,w,c
 10050  0016B4  5810               	subwfb	___lldiv@dividend+1,w,c
 10051  0016B6  5015               	movf	___lldiv@divisor+2,w,c
 10052  0016B8  5811               	subwfb	___lldiv@dividend+2,w,c
 10053  0016BA  5016               	movf	___lldiv@divisor+3,w,c
 10054  0016BC  5812               	subwfb	___lldiv@dividend+3,w,c
 10055  0016BE  E309               	bnc	l4924
 10056  0016C0  5013               	movf	___lldiv@divisor,w,c
 10057  0016C2  5E0F               	subwf	___lldiv@dividend,f,c
 10058  0016C4  5014               	movf	___lldiv@divisor+1,w,c
 10059  0016C6  5A10               	subwfb	___lldiv@dividend+1,f,c
 10060  0016C8  5015               	movf	___lldiv@divisor+2,w,c
 10061  0016CA  5A11               	subwfb	___lldiv@dividend+2,f,c
 10062  0016CC  5016               	movf	___lldiv@divisor+3,w,c
 10063  0016CE  5A12               	subwfb	___lldiv@dividend+3,f,c
 10064  0016D0  8017               	bsf	___lldiv@quotient,0,c
 10065  0016D2                     l4924:
 10066  0016D2  90D8               	bcf	status,0,c
 10067  0016D4  3216               	rrcf	___lldiv@divisor+3,f,c
 10068  0016D6  3215               	rrcf	___lldiv@divisor+2,f,c
 10069  0016D8  3214               	rrcf	___lldiv@divisor+1,f,c
 10070  0016DA  3213               	rrcf	___lldiv@divisor,f,c
 10071  0016DC  2E1B               	decfsz	___lldiv@counter,f,c
 10072  0016DE  D7E2               	goto	l4916
 10073  0016E0                     l1572:
 10074  0016E0  C017  F00F         	movff	___lldiv@quotient,?___lldiv
 10075  0016E4  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
 10076  0016E8  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
 10077  0016EC  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
 10078  0016F0  0012               	return		;funcret
 10079  0016F2                     __end_of___lldiv:
 10080                           	opt stack 0
 10081                           tosu	equ	0xFFF
 10082                           tosh	equ	0xFFE
 10083                           tosl	equ	0xFFD
 10084                           pclath	equ	0xFFA
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           intcon2	equ	0xFF1
 10093                           postinc0	equ	0xFEE
 10094                           wreg	equ	0xFE8
 10095                           indf1	equ	0xFE7
 10096                           plusw1	equ	0xFE3
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           postdec2	equ	0xFDD
 10102                           plusw2	equ	0xFDB
 10103                           fsr2h	equ	0xFDA
 10104                           fsr2l	equ	0xFD9
 10105                           status	equ	0xFD8
 10106                           
 10107 ;; *************** function _ow_reset *****************
 10108 ;; Defined at:
 10109 ;;		line 5 in file "onewire.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;		None
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;  presence        1   15[COMRAM] unsigned char 
 10114 ;; Return value:  Size  Location     Type
 10115 ;;                  1    wreg      unsigned char 
 10116 ;; Registers used:
 10117 ;;		wreg, status,2
 10118 ;; Tracked objects:
 10119 ;;		On entry : 0/0
 10120 ;;		On exit  : 0/0
 10121 ;;		Unchanged: 0/0
 10122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10127 ;;Total ram usage:        2 bytes
 10128 ;; Hardware stack levels used:    1
 10129 ;; Hardware stack levels required when called:    3
 10130 ;; This function calls:
 10131 ;;		Nothing
 10132 ;; This function is called by:
 10133 ;;		_init_ds18b20
 10134 ;;		_readTemp_Single
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           	psect	text42
 10139  001B48                     __ptext42:
 10140                           	opt stack 0
 10141  001B48                     _ow_reset:
 10142                           	opt stack 25
 10143                           
 10144                           ;onewire.c: 7: uint8_t presence;
 10145                           ;onewire.c: 8: PORTCbits.RC0 = 0;
 10146                           
 10147                           ;incstack = 0
 10148  001B48  9082               	bcf	3970,0,c	;volatile
 10149                           
 10150                           ;onewire.c: 9: TRISCbits.RC0 = 0;
 10151  001B4A  9094               	bcf	3988,0,c	;volatile
 10152                           
 10153                           ;onewire.c: 10: _delay((unsigned long)((500)*(40000000/4000000.0)));
 10154  001B4C  0E07               	movlw	7
 10155  001B4E  6E0F               	movwf	??_ow_reset& (0+255),c
 10156  001B50  0E7D               	movlw	125
 10157  001B52                     u4567:
 10158  001B52  2EE8               	decfsz	wreg,f,c
 10159  001B54  D7FE               	bra	u4567
 10160  001B56  2E0F               	decfsz	??_ow_reset& (0+255),f,c
 10161  001B58  D7FC               	bra	u4567
 10162  001B5A  F000               	nop	
 10163                           
 10164                           ;onewire.c: 11: PORTCbits.RC0 = 1;
 10165  001B5C  8082               	bsf	3970,0,c	;volatile
 10166                           
 10167                           ;onewire.c: 12: TRISCbits.RC0 = 1;
 10168  001B5E  8094               	bsf	3988,0,c	;volatile
 10169                           
 10170                           ;onewire.c: 13: _delay((unsigned long)((100)*(40000000/4000000.0)));
 10171  001B60  0EC8               	movlw	200
 10172  001B62                     u4577:
 10173  001B62  D000               	nop2	
 10174  001B64  2EE8               	decfsz	wreg,f,c
 10175  001B66  D7FD               	bra	u4577
 10176                           
 10177                           ;onewire.c: 14: presence = PORTCbits.RC0;
 10178  001B68  0E00               	movlw	0
 10179  001B6A  B082               	btfsc	3970,0,c	;volatile
 10180  001B6C  0E01               	movlw	1
 10181  001B6E  6E10               	movwf	ow_reset@presence,c
 10182                           
 10183                           ;onewire.c: 15: _delay((unsigned long)((424)*(40000000/4000000.0)));
 10184  001B70  0E06               	movlw	6
 10185  001B72  6E0F               	movwf	??_ow_reset& (0+255),c
 10186  001B74  0E80               	movlw	128
 10187  001B76                     u4587:
 10188  001B76  2EE8               	decfsz	wreg,f,c
 10189  001B78  D7FE               	bra	u4587
 10190  001B7A  2E0F               	decfsz	??_ow_reset& (0+255),f,c
 10191  001B7C  D7FC               	bra	u4587
 10192  001B7E  D000               	nop2	
 10193                           
 10194                           ;onewire.c: 16: return(presence);
 10195  001B80  5010               	movf	ow_reset@presence,w,c
 10196  001B82  0012               	return		;funcret
 10197  001B84                     __end_of_ow_reset:
 10198                           	opt stack 0
 10199                           tosu	equ	0xFFF
 10200                           tosh	equ	0xFFE
 10201                           tosl	equ	0xFFD
 10202                           pclath	equ	0xFFA
 10203                           tblptru	equ	0xFF8
 10204                           tblptrh	equ	0xFF7
 10205                           tblptrl	equ	0xFF6
 10206                           tablat	equ	0xFF5
 10207                           prodh	equ	0xFF4
 10208                           prodl	equ	0xFF3
 10209                           intcon	equ	0xFF2
 10210                           intcon2	equ	0xFF1
 10211                           postinc0	equ	0xFEE
 10212                           wreg	equ	0xFE8
 10213                           indf1	equ	0xFE7
 10214                           plusw1	equ	0xFE3
 10215                           fsr1h	equ	0xFE2
 10216                           fsr1l	equ	0xFE1
 10217                           indf2	equ	0xFDF
 10218                           postinc2	equ	0xFDE
 10219                           postdec2	equ	0xFDD
 10220                           plusw2	equ	0xFDB
 10221                           fsr2h	equ	0xFDA
 10222                           fsr2l	equ	0xFD9
 10223                           status	equ	0xFD8
 10224                           
 10225 ;; *************** function _FillBuf *****************
 10226 ;; Defined at:
 10227 ;;		line 170 in file "display.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;		None
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;  i               1   24[COMRAM] unsigned char 
 10232 ;; Return value:  Size  Location     Type
 10233 ;;                  1    wreg      void 
 10234 ;; Registers used:
 10235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10236 ;; Tracked objects:
 10237 ;;		On entry : 3F/0
 10238 ;;		On exit  : 3F/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10242 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10244 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10245 ;;Total ram usage:        3 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; Hardware stack levels required when called:    4
 10248 ;; This function calls:
 10249 ;;		___lbdiv
 10250 ;;		___lbmod
 10251 ;; This function is called by:
 10252 ;;		_time_led
 10253 ;; This function uses a non-reentrant model
 10254 ;;
 10255                           
 10256                           	psect	text43
 10257  000ADE                     __ptext43:
 10258                           	opt stack 0
 10259  000ADE                     _FillBuf:
 10260                           	opt stack 24
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;display.c: 172: uint8_t i;
 10264                           ;display.c: 174: for(i=0; i<5; ++i)
 10265                           
 10266                           ;incstack = 0
 10267  000ADE  6A19               	clrf	FillBuf@i,c
 10268  000AE0                     l5482:
 10269                           
 10270                           ;display.c: 175: {
 10271                           ;display.c: 176: if((TTime.Thr/10) % 10)
 10272  000AE0  D878               	call	PL58	;call to abstracted procedure
 10273  000AE2  EC50  F00E         	call	___lbdiv
 10274  000AE6  ECFE  F00E         	call	___lbmod
 10275  000AEA  0900               	iorlw	0
 10276  000AEC  E009               	bz	l5486
 10277                           
 10278                           ;display.c: 177: Dis_Buff[i] = (*pFont)[(TTime.Thr/10) % 10][i];
 10279  000AEE  D871               	call	PL58	;call to abstracted procedure
 10280  000AF0  EC50  F00E         	call	___lbdiv
 10281  000AF4  ECFE  F00E         	call	___lbmod
 10282  000AF8  D83B               	call	PL12	;call to abstracted procedure
 10283  000AFA  0F89               	addlw	low _Dis_Buff
 10284  000AFC  D864               	call	PL42	;call to abstracted procedure
 10285  000AFE  D002               	goto	l5488
 10286  000B00                     l5486:
 10287                           
 10288                           ;display.c: 178: else
 10289                           ;display.c: 179: Dis_Buff[i] = 0x00;
 10290  000B00  5019               	movf	FillBuf@i,w,c
 10291  000B02  D871               	call	PL82	;call to abstracted procedure
 10292  000B04                     l5488:
 10293                           
 10294                           ;display.c: 182: Dis_Buff[i + 6] = (*pFont)[TTime.Thr % 10 ][i];
 10295  000B04  D87E               	call	PL124	;call to abstracted procedure
 10296  000B06  ECFE  F00E         	call	___lbmod
 10297  000B0A  D832               	call	PL12	;call to abstracted procedure
 10298  000B0C  0F8F               	addlw	low (_Dis_Buff+6)
 10299  000B0E  D85B               	call	PL42	;call to abstracted procedure
 10300                           
 10301                           ;display.c: 183: Dis_Buff[i + 13] = (*pFont)[(TTime.Tmin/10) % 10 ][i];
 10302  000B10  D865               	call	PL80	;call to abstracted procedure
 10303  000B12  EC50  F00E         	call	___lbdiv
 10304  000B16  ECFE  F00E         	call	___lbmod
 10305  000B1A  D82A               	call	PL12	;call to abstracted procedure
 10306  000B1C  0F96               	addlw	low (_Dis_Buff+13)
 10307  000B1E  D853               	call	PL42	;call to abstracted procedure
 10308                           
 10309                           ;display.c: 184: Dis_Buff[i + 19] = (*pFont)[TTime.Tmin % 10 ][i];
 10310  000B20  D874               	call	PL128	;call to abstracted procedure
 10311  000B22  ECFE  F00E         	call	___lbmod
 10312  000B26  D824               	call	PL12	;call to abstracted procedure
 10313  000B28  0F9C               	addlw	low (_Dis_Buff+19)
 10314  000B2A  D84D               	call	PL42	;call to abstracted procedure
 10315  000B2C  2A19               	incf	FillBuf@i,f,c
 10316  000B2E  0E04               	movlw	4
 10317  000B30  6419               	cpfsgt	FillBuf@i,c
 10318  000B32  D7D6               	goto	l5482
 10319                           
 10320                           ;display.c: 186: }
 10321                           ;display.c: 188: for (i=0; i<3; ++i)
 10322  000B34  6A19               	clrf	FillBuf@i,c
 10323  000B36                     l5502:
 10324                           
 10325                           ;display.c: 189: {
 10326                           ;display.c: 190: Dis_Buff[i + 25] = FontS[(TTime.Ts/10) % 10 + 1][i];
 10327  000B36  D85C               	call	PL100	;call to abstracted procedure
 10328  000B38  EC50  F00E         	call	___lbdiv
 10329  000B3C  ECFE  F00E         	call	___lbmod
 10330  000B40  D83C               	call	PL32	;call to abstracted procedure
 10331  000B42  D829               	call	PL18	;call to abstracted procedure
 10332  000B44  0FA2               	addlw	low (_Dis_Buff+25)
 10333  000B46  D83F               	call	PL42	;call to abstracted procedure
 10334                           
 10335                           ;display.c: 191: Dis_Buff[i + 29] = FontS[TTime.Ts % 10 + 1][i];
 10336  000B48  D858               	call	PL122	;call to abstracted procedure
 10337  000B4A  ECFE  F00E         	call	___lbmod
 10338  000B4E  D835               	call	PL32	;call to abstracted procedure
 10339  000B50  D822               	call	PL18	;call to abstracted procedure
 10340  000B52  0FA6               	addlw	low (_Dis_Buff+29)
 10341  000B54  D838               	call	PL42	;call to abstracted procedure
 10342  000B56  2A19               	incf	FillBuf@i,f,c
 10343  000B58  0E02               	movlw	2
 10344  000B5A  6419               	cpfsgt	FillBuf@i,c
 10345  000B5C  D7EC               	goto	l5502
 10346                           
 10347                           ;display.c: 192: }
 10348                           ;display.c: 194: Dis_Buff[5] = 0;
 10349  000B5E  0100               	movlb	0	; () banked
 10350  000B60  6B8E               	clrf	(_Dis_Buff+5)& (0+255),b
 10351                           
 10352                           ; BSR set to: 0
 10353                           ;display.c: 195: Dis_Buff[11] = 0x80;
 10354  000B62  0E80               	movlw	128
 10355  000B64  6F94               	movwf	(_Dis_Buff+11)& (0+255),b
 10356                           
 10357                           ;display.c: 196: Dis_Buff[12] = 0x80;
 10358  000B66  6F95               	movwf	(_Dis_Buff+12)& (0+255),b
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;display.c: 197: Dis_Buff[18] = 0;
 10362  000B68  6B9B               	clrf	(_Dis_Buff+18)& (0+255),b
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;display.c: 198: Dis_Buff[24] = 0;
 10366  000B6A  6BA1               	clrf	(_Dis_Buff+24)& (0+255),b
 10367                           
 10368                           ; BSR set to: 0
 10369                           ;display.c: 199: Dis_Buff[28] = 0;
 10370  000B6C  6BA5               	clrf	(_Dis_Buff+28)& (0+255),b
 10371                           
 10372                           ; BSR set to: 0
 10373  000B6E  0012               	return		;funcret
 10374  000B70                     __end_of_FillBuf:
 10375                           	opt stack 0
 10376  000B70                     PL12:
 10377                           	opt stack 24
 10378  000B70  0D05               	mullw	5
 10379  000B72  C06D  F017         	movff	_pFont,??_FillBuf
 10380  000B76  C06E  F018         	movff	_pFont+1,??_FillBuf+1
 10381  000B7A  50F3               	movf	prodl,w,c
 10382  000B7C  2617               	addwf	??_FillBuf,f,c
 10383  000B7E  50F4               	movf	prodh,w,c
 10384  000B80  2218               	addwfc	??_FillBuf+1,f,c
 10385  000B82  5019               	movf	FillBuf@i,w,c
 10386  000B84  2617               	addwf	??_FillBuf,f,c
 10387  000B86  0E00               	movlw	0
 10388  000B88  2218               	addwfc	??_FillBuf+1,f,c
 10389  000B8A  C017  FFF6         	movff	??_FillBuf,tblptrl
 10390  000B8E  C018  FFF7         	movff	??_FillBuf+1,tblptrh
 10391  000B92                     	if	0	;tblptru may be non-zero
 10392  000B92                     	endif
 10393  000B92                     	if	0	;tblptru may be non-zero
 10394  000B92                     	endif
 10395  000B92  5019               	movf	FillBuf@i,w,c
 10396  000B94  0012               	return	
 10397  000B96                     __end_ofPL12:
 10398                           	opt stack 0
 10399  000B96                     PL18:
 10400                           	opt stack 24
 10401  000B96  50F3               	movf	prodl,w,c
 10402  000B98  2617               	addwf	??_FillBuf,f,c
 10403  000B9A  50F4               	movf	prodh,w,c
 10404  000B9C  2218               	addwfc	??_FillBuf+1,f,c
 10405  000B9E  5019               	movf	FillBuf@i,w,c
 10406  000BA0  2617               	addwf	??_FillBuf,f,c
 10407  000BA2  0E00               	movlw	0
 10408  000BA4  2218               	addwfc	??_FillBuf+1,f,c
 10409  000BA6  0E03               	movlw	3
 10410  000BA8  2617               	addwf	??_FillBuf,f,c
 10411  000BAA  0E00               	movlw	0
 10412  000BAC  2218               	addwfc	??_FillBuf+1,f,c
 10413  000BAE  C017  FFF6         	movff	??_FillBuf,tblptrl
 10414  000BB2  C018  FFF7         	movff	??_FillBuf+1,tblptrh
 10415  000BB6                     	if	0	;tblptru may be non-zero
 10416  000BB6                     	endif
 10417  000BB6                     	if	0	;tblptru may be non-zero
 10418  000BB6                     	endif
 10419  000BB6  5019               	movf	FillBuf@i,w,c
 10420  000BB8  0012               	return	
 10421  000BBA                     __end_ofPL18:
 10422                           	opt stack 0
 10423  000BBA                     PL32:
 10424                           	opt stack 24
 10425  000BBA  0D03               	mullw	3
 10426  000BBC  0EC9               	movlw	low _FontS
 10427  000BBE  6E17               	movwf	??_FillBuf& (0+255),c
 10428  000BC0  0EBE               	movlw	high _FontS
 10429  000BC2  6E18               	movwf	(??_FillBuf+1)& (0+255),c
 10430  000BC4  0012               	return	
 10431  000BC6                     __end_ofPL32:
 10432                           	opt stack 0
 10433  000BC6                     PL42:
 10434                           	opt stack 24
 10435  000BC6  6ED9               	movwf	fsr2l,c
 10436  000BC8  6ADA               	clrf	fsr2h,c
 10437  000BCA  0008               	tblrd		*
 10438  000BCC  CFF5 FFDF          	movff	tablat,indf2
 10439  000BD0  0012               	return	
 10440  000BD2                     __end_ofPL42:
 10441                           	opt stack 0
 10442  000BD2                     PL58:
 10443                           	opt stack 22
 10444  000BD2  0E0A               	movlw	10
 10445  000BD4  6E13               	movwf	___lbmod@divisor,c
 10446  000BD6  6E0F               	movwf	___lbdiv@divisor,c
 10447  000BD8  5064               	movf	_TTime+2,w,c
 10448  000BDA  0012               	return	
 10449  000BDC                     __end_ofPL58:
 10450                           	opt stack 0
 10451  000BDC                     PL80:
 10452                           	opt stack 22
 10453  000BDC  0E0A               	movlw	10
 10454  000BDE  6E13               	movwf	___lbmod@divisor,c
 10455  000BE0  6E0F               	movwf	___lbdiv@divisor,c
 10456  000BE2  5063               	movf	_TTime+1,w,c
 10457  000BE4  0012               	return	
 10458  000BE6                     __end_ofPL80:
 10459                           	opt stack 0
 10460  000BE6                     PL82:
 10461                           	opt stack 27
 10462  000BE6  0F89               	addlw	low _Dis_Buff
 10463  000BE8  6ED9               	movwf	fsr2l,c
 10464  000BEA  6ADA               	clrf	fsr2h,c
 10465  000BEC  6ADF               	clrf	indf2,c
 10466  000BEE  0012               	return	
 10467  000BF0                     __end_ofPL82:
 10468                           	opt stack 0
 10469  000BF0                     PL100:
 10470                           	opt stack 22
 10471  000BF0  0E0A               	movlw	10
 10472  000BF2  6E13               	movwf	___lbmod@divisor,c
 10473  000BF4  6E0F               	movwf	___lbdiv@divisor,c
 10474  000BF6  5062               	movf	_TTime,w,c
 10475  000BF8  0012               	return	
 10476  000BFA                     __end_ofPL100:
 10477                           	opt stack 0
 10478  000BFA                     PL122:
 10479                           	opt stack 22
 10480  000BFA  0E0A               	movlw	10
 10481  000BFC  6E13               	movwf	___lbmod@divisor,c
 10482  000BFE  5062               	movf	_TTime,w,c
 10483  000C00  0012               	return	
 10484  000C02                     __end_ofPL122:
 10485                           	opt stack 0
 10486  000C02                     PL124:
 10487                           	opt stack 22
 10488  000C02  0E0A               	movlw	10
 10489  000C04  6E13               	movwf	___lbmod@divisor,c
 10490  000C06  5064               	movf	_TTime+2,w,c
 10491  000C08  0012               	return	
 10492  000C0A                     __end_ofPL124:
 10493                           	opt stack 0
 10494  000C0A                     PL128:
 10495                           	opt stack 22
 10496  000C0A  0E0A               	movlw	10
 10497  000C0C  6E13               	movwf	___lbmod@divisor,c
 10498  000C0E  5063               	movf	_TTime+1,w,c
 10499  000C10  0012               	return	
 10500  000C12                     __end_ofPL128:
 10501                           	opt stack 0
 10502                           tosu	equ	0xFFF
 10503                           tosh	equ	0xFFE
 10504                           tosl	equ	0xFFD
 10505                           pclath	equ	0xFFA
 10506                           tblptru	equ	0xFF8
 10507                           tblptrh	equ	0xFF7
 10508                           tblptrl	equ	0xFF6
 10509                           tablat	equ	0xFF5
 10510                           prodh	equ	0xFF4
 10511                           prodl	equ	0xFF3
 10512                           intcon	equ	0xFF2
 10513                           intcon2	equ	0xFF1
 10514                           postinc0	equ	0xFEE
 10515                           wreg	equ	0xFE8
 10516                           indf1	equ	0xFE7
 10517                           plusw1	equ	0xFE3
 10518                           fsr1h	equ	0xFE2
 10519                           fsr1l	equ	0xFE1
 10520                           indf2	equ	0xFDF
 10521                           postinc2	equ	0xFDE
 10522                           postdec2	equ	0xFDD
 10523                           plusw2	equ	0xFDB
 10524                           fsr2h	equ	0xFDA
 10525                           fsr2l	equ	0xFD9
 10526                           status	equ	0xFD8
 10527                           
 10528 ;; *************** function _write_eep *****************
 10529 ;; Defined at:
 10530 ;;		line 5 in file "eeprom.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;  address         1    wreg     unsigned char 
 10533 ;;  data            1   14[COMRAM] unsigned char 
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;  address         1   15[COMRAM] unsigned char 
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  1    wreg      void 
 10538 ;; Registers used:
 10539 ;;		wreg, status,2
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10545 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10548 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;Total ram usage:        2 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; Hardware stack levels required when called:    3
 10552 ;; This function calls:
 10553 ;;		Nothing
 10554 ;; This function is called by:
 10555 ;;		_set_font_set
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           	psect	text44
 10560  001E6A                     __ptext44:
 10561                           	opt stack 0
 10562  001E6A                     _write_eep:
 10563                           	opt stack 25
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;incstack = 0
 10567                           ;write_eep@address stored from wreg
 10568  001E6A  6E10               	movwf	write_eep@address,c
 10569  001E6C                     l1172:
 10570  001E6C  B2A6               	btfsc	4006,1,c	;volatile
 10571  001E6E  D7FE               	goto	l1172
 10572                           
 10573                           ;eeprom.c: 11: EEADR = address;
 10574  001E70  C010  FFA9         	movff	write_eep@address,4009	;volatile
 10575                           
 10576                           ;eeprom.c: 12: EEDATA = data;
 10577  001E74  C00F  FFA8         	movff	write_eep@data,4008	;volatile
 10578                           
 10579                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
 10580  001E78  9EA6               	bcf	4006,7,c	;volatile
 10581                           
 10582                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
 10583  001E7A  9CA6               	bcf	4006,6,c	;volatile
 10584                           
 10585                           ;eeprom.c: 15: EECON1bits.WREN = 1;
 10586  001E7C  84A6               	bsf	4006,2,c	;volatile
 10587                           
 10588                           ;eeprom.c: 16: INTCONbits.GIE = 0;
 10589  001E7E  9EF2               	bcf	intcon,7,c	;volatile
 10590                           
 10591                           ;eeprom.c: 18: EECON2 = 0x55;
 10592  001E80  0E55               	movlw	85
 10593  001E82  6EA7               	movwf	4007,c	;volatile
 10594                           
 10595                           ;eeprom.c: 19: EECON2 = 0xAA;
 10596  001E84  0EAA               	movlw	170
 10597  001E86  6EA7               	movwf	4007,c	;volatile
 10598                           
 10599                           ;eeprom.c: 20: EECON1bits.WR = 1;
 10600  001E88  82A6               	bsf	4006,1,c	;volatile
 10601                           
 10602                           ;eeprom.c: 22: INTCONbits.GIE = 1;
 10603  001E8A  8EF2               	bsf	intcon,7,c	;volatile
 10604  001E8C  0CAA               	retlw	170	;funcret
 10605  001E8E                     __end_of_write_eep:
 10606                           	opt stack 0
 10607                           tosu	equ	0xFFF
 10608                           tosh	equ	0xFFE
 10609                           tosl	equ	0xFFD
 10610                           pclath	equ	0xFFA
 10611                           tblptru	equ	0xFF8
 10612                           tblptrh	equ	0xFF7
 10613                           tblptrl	equ	0xFF6
 10614                           tablat	equ	0xFF5
 10615                           prodh	equ	0xFF4
 10616                           prodl	equ	0xFF3
 10617                           intcon	equ	0xFF2
 10618                           intcon2	equ	0xFF1
 10619                           postinc0	equ	0xFEE
 10620                           wreg	equ	0xFE8
 10621                           indf1	equ	0xFE7
 10622                           plusw1	equ	0xFE3
 10623                           fsr1h	equ	0xFE2
 10624                           fsr1l	equ	0xFE1
 10625                           indf2	equ	0xFDF
 10626                           postinc2	equ	0xFDE
 10627                           postdec2	equ	0xFDD
 10628                           plusw2	equ	0xFDB
 10629                           fsr2h	equ	0xFDA
 10630                           fsr2l	equ	0xFD9
 10631                           status	equ	0xFD8
 10632                           
 10633 ;; *************** function _set_font *****************
 10634 ;; Defined at:
 10635 ;;		line 533 in file "common.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;		None
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;		None
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  1    wreg      void 
 10642 ;; Registers used:
 10643 ;;		wreg, status,2, status,0
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10653 ;;Total ram usage:        0 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    3
 10656 ;; This function calls:
 10657 ;;		Nothing
 10658 ;; This function is called by:
 10659 ;;		_SYSTEM_Initialize
 10660 ;;		_set_font_set
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           	psect	text45
 10665  001ACA                     __ptext45:
 10666                           	opt stack 0
 10667  001ACA                     _set_font:
 10668                           	opt stack 26
 10669                           
 10670                           ;common.c: 535: switch (type_font)
 10671                           
 10672                           ;incstack = 0
 10673  001ACA  D010               	goto	l5322
 10674  001ACC                     l5312:
 10675                           
 10676                           ;common.c: 538: pFont = &dFont1;
 10677  001ACC  0E97               	movlw	low _dFont1
 10678  001ACE  6E6D               	movwf	_pFont,c
 10679  001AD0  0EBE               	movlw	high _dFont1
 10680  001AD2  6E6E               	movwf	_pFont+1,c
 10681                           
 10682                           ;common.c: 539: break;
 10683  001AD4  0012               	return	
 10684  001AD6                     l5314:
 10685                           
 10686                           ;common.c: 541: pFont = &dFont2;
 10687  001AD6  0E65               	movlw	low _dFont2
 10688  001AD8  6E6D               	movwf	_pFont,c
 10689  001ADA  0EBE               	movlw	high _dFont2
 10690  001ADC  6E6E               	movwf	_pFont+1,c
 10691                           
 10692                           ;common.c: 542: break;
 10693  001ADE  0012               	return	
 10694  001AE0                     l5316:
 10695                           
 10696                           ;common.c: 544: pFont = &dFont3;
 10697  001AE0  0E33               	movlw	low _dFont3
 10698  001AE2  6E6D               	movwf	_pFont,c
 10699  001AE4  0EBE               	movlw	high _dFont3
 10700  001AE6  6E6E               	movwf	_pFont+1,c
 10701                           
 10702                           ;common.c: 545: break;
 10703  001AE8  0012               	return	
 10704  001AEA                     l5318:
 10705                           
 10706                           ;common.c: 547: pFont = &dFont4;
 10707  001AEA  D00A               	goto	PL84	;call to abstracted procedure
 10708  001AEC                     l5322:
 10709  001AEC  5061               	movf	_type_font,w,c
 10710                           
 10711                           ; Switch size 1, requested type "space"
 10712                           ; Number of cases is 4, Range of values is 1 to 4
 10713                           ; switch strategies available:
 10714                           ; Name         Instructions Cycles
 10715                           ; simple_byte           13     7 (average)
 10716                           ;	Chosen strategy is simple_byte
 10717  001AEE  0A01               	xorlw	1	; case 1
 10718  001AF0  E0ED               	bz	l5312
 10719  001AF2  0A03               	xorlw	3	; case 2
 10720  001AF4  E0F0               	bz	l5314
 10721  001AF6  0A01               	xorlw	1	; case 3
 10722  001AF8  E0F3               	bz	l5316
 10723  001AFA  0A07               	xorlw	7	; case 4
 10724  001AFC  E001               	bz	PL84
 10725  001AFE  0012               	return		;funcret
 10726  001B00                     __end_of_set_font:
 10727                           	opt stack 0
 10728  001B00                     PL84:
 10729                           	opt stack 22
 10730  001B00  0E01               	movlw	low _dFont4
 10731  001B02  6E6D               	movwf	_pFont,c
 10732  001B04  0EBE               	movlw	high _dFont4
 10733  001B06  6E6E               	movwf	_pFont+1,c
 10734  001B08  0012               	return	
 10735  001B0A                     __end_ofPL84:
 10736                           	opt stack 0
 10737                           tosu	equ	0xFFF
 10738                           tosh	equ	0xFFE
 10739                           tosl	equ	0xFFD
 10740                           pclath	equ	0xFFA
 10741                           tblptru	equ	0xFF8
 10742                           tblptrh	equ	0xFF7
 10743                           tblptrl	equ	0xFF6
 10744                           tablat	equ	0xFF5
 10745                           prodh	equ	0xFF4
 10746                           prodl	equ	0xFF3
 10747                           intcon	equ	0xFF2
 10748                           intcon2	equ	0xFF1
 10749                           postinc0	equ	0xFEE
 10750                           wreg	equ	0xFE8
 10751                           indf1	equ	0xFE7
 10752                           plusw1	equ	0xFE3
 10753                           fsr1h	equ	0xFE2
 10754                           fsr1l	equ	0xFE1
 10755                           indf2	equ	0xFDF
 10756                           postinc2	equ	0xFDE
 10757                           postdec2	equ	0xFDD
 10758                           plusw2	equ	0xFDB
 10759                           fsr2h	equ	0xFDA
 10760                           fsr2l	equ	0xFD9
 10761                           status	equ	0xFD8
 10762                           
 10763 ;; *************** function _putchar_b_buf *****************
 10764 ;; Defined at:
 10765 ;;		line 64 in file "display.c"
 10766 ;; Parameters:    Size  Location     Type
 10767 ;;  x               1    wreg     unsigned char 
 10768 ;;  symbol          1   22[COMRAM] unsigned char 
 10769 ;;  pF              2   23[COMRAM] PTR unsigned char [5][0]
 10770 ;;		 -> dFont4(50), dFont3(50), dFont2(50), Font(1280), 
 10771 ;;		 -> dFont1(50), 
 10772 ;; Auto vars:     Size  Location     Type
 10773 ;;  x               1   28[COMRAM] unsigned char 
 10774 ;;  i               1   30[COMRAM] unsigned char 
 10775 ;;  j               1   29[COMRAM] unsigned char 
 10776 ;;  mask            1   27[COMRAM] unsigned char 
 10777 ;; Return value:  Size  Location     Type
 10778 ;;                  1    wreg      void 
 10779 ;; Registers used:
 10780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10781 ;; Tracked objects:
 10782 ;;		On entry : 0/0
 10783 ;;		On exit  : 0/0
 10784 ;;		Unchanged: 0/0
 10785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10786 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10787 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10788 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10790 ;;Total ram usage:        9 bytes
 10791 ;; Hardware stack levels used:    1
 10792 ;; Hardware stack levels required when called:    4
 10793 ;; This function calls:
 10794 ;;		_pixel_off
 10795 ;;		_pixel_on
 10796 ;; This function is called by:
 10797 ;;		_time_set_min
 10798 ;;		_time_set_hr
 10799 ;;		_time_set_yr
 10800 ;;		_time_set_mt
 10801 ;;		_time_set_dt
 10802 ;;		_time_set_dy
 10803 ;;		_set_font_set
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           	psect	text46
 10808  00175E                     __ptext46:
 10809                           	opt stack 0
 10810  00175E                     _putchar_b_buf:
 10811                           	opt stack 24
 10812                           
 10813                           ;incstack = 0
 10814                           ;putchar_b_buf@x stored from wreg
 10815  00175E  6E1D               	movwf	putchar_b_buf@x,c
 10816                           
 10817                           ;display.c: 66: uint8_t i, j, mask=0x01;
 10818  001760  0E01               	movlw	1
 10819  001762  6E1C               	movwf	putchar_b_buf@mask,c
 10820                           
 10821                           ;display.c: 69: for(i=0; i<5; i++)
 10822  001764  6A1F               	clrf	putchar_b_buf@i,c
 10823  001766                     l418:
 10824                           
 10825                           ;display.c: 70: {
 10826                           ;display.c: 71: for(j=0;j<8;j++)
 10827  001766  6A1E               	clrf	putchar_b_buf@j,c
 10828  001768                     l5398:
 10829                           
 10830                           ;display.c: 72: {
 10831                           ;display.c: 73: if((*pF)[symbol] [i] & mask)
 10832  001768  5017               	movf	putchar_b_buf@symbol,w,c
 10833  00176A  0D05               	mullw	5
 10834  00176C  C018  F01A         	movff	putchar_b_buf@pF,??_putchar_b_buf
 10835  001770  C019  F01B         	movff	putchar_b_buf@pF+1,??_putchar_b_buf+1
 10836  001774  50F3               	movf	prodl,w,c
 10837  001776  261A               	addwf	??_putchar_b_buf,f,c
 10838  001778  50F4               	movf	prodh,w,c
 10839  00177A  221B               	addwfc	??_putchar_b_buf+1,f,c
 10840  00177C  501F               	movf	putchar_b_buf@i,w,c
 10841  00177E  261A               	addwf	??_putchar_b_buf,f,c
 10842  001780  0E00               	movlw	0
 10843  001782  221B               	addwfc	??_putchar_b_buf+1,f,c
 10844  001784  C01A  FFF6         	movff	??_putchar_b_buf,tblptrl
 10845  001788  C01B  FFF7         	movff	??_putchar_b_buf+1,tblptrh
 10846  00178C                     	if	0	;tblptru may be non-zero
 10847  00178C                     	endif
 10848  00178C                     	if	0	;tblptru may be non-zero
 10849  00178C                     	endif
 10850  00178C  0008               	tblrd		*
 10851  00178E  50F5               	movf	tablat,w,c
 10852  001790  141C               	andwf	putchar_b_buf@mask,w,c
 10853  001792  E007               	bz	l5402
 10854                           
 10855                           ;display.c: 74: pixel_on(x+i,j);
 10856  001794  C01E  F00F         	movff	putchar_b_buf@j,pixel_on@y
 10857  001798  501D               	movf	putchar_b_buf@x,w,c
 10858  00179A  241F               	addwf	putchar_b_buf@i,w,c
 10859  00179C  EC59  F00F         	call	_pixel_on
 10860  0017A0  D006               	goto	l5404
 10861  0017A2                     l5402:
 10862                           
 10863                           ;display.c: 75: else
 10864                           ;display.c: 76: pixel_off(x+i,j);
 10865  0017A2  C01E  F00F         	movff	putchar_b_buf@j,pixel_off@y
 10866  0017A6  501D               	movf	putchar_b_buf@x,w,c
 10867  0017A8  241F               	addwf	putchar_b_buf@i,w,c
 10868  0017AA  ECD7  F00E         	call	_pixel_off
 10869  0017AE                     l5404:
 10870                           
 10871                           ;display.c: 78: mask = mask<<1;
 10872  0017AE  90D8               	bcf	status,0,c
 10873  0017B0  361C               	rlcf	putchar_b_buf@mask,f,c
 10874  0017B2  2A1E               	incf	putchar_b_buf@j,f,c
 10875  0017B4  0E07               	movlw	7
 10876  0017B6  641E               	cpfsgt	putchar_b_buf@j,c
 10877  0017B8  D7D7               	goto	l5398
 10878                           
 10879                           ;display.c: 79: };
 10880                           ;display.c: 81: mask=0x01;
 10881  0017BA  0E01               	movlw	1
 10882  0017BC  6E1C               	movwf	putchar_b_buf@mask,c
 10883  0017BE  2A1F               	incf	putchar_b_buf@i,f,c
 10884  0017C0  0E04               	movlw	4
 10885  0017C2  641F               	cpfsgt	putchar_b_buf@i,c
 10886  0017C4  D7D0               	goto	l418
 10887  0017C6  0C04               	retlw	4
 10888  0017C8                     __end_of_putchar_b_buf:
 10889                           	opt stack 0
 10890                           tosu	equ	0xFFF
 10891                           tosh	equ	0xFFE
 10892                           tosl	equ	0xFFD
 10893                           pclath	equ	0xFFA
 10894                           tblptru	equ	0xFF8
 10895                           tblptrh	equ	0xFF7
 10896                           tblptrl	equ	0xFF6
 10897                           tablat	equ	0xFF5
 10898                           prodh	equ	0xFF4
 10899                           prodl	equ	0xFF3
 10900                           intcon	equ	0xFF2
 10901                           intcon2	equ	0xFF1
 10902                           postinc0	equ	0xFEE
 10903                           wreg	equ	0xFE8
 10904                           indf1	equ	0xFE7
 10905                           plusw1	equ	0xFE3
 10906                           fsr1h	equ	0xFE2
 10907                           fsr1l	equ	0xFE1
 10908                           indf2	equ	0xFDF
 10909                           postinc2	equ	0xFDE
 10910                           postdec2	equ	0xFDD
 10911                           plusw2	equ	0xFDB
 10912                           fsr2h	equ	0xFDA
 10913                           fsr2l	equ	0xFD9
 10914                           status	equ	0xFD8
 10915                           
 10916 ;; *************** function _scroll_left *****************
 10917 ;; Defined at:
 10918 ;;		line 290 in file "display.c"
 10919 ;; Parameters:    Size  Location     Type
 10920 ;;		None
 10921 ;; Auto vars:     Size  Location     Type
 10922 ;;  i               1   24[COMRAM] unsigned char 
 10923 ;;  speed           1   23[COMRAM] unsigned char 
 10924 ;;  k               1   22[COMRAM] unsigned char 
 10925 ;;  j               1   21[COMRAM] unsigned char 
 10926 ;; Return value:  Size  Location     Type
 10927 ;;                  1    wreg      void 
 10928 ;; Registers used:
 10929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10930 ;; Tracked objects:
 10931 ;;		On entry : 3F/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10936 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10937 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10938 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10939 ;;Total ram usage:        5 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; Hardware stack levels required when called:    5
 10942 ;; This function calls:
 10943 ;;		_Update_Matrix
 10944 ;; This function is called by:
 10945 ;;		_home_temp
 10946 ;;		_time_led
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           	psect	text47
 10951  0018F4                     __ptext47:
 10952                           	opt stack 0
 10953  0018F4                     _scroll_left:
 10954                           	opt stack 23
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;display.c: 292: uint8_t i,j,k,speed = 100;
 10958                           
 10959                           ;incstack = 0
 10960  0018F4  0E64               	movlw	100
 10961  0018F6  6E18               	movwf	scroll_left@speed,c
 10962                           
 10963                           ; BSR set to: 0
 10964                           ;display.c: 295: for (k=0;k<=31;k++)
 10965  0018F8  6A17               	clrf	scroll_left@k,c
 10966  0018FA                     l489:
 10967                           
 10968                           ;display.c: 296: {
 10969                           ;display.c: 297: for (i=0; i<=31; i++)
 10970  0018FA  6A19               	clrf	scroll_left@i,c
 10971  0018FC                     l5528:
 10972                           
 10973                           ;display.c: 298: Dis_Buff[i] = Dis_Buff[i+1];
 10974  0018FC  5019               	movf	scroll_left@i,w,c
 10975  0018FE  0F8A               	addlw	low (_Dis_Buff+1)
 10976  001900  6ED9               	movwf	fsr2l,c
 10977  001902  6ADA               	clrf	fsr2h,c
 10978  001904  5019               	movf	scroll_left@i,w,c
 10979  001906  0F89               	addlw	low _Dis_Buff
 10980  001908  6EE1               	movwf	fsr1l,c
 10981  00190A  6AE2               	clrf	fsr1h,c
 10982  00190C  CFDF FFE7          	movff	indf2,indf1
 10983  001910  2A19               	incf	scroll_left@i,f,c
 10984  001912  0E1F               	movlw	31
 10985  001914  6419               	cpfsgt	scroll_left@i,c
 10986  001916  D7F2               	goto	l5528
 10987                           
 10988                           ;display.c: 300: Dis_Buff[31] = 0;
 10989  001918  0100               	movlb	0	; () banked
 10990  00191A  6BA8               	clrf	(_Dis_Buff+31)& (0+255),b
 10991                           
 10992                           ; BSR set to: 0
 10993                           ;display.c: 301: Update_Matrix(Dis_Buff);
 10994  00191C  0E89               	movlw	low _Dis_Buff
 10995  00191E  6E11               	movwf	Update_Matrix@buf,c
 10996  001920  ECC2  F00D         	call	_Update_Matrix	;wreg free
 10997                           
 10998                           ;display.c: 302: for(j=0; j<speed; j++)
 10999  001924  6A16               	clrf	scroll_left@j,c
 11000  001926  D008               	goto	l493
 11001  001928                     l5538:
 11002                           
 11003                           ;display.c: 303: _delay((unsigned long)((1)*(40000000/4000.0)));
 11004  001928  0E0D               	movlw	13
 11005  00192A  6E15               	movwf	??_scroll_left& (0+255),c
 11006  00192C  0EFC               	movlw	252
 11007  00192E                     u4597:
 11008  00192E  2EE8               	decfsz	wreg,f,c
 11009  001930  D7FE               	bra	u4597
 11010  001932  2E15               	decfsz	??_scroll_left& (0+255),f,c
 11011  001934  D7FC               	bra	u4597
 11012  001936  2A16               	incf	scroll_left@j,f,c
 11013  001938                     l493:
 11014  001938  5018               	movf	scroll_left@speed,w,c
 11015  00193A  5C16               	subwf	scroll_left@j,w,c
 11016  00193C  E3F5               	bnc	l5538
 11017                           
 11018                           ;display.c: 304: if (speed > 10) speed -=10;
 11019  00193E  0E0A               	movlw	10
 11020  001940  6418               	cpfsgt	scroll_left@speed,c
 11021  001942  D001               	goto	l5546
 11022  001944  5E18               	subwf	scroll_left@speed,f,c
 11023  001946                     l5546:
 11024  001946  2A17               	incf	scroll_left@k,f,c
 11025  001948  0E1F               	movlw	31
 11026  00194A  6417               	cpfsgt	scroll_left@k,c
 11027  00194C  D7D6               	goto	l489
 11028  00194E  0C1F               	retlw	31
 11029  001950                     __end_of_scroll_left:
 11030                           	opt stack 0
 11031                           tosu	equ	0xFFF
 11032                           tosh	equ	0xFFE
 11033                           tosl	equ	0xFFD
 11034                           pclath	equ	0xFFA
 11035                           tblptru	equ	0xFF8
 11036                           tblptrh	equ	0xFF7
 11037                           tblptrl	equ	0xFF6
 11038                           tablat	equ	0xFF5
 11039                           prodh	equ	0xFF4
 11040                           prodl	equ	0xFF3
 11041                           intcon	equ	0xFF2
 11042                           intcon2	equ	0xFF1
 11043                           postinc0	equ	0xFEE
 11044                           wreg	equ	0xFE8
 11045                           indf1	equ	0xFE7
 11046                           plusw1	equ	0xFE3
 11047                           fsr1h	equ	0xFE2
 11048                           fsr1l	equ	0xFE1
 11049                           indf2	equ	0xFDF
 11050                           postinc2	equ	0xFDE
 11051                           postdec2	equ	0xFDD
 11052                           plusw2	equ	0xFDB
 11053                           fsr2h	equ	0xFDA
 11054                           fsr2l	equ	0xFD9
 11055                           status	equ	0xFD8
 11056                           
 11057 ;; *************** function _putchar_down_s *****************
 11058 ;; Defined at:
 11059 ;;		line 134 in file "display.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;  x               1    wreg     unsigned char 
 11062 ;;  symbol          1   22[COMRAM] unsigned char 
 11063 ;; Auto vars:     Size  Location     Type
 11064 ;;  x               1   28[COMRAM] unsigned char 
 11065 ;;  i               1   31[COMRAM] unsigned char 
 11066 ;;  j               1   30[COMRAM] unsigned char 
 11067 ;;  k               1   29[COMRAM] unsigned char 
 11068 ;; Return value:  Size  Location     Type
 11069 ;;                  1    wreg      void 
 11070 ;; Registers used:
 11071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11077 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11078 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11079 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11080 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11081 ;;Total ram usage:       10 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:    5
 11084 ;; This function calls:
 11085 ;;		_Update_Matrix
 11086 ;; This function is called by:
 11087 ;;		_home_temp
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           	psect	text48
 11092  0013C2                     __ptext48:
 11093                           	opt stack 0
 11094  0013C2                     _putchar_down_s:
 11095                           	opt stack 23
 11096                           
 11097                           ;incstack = 0
 11098                           ;putchar_down_s@x stored from wreg
 11099  0013C2  6E1D               	movwf	putchar_down_s@x,c
 11100                           
 11101                           ;display.c: 136: uint8_t i, j, k;
 11102                           ;display.c: 141: for(j=0;j<=7;j++)
 11103  0013C4  6A1F               	clrf	putchar_down_s@j,c
 11104  0013C6                     l445:
 11105                           
 11106                           ;display.c: 142: {
 11107                           ;display.c: 143: for(i=0;i<3;i++)
 11108  0013C6  6A20               	clrf	putchar_down_s@i,c
 11109  0013C8                     l5456:
 11110                           
 11111                           ;display.c: 144: {
 11112                           ;display.c: 145: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | (FontS[symbol][i] >> (8-1-j));
 11113  0013C8  501D               	movf	putchar_down_s@x,w,c
 11114  0013CA  0F89               	addlw	low _Dis_Buff
 11115  0013CC  2420               	addwf	putchar_down_s@i,w,c
 11116  0013CE  6ED9               	movwf	fsr2l,c
 11117  0013D0  6ADA               	clrf	fsr2h,c
 11118  0013D2  501F               	movf	putchar_down_s@j,w,c
 11119  0013D4  0807               	sublw	7
 11120  0013D6  6E18               	movwf	??_putchar_down_s& (0+255),c
 11121  0013D8  5017               	movf	putchar_down_s@symbol,w,c
 11122  0013DA  0D03               	mullw	3
 11123  0013DC  0EC9               	movlw	low _FontS
 11124  0013DE  6E19               	movwf	(??_putchar_down_s+1)& (0+255),c
 11125  0013E0  0EBE               	movlw	high _FontS
 11126  0013E2  6E1A               	movwf	(??_putchar_down_s+2)& (0+255),c
 11127  0013E4  50F3               	movf	prodl,w,c
 11128  0013E6  2619               	addwf	??_putchar_down_s+1,f,c
 11129  0013E8  50F4               	movf	prodh,w,c
 11130  0013EA  221A               	addwfc	??_putchar_down_s+2,f,c
 11131  0013EC  5020               	movf	putchar_down_s@i,w,c
 11132  0013EE  2619               	addwf	??_putchar_down_s+1,f,c
 11133  0013F0  0E00               	movlw	0
 11134  0013F2  221A               	addwfc	??_putchar_down_s+2,f,c
 11135  0013F4  C019  FFF6         	movff	??_putchar_down_s+1,tblptrl
 11136  0013F8  C01A  FFF7         	movff	??_putchar_down_s+2,tblptrh
 11137  0013FC                     	if	0	;tblptru may be non-zero
 11138  0013FC                     	endif
 11139  0013FC                     	if	0	;tblptru may be non-zero
 11140  0013FC                     	endif
 11141  0013FC  0008               	tblrd		*
 11142  0013FE  CFF5 F01B          	movff	tablat,??_putchar_down_s+3
 11143  001402  2A18               	incf	??_putchar_down_s,f,c
 11144  001404  D002               	goto	u3734
 11145  001406                     u3735:
 11146  001406  90D8               	bcf	status,0,c
 11147  001408  321B               	rrcf	??_putchar_down_s+3,f,c
 11148  00140A                     u3734:
 11149  00140A  2E18               	decfsz	??_putchar_down_s,f,c
 11150  00140C  D7FC               	goto	u3735
 11151  00140E  501D               	movf	putchar_down_s@x,w,c
 11152  001410  0F89               	addlw	low _Dis_Buff
 11153  001412  2420               	addwf	putchar_down_s@i,w,c
 11154  001414  6EE1               	movwf	fsr1l,c
 11155  001416  6AE2               	clrf	fsr1h,c
 11156  001418  50E7               	movf	indf1,w,c
 11157  00141A  6E1C               	movwf	(??_putchar_down_s+4)& (0+255),c
 11158  00141C  90D8               	bcf	status,0,c
 11159  00141E  341C               	rlcf	??_putchar_down_s+4,w,c
 11160  001420  101B               	iorwf	??_putchar_down_s+3,w,c
 11161  001422  6EDF               	movwf	indf2,c
 11162  001424  2A20               	incf	putchar_down_s@i,f,c
 11163  001426  0E02               	movlw	2
 11164  001428  6420               	cpfsgt	putchar_down_s@i,c
 11165  00142A  D7CE               	goto	l5456
 11166                           
 11167                           ;display.c: 146: }
 11168                           ;display.c: 148: for(k=0;k<20;k++)
 11169  00142C  6A1E               	clrf	putchar_down_s@k,c
 11170  00142E                     l5466:
 11171                           
 11172                           ;display.c: 149: _delay((unsigned long)((1)*(40000000/4000.0)));
 11173  00142E  0E0D               	movlw	13
 11174  001430  6E18               	movwf	??_putchar_down_s& (0+255),c
 11175  001432  0EFC               	movlw	252
 11176  001434                     u4607:
 11177  001434  2EE8               	decfsz	wreg,f,c
 11178  001436  D7FE               	bra	u4607
 11179  001438  2E18               	decfsz	??_putchar_down_s& (0+255),f,c
 11180  00143A  D7FC               	bra	u4607
 11181  00143C  2A1E               	incf	putchar_down_s@k,f,c
 11182  00143E  0E13               	movlw	19
 11183  001440  641E               	cpfsgt	putchar_down_s@k,c
 11184  001442  D7F5               	goto	l5466
 11185                           
 11186                           ;display.c: 150: Update_Matrix(Dis_Buff);
 11187  001444  0E89               	movlw	low _Dis_Buff
 11188  001446  6E11               	movwf	Update_Matrix@buf,c
 11189  001448  ECC2  F00D         	call	_Update_Matrix	;wreg free
 11190  00144C  2A1F               	incf	putchar_down_s@j,f,c
 11191  00144E  0E07               	movlw	7
 11192  001450  641F               	cpfsgt	putchar_down_s@j,c
 11193  001452  D7B9               	goto	l445
 11194  001454  0C07               	retlw	7
 11195  001456                     __end_of_putchar_down_s:
 11196                           	opt stack 0
 11197                           tosu	equ	0xFFF
 11198                           tosh	equ	0xFFE
 11199                           tosl	equ	0xFFD
 11200                           pclath	equ	0xFFA
 11201                           tblptru	equ	0xFF8
 11202                           tblptrh	equ	0xFF7
 11203                           tblptrl	equ	0xFF6
 11204                           tablat	equ	0xFF5
 11205                           prodh	equ	0xFF4
 11206                           prodl	equ	0xFF3
 11207                           intcon	equ	0xFF2
 11208                           intcon2	equ	0xFF1
 11209                           postinc0	equ	0xFEE
 11210                           wreg	equ	0xFE8
 11211                           indf1	equ	0xFE7
 11212                           plusw1	equ	0xFE3
 11213                           fsr1h	equ	0xFE2
 11214                           fsr1l	equ	0xFE1
 11215                           indf2	equ	0xFDF
 11216                           postinc2	equ	0xFDE
 11217                           postdec2	equ	0xFDD
 11218                           plusw2	equ	0xFDB
 11219                           fsr2h	equ	0xFDA
 11220                           fsr2l	equ	0xFD9
 11221                           status	equ	0xFD8
 11222                           
 11223 ;; *************** function _putchar_down *****************
 11224 ;; Defined at:
 11225 ;;		line 112 in file "display.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;  x               1    wreg     unsigned char 
 11228 ;;  symbol          1   26[COMRAM] unsigned char 
 11229 ;;  pF              2   27[COMRAM] PTR unsigned char [5][0]
 11230 ;;		 -> dFont4(50), dFont3(50), dFont2(50), Font(1280), 
 11231 ;;		 -> dFont1(50), 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;  x               1   34[COMRAM] unsigned char 
 11234 ;;  i               1   37[COMRAM] unsigned char 
 11235 ;;  j               1   36[COMRAM] unsigned char 
 11236 ;;  k               1   35[COMRAM] unsigned char 
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  1    wreg      void 
 11239 ;; Registers used:
 11240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11241 ;; Tracked objects:
 11242 ;;		On entry : 0/0
 11243 ;;		On exit  : 0/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11246 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11247 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11248 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11249 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;Total ram usage:       12 bytes
 11251 ;; Hardware stack levels used:    1
 11252 ;; Hardware stack levels required when called:    5
 11253 ;; This function calls:
 11254 ;;		_Update_Matrix
 11255 ;; This function is called by:
 11256 ;;		_home_temp
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260                           	psect	text49
 11261  001456                     __ptext49:
 11262                           	opt stack 0
 11263  001456                     _putchar_down:
 11264                           	opt stack 23
 11265                           
 11266                           ;incstack = 0
 11267                           ;putchar_down@x stored from wreg
 11268  001456  6E23               	movwf	putchar_down@x,c
 11269                           
 11270                           ;display.c: 114: uint8_t i, j, k;
 11271                           ;display.c: 116: for(j=0;j<=7;j++)
 11272  001458  6A25               	clrf	putchar_down@j,c
 11273  00145A                     l436:
 11274                           
 11275                           ;display.c: 117: {
 11276                           ;display.c: 118: for(i=0;i<5;i++)
 11277  00145A  6A26               	clrf	putchar_down@i,c
 11278  00145C                     l5426:
 11279                           
 11280                           ;display.c: 119: {
 11281                           ;display.c: 120: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | ((*pF)[symbol][i] >> (8-1-j));
 11282  00145C  5023               	movf	putchar_down@x,w,c
 11283  00145E  0F89               	addlw	low _Dis_Buff
 11284  001460  2426               	addwf	putchar_down@i,w,c
 11285  001462  6ED9               	movwf	fsr2l,c
 11286  001464  6ADA               	clrf	fsr2h,c
 11287  001466  5025               	movf	putchar_down@j,w,c
 11288  001468  0807               	sublw	7
 11289  00146A  6E1E               	movwf	??_putchar_down& (0+255),c
 11290  00146C  501B               	movf	putchar_down@symbol,w,c
 11291  00146E  0D05               	mullw	5
 11292  001470  C01C  F01F         	movff	putchar_down@pF,??_putchar_down+1
 11293  001474  C01D  F020         	movff	putchar_down@pF+1,??_putchar_down+2
 11294  001478  50F3               	movf	prodl,w,c
 11295  00147A  261F               	addwf	??_putchar_down+1,f,c
 11296  00147C  50F4               	movf	prodh,w,c
 11297  00147E  2220               	addwfc	??_putchar_down+2,f,c
 11298  001480  5026               	movf	putchar_down@i,w,c
 11299  001482  261F               	addwf	??_putchar_down+1,f,c
 11300  001484  0E00               	movlw	0
 11301  001486  2220               	addwfc	??_putchar_down+2,f,c
 11302  001488  C01F  FFF6         	movff	??_putchar_down+1,tblptrl
 11303  00148C  C020  FFF7         	movff	??_putchar_down+2,tblptrh
 11304  001490                     	if	0	;tblptru may be non-zero
 11305  001490                     	endif
 11306  001490                     	if	0	;tblptru may be non-zero
 11307  001490                     	endif
 11308  001490  0008               	tblrd		*
 11309  001492  CFF5 F021          	movff	tablat,??_putchar_down+3
 11310  001496  2A1E               	incf	??_putchar_down,f,c
 11311  001498  D002               	goto	u3694
 11312  00149A                     u3695:
 11313  00149A  90D8               	bcf	status,0,c
 11314  00149C  3221               	rrcf	??_putchar_down+3,f,c
 11315  00149E                     u3694:
 11316  00149E  2E1E               	decfsz	??_putchar_down,f,c
 11317  0014A0  D7FC               	goto	u3695
 11318  0014A2  5023               	movf	putchar_down@x,w,c
 11319  0014A4  0F89               	addlw	low _Dis_Buff
 11320  0014A6  2426               	addwf	putchar_down@i,w,c
 11321  0014A8  6EE1               	movwf	fsr1l,c
 11322  0014AA  6AE2               	clrf	fsr1h,c
 11323  0014AC  50E7               	movf	indf1,w,c
 11324  0014AE  6E22               	movwf	(??_putchar_down+4)& (0+255),c
 11325  0014B0  90D8               	bcf	status,0,c
 11326  0014B2  3422               	rlcf	??_putchar_down+4,w,c
 11327  0014B4  1021               	iorwf	??_putchar_down+3,w,c
 11328  0014B6  6EDF               	movwf	indf2,c
 11329  0014B8  2A26               	incf	putchar_down@i,f,c
 11330  0014BA  0E04               	movlw	4
 11331  0014BC  6426               	cpfsgt	putchar_down@i,c
 11332  0014BE  D7CE               	goto	l5426
 11333                           
 11334                           ;display.c: 121: }
 11335                           ;display.c: 123: for(k=0;k<20;k++)
 11336  0014C0  6A24               	clrf	putchar_down@k,c
 11337  0014C2                     l5436:
 11338                           
 11339                           ;display.c: 124: _delay((unsigned long)((1)*(40000000/4000.0)));
 11340  0014C2  0E0D               	movlw	13
 11341  0014C4  6E1E               	movwf	??_putchar_down& (0+255),c
 11342  0014C6  0EFC               	movlw	252
 11343  0014C8                     u4617:
 11344  0014C8  2EE8               	decfsz	wreg,f,c
 11345  0014CA  D7FE               	bra	u4617
 11346  0014CC  2E1E               	decfsz	??_putchar_down& (0+255),f,c
 11347  0014CE  D7FC               	bra	u4617
 11348  0014D0  2A24               	incf	putchar_down@k,f,c
 11349  0014D2  0E13               	movlw	19
 11350  0014D4  6424               	cpfsgt	putchar_down@k,c
 11351  0014D6  D7F5               	goto	l5436
 11352                           
 11353                           ;display.c: 125: Update_Matrix(Dis_Buff);
 11354  0014D8  0E89               	movlw	low _Dis_Buff
 11355  0014DA  6E11               	movwf	Update_Matrix@buf,c
 11356  0014DC  ECC2  F00D         	call	_Update_Matrix	;wreg free
 11357  0014E0  2A25               	incf	putchar_down@j,f,c
 11358  0014E2  0E07               	movlw	7
 11359  0014E4  6425               	cpfsgt	putchar_down@j,c
 11360  0014E6  D7B9               	goto	l436
 11361  0014E8  0C07               	retlw	7
 11362  0014EA                     __end_of_putchar_down:
 11363                           	opt stack 0
 11364                           tosu	equ	0xFFF
 11365                           tosh	equ	0xFFE
 11366                           tosl	equ	0xFFD
 11367                           pclath	equ	0xFFA
 11368                           tblptru	equ	0xFF8
 11369                           tblptrh	equ	0xFF7
 11370                           tblptrl	equ	0xFF6
 11371                           tablat	equ	0xFF5
 11372                           prodh	equ	0xFF4
 11373                           prodl	equ	0xFF3
 11374                           intcon	equ	0xFF2
 11375                           intcon2	equ	0xFF1
 11376                           postinc0	equ	0xFEE
 11377                           wreg	equ	0xFE8
 11378                           indf1	equ	0xFE7
 11379                           plusw1	equ	0xFE3
 11380                           fsr1h	equ	0xFE2
 11381                           fsr1l	equ	0xFE1
 11382                           indf2	equ	0xFDF
 11383                           postinc2	equ	0xFDE
 11384                           postdec2	equ	0xFDD
 11385                           plusw2	equ	0xFDB
 11386                           fsr2h	equ	0xFDA
 11387                           fsr2l	equ	0xFD9
 11388                           status	equ	0xFD8
 11389                           
 11390 ;; *************** function _Update_Matrix *****************
 11391 ;; Defined at:
 11392 ;;		line 51 in file "max7221.c"
 11393 ;; Parameters:    Size  Location     Type
 11394 ;;  buf             1   16[COMRAM] PTR unsigned char 
 11395 ;;		 -> Dis_Buff(32), 
 11396 ;; Auto vars:     Size  Location     Type
 11397 ;;  i               1   19[COMRAM] unsigned char 
 11398 ;;  j               1   18[COMRAM] unsigned char 
 11399 ;;  data            1   17[COMRAM] unsigned char 
 11400 ;; Return value:  Size  Location     Type
 11401 ;;                  1    wreg      void 
 11402 ;; Registers used:
 11403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11404 ;; Tracked objects:
 11405 ;;		On entry : 0/0
 11406 ;;		On exit  : 0/0
 11407 ;;		Unchanged: 0/0
 11408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11409 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11410 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11412 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11413 ;;Total ram usage:        4 bytes
 11414 ;; Hardware stack levels used:    1
 11415 ;; Hardware stack levels required when called:    4
 11416 ;; This function calls:
 11417 ;;		_Send_Byte_7221
 11418 ;; This function is called by:
 11419 ;;		_putchar_down
 11420 ;;		_putchar_down_s
 11421 ;;		_scroll_left
 11422 ;;		_time_set_min
 11423 ;;		_time_set_hr
 11424 ;;		_time_set_yr
 11425 ;;		_time_set_mt
 11426 ;;		_time_set_dt
 11427 ;;		_time_set_dy
 11428 ;;		_set_font_set
 11429 ;;		_time_led
 11430 ;; This function uses a non-reentrant model
 11431 ;;
 11432                           
 11433                           	psect	text50
 11434  001B84                     __ptext50:
 11435                           	opt stack 0
 11436  001B84                     _Update_Matrix:
 11437                           	opt stack 24
 11438                           
 11439                           ;max7221.c: 53: uint8_t i, j, data;
 11440                           ;max7221.c: 56: for (i = 0; i < 8; i++)
 11441                           
 11442                           ;incstack = 0
 11443  001B84  6A14               	clrf	Update_Matrix@i,c
 11444  001B86                     l353:
 11445                           
 11446                           ;max7221.c: 57: {
 11447                           ;max7221.c: 58: LATDbits.LD0 = 0;
 11448  001B86  908C               	bcf	3980,0,c	;volatile
 11449                           
 11450                           ;max7221.c: 59: for (j = 0; j < 4; j++)
 11451  001B88  6A13               	clrf	Update_Matrix@j,c
 11452  001B8A                     l5142:
 11453                           
 11454                           ;max7221.c: 60: {
 11455                           ;max7221.c: 62: data = buf[8 * (4 - 1 - j) + i];
 11456  001B8A  5013               	movf	Update_Matrix@j,w,c
 11457  001B8C  0DF8               	mullw	-8
 11458  001B8E  5011               	movf	Update_Matrix@buf,w,c
 11459  001B90  24F3               	addwf	prodl,w,c
 11460  001B92  2414               	addwf	Update_Matrix@i,w,c
 11461  001B94  6ED9               	movwf	fsr2l,c
 11462  001B96  6ADA               	clrf	fsr2h,c
 11463  001B98  0E18               	movlw	24
 11464  001B9A  26D9               	addwf	fsr2l,f,c
 11465  001B9C  50DF               	movf	indf2,w,c
 11466  001B9E  6E12               	movwf	Update_Matrix@data,c
 11467                           
 11468                           ;max7221.c: 64: Send_Byte_7221(1 + i);
 11469  001BA0  2814               	incf	Update_Matrix@i,w,c
 11470  001BA2  EC47  F00F         	call	_Send_Byte_7221
 11471                           
 11472                           ;max7221.c: 65: Send_Byte_7221(data);
 11473  001BA6  5012               	movf	Update_Matrix@data,w,c
 11474  001BA8  EC47  F00F         	call	_Send_Byte_7221
 11475  001BAC  2A13               	incf	Update_Matrix@j,f,c
 11476  001BAE  0E03               	movlw	3
 11477  001BB0  6413               	cpfsgt	Update_Matrix@j,c
 11478  001BB2  D7EB               	goto	l5142
 11479                           
 11480                           ;max7221.c: 66: }
 11481                           ;max7221.c: 67: LATDbits.LD0 = 1;
 11482  001BB4  808C               	bsf	3980,0,c	;volatile
 11483  001BB6  2A14               	incf	Update_Matrix@i,f,c
 11484  001BB8  0E07               	movlw	7
 11485  001BBA  6414               	cpfsgt	Update_Matrix@i,c
 11486  001BBC  D7E4               	goto	l353
 11487  001BBE  0C07               	retlw	7
 11488  001BC0                     __end_of_Update_Matrix:
 11489                           	opt stack 0
 11490                           tosu	equ	0xFFF
 11491                           tosh	equ	0xFFE
 11492                           tosl	equ	0xFFD
 11493                           pclath	equ	0xFFA
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           intcon	equ	0xFF2
 11501                           intcon2	equ	0xFF1
 11502                           postinc0	equ	0xFEE
 11503                           wreg	equ	0xFE8
 11504                           indf1	equ	0xFE7
 11505                           plusw1	equ	0xFE3
 11506                           fsr1h	equ	0xFE2
 11507                           fsr1l	equ	0xFE1
 11508                           indf2	equ	0xFDF
 11509                           postinc2	equ	0xFDE
 11510                           postdec2	equ	0xFDD
 11511                           plusw2	equ	0xFDB
 11512                           fsr2h	equ	0xFDA
 11513                           fsr2l	equ	0xFD9
 11514                           status	equ	0xFD8
 11515                           
 11516 ;; *************** function _Send_Byte_7221 *****************
 11517 ;; Defined at:
 11518 ;;		line 6 in file "max7221.c"
 11519 ;; Parameters:    Size  Location     Type
 11520 ;;  dat             1    wreg     unsigned char 
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;  dat             1   14[COMRAM] unsigned char 
 11523 ;;  i               1   15[COMRAM] unsigned char 
 11524 ;; Return value:  Size  Location     Type
 11525 ;;                  1    wreg      void 
 11526 ;; Registers used:
 11527 ;;		wreg, status,2, status,0
 11528 ;; Tracked objects:
 11529 ;;		On entry : 0/0
 11530 ;;		On exit  : 0/0
 11531 ;;		Unchanged: 0/0
 11532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11534 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11536 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11537 ;;Total ram usage:        2 bytes
 11538 ;; Hardware stack levels used:    1
 11539 ;; Hardware stack levels required when called:    3
 11540 ;; This function calls:
 11541 ;;		Nothing
 11542 ;; This function is called by:
 11543 ;;		_Cmd7221
 11544 ;;		_Update_Matrix
 11545 ;; This function uses a non-reentrant model
 11546 ;;
 11547                           
 11548                           	psect	text51
 11549  001E8E                     __ptext51:
 11550                           	opt stack 0
 11551  001E8E                     _Send_Byte_7221:
 11552                           	opt stack 24
 11553                           
 11554                           ;incstack = 0
 11555                           ;Send_Byte_7221@dat stored from wreg
 11556  001E8E  6E0F               	movwf	Send_Byte_7221@dat,c
 11557                           
 11558                           ;max7221.c: 8: uint8_t i;
 11559                           ;max7221.c: 10: for (i = 0; i < 8; i++)
 11560  001E90  6A10               	clrf	Send_Byte_7221@i,c
 11561  001E92                     l341:
 11562                           
 11563                           ;max7221.c: 11: {
 11564                           ;max7221.c: 12: if (dat & 0x80)
 11565  001E92  AE0F               	btfss	Send_Byte_7221@dat,7,c
 11566  001E94  D002               	goto	l343
 11567                           
 11568                           ;max7221.c: 13: LATDbits.LD2 = 1;
 11569  001E96  848C               	bsf	3980,2,c	;volatile
 11570  001E98  D001               	goto	l344
 11571  001E9A                     l343:
 11572                           
 11573                           ;max7221.c: 14: else
 11574                           ;max7221.c: 15: LATDbits.LD2 = 0;
 11575  001E9A  948C               	bcf	3980,2,c	;volatile
 11576  001E9C                     l344:
 11577                           
 11578                           ;max7221.c: 16: LATDbits.LD1 = 1;
 11579  001E9C  828C               	bsf	3980,1,c	;volatile
 11580  001E9E  F000               	nop		;# 
 11581  001EA0  F000               	nop		;# 
 11582                           
 11583                           ;max7221.c: 23: LATDbits.LD1 = 0;
 11584  001EA2  928C               	bcf	3980,1,c	;volatile
 11585                           
 11586                           ;max7221.c: 24: dat <<= 1;
 11587  001EA4  90D8               	bcf	status,0,c
 11588  001EA6  360F               	rlcf	Send_Byte_7221@dat,f,c
 11589  001EA8  2A10               	incf	Send_Byte_7221@i,f,c
 11590  001EAA  0E07               	movlw	7
 11591  001EAC  6410               	cpfsgt	Send_Byte_7221@i,c
 11592  001EAE  D7F1               	goto	l341
 11593  001EB0  0C07               	retlw	7
 11594  001EB2                     __end_of_Send_Byte_7221:
 11595                           	opt stack 0
 11596                           tosu	equ	0xFFF
 11597                           tosh	equ	0xFFE
 11598                           tosl	equ	0xFFD
 11599                           pclath	equ	0xFFA
 11600                           tblptru	equ	0xFF8
 11601                           tblptrh	equ	0xFF7
 11602                           tblptrl	equ	0xFF6
 11603                           tablat	equ	0xFF5
 11604                           prodh	equ	0xFF4
 11605                           prodl	equ	0xFF3
 11606                           intcon	equ	0xFF2
 11607                           intcon2	equ	0xFF1
 11608                           postinc0	equ	0xFEE
 11609                           wreg	equ	0xFE8
 11610                           indf1	equ	0xFE7
 11611                           plusw1	equ	0xFE3
 11612                           fsr1h	equ	0xFE2
 11613                           fsr1l	equ	0xFE1
 11614                           indf2	equ	0xFDF
 11615                           postinc2	equ	0xFDE
 11616                           postdec2	equ	0xFDD
 11617                           plusw2	equ	0xFDB
 11618                           fsr2h	equ	0xFDA
 11619                           fsr2l	equ	0xFD9
 11620                           status	equ	0xFD8
 11621                           
 11622 ;; *************** function _pic_to_led *****************
 11623 ;; Defined at:
 11624 ;;		line 43 in file "display.c"
 11625 ;; Parameters:    Size  Location     Type
 11626 ;;  x               1    wreg     unsigned char 
 11627 ;;  pic             1   19[COMRAM] unsigned char 
 11628 ;; Auto vars:     Size  Location     Type
 11629 ;;  x               1   23[COMRAM] unsigned char 
 11630 ;;  i               1   25[COMRAM] unsigned char 
 11631 ;;  j               1   24[COMRAM] unsigned char 
 11632 ;;  mask            1   22[COMRAM] unsigned char 
 11633 ;; Return value:  Size  Location     Type
 11634 ;;                  1    wreg      void 
 11635 ;; Registers used:
 11636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11637 ;; Tracked objects:
 11638 ;;		On entry : 0/0
 11639 ;;		On exit  : 0/0
 11640 ;;		Unchanged: 0/0
 11641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11642 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11643 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11644 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11645 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11646 ;;Total ram usage:        7 bytes
 11647 ;; Hardware stack levels used:    1
 11648 ;; Hardware stack levels required when called:    4
 11649 ;; This function calls:
 11650 ;;		_pixel_off
 11651 ;;		_pixel_on
 11652 ;; This function is called by:
 11653 ;;		_home_temp
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           	psect	text52
 11658  0017C8                     __ptext52:
 11659                           	opt stack 0
 11660  0017C8                     _pic_to_led:
 11661                           	opt stack 24
 11662                           
 11663                           ;incstack = 0
 11664                           ;pic_to_led@x stored from wreg
 11665  0017C8  6E18               	movwf	pic_to_led@x,c
 11666                           
 11667                           ;display.c: 45: uint8_t i, j, mask=0x01;
 11668  0017CA  0E01               	movlw	1
 11669  0017CC  6E17               	movwf	pic_to_led@mask,c
 11670                           
 11671                           ;display.c: 47: for(i=0; i<7; i++){
 11672  0017CE  6A1A               	clrf	pic_to_led@i,c
 11673  0017D0                     l409:
 11674                           
 11675                           ;display.c: 48: for(j=0;j<8;j++){
 11676  0017D0  6A19               	clrf	pic_to_led@j,c
 11677  0017D2                     l5368:
 11678                           
 11679                           ;display.c: 49: if(pic7x8[pic][i] & mask){
 11680  0017D2  5014               	movf	pic_to_led@pic,w,c
 11681  0017D4  0D07               	mullw	7
 11682  0017D6  0ED5               	movlw	low _pic7x8
 11683  0017D8  6E15               	movwf	??_pic_to_led& (0+255),c
 11684  0017DA  0EB8               	movlw	high _pic7x8
 11685  0017DC  6E16               	movwf	(??_pic_to_led+1)& (0+255),c
 11686  0017DE  50F3               	movf	prodl,w,c
 11687  0017E0  2615               	addwf	??_pic_to_led,f,c
 11688  0017E2  50F4               	movf	prodh,w,c
 11689  0017E4  2216               	addwfc	??_pic_to_led+1,f,c
 11690  0017E6  501A               	movf	pic_to_led@i,w,c
 11691  0017E8  2615               	addwf	??_pic_to_led,f,c
 11692  0017EA  0E00               	movlw	0
 11693  0017EC  2216               	addwfc	??_pic_to_led+1,f,c
 11694  0017EE  C015  FFF6         	movff	??_pic_to_led,tblptrl
 11695  0017F2  C016  FFF7         	movff	??_pic_to_led+1,tblptrh
 11696  0017F6                     	if	0	;tblptru may be non-zero
 11697  0017F6                     	endif
 11698  0017F6                     	if	0	;tblptru may be non-zero
 11699  0017F6                     	endif
 11700  0017F6  0008               	tblrd		*
 11701  0017F8  50F5               	movf	tablat,w,c
 11702  0017FA  1417               	andwf	pic_to_led@mask,w,c
 11703  0017FC  E007               	bz	l5372
 11704                           
 11705                           ;display.c: 50: pixel_on(x+i,j);
 11706  0017FE  C019  F00F         	movff	pic_to_led@j,pixel_on@y
 11707  001802  5018               	movf	pic_to_led@x,w,c
 11708  001804  241A               	addwf	pic_to_led@i,w,c
 11709  001806  EC59  F00F         	call	_pixel_on
 11710                           
 11711                           ;display.c: 51: }
 11712  00180A  D006               	goto	l5374
 11713  00180C                     l5372:
 11714                           
 11715                           ;display.c: 52: else {
 11716                           ;display.c: 53: pixel_off(x+i,j);
 11717  00180C  C019  F00F         	movff	pic_to_led@j,pixel_off@y
 11718  001810  5018               	movf	pic_to_led@x,w,c
 11719  001812  241A               	addwf	pic_to_led@i,w,c
 11720  001814  ECD7  F00E         	call	_pixel_off
 11721  001818                     l5374:
 11722                           
 11723                           ;display.c: 54: };
 11724                           ;display.c: 55: mask = mask<<1;
 11725  001818  90D8               	bcf	status,0,c
 11726  00181A  3617               	rlcf	pic_to_led@mask,f,c
 11727  00181C  2A19               	incf	pic_to_led@j,f,c
 11728  00181E  0E07               	movlw	7
 11729  001820  6419               	cpfsgt	pic_to_led@j,c
 11730  001822  D7D7               	goto	l5368
 11731                           
 11732                           ;display.c: 56: };
 11733                           ;display.c: 57: mask=0x01;
 11734  001824  0E01               	movlw	1
 11735  001826  6E17               	movwf	pic_to_led@mask,c
 11736  001828  2A1A               	incf	pic_to_led@i,f,c
 11737  00182A  0E06               	movlw	6
 11738  00182C  641A               	cpfsgt	pic_to_led@i,c
 11739  00182E  D7D0               	goto	l409
 11740  001830  0C06               	retlw	6
 11741  001832                     __end_of_pic_to_led:
 11742                           	opt stack 0
 11743                           tosu	equ	0xFFF
 11744                           tosh	equ	0xFFE
 11745                           tosl	equ	0xFFD
 11746                           pclath	equ	0xFFA
 11747                           tblptru	equ	0xFF8
 11748                           tblptrh	equ	0xFF7
 11749                           tblptrl	equ	0xFF6
 11750                           tablat	equ	0xFF5
 11751                           prodh	equ	0xFF4
 11752                           prodl	equ	0xFF3
 11753                           intcon	equ	0xFF2
 11754                           intcon2	equ	0xFF1
 11755                           postinc0	equ	0xFEE
 11756                           wreg	equ	0xFE8
 11757                           indf1	equ	0xFE7
 11758                           plusw1	equ	0xFE3
 11759                           fsr1h	equ	0xFE2
 11760                           fsr1l	equ	0xFE1
 11761                           indf2	equ	0xFDF
 11762                           postinc2	equ	0xFDE
 11763                           postdec2	equ	0xFDD
 11764                           plusw2	equ	0xFDB
 11765                           fsr2h	equ	0xFDA
 11766                           fsr2l	equ	0xFD9
 11767                           status	equ	0xFD8
 11768                           
 11769 ;; *************** function _pixel_on *****************
 11770 ;; Defined at:
 11771 ;;		line 27 in file "display.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;  x               1    wreg     unsigned char 
 11774 ;;  y               1   14[COMRAM] unsigned char 
 11775 ;; Auto vars:     Size  Location     Type
 11776 ;;  x               1   17[COMRAM] unsigned char 
 11777 ;; Return value:  Size  Location     Type
 11778 ;;                  1    wreg      void 
 11779 ;; Registers used:
 11780 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11781 ;; Tracked objects:
 11782 ;;		On entry : 0/0
 11783 ;;		On exit  : 0/0
 11784 ;;		Unchanged: 0/0
 11785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11786 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11787 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11788 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11789 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11790 ;;Total ram usage:        4 bytes
 11791 ;; Hardware stack levels used:    1
 11792 ;; Hardware stack levels required when called:    3
 11793 ;; This function calls:
 11794 ;;		Nothing
 11795 ;; This function is called by:
 11796 ;;		_pic_to_led
 11797 ;;		_putchar_b_buf
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800                           
 11801                           	psect	text53
 11802  001EB2                     __ptext53:
 11803                           	opt stack 0
 11804  001EB2                     _pixel_on:
 11805                           	opt stack 24
 11806                           
 11807                           ;incstack = 0
 11808                           ;pixel_on@x stored from wreg
 11809  001EB2  6E12               	movwf	pixel_on@x,c
 11810                           
 11811                           ;display.c: 29: Dis_Buff[x] |= (1<<y);
 11812  001EB4  C00F  F010         	movff	pixel_on@y,??_pixel_on
 11813  001EB8  0E01               	movlw	1
 11814  001EBA  6E11               	movwf	(??_pixel_on+1)& (0+255),c
 11815  001EBC  2A10               	incf	??_pixel_on,f,c
 11816  001EBE  D002               	goto	u3404
 11817  001EC0                     u3405:
 11818  001EC0  90D8               	bcf	status,0,c
 11819  001EC2  3611               	rlcf	??_pixel_on+1,f,c
 11820  001EC4                     u3404:
 11821  001EC4  2E10               	decfsz	??_pixel_on,f,c
 11822  001EC6  D7FC               	goto	u3405
 11823  001EC8  5012               	movf	pixel_on@x,w,c
 11824  001ECA  0F89               	addlw	low _Dis_Buff
 11825  001ECC  6ED9               	movwf	fsr2l,c
 11826  001ECE  6ADA               	clrf	fsr2h,c
 11827  001ED0  5011               	movf	??_pixel_on+1,w,c
 11828  001ED2  12DF               	iorwf	indf2,f,c
 11829  001ED4  0012               	return		;funcret
 11830  001ED6                     __end_of_pixel_on:
 11831                           	opt stack 0
 11832                           tosu	equ	0xFFF
 11833                           tosh	equ	0xFFE
 11834                           tosl	equ	0xFFD
 11835                           pclath	equ	0xFFA
 11836                           tblptru	equ	0xFF8
 11837                           tblptrh	equ	0xFF7
 11838                           tblptrl	equ	0xFF6
 11839                           tablat	equ	0xFF5
 11840                           prodh	equ	0xFF4
 11841                           prodl	equ	0xFF3
 11842                           intcon	equ	0xFF2
 11843                           intcon2	equ	0xFF1
 11844                           postinc0	equ	0xFEE
 11845                           wreg	equ	0xFE8
 11846                           indf1	equ	0xFE7
 11847                           plusw1	equ	0xFE3
 11848                           fsr1h	equ	0xFE2
 11849                           fsr1l	equ	0xFE1
 11850                           indf2	equ	0xFDF
 11851                           postinc2	equ	0xFDE
 11852                           postdec2	equ	0xFDD
 11853                           plusw2	equ	0xFDB
 11854                           fsr2h	equ	0xFDA
 11855                           fsr2l	equ	0xFD9
 11856                           status	equ	0xFD8
 11857                           
 11858 ;; *************** function _pixel_off *****************
 11859 ;; Defined at:
 11860 ;;		line 35 in file "display.c"
 11861 ;; Parameters:    Size  Location     Type
 11862 ;;  x               1    wreg     unsigned char 
 11863 ;;  y               1   14[COMRAM] unsigned char 
 11864 ;; Auto vars:     Size  Location     Type
 11865 ;;  x               1   18[COMRAM] unsigned char 
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  1    wreg      void 
 11868 ;; Registers used:
 11869 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11875 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11877 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11878 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11879 ;;Total ram usage:        5 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:    3
 11882 ;; This function calls:
 11883 ;;		Nothing
 11884 ;; This function is called by:
 11885 ;;		_pic_to_led
 11886 ;;		_putchar_b_buf
 11887 ;; This function uses a non-reentrant model
 11888 ;;
 11889                           
 11890                           	psect	text54
 11891  001DAE                     __ptext54:
 11892                           	opt stack 0
 11893  001DAE                     _pixel_off:
 11894                           	opt stack 24
 11895                           
 11896                           ;incstack = 0
 11897                           ;pixel_off@x stored from wreg
 11898  001DAE  6E13               	movwf	pixel_off@x,c
 11899                           
 11900                           ;display.c: 37: Dis_Buff[x] &= ~(1<<y);
 11901  001DB0  C00F  F010         	movff	pixel_off@y,??_pixel_off
 11902  001DB4  0E01               	movlw	1
 11903  001DB6  6E11               	movwf	(??_pixel_off+1)& (0+255),c
 11904  001DB8  2A10               	incf	??_pixel_off,f,c
 11905  001DBA  D002               	goto	u3414
 11906  001DBC                     u3415:
 11907  001DBC  90D8               	bcf	status,0,c
 11908  001DBE  3611               	rlcf	??_pixel_off+1,f,c
 11909  001DC0                     u3414:
 11910  001DC0  2E10               	decfsz	??_pixel_off,f,c
 11911  001DC2  D7FC               	goto	u3415
 11912  001DC4  1C11               	comf	??_pixel_off+1,w,c
 11913  001DC6  6E12               	movwf	(??_pixel_off+2)& (0+255),c
 11914  001DC8  5013               	movf	pixel_off@x,w,c
 11915  001DCA  0F89               	addlw	low _Dis_Buff
 11916  001DCC  6ED9               	movwf	fsr2l,c
 11917  001DCE  6ADA               	clrf	fsr2h,c
 11918  001DD0  5012               	movf	??_pixel_off+2,w,c
 11919  001DD2  16DF               	andwf	indf2,f,c
 11920  001DD4  0012               	return		;funcret
 11921  001DD6                     __end_of_pixel_off:
 11922                           	opt stack 0
 11923                           tosu	equ	0xFFF
 11924                           tosh	equ	0xFFE
 11925                           tosl	equ	0xFFD
 11926                           pclath	equ	0xFFA
 11927                           tblptru	equ	0xFF8
 11928                           tblptrh	equ	0xFF7
 11929                           tblptrl	equ	0xFF6
 11930                           tablat	equ	0xFF5
 11931                           prodh	equ	0xFF4
 11932                           prodl	equ	0xFF3
 11933                           intcon	equ	0xFF2
 11934                           intcon2	equ	0xFF1
 11935                           postinc0	equ	0xFEE
 11936                           wreg	equ	0xFE8
 11937                           indf1	equ	0xFE7
 11938                           plusw1	equ	0xFE3
 11939                           fsr1h	equ	0xFE2
 11940                           fsr1l	equ	0xFE1
 11941                           indf2	equ	0xFDF
 11942                           postinc2	equ	0xFDE
 11943                           postdec2	equ	0xFDD
 11944                           plusw2	equ	0xFDB
 11945                           fsr2h	equ	0xFDA
 11946                           fsr2l	equ	0xFD9
 11947                           status	equ	0xFD8
 11948                           
 11949 ;; *************** function _clear_matrix *****************
 11950 ;; Defined at:
 11951 ;;		line 159 in file "display.c"
 11952 ;; Parameters:    Size  Location     Type
 11953 ;;		None
 11954 ;; Auto vars:     Size  Location     Type
 11955 ;;  i               1   14[COMRAM] unsigned char 
 11956 ;; Return value:  Size  Location     Type
 11957 ;;                  1    wreg      void 
 11958 ;; Registers used:
 11959 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11960 ;; Tracked objects:
 11961 ;;		On entry : 0/0
 11962 ;;		On exit  : 0/0
 11963 ;;		Unchanged: 0/0
 11964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11969 ;;Total ram usage:        1 bytes
 11970 ;; Hardware stack levels used:    1
 11971 ;; Hardware stack levels required when called:    3
 11972 ;; This function calls:
 11973 ;;		Nothing
 11974 ;; This function is called by:
 11975 ;;		_main
 11976 ;;		_time_set_hr
 11977 ;;		_home_temp
 11978 ;; This function uses a non-reentrant model
 11979 ;;
 11980                           
 11981                           	psect	text55
 11982  001FEA                     __ptext55:
 11983                           	opt stack 0
 11984  001FEA                     _clear_matrix:
 11985                           	opt stack 27
 11986                           
 11987                           ;display.c: 161: uint8_t i;
 11988                           ;display.c: 162: for (i=0; i<=4 * 8; i++)
 11989                           
 11990                           ;incstack = 0
 11991  001FEA  6A0F               	clrf	clear_matrix@i,c
 11992  001FEC                     l5276:
 11993                           
 11994                           ;display.c: 163: Dis_Buff[i] = 0;
 11995  001FEC  500F               	movf	clear_matrix@i,w,c
 11996  001FEE  ECF3  F005         	call	PL82	;call to abstracted procedure
 11997  001FF2  2A0F               	incf	clear_matrix@i,f,c
 11998  001FF4  0E20               	movlw	32
 11999  001FF6  640F               	cpfsgt	clear_matrix@i,c
 12000  001FF8  D7F9               	goto	l5276
 12001  001FFA  0C20               	retlw	32
 12002  001FFC                     __end_of_clear_matrix:
 12003                           	opt stack 0
 12004                           tosu	equ	0xFFF
 12005                           tosh	equ	0xFFE
 12006                           tosl	equ	0xFFD
 12007                           pclath	equ	0xFFA
 12008                           tblptru	equ	0xFF8
 12009                           tblptrh	equ	0xFF7
 12010                           tblptrl	equ	0xFF6
 12011                           tablat	equ	0xFF5
 12012                           prodh	equ	0xFF4
 12013                           prodl	equ	0xFF3
 12014                           intcon	equ	0xFF2
 12015                           intcon2	equ	0xFF1
 12016                           postinc0	equ	0xFEE
 12017                           wreg	equ	0xFE8
 12018                           indf1	equ	0xFE7
 12019                           plusw1	equ	0xFE3
 12020                           fsr1h	equ	0xFE2
 12021                           fsr1l	equ	0xFE1
 12022                           indf2	equ	0xFDF
 12023                           postinc2	equ	0xFDE
 12024                           postdec2	equ	0xFDD
 12025                           plusw2	equ	0xFDB
 12026                           fsr2h	equ	0xFDA
 12027                           fsr2l	equ	0xFD9
 12028                           status	equ	0xFD8
 12029                           
 12030 ;; *************** function ___lwmod *****************
 12031 ;; Defined at:
 12032 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 12033 ;; Parameters:    Size  Location     Type
 12034 ;;  dividend        2   21[COMRAM] unsigned int 
 12035 ;;  divisor         2   23[COMRAM] unsigned int 
 12036 ;; Auto vars:     Size  Location     Type
 12037 ;;  counter         1   25[COMRAM] unsigned char 
 12038 ;; Return value:  Size  Location     Type
 12039 ;;                  2   21[COMRAM] unsigned int 
 12040 ;; Registers used:
 12041 ;;		wreg, status,2, status,0
 12042 ;; Tracked objects:
 12043 ;;		On entry : 0/0
 12044 ;;		On exit  : 0/0
 12045 ;;		Unchanged: 0/0
 12046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12050 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12051 ;;Total ram usage:        5 bytes
 12052 ;; Hardware stack levels used:    1
 12053 ;; Hardware stack levels required when called:    3
 12054 ;; This function calls:
 12055 ;;		Nothing
 12056 ;; This function is called by:
 12057 ;;		_home_temp
 12058 ;;		_readTemp_Single
 12059 ;; This function uses a non-reentrant model
 12060 ;;
 12061                           
 12062                           	psect	text56
 12063  001B0A                     __ptext56:
 12064                           	opt stack 0
 12065  001B0A                     ___lwmod:
 12066                           	opt stack 24
 12067                           
 12068                           ;incstack = 0
 12069  001B0A  5018               	movf	___lwmod@divisor,w,c
 12070  001B0C  1019               	iorwf	___lwmod@divisor+1,w,c
 12071  001B0E  E017               	bz	l1635
 12072  001B10  0E01               	movlw	1
 12073  001B12  6E1A               	movwf	___lwmod@counter,c
 12074  001B14  D004               	goto	l5260
 12075  001B16                     l5258:
 12076  001B16  90D8               	bcf	status,0,c
 12077  001B18  3618               	rlcf	___lwmod@divisor,f,c
 12078  001B1A  3619               	rlcf	___lwmod@divisor+1,f,c
 12079  001B1C  2A1A               	incf	___lwmod@counter,f,c
 12080  001B1E                     l5260:
 12081  001B1E  AE19               	btfss	___lwmod@divisor+1,7,c
 12082  001B20  D7FA               	goto	l5258
 12083  001B22                     l5262:
 12084  001B22  5018               	movf	___lwmod@divisor,w,c
 12085  001B24  5C16               	subwf	___lwmod@dividend,w,c
 12086  001B26  5019               	movf	___lwmod@divisor+1,w,c
 12087  001B28  5817               	subwfb	___lwmod@dividend+1,w,c
 12088  001B2A  E304               	bnc	l5266
 12089  001B2C  5018               	movf	___lwmod@divisor,w,c
 12090  001B2E  5E16               	subwf	___lwmod@dividend,f,c
 12091  001B30  5019               	movf	___lwmod@divisor+1,w,c
 12092  001B32  5A17               	subwfb	___lwmod@dividend+1,f,c
 12093  001B34                     l5266:
 12094  001B34  90D8               	bcf	status,0,c
 12095  001B36  3219               	rrcf	___lwmod@divisor+1,f,c
 12096  001B38  3218               	rrcf	___lwmod@divisor,f,c
 12097  001B3A  2E1A               	decfsz	___lwmod@counter,f,c
 12098  001B3C  D7F2               	goto	l5262
 12099  001B3E                     l1635:
 12100  001B3E  C016  F016         	movff	___lwmod@dividend,?___lwmod
 12101  001B42  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 12102  001B46  0012               	return		;funcret
 12103  001B48                     __end_of___lwmod:
 12104                           	opt stack 0
 12105                           tosu	equ	0xFFF
 12106                           tosh	equ	0xFFE
 12107                           tosl	equ	0xFFD
 12108                           pclath	equ	0xFFA
 12109                           tblptru	equ	0xFF8
 12110                           tblptrh	equ	0xFF7
 12111                           tblptrl	equ	0xFF6
 12112                           tablat	equ	0xFF5
 12113                           prodh	equ	0xFF4
 12114                           prodl	equ	0xFF3
 12115                           intcon	equ	0xFF2
 12116                           intcon2	equ	0xFF1
 12117                           postinc0	equ	0xFEE
 12118                           wreg	equ	0xFE8
 12119                           indf1	equ	0xFE7
 12120                           plusw1	equ	0xFE3
 12121                           fsr1h	equ	0xFE2
 12122                           fsr1l	equ	0xFE1
 12123                           indf2	equ	0xFDF
 12124                           postinc2	equ	0xFDE
 12125                           postdec2	equ	0xFDD
 12126                           plusw2	equ	0xFDB
 12127                           fsr2h	equ	0xFDA
 12128                           fsr2l	equ	0xFD9
 12129                           status	equ	0xFD8
 12130                           
 12131 ;; *************** function ___lwdiv *****************
 12132 ;; Defined at:
 12133 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 12134 ;; Parameters:    Size  Location     Type
 12135 ;;  dividend        2   14[COMRAM] unsigned int 
 12136 ;;  divisor         2   16[COMRAM] unsigned int 
 12137 ;; Auto vars:     Size  Location     Type
 12138 ;;  quotient        2   19[COMRAM] unsigned int 
 12139 ;;  counter         1   18[COMRAM] unsigned char 
 12140 ;; Return value:  Size  Location     Type
 12141 ;;                  2   14[COMRAM] unsigned int 
 12142 ;; Registers used:
 12143 ;;		wreg, status,2, status,0
 12144 ;; Tracked objects:
 12145 ;;		On entry : 0/0
 12146 ;;		On exit  : 0/0
 12147 ;;		Unchanged: 0/0
 12148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12149 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12150 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12152 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12153 ;;Total ram usage:        7 bytes
 12154 ;; Hardware stack levels used:    1
 12155 ;; Hardware stack levels required when called:    3
 12156 ;; This function calls:
 12157 ;;		Nothing
 12158 ;; This function is called by:
 12159 ;;		_home_temp
 12160 ;;		_readTemp_Single
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           	psect	text57
 12165  0019F4                     __ptext57:
 12166                           	opt stack 0
 12167  0019F4                     ___lwdiv:
 12168                           	opt stack 24
 12169                           
 12170                           ;incstack = 0
 12171  0019F4  6A14               	clrf	___lwdiv@quotient,c
 12172  0019F6  6A15               	clrf	___lwdiv@quotient+1,c
 12173  0019F8  5011               	movf	___lwdiv@divisor,w,c
 12174  0019FA  1012               	iorwf	___lwdiv@divisor+1,w,c
 12175  0019FC  E01B               	bz	l1625
 12176  0019FE  0E01               	movlw	1
 12177  001A00  6E13               	movwf	___lwdiv@counter,c
 12178  001A02  D004               	goto	l5240
 12179  001A04                     l5238:
 12180  001A04  90D8               	bcf	status,0,c
 12181  001A06  3611               	rlcf	___lwdiv@divisor,f,c
 12182  001A08  3612               	rlcf	___lwdiv@divisor+1,f,c
 12183  001A0A  2A13               	incf	___lwdiv@counter,f,c
 12184  001A0C                     l5240:
 12185  001A0C  AE12               	btfss	___lwdiv@divisor+1,7,c
 12186  001A0E  D7FA               	goto	l5238
 12187  001A10                     l5242:
 12188  001A10  90D8               	bcf	status,0,c
 12189  001A12  3614               	rlcf	___lwdiv@quotient,f,c
 12190  001A14  3615               	rlcf	___lwdiv@quotient+1,f,c
 12191  001A16  5011               	movf	___lwdiv@divisor,w,c
 12192  001A18  5C0F               	subwf	___lwdiv@dividend,w,c
 12193  001A1A  5012               	movf	___lwdiv@divisor+1,w,c
 12194  001A1C  5810               	subwfb	___lwdiv@dividend+1,w,c
 12195  001A1E  E305               	bnc	l5250
 12196  001A20  5011               	movf	___lwdiv@divisor,w,c
 12197  001A22  5E0F               	subwf	___lwdiv@dividend,f,c
 12198  001A24  5012               	movf	___lwdiv@divisor+1,w,c
 12199  001A26  5A10               	subwfb	___lwdiv@dividend+1,f,c
 12200  001A28  8014               	bsf	___lwdiv@quotient,0,c
 12201  001A2A                     l5250:
 12202  001A2A  90D8               	bcf	status,0,c
 12203  001A2C  3212               	rrcf	___lwdiv@divisor+1,f,c
 12204  001A2E  3211               	rrcf	___lwdiv@divisor,f,c
 12205  001A30  2E13               	decfsz	___lwdiv@counter,f,c
 12206  001A32  D7EE               	goto	l5242
 12207  001A34                     l1625:
 12208  001A34  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 12209  001A38  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12210  001A3C  0012               	return		;funcret
 12211  001A3E                     __end_of___lwdiv:
 12212                           	opt stack 0
 12213                           tosu	equ	0xFFF
 12214                           tosh	equ	0xFFE
 12215                           tosl	equ	0xFFD
 12216                           pclath	equ	0xFFA
 12217                           tblptru	equ	0xFF8
 12218                           tblptrh	equ	0xFF7
 12219                           tblptrl	equ	0xFF6
 12220                           tablat	equ	0xFF5
 12221                           prodh	equ	0xFF4
 12222                           prodl	equ	0xFF3
 12223                           intcon	equ	0xFF2
 12224                           intcon2	equ	0xFF1
 12225                           postinc0	equ	0xFEE
 12226                           wreg	equ	0xFE8
 12227                           indf1	equ	0xFE7
 12228                           plusw1	equ	0xFE3
 12229                           fsr1h	equ	0xFE2
 12230                           fsr1l	equ	0xFE1
 12231                           indf2	equ	0xFDF
 12232                           postinc2	equ	0xFDE
 12233                           postdec2	equ	0xFDD
 12234                           plusw2	equ	0xFDB
 12235                           fsr2h	equ	0xFDA
 12236                           fsr2l	equ	0xFD9
 12237                           status	equ	0xFD8
 12238                           
 12239 ;; *************** function ___lbmod *****************
 12240 ;; Defined at:
 12241 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbmod.c"
 12242 ;; Parameters:    Size  Location     Type
 12243 ;;  dividend        1    wreg     unsigned char 
 12244 ;;  divisor         1   18[COMRAM] unsigned char 
 12245 ;; Auto vars:     Size  Location     Type
 12246 ;;  dividend        1   19[COMRAM] unsigned char 
 12247 ;;  rem             1   21[COMRAM] unsigned char 
 12248 ;;  counter         1   20[COMRAM] unsigned char 
 12249 ;; Return value:  Size  Location     Type
 12250 ;;                  1    wreg      unsigned char 
 12251 ;; Registers used:
 12252 ;;		wreg, status,2, status,0
 12253 ;; Tracked objects:
 12254 ;;		On entry : 0/0
 12255 ;;		On exit  : 0/0
 12256 ;;		Unchanged: 0/0
 12257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12258 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12259 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12261 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12262 ;;Total ram usage:        4 bytes
 12263 ;; Hardware stack levels used:    1
 12264 ;; Hardware stack levels required when called:    3
 12265 ;; This function calls:
 12266 ;;		Nothing
 12267 ;; This function is called by:
 12268 ;;		_FillBuf
 12269 ;;		_decimal_to_bcd
 12270 ;;		_time_set_min
 12271 ;;		_time_set_hr
 12272 ;;		_time_set_yr
 12273 ;;		_time_set_dt
 12274 ;;		_set_font_set
 12275 ;;		_home_temp
 12276 ;; This function uses a non-reentrant model
 12277 ;;
 12278                           
 12279                           	psect	text58
 12280  001DFC                     __ptext58:
 12281                           	opt stack 0
 12282  001DFC                     ___lbmod:
 12283                           	opt stack 23
 12284                           
 12285                           ;incstack = 0
 12286                           ;___lbmod@dividend stored from wreg
 12287  001DFC  6E14               	movwf	___lbmod@dividend,c
 12288  001DFE  0E08               	movlw	8
 12289  001E00  6E15               	movwf	___lbmod@counter,c
 12290  001E02  6A16               	clrf	___lbmod@rem,c
 12291  001E04                     l5118:
 12292  001E04  90D8               	bcf	status,0,c
 12293  001E06  3414               	rlcf	___lbmod@dividend,w,c
 12294  001E08  3416               	rlcf	___lbmod@rem,w,c
 12295  001E0A  6E16               	movwf	___lbmod@rem,c
 12296  001E0C  90D8               	bcf	status,0,c
 12297  001E0E  3614               	rlcf	___lbmod@dividend,f,c
 12298  001E10  5013               	movf	___lbmod@divisor,w,c
 12299  001E12  5C16               	subwf	___lbmod@rem,w,c
 12300  001E14  E302               	bnc	l5126
 12301  001E16  5013               	movf	___lbmod@divisor,w,c
 12302  001E18  5E16               	subwf	___lbmod@rem,f,c
 12303  001E1A                     l5126:
 12304  001E1A  2E15               	decfsz	___lbmod@counter,f,c
 12305  001E1C  D7F3               	goto	l5118
 12306  001E1E  5016               	movf	___lbmod@rem,w,c
 12307  001E20  0012               	return		;funcret
 12308  001E22                     __end_of___lbmod:
 12309                           	opt stack 0
 12310                           tosu	equ	0xFFF
 12311                           tosh	equ	0xFFE
 12312                           tosl	equ	0xFFD
 12313                           pclath	equ	0xFFA
 12314                           tblptru	equ	0xFF8
 12315                           tblptrh	equ	0xFF7
 12316                           tblptrl	equ	0xFF6
 12317                           tablat	equ	0xFF5
 12318                           prodh	equ	0xFF4
 12319                           prodl	equ	0xFF3
 12320                           intcon	equ	0xFF2
 12321                           intcon2	equ	0xFF1
 12322                           postinc0	equ	0xFEE
 12323                           wreg	equ	0xFE8
 12324                           indf1	equ	0xFE7
 12325                           plusw1	equ	0xFE3
 12326                           fsr1h	equ	0xFE2
 12327                           fsr1l	equ	0xFE1
 12328                           indf2	equ	0xFDF
 12329                           postinc2	equ	0xFDE
 12330                           postdec2	equ	0xFDD
 12331                           plusw2	equ	0xFDB
 12332                           fsr2h	equ	0xFDA
 12333                           fsr2l	equ	0xFD9
 12334                           status	equ	0xFD8
 12335                           
 12336 ;; *************** function ___lbdiv *****************
 12337 ;; Defined at:
 12338 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbdiv.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;  dividend        1    wreg     unsigned char 
 12341 ;;  divisor         1   14[COMRAM] unsigned char 
 12342 ;; Auto vars:     Size  Location     Type
 12343 ;;  dividend        1   15[COMRAM] unsigned char 
 12344 ;;  quotient        1   17[COMRAM] unsigned char 
 12345 ;;  counter         1   16[COMRAM] unsigned char 
 12346 ;; Return value:  Size  Location     Type
 12347 ;;                  1    wreg      unsigned char 
 12348 ;; Registers used:
 12349 ;;		wreg, status,2, status,0
 12350 ;; Tracked objects:
 12351 ;;		On entry : 0/0
 12352 ;;		On exit  : 0/0
 12353 ;;		Unchanged: 0/0
 12354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12355 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12356 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12358 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12359 ;;Total ram usage:        4 bytes
 12360 ;; Hardware stack levels used:    1
 12361 ;; Hardware stack levels required when called:    3
 12362 ;; This function calls:
 12363 ;;		Nothing
 12364 ;; This function is called by:
 12365 ;;		_FillBuf
 12366 ;;		_decimal_to_bcd
 12367 ;;		_time_set_min
 12368 ;;		_time_set_hr
 12369 ;;		_time_set_yr
 12370 ;;		_time_set_dt
 12371 ;;		_home_temp
 12372 ;; This function uses a non-reentrant model
 12373 ;;
 12374                           
 12375                           	psect	text59
 12376  001CA0                     __ptext59:
 12377                           	opt stack 0
 12378  001CA0                     ___lbdiv:
 12379                           	opt stack 23
 12380                           
 12381                           ;incstack = 0
 12382                           ;___lbdiv@dividend stored from wreg
 12383  001CA0  6E10               	movwf	___lbdiv@dividend,c
 12384  001CA2  6A12               	clrf	___lbdiv@quotient,c
 12385  001CA4  500F               	movf	___lbdiv@divisor,w,c
 12386  001CA6  E014               	bz	l5110
 12387  001CA8  0E01               	movlw	1
 12388  001CAA  6E11               	movwf	___lbdiv@counter,c
 12389  001CAC  D003               	goto	l5098
 12390  001CAE                     l5094:
 12391  001CAE  90D8               	bcf	status,0,c
 12392  001CB0  360F               	rlcf	___lbdiv@divisor,f,c
 12393  001CB2  2A11               	incf	___lbdiv@counter,f,c
 12394  001CB4                     l5098:
 12395  001CB4  AE0F               	btfss	___lbdiv@divisor,7,c
 12396  001CB6  D7FB               	goto	l5094
 12397  001CB8                     l5100:
 12398  001CB8  90D8               	bcf	status,0,c
 12399  001CBA  3612               	rlcf	___lbdiv@quotient,f,c
 12400  001CBC  500F               	movf	___lbdiv@divisor,w,c
 12401  001CBE  5C10               	subwf	___lbdiv@dividend,w,c
 12402  001CC0  E303               	bnc	l5106
 12403  001CC2  500F               	movf	___lbdiv@divisor,w,c
 12404  001CC4  5E10               	subwf	___lbdiv@dividend,f,c
 12405  001CC6  8012               	bsf	___lbdiv@quotient,0,c
 12406  001CC8                     l5106:
 12407  001CC8  90D8               	bcf	status,0,c
 12408  001CCA  320F               	rrcf	___lbdiv@divisor,f,c
 12409  001CCC  2E11               	decfsz	___lbdiv@counter,f,c
 12410  001CCE  D7F4               	goto	l5100
 12411  001CD0                     l5110:
 12412  001CD0  5012               	movf	___lbdiv@quotient,w,c
 12413  001CD2  0012               	return		;funcret
 12414  001CD4                     __end_of___lbdiv:
 12415                           	opt stack 0
 12416                           tosu	equ	0xFFF
 12417                           tosh	equ	0xFFE
 12418                           tosl	equ	0xFFD
 12419                           pclath	equ	0xFFA
 12420                           tblptru	equ	0xFF8
 12421                           tblptrh	equ	0xFF7
 12422                           tblptrl	equ	0xFF6
 12423                           tablat	equ	0xFF5
 12424                           prodh	equ	0xFF4
 12425                           prodl	equ	0xFF3
 12426                           intcon	equ	0xFF2
 12427                           intcon2	equ	0xFF1
 12428                           postinc0	equ	0xFEE
 12429                           wreg	equ	0xFE8
 12430                           indf1	equ	0xFE7
 12431                           plusw1	equ	0xFE3
 12432                           fsr1h	equ	0xFE2
 12433                           fsr1l	equ	0xFE1
 12434                           indf2	equ	0xFDF
 12435                           postinc2	equ	0xFDE
 12436                           postdec2	equ	0xFDD
 12437                           plusw2	equ	0xFDB
 12438                           fsr2h	equ	0xFDA
 12439                           fsr2l	equ	0xFD9
 12440                           status	equ	0xFD8
 12441                           
 12442 ;; *************** function _RTOS_SetTask *****************
 12443 ;; Defined at:
 12444 ;;		line 22 in file "dispatcher.c"
 12445 ;; Parameters:    Size  Location     Type
 12446 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 12447 ;;		 -> home_temp(1), set_font_set(1), time_set_dy(1), time_set_dt(1), 
 12448 ;;		 -> time_set_mt(1), time_set_yr(1), default_state(1), time_set_hr(1), 
 12449 ;;		 -> time_set_min(1), GetTime(1), key_press(1), time_led(1), 
 12450 ;;  taskDelay       2   16[COMRAM] unsigned int 
 12451 ;;  taskPeriod      2   18[COMRAM] unsigned int 
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;  i               1   22[COMRAM] unsigned char 
 12454 ;; Return value:  Size  Location     Type
 12455 ;;                  1    wreg      void 
 12456 ;; Registers used:
 12457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12458 ;; Tracked objects:
 12459 ;;		On entry : 0/0
 12460 ;;		On exit  : 0/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12463 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12465 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12466 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12467 ;;Total ram usage:        9 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; Hardware stack levels required when called:    3
 12470 ;; This function calls:
 12471 ;;		Nothing
 12472 ;; This function is called by:
 12473 ;;		_main
 12474 ;;		_time_set_min
 12475 ;;		_time_set_hr
 12476 ;;		_time_set_yr
 12477 ;;		_time_set_mt
 12478 ;;		_time_set_dt
 12479 ;;		_time_set_dy
 12480 ;;		_set_font_set
 12481 ;;		_home_temp
 12482 ;;		_time_led
 12483 ;; This function uses a non-reentrant model
 12484 ;;
 12485                           
 12486                           	psect	text60
 12487  001574                     __ptext60:
 12488                           	opt stack 0
 12489  001574                     _RTOS_SetTask:
 12490                           	opt stack 27
 12491                           
 12492                           ;dispatcher.c: 24: uint8_t i;
 12493                           ;dispatcher.c: 26: if(!taskFunc) return;
 12494                           
 12495                           ;incstack = 0
 12496  001574  500F               	movf	RTOS_SetTask@taskFunc,w,c
 12497  001576  1010               	iorwf	RTOS_SetTask@taskFunc+1,w,c
 12498  001578  E101               	bnz	l234
 12499  00157A  0012               	return	
 12500  00157C                     l234:
 12501                           
 12502                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 12503  00157C  6A17               	clrf	RTOS_SetTask@i,c
 12504  00157E  D018               	goto	l5298
 12505  001580                     l5286:
 12506                           
 12507                           ;dispatcher.c: 28: {
 12508                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 12509  001580  5017               	movf	RTOS_SetTask@i,w,c
 12510  001582  ECBA  F009         	call	PL22	;call to abstracted procedure
 12511  001586  500F               	movf	RTOS_SetTask@taskFunc,w,c	;volatile
 12512  001588  18DE               	xorwf	postinc2,w,c
 12513  00158A  E111               	bnz	l5296
 12514  00158C  5010               	movf	RTOS_SetTask@taskFunc+1,w,c	;volatile
 12515  00158E  18DE               	xorwf	postinc2,w,c
 12516  001590  E10E               	bnz	l5296
 12517                           
 12518                           ;dispatcher.c: 30: {
 12519                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 12520  001592  9EF2               	bcf	intcon,7,c	;volatile
 12521                           
 12522                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 12523  001594  5017               	movf	RTOS_SetTask@i,w,c
 12524  001596  EC96  F008         	call	PL20	;call to abstracted procedure
 12525  00159A  D825               	call	PL76	;call to abstracted procedure
 12526                           
 12527                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 12528  00159C  5017               	movf	RTOS_SetTask@i,w,c
 12529  00159E  ECCC  F009         	call	PL28	;call to abstracted procedure
 12530  0015A2  D826               	call	PL98	;call to abstracted procedure
 12531                           
 12532                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 12533  0015A4  5017               	movf	RTOS_SetTask@i,w,c
 12534  0015A6  ECC2  F009         	call	PL24	;call to abstracted procedure
 12535                           
 12536                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 12537  0015AA  8EF2               	bsf	intcon,7,c	;volatile
 12538  0015AC  0C00               	retlw	0
 12539  0015AE                     l5296:
 12540  0015AE  2A17               	incf	RTOS_SetTask@i,f,c
 12541  0015B0                     l5298:
 12542  0015B0  5060               	movf	_arrayTail,w,c	;volatile
 12543  0015B2  5C17               	subwf	RTOS_SetTask@i,w,c
 12544  0015B4  E3E5               	bnc	l5286
 12545                           
 12546                           ;dispatcher.c: 39: }
 12547                           ;dispatcher.c: 40: }
 12548                           ;dispatcher.c: 42: if (arrayTail < 15)
 12549  0015B6  0E0F               	movlw	15
 12550  0015B8  6060               	cpfslt	_arrayTail,c	;volatile
 12551  0015BA  0C0F               	retlw	15
 12552                           
 12553                           ;dispatcher.c: 43: {
 12554                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 12555  0015BC  9EF2               	bcf	intcon,7,c	;volatile
 12556                           
 12557                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 12558  0015BE  5060               	movf	_arrayTail,w,c	;volatile
 12559  0015C0  ECBA  F009         	call	PL22	;call to abstracted procedure
 12560  0015C4  C00F  FFDE         	movff	RTOS_SetTask@taskFunc,postinc2	;volatile
 12561  0015C8  C010  FFDD         	movff	RTOS_SetTask@taskFunc+1,postdec2	;volatile
 12562                           
 12563                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 12564  0015CC  5060               	movf	_arrayTail,w,c	;volatile
 12565  0015CE  EC96  F008         	call	PL20	;call to abstracted procedure
 12566  0015D2  D809               	call	PL76	;call to abstracted procedure
 12567                           
 12568                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 12569  0015D4  5060               	movf	_arrayTail,w,c	;volatile
 12570  0015D6  ECCC  F009         	call	PL28	;call to abstracted procedure
 12571  0015DA  D80A               	call	PL98	;call to abstracted procedure
 12572                           
 12573                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 12574  0015DC  5060               	movf	_arrayTail,w,c	;volatile
 12575  0015DE  ECC2  F009         	call	PL24	;call to abstracted procedure
 12576                           
 12577                           ;dispatcher.c: 51: arrayTail++;
 12578                           
 12579                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 12580  0015E2  EFDE  F009         	goto	PL118	;call to abstracted procedure
 12581  0015E6                     __end_of_RTOS_SetTask:
 12582                           	opt stack 0
 12583  0015E6                     PL76:
 12584                           	opt stack 27
 12585  0015E6  C011  FFDE         	movff	RTOS_SetTask@taskDelay,postinc2
 12586  0015EA  C012  FFDD         	movff	RTOS_SetTask@taskDelay+1,postdec2
 12587  0015EE  0012               	return	
 12588  0015F0                     __end_ofPL76:
 12589                           	opt stack 0
 12590  0015F0                     PL98:
 12591                           	opt stack 27
 12592  0015F0  C013  FFDE         	movff	RTOS_SetTask@taskPeriod,postinc2
 12593  0015F4  C014  FFDD         	movff	RTOS_SetTask@taskPeriod+1,postdec2
 12594  0015F8  0012               	return	
 12595  0015FA                     __end_ofPL98:
 12596                           	opt stack 0
 12597                           tosu	equ	0xFFF
 12598                           tosh	equ	0xFFE
 12599                           tosl	equ	0xFFD
 12600                           pclath	equ	0xFFA
 12601                           tblptru	equ	0xFF8
 12602                           tblptrh	equ	0xFF7
 12603                           tblptrl	equ	0xFF6
 12604                           tablat	equ	0xFF5
 12605                           prodh	equ	0xFF4
 12606                           prodl	equ	0xFF3
 12607                           intcon	equ	0xFF2
 12608                           intcon2	equ	0xFF1
 12609                           postinc0	equ	0xFEE
 12610                           wreg	equ	0xFE8
 12611                           indf1	equ	0xFE7
 12612                           plusw1	equ	0xFE3
 12613                           fsr1h	equ	0xFE2
 12614                           fsr1l	equ	0xFE1
 12615                           indf2	equ	0xFDF
 12616                           postinc2	equ	0xFDE
 12617                           postdec2	equ	0xFDD
 12618                           plusw2	equ	0xFDB
 12619                           fsr2h	equ	0xFDA
 12620                           fsr2l	equ	0xFD9
 12621                           status	equ	0xFD8
 12622                           
 12623 ;; *************** function _RTOS_DeleteTask *****************
 12624 ;; Defined at:
 12625 ;;		line 59 in file "dispatcher.c"
 12626 ;; Parameters:    Size  Location     Type
 12627 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 12628 ;;		 -> home_temp(1), set_font_set(1), time_set_dy(1), time_set_dt(1), 
 12629 ;;		 -> time_set_mt(1), time_set_yr(1), default_state(1), time_set_hr(1), 
 12630 ;;		 -> time_set_min(1), GetTime(1), key_press(1), time_led(1), 
 12631 ;; Auto vars:     Size  Location     Type
 12632 ;;  i               1   22[COMRAM] unsigned char 
 12633 ;; Return value:  Size  Location     Type
 12634 ;;                  1    wreg      void 
 12635 ;; Registers used:
 12636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12637 ;; Tracked objects:
 12638 ;;		On entry : 0/0
 12639 ;;		On exit  : 0/0
 12640 ;;		Unchanged: 0/0
 12641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12642 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12645 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12646 ;;Total ram usage:        9 bytes
 12647 ;; Hardware stack levels used:    1
 12648 ;; Hardware stack levels required when called:    3
 12649 ;; This function calls:
 12650 ;;		Nothing
 12651 ;; This function is called by:
 12652 ;;		_RTOS_DispatchTask
 12653 ;;		_time_set_min
 12654 ;;		_time_set_hr
 12655 ;;		_time_set_yr
 12656 ;;		_time_set_mt
 12657 ;;		_time_set_dt
 12658 ;;		_time_set_dy
 12659 ;;		_set_font_set
 12660 ;;		_home_temp
 12661 ;;		_time_led
 12662 ;; This function uses a non-reentrant model
 12663 ;;
 12664                           
 12665                           	psect	text61
 12666  0014EA                     __ptext61:
 12667                           	opt stack 0
 12668  0014EA                     _RTOS_DeleteTask:
 12669                           	opt stack 25
 12670                           
 12671                           ;dispatcher.c: 61: uint8_t i;
 12672                           ;dispatcher.c: 63: for (i=0; i<arrayTail; i++)
 12673                           
 12674                           ;incstack = 0
 12675  0014EA  6A17               	clrf	RTOS_DeleteTask@i,c
 12676  0014EC  D03F               	goto	l5342
 12677  0014EE                     l5326:
 12678                           
 12679                           ;dispatcher.c: 64: {
 12680                           ;dispatcher.c: 65: if(TaskArray[i].pFunc == taskFunc)
 12681  0014EE  5017               	movf	RTOS_DeleteTask@i,w,c
 12682  0014F0  ECBA  F009         	call	PL22	;call to abstracted procedure
 12683  0014F4  500F               	movf	RTOS_DeleteTask@taskFunc,w,c	;volatile
 12684  0014F6  18DE               	xorwf	postinc2,w,c
 12685  0014F8  E138               	bnz	l5340
 12686  0014FA  5010               	movf	RTOS_DeleteTask@taskFunc+1,w,c	;volatile
 12687  0014FC  18DE               	xorwf	postinc2,w,c
 12688  0014FE  E135               	bnz	l5340
 12689                           
 12690                           ;dispatcher.c: 66: {
 12691                           ;dispatcher.c: 68: (INTCONbits.GIE = 0);
 12692  001500  9EF2               	bcf	intcon,7,c	;volatile
 12693                           
 12694                           ;dispatcher.c: 69: if(i != (arrayTail - 1))
 12695  001502  5017               	movf	RTOS_DeleteTask@i,w,c
 12696  001504  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 12697  001506  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 12698  001508  6813               	setf	(??_RTOS_DeleteTask+2)& (0+255),c
 12699  00150A  6814               	setf	(??_RTOS_DeleteTask+3)& (0+255),c
 12700  00150C  5060               	movf	_arrayTail,w,c	;volatile
 12701  00150E  6E15               	movwf	(??_RTOS_DeleteTask+4)& (0+255),c
 12702  001510  6A16               	clrf	(??_RTOS_DeleteTask+5)& (0+255),c
 12703  001512  5013               	movf	??_RTOS_DeleteTask+2,w,c
 12704  001514  2615               	addwf	??_RTOS_DeleteTask+4,f,c
 12705  001516  5014               	movf	??_RTOS_DeleteTask+3,w,c
 12706  001518  2216               	addwfc	??_RTOS_DeleteTask+5,f,c
 12707  00151A  5011               	movf	??_RTOS_DeleteTask,w,c
 12708  00151C  1815               	xorwf	??_RTOS_DeleteTask+4,w,c
 12709  00151E  E103               	bnz	u3590
 12710  001520  5012               	movf	??_RTOS_DeleteTask+1,w,c
 12711  001522  1816               	xorwf	??_RTOS_DeleteTask+5,w,c
 12712  001524  E01F               	bz	l5334
 12713  001526                     u3590:
 12714                           
 12715                           ;dispatcher.c: 70: {
 12716                           ;dispatcher.c: 71: TaskArray[i] = TaskArray[arrayTail - 1];
 12717  001526  5060               	movf	_arrayTail,w,c	;volatile
 12718  001528  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 12719  00152A  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 12720  00152C  90D8               	bcf	status,0,c
 12721  00152E  3611               	rlcf	??_RTOS_DeleteTask,f,c
 12722  001530  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 12723  001532  90D8               	bcf	status,0,c
 12724  001534  3611               	rlcf	??_RTOS_DeleteTask,f,c
 12725  001536  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 12726  001538  90D8               	bcf	status,0,c
 12727  00153A  3611               	rlcf	??_RTOS_DeleteTask,f,c
 12728  00153C  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 12729  00153E  0EF8               	movlw	low (_TaskArray+65528)
 12730  001540  2411               	addwf	??_RTOS_DeleteTask,w,c
 12731  001542  6ED9               	movwf	fsr2l,c
 12732  001544  0E00               	movlw	high (_TaskArray+65528)
 12733  001546  2012               	addwfc	??_RTOS_DeleteTask+1,w,c
 12734  001548  6EDA               	movwf	fsr2h,c
 12735  00154A  5017               	movf	RTOS_DeleteTask@i,w,c
 12736  00154C  0D08               	mullw	8
 12737  00154E  0E00               	movlw	low _TaskArray
 12738  001550  24F3               	addwf	prodl,w,c
 12739  001552  6EE1               	movwf	fsr1l,c
 12740  001554  0E01               	movlw	high _TaskArray
 12741  001556  20F4               	addwfc	prodh,w,c
 12742  001558  6EE2               	movwf	fsr1h,c
 12743  00155A  0E07               	movlw	7
 12744  00155C                     u3601:
 12745  00155C  CFDB FFE3          	movff	plusw2,plusw1
 12746  001560  06E8               	decf	wreg,f,c
 12747  001562  E2FC               	bc	u3601
 12748  001564                     l5334:
 12749                           
 12750                           ;dispatcher.c: 72: }
 12751                           ;dispatcher.c: 73: arrayTail--;
 12752  001564  0660               	decf	_arrayTail,f,c	;volatile
 12753                           
 12754                           ;dispatcher.c: 74: (INTCONbits.GIE = 1);
 12755  001566  8EF2               	bsf	intcon,7,c	;volatile
 12756  001568  0012               	return	
 12757  00156A                     l5340:
 12758  00156A  2A17               	incf	RTOS_DeleteTask@i,f,c
 12759  00156C                     l5342:
 12760  00156C  5060               	movf	_arrayTail,w,c	;volatile
 12761  00156E  5C17               	subwf	RTOS_DeleteTask@i,w,c
 12762  001570  E3BE               	bnc	l5326
 12763  001572  0012               	return		;funcret
 12764  001574                     __end_of_RTOS_DeleteTask:
 12765                           	opt stack 0
 12766                           tosu	equ	0xFFF
 12767                           tosh	equ	0xFFE
 12768                           tosl	equ	0xFFD
 12769                           pclath	equ	0xFFA
 12770                           tblptru	equ	0xFF8
 12771                           tblptrh	equ	0xFF7
 12772                           tblptrl	equ	0xFF6
 12773                           tablat	equ	0xFF5
 12774                           prodh	equ	0xFF4
 12775                           prodl	equ	0xFF3
 12776                           intcon	equ	0xFF2
 12777                           intcon2	equ	0xFF1
 12778                           postinc0	equ	0xFEE
 12779                           wreg	equ	0xFE8
 12780                           indf1	equ	0xFE7
 12781                           plusw1	equ	0xFE3
 12782                           fsr1h	equ	0xFE2
 12783                           fsr1l	equ	0xFE1
 12784                           indf2	equ	0xFDF
 12785                           postinc2	equ	0xFDE
 12786                           postdec2	equ	0xFDD
 12787                           plusw2	equ	0xFDB
 12788                           fsr2h	equ	0xFDA
 12789                           fsr2l	equ	0xFD9
 12790                           status	equ	0xFD8
 12791                           
 12792 ;; *************** function _getTime *****************
 12793 ;; Defined at:
 12794 ;;		line 49 in file "ds3231.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;  p3              1   19[COMRAM] PTR unsigned char 
 12797 ;;		 -> TTime(7), 
 12798 ;;  p2              1   20[COMRAM] PTR unsigned char 
 12799 ;;		 -> TTime(7), 
 12800 ;;  p1              1   21[COMRAM] PTR unsigned char 
 12801 ;;		 -> TTime(7), 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;		None
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      void 
 12806 ;; Registers used:
 12807 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12813 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12817 ;;Total ram usage:        3 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:    6
 12820 ;; This function calls:
 12821 ;;		_DS3231_Read
 12822 ;;		_bcd_to_decimal
 12823 ;; This function is called by:
 12824 ;;		_GetTime
 12825 ;;		_home_temp
 12826 ;; This function uses a non-reentrant model
 12827 ;;
 12828                           
 12829                           	psect	text62
 12830  001894                     __ptext62:
 12831                           	opt stack 0
 12832  001894                     _getTime:
 12833                           	opt stack 22
 12834                           
 12835                           ;ds3231.c: 51: *p1 = DS3231_Read(0x00);
 12836                           
 12837                           ;incstack = 0
 12838  001894  5016               	movf	getTime@p1,w,c
 12839  001896  6ED9               	movwf	fsr2l,c
 12840  001898  6ADA               	clrf	fsr2h,c
 12841  00189A  0E00               	movlw	0
 12842  00189C  EC99  F00E         	call	_DS3231_Read
 12843  0018A0  6EDF               	movwf	indf2,c
 12844                           
 12845                           ;ds3231.c: 52: *p1 = bcd_to_decimal(*p1);
 12846  0018A2  5016               	movf	getTime@p1,w,c
 12847  0018A4  6ED9               	movwf	fsr2l,c
 12848  0018A6  6ADA               	clrf	fsr2h,c
 12849  0018A8  5016               	movf	getTime@p1,w,c
 12850  0018AA  EC2B  F00B         	call	PL66	;call to abstracted procedure
 12851  0018AE  ECCE  F00F         	call	_bcd_to_decimal
 12852                           
 12853                           ;ds3231.c: 53: *p2 = DS3231_Read(0x01);
 12854  0018B2  D816               	call	PL92	;call to abstracted procedure
 12855  0018B4  0E01               	movlw	1
 12856  0018B6  EC99  F00E         	call	_DS3231_Read
 12857                           
 12858                           ;ds3231.c: 54: *p2 = bcd_to_decimal(*p2);
 12859  0018BA  D812               	call	PL92	;call to abstracted procedure
 12860  0018BC  5015               	movf	getTime@p2,w,c
 12861  0018BE  EC2B  F00B         	call	PL66	;call to abstracted procedure
 12862  0018C2  ECCE  F00F         	call	_bcd_to_decimal
 12863                           
 12864                           ;ds3231.c: 55: *p3 = (0x3F & DS3231_Read(0x02));
 12865  0018C6  D811               	call	PL96	;call to abstracted procedure
 12866  0018C8  0E02               	movlw	2
 12867  0018CA  EC99  F00E         	call	_DS3231_Read
 12868  0018CE  0B3F               	andlw	63
 12869                           
 12870                           ;ds3231.c: 56: *p3 = bcd_to_decimal(*p3);
 12871  0018D0  D80C               	call	PL96	;call to abstracted procedure
 12872  0018D2  5014               	movf	getTime@p3,w,c
 12873  0018D4  EC2B  F00B         	call	PL66	;call to abstracted procedure
 12874  0018D8  ECCE  F00F         	call	_bcd_to_decimal
 12875  0018DC  6EDF               	movwf	indf2,c
 12876  0018DE  0012               	return		;funcret
 12877  0018E0                     __end_of_getTime:
 12878                           	opt stack 0
 12879  0018E0                     PL92:
 12880                           	opt stack 22
 12881  0018E0  6EDF               	movwf	indf2,c
 12882  0018E2  5015               	movf	getTime@p2,w,c
 12883  0018E4  6ED9               	movwf	fsr2l,c
 12884  0018E6  6ADA               	clrf	fsr2h,c
 12885  0018E8  0012               	return	
 12886  0018EA                     __end_ofPL92:
 12887                           	opt stack 0
 12888  0018EA                     PL96:
 12889                           	opt stack 22
 12890  0018EA  6EDF               	movwf	indf2,c
 12891  0018EC  5014               	movf	getTime@p3,w,c
 12892  0018EE  6ED9               	movwf	fsr2l,c
 12893  0018F0  6ADA               	clrf	fsr2h,c
 12894  0018F2  0012               	return	
 12895  0018F4                     __end_ofPL96:
 12896                           	opt stack 0
 12897                           tosu	equ	0xFFF
 12898                           tosh	equ	0xFFE
 12899                           tosl	equ	0xFFD
 12900                           pclath	equ	0xFFA
 12901                           tblptru	equ	0xFF8
 12902                           tblptrh	equ	0xFF7
 12903                           tblptrl	equ	0xFF6
 12904                           tablat	equ	0xFF5
 12905                           prodh	equ	0xFF4
 12906                           prodl	equ	0xFF3
 12907                           intcon	equ	0xFF2
 12908                           intcon2	equ	0xFF1
 12909                           postinc0	equ	0xFEE
 12910                           wreg	equ	0xFE8
 12911                           indf1	equ	0xFE7
 12912                           plusw1	equ	0xFE3
 12913                           fsr1h	equ	0xFE2
 12914                           fsr1l	equ	0xFE1
 12915                           indf2	equ	0xFDF
 12916                           postinc2	equ	0xFDE
 12917                           postdec2	equ	0xFDD
 12918                           plusw2	equ	0xFDB
 12919                           fsr2h	equ	0xFDA
 12920                           fsr2l	equ	0xFD9
 12921                           status	equ	0xFD8
 12922                           
 12923 ;; *************** function _getDate *****************
 12924 ;; Defined at:
 12925 ;;		line 62 in file "ds3231.c"
 12926 ;; Parameters:    Size  Location     Type
 12927 ;;  p4              1   19[COMRAM] PTR unsigned char 
 12928 ;;		 -> TTime(7), 
 12929 ;;  p3              1   20[COMRAM] PTR unsigned char 
 12930 ;;		 -> TTime(7), 
 12931 ;;  p2              1   21[COMRAM] PTR unsigned char 
 12932 ;;		 -> TTime(7), 
 12933 ;;  p1              1   22[COMRAM] PTR unsigned char 
 12934 ;;		 -> TTime(7), 
 12935 ;; Auto vars:     Size  Location     Type
 12936 ;;		None
 12937 ;; Return value:  Size  Location     Type
 12938 ;;                  1    wreg      void 
 12939 ;; Registers used:
 12940 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12941 ;; Tracked objects:
 12942 ;;		On entry : 0/0
 12943 ;;		On exit  : 0/0
 12944 ;;		Unchanged: 0/0
 12945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12946 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12949 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12950 ;;Total ram usage:        4 bytes
 12951 ;; Hardware stack levels used:    1
 12952 ;; Hardware stack levels required when called:    6
 12953 ;; This function calls:
 12954 ;;		_DS3231_Read
 12955 ;;		_bcd_to_decimal
 12956 ;; This function is called by:
 12957 ;;		_GetTime
 12958 ;; This function uses a non-reentrant model
 12959 ;;
 12960                           
 12961                           	psect	text63
 12962  0015FA                     __ptext63:
 12963                           	opt stack 0
 12964  0015FA                     _getDate:
 12965                           	opt stack 22
 12966                           
 12967                           ;ds3231.c: 64: *p1 = DS3231_Read(0x06);
 12968                           
 12969                           ;incstack = 0
 12970  0015FA  5017               	movf	getDate@p1,w,c
 12971  0015FC  6ED9               	movwf	fsr2l,c
 12972  0015FE  6ADA               	clrf	fsr2h,c
 12973  001600  0E06               	movlw	6
 12974  001602  EC99  F00E         	call	_DS3231_Read
 12975  001606  6EDF               	movwf	indf2,c
 12976                           
 12977                           ;ds3231.c: 65: *p1 = bcd_to_decimal(*p1);
 12978  001608  5017               	movf	getDate@p1,w,c
 12979  00160A  6ED9               	movwf	fsr2l,c
 12980  00160C  6ADA               	clrf	fsr2h,c
 12981  00160E  5017               	movf	getDate@p1,w,c
 12982  001610  D822               	call	PL66	;call to abstracted procedure
 12983  001612  ECCE  F00F         	call	_bcd_to_decimal
 12984                           
 12985                           ;ds3231.c: 66: *p2 = (0x1F & DS3231_Read(0x05));
 12986  001616  D823               	call	PL70	;call to abstracted procedure
 12987  001618  0E05               	movlw	5
 12988  00161A  EC99  F00E         	call	_DS3231_Read
 12989  00161E  0B1F               	andlw	31
 12990                           
 12991                           ;ds3231.c: 67: *p2 = bcd_to_decimal(*p2);
 12992  001620  D81E               	call	PL70	;call to abstracted procedure
 12993  001622  5016               	movf	getDate@p2,w,c
 12994  001624  D818               	call	PL66	;call to abstracted procedure
 12995  001626  ECCE  F00F         	call	_bcd_to_decimal
 12996                           
 12997                           ;ds3231.c: 68: *p3 = (0x3F & DS3231_Read(0x04));
 12998  00162A  D81E               	call	PL106	;call to abstracted procedure
 12999  00162C  0E04               	movlw	4
 13000  00162E  EC99  F00E         	call	_DS3231_Read
 13001  001632  0B3F               	andlw	63
 13002                           
 13003                           ;ds3231.c: 69: *p3 = bcd_to_decimal(*p3);
 13004  001634  D819               	call	PL106	;call to abstracted procedure
 13005  001636  5015               	movf	getDate@p3,w,c
 13006  001638  D80E               	call	PL66	;call to abstracted procedure
 13007  00163A  ECCE  F00F         	call	_bcd_to_decimal
 13008                           
 13009                           ;ds3231.c: 70: *p4 = (0x07 & DS3231_Read(0x03));
 13010  00163E  D819               	call	PL108	;call to abstracted procedure
 13011  001640  0E03               	movlw	3
 13012  001642  EC99  F00E         	call	_DS3231_Read
 13013  001646  0B07               	andlw	7
 13014                           
 13015                           ;ds3231.c: 71: *p4 = bcd_to_decimal(*p4);
 13016  001648  D814               	call	PL108	;call to abstracted procedure
 13017  00164A  5014               	movf	getDate@p4,w,c
 13018  00164C  D804               	call	PL66	;call to abstracted procedure
 13019  00164E  ECCE  F00F         	call	_bcd_to_decimal
 13020  001652  6EDF               	movwf	indf2,c
 13021  001654  0012               	return		;funcret
 13022  001656                     __end_of_getDate:
 13023                           	opt stack 0
 13024  001656                     PL66:
 13025                           	opt stack 22
 13026  001656  6EE1               	movwf	fsr1l,c
 13027  001658  6AE2               	clrf	fsr1h,c
 13028  00165A  50E7               	movf	indf1,w,c
 13029  00165C  0012               	return	
 13030  00165E                     __end_ofPL66:
 13031                           	opt stack 0
 13032  00165E                     PL70:
 13033                           	opt stack 22
 13034  00165E  6EDF               	movwf	indf2,c
 13035  001660  5016               	movf	getDate@p2,w,c
 13036  001662  6ED9               	movwf	fsr2l,c
 13037  001664  6ADA               	clrf	fsr2h,c
 13038  001666  0012               	return	
 13039  001668                     __end_ofPL70:
 13040                           	opt stack 0
 13041  001668                     PL106:
 13042                           	opt stack 22
 13043  001668  6EDF               	movwf	indf2,c
 13044  00166A  5015               	movf	getDate@p3,w,c
 13045  00166C  6ED9               	movwf	fsr2l,c
 13046  00166E  6ADA               	clrf	fsr2h,c
 13047  001670  0012               	return	
 13048  001672                     __end_ofPL106:
 13049                           	opt stack 0
 13050  001672                     PL108:
 13051                           	opt stack 22
 13052  001672  6EDF               	movwf	indf2,c
 13053  001674  5014               	movf	getDate@p4,w,c
 13054  001676  6ED9               	movwf	fsr2l,c
 13055  001678  6ADA               	clrf	fsr2h,c
 13056  00167A  0012               	return	
 13057  00167C                     __end_ofPL108:
 13058                           	opt stack 0
 13059                           tosu	equ	0xFFF
 13060                           tosh	equ	0xFFE
 13061                           tosl	equ	0xFFD
 13062                           pclath	equ	0xFFA
 13063                           tblptru	equ	0xFF8
 13064                           tblptrh	equ	0xFF7
 13065                           tblptrl	equ	0xFF6
 13066                           tablat	equ	0xFF5
 13067                           prodh	equ	0xFF4
 13068                           prodl	equ	0xFF3
 13069                           intcon	equ	0xFF2
 13070                           intcon2	equ	0xFF1
 13071                           postinc0	equ	0xFEE
 13072                           wreg	equ	0xFE8
 13073                           indf1	equ	0xFE7
 13074                           plusw1	equ	0xFE3
 13075                           fsr1h	equ	0xFE2
 13076                           fsr1l	equ	0xFE1
 13077                           indf2	equ	0xFDF
 13078                           postinc2	equ	0xFDE
 13079                           postdec2	equ	0xFDD
 13080                           plusw2	equ	0xFDB
 13081                           fsr2h	equ	0xFDA
 13082                           fsr2l	equ	0xFD9
 13083                           status	equ	0xFD8
 13084                           
 13085 ;; *************** function _bcd_to_decimal *****************
 13086 ;; Defined at:
 13087 ;;		line 4 in file "ds3231.c"
 13088 ;; Parameters:    Size  Location     Type
 13089 ;;  d               1    wreg     unsigned char 
 13090 ;; Auto vars:     Size  Location     Type
 13091 ;;  d               1   15[COMRAM] unsigned char 
 13092 ;; Return value:  Size  Location     Type
 13093 ;;                  1    wreg      unsigned char 
 13094 ;; Registers used:
 13095 ;;		wreg, status,2, status,0, prodl, prodh
 13096 ;; Tracked objects:
 13097 ;;		On entry : 0/0
 13098 ;;		On exit  : 0/0
 13099 ;;		Unchanged: 0/0
 13100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13105 ;;Total ram usage:        2 bytes
 13106 ;; Hardware stack levels used:    1
 13107 ;; Hardware stack levels required when called:    3
 13108 ;; This function calls:
 13109 ;;		Nothing
 13110 ;; This function is called by:
 13111 ;;		_getTime
 13112 ;;		_getDate
 13113 ;; This function uses a non-reentrant model
 13114 ;;
 13115                           
 13116                           	psect	text64
 13117  001F9C                     __ptext64:
 13118                           	opt stack 0
 13119  001F9C                     _bcd_to_decimal:
 13120                           	opt stack 24
 13121                           
 13122                           ;incstack = 0
 13123                           ;bcd_to_decimal@d stored from wreg
 13124  001F9C  6E10               	movwf	bcd_to_decimal@d,c
 13125                           
 13126                           ;ds3231.c: 6: return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10));
 13127  001F9E  C010  F00F         	movff	bcd_to_decimal@d,??_bcd_to_decimal
 13128  001FA2  0E0F               	movlw	15
 13129  001FA4  160F               	andwf	??_bcd_to_decimal,f,c
 13130  001FA6  3810               	swapf	bcd_to_decimal@d,w,c
 13131  001FA8  0B0F               	andlw	15
 13132  001FAA  0D0A               	mullw	10
 13133  001FAC  50F3               	movf	prodl,w,c
 13134  001FAE  240F               	addwf	??_bcd_to_decimal,w,c
 13135  001FB0  0012               	return		;funcret
 13136  001FB2                     __end_of_bcd_to_decimal:
 13137                           	opt stack 0
 13138                           tosu	equ	0xFFF
 13139                           tosh	equ	0xFFE
 13140                           tosl	equ	0xFFD
 13141                           pclath	equ	0xFFA
 13142                           tblptru	equ	0xFF8
 13143                           tblptrh	equ	0xFF7
 13144                           tblptrl	equ	0xFF6
 13145                           tablat	equ	0xFF5
 13146                           prodh	equ	0xFF4
 13147                           prodl	equ	0xFF3
 13148                           intcon	equ	0xFF2
 13149                           intcon2	equ	0xFF1
 13150                           postinc0	equ	0xFEE
 13151                           wreg	equ	0xFE8
 13152                           indf1	equ	0xFE7
 13153                           plusw1	equ	0xFE3
 13154                           fsr1h	equ	0xFE2
 13155                           fsr1l	equ	0xFE1
 13156                           indf2	equ	0xFDF
 13157                           postinc2	equ	0xFDE
 13158                           postdec2	equ	0xFDD
 13159                           plusw2	equ	0xFDB
 13160                           fsr2h	equ	0xFDA
 13161                           fsr2l	equ	0xFD9
 13162                           status	equ	0xFD8
 13163                           
 13164 ;; *************** function _DS3231_Read *****************
 13165 ;; Defined at:
 13166 ;;		line 16 in file "ds3231.c"
 13167 ;; Parameters:    Size  Location     Type
 13168 ;;  address         1    wreg     unsigned char 
 13169 ;; Auto vars:     Size  Location     Type
 13170 ;;  address         1   17[COMRAM] unsigned char 
 13171 ;;  value           1   18[COMRAM] unsigned char 
 13172 ;; Return value:  Size  Location     Type
 13173 ;;                  1    wreg      unsigned char 
 13174 ;; Registers used:
 13175 ;;		wreg, status,2, status,0, cstack
 13176 ;; Tracked objects:
 13177 ;;		On entry : 0/0
 13178 ;;		On exit  : 0/0
 13179 ;;		Unchanged: 0/0
 13180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13182 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13184 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13185 ;;Total ram usage:        2 bytes
 13186 ;; Hardware stack levels used:    1
 13187 ;; Hardware stack levels required when called:    5
 13188 ;; This function calls:
 13189 ;;		_I2C_Master_Read
 13190 ;;		_I2C_Master_RepeatedStart
 13191 ;;		_I2C_Master_Start
 13192 ;;		_I2C_Master_Stop
 13193 ;;		_I2C_Master_Write
 13194 ;; This function is called by:
 13195 ;;		_getTime
 13196 ;;		_getDate
 13197 ;; This function uses a non-reentrant model
 13198 ;;
 13199                           
 13200                           	psect	text65
 13201  001D32                     __ptext65:
 13202                           	opt stack 0
 13203  001D32                     _DS3231_Read:
 13204                           	opt stack 22
 13205                           
 13206                           ;incstack = 0
 13207                           ;DS3231_Read@address stored from wreg
 13208  001D32  6E12               	movwf	DS3231_Read@address,c
 13209                           
 13210                           ;ds3231.c: 19: I2C_Master_Start();
 13211  001D34  EC35  F010         	call	_I2C_Master_Start	;wreg free
 13212                           
 13213                           ;ds3231.c: 20: I2C_Master_Write(0xD0);
 13214  001D38  0ED0               	movlw	208
 13215  001D3A  EC2B  F010         	call	_I2C_Master_Write
 13216                           
 13217                           ;ds3231.c: 21: I2C_Master_Write(address);
 13218  001D3E  5012               	movf	DS3231_Read@address,w,c
 13219  001D40  EC2B  F010         	call	_I2C_Master_Write
 13220                           
 13221                           ;ds3231.c: 22: I2C_Master_RepeatedStart();
 13222  001D44  EC39  F010         	call	_I2C_Master_RepeatedStart	;wreg free
 13223                           
 13224                           ;ds3231.c: 23: I2C_Master_Write(0xD1);
 13225  001D48  0ED1               	movlw	209
 13226  001D4A  EC2B  F010         	call	_I2C_Master_Write
 13227                           
 13228                           ;ds3231.c: 24: value = I2C_Master_Read(0);
 13229  001D4E  0E00               	movlw	0
 13230  001D50  EC6B  F00F         	call	_I2C_Master_Read
 13231  001D54  6E13               	movwf	DS3231_Read@value,c
 13232                           
 13233                           ;ds3231.c: 25: I2C_Master_Stop();
 13234  001D56  EC31  F010         	call	_I2C_Master_Stop	;wreg free
 13235                           
 13236                           ;ds3231.c: 26: return value;
 13237  001D5A  5013               	movf	DS3231_Read@value,w,c
 13238  001D5C  0012               	return		;funcret
 13239  001D5E                     __end_of_DS3231_Read:
 13240                           	opt stack 0
 13241                           tosu	equ	0xFFF
 13242                           tosh	equ	0xFFE
 13243                           tosl	equ	0xFFD
 13244                           pclath	equ	0xFFA
 13245                           tblptru	equ	0xFF8
 13246                           tblptrh	equ	0xFF7
 13247                           tblptrl	equ	0xFF6
 13248                           tablat	equ	0xFF5
 13249                           prodh	equ	0xFF4
 13250                           prodl	equ	0xFF3
 13251                           intcon	equ	0xFF2
 13252                           intcon2	equ	0xFF1
 13253                           postinc0	equ	0xFEE
 13254                           wreg	equ	0xFE8
 13255                           indf1	equ	0xFE7
 13256                           plusw1	equ	0xFE3
 13257                           fsr1h	equ	0xFE2
 13258                           fsr1l	equ	0xFE1
 13259                           indf2	equ	0xFDF
 13260                           postinc2	equ	0xFDE
 13261                           postdec2	equ	0xFDD
 13262                           plusw2	equ	0xFDB
 13263                           fsr2h	equ	0xFDA
 13264                           fsr2l	equ	0xFD9
 13265                           status	equ	0xFD8
 13266                           
 13267 ;; *************** function _I2C_Master_Write *****************
 13268 ;; Defined at:
 13269 ;;		line 51 in file "i2c.c"
 13270 ;; Parameters:    Size  Location     Type
 13271 ;;  d               1    wreg     unsigned char 
 13272 ;; Auto vars:     Size  Location     Type
 13273 ;;  d               1   15[COMRAM] unsigned char 
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  1    wreg      void 
 13276 ;; Registers used:
 13277 ;;		wreg, status,2, status,0, cstack
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13284 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13287 ;;Total ram usage:        1 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    4
 13290 ;; This function calls:
 13291 ;;		_I2C_Master_Wait
 13292 ;; This function is called by:
 13293 ;;		_DS3231_Read
 13294 ;;		_DS3231_Write
 13295 ;;		_bmp085ReadInt
 13296 ;; This function uses a non-reentrant model
 13297 ;;
 13298                           
 13299                           	psect	text66
 13300  002056                     __ptext66:
 13301                           	opt stack 0
 13302  002056                     _I2C_Master_Write:
 13303                           	opt stack 23
 13304                           
 13305                           ;incstack = 0
 13306                           ;I2C_Master_Write@d stored from wreg
 13307  002056  6E10               	movwf	I2C_Master_Write@d,c
 13308                           
 13309                           ;i2c.c: 53: I2C_Master_Wait();
 13310  002058  EC0F  F010         	call	_I2C_Master_Wait	;wreg free
 13311                           
 13312                           ;i2c.c: 54: SSPBUF = d;
 13313  00205C  C010  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 13314  002060  0012               	return		;funcret
 13315  002062                     __end_of_I2C_Master_Write:
 13316                           	opt stack 0
 13317                           tosu	equ	0xFFF
 13318                           tosh	equ	0xFFE
 13319                           tosl	equ	0xFFD
 13320                           pclath	equ	0xFFA
 13321                           tblptru	equ	0xFF8
 13322                           tblptrh	equ	0xFF7
 13323                           tblptrl	equ	0xFF6
 13324                           tablat	equ	0xFF5
 13325                           prodh	equ	0xFF4
 13326                           prodl	equ	0xFF3
 13327                           intcon	equ	0xFF2
 13328                           intcon2	equ	0xFF1
 13329                           postinc0	equ	0xFEE
 13330                           wreg	equ	0xFE8
 13331                           indf1	equ	0xFE7
 13332                           plusw1	equ	0xFE3
 13333                           fsr1h	equ	0xFE2
 13334                           fsr1l	equ	0xFE1
 13335                           indf2	equ	0xFDF
 13336                           postinc2	equ	0xFDE
 13337                           postdec2	equ	0xFDD
 13338                           plusw2	equ	0xFDB
 13339                           fsr2h	equ	0xFDA
 13340                           fsr2l	equ	0xFD9
 13341                           status	equ	0xFD8
 13342                           
 13343 ;; *************** function _I2C_Master_Stop *****************
 13344 ;; Defined at:
 13345 ;;		line 44 in file "i2c.c"
 13346 ;; Parameters:    Size  Location     Type
 13347 ;;		None
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;		None
 13350 ;; Return value:  Size  Location     Type
 13351 ;;                  1    wreg      void 
 13352 ;; Registers used:
 13353 ;;		wreg, status,2, status,0, cstack
 13354 ;; Tracked objects:
 13355 ;;		On entry : 0/0
 13356 ;;		On exit  : 0/0
 13357 ;;		Unchanged: 0/0
 13358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13363 ;;Total ram usage:        0 bytes
 13364 ;; Hardware stack levels used:    1
 13365 ;; Hardware stack levels required when called:    4
 13366 ;; This function calls:
 13367 ;;		_I2C_Master_Wait
 13368 ;; This function is called by:
 13369 ;;		_DS3231_Read
 13370 ;;		_DS3231_Write
 13371 ;;		_bmp085ReadInt
 13372 ;; This function uses a non-reentrant model
 13373 ;;
 13374                           
 13375                           	psect	text67
 13376  002062                     __ptext67:
 13377                           	opt stack 0
 13378  002062                     _I2C_Master_Stop:
 13379                           	opt stack 23
 13380                           
 13381                           ;i2c.c: 46: I2C_Master_Wait();
 13382                           
 13383                           ;incstack = 0
 13384  002062  EC0F  F010         	call	_I2C_Master_Wait	;wreg free
 13385                           
 13386                           ;i2c.c: 47: PEN = 1;
 13387  002066  84C5               	bsf	4037,2,c	;volatile
 13388  002068  0012               	return		;funcret
 13389  00206A                     __end_of_I2C_Master_Stop:
 13390                           	opt stack 0
 13391                           tosu	equ	0xFFF
 13392                           tosh	equ	0xFFE
 13393                           tosl	equ	0xFFD
 13394                           pclath	equ	0xFFA
 13395                           tblptru	equ	0xFF8
 13396                           tblptrh	equ	0xFF7
 13397                           tblptrl	equ	0xFF6
 13398                           tablat	equ	0xFF5
 13399                           prodh	equ	0xFF4
 13400                           prodl	equ	0xFF3
 13401                           intcon	equ	0xFF2
 13402                           intcon2	equ	0xFF1
 13403                           postinc0	equ	0xFEE
 13404                           wreg	equ	0xFE8
 13405                           indf1	equ	0xFE7
 13406                           plusw1	equ	0xFE3
 13407                           fsr1h	equ	0xFE2
 13408                           fsr1l	equ	0xFE1
 13409                           indf2	equ	0xFDF
 13410                           postinc2	equ	0xFDE
 13411                           postdec2	equ	0xFDD
 13412                           plusw2	equ	0xFDB
 13413                           fsr2h	equ	0xFDA
 13414                           fsr2l	equ	0xFD9
 13415                           status	equ	0xFD8
 13416                           
 13417 ;; *************** function _I2C_Master_Start *****************
 13418 ;; Defined at:
 13419 ;;		line 30 in file "i2c.c"
 13420 ;; Parameters:    Size  Location     Type
 13421 ;;		None
 13422 ;; Auto vars:     Size  Location     Type
 13423 ;;		None
 13424 ;; Return value:  Size  Location     Type
 13425 ;;                  1    wreg      void 
 13426 ;; Registers used:
 13427 ;;		wreg, status,2, status,0, cstack
 13428 ;; Tracked objects:
 13429 ;;		On entry : 0/0
 13430 ;;		On exit  : 0/0
 13431 ;;		Unchanged: 0/0
 13432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;Total ram usage:        0 bytes
 13438 ;; Hardware stack levels used:    1
 13439 ;; Hardware stack levels required when called:    4
 13440 ;; This function calls:
 13441 ;;		_I2C_Master_Wait
 13442 ;; This function is called by:
 13443 ;;		_DS3231_Read
 13444 ;;		_DS3231_Write
 13445 ;;		_bmp085ReadInt
 13446 ;; This function uses a non-reentrant model
 13447 ;;
 13448                           
 13449                           	psect	text68
 13450  00206A                     __ptext68:
 13451                           	opt stack 0
 13452  00206A                     _I2C_Master_Start:
 13453                           	opt stack 23
 13454                           
 13455                           ;i2c.c: 32: I2C_Master_Wait();
 13456                           
 13457                           ;incstack = 0
 13458  00206A  EC0F  F010         	call	_I2C_Master_Wait	;wreg free
 13459                           
 13460                           ;i2c.c: 33: SEN = 1;
 13461  00206E  80C5               	bsf	4037,0,c	;volatile
 13462  002070  0012               	return		;funcret
 13463  002072                     __end_of_I2C_Master_Start:
 13464                           	opt stack 0
 13465                           tosu	equ	0xFFF
 13466                           tosh	equ	0xFFE
 13467                           tosl	equ	0xFFD
 13468                           pclath	equ	0xFFA
 13469                           tblptru	equ	0xFF8
 13470                           tblptrh	equ	0xFF7
 13471                           tblptrl	equ	0xFF6
 13472                           tablat	equ	0xFF5
 13473                           prodh	equ	0xFF4
 13474                           prodl	equ	0xFF3
 13475                           intcon	equ	0xFF2
 13476                           intcon2	equ	0xFF1
 13477                           postinc0	equ	0xFEE
 13478                           wreg	equ	0xFE8
 13479                           indf1	equ	0xFE7
 13480                           plusw1	equ	0xFE3
 13481                           fsr1h	equ	0xFE2
 13482                           fsr1l	equ	0xFE1
 13483                           indf2	equ	0xFDF
 13484                           postinc2	equ	0xFDE
 13485                           postdec2	equ	0xFDD
 13486                           plusw2	equ	0xFDB
 13487                           fsr2h	equ	0xFDA
 13488                           fsr2l	equ	0xFD9
 13489                           status	equ	0xFD8
 13490                           
 13491 ;; *************** function _I2C_Master_RepeatedStart *****************
 13492 ;; Defined at:
 13493 ;;		line 37 in file "i2c.c"
 13494 ;; Parameters:    Size  Location     Type
 13495 ;;		None
 13496 ;; Auto vars:     Size  Location     Type
 13497 ;;		None
 13498 ;; Return value:  Size  Location     Type
 13499 ;;                  1    wreg      void 
 13500 ;; Registers used:
 13501 ;;		wreg, status,2, status,0, cstack
 13502 ;; Tracked objects:
 13503 ;;		On entry : 0/0
 13504 ;;		On exit  : 0/0
 13505 ;;		Unchanged: 0/0
 13506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13511 ;;Total ram usage:        0 bytes
 13512 ;; Hardware stack levels used:    1
 13513 ;; Hardware stack levels required when called:    4
 13514 ;; This function calls:
 13515 ;;		_I2C_Master_Wait
 13516 ;; This function is called by:
 13517 ;;		_DS3231_Read
 13518 ;;		_bmp085ReadInt
 13519 ;; This function uses a non-reentrant model
 13520 ;;
 13521                           
 13522                           	psect	text69
 13523  002072                     __ptext69:
 13524                           	opt stack 0
 13525  002072                     _I2C_Master_RepeatedStart:
 13526                           	opt stack 23
 13527                           
 13528                           ;i2c.c: 39: I2C_Master_Wait();
 13529                           
 13530                           ;incstack = 0
 13531  002072  EC0F  F010         	call	_I2C_Master_Wait	;wreg free
 13532                           
 13533                           ;i2c.c: 40: RSEN = 1;
 13534  002076  82C5               	bsf	4037,1,c	;volatile
 13535  002078  0012               	return		;funcret
 13536  00207A                     __end_of_I2C_Master_RepeatedStart:
 13537                           	opt stack 0
 13538                           tosu	equ	0xFFF
 13539                           tosh	equ	0xFFE
 13540                           tosl	equ	0xFFD
 13541                           pclath	equ	0xFFA
 13542                           tblptru	equ	0xFF8
 13543                           tblptrh	equ	0xFF7
 13544                           tblptrl	equ	0xFF6
 13545                           tablat	equ	0xFF5
 13546                           prodh	equ	0xFF4
 13547                           prodl	equ	0xFF3
 13548                           intcon	equ	0xFF2
 13549                           intcon2	equ	0xFF1
 13550                           postinc0	equ	0xFEE
 13551                           wreg	equ	0xFE8
 13552                           indf1	equ	0xFE7
 13553                           plusw1	equ	0xFE3
 13554                           fsr1h	equ	0xFE2
 13555                           fsr1l	equ	0xFE1
 13556                           indf2	equ	0xFDF
 13557                           postinc2	equ	0xFDE
 13558                           postdec2	equ	0xFDD
 13559                           plusw2	equ	0xFDB
 13560                           fsr2h	equ	0xFDA
 13561                           fsr2l	equ	0xFD9
 13562                           status	equ	0xFD8
 13563                           
 13564 ;; *************** function _I2C_Master_Read *****************
 13565 ;; Defined at:
 13566 ;;		line 58 in file "i2c.c"
 13567 ;; Parameters:    Size  Location     Type
 13568 ;;  a               1    wreg     unsigned char 
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;  a               1   15[COMRAM] unsigned char 
 13571 ;;  temp            1   16[COMRAM] unsigned char 
 13572 ;; Return value:  Size  Location     Type
 13573 ;;                  1    wreg      unsigned char 
 13574 ;; Registers used:
 13575 ;;		wreg, status,2, status,0, cstack
 13576 ;; Tracked objects:
 13577 ;;		On entry : 0/0
 13578 ;;		On exit  : 0/0
 13579 ;;		Unchanged: 0/0
 13580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13582 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13584 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13585 ;;Total ram usage:        2 bytes
 13586 ;; Hardware stack levels used:    1
 13587 ;; Hardware stack levels required when called:    4
 13588 ;; This function calls:
 13589 ;;		_I2C_Master_Wait
 13590 ;; This function is called by:
 13591 ;;		_DS3231_Read
 13592 ;;		_bmp085ReadInt
 13593 ;; This function uses a non-reentrant model
 13594 ;;
 13595                           
 13596                           	psect	text70
 13597  001ED6                     __ptext70:
 13598                           	opt stack 0
 13599  001ED6                     _I2C_Master_Read:
 13600                           	opt stack 23
 13601                           
 13602                           ;incstack = 0
 13603                           ;I2C_Master_Read@a stored from wreg
 13604  001ED6  6E10               	movwf	I2C_Master_Read@a,c
 13605                           
 13606                           ;i2c.c: 60: uint8_t temp;
 13607                           ;i2c.c: 61: I2C_Master_Wait();
 13608  001ED8  EC0F  F010         	call	_I2C_Master_Wait	;wreg free
 13609                           
 13610                           ;i2c.c: 62: RCEN = 1;
 13611  001EDC  86C5               	bsf	4037,3,c	;volatile
 13612                           
 13613                           ;i2c.c: 63: I2C_Master_Wait();
 13614  001EDE  EC0F  F010         	call	_I2C_Master_Wait	;wreg free
 13615                           
 13616                           ;i2c.c: 64: temp = SSPBUF;
 13617  001EE2  CFC9 F011          	movff	4041,I2C_Master_Read@temp	;volatile
 13618                           
 13619                           ;i2c.c: 65: I2C_Master_Wait();
 13620  001EE6  EC0F  F010         	call	_I2C_Master_Wait	;wreg free
 13621                           
 13622                           ;i2c.c: 66: ACKDT = (a)?0:1;
 13623  001EEA  5010               	movf	I2C_Master_Read@a,w,c
 13624  001EEC  E102               	bnz	u3120
 13625  001EEE  8AC5               	bsf	4037,5,c	;volatile
 13626  001EF0  D001               	goto	l4968
 13627  001EF2                     u3120:
 13628  001EF2  9AC5               	bcf	4037,5,c	;volatile
 13629  001EF4                     l4968:
 13630                           
 13631                           ;i2c.c: 67: ACKEN = 1;
 13632  001EF4  88C5               	bsf	4037,4,c	;volatile
 13633                           
 13634                           ;i2c.c: 68: return temp;
 13635  001EF6  5011               	movf	I2C_Master_Read@temp,w,c
 13636  001EF8  0012               	return		;funcret
 13637  001EFA                     __end_of_I2C_Master_Read:
 13638                           	opt stack 0
 13639                           tosu	equ	0xFFF
 13640                           tosh	equ	0xFFE
 13641                           tosl	equ	0xFFD
 13642                           pclath	equ	0xFFA
 13643                           tblptru	equ	0xFF8
 13644                           tblptrh	equ	0xFF7
 13645                           tblptrl	equ	0xFF6
 13646                           tablat	equ	0xFF5
 13647                           prodh	equ	0xFF4
 13648                           prodl	equ	0xFF3
 13649                           intcon	equ	0xFF2
 13650                           intcon2	equ	0xFF1
 13651                           postinc0	equ	0xFEE
 13652                           wreg	equ	0xFE8
 13653                           indf1	equ	0xFE7
 13654                           plusw1	equ	0xFE3
 13655                           fsr1h	equ	0xFE2
 13656                           fsr1l	equ	0xFE1
 13657                           indf2	equ	0xFDF
 13658                           postinc2	equ	0xFDE
 13659                           postdec2	equ	0xFDD
 13660                           plusw2	equ	0xFDB
 13661                           fsr2h	equ	0xFDA
 13662                           fsr2l	equ	0xFD9
 13663                           status	equ	0xFD8
 13664                           
 13665 ;; *************** function _I2C_Master_Wait *****************
 13666 ;; Defined at:
 13667 ;;		line 24 in file "i2c.c"
 13668 ;; Parameters:    Size  Location     Type
 13669 ;;		None
 13670 ;; Auto vars:     Size  Location     Type
 13671 ;;		None
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  1    wreg      void 
 13674 ;; Registers used:
 13675 ;;		wreg, status,2, status,0
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13683 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13684 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13685 ;;Total ram usage:        1 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; Hardware stack levels required when called:    3
 13688 ;; This function calls:
 13689 ;;		Nothing
 13690 ;; This function is called by:
 13691 ;;		_I2C_Master_Start
 13692 ;;		_I2C_Master_RepeatedStart
 13693 ;;		_I2C_Master_Stop
 13694 ;;		_I2C_Master_Write
 13695 ;;		_I2C_Master_Read
 13696 ;; This function uses a non-reentrant model
 13697 ;;
 13698                           
 13699                           	psect	text71
 13700  00201E                     __ptext71:
 13701                           	opt stack 0
 13702  00201E                     _I2C_Master_Wait:
 13703                           	opt stack 23
 13704  00201E                     l176:
 13705  00201E  B4C7               	btfsc	4039,2,c	;volatile
 13706  002020  D7FE               	goto	l176
 13707  002022  CFC5 F00F          	movff	4037,??_I2C_Master_Wait	;volatile
 13708  002026  0E1F               	movlw	31
 13709  002028  160F               	andwf	??_I2C_Master_Wait,f,c
 13710  00202A  E1F9               	bnz	l176
 13711  00202C  0C1F               	retlw	31	;funcret
 13712  00202E                     __end_of_I2C_Master_Wait:
 13713                           	opt stack 0
 13714                           tosu	equ	0xFFF
 13715                           tosh	equ	0xFFE
 13716                           tosl	equ	0xFFD
 13717                           pclath	equ	0xFFA
 13718                           tblptru	equ	0xFF8
 13719                           tblptrh	equ	0xFF7
 13720                           tblptrl	equ	0xFF6
 13721                           tablat	equ	0xFF5
 13722                           prodh	equ	0xFF4
 13723                           prodl	equ	0xFF3
 13724                           intcon	equ	0xFF2
 13725                           intcon2	equ	0xFF1
 13726                           postinc0	equ	0xFEE
 13727                           wreg	equ	0xFE8
 13728                           indf1	equ	0xFE7
 13729                           plusw1	equ	0xFE3
 13730                           fsr1h	equ	0xFE2
 13731                           fsr1l	equ	0xFE1
 13732                           indf2	equ	0xFDF
 13733                           postinc2	equ	0xFDE
 13734                           postdec2	equ	0xFDD
 13735                           plusw2	equ	0xFDB
 13736                           fsr2h	equ	0xFDA
 13737                           fsr2l	equ	0xFD9
 13738                           status	equ	0xFD8
 13739                           
 13740 ;; *************** function _INTERRUPT_InterruptManager *****************
 13741 ;; Defined at:
 13742 ;;		line 4 in file "interrupt.c"
 13743 ;; Parameters:    Size  Location     Type
 13744 ;;		None
 13745 ;; Auto vars:     Size  Location     Type
 13746 ;;		None
 13747 ;; Return value:  Size  Location     Type
 13748 ;;                  1    wreg      void 
 13749 ;; Registers used:
 13750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13751 ;; Tracked objects:
 13752 ;;		On entry : 0/0
 13753 ;;		On exit  : 0/0
 13754 ;;		Unchanged: 0/0
 13755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13758 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13759 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13760 ;;Total ram usage:        5 bytes
 13761 ;; Hardware stack levels used:    1
 13762 ;; Hardware stack levels required when called:    2
 13763 ;; This function calls:
 13764 ;;		_INT0_ISR
 13765 ;;		_TMR0_ISR
 13766 ;;		_TMR1_ISR
 13767 ;; This function is called by:
 13768 ;;		Interrupt level 2
 13769 ;; This function uses a non-reentrant model
 13770 ;;
 13771                           
 13772                           	psect	intcode
 13773  000008                     __pintcode:
 13774                           	opt stack 0
 13775  000008                     _INTERRUPT_InterruptManager:
 13776                           	opt stack 22
 13777                           
 13778                           ;incstack = 0
 13779  000008  8271               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13780  00000A  ED79  F00B         	call	int_func,f	;refresh shadow registers
 13781                           tosu	equ	0xFFF
 13782                           tosh	equ	0xFFE
 13783                           tosl	equ	0xFFD
 13784                           pclath	equ	0xFFA
 13785                           tblptru	equ	0xFF8
 13786                           tblptrh	equ	0xFF7
 13787                           tblptrl	equ	0xFF6
 13788                           tablat	equ	0xFF5
 13789                           prodh	equ	0xFF4
 13790                           prodl	equ	0xFF3
 13791                           intcon	equ	0xFF2
 13792                           intcon2	equ	0xFF1
 13793                           postinc0	equ	0xFEE
 13794                           wreg	equ	0xFE8
 13795                           indf1	equ	0xFE7
 13796                           plusw1	equ	0xFE3
 13797                           fsr1h	equ	0xFE2
 13798                           fsr1l	equ	0xFE1
 13799                           indf2	equ	0xFDF
 13800                           postinc2	equ	0xFDE
 13801                           postdec2	equ	0xFDD
 13802                           plusw2	equ	0xFDB
 13803                           fsr2h	equ	0xFDA
 13804                           fsr2l	equ	0xFD9
 13805                           status	equ	0xFD8
 13806                           
 13807                           	psect	intcode_body
 13808  0016F2                     __pintcode_body:
 13809                           	opt stack 22
 13810  0016F2                     int_func:
 13811                           	opt stack 22
 13812  0016F2  0006               	pop		; remove dummy address from shadow register refresh
 13813  0016F4  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManager+1
 13814  0016F8  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManager+2
 13815  0016FC  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManager+3
 13816  001700  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManager+4
 13817                           
 13818                           ;interrupt.c: 7: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 13819  001704  BAF2               	btfsc	intcon,5,c	;volatile
 13820  001706  A4F2               	btfss	intcon,2,c	;volatile
 13821  001708  D003               	goto	i2l310
 13822                           
 13823                           ;interrupt.c: 8: {
 13824                           ;interrupt.c: 9: TMR0_ISR();
 13825  00170A  EC1E  F010         	call	_TMR0_ISR	;wreg free
 13826                           
 13827                           ;interrupt.c: 10: }
 13828  00170E  D013               	goto	i2l6342
 13829  001710                     i2l310:
 13830                           
 13831                           ;interrupt.c: 11: else if (INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
 13832  001710  B8F2               	btfsc	intcon,4,c	;volatile
 13833  001712  A2F2               	btfss	intcon,1,c	;volatile
 13834  001714  D010               	goto	i2l6342
 13835                           
 13836                           ;interrupt.c: 12: {
 13837                           ;interrupt.c: 13: INTCONbits.INT0IF = 0;
 13838  001716  92F2               	bcf	intcon,1,c	;volatile
 13839  001718  0E01               	movlw	1
 13840                           
 13841                           ;interrupt.c: 14: INTCON2bits.INTEDG0 = ~INTCON2bits.INTEDG0;
 13842  00171A  ACF1               	btfss	intcon2,6,c	;volatile
 13843  00171C  0E00               	movlw	0
 13844  00171E  0AFF               	xorlw	255
 13845  001720  6E0A               	movwf	??_INTERRUPT_InterruptManager& (0+255),c
 13846  001722  3A0A               	swapf	??_INTERRUPT_InterruptManager,f,c
 13847  001724  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 13848  001726  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 13849  001728  50F1               	movf	intcon2,w,c	;volatile
 13850  00172A  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 13851  00172C  0BBF               	andlw	-65
 13852  00172E  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 13853  001730  6EF1               	movwf	intcon2,c	;volatile
 13854                           
 13855                           ;interrupt.c: 16: INT0_ISR();
 13856  001732  ECD9  F00F         	call	_INT0_ISR	;wreg free
 13857  001736                     i2l6342:
 13858                           
 13859                           ;interrupt.c: 17: } if (PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF ==1)
 13860  001736  B09D               	btfsc	3997,0,c	;volatile
 13861  001738  A09E               	btfss	3998,0,c	;volatile
 13862  00173A  D007               	goto	i2l314
 13863                           
 13864                           ;interrupt.c: 18: {
 13865                           ;interrupt.c: 19: PIR1bits.TMR1IF = 0;
 13866  00173C  909E               	bcf	3998,0,c	;volatile
 13867                           
 13868                           ;interrupt.c: 20: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
 13869  00173E  0E3C               	movlw	60
 13870  001740  6ECF               	movwf	4047,c	;volatile
 13871                           
 13872                           ;interrupt.c: 21: TMR1L = ((unsigned char)((15536)&0xFF));
 13873  001742  0EB0               	movlw	176
 13874  001744  6ECE               	movwf	4046,c	;volatile
 13875                           
 13876                           ;interrupt.c: 22: TMR1_ISR();
 13877  001746  ECFE  F00F         	call	_TMR1_ISR	;wreg free
 13878  00174A                     i2l314:
 13879  00174A  C00E  FFF4         	movff	??_INTERRUPT_InterruptManager+4,prodh
 13880  00174E  C00D  FFF3         	movff	??_INTERRUPT_InterruptManager+3,prodl
 13881  001752  C00C  FFDA         	movff	??_INTERRUPT_InterruptManager+2,fsr2h
 13882  001756  C00B  FFD9         	movff	??_INTERRUPT_InterruptManager+1,fsr2l
 13883  00175A  9271               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13884  00175C  0011               	retfie		f
 13885  00175E                     __end_of_INTERRUPT_InterruptManager:
 13886                           	opt stack 0
 13887                           tosu	equ	0xFFF
 13888                           tosh	equ	0xFFE
 13889                           tosl	equ	0xFFD
 13890                           pclath	equ	0xFFA
 13891                           tblptru	equ	0xFF8
 13892                           tblptrh	equ	0xFF7
 13893                           tblptrl	equ	0xFF6
 13894                           tablat	equ	0xFF5
 13895                           prodh	equ	0xFF4
 13896                           prodl	equ	0xFF3
 13897                           intcon	equ	0xFF2
 13898                           intcon2	equ	0xFF1
 13899                           postinc0	equ	0xFEE
 13900                           wreg	equ	0xFE8
 13901                           indf1	equ	0xFE7
 13902                           plusw1	equ	0xFE3
 13903                           fsr1h	equ	0xFE2
 13904                           fsr1l	equ	0xFE1
 13905                           indf2	equ	0xFDF
 13906                           postinc2	equ	0xFDE
 13907                           postdec2	equ	0xFDD
 13908                           plusw2	equ	0xFDB
 13909                           fsr2h	equ	0xFDA
 13910                           fsr2l	equ	0xFD9
 13911                           status	equ	0xFD8
 13912                           
 13913 ;; *************** function _TMR1_ISR *****************
 13914 ;; Defined at:
 13915 ;;		line 651 in file "common.c"
 13916 ;; Parameters:    Size  Location     Type
 13917 ;;		None
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;		None
 13920 ;; Return value:  Size  Location     Type
 13921 ;;                  1    wreg      void 
 13922 ;; Registers used:
 13923 ;;		wreg, status,2, status,0
 13924 ;; Tracked objects:
 13925 ;;		On entry : 0/0
 13926 ;;		On exit  : 0/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;Total ram usage:        0 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; This function calls:
 13936 ;;		Nothing
 13937 ;; This function is called by:
 13938 ;;		_INTERRUPT_InterruptManager
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           	psect	text73
 13943  001FFC                     __ptext73:
 13944                           	opt stack 0
 13945  001FFC                     _TMR1_ISR:
 13946                           	opt stack 23
 13947                           
 13948                           ;common.c: 655: if(++timer_val >= 150)
 13949                           
 13950                           ;incstack = 0
 13951  001FFC  2A6C               	incf	_timer_val,f,c
 13952  001FFE  0E95               	movlw	149
 13953  002000  646C               	cpfsgt	_timer_val,c
 13954  002002  0C95               	retlw	149
 13955                           
 13956                           ;common.c: 656: {
 13957                           ;common.c: 657: timer_val = 0;
 13958  002004  6A6C               	clrf	_timer_val,c
 13959                           
 13960                           ;common.c: 658: time_flag = 1;
 13961  002006  0E01               	movlw	1
 13962  002008  6E6B               	movwf	_time_flag,c
 13963                           
 13964                           ;common.c: 659: T1CONbits.TMR1ON = 0;
 13965  00200A  90CD               	bcf	4045,0,c	;volatile
 13966  00200C  0C01               	retlw	1	;funcret
 13967  00200E                     __end_of_TMR1_ISR:
 13968                           	opt stack 0
 13969                           tosu	equ	0xFFF
 13970                           tosh	equ	0xFFE
 13971                           tosl	equ	0xFFD
 13972                           pclath	equ	0xFFA
 13973                           tblptru	equ	0xFF8
 13974                           tblptrh	equ	0xFF7
 13975                           tblptrl	equ	0xFF6
 13976                           tablat	equ	0xFF5
 13977                           prodh	equ	0xFF4
 13978                           prodl	equ	0xFF3
 13979                           intcon	equ	0xFF2
 13980                           intcon2	equ	0xFF1
 13981                           postinc0	equ	0xFEE
 13982                           wreg	equ	0xFE8
 13983                           indf1	equ	0xFE7
 13984                           plusw1	equ	0xFE3
 13985                           fsr1h	equ	0xFE2
 13986                           fsr1l	equ	0xFE1
 13987                           indf2	equ	0xFDF
 13988                           postinc2	equ	0xFDE
 13989                           postdec2	equ	0xFDD
 13990                           plusw2	equ	0xFDB
 13991                           fsr2h	equ	0xFDA
 13992                           fsr2l	equ	0xFD9
 13993                           status	equ	0xFD8
 13994                           
 13995 ;; *************** function _TMR0_ISR *****************
 13996 ;; Defined at:
 13997 ;;		line 127 in file "dispatcher.c"
 13998 ;; Parameters:    Size  Location     Type
 13999 ;;		None
 14000 ;; Auto vars:     Size  Location     Type
 14001 ;;		None
 14002 ;; Return value:  Size  Location     Type
 14003 ;;                  1    wreg      void 
 14004 ;; Registers used:
 14005 ;;		wreg, status,2
 14006 ;; Tracked objects:
 14007 ;;		On entry : 0/0
 14008 ;;		On exit  : 0/0
 14009 ;;		Unchanged: 0/0
 14010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14015 ;;Total ram usage:        0 bytes
 14016 ;; Hardware stack levels used:    1
 14017 ;; This function calls:
 14018 ;;		Nothing
 14019 ;; This function is called by:
 14020 ;;		_INTERRUPT_InterruptManager
 14021 ;; This function uses a non-reentrant model
 14022 ;;
 14023                           
 14024                           	psect	text74
 14025  00203C                     __ptext74:
 14026                           	opt stack 0
 14027  00203C                     _TMR0_ISR:
 14028                           	opt stack 23
 14029                           
 14030                           ;dispatcher.c: 131: INTCONbits.TMR0IF = 0;
 14031                           
 14032                           ;incstack = 0
 14033  00203C  94F2               	bcf	intcon,2,c	;volatile
 14034                           
 14035                           ;dispatcher.c: 132: TMR0 = 61;
 14036  00203E  6AD7               	clrf	4055,c	;volatile
 14037  002040  0E3D               	movlw	61
 14038  002042  6ED6               	movwf	4054,c	;volatile
 14039                           
 14040                           ;dispatcher.c: 133: Timer0Interrupt = 1;
 14041  002044  0E01               	movlw	1
 14042  002046  6E5F               	movwf	_Timer0Interrupt,c
 14043  002048  0C01               	retlw	1	;funcret
 14044  00204A                     __end_of_TMR0_ISR:
 14045                           	opt stack 0
 14046                           tosu	equ	0xFFF
 14047                           tosh	equ	0xFFE
 14048                           tosl	equ	0xFFD
 14049                           pclath	equ	0xFFA
 14050                           tblptru	equ	0xFF8
 14051                           tblptrh	equ	0xFF7
 14052                           tblptrl	equ	0xFF6
 14053                           tablat	equ	0xFF5
 14054                           prodh	equ	0xFF4
 14055                           prodl	equ	0xFF3
 14056                           intcon	equ	0xFF2
 14057                           intcon2	equ	0xFF1
 14058                           postinc0	equ	0xFEE
 14059                           wreg	equ	0xFE8
 14060                           indf1	equ	0xFE7
 14061                           plusw1	equ	0xFE3
 14062                           fsr1h	equ	0xFE2
 14063                           fsr1l	equ	0xFE1
 14064                           indf2	equ	0xFDF
 14065                           postinc2	equ	0xFDE
 14066                           postdec2	equ	0xFDD
 14067                           plusw2	equ	0xFDB
 14068                           fsr2h	equ	0xFDA
 14069                           fsr2l	equ	0xFD9
 14070                           status	equ	0xFD8
 14071                           
 14072 ;; *************** function _INT0_ISR *****************
 14073 ;; Defined at:
 14074 ;;		line 634 in file "common.c"
 14075 ;; Parameters:    Size  Location     Type
 14076 ;;		None
 14077 ;; Auto vars:     Size  Location     Type
 14078 ;;		None
 14079 ;; Return value:  Size  Location     Type
 14080 ;;                  1    wreg      void 
 14081 ;; Registers used:
 14082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14083 ;; Tracked objects:
 14084 ;;		On entry : 0/0
 14085 ;;		On exit  : 0/0
 14086 ;;		Unchanged: 0/0
 14087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14092 ;;Total ram usage:        0 bytes
 14093 ;; Hardware stack levels used:    1
 14094 ;; Hardware stack levels required when called:    1
 14095 ;; This function calls:
 14096 ;;		i2_RTOS_SetTask
 14097 ;; This function is called by:
 14098 ;;		_INTERRUPT_InterruptManager
 14099 ;; This function uses a non-reentrant model
 14100 ;;
 14101                           
 14102                           	psect	text75
 14103  001FB2                     __ptext75:
 14104                           	opt stack 0
 14105  001FB2                     _INT0_ISR:
 14106                           	opt stack 22
 14107                           
 14108                           ;common.c: 643: RTOS_SetTask(GetTime, 0, 0);
 14109                           
 14110                           ;incstack = 0
 14111  001FB2  0E86               	movlw	low _GetTime
 14112  001FB4  6E01               	movwf	i2RTOS_SetTask@taskFunc,c
 14113  001FB6  0E1D               	movlw	high _GetTime
 14114  001FB8  6E02               	movwf	i2RTOS_SetTask@taskFunc+1,c
 14115  001FBA  6A04               	clrf	i2RTOS_SetTask@taskDelay+1,c
 14116  001FBC  6A03               	clrf	i2RTOS_SetTask@taskDelay,c
 14117  001FBE  6A06               	clrf	i2RTOS_SetTask@taskPeriod+1,c
 14118  001FC0  6A05               	clrf	i2RTOS_SetTask@taskPeriod,c
 14119  001FC2  EF88  F009         	goto	i2_RTOS_SetTask	;wreg free
 14120  001FC6                     __end_of_INT0_ISR:
 14121                           	opt stack 0
 14122                           tosu	equ	0xFFF
 14123                           tosh	equ	0xFFE
 14124                           tosl	equ	0xFFD
 14125                           pclath	equ	0xFFA
 14126                           tblptru	equ	0xFF8
 14127                           tblptrh	equ	0xFF7
 14128                           tblptrl	equ	0xFF6
 14129                           tablat	equ	0xFF5
 14130                           prodh	equ	0xFF4
 14131                           prodl	equ	0xFF3
 14132                           intcon	equ	0xFF2
 14133                           intcon2	equ	0xFF1
 14134                           postinc0	equ	0xFEE
 14135                           wreg	equ	0xFE8
 14136                           indf1	equ	0xFE7
 14137                           plusw1	equ	0xFE3
 14138                           fsr1h	equ	0xFE2
 14139                           fsr1l	equ	0xFE1
 14140                           indf2	equ	0xFDF
 14141                           postinc2	equ	0xFDE
 14142                           postdec2	equ	0xFDD
 14143                           plusw2	equ	0xFDB
 14144                           fsr2h	equ	0xFDA
 14145                           fsr2l	equ	0xFD9
 14146                           status	equ	0xFD8
 14147                           
 14148 ;; *************** function i2_RTOS_SetTask *****************
 14149 ;; Defined at:
 14150 ;;		line 22 in file "dispatcher.c"
 14151 ;; Parameters:    Size  Location     Type
 14152 ;;  taskFunc        2    0[COMRAM] PTR FTN()void 
 14153 ;;		 -> home_temp(1), set_font_set(1), time_set_dy(1), time_set_dt(1), 
 14154 ;;		 -> time_set_mt(1), time_set_yr(1), default_state(1), time_set_hr(1), 
 14155 ;;		 -> time_set_min(1), GetTime(1), key_press(1), time_led(1), 
 14156 ;;  taskDelay       2    2[COMRAM] unsigned int 
 14157 ;;  taskPeriod      2    4[COMRAM] unsigned int 
 14158 ;; Auto vars:     Size  Location     Type
 14159 ;;  RTOS_SetTask    1    8[COMRAM] unsigned char 
 14160 ;; Return value:  Size  Location     Type
 14161 ;;                  1    wreg      void 
 14162 ;; Registers used:
 14163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14164 ;; Tracked objects:
 14165 ;;		On entry : 0/0
 14166 ;;		On exit  : 0/0
 14167 ;;		Unchanged: 0/0
 14168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14169 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14171 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14172 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14173 ;;Total ram usage:        9 bytes
 14174 ;; Hardware stack levels used:    1
 14175 ;; This function calls:
 14176 ;;		Nothing
 14177 ;; This function is called by:
 14178 ;;		_INT0_ISR
 14179 ;; This function uses a non-reentrant model
 14180 ;;
 14181                           
 14182                           	psect	text76
 14183  001310                     __ptext76:
 14184                           	opt stack 0
 14185  001310                     i2_RTOS_SetTask:
 14186                           	opt stack 22
 14187                           
 14188                           ;dispatcher.c: 24: uint8_t i;
 14189                           ;dispatcher.c: 26: if(!taskFunc) return;
 14190                           
 14191                           ;incstack = 0
 14192  001310  5001               	movf	i2RTOS_SetTask@taskFunc,w,c
 14193  001312  1002               	iorwf	i2RTOS_SetTask@taskFunc+1,w,c
 14194  001314  E101               	bnz	i2l234
 14195  001316  0012               	return	
 14196  001318                     i2l234:
 14197                           
 14198                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 14199  001318  6A09               	clrf	i2RTOS_SetTask@i,c
 14200  00131A  D015               	goto	i2l4784
 14201  00131C                     i2l4772:
 14202                           
 14203                           ;dispatcher.c: 28: {
 14204                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 14205  00131C  5009               	movf	i2RTOS_SetTask@i,w,c
 14206  00131E  D82A               	call	PL22	;call to abstracted procedure
 14207  001320  5001               	movf	i2RTOS_SetTask@taskFunc,w,c	;volatile
 14208  001322  18DE               	xorwf	postinc2,w,c
 14209  001324  E10F               	bnz	i2l4782
 14210  001326  5002               	movf	i2RTOS_SetTask@taskFunc+1,w,c	;volatile
 14211  001328  18DE               	xorwf	postinc2,w,c
 14212  00132A  E10C               	bnz	i2l4782
 14213                           
 14214                           ;dispatcher.c: 30: {
 14215                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 14216  00132C  9EF2               	bcf	intcon,7,c	;volatile
 14217                           
 14218                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 14219  00132E  5009               	movf	i2RTOS_SetTask@i,w,c
 14220  001330  EC96  F008         	call	PL20	;call to abstracted procedure
 14221  001334  D83E               	call	PL104	;call to abstracted procedure
 14222                           
 14223                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 14224  001336  5009               	movf	i2RTOS_SetTask@i,w,c
 14225  001338  D82F               	call	PL28	;call to abstracted procedure
 14226  00133A  D836               	call	PL86	;call to abstracted procedure
 14227                           
 14228                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 14229  00133C  5009               	movf	i2RTOS_SetTask@i,w,c
 14230  00133E  D822               	call	PL24	;call to abstracted procedure
 14231                           
 14232                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 14233  001340  8EF2               	bsf	intcon,7,c	;volatile
 14234  001342  0C00               	retlw	0
 14235  001344                     i2l4782:
 14236  001344  2A09               	incf	i2RTOS_SetTask@i,f,c
 14237  001346                     i2l4784:
 14238  001346  5060               	movf	_arrayTail,w,c	;volatile
 14239  001348  5C09               	subwf	i2RTOS_SetTask@i,w,c
 14240  00134A  E3E8               	bnc	i2l4772
 14241                           
 14242                           ;dispatcher.c: 39: }
 14243                           ;dispatcher.c: 40: }
 14244                           ;dispatcher.c: 42: if (arrayTail < 15)
 14245  00134C  0E0F               	movlw	15
 14246  00134E  6060               	cpfslt	_arrayTail,c	;volatile
 14247  001350  0C0F               	retlw	15
 14248                           
 14249                           ;dispatcher.c: 43: {
 14250                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 14251  001352  9EF2               	bcf	intcon,7,c	;volatile
 14252                           
 14253                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 14254  001354  5060               	movf	_arrayTail,w,c	;volatile
 14255  001356  D80E               	call	PL22	;call to abstracted procedure
 14256  001358  C001  FFDE         	movff	i2RTOS_SetTask@taskFunc,postinc2	;volatile
 14257  00135C  C002  FFDD         	movff	i2RTOS_SetTask@taskFunc+1,postdec2	;volatile
 14258                           
 14259                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 14260  001360  5060               	movf	_arrayTail,w,c	;volatile
 14261  001362  EC96  F008         	call	PL20	;call to abstracted procedure
 14262  001366  D825               	call	PL104	;call to abstracted procedure
 14263                           
 14264                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 14265  001368  5060               	movf	_arrayTail,w,c	;volatile
 14266  00136A  D816               	call	PL28	;call to abstracted procedure
 14267  00136C  D81D               	call	PL86	;call to abstracted procedure
 14268                           
 14269                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 14270  00136E  5060               	movf	_arrayTail,w,c	;volatile
 14271  001370  D809               	call	PL24	;call to abstracted procedure
 14272                           
 14273                           ;dispatcher.c: 51: arrayTail++;
 14274                           
 14275                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 14276  001372  D024               	goto	PL118	;call to abstracted procedure
 14277  001374                     __end_ofi2_RTOS_SetTask:
 14278                           	opt stack 0
 14279  001374                     PL22:
 14280                           	opt stack 27
 14281  001374  0D08               	mullw	8
 14282  001376  0E00               	movlw	low _TaskArray
 14283  001378  24F3               	addwf	prodl,w,c
 14284  00137A  6ED9               	movwf	fsr2l,c
 14285  00137C  0E01               	movlw	high _TaskArray
 14286  00137E  20F4               	addwfc	prodh,w,c
 14287  001380  6EDA               	movwf	fsr2h,c
 14288  001382  0012               	return	
 14289  001384                     __end_ofPL22:
 14290                           	opt stack 0
 14291  001384                     PL24:
 14292                           	opt stack 27
 14293  001384  0D08               	mullw	8
 14294  001386  0E06               	movlw	low (_TaskArray+6)
 14295  001388  24F3               	addwf	prodl,w,c
 14296  00138A  6ED9               	movwf	fsr2l,c
 14297  00138C  0E01               	movlw	high (_TaskArray+6)
 14298  00138E  20F4               	addwfc	prodh,w,c
 14299  001390  6EDA               	movwf	fsr2h,c
 14300  001392  6ADE               	clrf	postinc2,c
 14301  001394  6ADD               	clrf	postdec2,c
 14302  001396  0012               	return	
 14303  001398                     __end_ofPL24:
 14304                           	opt stack 0
 14305  001398                     PL28:
 14306                           	opt stack 27
 14307  001398  0D08               	mullw	8
 14308  00139A  0E04               	movlw	low (_TaskArray+4)
 14309  00139C  24F3               	addwf	prodl,w,c
 14310  00139E  6ED9               	movwf	fsr2l,c
 14311  0013A0  0E01               	movlw	high (_TaskArray+4)
 14312  0013A2  20F4               	addwfc	prodh,w,c
 14313  0013A4  6EDA               	movwf	fsr2h,c
 14314  0013A6  0012               	return	
 14315  0013A8                     __end_ofPL28:
 14316                           	opt stack 0
 14317  0013A8                     PL86:
 14318                           	opt stack 22
 14319  0013A8  C005  FFDE         	movff	i2RTOS_SetTask@taskPeriod,postinc2
 14320  0013AC  C006  FFDD         	movff	i2RTOS_SetTask@taskPeriod+1,postdec2
 14321  0013B0  0012               	return	
 14322  0013B2                     __end_ofPL86:
 14323                           	opt stack 0
 14324  0013B2                     PL104:
 14325                           	opt stack 22
 14326  0013B2  C003  FFDE         	movff	i2RTOS_SetTask@taskDelay,postinc2
 14327  0013B6  C004  FFDD         	movff	i2RTOS_SetTask@taskDelay+1,postdec2
 14328  0013BA  0012               	return	
 14329  0013BC                     __end_ofPL104:
 14330                           	opt stack 0
 14331  0013BC                     PL118:
 14332                           	opt stack 27
 14333  0013BC  2A60               	incf	_arrayTail,f,c	;volatile
 14334  0013BE  8EF2               	bsf	intcon,7,c	;volatile
 14335  0013C0  0C00               	retlw	0	;funcret
 14336  0013C2                     __end_ofPL118:
 14337                           	opt stack 0
 14338                           tosu	equ	0xFFF
 14339                           tosh	equ	0xFFE
 14340                           tosl	equ	0xFFD
 14341                           pclath	equ	0xFFA
 14342                           tblptru	equ	0xFF8
 14343                           tblptrh	equ	0xFF7
 14344                           tblptrl	equ	0xFF6
 14345                           tablat	equ	0xFF5
 14346                           prodh	equ	0xFF4
 14347                           prodl	equ	0xFF3
 14348                           intcon	equ	0xFF2
 14349                           intcon2	equ	0xFF1
 14350                           postinc0	equ	0xFEE
 14351                           wreg	equ	0xFE8
 14352                           indf1	equ	0xFE7
 14353                           plusw1	equ	0xFE3
 14354                           fsr1h	equ	0xFE2
 14355                           fsr1l	equ	0xFE1
 14356                           indf2	equ	0xFDF
 14357                           postinc2	equ	0xFDE
 14358                           postdec2	equ	0xFDD
 14359                           plusw2	equ	0xFDB
 14360                           fsr2h	equ	0xFDA
 14361                           fsr2l	equ	0xFD9
 14362                           status	equ	0xFD8
 14363                           tosu	equ	0xFFF
 14364                           tosh	equ	0xFFE
 14365                           tosl	equ	0xFFD
 14366                           pclath	equ	0xFFA
 14367                           tblptru	equ	0xFF8
 14368                           tblptrh	equ	0xFF7
 14369                           tblptrl	equ	0xFF6
 14370                           tablat	equ	0xFF5
 14371                           prodh	equ	0xFF4
 14372                           prodl	equ	0xFF3
 14373                           intcon	equ	0xFF2
 14374                           intcon2	equ	0xFF1
 14375                           postinc0	equ	0xFEE
 14376                           wreg	equ	0xFE8
 14377                           indf1	equ	0xFE7
 14378                           plusw1	equ	0xFE3
 14379                           fsr1h	equ	0xFE2
 14380                           fsr1l	equ	0xFE1
 14381                           indf2	equ	0xFDF
 14382                           postinc2	equ	0xFDE
 14383                           postdec2	equ	0xFDD
 14384                           plusw2	equ	0xFDB
 14385                           fsr2h	equ	0xFDA
 14386                           fsr2l	equ	0xFD9
 14387                           status	equ	0xFD8
 14388                           
 14389                           	psect	text77
 14390  000000                     __ptext77:
 14391                           	opt stack 0
 14392                           tosu	equ	0xFFF
 14393                           tosh	equ	0xFFE
 14394                           tosl	equ	0xFFD
 14395                           pclath	equ	0xFFA
 14396                           tblptru	equ	0xFF8
 14397                           tblptrh	equ	0xFF7
 14398                           tblptrl	equ	0xFF6
 14399                           tablat	equ	0xFF5
 14400                           prodh	equ	0xFF4
 14401                           prodl	equ	0xFF3
 14402                           intcon	equ	0xFF2
 14403                           intcon2	equ	0xFF1
 14404                           postinc0	equ	0xFEE
 14405                           wreg	equ	0xFE8
 14406                           indf1	equ	0xFE7
 14407                           plusw1	equ	0xFE3
 14408                           fsr1h	equ	0xFE2
 14409                           fsr1l	equ	0xFE1
 14410                           indf2	equ	0xFDF
 14411                           postinc2	equ	0xFDE
 14412                           postdec2	equ	0xFDD
 14413                           plusw2	equ	0xFDB
 14414                           fsr2h	equ	0xFDA
 14415                           fsr2l	equ	0xFD9
 14416                           status	equ	0xFD8
 14417                           
 14418                           	psect	rparam
 14419  0000                     tosu	equ	0xFFF
 14420                           tosh	equ	0xFFE
 14421                           tosl	equ	0xFFD
 14422                           pclath	equ	0xFFA
 14423                           tblptru	equ	0xFF8
 14424                           tblptrh	equ	0xFF7
 14425                           tblptrl	equ	0xFF6
 14426                           tablat	equ	0xFF5
 14427                           prodh	equ	0xFF4
 14428                           prodl	equ	0xFF3
 14429                           intcon	equ	0xFF2
 14430                           intcon2	equ	0xFF1
 14431                           postinc0	equ	0xFEE
 14432                           wreg	equ	0xFE8
 14433                           indf1	equ	0xFE7
 14434                           plusw1	equ	0xFE3
 14435                           fsr1h	equ	0xFE2
 14436                           fsr1l	equ	0xFE1
 14437                           indf2	equ	0xFDF
 14438                           postinc2	equ	0xFDE
 14439                           postdec2	equ	0xFDD
 14440                           plusw2	equ	0xFDB
 14441                           fsr2h	equ	0xFDA
 14442                           fsr2l	equ	0xFD9
 14443                           status	equ	0xFD8
 14444                           
 14445                           	psect	temp
 14446  000071                     btemp:
 14447                           	opt stack 0
 14448  000071                     	ds	1
 14449  0000                     int$flags	set	btemp
 14450                           tosu	equ	0xFFF
 14451                           tosh	equ	0xFFE
 14452                           tosl	equ	0xFFD
 14453                           pclath	equ	0xFFA
 14454                           tblptru	equ	0xFF8
 14455                           tblptrh	equ	0xFF7
 14456                           tblptrl	equ	0xFF6
 14457                           tablat	equ	0xFF5
 14458                           prodh	equ	0xFF4
 14459                           prodl	equ	0xFF3
 14460                           intcon	equ	0xFF2
 14461                           intcon2	equ	0xFF1
 14462                           postinc0	equ	0xFEE
 14463                           wreg	equ	0xFE8
 14464                           indf1	equ	0xFE7
 14465                           plusw1	equ	0xFE3
 14466                           fsr1h	equ	0xFE2
 14467                           fsr1l	equ	0xFE1
 14468                           indf2	equ	0xFDF
 14469                           postinc2	equ	0xFDE
 14470                           postdec2	equ	0xFDD
 14471                           plusw2	equ	0xFDB
 14472                           fsr2h	equ	0xFDA
 14473                           fsr2l	equ	0xFD9
 14474                           status	equ	0xFD8
 14475                           tosu	equ	0xFFF
 14476                           tosh	equ	0xFFE
 14477                           tosl	equ	0xFFD
 14478                           pclath	equ	0xFFA
 14479                           tblptru	equ	0xFF8
 14480                           tblptrh	equ	0xFF7
 14481                           tblptrl	equ	0xFF6
 14482                           tablat	equ	0xFF5
 14483                           prodh	equ	0xFF4
 14484                           prodl	equ	0xFF3
 14485                           intcon	equ	0xFF2
 14486                           intcon2	equ	0xFF1
 14487                           postinc0	equ	0xFEE
 14488                           wreg	equ	0xFE8
 14489                           indf1	equ	0xFE7
 14490                           plusw1	equ	0xFE3
 14491                           fsr1h	equ	0xFE2
 14492                           fsr1l	equ	0xFE1
 14493                           indf2	equ	0xFDF
 14494                           postinc2	equ	0xFDE
 14495                           postdec2	equ	0xFDD
 14496                           plusw2	equ	0xFDB
 14497                           fsr2h	equ	0xFDA
 14498                           fsr2l	equ	0xFD9
 14499                           status	equ	0xFD8


Data Sizes:
    Strings     276
    Constant    1598
    Data        3
    BSS         305
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64     112
    BANK0           128     14      55
    BANK1           256      0     220
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), text_buf(BANK1[100]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_33(CODE[9]), STR_32(CODE[10]), STR_31(CODE[10]), STR_30(CODE[10]), 
		 -> STR_29(CODE[10]), STR_28(CODE[10]), STR_27(CODE[10]), STR_26(CODE[10]), 
		 -> STR_25(CODE[9]), STR_24(CODE[9]), STR_23(CODE[9]), STR_22(CODE[10]), 
		 -> STR_21(CODE[9]), STR_20(CODE[9]), STR_19(CODE[9]), STR_18(CODE[9]), 
		 -> STR_17(CODE[16]), STR_16(CODE[9]), STR_15(CODE[9]), STR_14(CODE[9]), 
		 -> STR_13(CODE[9]), STR_12(CODE[9]), STR_11(CODE[9]), STR_10(CODE[9]), 
		 -> STR_9(CODE[9]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[19]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), text_buf(BANK1[100]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), printf@ap(COMRAM[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_33(CODE[9]), STR_32(CODE[10]), STR_31(CODE[10]), STR_30(CODE[10]), 
		 -> STR_29(CODE[10]), STR_28(CODE[10]), STR_27(CODE[10]), STR_26(CODE[10]), 
		 -> STR_25(CODE[9]), STR_24(CODE[9]), STR_23(CODE[9]), STR_22(CODE[10]), 
		 -> STR_21(CODE[9]), STR_20(CODE[9]), STR_19(CODE[9]), STR_18(CODE[9]), 
		 -> STR_17(CODE[16]), STR_16(CODE[9]), STR_15(CODE[9]), STR_14(CODE[9]), 
		 -> STR_13(CODE[9]), STR_12(CODE[9]), STR_11(CODE[9]), STR_10(CODE[9]), 
		 -> STR_9(CODE[9]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[19]), 
		 -> STR_1(CODE[22]), 

    S1877__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    S1877__prbuf$ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), text_buf(BANK1[100]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), text_buf(BANK1[100]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    readTemp_Single@buf	PTR unsigned int  size(1) Largest target is 2
		 -> temperature(COMRAM[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 

    getDate@p4	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    putchar_down@pF	PTR unsigned char [5][0] size(2) Largest target is 1280
		 -> dFont4(CODE[50]), dFont3(CODE[50]), dFont2(CODE[50]), Font(CODE[1280]), 
		 -> dFont1(CODE[50]), 

    putchar_b_buf@pF	PTR unsigned char [5][0] size(2) Largest target is 1280
		 -> dFont4(CODE[50]), dFont3(CODE[50]), dFont2(CODE[50]), Font(CODE[1280]), 
		 -> dFont1(CODE[50]), 

    pFont	PTR unsigned char [5][0] size(2) Largest target is 50
		 -> dFont4(CODE[50]), dFont3(CODE[50]), dFont2(CODE[50]), dFont1(CODE[50]), 

    Update_Matrix@buf	PTR unsigned char  size(1) Largest target is 32
		 -> Dis_Buff(BANK0[32]), 

    RTOS_DispatchTask@function	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), set_font_set(), time_set_dy(), time_set_dt(), 
		 -> time_set_mt(), time_set_yr(), default_state(), time_set_hr(), 
		 -> time_set_min(), GetTime(), key_press(), time_led(), 

    RTOS_DeleteTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), set_font_set(), time_set_dy(), time_set_dt(), 
		 -> time_set_mt(), time_set_yr(), default_state(), time_set_hr(), 
		 -> time_set_min(), GetTime(), key_press(), time_led(), 

    S456task$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), set_font_set(), time_set_dy(), time_set_dt(), 
		 -> time_set_mt(), time_set_yr(), default_state(), time_set_hr(), 
		 -> time_set_min(), GetTime(), key_press(), time_led(), 

    TaskArray.pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), set_font_set(), time_set_dy(), time_set_dt(), 
		 -> time_set_mt(), time_set_yr(), default_state(), time_set_hr(), 
		 -> time_set_min(), GetTime(), key_press(), time_led(), 

    RTOS_SetTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), set_font_set(), time_set_dy(), time_set_dt(), 
		 -> time_set_mt(), time_set_yr(), default_state(), time_set_hr(), 
		 -> time_set_min(), GetTime(), key_press(), time_led(), 


Critical Paths under _main in COMRAM

    _SYSTEM_Initialize->_bmp085Calibration
    _init_ds18b20->_write_byte
    _bmp085Calibration->_printf
    _bmp085ReadInt->_I2C_Master_Read
    _Init7221->_Cmd7221
    _Cmd7221->_Send_Byte_7221
    _DS3231_init->_DS3231_Write
    _time_set_yr->_putchar_b_buf
    _time_set_yr->_setDate
    _time_set_mt->_putchar_b_buf
    _time_set_mt->_setDate
    _time_set_min->_putchar_b_buf
    _time_set_hr->_putchar_b_buf
    _setTime->_DS3231_Write
    _time_set_dy->_putchar_b_buf
    _time_set_dy->_setDate
    _time_set_dt->_putchar_b_buf
    _time_set_dt->_setDate
    _setDate->_DS3231_Write
    _decimal_to_bcd->___lbmod
    _DS3231_Write->_decimal_to_bcd
    _time_led->_readTemp_Single
    _readTemp_Single->_printf
    _write_byte->_write_bit
    _printf->__doprnt
    __doprnt->___llmod
    ___llmod->___lldiv
    _FillBuf->___lbmod
    _set_font_set->_putchar_b_buf
    _putchar_b_buf->___lbmod
    _home_temp->_putchar_down
    _scroll_left->_Update_Matrix
    _putchar_down_s->___lbmod
    _putchar_down->___lwmod
    _Update_Matrix->_Send_Byte_7221
    _pic_to_led->_pixel_off
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    _GetTime->_getDate
    _getTime->_DS3231_Read
    _getDate->_DS3231_Read
    _DS3231_Read->_I2C_Master_Read
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_RepeatedStart->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INT0_ISR->i2_RTOS_SetTask

Critical Paths under _main in BANK0

    _main->_RTOS_DispatchTask
    _time_led->_readTemp_Single

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  307274
                                             13 BANK0      1     1      0
                  _RTOS_DispatchTask
                       _RTOS_SetTask
                  _SYSTEM_Initialize
                       _clear_matrix
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    6831
                        _DS3231_init
                           _I2C_Init
                           _Init7221
                     _Interrupt_Init
                          _Port_Init
                          _RTOS_Init
                           _TMR1Init
                  _bmp085Calibration
                       _init_ds18b20
                          _init_uart
                           _read_eep
                           _set_font
 ---------------------------------------------------------------------------------
 (2) _read_eep                                             2     0      2      86
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         0     0      0     232
                           _ow_reset
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _bmp085Calibration                                    2     2      0    5110
                                             59 COMRAM     2     2      0
                      _bmp085ReadInt
                             _printf
 ---------------------------------------------------------------------------------
 (3) _bmp085ReadInt                                       11     9      2     195
                                             17 COMRAM     9     7      2
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _TMR1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTOS_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init7221                                             0     0      0     617
                            _Cmd7221
 ---------------------------------------------------------------------------------
 (3) _Cmd7221                                              3     2      1     617
                                             16 COMRAM     3     2      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DS3231_init                                          0     0      0     786
                       _DS3231_Write
 ---------------------------------------------------------------------------------
 (1) _RTOS_DispatchTask                                    8     8      0  290369
                                              5 BANK0      8     8      0
                            _GetTime *
                    _RTOS_DeleteTask
                      _default_state *
                          _home_temp *
                          _key_press *
                       _set_font_set *
                           _time_led *
                        _time_set_dt *
                        _time_set_dy *
                        _time_set_hr *
                       _time_set_min *
                        _time_set_mt *
                        _time_set_yr *
 ---------------------------------------------------------------------------------
 (2) _time_set_yr                                          0     0      0   35607
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_mt                                          0     0      0   31900
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_min                                         0     0      0   34344
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _time_set_hr                                          0     0      0   34443
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                       _clear_matrix
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (3) _setTime                                              3     1      2    5264
                                             27 COMRAM     3     1      2
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (2) _time_set_dy                                          0     0      0   31900
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_dt                                          0     0      0   35607
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (3) _setDate                                              4     1      3    6527
                                             27 COMRAM     4     1      3
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (4) _decimal_to_bcd                                       3     3      0    3769
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write                                         2     1      1     786
                                             25 COMRAM     2     1      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                     _decimal_to_bcd (ARG)
 ---------------------------------------------------------------------------------
 (2) _time_led                                             0     0      0   27288
                            _FillBuf
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                    _readTemp_Single
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _readTemp_Single                                     10     7      3    7847
                                             59 COMRAM     5     2      3
                                              0 BANK0      5     5      0
                            ___lwdiv
                            ___lwmod
                           _ow_reset
                             _printf
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (3) _write_byte                                           5     5      0     198
                                             15 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (4) _write_bit                                            1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _read_byte                                            4     4      0     136
                                             14 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (5) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _printf                                               9     5      4    4915
                                             50 COMRAM     9     5      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (4) __doprnt                                             23    19      4    2646
                                             36 COMRAM    14    10      4
                   Absolute function *
                            ___lldiv
                            ___llmod
                              _putch *
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     386
                                             27 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     623
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ow_reset                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _FillBuf                                              3     3      0    4246
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) _set_font_set                                         0     0      0   27900
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbmod
                      _putchar_b_buf
                           _set_font
                          _write_eep
 ---------------------------------------------------------------------------------
 (3) _write_eep                                            2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _set_font                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _putchar_b_buf                                        9     6      3   11781
                                             22 COMRAM     9     6      3
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (2) _key_press                                            1     1      0      77
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _home_temp                                            1     1      0   26664
                                             38 COMRAM     1     1      0
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                       _clear_matrix
                            _getTime
                         _pic_to_led
                       _putchar_down
                     _putchar_down_s
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _scroll_left                                          5     5      0    1603
                                             20 COMRAM     5     5      0
                      _Update_Matrix
 ---------------------------------------------------------------------------------
 (3) _putchar_down_s                                      10     9      1    1875
                                             22 COMRAM    10     9      1
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_down                                        12     9      3    3292
                                             26 COMRAM    12     9      3
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Update_Matrix                                        4     3      1    1300
                                             16 COMRAM     4     3      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (4) _Send_Byte_7221                                       2     2      0     102
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _pic_to_led                                           7     6      1    1124
                                             19 COMRAM     7     6      1
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (4) _pixel_on                                             4     3      1     273
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _pixel_off                                            5     4      1     273
                                             14 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (1) _clear_matrix                                         1     1      0      99
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1002
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1    2311
                                             18 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1    1396
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _RTOS_SetTask                                         9     3      6    9975
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _RTOS_DeleteTask                                      9     7      2    2317
                                             14 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _default_state                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              0     0      0    1873
                            _getDate
                            _getTime
 ---------------------------------------------------------------------------------
 (3) _getTime                                              3     0      3     967
                                             19 COMRAM     3     0      3
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (3) _getDate                                              4     0      4     906
                                             19 COMRAM     4     0      4
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (4) _bcd_to_decimal                                       2     2      0      62
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _DS3231_Read                                          2     2      0     164
                                             17 COMRAM     2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     1     1      0      31
                                             15 COMRAM     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             15 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           5     5      0     344
                                              9 COMRAM     5     5      0
                           _INT0_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0_ISR                                             0     0      0     344
                     i2_RTOS_SetTask
 ---------------------------------------------------------------------------------
 (9) i2_RTOS_SetTask                                       9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTOS_DispatchTask
     _GetTime *
       _getDate
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
     _RTOS_DeleteTask *
     _default_state *
     _home_temp *
       _RTOS_DeleteTask
       _RTOS_SetTask
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clear_matrix
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _pic_to_led
         _pixel_off
         _pixel_on
       _putchar_down
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
       _putchar_down_s
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _key_press *
     _set_font_set *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _set_font
       _write_eep
     _time_led *
       _FillBuf
         ___lbdiv
         ___lbmod
           ___lbdiv (ARG)
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _readTemp_Single
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _ow_reset
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lldiv *
             ___llmod *
               ___lldiv (ARG)
             _putch *
         _read_byte
           _read_bit
         _write_byte
           _write_bit
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _time_set_dt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_dy *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_hr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _clear_matrix
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_min *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_mt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_yr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
   _RTOS_SetTask
   _SYSTEM_Initialize
     _DS3231_init
       _DS3231_Write
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _decimal_to_bcd (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _I2C_Init
     _Init7221
       _Cmd7221
         _Send_Byte_7221
     _Interrupt_Init
     _Port_Init
     _RTOS_Init
     _TMR1Init
     _bmp085Calibration
       _bmp085ReadInt
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_RepeatedStart
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
     _init_ds18b20
       _ow_reset
       _write_byte
         _write_bit
     _init_uart
     _read_eep
     _set_font
   _clear_matrix

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     i2_RTOS_SetTask
   _TMR0_ISR
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DC       7       85.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      37       5       43.0%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     40      70       1       88.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     183      34        0.0%
DATA                 0      0     183       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Mar 24 14:50:25 2017

                   ??_Interrupt_Init 000F                                   PL2 0612  
                                 PL4 0468                                   PL6 0A98  
                                 PL8 0F2C                                   _b1 0050  
                                 _b2 004E                                   _mb 004C  
                                 _mc 004A                                   _md 0048  
                        __CFG_BORV$3 000000                      ??_Update_Matrix 0012  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                     _decimal_to_bcd 1DD6                         __CFG_CP2$OFF 000000  
                  ??_RTOS_DeleteTask 0011                                  PL10 12F8  
                                PL20 112C                                  PL12 0B70  
                                PL30 113C                                  PL22 1374  
                                PL14 0E2A                                  PL40 0208  
                                PL32 0BBA                                  PL24 1384  
                                PL16 0E3E                                  PL50 025A  
                                PL42 0BC6                                  PL34 01F0  
                                PL26 0AA2                                  PL18 0B96  
                                PL60 07B8                                  PL52 0798  
                                PL44 022A                                  PL36 078C  
                                PL28 1398                                  PL70 165E  
                                PL62 1DA0                                  PL54 0AAE  
                                PL46 0236                                  PL38 0F40  
                                PL80 0BDC                                  PL72 0F54  
                                PL64 07C8                                  PL56 07A8  
                                PL48 024C                                  PL90 1050  
                                PL82 0BE6                                  PL74 0AB8  
                                PL66 1656                                  PL58 0BD2  
                                PL92 18E0                                  PL84 1B00  
                                PL76 15E6                                  PL68 0F4A  
                                PL94 0ACC                                  PL86 13A8  
                                PL78 122E                                  PL96 18EA  
                                PL88 0AC2                                  PL98 15F0  
                                l234 157C                                  l170 1F96  
                                l251 1090                                  l341 1E92  
                                l343 1E9A                                  l176 201E  
                                l344 1E9C                                  l409 17D0  
                                l353 1B86                                  l418 1766  
                                l436 145A                                  l445 13C6  
                                l713 0A0A                                  l730 0FEE  
                                l723 0A64                                  l493 1938  
                                l805 0ED8                                  l910 1AC6  
                                l902 1A8E                                  l743 02FC  
                                l904 1A96                                  l824 06F8  
                                l489 18FA                                  l906 1A9E  
                                l770 0DC8                                  l908 1AA8  
                                l783 0508                                  l699 11DC  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _OSS BEEA                                  _ac1 005C  
                                _ac2 005A                                  _ac3 0058  
                                _ac4 0056                                  _ac5 0054  
                                _ac6 0052                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
                      write_eep@data 000F                        _bmp085ReadInt 1A3E  
                               PL100 0BF0                                 PL110 0474  
                               PL102 1306                                 PL120 07D6  
                               PL112 0E4A                                 PL104 13B2  
                               PL122 0BFA                                 PL114 0628  
                               PL106 1668                                 PL124 0C02  
                               PL116 0E54                                 PL108 1672  
                               PL126 0AD6                                 PL118 13BC  
                               PL128 0C0A                         __CFG_LVP$OFF 000000  
                       _putchar_down 1456                         __CFG_WDT$OFF 000000  
                               l1004 1E38                                 l1200 006C  
                               l1203 00A6                                 l1153 204C  
                               l1172 1E6C                                 l1190 0048  
                               l1178 1FC6                                 l1196 01EA  
                               l1625 1A34                                 l1635 1B3E  
                               l5100 1CB8                                 l1572 16E0  
                               l5020 003E                                 l5110 1CD0  
                               l1582 1882                                 l5030 0054  
                               l5014 0014                                 l5024 004C  
                               l5106 1CC8                                 l5026 0050  
                               l6010 0E1E                                 l5036 0078  
                               l5212 1C36                                 l6100 0E8A  
                               l5126 1E1A                                 l5118 1E04  
                               l5142 1B8A                                 l5062 00FA  
                               l5054 00C8                                 l5046 00AE  
                               l5038 008C                                 l6006 0DB4  
                               l5240 1A0C                                 l5312 1ACC  
                               l5080 01CE                                 l5072 012E  
                               l5048 00C4                                 l5216 1C56  
                               l6032 04BE                                 l6016 0480  
                               l6120 0EB4                                 l6112 0EA4  
                               l5250 1A2A                                 l5242 1A10  
                               l5402 17A2                                 l5314 1AD6  
                               l5322 1AEC                                 l5074 013A  
                               l6202 1266                                 l6050 04E4  
                               l6026 04A2                                 l6114 0EAA  
                               l6106 0E96                                 l6130 0EC4  
                               l5340 156A                                 l5260 1B1E  
                               l5404 17AE                                 l5316 1AE0  
                               l5084 01D6                                 l5068 0126  
                               l6044 04DA                                 l6140 0634  
                               l6300 10D0                                 l5334 1564  
                               l5326 14EE                                 l5342 156C  
                               l5094 1CAE                                 l5238 1A04  
                               l5262 1B22                                 l5318 1AEA  
                               l5502 0B36                                 l5086 01E4  
                               l6222 12AE                                 l6206 1272  
                               l6070 059A                                 l6062 0532  
                               l6038 04CA                                 l6134 0F20  
                               l6150 066A                                 l5350 1F00  
                               l5600 0C14                                 l6216 12A2  
                               l6208 1276                                 l6072 05B4  
                               l6064 054C                                 l6080 0606  
                               l6304 1106                                 l5098 1CB4  
                               l5266 1B34                                 l5258 1B16  
                               l5426 145C                                 l6218 12A8  
                               l6234 12D8                                 l6250 1AAA  
                               l6074 05CE                                 l6066 0566  
                               l6058 04F4                                 l6170 06E8  
                               l6162 06BA                                 l6306 1120  
                               l5276 1FEC                                 l5372 180C  
                               l5436 14C2                                 l5196 1BFE  
                               l5612 0C40                                 l6228 12CA  
                               l6236 12F0                                 l6068 0580  
                               l6092 0E70                                 l6308 1124  
                               l5286 1580                                 l5374 1818  
                               l6190 123A                                 l6078 05E8  
                               l6094 0E76                                 l6086 0E5E  
                               l6158 069E                                 l6326 19EE  
                               l5296 15AE                                 l5368 17D2  
                               l5456 13C8                                 l5528 18FC  
                               l4912 1694                                 l5624 0C54  
                               l5298 15B0                                 l5466 142E  
                               l5546 1946                                 l5538 1928  
                               l5482 0AE0                                 l4914 16A0  
                               l5730 1190                                 l5722 1172  
                               l6186 077C                                 l6290 1088  
                               l4924 16D2                                 l4916 16A4  
                               l4940 1874                                 l4932 1842  
                               l5636 0C84                                 l5804 09E2  
                               l5812 09F6                                 l5900 02AE  
                               l5724 1178                                 l5716 1156  
                               l6284 1066                                 l6292 108A  
                               l5398 1768                                 l5486 0B00  
                               l4934 184E                                 l6198 125A  
                               l5822 0A54                                 l5742 11AC  
                               l6294 1096                                 l5488 0B04  
                               l4936 1852                                 l5656 0D14  
                               l5832 0F60                                 l5824 0A78  
                               l5912 02CC                                 l5760 120A  
                               l5736 119A                                 l6288 107E  
                               l5842 0F86                                 l5826 0A8C  
                               l5930 0320                                 l5906 02BA  
                               l5762 1222                                 l5668 0D2C  
                               l5860 0FBE                                 l5780 099E  
                               l5940 038E                                 l5932 0336  
                               l5748 11B6                                 l5756 11C8  
                               l5854 0FAC                                 l5950 03FC  
                               l5942 03A4                                 l5934 034C  
                               l5918 02D6                                 l5926 02E8  
                               l4968 1EF4                                 l5848 0FA2  
                               l5792 09C4                                 l5768 0974  
                               l5952 0412                                 l5944 03BA  
                               l5936 0362                                 l5866 0FC8  
                               l5874 0FDA                                 l5786 09BA  
                               l5946 03D0                                 l5938 0378  
                               l5948 03E6                                 l5956 0428  
                               l5884 026E                                 l5980 0D7E  
                               l5964 0D42                                 l5878 1044  
                               l5798 09D8                                 l5958 045C  
                               l5894 0292                                 l5974 0D62  
                               l5992 0D9A                                 l5986 0D8A  
                               l5998 0DA4                                 STR_1 BEEB  
                               STR_2 BF01                                 STR_3 BF24  
                               STR_4 BF2E                                 STR_5 BF38  
                               STR_6 BF7E                                 STR_7 BF88  
                               STR_8 BF92                                 STR_9 BF9C  
                   ow_reset@presence 0010                                 _LATB 000F8A  
                               _LATC 000F8B                                 u3120 1EF2  
                               _LATD 000F8C                         _DS3231_Write 1F34  
                               u3208 0028                                 u3404 1EC4  
                               u3405 1EC0                                 u3414 1DC0  
                               u3318 01B8                                 u3415 1DBC  
                               u3424 1C0E                                 u3601 155C  
                               u3425 1C0A                                 u4251 129A  
                               u3454 1C4E                                 u3455 1C4A  
                               u3298 0112                                 u4507 1C2A  
                               u3900 1152                                 u4517 1E2E  
                               u3590 1526                                 u3734 140A  
                               u4607 1434                                 u3735 1406  
                               u4527 1E3A                                 u4617 14C8  
                               u4537 1C58                                 u4547 1F56  
                               _RCEN 007E2B                                 u4557 1F62  
                               u3694 149E                                 u3950 0970  
                               u4398 110A                                 u3695 149A  
                               u4567 1B52                                 u4487 19AA  
                               u4577 1B62                                 u4497 0880  
                               u4587 1B76                                 u4597 192E  
                               _TMR0 000FD6                                 _RSEN 007E29  
                               _TXIF 007CF4                         _RTOS_SetTask 1574  
                       __CFG_PWRT$ON 000000                                 _Font B901  
                    __end_of_Cmd7221 1F18     __end_of_I2C_Master_RepeatedStart 207A  
                               _main 19A2                     __end_of_I2C_Init 1F9C  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0071                        write_byte@val 0012  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E              __size_ofi2_RTOS_SetTask 0064  
                      __CFG_IESO$OFF 000000                      __end_of_FillBuf 0B70  
                    __end_of_GetTime 1DA0                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000000               __end_of_decimal_to_bcd 1DFC  
               RTOS_SetTask@taskFunc 000F                        _putchar_b_buf 175E  
                   __end_of_INT0_ISR 1FC6                     ?_I2C_Master_Read 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___lbdiv 1CD4  
                              _EEADR 000FA9                                STR_10 BFAE  
                              STR_11 BFDB                                STR_12 BFE4  
                              STR_13 BFED                                STR_21 BFC0  
                              STR_14 BFA5                                STR_22 BF56  
                              STR_15 BFB7                                STR_31 BF4C  
                              STR_16 BFC9                                STR_33 BFF6  
                              STR_17 BF14                                STR_18 BFD2  
                              STR_26 BF60                                STR_27 BF6A  
                              STR_28 BF74                                STR_29 BF42  
                    __end_of___lbmod 1E22                __end_of_default_state 2086  
                    __end_of___lldiv 16F2                                _T0CON 000FD5  
                    __end_of___llmod 1894                      __end_of___lwdiv 1A3E  
                    __end_of___lwmod 1B48                                i2l310 1710  
                              i2l234 1318                                i2l314 174A  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _SPBRG 000FAF                                _PORTB 000F81  
                    __end_of__doprnt 01F0                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TXREG 000FAD                       ?_bmp085ReadInt 0012  
                      __CFG_WRT0$OFF 000000                      __end_of_getDate 1656  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
               __end_of_clear_matrix 1FFC                                _TTime 0062  
                              _FontS BEC9                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                      __end_of_getTime 18E0  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                   __end_of_TMR0_ISR 204A                     __end_of_TMR1_ISR 200E  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                   __end_of_TMR1Init 203C                        __CFG_WRTD$OFF 000000  
                              _pFont 006D                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers B8D5                                _fract B8F1  
                      pic_to_led@pic 0014                      __end_of_setDate 1BFA  
                              _putch 204A                       write_byte@temp 0013  
                    __end_of_setTime 1D32                       __pbitbssCOMRAM 0380  
                              pclath 000FFA                                tablat 000FF5  
                              plusw1 000FE3                                plusw2 000FDB  
                              status 000FD8                      ___lbdiv@divisor 000F  
                       __end_ofPL100 0BFA                         __end_ofPL110 047E  
                       __end_ofPL102 1310                         __end_ofPL120 07DC  
                       __end_ofPL112 0E54                         __end_ofPL104 13BC  
                       __end_ofPL122 0C02                         __end_ofPL114 0632  
                       __end_ofPL106 1672                         __end_ofPL124 0C0A  
                       __end_ofPL116 0E5C                         __end_ofPL108 167C  
                       __end_ofPL126 0ADE                         __end_ofPL118 13C2  
                       __end_ofPL128 0C12                   __size_of_RTOS_Init 0010  
                    ___lbdiv@counter 0011                      write_bit@bitval 000F  
                    __initialization 1950                         __end_of_Font BE01  
                   __end_of_Init7221 1D04                         __end_of_main 19F4  
                    _readTemp_Single 0C12                       ?_putchar_b_buf 0017  
                    ?_decimal_to_bcd 0001          ?_INTERRUPT_InterruptManager 0001  
                     __CFG_OSC$HSPLL 000000                RTOS_SetTask@taskDelay 0011  
                    decimal_to_bcd@d 0019                               ??_main 00B6  
                      __activetblptr 000002                     ??_Send_Byte_7221 000F  
                      ?_init_ds18b20 0001                    ?_I2C_Master_Start 0001  
                  ?_I2C_Master_Write 0001                       _putchar_down_s 13C2  
                          ??_Cmd7221 0012                   ??_I2C_Master_Start 0010  
                 ??_I2C_Master_Write 0010                     ___llmod@dividend 001C  
                             _EEDATA 000FA8                               _EECON2 000FA7  
                             ?_putch 0001                               i2l6342 1736  
                             i2l4772 131C                               i2l4782 1344  
                             i2l4784 1346                            ??_FillBuf 0017  
                             _SPBRGH 000FB0                            ??_GetTime 0018  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                      setDate@daySet 001F                    DS3231_Write@value 001A  
                             _TSTime 0041                       __CFG_XINST$OFF 000000  
           _I2C_Master_RepeatedStart 2072                               _dFont1 BE97  
                             _dFont2 BE65                               _dFont3 BE33  
                             _dFont4 BE01                      Send_Byte_7221@i 0010  
                  _RTOS_DispatchTask 105A                            ??___lbdiv 0010  
                     __CFG_STVREN$ON 000000                            ??___lbmod 0014  
                          ??___lldiv 0017                         ?_scroll_left 0001  
                          ??___llmod 0024                            ??___lwdiv 0013  
                   RTOS_DeleteTask@i 0017                            ??___lwmod 001A  
                             _en_put 0380                               _pic7x8 B8D5  
                     pic_to_led@mask 0017                   ?_RTOS_DispatchTask 0001  
                          ??__doprnt 0029                               _events 006F  
                   __end_of_read_bit 1F6C                     __end_of_read_eep 1FD8  
                             clear_0 1974                               clear_1 1980  
                             clear_2 198E                            ??_getDate 0018  
                       __doprnt@flag 0031                               _printf 1E46  
                          ??_getTime 0017                         __doprnt@prec 002B  
                     ??_init_ds18b20 0015                      ??_bmp085ReadInt 0014  
             __end_of_putchar_down_s 1456                         ?_time_set_dt 0001  
                       ?_time_set_dy 0001                         ?_time_set_hr 0001  
                  __end_of_RTOS_Init 201E                         ?_time_set_mt 0001  
                       ?_time_set_yr 0001                         __pdataCOMRAM 006D  
                   __end_of_set_font 1B00                            ?_I2C_Init 0001  
                 __size_of_Port_Init 001C                     __end_of_pixel_on 1ED6  
                ??_RTOS_DispatchTask 00AE                            ??_setDate 001F  
                   __end_of_time_led 12F8                         __mediumconst B8AC  
                   __end_of_ow_reset 1B84                            ??_setTime 001E  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                     ___lbdiv@dividend 0010  
                  _SYSTEM_Initialize 1C6A                      ___lbmod@divisor 0013  
                         __accesstop 0080              __end_of__initialization 1994  
                    ___lbmod@counter 0015                            ?_INT0_ISR 0001  
                    __CFG_PBADEN$OFF 000000                   ?_SYSTEM_Initialize 0001  
                     i2_RTOS_SetTask 1310                        ___rparam_used 000001  
            __end_of_readTemp_Single 0D40                     write_eep@address 0010  
                    _RTOS_DeleteTask 14EA            __end_of_RTOS_DispatchTask 112C  
                      __end_of_FontS BEEA                      ??_putchar_b_buf 001A  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 003E  
                          ?_TMR0_ISR 0001                            ?_TMR1_ISR 0001  
                          ?_TMR1Init 0001                        __end_of_fract B901  
                        pic_to_led@i 001A                          pic_to_led@j 0019  
                        pic_to_led@x 0018                        __end_of_putch 2056  
                         __end_ofPL2 0628                           __end_ofPL4 0474  
                         __end_ofPL6 0AA2                           __end_ofPL8 0F40  
                   ___lbdiv@quotient 0012                __size_of_clear_matrix 0012  
                    ?_putchar_down_s 0017                           ??_I2C_Init 000F  
                         __doprnt@ap 0028                           __doprnt@pb 0025  
                          ?_Init7221 0001            __end_of_SYSTEM_Initialize 1CA0  
                            ??_putch 000F               RTOS_SetTask@taskPeriod 0013  
                         __pbssBANK0 0080                           __pbssBANK1 0100  
             __end_ofi2_RTOS_SetTask 1374                        ??_DS3231_Read 0012  
                         ??_INT0_ISR 000A                   __size_of_home_temp 015A  
                      ??_DS3231_init 001C                   __size_of_key_press 0044  
                  _bmp085Calibration 07DC                   __size_of_init_uart 001A  
                 __size_of_read_byte 0038                    __end_of_Port_Init 1F34  
                       _clear_matrix 1FEA                      bcd_to_decimal@d 0010  
                 ?_bmp085Calibration 0001                           ??_TMR0_ISR 0001  
                         ??_TMR1_ISR 0001                           ??_TMR1Init 000F  
                    _Timer0Interrupt 005F              i2RTOS_SetTask@taskDelay 0003  
                ??_bmp085Calibration 003C                              ?_printf 0033  
                 __size_of_pixel_off 0028                __end_of_Update_Matrix 1BC0  
                            _INTCON2 000FF1              __size_of_bcd_to_decimal 0016  
                            _Cmd7221 1EFA                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                           ??_Init7221 0014  
                        setTime@hSet 001E                          setTime@mSet 001C  
                            _SSPSTAT 000FC7                          setTime@sSet 001D  
            __end_of_RTOS_DeleteTask 1574                       setDate@dateSet 001C  
                    ?i2_RTOS_SetTask 0001            __end_of_bmp085Calibration 0968  
                            _FillBuf 0ADE                              _GetTime 1D86  
                          ?_read_eep 000F                            ?_read_bit 0001  
               __end_of_init_ds18b20 1D86                   __size_of_write_eep 0024  
                 __size_of_write_bit 0024                     Update_Matrix@buf 0011  
                   ?_readTemp_Single 003C                     ??_decimal_to_bcd 0017  
                            __Hparam 0000           __size_of_RTOS_DispatchTask 00D2  
                            __Lparam 0000                            ?_set_font 0001  
                      ?_set_font_set 0001                            ?_pixel_on 000F  
                     setDate@yearSet 001E                            ?_time_led 0001  
                __end_of_DS3231_Read 1D5E                            ?_ow_reset 0001  
                __end_of_DS3231_init 1FEA                              ___lbdiv 1CA0  
                            ___lbmod 1DFC                              ___lldiv 167C  
                            ___llmod 1832                              ___lwdiv 19F4  
                            ___lwmod 1B0A                              __doprnt 0012  
                            __pcinit 1950                              _getDate 15FA  
                            __ramtop 1000                 __size_of_scroll_left 005C  
           readTemp_Single@time_flag 003D                              __ptext0 19A2  
                            __ptext1 1C6A                              __ptext2 1FC6  
                            __ptext3 1F6C                              _getTime 1894  
                            __ptext4 1D5E                              __ptext5 07DC  
                            __ptext6 1A3E                              __ptext7 202E  
                            __ptext8 200E                              __ptext9 1F18  
                    __size_of_printf 0024                    __end_of_home_temp 078C  
           readTemp_Single@timer_val 003E                            _T1CONbits 000FCD  
                            _dpowers B8AD              __size_of_Interrupt_Init 0006  
                         _pic_to_led 17C8                    __end_of_key_press 1ACA  
                  __end_of_init_uart 1F86                              _setDate 1BC0  
                  __end_of_read_byte 1C6A                              _setTime 1D04  
                            _scratch 0080             __size_of_I2C_Master_Read 0024  
           __size_of_I2C_Master_Wait 0010             __size_of_I2C_Master_Stop 0008  
               __size_of_time_set_dt 00EA                        putchar_down@i 0026  
               __size_of_time_set_dy 0194                        putchar_down@j 0025  
               __size_of_time_set_hr 0130                        putchar_down@k 0024  
                putchar_b_buf@symbol 0017                 __size_of_time_set_mt 01FC  
                      putchar_down@x 0023                 __size_of_time_set_yr 00F2  
         __size_of_SYSTEM_Initialize 0036                       __pintcode_body 16F2  
               end_of_initialization 1994           ??_I2C_Master_RepeatedStart 0010  
                      ?_time_set_min 0001                         key_press@key 000F  
                      __Lmediumconst B8AC                              int_func 16F2  
                         ??_read_eep 0011                           ??_read_bit 000F  
                  __end_of_pixel_off 1DD6                     DS3231_Read@value 0013  
          __size_of_I2C_Master_Start 0008               __size_of_default_state 0006  
          __size_of_I2C_Master_Write 000C                   RTOS_DispatchTask@i 00B5  
                 RTOS_DispatchTask@j 00B4                      ___lldiv@divisor 0013  
                      RTOS_SetTask@i 0017                       ??_set_font_set 0020  
                    ___lldiv@counter 001B                           ??_set_font 000F  
                         ??_pixel_on 0010                           ??_time_led 0041  
                          _RCSTAbits 000FAB                              printf@f 0033  
                         ??_ow_reset 000F                     scroll_left@speed 0018  
                   I2C_Master_Read@a 0010                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
                       read_byte@val 0011                            _PORTCbits 000F82  
                         _show_digit 0381                    __end_of_write_eep 1E8E  
                  __end_of_write_bit 1E46                     ___lbmod@dividend 0014  
                          _TRISCbits 000F94                    __size_of_I2C_Init 0016  
                          _RTOS_Init 200E                     ?_RTOS_DeleteTask 000F  
                     ??_time_set_min 0020                          ___lbmod@rem 0016  
         __size_of_bmp085Calibration 018C                          _DS3231_Read 1D32  
                          _TXSTAbits 000FAC                          _DS3231_init 1FD8  
                  __size_of_INT0_ISR 0014                       __end_of_dFont1 BEC9  
                     __end_of_dFont2 BE97                       __end_of_dFont3 BE65  
                     __end_of_dFont4 BE33                     ??_putchar_down_s 0018  
                        _BAUDCONbits 000FB8                        __pidataCOMRAM 2086  
                         _write_byte 1BFA                    __size_of_TMR0_ISR 000E  
                  __size_of_TMR1_ISR 0012                       __end_of_pic7x8 B8F1  
                  __size_of_TMR1Init 000E                       __end_of_printf 1E6A  
                      _default_state 2080                          ?_pic_to_led 0014  
                        __end_ofPL10 1306                          __end_ofPL20 113C  
                        __end_ofPL12 0B96                          __end_ofPL30 114A  
                        __end_ofPL22 1384                          __end_ofPL14 0E3E  
                        __end_ofPL40 022A                          __end_ofPL32 0BC6  
                        __end_ofPL24 1398                          __end_ofPL16 0E4A  
                        __end_ofPL50 026C                          __end_ofPL42 0BD2  
                        __end_ofPL34 0208                          __end_ofPL26 0AAE  
                        __end_ofPL18 0BBA                          __end_ofPL60 07C8  
                        __end_ofPL52 07A8                          __end_ofPL44 0236  
                        __end_ofPL36 0798                          __end_ofPL28 13A8  
                        __end_ofPL70 1668                          __end_ofPL62 1DAE  
                        __end_ofPL54 0AB8                          __end_ofPL46 024C  
                        __end_ofPL38 0F4A                          __end_ofPL80 0BE6  
                        __end_ofPL72 0F5E                          __end_ofPL64 07D6  
                        __end_ofPL56 07B8                          __end_ofPL48 025A  
              __end_of_bmp085ReadInt 1A86                          __end_ofPL90 105A  
                        __end_ofPL82 0BF0                          __end_ofPL74 0AC2  
                        __end_ofPL66 165E                          __end_ofPL58 0BDC  
                        __end_ofPL92 18EA                          __end_ofPL84 1B0A  
                        __end_ofPL76 15F0                          __end_ofPL68 0F54  
                        __end_ofPL94 0AD6                          __end_ofPL86 13B2  
                        __end_ofPL78 1238                          __end_ofPL96 18F4  
                        __end_ofPL88 0ACC                          __end_ofPL98 15FA  
                start_initialization 1950                       _bcd_to_decimal 1F9C  
                        __end_of_OSS BEEB                           ?_RTOS_Init 0001  
                      ?_putchar_down 001B                        ?_DS3231_Write 001A  
              __size_of_init_ds18b20 0028                        ?_RTOS_SetTask 000F  
                  __size_of_Init7221 0030              __size_of_Send_Byte_7221 0024  
                  ??_I2C_Master_Read 0010                    ??_I2C_Master_Wait 000F  
                  ??_I2C_Master_Stop 0010                      ___llmod@divisor 0020  
                          _TaskArray 0100                      ___llmod@counter 0024  
                      clear_matrix@i 000F                            _Port_Init 1F18  
              __end_of_putchar_b_buf 17C8                          __doprnt@val 002D  
                   __CFG_LPT1OSC$OFF 000000                      read_eep@address 000F  
                           ??_printf 0037                           read_byte@i 0012  
                     ?_default_state 0001               __end_of_bcd_to_decimal 1FB2  
                     _Interrupt_Init 207A                         _init_ds18b20 1D5E  
                        __pbssCOMRAM 0041                        __pcstackBANK0 00A9  
               __end_of_set_font_set 0F2C                     ??i2_RTOS_SetTask 0007  
                     ??_putchar_down 001E            RTOS_DispatchTask@function 00B2  
                           ?_Cmd7221 0011                       ??_DS3231_Write 001B  
                     ??_RTOS_SetTask 0015                 readTemp_Single@fptmp 00A9  
                           ?_FillBuf 0001                             ?_GetTime 0001  
                          __doprnt@c 0032                            __doprnt@f 0026  
                   _I2C_Master_Start 206A                     _I2C_Master_Write 2056  
                  __size_of_read_bit 001C                    __size_of_read_eep 0012  
                   ___lwdiv@dividend 000F                  __size_of_pic_to_led 006A  
                  __CFG_CCP2MX$PORTC 000000                            __pintcode 0008  
                      __pmediumconst B8AC                             ?___lbdiv 000F  
             i2RTOS_SetTask@taskFunc 0001                             ?___lbmod 0013  
                           ?___lldiv 000F                           ?_Port_Init 0001  
                           ?___llmod 001C                    __size_of_set_font 0036  
                           ?___lwdiv 000F                             ?___lwmod 0016  
                  __size_of_pixel_on 0024                             Cmd7221@i 0013  
                  __size_of_time_led 00C0                             ?__doprnt 0025  
                  __size_of_ow_reset 003C                          ?_write_byte 0001  
             __end_of_Interrupt_Init 2080                             ?_getDate 0014  
       ??_INTERRUPT_InterruptManager 000A                            _arrayTail 0060  
               __end_of_time_set_min 122E                             ?_getTime 0014  
                   bmp085ReadInt@lsb 0019                     bmp085ReadInt@msb 0017  
                    ?_bcd_to_decimal 0001                             _I2C_Init 1F86  
                           ?_setDate 001C                             ?_setTime 001C  
           i2RTOS_SetTask@taskPeriod 0005                            _home_temp 0632  
                        ??_RTOS_Init 000F                     ___lwdiv@quotient 0014  
                          _key_press 1A86                            _init_uart 1F6C  
                          _read_byte 1C32                           Cmd7221@adr 0012  
                     __size_of_putch 000C                           Cmd7221@val 0011  
                    putchar_b_buf@pF 0018                             _INT0_ISR 1FB2  
                           _LATDbits 000F8C                            getDate@p1 0017  
                          getDate@p2 0016                            getDate@p3 0015  
                          getDate@p4 0014                             _PIE1bits 000F9D  
                         pixel_off@x 0013                           pixel_off@y 000F  
                   readTemp_Single@i 00AB               __size_of_Update_Matrix 003C  
__size_of_INTERRUPT_InterruptManager 1756                             _PIR1bits 000F9E  
                           FillBuf@i 0019                            _pixel_off 1DAE  
                   __CFG_WDTPS$32768 000000                            _time_flag 006B  
                      ??_scroll_left 0015                             _TMR0_ISR 203C  
                           _TMR1_ISR 1FFC                             _TMR1Init 202E  
                          getTime@p1 0016                            getTime@p2 0015  
                          getTime@p3 0014                            _timer_val 006C  
                DS3231_Write@address 001B                      putchar_down_s@i 0020  
                    putchar_down_s@j 001F                      putchar_down_s@k 001E  
                    putchar_down_s@x 001D             __size_of_readTemp_Single 012E  
                    ??_default_state 000F                      ?_Interrupt_Init 0001  
                      ??_time_set_dt 0020                        ??_time_set_dy 0020  
                      ??_time_set_hr 0020                        ??_time_set_mt 0020  
                      ??_time_set_yr 0020                          write_byte@i 0014  
                           _Dis_Buff 0089                           ?_home_temp 0001  
                I2C_Master_Read@temp 0011                             _Init7221 1CD4  
                         ?_key_press 0001                            _write_eep 1E6A  
                          _write_bit 1E22                           ?_init_uart 0001  
                        _INTCON2bits 000FF1                     __size_of_Cmd7221 001E  
                         ?_read_byte 0001                            _type_font 0061  
                     _Send_Byte_7221 1E8E                         ?_DS3231_Read 0001  
                __size_of_write_byte 0038                    Update_Matrix@data 0012  
                   __size_of_FillBuf 0092                     __size_of_GetTime 001A  
                       ?_DS3231_init 0001                           _EECON1bits 000FA6  
                           __Hrparam 0000                      setDate@monthSet 001D  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                         ?_pixel_off 000F                 __end_of_putchar_down 14EA  
                 DS3231_Read@address 0012                          ??_Port_Init 000F  
                  Send_Byte_7221@dat 000F                       key_press@count 005E  
               __end_of_DS3231_Write 1F50    __size_of_I2C_Master_RepeatedStart 0008  
                   __size_of___lbdiv 0034                     __size_of___lbmod 0026  
          ?_I2C_Master_RepeatedStart 0001                 __end_of_RTOS_SetTask 15E6  
                   __size_of___lldiv 0076                     __size_of___llmod 0062  
                   __size_of___lwdiv 004A                     __size_of___lwmod 003E  
                   __size_of__doprnt 01DE                __size_of_set_font_set 00D0  
            __size_of_decimal_to_bcd 0026                     __size_of_getDate 005C  
                   __size_of_getTime 004C                  __end_of_scroll_left 1950  
                readTemp_Single@temp 00AC                         ??_pic_to_led 0015  
                      _Update_Matrix 1B84                      _I2C_Master_Read 1ED6  
                    _I2C_Master_Wait 201E                      _I2C_Master_Stop 2062  
                    ___lwdiv@divisor 0011                     __size_of_setDate 003A  
                    ___lwdiv@counter 0013                     __size_of_setTime 002E  
                           __ptext10 207A                             __ptext11 1CD4  
                           __ptext20 047E                             __ptext12 1EFA  
                           __ptext21 0D40                             __ptext13 1F86  
                           __ptext30 1DD6                             __ptext22 026C  
                           __ptext14 1FD8                             __ptext31 1F34  
                           __ptext23 2080                             __ptext15 105A  
                           __ptext40 1832                             __ptext32 0C12  
                           __ptext24 0968                             __ptext16 0632  
                           __ptext41 167C                             __ptext33 1BFA  
                           __ptext25 1A86                             __ptext17 114A  
                           __ptext50 1B84                             __ptext42 1B48  
                           __ptext34 1E22                             __ptext26 1238  
                           __ptext18 1D86                             __ptext51 1E8E  
                           __ptext43 0ADE                             __ptext35 1C32  
                           __ptext27 0F5E                             __ptext19 0E5C  
                           __ptext60 1574                             __ptext52 17C8  
                           __ptext44 1E6A                             __ptext36 1F50  
                           __ptext28 1D04                             __ptext61 14EA  
                           __ptext53 1EB2                             __ptext45 1ACA  
                           __ptext37 1E46                             __ptext29 1BC0  
                           __ptext70 1ED6                             __ptext62 1894  
                           __ptext54 1DAE                             __ptext46 175E  
                           __ptext38 0012                             __ptext71 201E  
                           __ptext63 15FA                             __ptext55 1FEA  
                           __ptext47 18F4                             __ptext39 204A  
                           __ptext64 1F9C                             __ptext56 1B0A  
                           __ptext48 13C2                             __ptext73 1FFC  
                           __ptext65 1D32                             __ptext57 19F4  
                           __ptext49 1456                             __ptext74 203C  
                           __ptext66 2056                             __ptext58 1DFC  
                           __ptext75 1FB2                             __ptext67 2062  
                           __ptext59 1CA0                             __ptext76 1310  
                           __ptext68 206A                             __ptext77 0000  
                           __ptext69 2072               __end_of_Send_Byte_7221 1EB2  
                         ?_write_eep 000F                           ?_write_bit 0001  
                __end_of_time_set_dt 0E2A                  __end_of_time_set_dy 0612  
                __end_of_time_set_hr 0A98                  __end_of_time_set_mt 0468  
                __end_of_time_set_yr 1050                       Update_Matrix@i 0014  
                     Update_Matrix@j 0013                        __size_of_main 0052  
                           _read_bit 1F50                             _read_eep 1FC6  
                  putchar_b_buf@mask 001C                       putchar_b_buf@i 001F  
                     putchar_b_buf@j 001E                       putchar_b_buf@x 001D  
            RTOS_DeleteTask@taskFunc 000F                            pixel_on@x 0012  
                          pixel_on@y 000F                        ?_clear_matrix 0001  
                           _set_font 1ACA             __size_of_RTOS_DeleteTask 008A  
                           _pixel_on 1EB2                         _set_font_set 0E5C  
                 __end_of_pic_to_led 1832                             _time_led 1238  
               putchar_down_s@symbol 0017                       putchar_down@pF 001C  
                           _ow_reset 1B48                __size_of_time_set_min 00E4  
                           int$flags 0071                             _text_buf 0178  
 __end_of_INTERRUPT_InterruptManager 175E           _INTERRUPT_InterruptManager 0008  
                    i2RTOS_SetTask@i 0009                       ?_Update_Matrix 0011  
                          putch@data 000F             __end_of_I2C_Master_Start 2072  
           __end_of_I2C_Master_Write 2062                           _INTCONbits 000FF2  
                  ??_readTemp_Single 003F                          ??_home_temp 0027  
                       scroll_left@i 0019                         scroll_left@j 0016  
                       scroll_left@k 0017                      ?_Send_Byte_7221 0001  
                        ??_key_press 000F                          ??_init_uart 000F  
                        ??_read_byte 000F                   readTemp_Single@buf 003C  
                           intlevel2 0000                   readTemp_Single@tmp 00AA  
                   ___lwmod@dividend 0016                     ___lldiv@dividend 000F  
                       _time_set_min 114A                       ??_clear_matrix 000F  
             __size_of_bmp085ReadInt 0048                          ??_pixel_off 0010  
                           printf@ap 0037                             printf@pb 0038  
                   ??_bcd_to_decimal 000F                          _scroll_left 18F4  
            __end_of_I2C_Master_Read 1EFA              __end_of_I2C_Master_Wait 202E  
            __end_of_I2C_Master_Stop 206A                   putchar_down@symbol 001B  
                       ??_write_byte 0010                          _temperature 0069  
                        _time_set_dt 0D40                     ___lldiv@quotient 0017  
                        _time_set_dy 047E                          _time_set_hr 0968  
                  I2C_Master_Write@d 0010                          _time_set_mt 026C  
                    ___lwmod@divisor 0018                          _time_set_yr 0F5E  
                    ___lwmod@counter 001A              __size_of_putchar_down_s 0094  
                        ??_write_eep 0010                          ??_write_bit 000F  
             __size_of_putchar_b_buf 006A                 bmp085ReadInt@address 0016  
                 __end_of_write_byte 1C32                __size_of_putchar_down 0094  
              __size_of_DS3231_Write 001C                 __size_of_DS3231_Read 002C  
              __size_of_RTOS_SetTask 0072                 __size_of_DS3231_init 0012  
