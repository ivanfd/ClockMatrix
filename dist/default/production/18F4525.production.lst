

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Thu Jul 20 12:33:13 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18F4525
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   101                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111                           	psect	pa_nodes0,global,class=CODE,delta=1
   112  0000                     
   113                           ; Version 1.41
   114                           ; Generated 25/01/2017 GMT
   115                           ; 
   116                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   117                           ; All rights reserved.
   118                           ; 
   119                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   120                           ; 
   121                           ; Redistribution and use in source and binary forms, with or without modification, are
   122                           ; permitted provided that the following conditions are met:
   123                           ; 
   124                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   125                           ;        conditions and the following disclaimer.
   126                           ; 
   127                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   128                           ;        of conditions and the following disclaimer in the documentation and/or other
   129                           ;        materials provided with the distribution.
   130                           ; 
   131                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   132                           ;        software without specific prior written permission.
   133                           ; 
   134                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   135                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   136                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   137                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   138                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   139                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   140                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   141                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   142                           ; 
   143                           ; 
   144                           ; Code-generator required, PIC18F4525 Definitions
   145                           ; 
   146                           ; SFR Addresses
   147  0000                     tosu	equ	0xFFF
   148                           tosh	equ	0xFFE
   149                           tosl	equ	0xFFD
   150                           pclath	equ	0xFFA
   151                           tblptru	equ	0xFF8
   152                           tblptrh	equ	0xFF7
   153                           tblptrl	equ	0xFF6
   154                           tablat	equ	0xFF5
   155                           prodh	equ	0xFF4
   156                           prodl	equ	0xFF3
   157                           intcon	equ	0xFF2
   158                           intcon2	equ	0xFF1
   159                           wreg	equ	0xFE8
   160                           indf1	equ	0xFE7
   161                           plusw1	equ	0xFE3
   162                           fsr1h	equ	0xFE2
   163                           fsr1l	equ	0xFE1
   164                           indf2	equ	0xFDF
   165                           postinc2	equ	0xFDE
   166                           postdec2	equ	0xFDD
   167                           plusw2	equ	0xFDB
   168                           fsr2h	equ	0xFDA
   169                           fsr2l	equ	0xFD9
   170                           status	equ	0xFD8
   171                           
   172                           	psect	eeprom_data
   173  F00000  03 00 00 00 00 00 00 00 	db	3,0,0,0,0,0,0,0	;# 
   174  0000                     tosu	equ	0xFFF
   175                           tosh	equ	0xFFE
   176                           tosl	equ	0xFFD
   177                           pclath	equ	0xFFA
   178                           tblptru	equ	0xFF8
   179                           tblptrh	equ	0xFF7
   180                           tblptrl	equ	0xFF6
   181                           tablat	equ	0xFF5
   182                           prodh	equ	0xFF4
   183                           prodl	equ	0xFF3
   184                           intcon	equ	0xFF2
   185                           intcon2	equ	0xFF1
   186                           wreg	equ	0xFE8
   187                           indf1	equ	0xFE7
   188                           plusw1	equ	0xFE3
   189                           fsr1h	equ	0xFE2
   190                           fsr1l	equ	0xFE1
   191                           indf2	equ	0xFDF
   192                           postinc2	equ	0xFDE
   193                           postdec2	equ	0xFDD
   194                           plusw2	equ	0xFDB
   195                           fsr2h	equ	0xFDA
   196                           fsr2l	equ	0xFD9
   197                           status	equ	0xFD8
   198                           
   199                           	psect	idataCOMRAM
   200  002A5A                     __pidataCOMRAM:
   201                           	opt stack 0
   202                           
   203                           ;initializer for _pFont
   204  002A5A  7E                 	db	low _dFont1
   205  002A5B  BF                 	db	high _dFont1
   206                           
   207                           ;initializer for _events
   208  002A5C  05                 	db	5
   209                           tosu	equ	0xFFF
   210                           tosh	equ	0xFFE
   211                           tosl	equ	0xFFD
   212                           pclath	equ	0xFFA
   213                           tblptru	equ	0xFF8
   214                           tblptrh	equ	0xFF7
   215                           tblptrl	equ	0xFF6
   216                           tablat	equ	0xFF5
   217                           prodh	equ	0xFF4
   218                           prodl	equ	0xFF3
   219                           intcon	equ	0xFF2
   220                           intcon2	equ	0xFF1
   221                           wreg	equ	0xFE8
   222                           indf1	equ	0xFE7
   223                           plusw1	equ	0xFE3
   224                           fsr1h	equ	0xFE2
   225                           fsr1l	equ	0xFE1
   226                           indf2	equ	0xFDF
   227                           postinc2	equ	0xFDE
   228                           postdec2	equ	0xFDD
   229                           plusw2	equ	0xFDB
   230                           fsr2h	equ	0xFDA
   231                           fsr2l	equ	0xFD9
   232                           status	equ	0xFD8
   233                           
   234                           	psect	mediumconst
   235  00B982                     __pmediumconst:
   236                           	opt stack 0
   237  00B982  00                 	db	0
   238  00B983                     _pic7x8:
   239                           	opt stack 0
   240  00B983  00                 	db	0
   241  00B984  00                 	db	0
   242  00B985  00                 	db	0
   243  00B986  00                 	db	0
   244  00B987  00                 	db	0
   245  00B988  00                 	db	0
   246  00B989  00                 	db	0
   247  00B98A  08                 	db	8
   248  00B98B  7C                 	db	124
   249  00B98C  4E                 	db	78
   250  00B98D  4F                 	db	79
   251  00B98E  4E                 	db	78
   252  00B98F  7C                 	db	124
   253  00B990  08                 	db	8
   254  00B991  04                 	db	4
   255  00B992  26                 	db	38
   256  00B993  47                 	db	71
   257  00B994  3F                 	db	63
   258  00B995  07                 	db	7
   259  00B996  06                 	db	6
   260  00B997  04                 	db	4
   261  00B998  20                 	db	32
   262  00B999  3E                 	db	62
   263  00B99A  7F                 	db	127
   264  00B99B  7F                 	db	127
   265  00B99C  3F                 	db	63
   266  00B99D  3E                 	db	62
   267  00B99E  20                 	db	32
   268  00B99F  7E                 	db	126
   269  00B9A0  12                 	db	18
   270  00B9A1  1E                 	db	30
   271  00B9A2  00                 	db	0
   272  00B9A3  70                 	db	112
   273  00B9A4  10                 	db	16
   274  00B9A5  00                 	db	0
   275  00B9A6                     __end_of_pic7x8:
   276                           	opt stack 0
   277  00B9A6                     _fract:
   278                           	opt stack 0
   279  00B9A6  00                 	db	0
   280  00B9A7  01                 	db	1
   281  00B9A8  01                 	db	1
   282  00B9A9  02                 	db	2
   283  00B9AA  02                 	db	2
   284  00B9AB  03                 	db	3
   285  00B9AC  04                 	db	4
   286  00B9AD  04                 	db	4
   287  00B9AE  05                 	db	5
   288  00B9AF  06                 	db	6
   289  00B9B0  06                 	db	6
   290  00B9B1  07                 	db	7
   291  00B9B2  07                 	db	7
   292  00B9B3  08                 	db	8
   293  00B9B4  09                 	db	9
   294  00B9B5  09                 	db	9
   295  00B9B6                     __end_of_fract:
   296                           	opt stack 0
   297  00B9B6                     _Font:
   298                           	opt stack 0
   299  00B9B6  00                 	db	0
   300  00B9B7  00                 	db	0
   301  00B9B8  00                 	db	0
   302  00B9B9  00                 	db	0
   303  00B9BA  00                 	db	0
   304  00B9BB  45                 	db	69
   305  00B9BC  51                 	db	81
   306  00B9BD  45                 	db	69
   307  00B9BE  3E                 	db	62
   308  00B9BF  00                 	db	0
   309  00B9C0  6B                 	db	107
   310  00B9C1  6F                 	db	111
   311  00B9C2  6B                 	db	107
   312  00B9C3  3E                 	db	62
   313  00B9C4  00                 	db	0
   314  00B9C5  3E                 	db	62
   315  00B9C6  7C                 	db	124
   316  00B9C7  3E                 	db	62
   317  00B9C8  1C                 	db	28
   318  00B9C9  00                 	db	0
   319  00B9CA  3C                 	db	60
   320  00B9CB  7E                 	db	126
   321  00B9CC  3C                 	db	60
   322  00B9CD  18                 	db	24
   323  00B9CE  00                 	db	0
   324  00B9CF  36                 	db	54
   325  00B9D0  7F                 	db	127
   326  00B9D1  36                 	db	54
   327  00B9D2  30                 	db	48
   328  00B9D3  00                 	db	0
   329  00B9D4  00                 	db	0
   330  00B9D5  00                 	db	0
   331  00B9D6  00                 	db	0
   332  00B9D7  00                 	db	0
   333  00B9D8  00                 	db	0
   334  00B9D9  00                 	db	0
   335  00B9DA  00                 	db	0
   336  00B9DB  00                 	db	0
   337  00B9DC  00                 	db	0
   338  00B9DD  00                 	db	0
   339  00B9DE  00                 	db	0
   340  00B9DF  00                 	db	0
   341  00B9E0  00                 	db	0
   342  00B9E1  00                 	db	0
   343  00B9E2  00                 	db	0
   344  00B9E3  00                 	db	0
   345  00B9E4  00                 	db	0
   346  00B9E5  00                 	db	0
   347  00B9E6  00                 	db	0
   348  00B9E7  00                 	db	0
   349  00B9E8  00                 	db	0
   350  00B9E9  00                 	db	0
   351  00B9EA  00                 	db	0
   352  00B9EB  00                 	db	0
   353  00B9EC  00                 	db	0
   354  00B9ED  00                 	db	0
   355  00B9EE  00                 	db	0
   356  00B9EF  00                 	db	0
   357  00B9F0  00                 	db	0
   358  00B9F1  00                 	db	0
   359  00B9F2  00                 	db	0
   360  00B9F3  00                 	db	0
   361  00B9F4  00                 	db	0
   362  00B9F5  00                 	db	0
   363  00B9F6  00                 	db	0
   364  00B9F7  00                 	db	0
   365  00B9F8  00                 	db	0
   366  00B9F9  00                 	db	0
   367  00B9FA  00                 	db	0
   368  00B9FB  00                 	db	0
   369  00B9FC  00                 	db	0
   370  00B9FD  00                 	db	0
   371  00B9FE  00                 	db	0
   372  00B9FF  00                 	db	0
   373  00BA00  00                 	db	0
   374  00BA01  00                 	db	0
   375  00BA02  00                 	db	0
   376  00BA03  00                 	db	0
   377  00BA04  00                 	db	0
   378  00BA05  00                 	db	0
   379  00BA06  00                 	db	0
   380  00BA07  00                 	db	0
   381  00BA08  00                 	db	0
   382  00BA09  00                 	db	0
   383  00BA0A  00                 	db	0
   384  00BA0B  00                 	db	0
   385  00BA0C  00                 	db	0
   386  00BA0D  00                 	db	0
   387  00BA0E  00                 	db	0
   388  00BA0F  00                 	db	0
   389  00BA10  00                 	db	0
   390  00BA11  00                 	db	0
   391  00BA12  00                 	db	0
   392  00BA13  00                 	db	0
   393  00BA14  00                 	db	0
   394  00BA15  00                 	db	0
   395  00BA16  00                 	db	0
   396  00BA17  00                 	db	0
   397  00BA18  00                 	db	0
   398  00BA19  00                 	db	0
   399  00BA1A  00                 	db	0
   400  00BA1B  00                 	db	0
   401  00BA1C  00                 	db	0
   402  00BA1D  00                 	db	0
   403  00BA1E  00                 	db	0
   404  00BA1F  00                 	db	0
   405  00BA20  00                 	db	0
   406  00BA21  00                 	db	0
   407  00BA22  00                 	db	0
   408  00BA23  00                 	db	0
   409  00BA24  00                 	db	0
   410  00BA25  00                 	db	0
   411  00BA26  00                 	db	0
   412  00BA27  00                 	db	0
   413  00BA28  00                 	db	0
   414  00BA29  00                 	db	0
   415  00BA2A  00                 	db	0
   416  00BA2B  00                 	db	0
   417  00BA2C  00                 	db	0
   418  00BA2D  00                 	db	0
   419  00BA2E  7C                 	db	124
   420  00BA2F  4E                 	db	78
   421  00BA30  4E                 	db	78
   422  00BA31  7C                 	db	124
   423  00BA32  08                 	db	8
   424  00BA33  20                 	db	32
   425  00BA34  34                 	db	52
   426  00BA35  7E                 	db	126
   427  00BA36  34                 	db	52
   428  00BA37  20                 	db	32
   429  00BA38  00                 	db	0
   430  00BA39  00                 	db	0
   431  00BA3A  36                 	db	54
   432  00BA3B  36                 	db	54
   433  00BA3C  00                 	db	0
   434  00BA3D  00                 	db	0
   435  00BA3E  00                 	db	0
   436  00BA3F  00                 	db	0
   437  00BA40  00                 	db	0
   438  00BA41  00                 	db	0
   439  00BA42  00                 	db	0
   440  00BA43  00                 	db	0
   441  00BA44  00                 	db	0
   442  00BA45  00                 	db	0
   443  00BA46  00                 	db	0
   444  00BA47  00                 	db	0
   445  00BA48  00                 	db	0
   446  00BA49  00                 	db	0
   447  00BA4A  00                 	db	0
   448  00BA4B  00                 	db	0
   449  00BA4C  00                 	db	0
   450  00BA4D  00                 	db	0
   451  00BA4E  00                 	db	0
   452  00BA4F  00                 	db	0
   453  00BA50  00                 	db	0
   454  00BA51  00                 	db	0
   455  00BA52  00                 	db	0
   456  00BA53  00                 	db	0
   457  00BA54  00                 	db	0
   458  00BA55  00                 	db	0
   459  00BA56  00                 	db	0
   460  00BA57  00                 	db	0
   461  00BA58  00                 	db	0
   462  00BA59  00                 	db	0
   463  00BA5A  00                 	db	0
   464  00BA5B  00                 	db	0
   465  00BA5C  00                 	db	0
   466  00BA5D  5F                 	db	95
   467  00BA5E  00                 	db	0
   468  00BA5F  00                 	db	0
   469  00BA60  00                 	db	0
   470  00BA61  07                 	db	7
   471  00BA62  00                 	db	0
   472  00BA63  07                 	db	7
   473  00BA64  00                 	db	0
   474  00BA65  14                 	db	20
   475  00BA66  7F                 	db	127
   476  00BA67  14                 	db	20
   477  00BA68  7F                 	db	127
   478  00BA69  14                 	db	20
   479  00BA6A  24                 	db	36
   480  00BA6B  2A                 	db	42
   481  00BA6C  7F                 	db	127
   482  00BA6D  2A                 	db	42
   483  00BA6E  12                 	db	18
   484  00BA6F  23                 	db	35
   485  00BA70  13                 	db	19
   486  00BA71  08                 	db	8
   487  00BA72  64                 	db	100
   488  00BA73  62                 	db	98
   489  00BA74  36                 	db	54
   490  00BA75  49                 	db	73
   491  00BA76  56                 	db	86
   492  00BA77  20                 	db	32
   493  00BA78  50                 	db	80
   494  00BA79  00                 	db	0
   495  00BA7A  08                 	db	8
   496  00BA7B  07                 	db	7
   497  00BA7C  03                 	db	3
   498  00BA7D  00                 	db	0
   499  00BA7E  00                 	db	0
   500  00BA7F  1C                 	db	28
   501  00BA80  22                 	db	34
   502  00BA81  41                 	db	65
   503  00BA82  00                 	db	0
   504  00BA83  00                 	db	0
   505  00BA84  41                 	db	65
   506  00BA85  22                 	db	34
   507  00BA86  1C                 	db	28
   508  00BA87  00                 	db	0
   509  00BA88  2A                 	db	42
   510  00BA89  1C                 	db	28
   511  00BA8A  7F                 	db	127
   512  00BA8B  1C                 	db	28
   513  00BA8C  2A                 	db	42
   514  00BA8D  08                 	db	8
   515  00BA8E  08                 	db	8
   516  00BA8F  3E                 	db	62
   517  00BA90  08                 	db	8
   518  00BA91  08                 	db	8
   519  00BA92  00                 	db	0
   520  00BA93  80                 	db	128
   521  00BA94  70                 	db	112
   522  00BA95  30                 	db	48
   523  00BA96  00                 	db	0
   524  00BA97  08                 	db	8
   525  00BA98  08                 	db	8
   526  00BA99  08                 	db	8
   527  00BA9A  08                 	db	8
   528  00BA9B  08                 	db	8
   529  00BA9C  60                 	db	96
   530  00BA9D  60                 	db	96
   531  00BA9E  00                 	db	0
   532  00BA9F  00                 	db	0
   533  00BAA0  00                 	db	0
   534  00BAA1  20                 	db	32
   535  00BAA2  10                 	db	16
   536  00BAA3  08                 	db	8
   537  00BAA4  04                 	db	4
   538  00BAA5  02                 	db	2
   539  00BAA6  3E                 	db	62
   540  00BAA7  51                 	db	81
   541  00BAA8  49                 	db	73
   542  00BAA9  45                 	db	69
   543  00BAAA  3E                 	db	62
   544  00BAAB  00                 	db	0
   545  00BAAC  42                 	db	66
   546  00BAAD  7F                 	db	127
   547  00BAAE  40                 	db	64
   548  00BAAF  00                 	db	0
   549  00BAB0  42                 	db	66
   550  00BAB1  61                 	db	97
   551  00BAB2  51                 	db	81
   552  00BAB3  49                 	db	73
   553  00BAB4  46                 	db	70
   554  00BAB5  21                 	db	33
   555  00BAB6  41                 	db	65
   556  00BAB7  45                 	db	69
   557  00BAB8  4B                 	db	75
   558  00BAB9  31                 	db	49
   559  00BABA  18                 	db	24
   560  00BABB  14                 	db	20
   561  00BABC  12                 	db	18
   562  00BABD  7F                 	db	127
   563  00BABE  10                 	db	16
   564  00BABF  27                 	db	39
   565  00BAC0  45                 	db	69
   566  00BAC1  45                 	db	69
   567  00BAC2  45                 	db	69
   568  00BAC3  39                 	db	57
   569  00BAC4  3C                 	db	60
   570  00BAC5  4A                 	db	74
   571  00BAC6  49                 	db	73
   572  00BAC7  49                 	db	73
   573  00BAC8  30                 	db	48
   574  00BAC9  01                 	db	1
   575  00BACA  71                 	db	113
   576  00BACB  09                 	db	9
   577  00BACC  05                 	db	5
   578  00BACD  03                 	db	3
   579  00BACE  36                 	db	54
   580  00BACF  49                 	db	73
   581  00BAD0  49                 	db	73
   582  00BAD1  49                 	db	73
   583  00BAD2  36                 	db	54
   584  00BAD3  06                 	db	6
   585  00BAD4  49                 	db	73
   586  00BAD5  49                 	db	73
   587  00BAD6  29                 	db	41
   588  00BAD7  1E                 	db	30
   589  00BAD8  00                 	db	0
   590  00BAD9  00                 	db	0
   591  00BADA  36                 	db	54
   592  00BADB  36                 	db	54
   593  00BADC  00                 	db	0
   594  00BADD  00                 	db	0
   595  00BADE  40                 	db	64
   596  00BADF  34                 	db	52
   597  00BAE0  00                 	db	0
   598  00BAE1  00                 	db	0
   599  00BAE2  00                 	db	0
   600  00BAE3  08                 	db	8
   601  00BAE4  14                 	db	20
   602  00BAE5  22                 	db	34
   603  00BAE6  41                 	db	65
   604  00BAE7  14                 	db	20
   605  00BAE8  14                 	db	20
   606  00BAE9  14                 	db	20
   607  00BAEA  14                 	db	20
   608  00BAEB  14                 	db	20
   609  00BAEC  00                 	db	0
   610  00BAED  41                 	db	65
   611  00BAEE  22                 	db	34
   612  00BAEF  14                 	db	20
   613  00BAF0  08                 	db	8
   614  00BAF1  02                 	db	2
   615  00BAF2  01                 	db	1
   616  00BAF3  59                 	db	89
   617  00BAF4  09                 	db	9
   618  00BAF5  06                 	db	6
   619  00BAF6  3E                 	db	62
   620  00BAF7  41                 	db	65
   621  00BAF8  5D                 	db	93
   622  00BAF9  59                 	db	89
   623  00BAFA  4E                 	db	78
   624  00BAFB  7C                 	db	124
   625  00BAFC  12                 	db	18
   626  00BAFD  11                 	db	17
   627  00BAFE  12                 	db	18
   628  00BAFF  7C                 	db	124
   629  00BB00  7F                 	db	127
   630  00BB01  49                 	db	73
   631  00BB02  49                 	db	73
   632  00BB03  49                 	db	73
   633  00BB04  36                 	db	54
   634  00BB05  3E                 	db	62
   635  00BB06  41                 	db	65
   636  00BB07  41                 	db	65
   637  00BB08  41                 	db	65
   638  00BB09  22                 	db	34
   639  00BB0A  7F                 	db	127
   640  00BB0B  41                 	db	65
   641  00BB0C  41                 	db	65
   642  00BB0D  41                 	db	65
   643  00BB0E  3E                 	db	62
   644  00BB0F  7F                 	db	127
   645  00BB10  49                 	db	73
   646  00BB11  49                 	db	73
   647  00BB12  49                 	db	73
   648  00BB13  41                 	db	65
   649  00BB14  7F                 	db	127
   650  00BB15  09                 	db	9
   651  00BB16  09                 	db	9
   652  00BB17  09                 	db	9
   653  00BB18  01                 	db	1
   654  00BB19  3E                 	db	62
   655  00BB1A  41                 	db	65
   656  00BB1B  41                 	db	65
   657  00BB1C  51                 	db	81
   658  00BB1D  72                 	db	114
   659  00BB1E  7F                 	db	127
   660  00BB1F  08                 	db	8
   661  00BB20  08                 	db	8
   662  00BB21  08                 	db	8
   663  00BB22  7F                 	db	127
   664  00BB23  00                 	db	0
   665  00BB24  41                 	db	65
   666  00BB25  7F                 	db	127
   667  00BB26  41                 	db	65
   668  00BB27  00                 	db	0
   669  00BB28  20                 	db	32
   670  00BB29  40                 	db	64
   671  00BB2A  41                 	db	65
   672  00BB2B  3F                 	db	63
   673  00BB2C  01                 	db	1
   674  00BB2D  7F                 	db	127
   675  00BB2E  08                 	db	8
   676  00BB2F  14                 	db	20
   677  00BB30  22                 	db	34
   678  00BB31  41                 	db	65
   679  00BB32  7F                 	db	127
   680  00BB33  40                 	db	64
   681  00BB34  40                 	db	64
   682  00BB35  40                 	db	64
   683  00BB36  40                 	db	64
   684  00BB37  7F                 	db	127
   685  00BB38  02                 	db	2
   686  00BB39  04                 	db	4
   687  00BB3A  02                 	db	2
   688  00BB3B  7F                 	db	127
   689  00BB3C  7F                 	db	127
   690  00BB3D  04                 	db	4
   691  00BB3E  08                 	db	8
   692  00BB3F  10                 	db	16
   693  00BB40  7F                 	db	127
   694  00BB41  3E                 	db	62
   695  00BB42  41                 	db	65
   696  00BB43  41                 	db	65
   697  00BB44  41                 	db	65
   698  00BB45  3E                 	db	62
   699  00BB46  7F                 	db	127
   700  00BB47  09                 	db	9
   701  00BB48  09                 	db	9
   702  00BB49  09                 	db	9
   703  00BB4A  06                 	db	6
   704  00BB4B  3E                 	db	62
   705  00BB4C  41                 	db	65
   706  00BB4D  51                 	db	81
   707  00BB4E  21                 	db	33
   708  00BB4F  5E                 	db	94
   709  00BB50  7F                 	db	127
   710  00BB51  09                 	db	9
   711  00BB52  19                 	db	25
   712  00BB53  29                 	db	41
   713  00BB54  46                 	db	70
   714  00BB55  26                 	db	38
   715  00BB56  49                 	db	73
   716  00BB57  49                 	db	73
   717  00BB58  49                 	db	73
   718  00BB59  32                 	db	50
   719  00BB5A  01                 	db	1
   720  00BB5B  01                 	db	1
   721  00BB5C  7F                 	db	127
   722  00BB5D  01                 	db	1
   723  00BB5E  01                 	db	1
   724  00BB5F  3F                 	db	63
   725  00BB60  40                 	db	64
   726  00BB61  40                 	db	64
   727  00BB62  40                 	db	64
   728  00BB63  3F                 	db	63
   729  00BB64  1F                 	db	31
   730  00BB65  20                 	db	32
   731  00BB66  40                 	db	64
   732  00BB67  20                 	db	32
   733  00BB68  1F                 	db	31
   734  00BB69  3F                 	db	63
   735  00BB6A  40                 	db	64
   736  00BB6B  38                 	db	56
   737  00BB6C  40                 	db	64
   738  00BB6D  3F                 	db	63
   739  00BB6E  63                 	db	99
   740  00BB6F  14                 	db	20
   741  00BB70  08                 	db	8
   742  00BB71  14                 	db	20
   743  00BB72  63                 	db	99
   744  00BB73  03                 	db	3
   745  00BB74  04                 	db	4
   746  00BB75  78                 	db	120
   747  00BB76  04                 	db	4
   748  00BB77  03                 	db	3
   749  00BB78  61                 	db	97
   750  00BB79  51                 	db	81
   751  00BB7A  49                 	db	73
   752  00BB7B  45                 	db	69
   753  00BB7C  43                 	db	67
   754  00BB7D  00                 	db	0
   755  00BB7E  7F                 	db	127
   756  00BB7F  41                 	db	65
   757  00BB80  41                 	db	65
   758  00BB81  00                 	db	0
   759  00BB82  02                 	db	2
   760  00BB83  04                 	db	4
   761  00BB84  08                 	db	8
   762  00BB85  10                 	db	16
   763  00BB86  20                 	db	32
   764  00BB87  00                 	db	0
   765  00BB88  41                 	db	65
   766  00BB89  41                 	db	65
   767  00BB8A  7F                 	db	127
   768  00BB8B  00                 	db	0
   769  00BB8C  04                 	db	4
   770  00BB8D  02                 	db	2
   771  00BB8E  01                 	db	1
   772  00BB8F  02                 	db	2
   773  00BB90  04                 	db	4
   774  00BB91  40                 	db	64
   775  00BB92  40                 	db	64
   776  00BB93  40                 	db	64
   777  00BB94  40                 	db	64
   778  00BB95  40                 	db	64
   779  00BB96  00                 	db	0
   780  00BB97  03                 	db	3
   781  00BB98  07                 	db	7
   782  00BB99  08                 	db	8
   783  00BB9A  00                 	db	0
   784  00BB9B  20                 	db	32
   785  00BB9C  54                 	db	84
   786  00BB9D  54                 	db	84
   787  00BB9E  78                 	db	120
   788  00BB9F  40                 	db	64
   789  00BBA0  7F                 	db	127
   790  00BBA1  28                 	db	40
   791  00BBA2  44                 	db	68
   792  00BBA3  44                 	db	68
   793  00BBA4  38                 	db	56
   794  00BBA5  38                 	db	56
   795  00BBA6  44                 	db	68
   796  00BBA7  44                 	db	68
   797  00BBA8  44                 	db	68
   798  00BBA9  28                 	db	40
   799  00BBAA  38                 	db	56
   800  00BBAB  44                 	db	68
   801  00BBAC  44                 	db	68
   802  00BBAD  28                 	db	40
   803  00BBAE  7F                 	db	127
   804  00BBAF  38                 	db	56
   805  00BBB0  54                 	db	84
   806  00BBB1  54                 	db	84
   807  00BBB2  54                 	db	84
   808  00BBB3  18                 	db	24
   809  00BBB4  08                 	db	8
   810  00BBB5  7E                 	db	126
   811  00BBB6  09                 	db	9
   812  00BBB7  02                 	db	2
   813  00BBB8  00                 	db	0
   814  00BBB9  18                 	db	24
   815  00BBBA  A4                 	db	164
   816  00BBBB  A4                 	db	164
   817  00BBBC  9C                 	db	156
   818  00BBBD  78                 	db	120
   819  00BBBE  7F                 	db	127
   820  00BBBF  08                 	db	8
   821  00BBC0  04                 	db	4
   822  00BBC1  04                 	db	4
   823  00BBC2  78                 	db	120
   824  00BBC3  00                 	db	0
   825  00BBC4  44                 	db	68
   826  00BBC5  7D                 	db	125
   827  00BBC6  40                 	db	64
   828  00BBC7  00                 	db	0
   829  00BBC8  20                 	db	32
   830  00BBC9  40                 	db	64
   831  00BBCA  40                 	db	64
   832  00BBCB  3D                 	db	61
   833  00BBCC  00                 	db	0
   834  00BBCD  7F                 	db	127
   835  00BBCE  10                 	db	16
   836  00BBCF  28                 	db	40
   837  00BBD0  44                 	db	68
   838  00BBD1  00                 	db	0
   839  00BBD2  00                 	db	0
   840  00BBD3  41                 	db	65
   841  00BBD4  7F                 	db	127
   842  00BBD5  40                 	db	64
   843  00BBD6  00                 	db	0
   844  00BBD7  7C                 	db	124
   845  00BBD8  04                 	db	4
   846  00BBD9  78                 	db	120
   847  00BBDA  04                 	db	4
   848  00BBDB  78                 	db	120
   849  00BBDC  7C                 	db	124
   850  00BBDD  08                 	db	8
   851  00BBDE  04                 	db	4
   852  00BBDF  04                 	db	4
   853  00BBE0  78                 	db	120
   854  00BBE1  38                 	db	56
   855  00BBE2  44                 	db	68
   856  00BBE3  44                 	db	68
   857  00BBE4  44                 	db	68
   858  00BBE5  38                 	db	56
   859  00BBE6  FC                 	db	252
   860  00BBE7  18                 	db	24
   861  00BBE8  24                 	db	36
   862  00BBE9  24                 	db	36
   863  00BBEA  18                 	db	24
   864  00BBEB  18                 	db	24
   865  00BBEC  24                 	db	36
   866  00BBED  24                 	db	36
   867  00BBEE  18                 	db	24
   868  00BBEF  FC                 	db	252
   869  00BBF0  7C                 	db	124
   870  00BBF1  04                 	db	4
   871  00BBF2  04                 	db	4
   872  00BBF3  08                 	db	8
   873  00BBF4  00                 	db	0
   874  00BBF5  48                 	db	72
   875  00BBF6  54                 	db	84
   876  00BBF7  54                 	db	84
   877  00BBF8  54                 	db	84
   878  00BBF9  24                 	db	36
   879  00BBFA  00                 	db	0
   880  00BBFB  04                 	db	4
   881  00BBFC  3F                 	db	63
   882  00BBFD  44                 	db	68
   883  00BBFE  20                 	db	32
   884  00BBFF  3C                 	db	60
   885  00BC00  40                 	db	64
   886  00BC01  40                 	db	64
   887  00BC02  20                 	db	32
   888  00BC03  7C                 	db	124
   889  00BC04  1C                 	db	28
   890  00BC05  20                 	db	32
   891  00BC06  40                 	db	64
   892  00BC07  20                 	db	32
   893  00BC08  1C                 	db	28
   894  00BC09  3C                 	db	60
   895  00BC0A  40                 	db	64
   896  00BC0B  30                 	db	48
   897  00BC0C  40                 	db	64
   898  00BC0D  3C                 	db	60
   899  00BC0E  44                 	db	68
   900  00BC0F  28                 	db	40
   901  00BC10  10                 	db	16
   902  00BC11  28                 	db	40
   903  00BC12  44                 	db	68
   904  00BC13  4C                 	db	76
   905  00BC14  90                 	db	144
   906  00BC15  90                 	db	144
   907  00BC16  90                 	db	144
   908  00BC17  7C                 	db	124
   909  00BC18  44                 	db	68
   910  00BC19  64                 	db	100
   911  00BC1A  54                 	db	84
   912  00BC1B  4C                 	db	76
   913  00BC1C  44                 	db	68
   914  00BC1D  00                 	db	0
   915  00BC1E  08                 	db	8
   916  00BC1F  36                 	db	54
   917  00BC20  41                 	db	65
   918  00BC21  00                 	db	0
   919  00BC22  00                 	db	0
   920  00BC23  00                 	db	0
   921  00BC24  77                 	db	119
   922  00BC25  00                 	db	0
   923  00BC26  00                 	db	0
   924  00BC27  00                 	db	0
   925  00BC28  41                 	db	65
   926  00BC29  36                 	db	54
   927  00BC2A  08                 	db	8
   928  00BC2B  00                 	db	0
   929  00BC2C  02                 	db	2
   930  00BC2D  01                 	db	1
   931  00BC2E  02                 	db	2
   932  00BC2F  04                 	db	4
   933  00BC30  02                 	db	2
   934  00BC31  00                 	db	0
   935  00BC32  00                 	db	0
   936  00BC33  00                 	db	0
   937  00BC34  00                 	db	0
   938  00BC35  00                 	db	0
   939  00BC36  00                 	db	0
   940  00BC37  00                 	db	0
   941  00BC38  00                 	db	0
   942  00BC39  00                 	db	0
   943  00BC3A  00                 	db	0
   944  00BC3B  00                 	db	0
   945  00BC3C  00                 	db	0
   946  00BC3D  00                 	db	0
   947  00BC3E  00                 	db	0
   948  00BC3F  00                 	db	0
   949  00BC40  00                 	db	0
   950  00BC41  00                 	db	0
   951  00BC42  00                 	db	0
   952  00BC43  00                 	db	0
   953  00BC44  00                 	db	0
   954  00BC45  00                 	db	0
   955  00BC46  00                 	db	0
   956  00BC47  00                 	db	0
   957  00BC48  00                 	db	0
   958  00BC49  00                 	db	0
   959  00BC4A  00                 	db	0
   960  00BC4B  00                 	db	0
   961  00BC4C  00                 	db	0
   962  00BC4D  00                 	db	0
   963  00BC4E  00                 	db	0
   964  00BC4F  40                 	db	64
   965  00BC50  00                 	db	0
   966  00BC51  40                 	db	64
   967  00BC52  00                 	db	0
   968  00BC53  40                 	db	64
   969  00BC54  00                 	db	0
   970  00BC55  00                 	db	0
   971  00BC56  00                 	db	0
   972  00BC57  00                 	db	0
   973  00BC58  00                 	db	0
   974  00BC59  00                 	db	0
   975  00BC5A  00                 	db	0
   976  00BC5B  00                 	db	0
   977  00BC5C  00                 	db	0
   978  00BC5D  00                 	db	0
   979  00BC5E  3E                 	db	62
   980  00BC5F  55                 	db	85
   981  00BC60  55                 	db	85
   982  00BC61  41                 	db	65
   983  00BC62  22                 	db	34
   984  00BC63  00                 	db	0
   985  00BC64  00                 	db	0
   986  00BC65  00                 	db	0
   987  00BC66  00                 	db	0
   988  00BC67  00                 	db	0
   989  00BC68  00                 	db	0
   990  00BC69  00                 	db	0
   991  00BC6A  00                 	db	0
   992  00BC6B  00                 	db	0
   993  00BC6C  00                 	db	0
   994  00BC6D  00                 	db	0
   995  00BC6E  00                 	db	0
   996  00BC6F  00                 	db	0
   997  00BC70  00                 	db	0
   998  00BC71  00                 	db	0
   999  00BC72  00                 	db	0
  1000  00BC73  00                 	db	0
  1001  00BC74  00                 	db	0
  1002  00BC75  00                 	db	0
  1003  00BC76  00                 	db	0
  1004  00BC77  00                 	db	0
  1005  00BC78  00                 	db	0
  1006  00BC79  00                 	db	0
  1007  00BC7A  00                 	db	0
  1008  00BC7B  00                 	db	0
  1009  00BC7C  00                 	db	0
  1010  00BC7D  00                 	db	0
  1011  00BC7E  00                 	db	0
  1012  00BC7F  00                 	db	0
  1013  00BC80  00                 	db	0
  1014  00BC81  00                 	db	0
  1015  00BC82  00                 	db	0
  1016  00BC83  00                 	db	0
  1017  00BC84  00                 	db	0
  1018  00BC85  00                 	db	0
  1019  00BC86  00                 	db	0
  1020  00BC87  00                 	db	0
  1021  00BC88  00                 	db	0
  1022  00BC89  00                 	db	0
  1023  00BC8A  00                 	db	0
  1024  00BC8B  00                 	db	0
  1025  00BC8C  00                 	db	0
  1026  00BC8D  00                 	db	0
  1027  00BC8E  00                 	db	0
  1028  00BC8F  00                 	db	0
  1029  00BC90  00                 	db	0
  1030  00BC91  00                 	db	0
  1031  00BC92  00                 	db	0
  1032  00BC93  00                 	db	0
  1033  00BC94  00                 	db	0
  1034  00BC95  00                 	db	0
  1035  00BC96  00                 	db	0
  1036  00BC97  00                 	db	0
  1037  00BC98  00                 	db	0
  1038  00BC99  00                 	db	0
  1039  00BC9A  00                 	db	0
  1040  00BC9B  00                 	db	0
  1041  00BC9C  00                 	db	0
  1042  00BC9D  00                 	db	0
  1043  00BC9E  00                 	db	0
  1044  00BC9F  00                 	db	0
  1045  00BCA0  0C                 	db	12
  1046  00BCA1  1E                 	db	30
  1047  00BCA2  1E                 	db	30
  1048  00BCA3  0C                 	db	12
  1049  00BCA4  00                 	db	0
  1050  00BCA5  00                 	db	0
  1051  00BCA6  00                 	db	0
  1052  00BCA7  00                 	db	0
  1053  00BCA8  00                 	db	0
  1054  00BCA9  00                 	db	0
  1055  00BCAA  00                 	db	0
  1056  00BCAB  00                 	db	0
  1057  00BCAC  00                 	db	0
  1058  00BCAD  00                 	db	0
  1059  00BCAE  00                 	db	0
  1060  00BCAF  00                 	db	0
  1061  00BCB0  00                 	db	0
  1062  00BCB1  00                 	db	0
  1063  00BCB2  00                 	db	0
  1064  00BCB3  00                 	db	0
  1065  00BCB4  00                 	db	0
  1066  00BCB5  00                 	db	0
  1067  00BCB6  00                 	db	0
  1068  00BCB7  00                 	db	0
  1069  00BCB8  00                 	db	0
  1070  00BCB9  00                 	db	0
  1071  00BCBA  00                 	db	0
  1072  00BCBB  00                 	db	0
  1073  00BCBC  00                 	db	0
  1074  00BCBD  00                 	db	0
  1075  00BCBE  00                 	db	0
  1076  00BCBF  00                 	db	0
  1077  00BCC0  00                 	db	0
  1078  00BCC1  00                 	db	0
  1079  00BCC2  00                 	db	0
  1080  00BCC3  00                 	db	0
  1081  00BCC4  00                 	db	0
  1082  00BCC5  00                 	db	0
  1083  00BCC6  00                 	db	0
  1084  00BCC7  00                 	db	0
  1085  00BCC8  00                 	db	0
  1086  00BCC9  00                 	db	0
  1087  00BCCA  00                 	db	0
  1088  00BCCB  00                 	db	0
  1089  00BCCC  00                 	db	0
  1090  00BCCD  00                 	db	0
  1091  00BCCE  00                 	db	0
  1092  00BCCF  00                 	db	0
  1093  00BCD0  00                 	db	0
  1094  00BCD1  00                 	db	0
  1095  00BCD2  00                 	db	0
  1096  00BCD3  00                 	db	0
  1097  00BCD4  00                 	db	0
  1098  00BCD5  00                 	db	0
  1099  00BCD6  00                 	db	0
  1100  00BCD7  00                 	db	0
  1101  00BCD8  00                 	db	0
  1102  00BCD9  00                 	db	0
  1103  00BCDA  00                 	db	0
  1104  00BCDB  00                 	db	0
  1105  00BCDC  00                 	db	0
  1106  00BCDD  00                 	db	0
  1107  00BCDE  00                 	db	0
  1108  00BCDF  00                 	db	0
  1109  00BCE0  00                 	db	0
  1110  00BCE1  00                 	db	0
  1111  00BCE2  00                 	db	0
  1112  00BCE3  00                 	db	0
  1113  00BCE4  00                 	db	0
  1114  00BCE5  00                 	db	0
  1115  00BCE6  00                 	db	0
  1116  00BCE7  00                 	db	0
  1117  00BCE8  00                 	db	0
  1118  00BCE9  00                 	db	0
  1119  00BCEA  00                 	db	0
  1120  00BCEB  00                 	db	0
  1121  00BCEC  00                 	db	0
  1122  00BCED  00                 	db	0
  1123  00BCEE  00                 	db	0
  1124  00BCEF  7E                 	db	126
  1125  00BCF0  02                 	db	2
  1126  00BCF1  02                 	db	2
  1127  00BCF2  02                 	db	2
  1128  00BCF3  03                 	db	3
  1129  00BCF4  00                 	db	0
  1130  00BCF5  00                 	db	0
  1131  00BCF6  00                 	db	0
  1132  00BCF7  00                 	db	0
  1133  00BCF8  00                 	db	0
  1134  00BCF9  00                 	db	0
  1135  00BCFA  00                 	db	0
  1136  00BCFB  00                 	db	0
  1137  00BCFC  00                 	db	0
  1138  00BCFD  00                 	db	0
  1139  00BCFE  7E                 	db	126
  1140  00BCFF  4B                 	db	75
  1141  00BD00  4A                 	db	74
  1142  00BD01  4B                 	db	75
  1143  00BD02  42                 	db	66
  1144  00BD03  00                 	db	0
  1145  00BD04  00                 	db	0
  1146  00BD05  00                 	db	0
  1147  00BD06  00                 	db	0
  1148  00BD07  00                 	db	0
  1149  00BD08  3E                 	db	62
  1150  00BD09  49                 	db	73
  1151  00BD0A  49                 	db	73
  1152  00BD0B  49                 	db	73
  1153  00BD0C  22                 	db	34
  1154  00BD0D  00                 	db	0
  1155  00BD0E  00                 	db	0
  1156  00BD0F  00                 	db	0
  1157  00BD10  00                 	db	0
  1158  00BD11  00                 	db	0
  1159  00BD12  00                 	db	0
  1160  00BD13  00                 	db	0
  1161  00BD14  00                 	db	0
  1162  00BD15  00                 	db	0
  1163  00BD16  00                 	db	0
  1164  00BD17  00                 	db	0
  1165  00BD18  00                 	db	0
  1166  00BD19  00                 	db	0
  1167  00BD1A  00                 	db	0
  1168  00BD1B  00                 	db	0
  1169  00BD1C  00                 	db	0
  1170  00BD1D  00                 	db	0
  1171  00BD1E  00                 	db	0
  1172  00BD1F  00                 	db	0
  1173  00BD20  00                 	db	0
  1174  00BD21  00                 	db	0
  1175  00BD22  41                 	db	65
  1176  00BD23  7E                 	db	126
  1177  00BD24  41                 	db	65
  1178  00BD25  00                 	db	0
  1179  00BD26  00                 	db	0
  1180  00BD27  06                 	db	6
  1181  00BD28  09                 	db	9
  1182  00BD29  09                 	db	9
  1183  00BD2A  06                 	db	6
  1184  00BD2B  44                 	db	68
  1185  00BD2C  44                 	db	68
  1186  00BD2D  5F                 	db	95
  1187  00BD2E  44                 	db	68
  1188  00BD2F  44                 	db	68
  1189  00BD30  00                 	db	0
  1190  00BD31  41                 	db	65
  1191  00BD32  7F                 	db	127
  1192  00BD33  41                 	db	65
  1193  00BD34  00                 	db	0
  1194  00BD35  00                 	db	0
  1195  00BD36  44                 	db	68
  1196  00BD37  7D                 	db	125
  1197  00BD38  40                 	db	64
  1198  00BD39  00                 	db	0
  1199  00BD3A  00                 	db	0
  1200  00BD3B  7C                 	db	124
  1201  00BD3C  04                 	db	4
  1202  00BD3D  04                 	db	4
  1203  00BD3E  06                 	db	6
  1204  00BD3F  00                 	db	0
  1205  00BD40  00                 	db	0
  1206  00BD41  00                 	db	0
  1207  00BD42  00                 	db	0
  1208  00BD43  00                 	db	0
  1209  00BD44  00                 	db	0
  1210  00BD45  00                 	db	0
  1211  00BD46  00                 	db	0
  1212  00BD47  00                 	db	0
  1213  00BD48  00                 	db	0
  1214  00BD49  00                 	db	0
  1215  00BD4A  00                 	db	0
  1216  00BD4B  00                 	db	0
  1217  00BD4C  00                 	db	0
  1218  00BD4D  00                 	db	0
  1219  00BD4E  38                 	db	56
  1220  00BD4F  55                 	db	85
  1221  00BD50  54                 	db	84
  1222  00BD51  55                 	db	85
  1223  00BD52  18                 	db	24
  1224  00BD53  00                 	db	0
  1225  00BD54  00                 	db	0
  1226  00BD55  00                 	db	0
  1227  00BD56  00                 	db	0
  1228  00BD57  00                 	db	0
  1229  00BD58  38                 	db	56
  1230  00BD59  54                 	db	84
  1231  00BD5A  54                 	db	84
  1232  00BD5B  54                 	db	84
  1233  00BD5C  44                 	db	68
  1234  00BD5D  22                 	db	34
  1235  00BD5E  14                 	db	20
  1236  00BD5F  2A                 	db	42
  1237  00BD60  14                 	db	20
  1238  00BD61  08                 	db	8
  1239  00BD62  20                 	db	32
  1240  00BD63  40                 	db	64
  1241  00BD64  40                 	db	64
  1242  00BD65  3D                 	db	61
  1243  00BD66  00                 	db	0
  1244  00BD67  00                 	db	0
  1245  00BD68  00                 	db	0
  1246  00BD69  00                 	db	0
  1247  00BD6A  00                 	db	0
  1248  00BD6B  00                 	db	0
  1249  00BD6C  00                 	db	0
  1250  00BD6D  00                 	db	0
  1251  00BD6E  00                 	db	0
  1252  00BD6F  00                 	db	0
  1253  00BD70  00                 	db	0
  1254  00BD71  00                 	db	0
  1255  00BD72  45                 	db	69
  1256  00BD73  7C                 	db	124
  1257  00BD74  41                 	db	65
  1258  00BD75  00                 	db	0
  1259  00BD76  7E                 	db	126
  1260  00BD77  11                 	db	17
  1261  00BD78  11                 	db	17
  1262  00BD79  11                 	db	17
  1263  00BD7A  7E                 	db	126
  1264  00BD7B  7F                 	db	127
  1265  00BD7C  49                 	db	73
  1266  00BD7D  49                 	db	73
  1267  00BD7E  49                 	db	73
  1268  00BD7F  31                 	db	49
  1269  00BD80  7F                 	db	127
  1270  00BD81  49                 	db	73
  1271  00BD82  49                 	db	73
  1272  00BD83  49                 	db	73
  1273  00BD84  36                 	db	54
  1274  00BD85  7F                 	db	127
  1275  00BD86  01                 	db	1
  1276  00BD87  01                 	db	1
  1277  00BD88  01                 	db	1
  1278  00BD89  01                 	db	1
  1279  00BD8A  C0                 	db	192
  1280  00BD8B  7E                 	db	126
  1281  00BD8C  41                 	db	65
  1282  00BD8D  7E                 	db	126
  1283  00BD8E  C0                 	db	192
  1284  00BD8F  7F                 	db	127
  1285  00BD90  49                 	db	73
  1286  00BD91  49                 	db	73
  1287  00BD92  49                 	db	73
  1288  00BD93  41                 	db	65
  1289  00BD94  77                 	db	119
  1290  00BD95  08                 	db	8
  1291  00BD96  7F                 	db	127
  1292  00BD97  08                 	db	8
  1293  00BD98  77                 	db	119
  1294  00BD99  22                 	db	34
  1295  00BD9A  41                 	db	65
  1296  00BD9B  49                 	db	73
  1297  00BD9C  49                 	db	73
  1298  00BD9D  36                 	db	54
  1299  00BD9E  7F                 	db	127
  1300  00BD9F  10                 	db	16
  1301  00BDA0  08                 	db	8
  1302  00BDA1  04                 	db	4
  1303  00BDA2  7F                 	db	127
  1304  00BDA3  7E                 	db	126
  1305  00BDA4  11                 	db	17
  1306  00BDA5  09                 	db	9
  1307  00BDA6  05                 	db	5
  1308  00BDA7  7E                 	db	126
  1309  00BDA8  7F                 	db	127
  1310  00BDA9  08                 	db	8
  1311  00BDAA  14                 	db	20
  1312  00BDAB  22                 	db	34
  1313  00BDAC  41                 	db	65
  1314  00BDAD  40                 	db	64
  1315  00BDAE  7E                 	db	126
  1316  00BDAF  01                 	db	1
  1317  00BDB0  01                 	db	1
  1318  00BDB1  7F                 	db	127
  1319  00BDB2  7F                 	db	127
  1320  00BDB3  02                 	db	2
  1321  00BDB4  0C                 	db	12
  1322  00BDB5  02                 	db	2
  1323  00BDB6  7F                 	db	127
  1324  00BDB7  7F                 	db	127
  1325  00BDB8  08                 	db	8
  1326  00BDB9  08                 	db	8
  1327  00BDBA  08                 	db	8
  1328  00BDBB  7F                 	db	127
  1329  00BDBC  3E                 	db	62
  1330  00BDBD  41                 	db	65
  1331  00BDBE  41                 	db	65
  1332  00BDBF  41                 	db	65
  1333  00BDC0  3E                 	db	62
  1334  00BDC1  7F                 	db	127
  1335  00BDC2  01                 	db	1
  1336  00BDC3  01                 	db	1
  1337  00BDC4  01                 	db	1
  1338  00BDC5  7F                 	db	127
  1339  00BDC6  7F                 	db	127
  1340  00BDC7  09                 	db	9
  1341  00BDC8  09                 	db	9
  1342  00BDC9  09                 	db	9
  1343  00BDCA  06                 	db	6
  1344  00BDCB  3E                 	db	62
  1345  00BDCC  41                 	db	65
  1346  00BDCD  41                 	db	65
  1347  00BDCE  41                 	db	65
  1348  00BDCF  22                 	db	34
  1349  00BDD0  01                 	db	1
  1350  00BDD1  01                 	db	1
  1351  00BDD2  7F                 	db	127
  1352  00BDD3  01                 	db	1
  1353  00BDD4  01                 	db	1
  1354  00BDD5  27                 	db	39
  1355  00BDD6  48                 	db	72
  1356  00BDD7  48                 	db	72
  1357  00BDD8  48                 	db	72
  1358  00BDD9  3F                 	db	63
  1359  00BDDA  0E                 	db	14
  1360  00BDDB  11                 	db	17
  1361  00BDDC  7F                 	db	127
  1362  00BDDD  11                 	db	17
  1363  00BDDE  0E                 	db	14
  1364  00BDDF  63                 	db	99
  1365  00BDE0  14                 	db	20
  1366  00BDE1  08                 	db	8
  1367  00BDE2  14                 	db	20
  1368  00BDE3  63                 	db	99
  1369  00BDE4  7F                 	db	127
  1370  00BDE5  40                 	db	64
  1371  00BDE6  40                 	db	64
  1372  00BDE7  7F                 	db	127
  1373  00BDE8  C0                 	db	192
  1374  00BDE9  07                 	db	7
  1375  00BDEA  08                 	db	8
  1376  00BDEB  08                 	db	8
  1377  00BDEC  08                 	db	8
  1378  00BDED  7F                 	db	127
  1379  00BDEE  7F                 	db	127
  1380  00BDEF  40                 	db	64
  1381  00BDF0  7E                 	db	126
  1382  00BDF1  40                 	db	64
  1383  00BDF2  7F                 	db	127
  1384  00BDF3  7F                 	db	127
  1385  00BDF4  40                 	db	64
  1386  00BDF5  7E                 	db	126
  1387  00BDF6  40                 	db	64
  1388  00BDF7  FF                 	db	255
  1389  00BDF8  01                 	db	1
  1390  00BDF9  7F                 	db	127
  1391  00BDFA  44                 	db	68
  1392  00BDFB  44                 	db	68
  1393  00BDFC  38                 	db	56
  1394  00BDFD  7F                 	db	127
  1395  00BDFE  44                 	db	68
  1396  00BDFF  38                 	db	56
  1397  00BE00  00                 	db	0
  1398  00BE01  7F                 	db	127
  1399  00BE02  7F                 	db	127
  1400  00BE03  44                 	db	68
  1401  00BE04  44                 	db	68
  1402  00BE05  44                 	db	68
  1403  00BE06  38                 	db	56
  1404  00BE07  22                 	db	34
  1405  00BE08  41                 	db	65
  1406  00BE09  49                 	db	73
  1407  00BE0A  49                 	db	73
  1408  00BE0B  3E                 	db	62
  1409  00BE0C  7F                 	db	127
  1410  00BE0D  08                 	db	8
  1411  00BE0E  3E                 	db	62
  1412  00BE0F  41                 	db	65
  1413  00BE10  3E                 	db	62
  1414  00BE11  46                 	db	70
  1415  00BE12  29                 	db	41
  1416  00BE13  19                 	db	25
  1417  00BE14  09                 	db	9
  1418  00BE15  7F                 	db	127
  1419  00BE16  20                 	db	32
  1420  00BE17  54                 	db	84
  1421  00BE18  54                 	db	84
  1422  00BE19  54                 	db	84
  1423  00BE1A  78                 	db	120
  1424  00BE1B  3C                 	db	60
  1425  00BE1C  4A                 	db	74
  1426  00BE1D  4A                 	db	74
  1427  00BE1E  4A                 	db	74
  1428  00BE1F  31                 	db	49
  1429  00BE20  7C                 	db	124
  1430  00BE21  54                 	db	84
  1431  00BE22  54                 	db	84
  1432  00BE23  54                 	db	84
  1433  00BE24  28                 	db	40
  1434  00BE25  00                 	db	0
  1435  00BE26  7C                 	db	124
  1436  00BE27  04                 	db	4
  1437  00BE28  04                 	db	4
  1438  00BE29  04                 	db	4
  1439  00BE2A  C0                 	db	192
  1440  00BE2B  78                 	db	120
  1441  00BE2C  44                 	db	68
  1442  00BE2D  7C                 	db	124
  1443  00BE2E  C0                 	db	192
  1444  00BE2F  38                 	db	56
  1445  00BE30  54                 	db	84
  1446  00BE31  54                 	db	84
  1447  00BE32  54                 	db	84
  1448  00BE33  18                 	db	24
  1449  00BE34  6C                 	db	108
  1450  00BE35  10                 	db	16
  1451  00BE36  7C                 	db	124
  1452  00BE37  10                 	db	16
  1453  00BE38  6C                 	db	108
  1454  00BE39  28                 	db	40
  1455  00BE3A  44                 	db	68
  1456  00BE3B  54                 	db	84
  1457  00BE3C  54                 	db	84
  1458  00BE3D  28                 	db	40
  1459  00BE3E  7C                 	db	124
  1460  00BE3F  20                 	db	32
  1461  00BE40  10                 	db	16
  1462  00BE41  08                 	db	8
  1463  00BE42  7C                 	db	124
  1464  00BE43  7C                 	db	124
  1465  00BE44  21                 	db	33
  1466  00BE45  11                 	db	17
  1467  00BE46  09                 	db	9
  1468  00BE47  7C                 	db	124
  1469  00BE48  7C                 	db	124
  1470  00BE49  10                 	db	16
  1471  00BE4A  10                 	db	16
  1472  00BE4B  28                 	db	40
  1473  00BE4C  44                 	db	68
  1474  00BE4D  40                 	db	64
  1475  00BE4E  38                 	db	56
  1476  00BE4F  04                 	db	4
  1477  00BE50  04                 	db	4
  1478  00BE51  7C                 	db	124
  1479  00BE52  7C                 	db	124
  1480  00BE53  08                 	db	8
  1481  00BE54  10                 	db	16
  1482  00BE55  08                 	db	8
  1483  00BE56  7C                 	db	124
  1484  00BE57  7C                 	db	124
  1485  00BE58  10                 	db	16
  1486  00BE59  10                 	db	16
  1487  00BE5A  10                 	db	16
  1488  00BE5B  7C                 	db	124
  1489  00BE5C  38                 	db	56
  1490  00BE5D  44                 	db	68
  1491  00BE5E  44                 	db	68
  1492  00BE5F  44                 	db	68
  1493  00BE60  38                 	db	56
  1494  00BE61  7C                 	db	124
  1495  00BE62  04                 	db	4
  1496  00BE63  04                 	db	4
  1497  00BE64  04                 	db	4
  1498  00BE65  7C                 	db	124
  1499  00BE66  7C                 	db	124
  1500  00BE67  14                 	db	20
  1501  00BE68  14                 	db	20
  1502  00BE69  14                 	db	20
  1503  00BE6A  08                 	db	8
  1504  00BE6B  38                 	db	56
  1505  00BE6C  44                 	db	68
  1506  00BE6D  44                 	db	68
  1507  00BE6E  44                 	db	68
  1508  00BE6F  28                 	db	40
  1509  00BE70  04                 	db	4
  1510  00BE71  04                 	db	4
  1511  00BE72  7C                 	db	124
  1512  00BE73  04                 	db	4
  1513  00BE74  04                 	db	4
  1514  00BE75  4C                 	db	76
  1515  00BE76  50                 	db	80
  1516  00BE77  50                 	db	80
  1517  00BE78  50                 	db	80
  1518  00BE79  3C                 	db	60
  1519  00BE7A  18                 	db	24
  1520  00BE7B  24                 	db	36
  1521  00BE7C  7C                 	db	124
  1522  00BE7D  24                 	db	36
  1523  00BE7E  18                 	db	24
  1524  00BE7F  00                 	db	0
  1525  00BE80  6C                 	db	108
  1526  00BE81  10                 	db	16
  1527  00BE82  10                 	db	16
  1528  00BE83  6C                 	db	108
  1529  00BE84  7C                 	db	124
  1530  00BE85  40                 	db	64
  1531  00BE86  40                 	db	64
  1532  00BE87  7C                 	db	124
  1533  00BE88  C0                 	db	192
  1534  00BE89  0C                 	db	12
  1535  00BE8A  10                 	db	16
  1536  00BE8B  10                 	db	16
  1537  00BE8C  10                 	db	16
  1538  00BE8D  7C                 	db	124
  1539  00BE8E  7C                 	db	124
  1540  00BE8F  40                 	db	64
  1541  00BE90  78                 	db	120
  1542  00BE91  40                 	db	64
  1543  00BE92  7C                 	db	124
  1544  00BE93  7C                 	db	124
  1545  00BE94  40                 	db	64
  1546  00BE95  78                 	db	120
  1547  00BE96  40                 	db	64
  1548  00BE97  FC                 	db	252
  1549  00BE98  04                 	db	4
  1550  00BE99  7C                 	db	124
  1551  00BE9A  50                 	db	80
  1552  00BE9B  50                 	db	80
  1553  00BE9C  20                 	db	32
  1554  00BE9D  7C                 	db	124
  1555  00BE9E  50                 	db	80
  1556  00BE9F  20                 	db	32
  1557  00BEA0  00                 	db	0
  1558  00BEA1  7C                 	db	124
  1559  00BEA2  00                 	db	0
  1560  00BEA3  7C                 	db	124
  1561  00BEA4  50                 	db	80
  1562  00BEA5  50                 	db	80
  1563  00BEA6  20                 	db	32
  1564  00BEA7  44                 	db	68
  1565  00BEA8  54                 	db	84
  1566  00BEA9  54                 	db	84
  1567  00BEAA  54                 	db	84
  1568  00BEAB  38                 	db	56
  1569  00BEAC  7C                 	db	124
  1570  00BEAD  10                 	db	16
  1571  00BEAE  38                 	db	56
  1572  00BEAF  44                 	db	68
  1573  00BEB0  38                 	db	56
  1574  00BEB1  48                 	db	72
  1575  00BEB2  54                 	db	84
  1576  00BEB3  34                 	db	52
  1577  00BEB4  14                 	db	20
  1578  00BEB5  7C                 	db	124
  1579  00BEB6                     __end_of_Font:
  1580                           	opt stack 0
  1581  00BEB6                     _dFont5:
  1582                           	opt stack 0
  1583  00BEB6  3E                 	db	62
  1584  00BEB7  41                 	db	65
  1585  00BEB8  41                 	db	65
  1586  00BEB9  7F                 	db	127
  1587  00BEBA  3E                 	db	62
  1588  00BEBB  00                 	db	0
  1589  00BEBC  02                 	db	2
  1590  00BEBD  7F                 	db	127
  1591  00BEBE  7F                 	db	127
  1592  00BEBF  00                 	db	0
  1593  00BEC0  62                 	db	98
  1594  00BEC1  73                 	db	115
  1595  00BEC2  59                 	db	89
  1596  00BEC3  4F                 	db	79
  1597  00BEC4  46                 	db	70
  1598  00BEC5  22                 	db	34
  1599  00BEC6  63                 	db	99
  1600  00BEC7  49                 	db	73
  1601  00BEC8  7F                 	db	127
  1602  00BEC9  36                 	db	54
  1603  00BECA  18                 	db	24
  1604  00BECB  14                 	db	20
  1605  00BECC  12                 	db	18
  1606  00BECD  7F                 	db	127
  1607  00BECE  7F                 	db	127
  1608  00BECF  2F                 	db	47
  1609  00BED0  45                 	db	69
  1610  00BED1  45                 	db	69
  1611  00BED2  7D                 	db	125
  1612  00BED3  39                 	db	57
  1613  00BED4  3E                 	db	62
  1614  00BED5  49                 	db	73
  1615  00BED6  49                 	db	73
  1616  00BED7  7B                 	db	123
  1617  00BED8  32                 	db	50
  1618  00BED9  03                 	db	3
  1619  00BEDA  71                 	db	113
  1620  00BEDB  79                 	db	121
  1621  00BEDC  0F                 	db	15
  1622  00BEDD  07                 	db	7
  1623  00BEDE  36                 	db	54
  1624  00BEDF  49                 	db	73
  1625  00BEE0  49                 	db	73
  1626  00BEE1  7F                 	db	127
  1627  00BEE2  36                 	db	54
  1628  00BEE3  26                 	db	38
  1629  00BEE4  49                 	db	73
  1630  00BEE5  49                 	db	73
  1631  00BEE6  7F                 	db	127
  1632  00BEE7  3E                 	db	62
  1633  00BEE8                     __end_of_dFont5:
  1634                           	opt stack 0
  1635  00BEE8                     _dFont4:
  1636                           	opt stack 0
  1637  00BEE8  3E                 	db	62
  1638  00BEE9  7F                 	db	127
  1639  00BEEA  41                 	db	65
  1640  00BEEB  7F                 	db	127
  1641  00BEEC  3E                 	db	62
  1642  00BEED  00                 	db	0
  1643  00BEEE  02                 	db	2
  1644  00BEEF  7F                 	db	127
  1645  00BEF0  7F                 	db	127
  1646  00BEF1  00                 	db	0
  1647  00BEF2  62                 	db	98
  1648  00BEF3  73                 	db	115
  1649  00BEF4  59                 	db	89
  1650  00BEF5  4F                 	db	79
  1651  00BEF6  46                 	db	70
  1652  00BEF7  22                 	db	34
  1653  00BEF8  63                 	db	99
  1654  00BEF9  49                 	db	73
  1655  00BEFA  7F                 	db	127
  1656  00BEFB  36                 	db	54
  1657  00BEFC  18                 	db	24
  1658  00BEFD  14                 	db	20
  1659  00BEFE  12                 	db	18
  1660  00BEFF  7F                 	db	127
  1661  00BF00  7F                 	db	127
  1662  00BF01  2F                 	db	47
  1663  00BF02  6F                 	db	111
  1664  00BF03  45                 	db	69
  1665  00BF04  7D                 	db	125
  1666  00BF05  39                 	db	57
  1667  00BF06  3E                 	db	62
  1668  00BF07  7F                 	db	127
  1669  00BF08  49                 	db	73
  1670  00BF09  7B                 	db	123
  1671  00BF0A  32                 	db	50
  1672  00BF0B  03                 	db	3
  1673  00BF0C  73                 	db	115
  1674  00BF0D  79                 	db	121
  1675  00BF0E  0F                 	db	15
  1676  00BF0F  07                 	db	7
  1677  00BF10  36                 	db	54
  1678  00BF11  7F                 	db	127
  1679  00BF12  49                 	db	73
  1680  00BF13  7F                 	db	127
  1681  00BF14  36                 	db	54
  1682  00BF15  26                 	db	38
  1683  00BF16  6F                 	db	111
  1684  00BF17  49                 	db	73
  1685  00BF18  7F                 	db	127
  1686  00BF19  3E                 	db	62
  1687  00BF1A                     __end_of_dFont4:
  1688                           	opt stack 0
  1689  00BF1A                     _dFont3:
  1690                           	opt stack 0
  1691  00BF1A  7F                 	db	127
  1692  00BF1B  41                 	db	65
  1693  00BF1C  41                 	db	65
  1694  00BF1D  7F                 	db	127
  1695  00BF1E  7F                 	db	127
  1696  00BF1F  00                 	db	0
  1697  00BF20  01                 	db	1
  1698  00BF21  7F                 	db	127
  1699  00BF22  7F                 	db	127
  1700  00BF23  00                 	db	0
  1701  00BF24  71                 	db	113
  1702  00BF25  51                 	db	81
  1703  00BF26  51                 	db	81
  1704  00BF27  5F                 	db	95
  1705  00BF28  5F                 	db	95
  1706  00BF29  41                 	db	65
  1707  00BF2A  49                 	db	73
  1708  00BF2B  49                 	db	73
  1709  00BF2C  7F                 	db	127
  1710  00BF2D  7F                 	db	127
  1711  00BF2E  1F                 	db	31
  1712  00BF2F  10                 	db	16
  1713  00BF30  10                 	db	16
  1714  00BF31  7F                 	db	127
  1715  00BF32  7F                 	db	127
  1716  00BF33  4F                 	db	79
  1717  00BF34  49                 	db	73
  1718  00BF35  49                 	db	73
  1719  00BF36  79                 	db	121
  1720  00BF37  79                 	db	121
  1721  00BF38  7F                 	db	127
  1722  00BF39  49                 	db	73
  1723  00BF3A  49                 	db	73
  1724  00BF3B  79                 	db	121
  1725  00BF3C  79                 	db	121
  1726  00BF3D  01                 	db	1
  1727  00BF3E  01                 	db	1
  1728  00BF3F  01                 	db	1
  1729  00BF40  7F                 	db	127
  1730  00BF41  7F                 	db	127
  1731  00BF42  7F                 	db	127
  1732  00BF43  49                 	db	73
  1733  00BF44  49                 	db	73
  1734  00BF45  7F                 	db	127
  1735  00BF46  7F                 	db	127
  1736  00BF47  4F                 	db	79
  1737  00BF48  49                 	db	73
  1738  00BF49  49                 	db	73
  1739  00BF4A  7F                 	db	127
  1740  00BF4B  7F                 	db	127
  1741  00BF4C                     __end_of_dFont3:
  1742                           	opt stack 0
  1743  00BF4C                     _dFont2:
  1744                           	opt stack 0
  1745  00BF4C  7F                 	db	127
  1746  00BF4D  7F                 	db	127
  1747  00BF4E  41                 	db	65
  1748  00BF4F  7F                 	db	127
  1749  00BF50  7F                 	db	127
  1750  00BF51  00                 	db	0
  1751  00BF52  01                 	db	1
  1752  00BF53  7F                 	db	127
  1753  00BF54  7F                 	db	127
  1754  00BF55  00                 	db	0
  1755  00BF56  73                 	db	115
  1756  00BF57  73                 	db	115
  1757  00BF58  51                 	db	81
  1758  00BF59  5F                 	db	95
  1759  00BF5A  5F                 	db	95
  1760  00BF5B  63                 	db	99
  1761  00BF5C  6B                 	db	107
  1762  00BF5D  49                 	db	73
  1763  00BF5E  7F                 	db	127
  1764  00BF5F  7F                 	db	127
  1765  00BF60  1F                 	db	31
  1766  00BF61  1F                 	db	31
  1767  00BF62  10                 	db	16
  1768  00BF63  7F                 	db	127
  1769  00BF64  7F                 	db	127
  1770  00BF65  6F                 	db	111
  1771  00BF66  6F                 	db	111
  1772  00BF67  49                 	db	73
  1773  00BF68  79                 	db	121
  1774  00BF69  79                 	db	121
  1775  00BF6A  7F                 	db	127
  1776  00BF6B  7F                 	db	127
  1777  00BF6C  49                 	db	73
  1778  00BF6D  7B                 	db	123
  1779  00BF6E  7B                 	db	123
  1780  00BF6F  03                 	db	3
  1781  00BF70  73                 	db	115
  1782  00BF71  79                 	db	121
  1783  00BF72  0F                 	db	15
  1784  00BF73  07                 	db	7
  1785  00BF74  7F                 	db	127
  1786  00BF75  7F                 	db	127
  1787  00BF76  49                 	db	73
  1788  00BF77  7F                 	db	127
  1789  00BF78  7F                 	db	127
  1790  00BF79  6F                 	db	111
  1791  00BF7A  6F                 	db	111
  1792  00BF7B  49                 	db	73
  1793  00BF7C  7F                 	db	127
  1794  00BF7D  7F                 	db	127
  1795  00BF7E                     __end_of_dFont2:
  1796                           	opt stack 0
  1797  00BF7E                     _dFont1:
  1798                           	opt stack 0
  1799  00BF7E  7F                 	db	127
  1800  00BF7F  7F                 	db	127
  1801  00BF80  41                 	db	65
  1802  00BF81  7F                 	db	127
  1803  00BF82  7F                 	db	127
  1804  00BF83  00                 	db	0
  1805  00BF84  01                 	db	1
  1806  00BF85  7F                 	db	127
  1807  00BF86  7F                 	db	127
  1808  00BF87  00                 	db	0
  1809  00BF88  61                 	db	97
  1810  00BF89  71                 	db	113
  1811  00BF8A  59                 	db	89
  1812  00BF8B  4F                 	db	79
  1813  00BF8C  47                 	db	71
  1814  00BF8D  41                 	db	65
  1815  00BF8E  49                 	db	73
  1816  00BF8F  49                 	db	73
  1817  00BF90  7F                 	db	127
  1818  00BF91  7F                 	db	127
  1819  00BF92  1F                 	db	31
  1820  00BF93  1F                 	db	31
  1821  00BF94  10                 	db	16
  1822  00BF95  7F                 	db	127
  1823  00BF96  7F                 	db	127
  1824  00BF97  4F                 	db	79
  1825  00BF98  4F                 	db	79
  1826  00BF99  49                 	db	73
  1827  00BF9A  79                 	db	121
  1828  00BF9B  79                 	db	121
  1829  00BF9C  7F                 	db	127
  1830  00BF9D  7F                 	db	127
  1831  00BF9E  49                 	db	73
  1832  00BF9F  79                 	db	121
  1833  00BFA0  79                 	db	121
  1834  00BFA1  01                 	db	1
  1835  00BFA2  71                 	db	113
  1836  00BFA3  79                 	db	121
  1837  00BFA4  0F                 	db	15
  1838  00BFA5  07                 	db	7
  1839  00BFA6  7F                 	db	127
  1840  00BFA7  7F                 	db	127
  1841  00BFA8  49                 	db	73
  1842  00BFA9  7F                 	db	127
  1843  00BFAA  7F                 	db	127
  1844  00BFAB  5F                 	db	95
  1845  00BFAC  5F                 	db	95
  1846  00BFAD  51                 	db	81
  1847  00BFAE  7F                 	db	127
  1848  00BFAF  7F                 	db	127
  1849  00BFB0                     __end_of_dFont1:
  1850                           	opt stack 0
  1851  00BFB0                     _FontS:
  1852                           	opt stack 0
  1853  00BFB0  00                 	db	0
  1854  00BFB1  00                 	db	0
  1855  00BFB2  00                 	db	0
  1856  00BFB3  7C                 	db	124
  1857  00BFB4  44                 	db	68
  1858  00BFB5  7C                 	db	124
  1859  00BFB6  00                 	db	0
  1860  00BFB7  7C                 	db	124
  1861  00BFB8  00                 	db	0
  1862  00BFB9  74                 	db	116
  1863  00BFBA  54                 	db	84
  1864  00BFBB  5C                 	db	92
  1865  00BFBC  54                 	db	84
  1866  00BFBD  54                 	db	84
  1867  00BFBE  7C                 	db	124
  1868  00BFBF  1C                 	db	28
  1869  00BFC0  10                 	db	16
  1870  00BFC1  7C                 	db	124
  1871  00BFC2  5C                 	db	92
  1872  00BFC3  54                 	db	84
  1873  00BFC4  74                 	db	116
  1874  00BFC5  7C                 	db	124
  1875  00BFC6  54                 	db	84
  1876  00BFC7  74                 	db	116
  1877  00BFC8  04                 	db	4
  1878  00BFC9  04                 	db	4
  1879  00BFCA  7C                 	db	124
  1880  00BFCB  7C                 	db	124
  1881  00BFCC  54                 	db	84
  1882  00BFCD  7C                 	db	124
  1883  00BFCE  5C                 	db	92
  1884  00BFCF  54                 	db	84
  1885  00BFD0  7C                 	db	124
  1886  00BFD1                     __end_of_FontS:
  1887                           	opt stack 0
  1888  0000                     _TMR0	set	4054
  1889  0000                     _PORTDbits	set	3971
  1890  0000                     _LATCbits	set	3979
  1891  0000                     _TRISDbits	set	3989
  1892  0000                     _EECON2	set	4007
  1893  0000                     _EEDATA	set	4008
  1894  0000                     _EEADR	set	4009
  1895  0000                     _EECON1bits	set	4006
  1896  0000                     _SPBRG	set	4015
  1897  0000                     _SPBRGH	set	4016
  1898  0000                     _BAUDCONbits	set	4024
  1899  0000                     _RCSTAbits	set	4011
  1900  0000                     _TXSTAbits	set	4012
  1901  0000                     _TRISCbits	set	3988
  1902  0000                     _PORTB	set	3969
  1903  0000                     _T3CONbits	set	4017
  1904  0000                     _T1CONbits	set	4045
  1905  0000                     _LATDbits	set	3980
  1906  0000                     _TMR3L	set	4018
  1907  0000                     _TMR3H	set	4019
  1908  0000                     _PIR2bits	set	4001
  1909  0000                     _PIE2bits	set	4000
  1910  0000                     _TMR1L	set	4046
  1911  0000                     _TMR1H	set	4047
  1912  0000                     _PIR1bits	set	3998
  1913  0000                     _PIE1bits	set	3997
  1914  0000                     _T0CON	set	4053
  1915  0000                     _SSPBUF	set	4041
  1916  0000                     _SSPCON2	set	4037
  1917  0000                     _SSPADD	set	4040
  1918  0000                     _SSPSTAT	set	4039
  1919  0000                     _SSPCON1	set	4038
  1920  0000                     _PORTCbits	set	3970
  1921  0000                     _INTCON2bits	set	4081
  1922  0000                     _TRISD	set	3989
  1923  0000                     _LATD	set	3980
  1924  0000                     _INTCON2	set	4081
  1925  0000                     _TRISB	set	3987
  1926  0000                     _LATB	set	3978
  1927  0000                     _TRISC	set	3988
  1928  0000                     _LATC	set	3979
  1929  0000                     _INTCONbits	set	4082
  1930  0000                     _ACKEN	set	32300
  1931  0000                     _ACKDT	set	32301
  1932  0000                     _RCEN	set	32299
  1933  0000                     _RSEN	set	32297
  1934  0000                     _SEN	set	32296
  1935  0000                     _PEN	set	32298
  1936  00BFD1  43                 	db	67	;'C'
  1937  00BFD2  6C                 	db	108	;'l'
  1938  00BFD3  6F                 	db	111	;'o'
  1939  00BFD4  63                 	db	99	;'c'
  1940  00BFD5  6B                 	db	107	;'k'
  1941  00BFD6  20                 	db	32
  1942  00BFD7  76                 	db	118	;'v'
  1943  00BFD8  30                 	db	48	;'0'
  1944  00BFD9  31                 	db	49	;'1'
  1945  00BFDA  2E                 	db	46
  1946  00BFDB  30                 	db	48	;'0'
  1947  00BFDC  36                 	db	54	;'6'
  1948  00BFDD  2E                 	db	46
  1949  00BFDE  31                 	db	49	;'1'
  1950  00BFDF  37                 	db	55	;'7'
  1951  00BFE0  20                 	db	32
  1952  00BFE1  31                 	db	49	;'1'
  1953  00BFE2  36                 	db	54	;'6'
  1954  00BFE3  2E                 	db	46
  1955  00BFE4  31                 	db	49	;'1'
  1956  00BFE5  31                 	db	49	;'1'
  1957  00BFE6  2E                 	db	46
  1958  00BFE7  31                 	db	49	;'1'
  1959  00BFE8  32                 	db	50	;'2'
  1960  00BFE9  20                 	db	32
  1961  00BFEA  62                 	db	98	;'b'
  1962  00BFEB  79                 	db	121	;'y'
  1963  00BFEC  20                 	db	32
  1964  00BFED  49                 	db	73	;'I'
  1965  00BFEE  76                 	db	118	;'v'
  1966  00BFEF  61                 	db	97	;'a'
  1967  00BFF0  6E                 	db	110	;'n'
  1968  00BFF1  5F                 	db	95	;'_'
  1969  00BFF2  66                 	db	102	;'f'
  1970  00BFF3  64                 	db	100	;'d'
  1971  00BFF4  00                 	db	0
  1972  00BFF5                     STR_1:
  1973  00BFF5  EC                 	db	-20
  1974  00BFF6  EC                 	db	-20
  1975  00BFF7  2E                 	db	46
  1976  00BFF8  F0                 	db	-16
  1977  00BFF9  F2                 	db	-14
  1978  00BFFA  2E                 	db	46
  1979  00BFFB  F1                 	db	-15
  1980  00BFFC  F2                 	db	-14
  1981  00BFFD  2E                 	db	46
  1982  00BFFE  00                 	db	0
  1983                           
  1984                           ; #config settings
  1985  00BFFF  00                 	db	0	; dummy byte at the end
  1986  0000                     tosu	equ	0xFFF
  1987                           tosh	equ	0xFFE
  1988                           tosl	equ	0xFFD
  1989                           pclath	equ	0xFFA
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           prodh	equ	0xFF4
  1995                           prodl	equ	0xFF3
  1996                           intcon	equ	0xFF2
  1997                           intcon2	equ	0xFF1
  1998                           wreg	equ	0xFE8
  1999                           indf1	equ	0xFE7
  2000                           plusw1	equ	0xFE3
  2001                           fsr1h	equ	0xFE2
  2002                           fsr1l	equ	0xFE1
  2003                           indf2	equ	0xFDF
  2004                           postinc2	equ	0xFDE
  2005                           postdec2	equ	0xFDD
  2006                           plusw2	equ	0xFDB
  2007                           fsr2h	equ	0xFDA
  2008                           fsr2l	equ	0xFD9
  2009                           status	equ	0xFD8
  2010                           
  2011                           	psect	cinit
  2012  00219E                     __pcinit:
  2013                           	opt stack 0
  2014  00219E                     start_initialization:
  2015                           	opt stack 0
  2016  00219E                     __initialization:
  2017                           	opt stack 0
  2018                           
  2019                           ; Initialize objects allocated to COMRAM (3 bytes)
  2020                           ; load TBLPTR registers with __pidataCOMRAM
  2021  00219E  0E5A               	movlw	low __pidataCOMRAM
  2022  0021A0  6EF6               	movwf	tblptrl,c
  2023  0021A2  0E2A               	movlw	high __pidataCOMRAM
  2024  0021A4  6EF7               	movwf	tblptrh,c
  2025  0021A6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2026  0021A8  6EF8               	movwf	tblptru,c
  2027  0021AA  0009               	tblrd		*+	;fetch initializer
  2028  0021AC  CFF5 F063          	movff	tablat,__pdataCOMRAM
  2029  0021B0  0009               	tblrd		*+	;fetch initializer
  2030  0021B2  CFF5 F064          	movff	tablat,__pdataCOMRAM+1
  2031  0021B6  0009               	tblrd		*+	;fetch initializer
  2032  0021B8  CFF5 F065          	movff	tablat,__pdataCOMRAM+2
  2033                           
  2034                           ; Clear objects allocated to BANK1 (220 bytes)
  2035  0021BC  EE01  F000         	lfsr	0,__pbssBANK1
  2036  0021C0  0EDC               	movlw	220
  2037  0021C2                     clear_0:
  2038  0021C2  6AEE               	clrf	postinc0,c
  2039  0021C4  06E8               	decf	wreg,f,c
  2040  0021C6  E1FD               	bnz	clear_0
  2041                           
  2042                           ; Clear objects allocated to BANK0 (89 bytes)
  2043  0021C8  EE00  F080         	lfsr	0,__pbssBANK0
  2044  0021CC  0E59               	movlw	89
  2045  0021CE                     clear_1:
  2046  0021CE  6AEE               	clrf	postinc0,c
  2047  0021D0  06E8               	decf	wreg,f,c
  2048  0021D2  E1FD               	bnz	clear_1
  2049                           
  2050                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  2051  0021D4  6A66               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  2052                           
  2053                           ; Clear objects allocated to COMRAM (10 bytes)
  2054  0021D6  EE00  F059         	lfsr	0,__pbssCOMRAM
  2055  0021DA  0E0A               	movlw	10
  2056  0021DC                     clear_2:
  2057  0021DC  6AEE               	clrf	postinc0,c
  2058  0021DE  06E8               	decf	wreg,f,c
  2059  0021E0  E1FD               	bnz	clear_2
  2060  0021E2                     end_of_initialization:
  2061                           	opt stack 0
  2062  0021E2                     __end_of__initialization:
  2063                           	opt stack 0
  2064  0021E2  9067               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2065  0021E4  9267               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2066  0021E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2067  0021E8  6EF8               	movwf	tblptru,c
  2068  0021EA  0100               	movlb	0
  2069  0021EC  EFF8  F010         	goto	_main	;jump to C main() function
  2070                           tosu	equ	0xFFF
  2071                           tosh	equ	0xFFE
  2072                           tosl	equ	0xFFD
  2073                           pclath	equ	0xFFA
  2074                           tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           prodh	equ	0xFF4
  2079                           prodl	equ	0xFF3
  2080                           intcon	equ	0xFF2
  2081                           intcon2	equ	0xFF1
  2082                           postinc0	equ	0xFEE
  2083                           wreg	equ	0xFE8
  2084                           indf1	equ	0xFE7
  2085                           plusw1	equ	0xFE3
  2086                           fsr1h	equ	0xFE2
  2087                           fsr1l	equ	0xFE1
  2088                           indf2	equ	0xFDF
  2089                           postinc2	equ	0xFDE
  2090                           postdec2	equ	0xFDD
  2091                           plusw2	equ	0xFDB
  2092                           fsr2h	equ	0xFDA
  2093                           fsr2l	equ	0xFD9
  2094                           status	equ	0xFD8
  2095                           
  2096                           	psect	bitbssCOMRAM
  2097  000330                     __pbitbssCOMRAM:
  2098                           	opt stack 0
  2099  000330                     _en_put:
  2100                           	opt stack 0
  2101  000330                     	ds	1
  2102  000331                     _show_digit:
  2103                           	opt stack 0
  2104  000331                     	ds	1
  2105                           tosu	equ	0xFFF
  2106                           tosh	equ	0xFFE
  2107                           tosl	equ	0xFFD
  2108                           pclath	equ	0xFFA
  2109                           tblptru	equ	0xFF8
  2110                           tblptrh	equ	0xFF7
  2111                           tblptrl	equ	0xFF6
  2112                           tablat	equ	0xFF5
  2113                           prodh	equ	0xFF4
  2114                           prodl	equ	0xFF3
  2115                           intcon	equ	0xFF2
  2116                           intcon2	equ	0xFF1
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           indf1	equ	0xFE7
  2120                           plusw1	equ	0xFE3
  2121                           fsr1h	equ	0xFE2
  2122                           fsr1l	equ	0xFE1
  2123                           indf2	equ	0xFDF
  2124                           postinc2	equ	0xFDE
  2125                           postdec2	equ	0xFDD
  2126                           plusw2	equ	0xFDB
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131                           	psect	bssCOMRAM
  2132  000059                     __pbssCOMRAM:
  2133                           	opt stack 0
  2134  000059                     _TSTime:
  2135                           	opt stack 0
  2136  000059                     	ds	7
  2137  000060                     _i_bchar:
  2138                           	opt stack 0
  2139  000060                     	ds	1
  2140  000061                     _arrayTail:
  2141                           	opt stack 0
  2142  000061                     	ds	1
  2143  000062                     _type_font:
  2144                           	opt stack 0
  2145  000062                     	ds	1
  2146                           tosu	equ	0xFFF
  2147                           tosh	equ	0xFFE
  2148                           tosl	equ	0xFFD
  2149                           pclath	equ	0xFFA
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           intcon2	equ	0xFF1
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           indf1	equ	0xFE7
  2161                           plusw1	equ	0xFE3
  2162                           fsr1h	equ	0xFE2
  2163                           fsr1l	equ	0xFE1
  2164                           indf2	equ	0xFDF
  2165                           postinc2	equ	0xFDE
  2166                           postdec2	equ	0xFDD
  2167                           plusw2	equ	0xFDB
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172                           	psect	dataCOMRAM
  2173  000063                     __pdataCOMRAM:
  2174                           	opt stack 0
  2175  000063                     _pFont:
  2176                           	opt stack 0
  2177  000063                     	ds	2
  2178  000065                     _events:
  2179                           	opt stack 0
  2180  000065                     	ds	1
  2181                           tosu	equ	0xFFF
  2182                           tosh	equ	0xFFE
  2183                           tosl	equ	0xFFD
  2184                           pclath	equ	0xFFA
  2185                           tblptru	equ	0xFF8
  2186                           tblptrh	equ	0xFF7
  2187                           tblptrl	equ	0xFF6
  2188                           tablat	equ	0xFF5
  2189                           prodh	equ	0xFF4
  2190                           prodl	equ	0xFF3
  2191                           intcon	equ	0xFF2
  2192                           intcon2	equ	0xFF1
  2193                           postinc0	equ	0xFEE
  2194                           wreg	equ	0xFE8
  2195                           indf1	equ	0xFE7
  2196                           plusw1	equ	0xFE3
  2197                           fsr1h	equ	0xFE2
  2198                           fsr1l	equ	0xFE1
  2199                           indf2	equ	0xFDF
  2200                           postinc2	equ	0xFDE
  2201                           postdec2	equ	0xFDD
  2202                           plusw2	equ	0xFDB
  2203                           fsr2h	equ	0xFDA
  2204                           fsr2l	equ	0xFD9
  2205                           status	equ	0xFD8
  2206                           
  2207                           	psect	bssBANK0
  2208  000080                     __pbssBANK0:
  2209                           	opt stack 0
  2210  000080                     _scratch:
  2211                           	opt stack 0
  2212  000080                     	ds	9
  2213  000089                     _dig_P9:
  2214                           	opt stack 0
  2215  000089                     	ds	2
  2216  00008B                     _dig_P8:
  2217                           	opt stack 0
  2218  00008B                     	ds	2
  2219  00008D                     _dig_P7:
  2220                           	opt stack 0
  2221  00008D                     	ds	2
  2222  00008F                     _dig_P6:
  2223                           	opt stack 0
  2224  00008F                     	ds	2
  2225  000091                     _dig_P5:
  2226                           	opt stack 0
  2227  000091                     	ds	2
  2228  000093                     _dig_P4:
  2229                           	opt stack 0
  2230  000093                     	ds	2
  2231  000095                     _dig_P3:
  2232                           	opt stack 0
  2233  000095                     	ds	2
  2234  000097                     _dig_P2:
  2235                           	opt stack 0
  2236  000097                     	ds	2
  2237  000099                     _dig_T3:
  2238                           	opt stack 0
  2239  000099                     	ds	2
  2240  00009B                     _dig_T2:
  2241                           	opt stack 0
  2242  00009B                     	ds	2
  2243  00009D                     _dig_T1:
  2244                           	opt stack 0
  2245  00009D                     	ds	2
  2246  00009F                     _count_sound:
  2247                           	opt stack 0
  2248  00009F                     	ds	1
  2249  0000A0                     key_press@count:
  2250                           	opt stack 0
  2251  0000A0                     	ds	1
  2252  0000A1                     _play_sound:
  2253                           	opt stack 0
  2254  0000A1                     	ds	1
  2255  0000A2                     _i_char:
  2256                           	opt stack 0
  2257  0000A2                     	ds	1
  2258  0000A3                     _Timer0Interrupt:
  2259                           	opt stack 0
  2260  0000A3                     	ds	1
  2261  0000A4                     _Dis_Buff:
  2262                           	opt stack 0
  2263  0000A4                     	ds	32
  2264  0000C4                     _TTime:
  2265                           	opt stack 0
  2266  0000C4                     	ds	7
  2267  0000CB                     _temperbmp280:
  2268                           	opt stack 0
  2269  0000CB                     	ds	4
  2270  0000CF                     _press:
  2271                           	opt stack 0
  2272  0000CF                     	ds	4
  2273  0000D3                     _dig_P1:
  2274                           	opt stack 0
  2275  0000D3                     	ds	2
  2276  0000D5                     _temperature:
  2277                           	opt stack 0
  2278  0000D5                     	ds	2
  2279  0000D7                     _time_flag:
  2280                           	opt stack 0
  2281  0000D7                     	ds	1
  2282  0000D8                     _timer_val:
  2283                           	opt stack 0
  2284  0000D8                     	ds	1
  2285                           tosu	equ	0xFFF
  2286                           tosh	equ	0xFFE
  2287                           tosl	equ	0xFFD
  2288                           pclath	equ	0xFFA
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           prodh	equ	0xFF4
  2294                           prodl	equ	0xFF3
  2295                           intcon	equ	0xFF2
  2296                           intcon2	equ	0xFF1
  2297                           postinc0	equ	0xFEE
  2298                           wreg	equ	0xFE8
  2299                           indf1	equ	0xFE7
  2300                           plusw1	equ	0xFE3
  2301                           fsr1h	equ	0xFE2
  2302                           fsr1l	equ	0xFE1
  2303                           indf2	equ	0xFDF
  2304                           postinc2	equ	0xFDE
  2305                           postdec2	equ	0xFDD
  2306                           plusw2	equ	0xFDB
  2307                           fsr2h	equ	0xFDA
  2308                           fsr2l	equ	0xFD9
  2309                           status	equ	0xFD8
  2310                           
  2311                           	psect	bssBANK1
  2312  000100                     __pbssBANK1:
  2313                           	opt stack 0
  2314  000100                     _TaskArray:
  2315                           	opt stack 0
  2316  000100                     	ds	120
  2317  000178                     _text_buf:
  2318                           	opt stack 0
  2319  000178                     	ds	100
  2320                           tosu	equ	0xFFF
  2321                           tosh	equ	0xFFE
  2322                           tosl	equ	0xFFD
  2323                           pclath	equ	0xFFA
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           prodh	equ	0xFF4
  2329                           prodl	equ	0xFF3
  2330                           intcon	equ	0xFF2
  2331                           intcon2	equ	0xFF1
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           indf1	equ	0xFE7
  2335                           plusw1	equ	0xFE3
  2336                           fsr1h	equ	0xFE2
  2337                           fsr1l	equ	0xFE1
  2338                           indf2	equ	0xFDF
  2339                           postinc2	equ	0xFDE
  2340                           postdec2	equ	0xFDD
  2341                           plusw2	equ	0xFDB
  2342                           fsr2h	equ	0xFDA
  2343                           fsr2l	equ	0xFD9
  2344                           status	equ	0xFD8
  2345                           
  2346                           	psect	cstackBANK0
  2347  0000D9                     __pcstackBANK0:
  2348                           	opt stack 0
  2349  0000D9                     bmp280Convert@adc_P:
  2350                           	opt stack 0
  2351                           
  2352                           ; 4 bytes @ 0x0
  2353  0000D9                     	ds	4
  2354  0000DD                     bmp280Convert@T:
  2355                           	opt stack 0
  2356                           
  2357                           ; 4 bytes @ 0x4
  2358  0000DD                     	ds	4
  2359  0000E1                     bmp280Convert@t_fine:
  2360                           	opt stack 0
  2361                           
  2362                           ; 4 bytes @ 0x8
  2363  0000E1                     	ds	4
  2364  0000E5                     bmp280Convert@adc_T:
  2365                           	opt stack 0
  2366                           
  2367                           ; 4 bytes @ 0xC
  2368  0000E5                     	ds	4
  2369  0000E9                     _bmp280Convert$3035:
  2370                           	opt stack 0
  2371                           
  2372                           ; 4 bytes @ 0x10
  2373  0000E9                     	ds	4
  2374  0000ED                     bmp280Convert@var2:
  2375                           	opt stack 0
  2376                           
  2377                           ; 4 bytes @ 0x14
  2378  0000ED                     	ds	4
  2379  0000F1                     bmp280Convert@P:
  2380                           	opt stack 0
  2381                           
  2382                           ; 4 bytes @ 0x18
  2383  0000F1                     	ds	4
  2384  0000F5                     bmp280Convert@var1:
  2385                           	opt stack 0
  2386                           
  2387                           ; 4 bytes @ 0x1C
  2388  0000F5                     	ds	4
  2389                           tosu	equ	0xFFF
  2390                           tosh	equ	0xFFE
  2391                           tosl	equ	0xFFD
  2392                           pclath	equ	0xFFA
  2393                           tblptru	equ	0xFF8
  2394                           tblptrh	equ	0xFF7
  2395                           tblptrl	equ	0xFF6
  2396                           tablat	equ	0xFF5
  2397                           prodh	equ	0xFF4
  2398                           prodl	equ	0xFF3
  2399                           intcon	equ	0xFF2
  2400                           intcon2	equ	0xFF1
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           indf1	equ	0xFE7
  2404                           plusw1	equ	0xFE3
  2405                           fsr1h	equ	0xFE2
  2406                           fsr1l	equ	0xFE1
  2407                           indf2	equ	0xFDF
  2408                           postinc2	equ	0xFDE
  2409                           postdec2	equ	0xFDD
  2410                           plusw2	equ	0xFDB
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415                           	psect	cstackCOMRAM
  2416  000001                     __pcstackCOMRAM:
  2417                           	opt stack 0
  2418  000001                     i2RTOS_SetTask@taskFunc:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x0
  2422  000001                     	ds	2
  2423  000003                     i2RTOS_SetTask@taskDelay:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x2
  2427  000003                     	ds	2
  2428  000005                     i2RTOS_SetTask@taskPeriod:
  2429                           	opt stack 0
  2430                           
  2431                           ; 2 bytes @ 0x4
  2432  000005                     	ds	2
  2433  000007                     
  2434                           ; 1 bytes @ 0x6
  2435  000007                     	ds	2
  2436  000009                     i2RTOS_SetTask@i:
  2437                           	opt stack 0
  2438                           
  2439                           ; 1 bytes @ 0x8
  2440  000009                     	ds	1
  2441  00000A                     ??_INTERRUPT_InterruptManager:
  2442                           
  2443                           ; 1 bytes @ 0x9
  2444  00000A                     	ds	5
  2445  00000F                     ??_ow_reset:
  2446  00000F                     ??_read_byte:
  2447  00000F                     ??_I2C_Master_Wait:
  2448  00000F                     ??_scroll_text:
  2449  00000F                     ??_bcd_to_decimal:
  2450  00000F                     ?_sprintf:
  2451                           	opt stack 0
  2452  00000F                     ?___lwdiv:
  2453                           	opt stack 0
  2454  00000F                     ?___lmul:
  2455                           	opt stack 0
  2456  00000F                     Send_Byte_7221@dat:
  2457                           	opt stack 0
  2458  00000F                     pixel_on@y:
  2459                           	opt stack 0
  2460  00000F                     pixel_off@y:
  2461                           	opt stack 0
  2462  00000F                     clear_matrix@i:
  2463                           	opt stack 0
  2464  00000F                     key_press@key:
  2465                           	opt stack 0
  2466  00000F                     write_bit@bitval:
  2467                           	opt stack 0
  2468  00000F                     write_eep@data:
  2469                           	opt stack 0
  2470  00000F                     spi_rw@value:
  2471                           	opt stack 0
  2472  00000F                     ___lbdiv@divisor:
  2473                           	opt stack 0
  2474  00000F                     RTOS_SetTask@taskFunc:
  2475                           	opt stack 0
  2476  00000F                     RTOS_DeleteTask@taskFunc:
  2477                           	opt stack 0
  2478  00000F                     read_eep@address:
  2479                           	opt stack 0
  2480  00000F                     sprintf@sp:
  2481                           	opt stack 0
  2482  00000F                     ___lwdiv@dividend:
  2483                           	opt stack 0
  2484  00000F                     ___lmul@multiplier:
  2485                           	opt stack 0
  2486                           
  2487                           ; 4 bytes @ 0xE
  2488  00000F                     	ds	1
  2489  000010                     ??_write_byte:
  2490  000010                     ??_pixel_on:
  2491  000010                     ??_pixel_off:
  2492  000010                     I2C_Master_Write@d:
  2493                           	opt stack 0
  2494  000010                     I2C_Master_Read@a:
  2495                           	opt stack 0
  2496  000010                     Send_Byte_7221@i:
  2497                           	opt stack 0
  2498  000010                     bcd_to_decimal@d:
  2499                           	opt stack 0
  2500  000010                     ow_reset@presence:
  2501                           	opt stack 0
  2502  000010                     write_eep@address:
  2503                           	opt stack 0
  2504  000010                     spi_rw@i:
  2505                           	opt stack 0
  2506  000010                     ___lbdiv@dividend:
  2507                           	opt stack 0
  2508                           
  2509                           ; 1 bytes @ 0xF
  2510  000010                     	ds	1
  2511  000011                     ??_RTOS_DeleteTask:
  2512  000011                     I2C_Master_Read@temp:
  2513                           	opt stack 0
  2514  000011                     Cmd7221@val:
  2515                           	opt stack 0
  2516  000011                     Update_Matrix@buf:
  2517                           	opt stack 0
  2518  000011                     scroll_text@i:
  2519                           	opt stack 0
  2520  000011                     read_byte@val:
  2521                           	opt stack 0
  2522  000011                     bmp280WriteByte@data:
  2523                           	opt stack 0
  2524  000011                     nrf24_write_reg@value:
  2525                           	opt stack 0
  2526  000011                     ___lbdiv@counter:
  2527                           	opt stack 0
  2528  000011                     RTOS_SetTask@taskDelay:
  2529                           	opt stack 0
  2530  000011                     sprintf@f:
  2531                           	opt stack 0
  2532  000011                     ___lwdiv@divisor:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x10
  2536  000011                     	ds	1
  2537  000012                     ?_bmp280ReadInt16:
  2538                           	opt stack 0
  2539  000012                     ?_bmp280ReadInt32:
  2540                           	opt stack 0
  2541  000012                     Cmd7221@adr:
  2542                           	opt stack 0
  2543  000012                     Update_Matrix@data:
  2544                           	opt stack 0
  2545  000012                     pixel_on@x:
  2546                           	opt stack 0
  2547  000012                     DS3231_Read@address:
  2548                           	opt stack 0
  2549  000012                     read_byte@i:
  2550                           	opt stack 0
  2551  000012                     write_byte@val:
  2552                           	opt stack 0
  2553  000012                     bmp280WriteByte@address:
  2554                           	opt stack 0
  2555  000012                     nrf24_write_reg@reg:
  2556                           	opt stack 0
  2557  000012                     ___lbdiv@quotient:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x11
  2561  000012                     	ds	1
  2562  000013                     Cmd7221@i:
  2563                           	opt stack 0
  2564  000013                     Update_Matrix@j:
  2565                           	opt stack 0
  2566  000013                     pixel_off@x:
  2567                           	opt stack 0
  2568  000013                     DS3231_Read@value:
  2569                           	opt stack 0
  2570  000013                     write_byte@temp:
  2571                           	opt stack 0
  2572  000013                     nrf24_init@pay_length:
  2573                           	opt stack 0
  2574  000013                     sprintf@c:
  2575                           	opt stack 0
  2576  000013                     ___lbmod@divisor:
  2577                           	opt stack 0
  2578  000013                     ___lwdiv@counter:
  2579                           	opt stack 0
  2580  000013                     RTOS_SetTask@taskPeriod:
  2581                           	opt stack 0
  2582  000013                     ___lmul@multiplicand:
  2583                           	opt stack 0
  2584                           
  2585                           ; 4 bytes @ 0x12
  2586  000013                     	ds	1
  2587  000014                     ??_bmp280ReadInt16:
  2588  000014                     Update_Matrix@i:
  2589                           	opt stack 0
  2590  000014                     pic_to_led@pic:
  2591                           	opt stack 0
  2592  000014                     getTime@p3:
  2593                           	opt stack 0
  2594  000014                     getDate@p4:
  2595                           	opt stack 0
  2596  000014                     write_byte@i:
  2597                           	opt stack 0
  2598  000014                     nrf24_init@channel:
  2599                           	opt stack 0
  2600  000014                     ___lbmod@dividend:
  2601                           	opt stack 0
  2602  000014                     ___lwdiv@quotient:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x13
  2606  000014                     	ds	1
  2607  000015                     ??_pic_to_led:
  2608  000015                     ??_scroll_left:
  2609  000015                     ??_interval_scroll_text:
  2610  000015                     getTime@p2:
  2611                           	opt stack 0
  2612  000015                     getDate@p3:
  2613                           	opt stack 0
  2614  000015                     ___lbmod@counter:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0x14
  2618  000015                     	ds	1
  2619  000016                     ??_bmp280ReadInt32:
  2620  000016                     ?___lwmod:
  2621                           	opt stack 0
  2622  000016                     scroll_left@j:
  2623                           	opt stack 0
  2624  000016                     interval_scroll_text@i:
  2625                           	opt stack 0
  2626  000016                     getTime@p1:
  2627                           	opt stack 0
  2628  000016                     getDate@p2:
  2629                           	opt stack 0
  2630  000016                     bmp280ReadInt16@address:
  2631                           	opt stack 0
  2632  000016                     ___lbmod@rem:
  2633                           	opt stack 0
  2634  000016                     ___lwmod@dividend:
  2635                           	opt stack 0
  2636                           
  2637                           ; 2 bytes @ 0x15
  2638  000016                     	ds	1
  2639  000017                     ??_FillBuf:
  2640  000017                     ??_decimal_to_bcd:
  2641  000017                     RTOS_SetTask@i:
  2642                           	opt stack 0
  2643  000017                     RTOS_DeleteTask@i:
  2644                           	opt stack 0
  2645  000017                     pic_to_led@mask:
  2646                           	opt stack 0
  2647  000017                     putchar_b_buf@symbol:
  2648                           	opt stack 0
  2649  000017                     putchar_down_s@symbol:
  2650                           	opt stack 0
  2651  000017                     scroll_left@k:
  2652                           	opt stack 0
  2653  000017                     getDate@p1:
  2654                           	opt stack 0
  2655  000017                     bmp280ReadInt16@msb:
  2656                           	opt stack 0
  2657  000017                     ___lmul@product:
  2658                           	opt stack 0
  2659                           
  2660                           ; 4 bytes @ 0x16
  2661  000017                     	ds	1
  2662  000018                     ??_putchar_down_s:
  2663  000018                     pic_to_led@x:
  2664                           	opt stack 0
  2665  000018                     scroll_left@speed:
  2666                           	opt stack 0
  2667  000018                     putchar_b_buf@pF:
  2668                           	opt stack 0
  2669  000018                     ___lwmod@divisor:
  2670                           	opt stack 0
  2671                           
  2672                           ; 2 bytes @ 0x17
  2673  000018                     	ds	1
  2674  000019                     pic_to_led@j:
  2675                           	opt stack 0
  2676  000019                     FillBuf@i:
  2677                           	opt stack 0
  2678  000019                     scroll_left@i:
  2679                           	opt stack 0
  2680  000019                     decimal_to_bcd@d:
  2681                           	opt stack 0
  2682  000019                     bmp280ReadInt16@lsb:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0x18
  2686  000019                     	ds	1
  2687  00001A                     ??_putchar_b_buf:
  2688  00001A                     pic_to_led@i:
  2689                           	opt stack 0
  2690  00001A                     DS3231_Write@value:
  2691                           	opt stack 0
  2692  00001A                     ___lwmod@counter:
  2693                           	opt stack 0
  2694                           
  2695                           ; 1 bytes @ 0x19
  2696  00001A                     	ds	1
  2697  00001B                     ?___lldiv:
  2698                           	opt stack 0
  2699  00001B                     DS3231_Write@address:
  2700                           	opt stack 0
  2701  00001B                     readTemp_Single@buf:
  2702                           	opt stack 0
  2703  00001B                     ___lldiv@dividend:
  2704                           	opt stack 0
  2705                           
  2706                           ; 4 bytes @ 0x1A
  2707  00001B                     	ds	1
  2708  00001C                     putchar_b_buf@mask:
  2709                           	opt stack 0
  2710  00001C                     setTime@mSet:
  2711                           	opt stack 0
  2712  00001C                     setDate@dateSet:
  2713                           	opt stack 0
  2714  00001C                     readTemp_Single@time_flag:
  2715                           	opt stack 0
  2716                           
  2717                           ; 1 bytes @ 0x1B
  2718  00001C                     	ds	1
  2719  00001D                     putchar_b_buf@x:
  2720                           	opt stack 0
  2721  00001D                     putchar_down_s@x:
  2722                           	opt stack 0
  2723  00001D                     setTime@sSet:
  2724                           	opt stack 0
  2725  00001D                     setDate@monthSet:
  2726                           	opt stack 0
  2727  00001D                     readTemp_Single@timer_val:
  2728                           	opt stack 0
  2729                           
  2730                           ; 1 bytes @ 0x1C
  2731  00001D                     	ds	1
  2732  00001E                     ??_readTemp_Single:
  2733  00001E                     putchar_b_buf@j:
  2734                           	opt stack 0
  2735  00001E                     putchar_down_s@k:
  2736                           	opt stack 0
  2737  00001E                     setTime@hSet:
  2738                           	opt stack 0
  2739  00001E                     setDate@yearSet:
  2740                           	opt stack 0
  2741                           
  2742                           ; 1 bytes @ 0x1D
  2743  00001E                     	ds	1
  2744  00001F                     putchar_b_buf@i:
  2745                           	opt stack 0
  2746  00001F                     putchar_down_s@j:
  2747                           	opt stack 0
  2748  00001F                     setDate@daySet:
  2749                           	opt stack 0
  2750  00001F                     ___lldiv@divisor:
  2751                           	opt stack 0
  2752                           
  2753                           ; 4 bytes @ 0x1E
  2754  00001F                     	ds	1
  2755  000020                     putchar_down_s@i:
  2756                           	opt stack 0
  2757  000020                     readTemp_Single@fptmp:
  2758                           	opt stack 0
  2759                           
  2760                           ; 1 bytes @ 0x1F
  2761  000020                     	ds	1
  2762  000021                     readTemp_Single@tmp:
  2763                           	opt stack 0
  2764                           
  2765                           ; 1 bytes @ 0x20
  2766  000021                     	ds	1
  2767  000022                     readTemp_Single@i:
  2768                           	opt stack 0
  2769                           
  2770                           ; 1 bytes @ 0x21
  2771  000022                     	ds	1
  2772  000023                     readTemp_Single@temp:
  2773                           	opt stack 0
  2774  000023                     ___lldiv@quotient:
  2775                           	opt stack 0
  2776                           
  2777                           ; 4 bytes @ 0x22
  2778  000023                     	ds	3
  2779  000026                     bmp280ReadInt32@address:
  2780                           	opt stack 0
  2781                           
  2782                           ; 1 bytes @ 0x25
  2783  000026                     	ds	1
  2784  000027                     ___lldiv@counter:
  2785                           	opt stack 0
  2786  000027                     bmp280ReadInt32@msb:
  2787                           	opt stack 0
  2788                           
  2789                           ; 4 bytes @ 0x26
  2790  000027                     	ds	1
  2791  000028                     ?___llmod:
  2792                           	opt stack 0
  2793  000028                     ___llmod@dividend:
  2794                           	opt stack 0
  2795                           
  2796                           ; 4 bytes @ 0x27
  2797  000028                     	ds	3
  2798  00002B                     bmp280ReadInt32@lsb:
  2799                           	opt stack 0
  2800                           
  2801                           ; 4 bytes @ 0x2A
  2802  00002B                     	ds	1
  2803  00002C                     ___llmod@divisor:
  2804                           	opt stack 0
  2805                           
  2806                           ; 4 bytes @ 0x2B
  2807  00002C                     	ds	3
  2808  00002F                     bmp280ReadInt32@xlsb:
  2809                           	opt stack 0
  2810                           
  2811                           ; 4 bytes @ 0x2E
  2812  00002F                     	ds	1
  2813  000030                     ___llmod@counter:
  2814                           	opt stack 0
  2815                           
  2816                           ; 1 bytes @ 0x2F
  2817  000030                     	ds	1
  2818  000031                     putchar_down@symbol:
  2819                           	opt stack 0
  2820                           
  2821                           ; 1 bytes @ 0x30
  2822  000031                     	ds	1
  2823  000032                     putchar_down@pF:
  2824                           	opt stack 0
  2825                           
  2826                           ; 2 bytes @ 0x31
  2827  000032                     	ds	1
  2828  000033                     ?_bmp280ReadTemp:
  2829                           	opt stack 0
  2830  000033                     ?_bmp280ReadPressure:
  2831                           	opt stack 0
  2832                           
  2833                           ; 4 bytes @ 0x32
  2834  000033                     	ds	1
  2835  000034                     ??_putchar_down:
  2836                           
  2837                           ; 1 bytes @ 0x33
  2838  000034                     	ds	3
  2839  000037                     bmp280ReadTemp@temperature:
  2840                           	opt stack 0
  2841  000037                     bmp280ReadPressure@pressure:
  2842                           	opt stack 0
  2843                           
  2844                           ; 4 bytes @ 0x36
  2845  000037                     	ds	2
  2846  000039                     putchar_down@x:
  2847                           	opt stack 0
  2848                           
  2849                           ; 1 bytes @ 0x38
  2850  000039                     	ds	1
  2851  00003A                     putchar_down@k:
  2852                           	opt stack 0
  2853                           
  2854                           ; 1 bytes @ 0x39
  2855  00003A                     	ds	1
  2856  00003B                     putchar_down@j:
  2857                           	opt stack 0
  2858  00003B                     bmp280Convert@press:
  2859                           	opt stack 0
  2860                           
  2861                           ; 1 bytes @ 0x3A
  2862  00003B                     	ds	1
  2863  00003C                     putchar_down@i:
  2864                           	opt stack 0
  2865  00003C                     bmp280Convert@temper:
  2866                           	opt stack 0
  2867                           
  2868                           ; 1 bytes @ 0x3B
  2869  00003C                     	ds	1
  2870  00003D                     ??_bmp280Convert:
  2871  00003D                     ??_home_temp:
  2872  00003D                     ??_pressure:
  2873                           
  2874                           ; 1 bytes @ 0x3C
  2875  00003D                     	ds	19
  2876  000050                     ??_RTOS_DispatchTask:
  2877                           
  2878                           ; 1 bytes @ 0x4F
  2879  000050                     	ds	4
  2880  000054                     RTOS_DispatchTask@function:
  2881                           	opt stack 0
  2882                           
  2883                           ; 2 bytes @ 0x53
  2884  000054                     	ds	2
  2885  000056                     RTOS_DispatchTask@j:
  2886                           	opt stack 0
  2887                           
  2888                           ; 1 bytes @ 0x55
  2889  000056                     	ds	1
  2890  000057                     RTOS_DispatchTask@i:
  2891                           	opt stack 0
  2892                           
  2893                           ; 1 bytes @ 0x56
  2894  000057                     	ds	1
  2895  000058                     ??_main:
  2896                           
  2897                           ; 1 bytes @ 0x57
  2898  000058                     	ds	1
  2899                           tosu	equ	0xFFF
  2900                           tosh	equ	0xFFE
  2901                           tosl	equ	0xFFD
  2902                           pclath	equ	0xFFA
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           prodh	equ	0xFF4
  2908                           prodl	equ	0xFF3
  2909                           intcon	equ	0xFF2
  2910                           intcon2	equ	0xFF1
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           indf1	equ	0xFE7
  2914                           plusw1	equ	0xFE3
  2915                           fsr1h	equ	0xFE2
  2916                           fsr1l	equ	0xFE1
  2917                           indf2	equ	0xFDF
  2918                           postinc2	equ	0xFDE
  2919                           postdec2	equ	0xFDD
  2920                           plusw2	equ	0xFDB
  2921                           fsr2h	equ	0xFDA
  2922                           fsr2l	equ	0xFD9
  2923                           status	equ	0xFD8
  2924                           
  2925 ;;
  2926 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2927 ;;
  2928 ;; *************** function _main *****************
  2929 ;; Defined at:
  2930 ;;		line 18 in file "main.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;		None
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;		None
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      void 
  2937 ;; Registers used:
  2938 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;Total ram usage:        1 bytes
  2949 ;; Hardware stack levels required when called:   10
  2950 ;; This function calls:
  2951 ;;		_RTOS_DispatchTask
  2952 ;;		_RTOS_SetTask
  2953 ;;		_SYSTEM_Initialize
  2954 ;;		_clear_matrix
  2955 ;; This function is called by:
  2956 ;;		Startup code after reset
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text0
  2961  0021F0                     __ptext0:
  2962                           	opt stack 0
  2963  0021F0                     _main:
  2964                           	opt stack 21
  2965                           
  2966                           ;main.c: 20: _delay((unsigned long)((10)*(40000000/4000.0)));
  2967                           
  2968                           ;incstack = 0
  2969  0021F0  0E82               	movlw	130
  2970  0021F2  6E58               	movwf	??_main& (0+255),c
  2971  0021F4  0EDE               	movlw	222
  2972  0021F6                     u5287:
  2973  0021F6  2EE8               	decfsz	wreg,f,c
  2974  0021F8  D7FE               	bra	u5287
  2975  0021FA  2E58               	decfsz	??_main& (0+255),f,c
  2976  0021FC  D7FC               	bra	u5287
  2977                           
  2978                           ;main.c: 22: SYSTEM_Initialize();
  2979  0021FE  ECDC  F011         	call	_SYSTEM_Initialize	;wreg free
  2980                           
  2981                           ;main.c: 27: clear_matrix();
  2982  002202  ECE9  F014         	call	_clear_matrix	;wreg free
  2983                           
  2984                           ;main.c: 30: (INTCONbits.GIE = 0);
  2985  002206  9EF2               	bcf	intcon,7,c	;volatile
  2986                           
  2987                           ;main.c: 31: RTOS_SetTask(time_led, 100, 20);
  2988  002208  0EE6               	movlw	low _time_led
  2989  00220A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  2990  00220C  0E13               	movlw	high _time_led
  2991  00220E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  2992  002210  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  2993  002212  0E64               	movlw	100
  2994  002214  6E11               	movwf	RTOS_SetTask@taskDelay,c
  2995  002216  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  2996  002218  0E14               	movlw	20
  2997  00221A  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  2998  00221C  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  2999                           
  3000                           ;main.c: 32: RTOS_SetTask(key_press,0,1);
  3001  002220  0E8A               	movlw	low _key_press
  3002  002222  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  3003  002224  0E22               	movlw	high _key_press
  3004  002226  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  3005  002228  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  3006  00222A  6A11               	clrf	RTOS_SetTask@taskDelay,c
  3007  00222C  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  3008  00222E  0E01               	movlw	1
  3009  002230  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  3010  002232  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  3011                           
  3012                           ;main.c: 33: (INTCONbits.GIE = 1);
  3013  002236  8EF2               	bsf	intcon,7,c	;volatile
  3014  002238                     l6802:
  3015                           
  3016                           ;main.c: 36: {
  3017                           ;main.c: 37: RTOS_DispatchTask();
  3018  002238  ECEB  F00B         	call	_RTOS_DispatchTask	;wreg free
  3019  00223C  D7FD               	goto	l6802
  3020  00223E                     __end_of_main:
  3021                           	opt stack 0
  3022                           tosu	equ	0xFFF
  3023                           tosh	equ	0xFFE
  3024                           tosl	equ	0xFFD
  3025                           pclath	equ	0xFFA
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           tblptrl	equ	0xFF6
  3029                           tablat	equ	0xFF5
  3030                           prodh	equ	0xFF4
  3031                           prodl	equ	0xFF3
  3032                           intcon	equ	0xFF2
  3033                           intcon2	equ	0xFF1
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           indf1	equ	0xFE7
  3037                           plusw1	equ	0xFE3
  3038                           fsr1h	equ	0xFE2
  3039                           fsr1l	equ	0xFE1
  3040                           indf2	equ	0xFDF
  3041                           postinc2	equ	0xFDE
  3042                           postdec2	equ	0xFDD
  3043                           plusw2	equ	0xFDB
  3044                           fsr2h	equ	0xFDA
  3045                           fsr2l	equ	0xFD9
  3046                           status	equ	0xFD8
  3047                           
  3048 ;; *************** function _SYSTEM_Initialize *****************
  3049 ;; Defined at:
  3050 ;;		line 65 in file "init.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;		None
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0, cstack
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;Total ram usage:        0 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    7
  3071 ;; This function calls:
  3072 ;;		_DS3231_init
  3073 ;;		_I2C_Init
  3074 ;;		_Init7221
  3075 ;;		_Interrupt_Init
  3076 ;;		_Port_Init
  3077 ;;		_RTOS_Init
  3078 ;;		_TMRInit
  3079 ;;		_bmp280_Init
  3080 ;;		_init_ds18b20
  3081 ;;		_init_uart
  3082 ;;		_nrf24_init
  3083 ;;		_read_eep
  3084 ;;		_set_font
  3085 ;;		_sound_init
  3086 ;;		_spi_init
  3087 ;; This function is called by:
  3088 ;;		_main
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text1
  3093  0023B8                     __ptext1:
  3094                           	opt stack 0
  3095  0023B8                     _SYSTEM_Initialize:
  3096                           	opt stack 23
  3097                           
  3098                           ;init.c: 68: Port_Init();
  3099                           
  3100                           ;incstack = 0
  3101  0023B8  EC5D  F014         	call	_Port_Init	;wreg free
  3102                           
  3103                           ;init.c: 69: I2C_Init();
  3104  0023BC  ECAD  F014         	call	_I2C_Init	;wreg free
  3105                           
  3106                           ;init.c: 70: Init7221();
  3107  0023C0  ECE3  F012         	call	_Init7221	;wreg free
  3108                           
  3109                           ;init.c: 71: TMRInit();
  3110  0023C4  EC4F  F014         	call	_TMRInit	;wreg free
  3111                           
  3112                           ;init.c: 72: Interrupt_Init();
  3113  0023C8  EC27  F015         	call	_Interrupt_Init	;wreg free
  3114                           
  3115                           ;init.c: 73: DS3231_init();
  3116  0023CC  ECE0  F014         	call	_DS3231_init	;wreg free
  3117                           
  3118                           ;init.c: 74: init_ds18b20();
  3119  0023D0  EC53  F013         	call	_init_ds18b20	;wreg free
  3120                           
  3121                           ;init.c: 75: RTOS_Init();
  3122  0023D4  ECFA  F014         	call	_RTOS_Init	;wreg free
  3123                           
  3124                           ;init.c: 76: init_uart();
  3125  0023D8  EC95  F014         	call	_init_uart	;wreg free
  3126                           
  3127                           ;init.c: 78: bmp280_Init();
  3128  0023DC  ECCC  F00C         	call	_bmp280_Init	;wreg free
  3129                           
  3130                           ;init.c: 79: type_font = read_eep(0);
  3131  0023E0  6A10               	clrf	read_eep@address+1,c
  3132  0023E2  6A0F               	clrf	read_eep@address,c
  3133  0023E4  ECD7  F014         	call	_read_eep	;wreg free
  3134  0023E8  6E62               	movwf	_type_font,c
  3135                           
  3136                           ;init.c: 80: set_font();
  3137  0023EA  EC91  F011         	call	_set_font	;wreg free
  3138                           
  3139                           ;init.c: 81: sound_init();
  3140  0023EE  EC24  F015         	call	_sound_init	;wreg free
  3141                           
  3142                           ;init.c: 82: spi_init();
  3143  0023F2  ECF2  F014         	call	_spi_init	;wreg free
  3144                           
  3145                           ;init.c: 83: nrf24_init(100, 2);
  3146  0023F6  0E02               	movlw	2
  3147  0023F8  6E13               	movwf	nrf24_init@pay_length,c
  3148  0023FA  0E64               	movlw	100
  3149  0023FC  EF5E  F00F         	goto	_nrf24_init
  3150  002400                     __end_of_SYSTEM_Initialize:
  3151                           	opt stack 0
  3152                           tosu	equ	0xFFF
  3153                           tosh	equ	0xFFE
  3154                           tosl	equ	0xFFD
  3155                           pclath	equ	0xFFA
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           prodh	equ	0xFF4
  3161                           prodl	equ	0xFF3
  3162                           intcon	equ	0xFF2
  3163                           intcon2	equ	0xFF1
  3164                           postinc0	equ	0xFEE
  3165                           wreg	equ	0xFE8
  3166                           indf1	equ	0xFE7
  3167                           plusw1	equ	0xFE3
  3168                           fsr1h	equ	0xFE2
  3169                           fsr1l	equ	0xFE1
  3170                           indf2	equ	0xFDF
  3171                           postinc2	equ	0xFDE
  3172                           postdec2	equ	0xFDD
  3173                           plusw2	equ	0xFDB
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _spi_init *****************
  3179 ;; Defined at:
  3180 ;;		line 3 in file "spi.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;		None
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;		None
  3185 ;; Return value:  Size  Location     Type
  3186 ;;                  1    wreg      void 
  3187 ;; Registers used:
  3188 ;;		None
  3189 ;; Tracked objects:
  3190 ;;		On entry : 0/0
  3191 ;;		On exit  : 0/0
  3192 ;;		Unchanged: 0/0
  3193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;Total ram usage:        0 bytes
  3199 ;; Hardware stack levels used:    1
  3200 ;; Hardware stack levels required when called:    3
  3201 ;; This function calls:
  3202 ;;		Nothing
  3203 ;; This function is called by:
  3204 ;;		_SYSTEM_Initialize
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           	psect	text2
  3209  0029E4                     __ptext2:
  3210                           	opt stack 0
  3211  0029E4                     _spi_init:
  3212                           	opt stack 26
  3213                           
  3214                           ;spi.c: 4: TRISDbits.RD3 = 1;
  3215                           
  3216                           ;incstack = 0
  3217  0029E4  8695               	bsf	3989,3,c	;volatile
  3218                           
  3219                           ;spi.c: 5: TRISDbits.RD4 = 0;
  3220  0029E6  9895               	bcf	3989,4,c	;volatile
  3221                           
  3222                           ;spi.c: 6: TRISCbits.RC1 = 0;
  3223  0029E8  9294               	bcf	3988,1,c	;volatile
  3224                           
  3225                           ;spi.c: 7: TRISCbits.RC2 = 0;
  3226  0029EA  9494               	bcf	3988,2,c	;volatile
  3227                           
  3228                           ;spi.c: 8: TRISDbits.RD5 = 0;
  3229  0029EC  9A95               	bcf	3989,5,c	;volatile
  3230                           
  3231                           ;spi.c: 9: TRISDbits.RD6 = 1;
  3232  0029EE  8C95               	bsf	3989,6,c	;volatile
  3233                           
  3234                           ;spi.c: 10: LATCbits.LC2 = 1;
  3235  0029F0  848B               	bsf	3979,2,c	;volatile
  3236  0029F2  0012               	return		;funcret
  3237  0029F4                     __end_of_spi_init:
  3238                           	opt stack 0
  3239                           tosu	equ	0xFFF
  3240                           tosh	equ	0xFFE
  3241                           tosl	equ	0xFFD
  3242                           pclath	equ	0xFFA
  3243                           tblptru	equ	0xFF8
  3244                           tblptrh	equ	0xFF7
  3245                           tblptrl	equ	0xFF6
  3246                           tablat	equ	0xFF5
  3247                           prodh	equ	0xFF4
  3248                           prodl	equ	0xFF3
  3249                           intcon	equ	0xFF2
  3250                           intcon2	equ	0xFF1
  3251                           postinc0	equ	0xFEE
  3252                           wreg	equ	0xFE8
  3253                           indf1	equ	0xFE7
  3254                           plusw1	equ	0xFE3
  3255                           fsr1h	equ	0xFE2
  3256                           fsr1l	equ	0xFE1
  3257                           indf2	equ	0xFDF
  3258                           postinc2	equ	0xFDE
  3259                           postdec2	equ	0xFDD
  3260                           plusw2	equ	0xFDB
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _sound_init *****************
  3266 ;; Defined at:
  3267 ;;		line 7 in file "sound.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      void 
  3274 ;; Registers used:
  3275 ;;		status,2, status,0
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    3
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		_SYSTEM_Initialize
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text3
  3296  002A48                     __ptext3:
  3297                           	opt stack 0
  3298  002A48                     _sound_init:
  3299                           	opt stack 26
  3300                           
  3301                           ;sound.c: 9: TRISD &= ~(1<<7);
  3302                           
  3303                           ;incstack = 0
  3304  002A48  9E95               	bcf	3989,7,c	;volatile
  3305                           
  3306                           ;sound.c: 10: LATD &= ~(1<<7);
  3307  002A4A  9E8C               	bcf	3980,7,c	;volatile
  3308  002A4C  0012               	return		;funcret
  3309  002A4E                     __end_of_sound_init:
  3310                           	opt stack 0
  3311                           tosu	equ	0xFFF
  3312                           tosh	equ	0xFFE
  3313                           tosl	equ	0xFFD
  3314                           pclath	equ	0xFFA
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           intcon2	equ	0xFF1
  3323                           postinc0	equ	0xFEE
  3324                           wreg	equ	0xFE8
  3325                           indf1	equ	0xFE7
  3326                           plusw1	equ	0xFE3
  3327                           fsr1h	equ	0xFE2
  3328                           fsr1l	equ	0xFE1
  3329                           indf2	equ	0xFDF
  3330                           postinc2	equ	0xFDE
  3331                           postdec2	equ	0xFDD
  3332                           plusw2	equ	0xFDB
  3333                           fsr2h	equ	0xFDA
  3334                           fsr2l	equ	0xFD9
  3335                           status	equ	0xFD8
  3336                           
  3337 ;; *************** function _read_eep *****************
  3338 ;; Defined at:
  3339 ;;		line 25 in file "eeprom.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;  address         2   14[COMRAM] unsigned short 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      unsigned char 
  3346 ;; Registers used:
  3347 ;;		wreg, status,2
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3353 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;Total ram usage:        2 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    3
  3360 ;; This function calls:
  3361 ;;		Nothing
  3362 ;; This function is called by:
  3363 ;;		_SYSTEM_Initialize
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text4
  3368  0029AE                     __ptext4:
  3369                           	opt stack 0
  3370  0029AE                     _read_eep:
  3371                           	opt stack 26
  3372  0029AE                     l1104:
  3373  0029AE  B2A6               	btfsc	4006,1,c	;volatile
  3374  0029B0  D7FE               	goto	l1104
  3375                           
  3376                           ;eeprom.c: 30: EEADR = address;
  3377  0029B2  C00F  FFA9         	movff	read_eep@address,4009	;volatile
  3378                           
  3379                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  3380  0029B6  9EA6               	bcf	4006,7,c	;volatile
  3381                           
  3382                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  3383  0029B8  9CA6               	bcf	4006,6,c	;volatile
  3384                           
  3385                           ;eeprom.c: 33: EECON1bits.RD = 1;
  3386  0029BA  80A6               	bsf	4006,0,c	;volatile
  3387                           
  3388                           ;eeprom.c: 34: return( EEDATA );
  3389  0029BC  50A8               	movf	4008,w,c	;volatile
  3390  0029BE  0012               	return		;funcret
  3391  0029C0                     __end_of_read_eep:
  3392                           	opt stack 0
  3393                           tosu	equ	0xFFF
  3394                           tosh	equ	0xFFE
  3395                           tosl	equ	0xFFD
  3396                           pclath	equ	0xFFA
  3397                           tblptru	equ	0xFF8
  3398                           tblptrh	equ	0xFF7
  3399                           tblptrl	equ	0xFF6
  3400                           tablat	equ	0xFF5
  3401                           prodh	equ	0xFF4
  3402                           prodl	equ	0xFF3
  3403                           intcon	equ	0xFF2
  3404                           intcon2	equ	0xFF1
  3405                           postinc0	equ	0xFEE
  3406                           wreg	equ	0xFE8
  3407                           indf1	equ	0xFE7
  3408                           plusw1	equ	0xFE3
  3409                           fsr1h	equ	0xFE2
  3410                           fsr1l	equ	0xFE1
  3411                           indf2	equ	0xFDF
  3412                           postinc2	equ	0xFDE
  3413                           postdec2	equ	0xFDD
  3414                           plusw2	equ	0xFDB
  3415                           fsr2h	equ	0xFDA
  3416                           fsr2l	equ	0xFD9
  3417                           status	equ	0xFD8
  3418                           
  3419 ;; *************** function _nrf24_init *****************
  3420 ;; Defined at:
  3421 ;;		line 12 in file "nrf24l01p.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;  channel         1    wreg     unsigned char 
  3424 ;;  pay_length      1   18[COMRAM] unsigned char 
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;  channel         1   19[COMRAM] unsigned char 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3436 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;Total ram usage:        2 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    5
  3443 ;; This function calls:
  3444 ;;		_nrf24_write_reg
  3445 ;; This function is called by:
  3446 ;;		_SYSTEM_Initialize
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text5
  3451  001EBC                     __ptext5:
  3452                           	opt stack 0
  3453  001EBC                     _nrf24_init:
  3454                           	opt stack 24
  3455                           
  3456                           ;incstack = 0
  3457                           ;nrf24_init@channel stored from wreg
  3458  001EBC  6E14               	movwf	nrf24_init@channel,c
  3459                           
  3460                           ;nrf24l01p.c: 15: nrf24_write_reg(0x05, channel);
  3461  001EBE  C014  F011         	movff	nrf24_init@channel,nrf24_write_reg@value
  3462  001EC2  0E05               	movlw	5
  3463  001EC4  ECA2  F014         	call	_nrf24_write_reg
  3464                           
  3465                           ;nrf24l01p.c: 17: nrf24_write_reg(0x11, 0x00);
  3466  001EC8  6A11               	clrf	nrf24_write_reg@value,c
  3467  001ECA  0E11               	movlw	17
  3468  001ECC  ECA2  F014         	call	_nrf24_write_reg
  3469                           
  3470                           ;nrf24l01p.c: 18: nrf24_write_reg(0x12, pay_length);
  3471  001ED0  C013  F011         	movff	nrf24_init@pay_length,nrf24_write_reg@value
  3472  001ED4  0E12               	movlw	18
  3473  001ED6  ECA2  F014         	call	_nrf24_write_reg
  3474                           
  3475                           ;nrf24l01p.c: 19: nrf24_write_reg(0x13, 0x00);
  3476  001EDA  6A11               	clrf	nrf24_write_reg@value,c
  3477  001EDC  0E13               	movlw	19
  3478  001EDE  ECA2  F014         	call	_nrf24_write_reg
  3479                           
  3480                           ;nrf24l01p.c: 20: nrf24_write_reg(0x14, 0x00);
  3481  001EE2  6A11               	clrf	nrf24_write_reg@value,c
  3482  001EE4  0E14               	movlw	20
  3483  001EE6  ECA2  F014         	call	_nrf24_write_reg
  3484                           
  3485                           ;nrf24l01p.c: 21: nrf24_write_reg(0x15, 0x00);
  3486  001EEA  6A11               	clrf	nrf24_write_reg@value,c
  3487  001EEC  0E15               	movlw	21
  3488  001EEE  ECA2  F014         	call	_nrf24_write_reg
  3489                           
  3490                           ;nrf24l01p.c: 22: nrf24_write_reg(0x16, 0x00);
  3491  001EF2  6A11               	clrf	nrf24_write_reg@value,c
  3492  001EF4  0E16               	movlw	22
  3493  001EF6  ECA2  F014         	call	_nrf24_write_reg
  3494                           
  3495                           ;nrf24l01p.c: 25: nrf24_write_reg(0x06, (0 << 3) | ((0x03) << 1));
  3496  001EFA  0E06               	movlw	6
  3497  001EFC  6E11               	movwf	nrf24_write_reg@value,c
  3498  001EFE  ECA2  F014         	call	_nrf24_write_reg
  3499                           
  3500                           ;nrf24l01p.c: 28: nrf24_write_reg(0x00, ((1 << 3) | (0 << 2)));
  3501  001F02  0E08               	movlw	8
  3502  001F04  6E11               	movwf	nrf24_write_reg@value,c
  3503  001F06  0E00               	movlw	0
  3504  001F08  ECA2  F014         	call	_nrf24_write_reg
  3505                           
  3506                           ;nrf24l01p.c: 31: nrf24_write_reg(0x01, (1 << 0) | (1 << 1) | (0 << 2) | (0 << 3) | (0 <
      +                          < 4) | (0 << 5));
  3507  001F0C  0E03               	movlw	3
  3508  001F0E  6E11               	movwf	nrf24_write_reg@value,c
  3509  001F10  0E01               	movlw	1
  3510  001F12  ECA2  F014         	call	_nrf24_write_reg
  3511                           
  3512                           ;nrf24l01p.c: 34: nrf24_write_reg(0x02, (1 << 0) | (1 << 1) | (0 << 2) | (0 << 3) | (0 <
      +                          < 4) | (0 << 5));
  3513  001F16  0E03               	movlw	3
  3514  001F18  6E11               	movwf	nrf24_write_reg@value,c
  3515  001F1A  0E02               	movlw	2
  3516  001F1C  ECA2  F014         	call	_nrf24_write_reg
  3517                           
  3518                           ;nrf24l01p.c: 37: nrf24_write_reg(0x04, (0x04 << 4) | (0x0F << 0));
  3519  001F20  0E4F               	movlw	79
  3520  001F22  6E11               	movwf	nrf24_write_reg@value,c
  3521  001F24  0E04               	movlw	4
  3522  001F26  ECA2  F014         	call	_nrf24_write_reg
  3523                           
  3524                           ;nrf24l01p.c: 40: nrf24_write_reg(0x1C,(0<<0)|(0<<1)|(0<<2)|(0<<3)|(0<<4)|(0<<5));
  3525  001F2A  6A11               	clrf	nrf24_write_reg@value,c
  3526  001F2C  0E1C               	movlw	28
  3527  001F2E  EFA2  F014         	goto	_nrf24_write_reg
  3528  001F32                     __end_of_nrf24_init:
  3529                           	opt stack 0
  3530                           tosu	equ	0xFFF
  3531                           tosh	equ	0xFFE
  3532                           tosl	equ	0xFFD
  3533                           pclath	equ	0xFFA
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           intcon2	equ	0xFF1
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           indf1	equ	0xFE7
  3545                           plusw1	equ	0xFE3
  3546                           fsr1h	equ	0xFE2
  3547                           fsr1l	equ	0xFE1
  3548                           indf2	equ	0xFDF
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           plusw2	equ	0xFDB
  3552                           fsr2h	equ	0xFDA
  3553                           fsr2l	equ	0xFD9
  3554                           status	equ	0xFD8
  3555                           
  3556 ;; *************** function _nrf24_write_reg *****************
  3557 ;; Defined at:
  3558 ;;		line 88 in file "nrf24l01p.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  reg             1    wreg     unsigned char 
  3561 ;;  value           1   16[COMRAM] unsigned char 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  reg             1   17[COMRAM] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3573 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;Total ram usage:        2 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    4
  3580 ;; This function calls:
  3581 ;;		_spi_rw
  3582 ;; This function is called by:
  3583 ;;		_nrf24_init
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text6
  3588  002944                     __ptext6:
  3589                           	opt stack 0
  3590  002944                     _nrf24_write_reg:
  3591                           	opt stack 24
  3592                           
  3593                           ;incstack = 0
  3594                           ;nrf24_write_reg@reg stored from wreg
  3595  002944  6E12               	movwf	nrf24_write_reg@reg,c
  3596                           
  3597                           ;nrf24l01p.c: 89: LATCbits.LC2 = 0;
  3598  002946  948B               	bcf	3979,2,c	;volatile
  3599                           
  3600                           ;nrf24l01p.c: 90: spi_rw(0b00100000 | reg);
  3601  002948  5012               	movf	nrf24_write_reg@reg,w,c
  3602  00294A  0920               	iorlw	32
  3603  00294C  EC3E  F013         	call	_spi_rw
  3604                           
  3605                           ;nrf24l01p.c: 91: spi_rw(value);
  3606  002950  5011               	movf	nrf24_write_reg@value,w,c
  3607  002952  EC3E  F013         	call	_spi_rw
  3608                           
  3609                           ;nrf24l01p.c: 92: LATCbits.LC2 = 1;
  3610  002956  848B               	bsf	3979,2,c	;volatile
  3611  002958  0012               	return		;funcret
  3612  00295A                     __end_of_nrf24_write_reg:
  3613                           	opt stack 0
  3614                           tosu	equ	0xFFF
  3615                           tosh	equ	0xFFE
  3616                           tosl	equ	0xFFD
  3617                           pclath	equ	0xFFA
  3618                           tblptru	equ	0xFF8
  3619                           tblptrh	equ	0xFF7
  3620                           tblptrl	equ	0xFF6
  3621                           tablat	equ	0xFF5
  3622                           prodh	equ	0xFF4
  3623                           prodl	equ	0xFF3
  3624                           intcon	equ	0xFF2
  3625                           intcon2	equ	0xFF1
  3626                           postinc0	equ	0xFEE
  3627                           wreg	equ	0xFE8
  3628                           indf1	equ	0xFE7
  3629                           plusw1	equ	0xFE3
  3630                           fsr1h	equ	0xFE2
  3631                           fsr1l	equ	0xFE1
  3632                           indf2	equ	0xFDF
  3633                           postinc2	equ	0xFDE
  3634                           postdec2	equ	0xFDD
  3635                           plusw2	equ	0xFDB
  3636                           fsr2h	equ	0xFDA
  3637                           fsr2l	equ	0xFD9
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function _spi_rw *****************
  3641 ;; Defined at:
  3642 ;;		line 22 in file "spi.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  value           1    wreg     unsigned char 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  value           1   14[COMRAM] unsigned char 
  3647 ;;  i               1   15[COMRAM] unsigned char 
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      unsigned char 
  3650 ;; Registers used:
  3651 ;;		wreg, status,2, status,0
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;Total ram usage:        2 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    3
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_nrf24_write_reg
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text7
  3672  00267C                     __ptext7:
  3673                           	opt stack 0
  3674  00267C                     _spi_rw:
  3675                           	opt stack 24
  3676                           
  3677                           ;incstack = 0
  3678                           ;spi_rw@value stored from wreg
  3679  00267C  6E0F               	movwf	spi_rw@value,c
  3680                           
  3681                           ;spi.c: 23: uint8_t i;
  3682                           ;spi.c: 24: for (i = 0; i < 8; i++)
  3683  00267E  6A10               	clrf	spi_rw@i,c
  3684  002680                     l1227:
  3685                           
  3686                           ;spi.c: 25: {
  3687                           ;spi.c: 26: if (value & 0x80) {
  3688  002680  AE0F               	btfss	spi_rw@value,7,c
  3689  002682  D002               	goto	l1229
  3690                           
  3691                           ;spi.c: 27: LATDbits.LD4 = 1;
  3692  002684  888C               	bsf	3980,4,c	;volatile
  3693                           
  3694                           ;spi.c: 28: } else {
  3695  002686  D001               	goto	l2222
  3696  002688                     l1229:
  3697                           
  3698                           ;spi.c: 29: LATDbits.LD4 = 0;
  3699  002688  988C               	bcf	3980,4,c	;volatile
  3700  00268A                     l2222:
  3701                           
  3702                           ;spi.c: 30: }
  3703                           ;spi.c: 32: value = (value << 1);
  3704  00268A  90D8               	bcf	status,0,c
  3705  00268C  360F               	rlcf	spi_rw@value,f,c
  3706                           
  3707                           ;spi.c: 33: LATDbits.LD5 = 1;
  3708  00268E  8A8C               	bsf	3980,5,c	;volatile
  3709  002690  0E01               	movlw	1
  3710                           
  3711                           ;spi.c: 34: value |= PORTDbits.RD3;
  3712  002692  A683               	btfss	3971,3,c	;volatile
  3713  002694  0E00               	movlw	0
  3714  002696  120F               	iorwf	spi_rw@value,f,c
  3715                           
  3716                           ;spi.c: 35: LATDbits.LD5 = 0;
  3717  002698  9A8C               	bcf	3980,5,c	;volatile
  3718  00269A  2A10               	incf	spi_rw@i,f,c
  3719  00269C  0E07               	movlw	7
  3720  00269E  6410               	cpfsgt	spi_rw@i,c
  3721  0026A0  D7EF               	goto	l1227
  3722                           
  3723                           ;spi.c: 36: }
  3724                           ;spi.c: 37: return (value);
  3725  0026A2  500F               	movf	spi_rw@value,w,c
  3726  0026A4  0012               	return		;funcret
  3727  0026A6                     __end_of_spi_rw:
  3728                           	opt stack 0
  3729                           tosu	equ	0xFFF
  3730                           tosh	equ	0xFFE
  3731                           tosl	equ	0xFFD
  3732                           pclath	equ	0xFFA
  3733                           tblptru	equ	0xFF8
  3734                           tblptrh	equ	0xFF7
  3735                           tblptrl	equ	0xFF6
  3736                           tablat	equ	0xFF5
  3737                           prodh	equ	0xFF4
  3738                           prodl	equ	0xFF3
  3739                           intcon	equ	0xFF2
  3740                           intcon2	equ	0xFF1
  3741                           postinc0	equ	0xFEE
  3742                           wreg	equ	0xFE8
  3743                           indf1	equ	0xFE7
  3744                           plusw1	equ	0xFE3
  3745                           fsr1h	equ	0xFE2
  3746                           fsr1l	equ	0xFE1
  3747                           indf2	equ	0xFDF
  3748                           postinc2	equ	0xFDE
  3749                           postdec2	equ	0xFDD
  3750                           plusw2	equ	0xFDB
  3751                           fsr2h	equ	0xFDA
  3752                           fsr2l	equ	0xFD9
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function _init_uart *****************
  3756 ;; Defined at:
  3757 ;;		line 13 in file "eusart.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;		None
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;		None
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  1    wreg      void 
  3764 ;; Registers used:
  3765 ;;		wreg, status,2
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;Total ram usage:        0 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    3
  3778 ;; This function calls:
  3779 ;;		Nothing
  3780 ;; This function is called by:
  3781 ;;		_SYSTEM_Initialize
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text8
  3786  00292A                     __ptext8:
  3787                           	opt stack 0
  3788  00292A                     _init_uart:
  3789                           	opt stack 26
  3790                           
  3791                           ;eusart.c: 15: TRISCbits.RC6 = 1;
  3792                           
  3793                           ;incstack = 0
  3794  00292A  8C94               	bsf	3988,6,c	;volatile
  3795                           
  3796                           ;eusart.c: 16: TRISCbits.RC7 = 1;
  3797  00292C  8E94               	bsf	3988,7,c	;volatile
  3798                           
  3799                           ;eusart.c: 17: TXSTAbits.BRGH = 1;
  3800  00292E  84AC               	bsf	4012,2,c	;volatile
  3801                           
  3802                           ;eusart.c: 18: TXSTAbits.SYNC = 0;
  3803  002930  98AC               	bcf	4012,4,c	;volatile
  3804                           
  3805                           ;eusart.c: 19: TXSTAbits.TXEN = 1;
  3806  002932  8AAC               	bsf	4012,5,c	;volatile
  3807                           
  3808                           ;eusart.c: 20: RCSTAbits.CREN = 1;
  3809  002934  88AB               	bsf	4011,4,c	;volatile
  3810                           
  3811                           ;eusart.c: 21: RCSTAbits.SPEN = 1;
  3812  002936  8EAB               	bsf	4011,7,c	;volatile
  3813                           
  3814                           ;eusart.c: 22: BAUDCONbits.BRG16 = 1;
  3815  002938  86B8               	bsf	4024,3,c	;volatile
  3816                           
  3817                           ;eusart.c: 30: SPBRGH = 0x04;
  3818  00293A  0E04               	movlw	4
  3819  00293C  6EB0               	movwf	4016,c	;volatile
  3820                           
  3821                           ;eusart.c: 31: SPBRG = 0x10;
  3822  00293E  0E10               	movlw	16
  3823  002940  6EAF               	movwf	4015,c	;volatile
  3824  002942  0C10               	retlw	16	;funcret
  3825  002944                     __end_of_init_uart:
  3826                           	opt stack 0
  3827                           tosu	equ	0xFFF
  3828                           tosh	equ	0xFFE
  3829                           tosl	equ	0xFFD
  3830                           pclath	equ	0xFFA
  3831                           tblptru	equ	0xFF8
  3832                           tblptrh	equ	0xFF7
  3833                           tblptrl	equ	0xFF6
  3834                           tablat	equ	0xFF5
  3835                           prodh	equ	0xFF4
  3836                           prodl	equ	0xFF3
  3837                           intcon	equ	0xFF2
  3838                           intcon2	equ	0xFF1
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           indf1	equ	0xFE7
  3842                           plusw1	equ	0xFE3
  3843                           fsr1h	equ	0xFE2
  3844                           fsr1l	equ	0xFE1
  3845                           indf2	equ	0xFDF
  3846                           postinc2	equ	0xFDE
  3847                           postdec2	equ	0xFDD
  3848                           plusw2	equ	0xFDB
  3849                           fsr2h	equ	0xFDA
  3850                           fsr2l	equ	0xFD9
  3851                           status	equ	0xFD8
  3852                           
  3853 ;; *************** function _init_ds18b20 *****************
  3854 ;; Defined at:
  3855 ;;		line 12 in file "ds18b20.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;		None
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;		None
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  1    wreg      void 
  3862 ;; Registers used:
  3863 ;;		wreg, status,2, status,0, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;Total ram usage:        0 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    5
  3876 ;; This function calls:
  3877 ;;		_ow_reset
  3878 ;;		_write_byte
  3879 ;; This function is called by:
  3880 ;;		_SYSTEM_Initialize
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text9
  3885  0026A6                     __ptext9:
  3886                           	opt stack 0
  3887  0026A6                     _init_ds18b20:
  3888                           	opt stack 24
  3889                           
  3890                           ;ds18b20.c: 15: if (!ow_reset())
  3891                           
  3892                           ;incstack = 0
  3893  0026A6  EC1F  F012         	call	_ow_reset	;wreg free
  3894  0026AA  0900               	iorlw	0
  3895  0026AC  A4D8               	btfss	status,2,c
  3896  0026AE  0012               	return	
  3897                           
  3898                           ;ds18b20.c: 16: {
  3899                           ;ds18b20.c: 18: write_byte(0xCC);
  3900  0026B0  0ECC               	movlw	204
  3901  0026B2  EC78  F012         	call	_write_byte
  3902                           
  3903                           ;ds18b20.c: 19: write_byte(0x4E);
  3904  0026B6  0E4E               	movlw	78
  3905  0026B8  EC78  F012         	call	_write_byte
  3906                           
  3907                           ;ds18b20.c: 20: write_byte(0x00);
  3908  0026BC  0E00               	movlw	0
  3909  0026BE  EC78  F012         	call	_write_byte
  3910                           
  3911                           ;ds18b20.c: 21: write_byte(0x00);
  3912  0026C2  0E00               	movlw	0
  3913  0026C4  EC78  F012         	call	_write_byte
  3914                           
  3915                           ;ds18b20.c: 22: write_byte(0x7F);
  3916  0026C8  0E7F               	movlw	127
  3917  0026CA  EF78  F012         	goto	_write_byte
  3918  0026CE                     __end_of_init_ds18b20:
  3919                           	opt stack 0
  3920                           tosu	equ	0xFFF
  3921                           tosh	equ	0xFFE
  3922                           tosl	equ	0xFFD
  3923                           pclath	equ	0xFFA
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           intcon2	equ	0xFF1
  3932                           postinc0	equ	0xFEE
  3933                           wreg	equ	0xFE8
  3934                           indf1	equ	0xFE7
  3935                           plusw1	equ	0xFE3
  3936                           fsr1h	equ	0xFE2
  3937                           fsr1l	equ	0xFE1
  3938                           indf2	equ	0xFDF
  3939                           postinc2	equ	0xFDE
  3940                           postdec2	equ	0xFDD
  3941                           plusw2	equ	0xFDB
  3942                           fsr2h	equ	0xFDA
  3943                           fsr2l	equ	0xFD9
  3944                           status	equ	0xFD8
  3945                           
  3946 ;; *************** function _bmp280_Init *****************
  3947 ;; Defined at:
  3948 ;;		line 20 in file "BMP_280.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;		None
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;		None
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      void 
  3955 ;; Registers used:
  3956 ;;		wreg, status,2, status,0, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;Total ram usage:        0 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    6
  3969 ;; This function calls:
  3970 ;;		_bmp280ReadInt16
  3971 ;;		_bmp280WriteByte
  3972 ;; This function is called by:
  3973 ;;		_SYSTEM_Initialize
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text10
  3978  001998                     __ptext10:
  3979                           	opt stack 0
  3980  001998                     _bmp280_Init:
  3981                           	opt stack 23
  3982                           
  3983                           ;BMP_280.c: 23: dig_T1 = bmp280ReadInt16(0x88);
  3984                           
  3985                           ;incstack = 0
  3986  001998  0E88               	movlw	136
  3987  00199A  EC1F  F011         	call	_bmp280ReadInt16
  3988  00199E  C012  F09D         	movff	?_bmp280ReadInt16,_dig_T1
  3989  0019A2  C013  F09E         	movff	?_bmp280ReadInt16+1,_dig_T1+1
  3990                           
  3991                           ;BMP_280.c: 24: dig_T2 = bmp280ReadInt16(0x8A);
  3992  0019A6  0E8A               	movlw	138
  3993  0019A8  EC1F  F011         	call	_bmp280ReadInt16
  3994  0019AC  C012  F09B         	movff	?_bmp280ReadInt16,_dig_T2
  3995  0019B0  C013  F09C         	movff	?_bmp280ReadInt16+1,_dig_T2+1
  3996                           
  3997                           ;BMP_280.c: 25: dig_T3 = bmp280ReadInt16(0x8C);
  3998  0019B4  0E8C               	movlw	140
  3999  0019B6  EC1F  F011         	call	_bmp280ReadInt16
  4000  0019BA  C012  F099         	movff	?_bmp280ReadInt16,_dig_T3
  4001  0019BE  C013  F09A         	movff	?_bmp280ReadInt16+1,_dig_T3+1
  4002                           
  4003                           ;BMP_280.c: 26: dig_P1 = bmp280ReadInt16(0x8E);
  4004  0019C2  0E8E               	movlw	142
  4005  0019C4  EC1F  F011         	call	_bmp280ReadInt16
  4006  0019C8  C012  F0D3         	movff	?_bmp280ReadInt16,_dig_P1
  4007  0019CC  C013  F0D4         	movff	?_bmp280ReadInt16+1,_dig_P1+1
  4008                           
  4009                           ;BMP_280.c: 27: dig_P2 = bmp280ReadInt16(0x90);
  4010  0019D0  0E90               	movlw	144
  4011  0019D2  EC1F  F011         	call	_bmp280ReadInt16
  4012  0019D6  C012  F097         	movff	?_bmp280ReadInt16,_dig_P2
  4013  0019DA  C013  F098         	movff	?_bmp280ReadInt16+1,_dig_P2+1
  4014                           
  4015                           ;BMP_280.c: 28: dig_P3 = bmp280ReadInt16(0x92);
  4016  0019DE  0E92               	movlw	146
  4017  0019E0  EC1F  F011         	call	_bmp280ReadInt16
  4018  0019E4  C012  F095         	movff	?_bmp280ReadInt16,_dig_P3
  4019  0019E8  C013  F096         	movff	?_bmp280ReadInt16+1,_dig_P3+1
  4020                           
  4021                           ;BMP_280.c: 29: dig_P4 = bmp280ReadInt16(0x94);
  4022  0019EC  0E94               	movlw	148
  4023  0019EE  EC1F  F011         	call	_bmp280ReadInt16
  4024  0019F2  C012  F093         	movff	?_bmp280ReadInt16,_dig_P4
  4025  0019F6  C013  F094         	movff	?_bmp280ReadInt16+1,_dig_P4+1
  4026                           
  4027                           ;BMP_280.c: 30: dig_P5 = bmp280ReadInt16(0x96);
  4028  0019FA  0E96               	movlw	150
  4029  0019FC  EC1F  F011         	call	_bmp280ReadInt16
  4030  001A00  C012  F091         	movff	?_bmp280ReadInt16,_dig_P5
  4031  001A04  C013  F092         	movff	?_bmp280ReadInt16+1,_dig_P5+1
  4032                           
  4033                           ;BMP_280.c: 31: dig_P6 = bmp280ReadInt16(0x98);
  4034  001A08  0E98               	movlw	152
  4035  001A0A  EC1F  F011         	call	_bmp280ReadInt16
  4036  001A0E  C012  F08F         	movff	?_bmp280ReadInt16,_dig_P6
  4037  001A12  C013  F090         	movff	?_bmp280ReadInt16+1,_dig_P6+1
  4038                           
  4039                           ;BMP_280.c: 32: dig_P7 = bmp280ReadInt16(0x9A);
  4040  001A16  0E9A               	movlw	154
  4041  001A18  EC1F  F011         	call	_bmp280ReadInt16
  4042  001A1C  C012  F08D         	movff	?_bmp280ReadInt16,_dig_P7
  4043  001A20  C013  F08E         	movff	?_bmp280ReadInt16+1,_dig_P7+1
  4044                           
  4045                           ;BMP_280.c: 33: dig_P8 = bmp280ReadInt16(0x9C);
  4046  001A24  0E9C               	movlw	156
  4047  001A26  EC1F  F011         	call	_bmp280ReadInt16
  4048  001A2A  C012  F08B         	movff	?_bmp280ReadInt16,_dig_P8
  4049  001A2E  C013  F08C         	movff	?_bmp280ReadInt16+1,_dig_P8+1
  4050                           
  4051                           ;BMP_280.c: 34: dig_P9 = bmp280ReadInt16(0x9E);
  4052  001A32  0E9E               	movlw	158
  4053  001A34  EC1F  F011         	call	_bmp280ReadInt16
  4054  001A38  C012  F089         	movff	?_bmp280ReadInt16,_dig_P9
  4055  001A3C  C013  F08A         	movff	?_bmp280ReadInt16+1,_dig_P9+1
  4056                           
  4057                           ;BMP_280.c: 37: bmp280WriteByte(0xF5, (0xC0 | 0x0C | 0x00));
  4058  001A40  0ECC               	movlw	204
  4059  001A42  6E11               	movwf	bmp280WriteByte@data,c
  4060  001A44  0EF5               	movlw	245
  4061  001A46  EC41  F014         	call	_bmp280WriteByte
  4062                           
  4063                           ;BMP_280.c: 38: bmp280WriteByte(0xF4, (0xA0 | 0x14 | 0x03));
  4064  001A4A  0EB7               	movlw	183
  4065  001A4C  6E11               	movwf	bmp280WriteByte@data,c
  4066  001A4E  0EF4               	movlw	244
  4067  001A50  EF41  F014         	goto	_bmp280WriteByte
  4068  001A54                     __end_of_bmp280_Init:
  4069                           	opt stack 0
  4070                           tosu	equ	0xFFF
  4071                           tosh	equ	0xFFE
  4072                           tosl	equ	0xFFD
  4073                           pclath	equ	0xFFA
  4074                           tblptru	equ	0xFF8
  4075                           tblptrh	equ	0xFF7
  4076                           tblptrl	equ	0xFF6
  4077                           tablat	equ	0xFF5
  4078                           prodh	equ	0xFF4
  4079                           prodl	equ	0xFF3
  4080                           intcon	equ	0xFF2
  4081                           intcon2	equ	0xFF1
  4082                           postinc0	equ	0xFEE
  4083                           wreg	equ	0xFE8
  4084                           indf1	equ	0xFE7
  4085                           plusw1	equ	0xFE3
  4086                           fsr1h	equ	0xFE2
  4087                           fsr1l	equ	0xFE1
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           postdec2	equ	0xFDD
  4091                           plusw2	equ	0xFDB
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function _bmp280WriteByte *****************
  4097 ;; Defined at:
  4098 ;;		line 122 in file "BMP_280.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  address         1    wreg     unsigned char 
  4101 ;;  data            1   16[COMRAM] char 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  address         1   17[COMRAM] unsigned char 
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  1    wreg      void 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2, status,0, cstack
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4113 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;Total ram usage:        2 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    5
  4120 ;; This function calls:
  4121 ;;		_I2C_Master_Start
  4122 ;;		_I2C_Master_Stop
  4123 ;;		_I2C_Master_Write
  4124 ;; This function is called by:
  4125 ;;		_bmp280_Init
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text11
  4130  002882                     __ptext11:
  4131                           	opt stack 0
  4132  002882                     _bmp280WriteByte:
  4133                           	opt stack 23
  4134                           
  4135                           ;incstack = 0
  4136                           ;bmp280WriteByte@address stored from wreg
  4137  002882  6E12               	movwf	bmp280WriteByte@address,c
  4138                           
  4139                           ;BMP_280.c: 125: I2C_Master_Start();
  4140  002884  EC1C  F015         	call	_I2C_Master_Start	;wreg free
  4141                           
  4142                           ;BMP_280.c: 126: I2C_Master_Write(0xEC);
  4143  002888  0EEC               	movlw	236
  4144  00288A  EC12  F015         	call	_I2C_Master_Write
  4145                           
  4146                           ;BMP_280.c: 127: I2C_Master_Write(address);
  4147  00288E  5012               	movf	bmp280WriteByte@address,w,c
  4148  002890  EC12  F015         	call	_I2C_Master_Write
  4149                           
  4150                           ;BMP_280.c: 128: I2C_Master_Write(data);
  4151  002894  5011               	movf	bmp280WriteByte@data,w,c
  4152  002896  EC12  F015         	call	_I2C_Master_Write
  4153                           
  4154                           ;BMP_280.c: 129: I2C_Master_Stop();
  4155  00289A  EF18  F015         	goto	_I2C_Master_Stop	;wreg free
  4156  00289E                     __end_of_bmp280WriteByte:
  4157                           	opt stack 0
  4158                           tosu	equ	0xFFF
  4159                           tosh	equ	0xFFE
  4160                           tosl	equ	0xFFD
  4161                           pclath	equ	0xFFA
  4162                           tblptru	equ	0xFF8
  4163                           tblptrh	equ	0xFF7
  4164                           tblptrl	equ	0xFF6
  4165                           tablat	equ	0xFF5
  4166                           prodh	equ	0xFF4
  4167                           prodl	equ	0xFF3
  4168                           intcon	equ	0xFF2
  4169                           intcon2	equ	0xFF1
  4170                           postinc0	equ	0xFEE
  4171                           wreg	equ	0xFE8
  4172                           indf1	equ	0xFE7
  4173                           plusw1	equ	0xFE3
  4174                           fsr1h	equ	0xFE2
  4175                           fsr1l	equ	0xFE1
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           plusw2	equ	0xFDB
  4180                           fsr2h	equ	0xFDA
  4181                           fsr2l	equ	0xFD9
  4182                           status	equ	0xFD8
  4183                           
  4184 ;; *************** function _bmp280ReadInt16 *****************
  4185 ;; Defined at:
  4186 ;;		line 77 in file "BMP_280.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;  address         1    wreg     unsigned char 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;  address         1   21[COMRAM] unsigned char 
  4191 ;;  lsb             2   24[COMRAM] unsigned int 
  4192 ;;  msb             2   22[COMRAM] unsigned int 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  2   17[COMRAM] unsigned int 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, status,0, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4202 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;Total ram usage:        9 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    5
  4209 ;; This function calls:
  4210 ;;		_I2C_Master_Read
  4211 ;;		_I2C_Master_RepeatedStart
  4212 ;;		_I2C_Master_Start
  4213 ;;		_I2C_Master_Stop
  4214 ;;		_I2C_Master_Write
  4215 ;; This function is called by:
  4216 ;;		_bmp280_Init
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text12
  4221  00223E                     __ptext12:
  4222                           	opt stack 0
  4223  00223E                     _bmp280ReadInt16:
  4224                           	opt stack 23
  4225                           
  4226                           ;incstack = 0
  4227                           ;bmp280ReadInt16@address stored from wreg
  4228  00223E  6E16               	movwf	bmp280ReadInt16@address,c
  4229                           
  4230                           ;BMP_280.c: 79: uint16_t lsb = 0;
  4231  002240  6A19               	clrf	bmp280ReadInt16@lsb,c
  4232  002242  6A1A               	clrf	bmp280ReadInt16@lsb+1,c
  4233                           
  4234                           ;BMP_280.c: 81: I2C_Master_Start();
  4235  002244  EC1C  F015         	call	_I2C_Master_Start	;wreg free
  4236                           
  4237                           ;BMP_280.c: 82: I2C_Master_Write(0xEC);
  4238  002248  0EEC               	movlw	236
  4239  00224A  EC12  F015         	call	_I2C_Master_Write
  4240                           
  4241                           ;BMP_280.c: 83: I2C_Master_Write(address);
  4242  00224E  5016               	movf	bmp280ReadInt16@address,w,c
  4243  002250  EC12  F015         	call	_I2C_Master_Write
  4244                           
  4245                           ;BMP_280.c: 84: I2C_Master_RepeatedStart();
  4246  002254  EC20  F015         	call	_I2C_Master_RepeatedStart	;wreg free
  4247                           
  4248                           ;BMP_280.c: 85: I2C_Master_Write(0xEC | 0x01);
  4249  002258  0EED               	movlw	237
  4250  00225A  EC12  F015         	call	_I2C_Master_Write
  4251                           
  4252                           ;BMP_280.c: 86: lsb = I2C_Master_Read(1);
  4253  00225E  0E01               	movlw	1
  4254  002260  EC11  F014         	call	_I2C_Master_Read
  4255  002264  6E19               	movwf	bmp280ReadInt16@lsb,c
  4256  002266  6A1A               	clrf	bmp280ReadInt16@lsb+1,c
  4257                           
  4258                           ;BMP_280.c: 87: msb = I2C_Master_Read(0);
  4259  002268  0E00               	movlw	0
  4260  00226A  EC11  F014         	call	_I2C_Master_Read
  4261  00226E  6E17               	movwf	bmp280ReadInt16@msb,c
  4262  002270  6A18               	clrf	bmp280ReadInt16@msb+1,c
  4263                           
  4264                           ;BMP_280.c: 88: I2C_Master_Stop();
  4265  002272  EC18  F015         	call	_I2C_Master_Stop	;wreg free
  4266                           
  4267                           ;BMP_280.c: 91: return (msb << 8) | lsb;
  4268  002276  5017               	movf	bmp280ReadInt16@msb,w,c
  4269  002278  6E15               	movwf	(??_bmp280ReadInt16+1)& (0+255),c
  4270  00227A  6A14               	clrf	??_bmp280ReadInt16& (0+255),c
  4271  00227C  5019               	movf	bmp280ReadInt16@lsb,w,c
  4272  00227E  1014               	iorwf	??_bmp280ReadInt16,w,c
  4273  002280  6E12               	movwf	?_bmp280ReadInt16,c
  4274  002282  501A               	movf	bmp280ReadInt16@lsb+1,w,c
  4275  002284  1015               	iorwf	??_bmp280ReadInt16+1,w,c
  4276  002286  6E13               	movwf	?_bmp280ReadInt16+1,c
  4277  002288  0012               	return		;funcret
  4278  00228A                     __end_of_bmp280ReadInt16:
  4279                           	opt stack 0
  4280                           tosu	equ	0xFFF
  4281                           tosh	equ	0xFFE
  4282                           tosl	equ	0xFFD
  4283                           pclath	equ	0xFFA
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           intcon	equ	0xFF2
  4291                           intcon2	equ	0xFF1
  4292                           postinc0	equ	0xFEE
  4293                           wreg	equ	0xFE8
  4294                           indf1	equ	0xFE7
  4295                           plusw1	equ	0xFE3
  4296                           fsr1h	equ	0xFE2
  4297                           fsr1l	equ	0xFE1
  4298                           indf2	equ	0xFDF
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           plusw2	equ	0xFDB
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _TMRInit *****************
  4307 ;; Defined at:
  4308 ;;		line 5 in file "timer.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        0 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    3
  4329 ;; This function calls:
  4330 ;;		Nothing
  4331 ;; This function is called by:
  4332 ;;		_SYSTEM_Initialize
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text13
  4337  00289E                     __ptext13:
  4338                           	opt stack 0
  4339  00289E                     _TMRInit:
  4340                           	opt stack 26
  4341                           
  4342                           ;timer.c: 7: T1CONbits.TMR1ON = 0;
  4343                           
  4344                           ;incstack = 0
  4345  00289E  90CD               	bcf	4045,0,c	;volatile
  4346                           
  4347                           ;timer.c: 8: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  4348  0028A0  0E3C               	movlw	60
  4349  0028A2  6ECF               	movwf	4047,c	;volatile
  4350                           
  4351                           ;timer.c: 9: TMR1L = ((unsigned char)((15536)&0xFF));
  4352  0028A4  0EB0               	movlw	176
  4353  0028A6  6ECE               	movwf	4046,c	;volatile
  4354                           
  4355                           ;timer.c: 10: PIE1bits.TMR1IE = 1;
  4356  0028A8  809D               	bsf	3997,0,c	;volatile
  4357                           
  4358                           ;timer.c: 12: T3CONbits.TMR3CS = 0;
  4359  0028AA  92B1               	bcf	4017,1,c	;volatile
  4360                           
  4361                           ;timer.c: 13: T3CONbits.TMR3ON = 1;
  4362  0028AC  80B1               	bsf	4017,0,c	;volatile
  4363                           
  4364                           ;timer.c: 14: PIE2bits.TMR3IE = 1;
  4365  0028AE  82A0               	bsf	4000,1,c	;volatile
  4366                           
  4367                           ;timer.c: 15: TMR3H = ((unsigned char)(((60536)>>8)&0xFF));
  4368  0028B0  0EEC               	movlw	236
  4369  0028B2  6EB3               	movwf	4019,c	;volatile
  4370                           
  4371                           ;timer.c: 16: TMR3L = ((unsigned char)((60536)&0xFF));
  4372  0028B4  0E78               	movlw	120
  4373  0028B6  6EB2               	movwf	4018,c	;volatile
  4374  0028B8  0C78               	retlw	120	;funcret
  4375  0028BA                     __end_of_TMRInit:
  4376                           	opt stack 0
  4377                           tosu	equ	0xFFF
  4378                           tosh	equ	0xFFE
  4379                           tosl	equ	0xFFD
  4380                           pclath	equ	0xFFA
  4381                           tblptru	equ	0xFF8
  4382                           tblptrh	equ	0xFF7
  4383                           tblptrl	equ	0xFF6
  4384                           tablat	equ	0xFF5
  4385                           prodh	equ	0xFF4
  4386                           prodl	equ	0xFF3
  4387                           intcon	equ	0xFF2
  4388                           intcon2	equ	0xFF1
  4389                           postinc0	equ	0xFEE
  4390                           wreg	equ	0xFE8
  4391                           indf1	equ	0xFE7
  4392                           plusw1	equ	0xFE3
  4393                           fsr1h	equ	0xFE2
  4394                           fsr1l	equ	0xFE1
  4395                           indf2	equ	0xFDF
  4396                           postinc2	equ	0xFDE
  4397                           postdec2	equ	0xFDD
  4398                           plusw2	equ	0xFDB
  4399                           fsr2h	equ	0xFDA
  4400                           fsr2l	equ	0xFD9
  4401                           status	equ	0xFD8
  4402                           
  4403 ;; *************** function _RTOS_Init *****************
  4404 ;; Defined at:
  4405 ;;		line 10 in file "dispatcher.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;		None
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;		None
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      void 
  4412 ;; Registers used:
  4413 ;;		wreg, status,2
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;Total ram usage:        0 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    3
  4426 ;; This function calls:
  4427 ;;		Nothing
  4428 ;; This function is called by:
  4429 ;;		_SYSTEM_Initialize
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text14
  4434  0029F4                     __ptext14:
  4435                           	opt stack 0
  4436  0029F4                     _RTOS_Init:
  4437                           	opt stack 26
  4438                           
  4439                           ;dispatcher.c: 12: T0CON = 0b11000111;
  4440                           
  4441                           ;incstack = 0
  4442  0029F4  0EC7               	movlw	199
  4443  0029F6  6ED5               	movwf	4053,c	;volatile
  4444                           
  4445                           ;dispatcher.c: 13: INTCONbits.TMR0IE = 1;
  4446  0029F8  8AF2               	bsf	intcon,5,c	;volatile
  4447                           
  4448                           ;dispatcher.c: 14: TMR0 = 61;
  4449  0029FA  6AD7               	clrf	4055,c	;volatile
  4450  0029FC  0E3D               	movlw	61
  4451  0029FE  6ED6               	movwf	4054,c	;volatile
  4452                           
  4453                           ;dispatcher.c: 16: arrayTail = 0;
  4454  002A00  6A61               	clrf	_arrayTail,c	;volatile
  4455  002A02  0012               	return		;funcret
  4456  002A04                     __end_of_RTOS_Init:
  4457                           	opt stack 0
  4458                           tosu	equ	0xFFF
  4459                           tosh	equ	0xFFE
  4460                           tosl	equ	0xFFD
  4461                           pclath	equ	0xFFA
  4462                           tblptru	equ	0xFF8
  4463                           tblptrh	equ	0xFF7
  4464                           tblptrl	equ	0xFF6
  4465                           tablat	equ	0xFF5
  4466                           prodh	equ	0xFF4
  4467                           prodl	equ	0xFF3
  4468                           intcon	equ	0xFF2
  4469                           intcon2	equ	0xFF1
  4470                           postinc0	equ	0xFEE
  4471                           wreg	equ	0xFE8
  4472                           indf1	equ	0xFE7
  4473                           plusw1	equ	0xFE3
  4474                           fsr1h	equ	0xFE2
  4475                           fsr1l	equ	0xFE1
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           plusw2	equ	0xFDB
  4480                           fsr2h	equ	0xFDA
  4481                           fsr2l	equ	0xFD9
  4482                           status	equ	0xFD8
  4483                           
  4484 ;; *************** function _Port_Init *****************
  4485 ;; Defined at:
  4486 ;;		line 87 in file "init.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;		None
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;		None
  4491 ;; Return value:  Size  Location     Type
  4492 ;;                  1    wreg      void 
  4493 ;; Registers used:
  4494 ;;		wreg, status,2, status,0
  4495 ;; Tracked objects:
  4496 ;;		On entry : 0/0
  4497 ;;		On exit  : 0/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;Total ram usage:        0 bytes
  4505 ;; Hardware stack levels used:    1
  4506 ;; Hardware stack levels required when called:    3
  4507 ;; This function calls:
  4508 ;;		Nothing
  4509 ;; This function is called by:
  4510 ;;		_SYSTEM_Initialize
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text15
  4515  0028BA                     __ptext15:
  4516                           	opt stack 0
  4517  0028BA                     _Port_Init:
  4518                           	opt stack 26
  4519                           
  4520                           ;init.c: 89: LATC = 0x00;
  4521                           
  4522                           ;incstack = 0
  4523  0028BA  6A8B               	clrf	3979,c	;volatile
  4524                           
  4525                           ;init.c: 90: TRISC = 0b00011000;
  4526  0028BC  0E18               	movlw	24
  4527  0028BE  6E94               	movwf	3988,c	;volatile
  4528                           
  4529                           ;init.c: 91: LATB = 0x00;
  4530  0028C0  6A8A               	clrf	3978,c	;volatile
  4531                           
  4532                           ;init.c: 92: TRISB = 0b00011111;
  4533  0028C2  0E1F               	movlw	31
  4534  0028C4  6E93               	movwf	3987,c	;volatile
  4535                           
  4536                           ;init.c: 93: INTCON2 &= (~(1<<7));
  4537  0028C6  9EF1               	bcf	intcon2,7,c	;volatile
  4538                           
  4539                           ;init.c: 94: LATD = 0x00;
  4540  0028C8  6A8C               	clrf	3980,c	;volatile
  4541                           
  4542                           ;init.c: 95: TRISD = 0x00;
  4543  0028CA  6A95               	clrf	3989,c	;volatile
  4544                           
  4545                           ;init.c: 96: INTCON2bits.INTEDG0 = 1;
  4546  0028CC  8CF1               	bsf	intcon2,6,c	;volatile
  4547                           
  4548                           ;init.c: 97: INTCONbits.INT0IF = 0;
  4549  0028CE  92F2               	bcf	intcon,1,c	;volatile
  4550                           
  4551                           ;init.c: 98: INTCONbits.INT0IE = 1;
  4552  0028D0  88F2               	bsf	intcon,4,c	;volatile
  4553                           
  4554                           ;init.c: 99: PORTCbits.RC0 = 1;
  4555  0028D2  8082               	bsf	3970,0,c	;volatile
  4556  0028D4  0012               	return		;funcret
  4557  0028D6                     __end_of_Port_Init:
  4558                           	opt stack 0
  4559                           tosu	equ	0xFFF
  4560                           tosh	equ	0xFFE
  4561                           tosl	equ	0xFFD
  4562                           pclath	equ	0xFFA
  4563                           tblptru	equ	0xFF8
  4564                           tblptrh	equ	0xFF7
  4565                           tblptrl	equ	0xFF6
  4566                           tablat	equ	0xFF5
  4567                           prodh	equ	0xFF4
  4568                           prodl	equ	0xFF3
  4569                           intcon	equ	0xFF2
  4570                           intcon2	equ	0xFF1
  4571                           postinc0	equ	0xFEE
  4572                           wreg	equ	0xFE8
  4573                           indf1	equ	0xFE7
  4574                           plusw1	equ	0xFE3
  4575                           fsr1h	equ	0xFE2
  4576                           fsr1l	equ	0xFE1
  4577                           indf2	equ	0xFDF
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           plusw2	equ	0xFDB
  4581                           fsr2h	equ	0xFDA
  4582                           fsr2l	equ	0xFD9
  4583                           status	equ	0xFD8
  4584                           
  4585 ;; *************** function _Interrupt_Init *****************
  4586 ;; Defined at:
  4587 ;;		line 102 in file "init.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		None
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;Total ram usage:        0 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    3
  4608 ;; This function calls:
  4609 ;;		Nothing
  4610 ;; This function is called by:
  4611 ;;		_SYSTEM_Initialize
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text16
  4616  002A4E                     __ptext16:
  4617                           	opt stack 0
  4618  002A4E                     _Interrupt_Init:
  4619                           	opt stack 26
  4620                           
  4621                           ;init.c: 104: (INTCONbits.GIE = 1);
  4622                           
  4623                           ;incstack = 0
  4624  002A4E  8EF2               	bsf	intcon,7,c	;volatile
  4625                           
  4626                           ;init.c: 105: (INTCONbits.PEIE = 1);
  4627  002A50  8CF2               	bsf	intcon,6,c	;volatile
  4628  002A52  0012               	return		;funcret
  4629  002A54                     __end_of_Interrupt_Init:
  4630                           	opt stack 0
  4631                           tosu	equ	0xFFF
  4632                           tosh	equ	0xFFE
  4633                           tosl	equ	0xFFD
  4634                           pclath	equ	0xFFA
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           prodh	equ	0xFF4
  4640                           prodl	equ	0xFF3
  4641                           intcon	equ	0xFF2
  4642                           intcon2	equ	0xFF1
  4643                           postinc0	equ	0xFEE
  4644                           wreg	equ	0xFE8
  4645                           indf1	equ	0xFE7
  4646                           plusw1	equ	0xFE3
  4647                           fsr1h	equ	0xFE2
  4648                           fsr1l	equ	0xFE1
  4649                           indf2	equ	0xFDF
  4650                           postinc2	equ	0xFDE
  4651                           postdec2	equ	0xFDD
  4652                           plusw2	equ	0xFDB
  4653                           fsr2h	equ	0xFDA
  4654                           fsr2l	equ	0xFD9
  4655                           status	equ	0xFD8
  4656                           
  4657 ;; *************** function _Init7221 *****************
  4658 ;; Defined at:
  4659 ;;		line 77 in file "max7221.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;Total ram usage:        0 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    5
  4680 ;; This function calls:
  4681 ;;		_Cmd7221
  4682 ;; This function is called by:
  4683 ;;		_SYSTEM_Initialize
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text17
  4688  0025C6                     __ptext17:
  4689                           	opt stack 0
  4690  0025C6                     _Init7221:
  4691                           	opt stack 24
  4692                           
  4693                           ;max7221.c: 79: LATDbits.LD0 = 1;
  4694                           
  4695                           ;incstack = 0
  4696  0025C6  808C               	bsf	3980,0,c	;volatile
  4697                           
  4698                           ;max7221.c: 81: Cmd7221(0x0C,1);
  4699  0025C8  0E01               	movlw	1
  4700  0025CA  6E11               	movwf	Cmd7221@val,c
  4701  0025CC  0E0C               	movlw	12
  4702  0025CE  EC23  F014         	call	_Cmd7221
  4703                           
  4704                           ;max7221.c: 82: Cmd7221(0x09,0);
  4705  0025D2  6A11               	clrf	Cmd7221@val,c
  4706  0025D4  0E09               	movlw	9
  4707  0025D6  EC23  F014         	call	_Cmd7221
  4708                           
  4709                           ;max7221.c: 83: Cmd7221(0x0B,7);
  4710  0025DA  0E07               	movlw	7
  4711  0025DC  6E11               	movwf	Cmd7221@val,c
  4712  0025DE  0E0B               	movlw	11
  4713  0025E0  EC23  F014         	call	_Cmd7221
  4714                           
  4715                           ;max7221.c: 84: Cmd7221(0x0A,0x01);
  4716  0025E4  0E01               	movlw	1
  4717  0025E6  6E11               	movwf	Cmd7221@val,c
  4718  0025E8  0E0A               	movlw	10
  4719  0025EA  EC23  F014         	call	_Cmd7221
  4720                           
  4721                           ;max7221.c: 85: Cmd7221(0x0F,0);
  4722  0025EE  6A11               	clrf	Cmd7221@val,c
  4723  0025F0  0E0F               	movlw	15
  4724  0025F2  EF23  F014         	goto	_Cmd7221
  4725  0025F6                     __end_of_Init7221:
  4726                           	opt stack 0
  4727                           tosu	equ	0xFFF
  4728                           tosh	equ	0xFFE
  4729                           tosl	equ	0xFFD
  4730                           pclath	equ	0xFFA
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           intcon	equ	0xFF2
  4738                           intcon2	equ	0xFF1
  4739                           postinc0	equ	0xFEE
  4740                           wreg	equ	0xFE8
  4741                           indf1	equ	0xFE7
  4742                           plusw1	equ	0xFE3
  4743                           fsr1h	equ	0xFE2
  4744                           fsr1l	equ	0xFE1
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           plusw2	equ	0xFDB
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _Cmd7221 *****************
  4754 ;; Defined at:
  4755 ;;		line 33 in file "max7221.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  adr             1    wreg     unsigned char 
  4758 ;;  val             1   16[COMRAM] unsigned char 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  adr             1   17[COMRAM] unsigned char 
  4761 ;;  i               1   18[COMRAM] unsigned char 
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		wreg, status,2, status,0, cstack
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4771 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4774 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;Total ram usage:        3 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    4
  4778 ;; This function calls:
  4779 ;;		_Send_Byte_7221
  4780 ;; This function is called by:
  4781 ;;		_Init7221
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text18
  4786  002846                     __ptext18:
  4787                           	opt stack 0
  4788  002846                     _Cmd7221:
  4789                           	opt stack 24
  4790                           
  4791                           ;incstack = 0
  4792                           ;Cmd7221@adr stored from wreg
  4793  002846  6E12               	movwf	Cmd7221@adr,c
  4794                           
  4795                           ;max7221.c: 35: uint8_t i;
  4796                           ;max7221.c: 36: LATDbits.LD0 = 0;
  4797  002848  908C               	bcf	3980,0,c	;volatile
  4798                           
  4799                           ;max7221.c: 37: for (i = 0; i < 4; i++ )
  4800  00284A  6A13               	clrf	Cmd7221@i,c
  4801  00284C                     l5692:
  4802                           
  4803                           ;max7221.c: 38: {
  4804                           ;max7221.c: 39: Send_Byte_7221(adr);
  4805  00284C  5012               	movf	Cmd7221@adr,w,c
  4806  00284E  ECED  F013         	call	_Send_Byte_7221
  4807                           
  4808                           ;max7221.c: 40: Send_Byte_7221(val);
  4809  002852  5011               	movf	Cmd7221@val,w,c
  4810  002854  ECED  F013         	call	_Send_Byte_7221
  4811  002858  2A13               	incf	Cmd7221@i,f,c
  4812  00285A  0E03               	movlw	3
  4813  00285C  6413               	cpfsgt	Cmd7221@i,c
  4814  00285E  D7F6               	goto	l5692
  4815                           
  4816                           ;max7221.c: 42: }
  4817                           ;max7221.c: 44: LATDbits.LD0 = 1;
  4818  002860  808C               	bsf	3980,0,c	;volatile
  4819  002862  0C03               	retlw	3	;funcret
  4820  002864                     __end_of_Cmd7221:
  4821                           	opt stack 0
  4822                           tosu	equ	0xFFF
  4823                           tosh	equ	0xFFE
  4824                           tosl	equ	0xFFD
  4825                           pclath	equ	0xFFA
  4826                           tblptru	equ	0xFF8
  4827                           tblptrh	equ	0xFF7
  4828                           tblptrl	equ	0xFF6
  4829                           tablat	equ	0xFF5
  4830                           prodh	equ	0xFF4
  4831                           prodl	equ	0xFF3
  4832                           intcon	equ	0xFF2
  4833                           intcon2	equ	0xFF1
  4834                           postinc0	equ	0xFEE
  4835                           wreg	equ	0xFE8
  4836                           indf1	equ	0xFE7
  4837                           plusw1	equ	0xFE3
  4838                           fsr1h	equ	0xFE2
  4839                           fsr1l	equ	0xFE1
  4840                           indf2	equ	0xFDF
  4841                           postinc2	equ	0xFDE
  4842                           postdec2	equ	0xFDD
  4843                           plusw2	equ	0xFDB
  4844                           fsr2h	equ	0xFDA
  4845                           fsr2l	equ	0xFD9
  4846                           status	equ	0xFD8
  4847                           
  4848 ;; *************** function _I2C_Init *****************
  4849 ;; Defined at:
  4850 ;;		line 11 in file "i2c.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;		None
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;		None
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  2   48[None  ] int 
  4857 ;; Registers used:
  4858 ;;		wreg, status,2, status,0
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;Total ram usage:        0 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    3
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_SYSTEM_Initialize
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text19
  4879  00295A                     __ptext19:
  4880                           	opt stack 0
  4881  00295A                     _I2C_Init:
  4882                           	opt stack 26
  4883                           
  4884                           ;i2c.c: 13: TRISC |= 0b00011000;
  4885                           
  4886                           ;incstack = 0
  4887  00295A  0E18               	movlw	24
  4888  00295C  1294               	iorwf	3988,f,c	;volatile
  4889                           
  4890                           ;i2c.c: 14: SSPCON1 = 0b00101000;
  4891  00295E  0E28               	movlw	40
  4892  002960  6EC6               	movwf	4038,c	;volatile
  4893                           
  4894                           ;i2c.c: 15: SSPSTAT = 0b00000000;
  4895  002962  6AC7               	clrf	4039,c	;volatile
  4896                           
  4897                           ;i2c.c: 16: SSPADD = 0x63;
  4898  002964  0E63               	movlw	99
  4899  002966  6EC8               	movwf	4040,c	;volatile
  4900                           
  4901                           ;i2c.c: 18: PEN = 1;
  4902  002968  84C5               	bsf	4037,2,c	;volatile
  4903  00296A                     l176:
  4904  00296A  A4C5               	btfss	4037,2,c	;volatile
  4905  00296C  0012               	return		;funcret
  4906  00296E  D7FD               	goto	l176
  4907  002970                     __end_of_I2C_Init:
  4908                           	opt stack 0
  4909                           tosu	equ	0xFFF
  4910                           tosh	equ	0xFFE
  4911                           tosl	equ	0xFFD
  4912                           pclath	equ	0xFFA
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           prodh	equ	0xFF4
  4918                           prodl	equ	0xFF3
  4919                           intcon	equ	0xFF2
  4920                           intcon2	equ	0xFF1
  4921                           postinc0	equ	0xFEE
  4922                           wreg	equ	0xFE8
  4923                           indf1	equ	0xFE7
  4924                           plusw1	equ	0xFE3
  4925                           fsr1h	equ	0xFE2
  4926                           fsr1l	equ	0xFE1
  4927                           indf2	equ	0xFDF
  4928                           postinc2	equ	0xFDE
  4929                           postdec2	equ	0xFDD
  4930                           plusw2	equ	0xFDB
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _DS3231_init *****************
  4936 ;; Defined at:
  4937 ;;		line 40 in file "ds3231.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;		None
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg, status,2, status,0, cstack
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;Total ram usage:        0 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    6
  4958 ;; This function calls:
  4959 ;;		_DS3231_Write
  4960 ;; This function is called by:
  4961 ;;		_SYSTEM_Initialize
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           	psect	text20
  4966  0029C0                     __ptext20:
  4967                           	opt stack 0
  4968  0029C0                     _DS3231_init:
  4969                           	opt stack 23
  4970                           
  4971                           ;ds3231.c: 42: DS3231_Write(0x0E, 0x00);
  4972                           
  4973                           ;incstack = 0
  4974  0029C0  6A1A               	clrf	DS3231_Write@value,c
  4975  0029C2  0E0E               	movlw	14
  4976  0029C4  EC79  F014         	call	_DS3231_Write
  4977                           
  4978                           ;ds3231.c: 43: DS3231_Write(0x0F, 0x08);
  4979  0029C8  0E08               	movlw	8
  4980  0029CA  6E1A               	movwf	DS3231_Write@value,c
  4981  0029CC  0E0F               	movlw	15
  4982  0029CE  EF79  F014         	goto	_DS3231_Write
  4983  0029D2                     __end_of_DS3231_init:
  4984                           	opt stack 0
  4985                           tosu	equ	0xFFF
  4986                           tosh	equ	0xFFE
  4987                           tosl	equ	0xFFD
  4988                           pclath	equ	0xFFA
  4989                           tblptru	equ	0xFF8
  4990                           tblptrh	equ	0xFF7
  4991                           tblptrl	equ	0xFF6
  4992                           tablat	equ	0xFF5
  4993                           prodh	equ	0xFF4
  4994                           prodl	equ	0xFF3
  4995                           intcon	equ	0xFF2
  4996                           intcon2	equ	0xFF1
  4997                           postinc0	equ	0xFEE
  4998                           wreg	equ	0xFE8
  4999                           indf1	equ	0xFE7
  5000                           plusw1	equ	0xFE3
  5001                           fsr1h	equ	0xFE2
  5002                           fsr1l	equ	0xFE1
  5003                           indf2	equ	0xFDF
  5004                           postinc2	equ	0xFDE
  5005                           postdec2	equ	0xFDD
  5006                           plusw2	equ	0xFDB
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function _RTOS_DispatchTask *****************
  5012 ;; Defined at:
  5013 ;;		line 84 in file "dispatcher.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;  function        2   83[COMRAM] PTR FTN()void 
  5018 ;;		 -> pressure(1), home_temp(1), set_font_set(1), time_set_dy(1), 
  5019 ;;		 -> time_set_dt(1), time_set_mt(1), time_set_yr(1), default_state(1), 
  5020 ;;		 -> time_set_hr(1), time_set_min(1), GetTime(1), key_press(1), 
  5021 ;;		 -> time_led(1), 
  5022 ;;  i               1   86[COMRAM] unsigned char 
  5023 ;;  j               1   85[COMRAM] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;Total ram usage:        8 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    9
  5040 ;; This function calls:
  5041 ;;		_GetTime
  5042 ;;		_RTOS_DeleteTask
  5043 ;;		_default_state
  5044 ;;		_home_temp
  5045 ;;		_key_press
  5046 ;;		_pressure
  5047 ;;		_set_font_set
  5048 ;;		_time_led
  5049 ;;		_time_set_dt
  5050 ;;		_time_set_dy
  5051 ;;		_time_set_hr
  5052 ;;		_time_set_min
  5053 ;;		_time_set_mt
  5054 ;;		_time_set_yr
  5055 ;; This function is called by:
  5056 ;;		_main
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text21
  5061  0017D6                     __ptext21:
  5062                           	opt stack 0
  5063  0017D6                     _RTOS_DispatchTask:
  5064                           	opt stack 21
  5065                           
  5066                           ;dispatcher.c: 86: uint8_t i, j;
  5067                           ;dispatcher.c: 87: void (*function) (void);
  5068                           ;dispatcher.c: 89: if (Timer0Interrupt)
  5069                           
  5070                           ;incstack = 0
  5071  0017D6  0100               	movlb	0	; () banked
  5072  0017D8  51A3               	movf	_Timer0Interrupt& (0+255),w,b
  5073  0017DA  E018               	bz	l257
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;dispatcher.c: 90: {
  5077                           ;dispatcher.c: 91: Timer0Interrupt = 0;
  5078  0017DC  6BA3               	clrf	_Timer0Interrupt& (0+255),b
  5079                           
  5080                           ;dispatcher.c: 92: for (j=0; j<arrayTail; j++)
  5081  0017DE  6A56               	clrf	RTOS_DispatchTask@j,c
  5082  0017E0  D012               	goto	l6768
  5083  0017E2                     l6760:
  5084                           
  5085                           ;dispatcher.c: 93: {
  5086                           ;dispatcher.c: 94: if (TaskArray[j].delay == 0)
  5087  0017E2  5056               	movf	RTOS_DispatchTask@j,w,c
  5088  0017E4  D85E               	call	PL22	;call to abstracted procedure
  5089  0017E6  50DE               	movf	postinc2,w,c
  5090  0017E8  10DE               	iorwf	postinc2,w,c
  5091  0017EA  E107               	bnz	l6764
  5092                           
  5093                           ;dispatcher.c: 95: TaskArray[j].run = 1;
  5094  0017EC  5056               	movf	RTOS_DispatchTask@j,w,c
  5095  0017EE  0D08               	mullw	8
  5096  0017F0  D860               	call	PL34	;call to abstracted procedure
  5097  0017F2  0E01               	movlw	1
  5098  0017F4  6EDE               	movwf	postinc2,c
  5099  0017F6  6ADD               	clrf	postdec2,c
  5100  0017F8  D005               	goto	l6766
  5101  0017FA                     l6764:
  5102                           
  5103                           ;dispatcher.c: 96: else TaskArray[j].delay--;
  5104  0017FA  5056               	movf	RTOS_DispatchTask@j,w,c
  5105  0017FC  D852               	call	PL22	;call to abstracted procedure
  5106  0017FE  06DE               	decf	postinc2,f,c
  5107  001800  0E00               	movlw	0
  5108  001802  5ADD               	subwfb	postdec2,f,c
  5109  001804                     l6766:
  5110  001804  2A56               	incf	RTOS_DispatchTask@j,f,c
  5111  001806                     l6768:
  5112  001806  5061               	movf	_arrayTail,w,c	;volatile
  5113  001808  5C56               	subwf	RTOS_DispatchTask@j,w,c
  5114  00180A  E3EB               	bnc	l6760
  5115  00180C                     l257:
  5116                           
  5117                           ;dispatcher.c: 97: }
  5118                           ;dispatcher.c: 98: }
  5119                           ;dispatcher.c: 100: for (i=0; i<arrayTail; i++)
  5120  00180C  6A57               	clrf	RTOS_DispatchTask@i,c
  5121  00180E  D045               	goto	l6784
  5122  001810                     l6770:
  5123                           
  5124                           ;dispatcher.c: 101: {
  5125                           ;dispatcher.c: 102: if (TaskArray[i].run == 1)
  5126  001810  5057               	movf	RTOS_DispatchTask@i,w,c
  5127  001812  0D08               	mullw	8
  5128  001814  D84E               	call	PL34	;call to abstracted procedure
  5129  001816  04DE               	decf	postinc2,w,c
  5130  001818  10DE               	iorwf	postinc2,w,c
  5131  00181A  E13E               	bnz	l6782
  5132                           
  5133                           ;dispatcher.c: 103: {
  5134                           ;dispatcher.c: 104: function = TaskArray[i].pFunc;
  5135  00181C  5057               	movf	RTOS_DispatchTask@i,w,c
  5136  00181E  EC5C  F00D         	call	PL26	;call to abstracted procedure
  5137  001822  CFDE F054          	movff	postinc2,RTOS_DispatchTask@function
  5138  001826  CFDD F055          	movff	postdec2,RTOS_DispatchTask@function+1
  5139                           
  5140                           ;dispatcher.c: 106: if(TaskArray[i].period == 0)
  5141  00182A  5057               	movf	RTOS_DispatchTask@i,w,c
  5142  00182C  EC6E  F00D         	call	PL32	;call to abstracted procedure
  5143  001830  50DE               	movf	postinc2,w,c
  5144  001832  10DE               	iorwf	postinc2,w,c
  5145  001834  E10A               	bnz	l6776
  5146                           
  5147                           ;dispatcher.c: 107: {
  5148                           ;dispatcher.c: 108: RTOS_DeleteTask(TaskArray[i].pFunc);
  5149  001836  5057               	movf	RTOS_DispatchTask@i,w,c
  5150  001838  EC5C  F00D         	call	PL26	;call to abstracted procedure
  5151  00183C  CFDE F00F          	movff	postinc2,RTOS_DeleteTask@taskFunc
  5152  001840  CFDD F010          	movff	postdec2,RTOS_DeleteTask@taskFunc+1
  5153  001844  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  5154                           
  5155                           ;dispatcher.c: 110: }
  5156  001848  D01B               	goto	l6780
  5157  00184A                     l6776:
  5158                           
  5159                           ;dispatcher.c: 111: else
  5160                           ;dispatcher.c: 112: {
  5161                           ;dispatcher.c: 113: TaskArray[i].run = 0;
  5162  00184A  5057               	movf	RTOS_DispatchTask@i,w,c
  5163  00184C  EC64  F00D         	call	PL28	;call to abstracted procedure
  5164                           
  5165                           ;dispatcher.c: 114: if(!TaskArray[i].delay)
  5166  001850  5057               	movf	RTOS_DispatchTask@i,w,c
  5167  001852  D827               	call	PL22	;call to abstracted procedure
  5168  001854  50DE               	movf	postinc2,w,c
  5169  001856  10DE               	iorwf	postinc2,w,c
  5170  001858  E113               	bnz	l6780
  5171                           
  5172                           ;dispatcher.c: 115: {
  5173                           ;dispatcher.c: 116: TaskArray[i].delay = TaskArray[i].period-1;
  5174  00185A  6850               	setf	??_RTOS_DispatchTask& (0+255),c
  5175  00185C  6851               	setf	(??_RTOS_DispatchTask+1)& (0+255),c
  5176  00185E  5057               	movf	RTOS_DispatchTask@i,w,c
  5177  001860  EC6E  F00D         	call	PL32	;call to abstracted procedure
  5178  001864  CFDE F052          	movff	postinc2,??_RTOS_DispatchTask+2
  5179  001868  CFDD F053          	movff	postdec2,??_RTOS_DispatchTask+3
  5180  00186C  5050               	movf	??_RTOS_DispatchTask,w,c
  5181  00186E  2652               	addwf	??_RTOS_DispatchTask+2,f,c
  5182  001870  5051               	movf	??_RTOS_DispatchTask+1,w,c
  5183  001872  2253               	addwfc	??_RTOS_DispatchTask+3,f,c
  5184  001874  5057               	movf	RTOS_DispatchTask@i,w,c
  5185  001876  D815               	call	PL22	;call to abstracted procedure
  5186  001878  C052  FFDE         	movff	??_RTOS_DispatchTask+2,postinc2
  5187  00187C  C053  FFDD         	movff	??_RTOS_DispatchTask+3,postdec2
  5188  001880                     l6780:
  5189                           
  5190                           ;dispatcher.c: 117: }
  5191                           ;dispatcher.c: 118: }
  5192                           ;dispatcher.c: 119: (*function)();
  5193  001880  D801               	call	u5178
  5194  001882  D00A               	goto	l6782
  5195  001884                     u5178:
  5196  001884  0005               	push	
  5197  001886  6EFA               	movwf	pclath,c
  5198  001888  5054               	movf	RTOS_DispatchTask@function,w,c
  5199  00188A  6EFD               	movwf	tosl,c
  5200  00188C  5055               	movf	RTOS_DispatchTask@function+1,w,c
  5201  00188E  6EFE               	movwf	tosh,c
  5202  001890  50F8               	movf	tblptru,w,c
  5203  001892  6EFF               	movwf	tosu,c
  5204  001894  50FA               	movf	pclath,w,c
  5205  001896  0012               	return		;indir
  5206  001898                     l6782:
  5207  001898  2A57               	incf	RTOS_DispatchTask@i,f,c
  5208  00189A                     l6784:
  5209  00189A  5061               	movf	_arrayTail,w,c	;volatile
  5210  00189C  5C57               	subwf	RTOS_DispatchTask@i,w,c
  5211  00189E  E3B8               	bnc	l6770
  5212  0018A0  0012               	return		;funcret
  5213  0018A2                     __end_of_RTOS_DispatchTask:
  5214                           	opt stack 0
  5215  0018A2                     PL22:
  5216                           	opt stack 27
  5217  0018A2  0D08               	mullw	8
  5218  0018A4  0E02               	movlw	low (_TaskArray+2)
  5219  0018A6  24F3               	addwf	prodl,w,c
  5220  0018A8  6ED9               	movwf	fsr2l,c
  5221  0018AA  0E01               	movlw	high (_TaskArray+2)
  5222  0018AC  20F4               	addwfc	prodh,w,c
  5223  0018AE  6EDA               	movwf	fsr2h,c
  5224  0018B0  0012               	return	
  5225  0018B2                     __end_ofPL22:
  5226                           	opt stack 0
  5227  0018B2                     PL34:
  5228                           	opt stack 21
  5229  0018B2  0E06               	movlw	low (_TaskArray+6)
  5230  0018B4  24F3               	addwf	prodl,w,c
  5231  0018B6  6ED9               	movwf	fsr2l,c
  5232  0018B8  0E01               	movlw	high (_TaskArray+6)
  5233  0018BA  20F4               	addwfc	prodh,w,c
  5234  0018BC  6EDA               	movwf	fsr2h,c
  5235  0018BE  0012               	return	
  5236  0018C0                     __end_ofPL34:
  5237                           	opt stack 0
  5238                           tosu	equ	0xFFF
  5239                           tosh	equ	0xFFE
  5240                           tosl	equ	0xFFD
  5241                           pclath	equ	0xFFA
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           prodh	equ	0xFF4
  5247                           prodl	equ	0xFF3
  5248                           intcon	equ	0xFF2
  5249                           intcon2	equ	0xFF1
  5250                           postinc0	equ	0xFEE
  5251                           wreg	equ	0xFE8
  5252                           indf1	equ	0xFE7
  5253                           plusw1	equ	0xFE3
  5254                           fsr1h	equ	0xFE2
  5255                           fsr1l	equ	0xFE1
  5256                           indf2	equ	0xFDF
  5257                           postinc2	equ	0xFDE
  5258                           postdec2	equ	0xFDD
  5259                           plusw2	equ	0xFDB
  5260                           fsr2h	equ	0xFDA
  5261                           fsr2l	equ	0xFD9
  5262                           status	equ	0xFD8
  5263                           
  5264 ;; *************** function _pressure *****************
  5265 ;; Defined at:
  5266 ;;		line 559 in file "common.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;		None
  5269 ;; Auto vars:     Size  Location     Type
  5270 ;;		None
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  1    wreg      void 
  5273 ;; Registers used:
  5274 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;Total ram usage:        1 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:    7
  5287 ;; This function calls:
  5288 ;;		_RTOS_DeleteTask
  5289 ;;		_RTOS_SetTask
  5290 ;;		___lbdiv
  5291 ;;		___lbmod
  5292 ;;		___lldiv
  5293 ;;		___llmod
  5294 ;;		_clear_matrix
  5295 ;;		_getTime
  5296 ;;		_interval_scroll_text
  5297 ;;		_pic_to_led
  5298 ;;		_putchar_down
  5299 ;;		_putchar_down_s
  5300 ;;		_scroll_left
  5301 ;;		_sprintf
  5302 ;; This function is called by:
  5303 ;;		_time_led
  5304 ;;		_RTOS_DispatchTask
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text22
  5309  0009B2                     __ptext22:
  5310                           	opt stack 0
  5311  0009B2                     _pressure:
  5312                           	opt stack 22
  5313                           
  5314                           ;common.c: 562: switch (events)
  5315                           
  5316                           ;incstack = 0
  5317  0009B2  D0C7               	goto	l6648
  5318  0009B4                     l6594:
  5319                           
  5320                           ;common.c: 565: clear_matrix();
  5321  0009B4  ECE9  F014         	call	_clear_matrix	;wreg free
  5322                           
  5323                           ;common.c: 566: if (press)
  5324  0009B8  D8ED               	call	PL100	;call to abstracted procedure
  5325  0009BA  E033               	bz	l6606
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;common.c: 567: {
  5329                           ;common.c: 568: pic_to_led(3,4);
  5330  0009BC  D8F1               	call	PL154	;call to abstracted procedure
  5331  0009BE  EC09  F010         	call	_pic_to_led
  5332                           
  5333                           ;common.c: 569: putchar_down(11,(press / 100) % 10, pFont);
  5334  0009C2  0E64               	movlw	100
  5335  0009C4  D8DA               	call	PL62	;call to abstracted procedure
  5336  0009C6  EC99  F00F         	call	___lldiv	;wreg free
  5337  0009CA  D8C3               	call	PL54	;call to abstracted procedure
  5338  0009CC  EC3E  F010         	call	___llmod	;wreg free
  5339  0009D0  5028               	movf	?___llmod,w,c
  5340  0009D2  EC75  F006         	call	PL20	;call to abstracted procedure
  5341  0009D6  0E0B               	movlw	11
  5342  0009D8  ECCD  F00D         	call	_putchar_down
  5343                           
  5344                           ;common.c: 570: putchar_down(17,(press / 10) % 10, pFont);
  5345  0009DC  0E0A               	movlw	10
  5346  0009DE  D8CD               	call	PL62	;call to abstracted procedure
  5347  0009E0  EC99  F00F         	call	___lldiv	;wreg free
  5348  0009E4  D8B6               	call	PL54	;call to abstracted procedure
  5349  0009E6  EC3E  F010         	call	___llmod	;wreg free
  5350  0009EA  5028               	movf	?___llmod,w,c
  5351  0009EC  EC75  F006         	call	PL20	;call to abstracted procedure
  5352  0009F0  0E11               	movlw	17
  5353  0009F2  ECCD  F00D         	call	_putchar_down
  5354                           
  5355                           ;common.c: 571: putchar_down(23,press % 10, pFont);
  5356  0009F6  C0CF  F028         	movff	_press,___llmod@dividend
  5357  0009FA  C0D0  F029         	movff	_press+1,___llmod@dividend+1
  5358  0009FE  C0D1  F02A         	movff	_press+2,___llmod@dividend+2
  5359  000A02  C0D2  F02B         	movff	_press+3,___llmod@dividend+3
  5360  000A06  0E0A               	movlw	10
  5361  000A08  6E2C               	movwf	___llmod@divisor,c
  5362  000A0A  6A2D               	clrf	___llmod@divisor+1,c
  5363  000A0C  6A2E               	clrf	___llmod@divisor+2,c
  5364  000A0E  6A2F               	clrf	___llmod@divisor+3,c
  5365  000A10  EC3E  F010         	call	___llmod	;wreg free
  5366  000A14  5028               	movf	?___llmod,w,c
  5367  000A16  EC75  F006         	call	PL20	;call to abstracted procedure
  5368  000A1A  0E17               	movlw	23
  5369  000A1C  ECCD  F00D         	call	_putchar_down
  5370                           
  5371                           ;common.c: 572: } else
  5372  000A20  D012               	goto	l6614
  5373  000A22                     l6606:
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;common.c: 573: {
  5377                           ;common.c: 574: pic_to_led(3,4);
  5378  000A22  D8BE               	call	PL154	;call to abstracted procedure
  5379  000A24  EC09  F010         	call	_pic_to_led
  5380                           
  5381                           ;common.c: 575: putchar_down(11,'E', &Font);
  5382  000A28  0E45               	movlw	69
  5383  000A2A  D8A1               	call	PL58	;call to abstracted procedure
  5384  000A2C  0E0B               	movlw	11
  5385  000A2E  ECCD  F00D         	call	_putchar_down
  5386                           
  5387                           ;common.c: 576: putchar_down(17,'R', &Font);
  5388  000A32  0E52               	movlw	82
  5389  000A34  D89C               	call	PL58	;call to abstracted procedure
  5390  000A36  0E11               	movlw	17
  5391  000A38  ECCD  F00D         	call	_putchar_down
  5392                           
  5393                           ;common.c: 577: putchar_down(23,'R', &Font);
  5394  000A3C  0E52               	movlw	82
  5395  000A3E  D897               	call	PL58	;call to abstracted procedure
  5396  000A40  0E17               	movlw	23
  5397  000A42  ECCD  F00D         	call	_putchar_down
  5398  000A46                     l6614:
  5399                           
  5400                           ;common.c: 579: }
  5401                           ;common.c: 581: events = 6;
  5402                           
  5403                           ;common.c: 582: RTOS_SetTask(default_state, 400, 0);
  5404  000A46  ECA8  F006         	call	PL86	;call to abstracted procedure
  5405  000A4A  0E01               	movlw	1
  5406  000A4C  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  5407  000A4E  0E90               	movlw	144
  5408  000A50  EC80  F006         	call	PL48	;call to abstracted procedure
  5409  000A54  EF5C  F00E         	goto	_RTOS_SetTask	;wreg free
  5410  000A58                     l6618:
  5411                           
  5412                           ;common.c: 590: events = 5;
  5413  000A58  0E05               	movlw	5
  5414  000A5A  6E65               	movwf	_events,c
  5415                           
  5416                           ;common.c: 592: if (press)
  5417  000A5C  D89B               	call	PL100	;call to abstracted procedure
  5418  000A5E  E00D               	bz	l6626
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;common.c: 593: {
  5422                           ;common.c: 594: sprintf(text_buf, "ìì.ðò.ñò.");
  5423  000A60  0E78               	movlw	low _text_buf
  5424  000A62  6E0F               	movwf	sprintf@sp,c
  5425  000A64  0E01               	movlw	high _text_buf
  5426  000A66  6E10               	movwf	sprintf@sp+1,c
  5427  000A68  0EF5               	movlw	low STR_1
  5428  000A6A  6E11               	movwf	sprintf@f,c
  5429  000A6C  0EBF               	movlw	high STR_1
  5430  000A6E  6E12               	movwf	sprintf@f+1,c
  5431  000A70  ECCA  F012         	call	_sprintf	;wreg free
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;common.c: 595: interval_scroll_text();
  5435  000A74  EC12  F013         	call	_interval_scroll_text	;wreg free
  5436                           
  5437                           ;common.c: 596: }else scroll_left();
  5438  000A78  D002               	goto	l6628
  5439  000A7A                     l6626:
  5440                           
  5441                           ; BSR set to: 0
  5442  000A7A  EC6F  F010         	call	_scroll_left	;wreg free
  5443  000A7E                     l6628:
  5444                           
  5445                           ;common.c: 597: if((TTime.Thr/10) % 10)
  5446  000A7E  EC7B  F006         	call	PL42	;call to abstracted procedure
  5447  000A82  51C6               	movf	(_TTime+2)& (0+255),w,b
  5448  000A84  ECB0  F012         	call	___lbdiv
  5449  000A88  ECB6  F013         	call	___lbmod
  5450  000A8C  0900               	iorlw	0
  5451  000A8E  E00D               	bz	l6632
  5452                           
  5453                           ;common.c: 598: putchar_down(0, (TTime.Thr/10) % 10, pFont);
  5454  000A90  EC7B  F006         	call	PL42	;call to abstracted procedure
  5455  000A94  51C6               	movf	(_TTime+2)& (0+255),w,b
  5456  000A96  ECB0  F012         	call	___lbdiv
  5457  000A9A  ECB6  F013         	call	___lbmod
  5458  000A9E  EC75  F006         	call	PL20	;call to abstracted procedure
  5459  000AA2  0E00               	movlw	0
  5460  000AA4  ECCD  F00D         	call	_putchar_down
  5461  000AA8  D005               	goto	l881
  5462  000AAA                     l6632:
  5463                           
  5464                           ;common.c: 599: else putchar_down(0, 0, &Font);
  5465  000AAA  6A31               	clrf	putchar_down@symbol,c
  5466  000AAC  EC84  F006         	call	PL64	;call to abstracted procedure
  5467  000AB0  ECCD  F00D         	call	_putchar_down
  5468  000AB4                     l881:
  5469                           
  5470                           ;common.c: 600: putchar_down(6, TTime.Thr % 10, pFont);
  5471  000AB4  ECAF  F006         	call	PL88	;call to abstracted procedure
  5472  000AB8  ECB6  F013         	call	___lbmod
  5473  000ABC  EC75  F006         	call	PL20	;call to abstracted procedure
  5474  000AC0  0E06               	movlw	6
  5475  000AC2  ECCD  F00D         	call	_putchar_down
  5476                           
  5477                           ;common.c: 601: putchar_down(13, (TTime.Tmin/10) % 10, pFont);
  5478  000AC6  EC7B  F006         	call	PL42	;call to abstracted procedure
  5479  000ACA  51C5               	movf	(_TTime+1)& (0+255),w,b
  5480  000ACC  ECB0  F012         	call	___lbdiv
  5481  000AD0  ECB6  F013         	call	___lbmod
  5482  000AD4  EC75  F006         	call	PL20	;call to abstracted procedure
  5483  000AD8  0E0D               	movlw	13
  5484  000ADA  ECCD  F00D         	call	_putchar_down
  5485                           
  5486                           ;common.c: 602: putchar_down(19, TTime.Tmin % 10, pFont);
  5487  000ADE  ECB4  F006         	call	PL90	;call to abstracted procedure
  5488  000AE2  ECB6  F013         	call	___lbmod
  5489  000AE6  EC75  F006         	call	PL20	;call to abstracted procedure
  5490  000AEA  0E13               	movlw	19
  5491  000AEC  ECCD  F00D         	call	_putchar_down
  5492                           
  5493                           ;common.c: 603: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  5494  000AF0  EC89  F006         	call	PL68	;call to abstracted procedure
  5495  000AF4  EC9F  F010         	call	_getTime	;wreg free
  5496                           
  5497                           ;common.c: 604: putchar_down_s(25, (TTime.Ts/10) % 10 + 1);
  5498  000AF8  EC7B  F006         	call	PL42	;call to abstracted procedure
  5499  000AFC  51C4               	movf	_TTime& (0+255),w,b
  5500  000AFE  ECB0  F012         	call	___lbdiv
  5501  000B02  ECB6  F013         	call	___lbmod
  5502  000B06  6E3D               	movwf	??_pressure& (0+255),c
  5503  000B08  283D               	incf	??_pressure,w,c
  5504  000B0A  6E17               	movwf	putchar_down_s@symbol,c
  5505  000B0C  0E19               	movlw	25
  5506  000B0E  EC83  F00D         	call	_putchar_down_s
  5507                           
  5508                           ;common.c: 605: putchar_down_s(29, TTime.Ts % 10 + 1);
  5509  000B12  ECB9  F006         	call	PL92	;call to abstracted procedure
  5510  000B16  ECB6  F013         	call	___lbmod
  5511  000B1A  6E3D               	movwf	??_pressure& (0+255),c
  5512  000B1C  283D               	incf	??_pressure,w,c
  5513  000B1E  6E17               	movwf	putchar_down_s@symbol,c
  5514  000B20  0E1D               	movlw	29
  5515  000B22  EC83  F00D         	call	_putchar_down_s
  5516                           
  5517                           ;common.c: 606: RTOS_DeleteTask(default_state);
  5518  000B26  ECE7  F00A         	call	PL44	;call to abstracted procedure
  5519  000B2A  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  5520                           
  5521                           ;common.c: 607: RTOS_DeleteTask(pressure);
  5522  000B2E  0EB2               	movlw	low _pressure
  5523  000B30  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5524  000B32  0E09               	movlw	high _pressure
  5525  000B34  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5526  000B36  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  5527                           
  5528                           ;common.c: 608: RTOS_SetTask(time_led,0,20);
  5529  000B3A  ECDD  F00A         	call	PL8	;call to abstracted procedure
  5530  000B3E  EF5C  F00E         	goto	_RTOS_SetTask	;wreg free
  5531  000B42                     l6648:
  5532  000B42  5065               	movf	_events,w,c
  5533                           
  5534                           ; Switch size 1, requested type "space"
  5535                           ; Number of cases is 3, Range of values is 4 to 6
  5536                           ; switch strategies available:
  5537                           ; Name         Instructions Cycles
  5538                           ; simple_byte           10     6 (average)
  5539                           ;	Chosen strategy is simple_byte
  5540  000B44  0A04               	xorlw	4	; case 4
  5541  000B46  E088               	bz	l6618
  5542  000B48  0A01               	xorlw	1	; case 5
  5543  000B4A  E101 D733          	bz	l6594
  5544  000B4E  0A03               	xorlw	3	; case 6
  5545  000B50  0012               	return	
  5546  000B52                     __end_of_pressure:
  5547                           	opt stack 0
  5548  000B52                     PL54:
  5549                           	opt stack 22
  5550  000B52  C01B  F028         	movff	?___lldiv,___llmod@dividend
  5551  000B56  C01C  F029         	movff	?___lldiv+1,___llmod@dividend+1
  5552  000B5A  C01D  F02A         	movff	?___lldiv+2,___llmod@dividend+2
  5553  000B5E  C01E  F02B         	movff	?___lldiv+3,___llmod@dividend+3
  5554  000B62  0E0A               	movlw	10
  5555  000B64  6E2C               	movwf	___llmod@divisor,c
  5556  000B66  6A2D               	clrf	___llmod@divisor+1,c
  5557  000B68  6A2E               	clrf	___llmod@divisor+2,c
  5558  000B6A  6A2F               	clrf	___llmod@divisor+3,c
  5559  000B6C  0C0A               	retlw	10
  5560  000B6E                     __end_ofPL54:
  5561                           	opt stack 0
  5562  000B6E                     PL58:
  5563                           	opt stack 22
  5564  000B6E  6E31               	movwf	putchar_down@symbol,c
  5565  000B70  0EB6               	movlw	low _Font
  5566  000B72  6E32               	movwf	putchar_down@pF,c
  5567  000B74  0EB9               	movlw	high _Font
  5568  000B76  6E33               	movwf	putchar_down@pF+1,c
  5569  000B78  0012               	return	
  5570  000B7A                     __end_ofPL58:
  5571                           	opt stack 0
  5572  000B7A                     PL62:
  5573                           	opt stack 22
  5574  000B7A  6E1F               	movwf	___lldiv@divisor,c
  5575  000B7C  6A20               	clrf	___lldiv@divisor+1,c
  5576  000B7E  6A21               	clrf	___lldiv@divisor+2,c
  5577  000B80  6A22               	clrf	___lldiv@divisor+3,c
  5578  000B82  C0CF  F01B         	movff	_press,___lldiv@dividend
  5579  000B86  C0D0  F01C         	movff	_press+1,___lldiv@dividend+1
  5580  000B8A  C0D1  F01D         	movff	_press+2,___lldiv@dividend+2
  5581  000B8E  C0D2  F01E         	movff	_press+3,___lldiv@dividend+3
  5582  000B92  0012               	return	
  5583  000B94                     __end_ofPL62:
  5584                           	opt stack 0
  5585  000B94                     PL100:
  5586                           	opt stack 22
  5587  000B94  0100               	movlb	0	; () banked
  5588  000B96  51CF               	movf	_press& (0+255),w,b
  5589  000B98  11D0               	iorwf	(_press+1)& (0+255),w,b
  5590  000B9A  11D1               	iorwf	(_press+2)& (0+255),w,b
  5591  000B9C  11D2               	iorwf	(_press+3)& (0+255),w,b
  5592  000B9E  0012               	return	
  5593  000BA0                     __end_ofPL100:
  5594                           	opt stack 0
  5595  000BA0                     PL154:
  5596                           	opt stack 22
  5597  000BA0  0E04               	movlw	4
  5598  000BA2  6E14               	movwf	pic_to_led@pic,c
  5599  000BA4  0C03               	retlw	3
  5600  000BA6                     __end_ofPL154:
  5601                           	opt stack 0
  5602                           tosu	equ	0xFFF
  5603                           tosh	equ	0xFFE
  5604                           tosl	equ	0xFFD
  5605                           pclath	equ	0xFFA
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           intcon	equ	0xFF2
  5613                           intcon2	equ	0xFF1
  5614                           postinc0	equ	0xFEE
  5615                           wreg	equ	0xFE8
  5616                           indf1	equ	0xFE7
  5617                           plusw1	equ	0xFE3
  5618                           fsr1h	equ	0xFE2
  5619                           fsr1l	equ	0xFE1
  5620                           indf2	equ	0xFDF
  5621                           postinc2	equ	0xFDE
  5622                           postdec2	equ	0xFDD
  5623                           plusw2	equ	0xFDB
  5624                           fsr2h	equ	0xFDA
  5625                           fsr2l	equ	0xFD9
  5626                           status	equ	0xFD8
  5627                           
  5628 ;; *************** function _home_temp *****************
  5629 ;; Defined at:
  5630 ;;		line 482 in file "common.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;		None
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;		None
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  1    wreg      void 
  5637 ;; Registers used:
  5638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;Total ram usage:        1 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    7
  5651 ;; This function calls:
  5652 ;;		_RTOS_DeleteTask
  5653 ;;		_RTOS_SetTask
  5654 ;;		___lbdiv
  5655 ;;		___lbmod
  5656 ;;		___lwdiv
  5657 ;;		___lwmod
  5658 ;;		_clear_matrix
  5659 ;;		_getTime
  5660 ;;		_pic_to_led
  5661 ;;		_putchar_down
  5662 ;;		_putchar_down_s
  5663 ;;		_scroll_left
  5664 ;; This function is called by:
  5665 ;;		_time_led
  5666 ;;		_RTOS_DispatchTask
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text23
  5671  000BA6                     __ptext23:
  5672                           	opt stack 0
  5673  000BA6                     _home_temp:
  5674                           	opt stack 22
  5675                           
  5676                           ;common.c: 484: switch (events)
  5677                           
  5678                           ;incstack = 0
  5679  000BA6  D099               	goto	l6590
  5680  000BA8                     l6544:
  5681                           
  5682                           ;common.c: 489: clear_matrix();
  5683  000BA8  ECE9  F014         	call	_clear_matrix	;wreg free
  5684                           
  5685                           ;common.c: 490: if (!((temperature/10) % 10))
  5686  000BAC  D8B9               	call	PL80	;call to abstracted procedure
  5687  000BAE  ECB7  F011         	call	___lwdiv	;wreg free
  5688  000BB2  D8C6               	call	PL84	;call to abstracted procedure
  5689  000BB4  EC00  F012         	call	___lwmod	;wreg free
  5690  000BB8  5016               	movf	?___lwmod,w,c
  5691  000BBA  1017               	iorwf	?___lwmod+1,w,c
  5692  000BBC  E112               	bnz	l6554
  5693                           
  5694                           ;common.c: 491: {
  5695                           ;common.c: 492: pic_to_led(3,1);
  5696  000BBE  D8DE               	call	PL162	;call to abstracted procedure
  5697  000BC0  EC09  F010         	call	_pic_to_led
  5698                           
  5699                           ;common.c: 494: putchar_down(13,temperature % 10, pFont);
  5700  000BC4  D8B5               	call	PL82	;call to abstracted procedure
  5701  000BC6  EC00  F012         	call	___lwmod	;wreg free
  5702  000BCA  5016               	movf	?___lwmod,w,c
  5703  000BCC  D88E               	call	PL20	;call to abstracted procedure
  5704  000BCE  0E0D               	movlw	13
  5705  000BD0  ECCD  F00D         	call	_putchar_down
  5706                           
  5707                           ;common.c: 495: putchar_down(19,176, &Font);
  5708  000BD4  0EB0               	movlw	176
  5709  000BD6  ECB7  F005         	call	PL58	;call to abstracted procedure
  5710  000BDA  0E13               	movlw	19
  5711  000BDC  ECCD  F00D         	call	_putchar_down
  5712                           
  5713                           ;common.c: 496: }else
  5714  000BE0  D01C               	goto	l6562
  5715  000BE2                     l6554:
  5716                           
  5717                           ;common.c: 497: {
  5718                           ;common.c: 498: pic_to_led(3,1);
  5719  000BE2  D8CC               	call	PL162	;call to abstracted procedure
  5720  000BE4  EC09  F010         	call	_pic_to_led
  5721                           
  5722                           ;common.c: 499: putchar_down(13,(temperature/10) % 10, pFont);
  5723  000BE8  D89B               	call	PL80	;call to abstracted procedure
  5724  000BEA  ECB7  F011         	call	___lwdiv	;wreg free
  5725  000BEE  D8A8               	call	PL84	;call to abstracted procedure
  5726  000BF0  EC00  F012         	call	___lwmod	;wreg free
  5727  000BF4  5016               	movf	?___lwmod,w,c
  5728  000BF6  D879               	call	PL20	;call to abstracted procedure
  5729  000BF8  0E0D               	movlw	13
  5730  000BFA  ECCD  F00D         	call	_putchar_down
  5731                           
  5732                           ;common.c: 500: putchar_down(19,temperature % 10, pFont);
  5733  000BFE  D898               	call	PL82	;call to abstracted procedure
  5734  000C00  EC00  F012         	call	___lwmod	;wreg free
  5735  000C04  5016               	movf	?___lwmod,w,c
  5736  000C06  D871               	call	PL20	;call to abstracted procedure
  5737  000C08  0E13               	movlw	19
  5738  000C0A  ECCD  F00D         	call	_putchar_down
  5739                           
  5740                           ;common.c: 501: putchar_down(25,176, &Font);
  5741  000C0E  0EB0               	movlw	176
  5742  000C10  ECB7  F005         	call	PL58	;call to abstracted procedure
  5743  000C14  0E19               	movlw	25
  5744  000C16  ECCD  F00D         	call	_putchar_down
  5745  000C1A                     l6562:
  5746                           
  5747                           ;common.c: 503: }
  5748                           ;common.c: 504: events = 6;
  5749                           
  5750                           ;common.c: 505: RTOS_SetTask(default_state, 750, 0);
  5751  000C1A  D89A               	call	PL86	;call to abstracted procedure
  5752  000C1C  0E02               	movlw	2
  5753  000C1E  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  5754  000C20  0EEE               	movlw	238
  5755  000C22  D86E               	call	PL48	;call to abstracted procedure
  5756  000C24  EF5C  F00E         	goto	_RTOS_SetTask	;wreg free
  5757  000C28                     l6566:
  5758                           
  5759                           ;common.c: 513: events = 5;
  5760  000C28  0E05               	movlw	5
  5761  000C2A  6E65               	movwf	_events,c
  5762                           
  5763                           ;common.c: 514: scroll_left();
  5764  000C2C  EC6F  F010         	call	_scroll_left	;wreg free
  5765                           
  5766                           ;common.c: 515: if((TTime.Thr/10) % 10)
  5767  000C30  D862               	call	PL42	;call to abstracted procedure
  5768  000C32  51C6               	movf	(_TTime+2)& (0+255),w,b
  5769  000C34  ECB0  F012         	call	___lbdiv
  5770  000C38  ECB6  F013         	call	___lbmod
  5771  000C3C  0900               	iorlw	0
  5772  000C3E  E00B               	bz	l6574
  5773                           
  5774                           ;common.c: 516: putchar_down(0, (TTime.Thr/10) % 10, pFont);
  5775  000C40  D85A               	call	PL42	;call to abstracted procedure
  5776  000C42  51C6               	movf	(_TTime+2)& (0+255),w,b
  5777  000C44  ECB0  F012         	call	___lbdiv
  5778  000C48  ECB6  F013         	call	___lbmod
  5779  000C4C  D84E               	call	PL20	;call to abstracted procedure
  5780  000C4E  0E00               	movlw	0
  5781  000C50  ECCD  F00D         	call	_putchar_down
  5782  000C54  D004               	goto	l857
  5783  000C56                     l6574:
  5784                           
  5785                           ;common.c: 517: else putchar_down(0, 0, &Font);
  5786  000C56  6A31               	clrf	putchar_down@symbol,c
  5787  000C58  D857               	call	PL64	;call to abstracted procedure
  5788  000C5A  ECCD  F00D         	call	_putchar_down
  5789  000C5E                     l857:
  5790                           
  5791                           ;common.c: 518: putchar_down(6, TTime.Thr % 10, pFont);
  5792  000C5E  D87F               	call	PL88	;call to abstracted procedure
  5793  000C60  ECB6  F013         	call	___lbmod
  5794  000C64  D842               	call	PL20	;call to abstracted procedure
  5795  000C66  0E06               	movlw	6
  5796  000C68  ECCD  F00D         	call	_putchar_down
  5797                           
  5798                           ;common.c: 519: putchar_down(13, (TTime.Tmin/10) % 10, pFont);
  5799  000C6C  D844               	call	PL42	;call to abstracted procedure
  5800  000C6E  51C5               	movf	(_TTime+1)& (0+255),w,b
  5801  000C70  ECB0  F012         	call	___lbdiv
  5802  000C74  ECB6  F013         	call	___lbmod
  5803  000C78  D838               	call	PL20	;call to abstracted procedure
  5804  000C7A  0E0D               	movlw	13
  5805  000C7C  ECCD  F00D         	call	_putchar_down
  5806                           
  5807                           ;common.c: 520: putchar_down(19, TTime.Tmin % 10, pFont);
  5808  000C80  D873               	call	PL90	;call to abstracted procedure
  5809  000C82  ECB6  F013         	call	___lbmod
  5810  000C86  D831               	call	PL20	;call to abstracted procedure
  5811  000C88  0E13               	movlw	19
  5812  000C8A  ECCD  F00D         	call	_putchar_down
  5813                           
  5814                           ;common.c: 521: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  5815  000C8E  D841               	call	PL68	;call to abstracted procedure
  5816  000C90  EC9F  F010         	call	_getTime	;wreg free
  5817                           
  5818                           ;common.c: 522: putchar_down_s(25, (TTime.Ts/10) % 10 + 1);
  5819  000C94  D830               	call	PL42	;call to abstracted procedure
  5820  000C96  51C4               	movf	_TTime& (0+255),w,b
  5821  000C98  ECB0  F012         	call	___lbdiv
  5822  000C9C  ECB6  F013         	call	___lbmod
  5823  000CA0  6E3D               	movwf	??_home_temp& (0+255),c
  5824  000CA2  283D               	incf	??_home_temp,w,c
  5825  000CA4  6E17               	movwf	putchar_down_s@symbol,c
  5826  000CA6  0E19               	movlw	25
  5827  000CA8  EC83  F00D         	call	_putchar_down_s
  5828                           
  5829                           ;common.c: 523: putchar_down_s(29, TTime.Ts % 10 + 1);
  5830  000CAC  D862               	call	PL92	;call to abstracted procedure
  5831  000CAE  ECB6  F013         	call	___lbmod
  5832  000CB2  6E3D               	movwf	??_home_temp& (0+255),c
  5833  000CB4  283D               	incf	??_home_temp,w,c
  5834  000CB6  6E17               	movwf	putchar_down_s@symbol,c
  5835  000CB8  0E1D               	movlw	29
  5836  000CBA  EC83  F00D         	call	_putchar_down_s
  5837                           
  5838                           ;common.c: 524: RTOS_DeleteTask(default_state);
  5839  000CBE  ECE7  F00A         	call	PL44	;call to abstracted procedure
  5840  000CC2  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  5841                           
  5842                           ;common.c: 525: RTOS_DeleteTask(home_temp);
  5843  000CC6  0EA6               	movlw	low _home_temp
  5844  000CC8  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5845  000CCA  0E0B               	movlw	high _home_temp
  5846  000CCC  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5847  000CCE  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  5848                           
  5849                           ;common.c: 526: RTOS_SetTask(time_led,0,20);
  5850  000CD2  ECDD  F00A         	call	PL8	;call to abstracted procedure
  5851  000CD6  EF5C  F00E         	goto	_RTOS_SetTask	;wreg free
  5852  000CDA                     l6590:
  5853  000CDA  5065               	movf	_events,w,c
  5854                           
  5855                           ; Switch size 1, requested type "space"
  5856                           ; Number of cases is 3, Range of values is 4 to 6
  5857                           ; switch strategies available:
  5858                           ; Name         Instructions Cycles
  5859                           ; simple_byte           10     6 (average)
  5860                           ;	Chosen strategy is simple_byte
  5861  000CDC  0A04               	xorlw	4	; case 4
  5862  000CDE  E0A4               	bz	l6566
  5863  000CE0  0A01               	xorlw	1	; case 5
  5864  000CE2  E101 D761          	bz	l6544
  5865  000CE6  0A03               	xorlw	3	; case 6
  5866  000CE8  0012               	return	
  5867  000CEA                     __end_of_home_temp:
  5868                           	opt stack 0
  5869  000CEA                     PL20:
  5870                           	opt stack 22
  5871  000CEA  6E31               	movwf	putchar_down@symbol,c
  5872  000CEC  C063  F032         	movff	_pFont,putchar_down@pF
  5873  000CF0  C064  F033         	movff	_pFont+1,putchar_down@pF+1
  5874  000CF4  0012               	return	
  5875  000CF6                     __end_ofPL20:
  5876                           	opt stack 0
  5877  000CF6                     PL42:
  5878                           	opt stack 22
  5879  000CF6  0E0A               	movlw	10
  5880  000CF8  6E13               	movwf	___lbmod@divisor,c
  5881  000CFA  6E0F               	movwf	___lbdiv@divisor,c
  5882  000CFC  0100               	movlb	0	; () banked
  5883  000CFE  0C0A               	retlw	10
  5884  000D00                     __end_ofPL42:
  5885                           	opt stack 0
  5886  000D00                     PL48:
  5887                           	opt stack 22
  5888  000D00  6E11               	movwf	RTOS_SetTask@taskDelay,c
  5889  000D02  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5890  000D04  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  5891  000D06  0012               	return	
  5892  000D08                     __end_ofPL48:
  5893                           	opt stack 0
  5894  000D08                     PL64:
  5895                           	opt stack 22
  5896  000D08  0EB6               	movlw	low _Font
  5897  000D0A  6E32               	movwf	putchar_down@pF,c
  5898  000D0C  0EB9               	movlw	high _Font
  5899  000D0E  6E33               	movwf	putchar_down@pF+1,c
  5900  000D10  0C00               	retlw	0
  5901  000D12                     __end_ofPL64:
  5902                           	opt stack 0
  5903  000D12                     PL68:
  5904                           	opt stack 22
  5905  000D12  0EC6               	movlw	low (_TTime+2)
  5906  000D14  6E14               	movwf	getTime@p3,c
  5907  000D16  0EC5               	movlw	low (_TTime+1)
  5908  000D18  6E15               	movwf	getTime@p2,c
  5909  000D1A  0EC4               	movlw	low _TTime
  5910  000D1C  6E16               	movwf	getTime@p1,c
  5911  000D1E  0012               	return	
  5912  000D20                     __end_ofPL68:
  5913                           	opt stack 0
  5914  000D20                     PL80:
  5915                           	opt stack 22
  5916  000D20  6A12               	clrf	___lwdiv@divisor+1,c
  5917  000D22  0E0A               	movlw	10
  5918  000D24  6E11               	movwf	___lwdiv@divisor,c
  5919  000D26  C0D5  F00F         	movff	_temperature,___lwdiv@dividend
  5920  000D2A  C0D6  F010         	movff	_temperature+1,___lwdiv@dividend+1
  5921  000D2E  0C0A               	retlw	10
  5922  000D30                     __end_ofPL80:
  5923                           	opt stack 0
  5924  000D30                     PL82:
  5925                           	opt stack 22
  5926  000D30  C0D5  F016         	movff	_temperature,___lwmod@dividend
  5927  000D34  C0D6  F017         	movff	_temperature+1,___lwmod@dividend+1
  5928  000D38  6A19               	clrf	___lwmod@divisor+1,c
  5929  000D3A  0E0A               	movlw	10
  5930  000D3C  6E18               	movwf	___lwmod@divisor,c
  5931  000D3E  0C0A               	retlw	10
  5932  000D40                     __end_ofPL82:
  5933                           	opt stack 0
  5934  000D40                     PL84:
  5935                           	opt stack 22
  5936  000D40  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  5937  000D44  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  5938  000D48  6A19               	clrf	___lwmod@divisor+1,c
  5939  000D4A  0E0A               	movlw	10
  5940  000D4C  6E18               	movwf	___lwmod@divisor,c
  5941  000D4E  0C0A               	retlw	10
  5942  000D50                     __end_ofPL84:
  5943                           	opt stack 0
  5944  000D50                     PL86:
  5945                           	opt stack 22
  5946  000D50  0E06               	movlw	6
  5947  000D52  6E65               	movwf	_events,c
  5948  000D54  0E54               	movlw	low _default_state
  5949  000D56  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5950  000D58  0E2A               	movlw	high _default_state
  5951  000D5A  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5952  000D5C  0012               	return	
  5953  000D5E                     __end_ofPL86:
  5954                           	opt stack 0
  5955  000D5E                     PL88:
  5956                           	opt stack 22
  5957  000D5E  0E0A               	movlw	10
  5958  000D60  6E13               	movwf	___lbmod@divisor,c
  5959  000D62  0100               	movlb	0	; () banked
  5960  000D64  51C6               	movf	(_TTime+2)& (0+255),w,b
  5961  000D66  0012               	return	
  5962  000D68                     __end_ofPL88:
  5963                           	opt stack 0
  5964  000D68                     PL90:
  5965                           	opt stack 22
  5966  000D68  0E0A               	movlw	10
  5967  000D6A  6E13               	movwf	___lbmod@divisor,c
  5968  000D6C  0100               	movlb	0	; () banked
  5969  000D6E  51C5               	movf	(_TTime+1)& (0+255),w,b
  5970  000D70  0012               	return	
  5971  000D72                     __end_ofPL90:
  5972                           	opt stack 0
  5973  000D72                     PL92:
  5974                           	opt stack 22
  5975  000D72  0E0A               	movlw	10
  5976  000D74  6E13               	movwf	___lbmod@divisor,c
  5977  000D76  0100               	movlb	0	; () banked
  5978  000D78  51C4               	movf	_TTime& (0+255),w,b
  5979  000D7A  0012               	return	
  5980  000D7C                     __end_ofPL92:
  5981                           	opt stack 0
  5982  000D7C                     PL162:
  5983                           	opt stack 22
  5984  000D7C  0E01               	movlw	1
  5985  000D7E  6E14               	movwf	pic_to_led@pic,c
  5986  000D80  0C03               	retlw	3
  5987  000D82                     __end_ofPL162:
  5988                           	opt stack 0
  5989                           tosu	equ	0xFFF
  5990                           tosh	equ	0xFFE
  5991                           tosl	equ	0xFFD
  5992                           pclath	equ	0xFFA
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           intcon	equ	0xFF2
  6000                           intcon2	equ	0xFF1
  6001                           postinc0	equ	0xFEE
  6002                           wreg	equ	0xFE8
  6003                           indf1	equ	0xFE7
  6004                           plusw1	equ	0xFE3
  6005                           fsr1h	equ	0xFE2
  6006                           fsr1l	equ	0xFE1
  6007                           indf2	equ	0xFDF
  6008                           postinc2	equ	0xFDE
  6009                           postdec2	equ	0xFDD
  6010                           plusw2	equ	0xFDB
  6011                           fsr2h	equ	0xFDA
  6012                           fsr2l	equ	0xFD9
  6013                           status	equ	0xFD8
  6014                           
  6015 ;; *************** function _time_set_min *****************
  6016 ;; Defined at:
  6017 ;;		line 31 in file "common.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;		None
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;		None
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  1    wreg      void 
  6024 ;; Registers used:
  6025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;Total ram usage:        0 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    7
  6038 ;; This function calls:
  6039 ;;		_RTOS_DeleteTask
  6040 ;;		_RTOS_SetTask
  6041 ;;		_Update_Matrix
  6042 ;;		___lbdiv
  6043 ;;		___lbmod
  6044 ;;		_putchar_b_buf
  6045 ;;		_setTime
  6046 ;; This function is called by:
  6047 ;;		_time_led
  6048 ;;		_RTOS_DispatchTask
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           	psect	text24
  6053  0016E8                     __ptext24:
  6054                           	opt stack 0
  6055  0016E8                     _time_set_min:
  6056                           	opt stack 22
  6057                           
  6058                           ;common.c: 33: show_digit = ~show_digit;
  6059                           
  6060                           ;incstack = 0
  6061  0016E8  B266               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  6062  0016EA  D002               	goto	u4650
  6063  0016EC  8266               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  6064  0016EE  D03B               	goto	l6160
  6065  0016F0                     u4650:
  6066  0016F0  9266               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  6067                           
  6068                           ;common.c: 34: switch (events)
  6069  0016F2  D039               	goto	l6160
  6070  0016F4                     l6120:
  6071                           
  6072                           ;common.c: 41: RTOS_DeleteTask(time_set_min);
  6073  0016F4  D86B               	call	PL146	;call to abstracted procedure
  6074  0016F6  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6075                           
  6076                           ;common.c: 42: RTOS_SetTask(time_set_hr, 0, 50);
  6077  0016FA  0E36               	movlw	low _time_set_hr
  6078  0016FC  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6079  0016FE  0E0F               	movlw	high _time_set_hr
  6080  001700  EC63  F00A         	call	PL10	;call to abstracted procedure
  6081  001704  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6082                           
  6083                           ;common.c: 43: RTOS_SetTask(default_state, 2000, 0);
  6084  001708  EC8B  F007         	call	PL2	;call to abstracted procedure
  6085  00170C  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6086  001710                     l6126:
  6087                           
  6088                           ;common.c: 44: events = 5;
  6089  001710  0E05               	movlw	5
  6090  001712  6E65               	movwf	_events,c
  6091                           
  6092                           ;common.c: 45: break;
  6093  001714  D032               	goto	l732
  6094  001716                     l6128:
  6095                           
  6096                           ;common.c: 47: RTOS_DeleteTask(time_set_min);
  6097  001716  D85A               	call	PL146	;call to abstracted procedure
  6098  001718  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6099                           
  6100                           ;common.c: 48: RTOS_DeleteTask(default_state);
  6101  00171C  ECE7  F00A         	call	PL44	;call to abstracted procedure
  6102  001720  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6103                           
  6104                           ;common.c: 49: RTOS_SetTask(time_led, 0, 20);
  6105  001724  ECDD  F00A         	call	PL8	;call to abstracted procedure
  6106  001728  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6107  00172C  D7F1               	goto	l6126
  6108  00172E                     l6134:
  6109                           
  6110                           ;common.c: 53: TSTime.Tmin++;
  6111  00172E  2A5A               	incf	_TSTime+1,f,c
  6112                           
  6113                           ;common.c: 54: if(TSTime.Tmin > 59) TSTime.Tmin = 0;
  6114  001730  0E3B               	movlw	59
  6115  001732  645A               	cpfsgt	_TSTime+1,c
  6116  001734  D001               	goto	l6140
  6117  001736  6A5A               	clrf	_TSTime+1,c
  6118  001738                     l6140:
  6119                           
  6120                           ;common.c: 55: RTOS_SetTask(default_state, 2000, 0);
  6121  001738  EC8B  F007         	call	PL2	;call to abstracted procedure
  6122  00173C  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6123                           
  6124                           ;common.c: 56: setTime(TSTime.Thr,TSTime.Tmin,0);
  6125  001740  EC3E  F008         	call	PL78	;call to abstracted procedure
  6126  001744  ECFB  F012         	call	_setTime
  6127  001748  D7E3               	goto	l6126
  6128  00174A                     l6146:
  6129                           
  6130                           ;common.c: 60: TSTime.Tmin--;
  6131  00174A  065A               	decf	_TSTime+1,f,c
  6132                           
  6133                           ;common.c: 61: if(TSTime.Tmin == 255) TSTime.Tmin = 59;
  6134  00174C  285A               	incf	_TSTime+1,w,c
  6135  00174E  E102               	bnz	l6152
  6136  001750  0E3B               	movlw	59
  6137  001752  6E5A               	movwf	_TSTime+1,c
  6138  001754                     l6152:
  6139                           
  6140                           ;common.c: 62: RTOS_SetTask(default_state, 2000, 0);
  6141  001754  EC8B  F007         	call	PL2	;call to abstracted procedure
  6142  001758  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6143                           
  6144                           ;common.c: 63: setTime(TSTime.Thr,TSTime.Tmin,0);
  6145  00175C  EC3E  F008         	call	PL78	;call to abstracted procedure
  6146  001760  ECFB  F012         	call	_setTime
  6147  001764  D7D5               	goto	l6126
  6148  001766                     l6160:
  6149  001766  5065               	movf	_events,w,c
  6150                           
  6151                           ; Switch size 1, requested type "space"
  6152                           ; Number of cases is 5, Range of values is 1 to 5
  6153                           ; switch strategies available:
  6154                           ; Name         Instructions Cycles
  6155                           ; simple_byte           16     9 (average)
  6156                           ;	Chosen strategy is simple_byte
  6157  001768  0A01               	xorlw	1	; case 1
  6158  00176A  E0C4               	bz	l6120
  6159  00176C  0A03               	xorlw	3	; case 2
  6160  00176E  E0DF               	bz	l6134
  6161  001770  0A01               	xorlw	1	; case 3
  6162  001772  E0EB               	bz	l6146
  6163  001774  0A07               	xorlw	7	; case 4
  6164  001776  E0CF               	bz	l6128
  6165  001778  0A01               	xorlw	1	; case 5
  6166  00177A                     l732:
  6167                           
  6168                           ;common.c: 68: if(show_digit)
  6169  00177A  A266               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  6170  00177C  D015               	goto	l6164
  6171                           
  6172                           ;common.c: 69: {
  6173                           ;common.c: 70: putchar_b_buf(13,(TSTime.Tmin/10) % 10 , pFont);
  6174  00177E  EC4D  F008         	call	PL142	;call to abstracted procedure
  6175  001782  ECB0  F012         	call	___lbdiv
  6176  001786  ECB6  F013         	call	___lbmod
  6177  00178A  EC38  F008         	call	PL30	;call to abstracted procedure
  6178  00178E  0E0D               	movlw	13
  6179  001790  ECD4  F00F         	call	_putchar_b_buf
  6180                           
  6181                           ;common.c: 71: putchar_b_buf(19,TSTime.Tmin % 10 , pFont);
  6182  001794  EC52  F008         	call	PL158	;call to abstracted procedure
  6183  001798  ECB6  F013         	call	___lbmod
  6184  00179C  EC38  F008         	call	PL30	;call to abstracted procedure
  6185  0017A0  0E13               	movlw	19
  6186  0017A2  ECD4  F00F         	call	_putchar_b_buf
  6187                           
  6188                           ;common.c: 72: }
  6189  0017A6  D00C               	goto	l6166
  6190  0017A8                     l6164:
  6191                           
  6192                           ;common.c: 73: else
  6193                           ;common.c: 74: {
  6194                           ;common.c: 75: putchar_b_buf(13,0, &Font);
  6195  0017A8  6A17               	clrf	putchar_b_buf@symbol,c
  6196  0017AA  EC33  F008         	call	PL6	;call to abstracted procedure
  6197  0017AE  0E0D               	movlw	13
  6198  0017B0  ECD4  F00F         	call	_putchar_b_buf
  6199                           
  6200                           ;common.c: 76: putchar_b_buf(19,0, &Font);
  6201  0017B4  6A17               	clrf	putchar_b_buf@symbol,c
  6202  0017B6  EC33  F008         	call	PL6	;call to abstracted procedure
  6203  0017BA  0E13               	movlw	19
  6204  0017BC  ECD4  F00F         	call	_putchar_b_buf
  6205  0017C0                     l6166:
  6206                           
  6207                           ;common.c: 77: }
  6208                           ;common.c: 78: Update_Matrix(Dis_Buff);
  6209  0017C0  0EA4               	movlw	low _Dis_Buff
  6210  0017C2  6E11               	movwf	Update_Matrix@buf,c
  6211  0017C4  EC3D  F012         	call	_Update_Matrix	;wreg free
  6212                           
  6213                           ;common.c: 79: en_put = 1;
  6214  0017C8  8066               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6215  0017CA  0012               	return		;funcret
  6216  0017CC                     __end_of_time_set_min:
  6217                           	opt stack 0
  6218  0017CC                     PL146:
  6219                           	opt stack 22
  6220  0017CC  0EE8               	movlw	low _time_set_min
  6221  0017CE  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6222  0017D0  0E16               	movlw	high _time_set_min
  6223  0017D2  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6224  0017D4  0012               	return	
  6225  0017D6                     __end_ofPL146:
  6226                           	opt stack 0
  6227                           tosu	equ	0xFFF
  6228                           tosh	equ	0xFFE
  6229                           tosl	equ	0xFFD
  6230                           pclath	equ	0xFFA
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           intcon2	equ	0xFF1
  6239                           postinc0	equ	0xFEE
  6240                           wreg	equ	0xFE8
  6241                           indf1	equ	0xFE7
  6242                           plusw1	equ	0xFE3
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           plusw2	equ	0xFDB
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _GetTime *****************
  6254 ;; Defined at:
  6255 ;;		line 22 in file "common.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;		None
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;		None
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      void 
  6262 ;; Registers used:
  6263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;Total ram usage:        0 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    7
  6276 ;; This function calls:
  6277 ;;		_getDate
  6278 ;;		_getTime
  6279 ;; This function is called by:
  6280 ;;		_INT0_ISR
  6281 ;;		_RTOS_DispatchTask
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           	psect	text25
  6286  0028D6                     __ptext25:
  6287                           	opt stack 0
  6288  0028D6                     _GetTime:
  6289                           	opt stack 0
  6290                           
  6291                           ;common.c: 24: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  6292                           
  6293                           ;incstack = 0
  6294  0028D6  EC89  F006         	call	PL68	;call to abstracted procedure
  6295  0028DA  EC9F  F010         	call	_getTime	;wreg free
  6296                           
  6297                           ;common.c: 25: getDate(&TTime.Tdy,&TTime.Tdt,&TTime.Tmt,&TTime.Tyr);
  6298  0028DE  0EC7               	movlw	low (_TTime+3)
  6299  0028E0  6E14               	movwf	getDate@p4,c
  6300  0028E2  0EC8               	movlw	low (_TTime+4)
  6301  0028E4  6E15               	movwf	getDate@p3,c
  6302  0028E6  0EC9               	movlw	low (_TTime+5)
  6303  0028E8  6E16               	movwf	getDate@p2,c
  6304  0028EA  0ECA               	movlw	low (_TTime+6)
  6305  0028EC  6E17               	movwf	getDate@p1,c
  6306  0028EE  EFE1  F00E         	goto	_getDate	;wreg free
  6307  0028F2                     __end_of_GetTime:
  6308                           	opt stack 0
  6309                           tosu	equ	0xFFF
  6310                           tosh	equ	0xFFE
  6311                           tosl	equ	0xFFD
  6312                           pclath	equ	0xFFA
  6313                           tblptru	equ	0xFF8
  6314                           tblptrh	equ	0xFF7
  6315                           tblptrl	equ	0xFF6
  6316                           tablat	equ	0xFF5
  6317                           prodh	equ	0xFF4
  6318                           prodl	equ	0xFF3
  6319                           intcon	equ	0xFF2
  6320                           intcon2	equ	0xFF1
  6321                           postinc0	equ	0xFEE
  6322                           wreg	equ	0xFE8
  6323                           indf1	equ	0xFE7
  6324                           plusw1	equ	0xFE3
  6325                           fsr1h	equ	0xFE2
  6326                           fsr1l	equ	0xFE1
  6327                           indf2	equ	0xFDF
  6328                           postinc2	equ	0xFDE
  6329                           postdec2	equ	0xFDD
  6330                           plusw2	equ	0xFDB
  6331                           fsr2h	equ	0xFDA
  6332                           fsr2l	equ	0xFD9
  6333                           status	equ	0xFD8
  6334                           
  6335 ;; *************** function _set_font_set *****************
  6336 ;; Defined at:
  6337 ;;		line 430 in file "common.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;		None
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;		None
  6342 ;; Return value:  Size  Location     Type
  6343 ;;                  1    wreg      void 
  6344 ;; Registers used:
  6345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6346 ;; Tracked objects:
  6347 ;;		On entry : 0/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;Total ram usage:        0 bytes
  6356 ;; Hardware stack levels used:    1
  6357 ;; Hardware stack levels required when called:    5
  6358 ;; This function calls:
  6359 ;;		_RTOS_DeleteTask
  6360 ;;		_RTOS_SetTask
  6361 ;;		_Update_Matrix
  6362 ;;		___lbmod
  6363 ;;		_putchar_b_buf
  6364 ;;		_set_font
  6365 ;;		_write_eep
  6366 ;; This function is called by:
  6367 ;;		_time_set_dy
  6368 ;;		_RTOS_DispatchTask
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text26
  6373  0014EA                     __ptext26:
  6374                           	opt stack 0
  6375  0014EA                     _set_font_set:
  6376                           	opt stack 24
  6377                           
  6378                           ;common.c: 432: switch (events)
  6379                           
  6380                           ;incstack = 0
  6381  0014EA  D033               	goto	l6534
  6382  0014EC                     l6490:
  6383                           
  6384                           ;common.c: 438: RTOS_DeleteTask(set_font_set);
  6385  0014EC  D87A               	call	PL140	;call to abstracted procedure
  6386  0014EE  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6387                           
  6388                           ;common.c: 439: RTOS_SetTask(time_led, 0, 20);
  6389  0014F2  D863               	call	PL8	;call to abstracted procedure
  6390  0014F4  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6391                           
  6392                           ;common.c: 440: RTOS_DeleteTask(default_state);
  6393  0014F8  D86A               	call	PL44	;call to abstracted procedure
  6394  0014FA  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6395  0014FE                     l6496:
  6396                           
  6397                           ;common.c: 441: events = 5;
  6398  0014FE  0E05               	movlw	5
  6399  001500  6E65               	movwf	_events,c
  6400                           
  6401                           ;common.c: 442: break;
  6402  001502  D031               	goto	l838
  6403  001504                     l6498:
  6404                           
  6405                           ;common.c: 444: RTOS_DeleteTask(set_font_set);
  6406  001504  D86E               	call	PL140	;call to abstracted procedure
  6407  001506  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6408                           
  6409                           ;common.c: 445: RTOS_DeleteTask(default_state);
  6410  00150A  D861               	call	PL44	;call to abstracted procedure
  6411  00150C  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6412                           
  6413                           ;common.c: 446: RTOS_SetTask(time_led, 0, 20);
  6414  001510  D854               	call	PL8	;call to abstracted procedure
  6415  001512  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6416  001516  D7F3               	goto	l6496
  6417  001518                     l6504:
  6418                           
  6419                           ;common.c: 450: type_font++;
  6420  001518  2A62               	incf	_type_font,f,c
  6421                           
  6422                           ;common.c: 451: if(type_font > 5) type_font = 1;
  6423  00151A  0E05               	movlw	5
  6424  00151C  6462               	cpfsgt	_type_font,c
  6425  00151E  D002               	goto	l6510
  6426  001520  0E01               	movlw	1
  6427  001522  6E62               	movwf	_type_font,c
  6428  001524                     l6510:
  6429                           
  6430                           ;common.c: 452: RTOS_SetTask(default_state, 2000, 0);
  6431  001524  EC8B  F007         	call	PL2	;call to abstracted procedure
  6432  001528  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6433                           
  6434                           ;common.c: 453: events = 5;
  6435                           
  6436                           ;common.c: 454: write_eep(0,type_font);
  6437  00152C  D855               	call	PL102	;call to abstracted procedure
  6438  00152E  ECDB  F013         	call	_write_eep
  6439  001532                     l6516:
  6440                           
  6441                           ;common.c: 455: set_font();
  6442  001532  EC91  F011         	call	_set_font	;wreg free
  6443                           
  6444                           ;common.c: 456: break;
  6445  001536  D017               	goto	l838
  6446  001538                     l6518:
  6447                           
  6448                           ;common.c: 458: type_font--;
  6449  001538  0662               	decf	_type_font,f,c
  6450                           
  6451                           ;common.c: 459: if(type_font == 0) type_font = 5;
  6452  00153A  5062               	movf	_type_font,w,c
  6453  00153C  E102               	bnz	l6524
  6454  00153E  0E05               	movlw	5
  6455  001540  6E62               	movwf	_type_font,c
  6456  001542                     l6524:
  6457                           
  6458                           ;common.c: 460: RTOS_SetTask(default_state, 2000, 0);
  6459  001542  EC8B  F007         	call	PL2	;call to abstracted procedure
  6460  001546  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6461                           
  6462                           ;common.c: 461: events = 5;
  6463                           
  6464                           ;common.c: 462: write_eep(0,type_font);
  6465  00154A  D846               	call	PL102	;call to abstracted procedure
  6466  00154C  ECDB  F013         	call	_write_eep
  6467  001550  D7F0               	goto	l6516
  6468  001552                     l6534:
  6469  001552  5065               	movf	_events,w,c
  6470                           
  6471                           ; Switch size 1, requested type "space"
  6472                           ; Number of cases is 5, Range of values is 1 to 5
  6473                           ; switch strategies available:
  6474                           ; Name         Instructions Cycles
  6475                           ; simple_byte           16     9 (average)
  6476                           ;	Chosen strategy is simple_byte
  6477  001554  0A01               	xorlw	1	; case 1
  6478  001556  E0CA               	bz	l6490
  6479  001558  0A03               	xorlw	3	; case 2
  6480  00155A  E0DE               	bz	l6504
  6481  00155C  0A01               	xorlw	1	; case 3
  6482  00155E  E0EC               	bz	l6518
  6483  001560  0A07               	xorlw	7	; case 4
  6484  001562  E0D0               	bz	l6498
  6485  001564  0A01               	xorlw	1	; case 5
  6486  001566                     l838:
  6487                           
  6488                           ;common.c: 466: if(en_put)
  6489  001566  A066               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6490  001568  D022               	goto	l6538
  6491                           
  6492                           ;common.c: 467: {
  6493                           ;common.c: 468: putchar_b_buf(0,'Ø', &Font);
  6494  00156A  0ED8               	movlw	216
  6495  00156C  ECCE  F004         	call	PL4	;call to abstracted procedure
  6496  001570  0E00               	movlw	0
  6497  001572  ECD4  F00F         	call	_putchar_b_buf
  6498                           
  6499                           ;common.c: 469: putchar_b_buf(6,'ð', &Font);
  6500  001576  0EF0               	movlw	240
  6501  001578  ECCE  F004         	call	PL4	;call to abstracted procedure
  6502  00157C  0E06               	movlw	6
  6503  00157E  ECD4  F00F         	call	_putchar_b_buf
  6504                           
  6505                           ;common.c: 470: putchar_b_buf(12,':', &Font);
  6506  001582  0E3A               	movlw	58
  6507  001584  ECCE  F004         	call	PL4	;call to abstracted procedure
  6508  001588  0E0C               	movlw	12
  6509  00158A  ECD4  F00F         	call	_putchar_b_buf
  6510                           
  6511                           ;common.c: 471: putchar_b_buf(18,type_font % 10, pFont);
  6512  00158E  0E0A               	movlw	10
  6513  001590  6E13               	movwf	___lbmod@divisor,c
  6514  001592  5062               	movf	_type_font,w,c
  6515  001594  ECB6  F013         	call	___lbmod
  6516  001598  EC38  F008         	call	PL30	;call to abstracted procedure
  6517  00159C  0E12               	movlw	18
  6518  00159E  ECD4  F00F         	call	_putchar_b_buf
  6519                           
  6520                           ;common.c: 472: putchar_b_buf(24,0, &Font);
  6521  0015A2  6A17               	clrf	putchar_b_buf@symbol,c
  6522  0015A4  EC33  F008         	call	PL6	;call to abstracted procedure
  6523  0015A8  0E18               	movlw	24
  6524  0015AA  ECD4  F00F         	call	_putchar_b_buf
  6525  0015AE                     l6538:
  6526                           
  6527                           ;common.c: 473: }
  6528                           ;common.c: 474: Update_Matrix(Dis_Buff);
  6529  0015AE  0EA4               	movlw	low _Dis_Buff
  6530  0015B0  6E11               	movwf	Update_Matrix@buf,c
  6531  0015B2  EC3D  F012         	call	_Update_Matrix	;wreg free
  6532                           
  6533                           ;common.c: 475: en_put=1;
  6534  0015B6  8066               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6535  0015B8  0012               	return		;funcret
  6536  0015BA                     __end_of_set_font_set:
  6537                           	opt stack 0
  6538  0015BA                     PL8:
  6539                           	opt stack 22
  6540  0015BA  0EE6               	movlw	low _time_led
  6541  0015BC  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6542  0015BE  0E13               	movlw	high _time_led
  6543  0015C0  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6544  0015C2  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  6545  0015C4  6A11               	clrf	RTOS_SetTask@taskDelay,c
  6546  0015C6  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  6547  0015C8  0E14               	movlw	20
  6548  0015CA  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  6549  0015CC  0C14               	retlw	20
  6550  0015CE                     __end_ofPL8:
  6551                           	opt stack 0
  6552  0015CE                     PL44:
  6553                           	opt stack 22
  6554  0015CE  0E54               	movlw	low _default_state
  6555  0015D0  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6556  0015D2  0E2A               	movlw	high _default_state
  6557  0015D4  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6558  0015D6  0012               	return	
  6559  0015D8                     __end_ofPL44:
  6560                           	opt stack 0
  6561  0015D8                     PL102:
  6562                           	opt stack 24
  6563  0015D8  0E05               	movlw	5
  6564  0015DA  6E65               	movwf	_events,c
  6565  0015DC  C062  F00F         	movff	_type_font,write_eep@data
  6566  0015E0  0C00               	retlw	0
  6567  0015E2                     __end_ofPL102:
  6568                           	opt stack 0
  6569  0015E2                     PL140:
  6570                           	opt stack 24
  6571  0015E2  0EEA               	movlw	low _set_font_set
  6572  0015E4  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6573  0015E6  0E14               	movlw	high _set_font_set
  6574  0015E8  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6575  0015EA  0012               	return	
  6576  0015EC                     __end_ofPL140:
  6577                           	opt stack 0
  6578                           tosu	equ	0xFFF
  6579                           tosh	equ	0xFFE
  6580                           tosl	equ	0xFFD
  6581                           pclath	equ	0xFFA
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           intcon	equ	0xFF2
  6589                           intcon2	equ	0xFF1
  6590                           postinc0	equ	0xFEE
  6591                           wreg	equ	0xFE8
  6592                           indf1	equ	0xFE7
  6593                           plusw1	equ	0xFE3
  6594                           fsr1h	equ	0xFE2
  6595                           fsr1l	equ	0xFE1
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           plusw2	equ	0xFDB
  6600                           fsr2h	equ	0xFDA
  6601                           fsr2l	equ	0xFD9
  6602                           status	equ	0xFD8
  6603                           
  6604 ;; *************** function _time_set_dy *****************
  6605 ;; Defined at:
  6606 ;;		line 351 in file "common.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;Total ram usage:        0 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    7
  6627 ;; This function calls:
  6628 ;;		_RTOS_DeleteTask
  6629 ;;		_RTOS_SetTask
  6630 ;;		_Update_Matrix
  6631 ;;		_putchar_b_buf
  6632 ;;		_setDate
  6633 ;; This function is called by:
  6634 ;;		_time_set_dt
  6635 ;;		_RTOS_DispatchTask
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text27
  6640  000D82                     __ptext27:
  6641                           	opt stack 0
  6642  000D82                     _time_set_dy:
  6643                           	opt stack 22
  6644                           
  6645                           ;common.c: 353: switch (events)
  6646                           
  6647                           ;incstack = 0
  6648  000D82  D03A               	goto	l6462
  6649  000D84                     l6420:
  6650                           
  6651                           ;common.c: 359: RTOS_DeleteTask(time_set_dy);
  6652  000D84  D8D3               	call	PL136	;call to abstracted procedure
  6653  000D86  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6654                           
  6655                           ;common.c: 360: RTOS_SetTask(set_font_set, 0, 20);
  6656  000D8A  0EEA               	movlw	low _set_font_set
  6657  000D8C  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6658  000D8E  0E14               	movlw	high _set_font_set
  6659  000D90  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6660  000D92  EC6A  F00A         	call	PL18	;call to abstracted procedure
  6661  000D96  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6662                           
  6663                           ;common.c: 361: RTOS_SetTask(default_state, 2000, 0);
  6664  000D9A  D8BD               	call	PL2	;call to abstracted procedure
  6665  000D9C  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6666                           
  6667                           ;common.c: 362: events = 5;
  6668                           
  6669                           ;common.c: 363: en_put=1;
  6670  000DA0  ECEF  F009         	call	PL152	;call to abstracted procedure
  6671                           
  6672                           ;common.c: 364: break;
  6673  000DA4  D033               	goto	l816
  6674  000DA6                     l6430:
  6675                           
  6676                           ;common.c: 366: RTOS_DeleteTask(time_set_dy);
  6677  000DA6  D8C2               	call	PL136	;call to abstracted procedure
  6678  000DA8  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6679                           
  6680                           ;common.c: 367: RTOS_DeleteTask(default_state);
  6681  000DAC  ECE7  F00A         	call	PL44	;call to abstracted procedure
  6682  000DB0  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  6683                           
  6684                           ;common.c: 368: RTOS_SetTask(time_led, 0, 20);
  6685  000DB4  ECDD  F00A         	call	PL8	;call to abstracted procedure
  6686  000DB8  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6687                           
  6688                           ;common.c: 369: events = 5;
  6689  000DBC  0E05               	movlw	5
  6690  000DBE  6E65               	movwf	_events,c
  6691                           
  6692                           ;common.c: 370: break;
  6693  000DC0  D025               	goto	l816
  6694  000DC2                     l6436:
  6695                           
  6696                           ;common.c: 372: TSTime.Tdy++;
  6697  000DC2  2A5C               	incf	_TSTime+3,f,c
  6698                           
  6699                           ;common.c: 373: if(TSTime.Tdy > 7) TSTime.Tdy = 1;
  6700  000DC4  0E07               	movlw	7
  6701  000DC6  645C               	cpfsgt	_TSTime+3,c
  6702  000DC8  D002               	goto	l6442
  6703  000DCA  0E01               	movlw	1
  6704  000DCC  6E5C               	movwf	_TSTime+3,c
  6705  000DCE                     l6442:
  6706                           
  6707                           ;common.c: 374: RTOS_SetTask(default_state, 2000, 0);
  6708  000DCE  D8A3               	call	PL2	;call to abstracted procedure
  6709  000DD0  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6710                           
  6711                           ;common.c: 375: events = 5;
  6712                           
  6713                           ;common.c: 376: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6714  000DD4  ECE0  F009         	call	PL16	;call to abstracted procedure
  6715  000DD8  EC5B  F012         	call	_setDate
  6716                           
  6717                           ;common.c: 377: break;
  6718  000DDC  D017               	goto	l816
  6719  000DDE                     l6448:
  6720                           
  6721                           ;common.c: 379: TSTime.Tdy--;
  6722  000DDE  065C               	decf	_TSTime+3,f,c
  6723                           
  6724                           ;common.c: 380: if(TSTime.Tdy == 0) TSTime.Tdy = 7;
  6725  000DE0  505C               	movf	_TSTime+3,w,c
  6726  000DE2  E102               	bnz	l6454
  6727  000DE4  0E07               	movlw	7
  6728  000DE6  6E5C               	movwf	_TSTime+3,c
  6729  000DE8                     l6454:
  6730                           
  6731                           ;common.c: 381: RTOS_SetTask(default_state, 2000, 0);
  6732  000DE8  D896               	call	PL2	;call to abstracted procedure
  6733  000DEA  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  6734                           
  6735                           ;common.c: 382: events = 5;
  6736                           
  6737                           ;common.c: 383: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6738  000DEE  ECE0  F009         	call	PL16	;call to abstracted procedure
  6739  000DF2  EC5B  F012         	call	_setDate
  6740                           
  6741                           ;common.c: 384: break;
  6742  000DF6  D00A               	goto	l816
  6743  000DF8                     l6462:
  6744  000DF8  5065               	movf	_events,w,c
  6745                           
  6746                           ; Switch size 1, requested type "space"
  6747                           ; Number of cases is 5, Range of values is 1 to 5
  6748                           ; switch strategies available:
  6749                           ; Name         Instructions Cycles
  6750                           ; simple_byte           16     9 (average)
  6751                           ;	Chosen strategy is simple_byte
  6752  000DFA  0A01               	xorlw	1	; case 1
  6753  000DFC  E0C3               	bz	l6420
  6754  000DFE  0A03               	xorlw	3	; case 2
  6755  000E00  E0E0               	bz	l6436
  6756  000E02  0A01               	xorlw	1	; case 3
  6757  000E04  E0EC               	bz	l6448
  6758  000E06  0A07               	xorlw	7	; case 4
  6759  000E08  E0CE               	bz	l6430
  6760  000E0A  0A01               	xorlw	1	; case 5
  6761  000E0C                     l816:
  6762                           
  6763                           ;common.c: 386: if(en_put)
  6764  000E0C  A066               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6765  000E0E  D07D               	goto	l6484
  6766                           
  6767                           ;common.c: 387: {
  6768                           ;common.c: 388: putchar_b_buf(0,'Ä', &Font);
  6769  000E10  0EC4               	movlw	196
  6770  000E12  ECCE  F004         	call	PL4	;call to abstracted procedure
  6771  000E16  0E00               	movlw	0
  6772  000E18  ECD4  F00F         	call	_putchar_b_buf
  6773                           
  6774                           ;common.c: 389: putchar_b_buf(6,'í', &Font);
  6775  000E1C  0EED               	movlw	237
  6776  000E1E  ECCE  F004         	call	PL4	;call to abstracted procedure
  6777  000E22  0E06               	movlw	6
  6778  000E24  ECD4  F00F         	call	_putchar_b_buf
  6779                           
  6780                           ;common.c: 390: putchar_b_buf(12,':', &Font);
  6781  000E28  0E3A               	movlw	58
  6782  000E2A  ECCE  F004         	call	PL4	;call to abstracted procedure
  6783  000E2E  0E0C               	movlw	12
  6784  000E30  ECD4  F00F         	call	_putchar_b_buf
  6785                           
  6786                           ;common.c: 391: switch(TSTime.Tdy)
  6787  000E34  D05B               	goto	l6482
  6788  000E36                     l6466:
  6789                           
  6790                           ;common.c: 394: putchar_b_buf(18,'Ï', &Font);
  6791  000E36  0ECF               	movlw	207
  6792  000E38  ECCE  F004         	call	PL4	;call to abstracted procedure
  6793  000E3C  0E12               	movlw	18
  6794  000E3E  ECD4  F00F         	call	_putchar_b_buf
  6795                           
  6796                           ;common.c: 395: putchar_b_buf(24,'í', &Font);
  6797  000E42  0EED               	movlw	237
  6798  000E44  ECCE  F004         	call	PL4	;call to abstracted procedure
  6799  000E48  0E18               	movlw	24
  6800  000E4A  ECD4  F00F         	call	_putchar_b_buf
  6801                           
  6802                           ;common.c: 396: break;
  6803  000E4E  D05D               	goto	l6484
  6804  000E50                     l6468:
  6805                           
  6806                           ;common.c: 398: putchar_b_buf(18,'Â', &Font);
  6807  000E50  0EC2               	movlw	194
  6808  000E52  ECCE  F004         	call	PL4	;call to abstracted procedure
  6809  000E56  0E12               	movlw	18
  6810  000E58  ECD4  F00F         	call	_putchar_b_buf
  6811                           
  6812                           ;common.c: 399: putchar_b_buf(24,'ò', &Font);
  6813  000E5C  0EF2               	movlw	242
  6814  000E5E  ECCE  F004         	call	PL4	;call to abstracted procedure
  6815  000E62  0E18               	movlw	24
  6816  000E64  ECD4  F00F         	call	_putchar_b_buf
  6817                           
  6818                           ;common.c: 400: break;
  6819  000E68  D050               	goto	l6484
  6820  000E6A                     l6470:
  6821                           
  6822                           ;common.c: 402: putchar_b_buf(18,'Ñ', &Font);
  6823  000E6A  0ED1               	movlw	209
  6824  000E6C  ECCE  F004         	call	PL4	;call to abstracted procedure
  6825  000E70  0E12               	movlw	18
  6826  000E72  ECD4  F00F         	call	_putchar_b_buf
  6827                           
  6828                           ;common.c: 403: putchar_b_buf(24,'ð', &Font);
  6829  000E76  0EF0               	movlw	240
  6830  000E78  ECCE  F004         	call	PL4	;call to abstracted procedure
  6831  000E7C  0E18               	movlw	24
  6832  000E7E  ECD4  F00F         	call	_putchar_b_buf
  6833                           
  6834                           ;common.c: 404: break;
  6835  000E82  D043               	goto	l6484
  6836  000E84                     l6472:
  6837                           
  6838                           ;common.c: 406: putchar_b_buf(18,'×', &Font);
  6839  000E84  0ED7               	movlw	215
  6840  000E86  ECCE  F004         	call	PL4	;call to abstracted procedure
  6841  000E8A  0E12               	movlw	18
  6842  000E8C  ECD4  F00F         	call	_putchar_b_buf
  6843                           
  6844                           ;common.c: 407: putchar_b_buf(24,'ò', &Font);
  6845  000E90  0EF2               	movlw	242
  6846  000E92  ECCE  F004         	call	PL4	;call to abstracted procedure
  6847  000E96  0E18               	movlw	24
  6848  000E98  ECD4  F00F         	call	_putchar_b_buf
  6849                           
  6850                           ;common.c: 408: break;
  6851  000E9C  D036               	goto	l6484
  6852  000E9E                     l6474:
  6853                           
  6854                           ;common.c: 410: putchar_b_buf(18,'Ï', &Font);
  6855  000E9E  0ECF               	movlw	207
  6856  000EA0  ECCE  F004         	call	PL4	;call to abstracted procedure
  6857  000EA4  0E12               	movlw	18
  6858  000EA6  ECD4  F00F         	call	_putchar_b_buf
  6859                           
  6860                           ;common.c: 411: putchar_b_buf(24,'ò', &Font);
  6861  000EAA  0EF2               	movlw	242
  6862  000EAC  ECCE  F004         	call	PL4	;call to abstracted procedure
  6863  000EB0  0E18               	movlw	24
  6864  000EB2  ECD4  F00F         	call	_putchar_b_buf
  6865                           
  6866                           ;common.c: 412: break;
  6867  000EB6  D029               	goto	l6484
  6868  000EB8                     l6476:
  6869                           
  6870                           ;common.c: 414: putchar_b_buf(18,'Ñ', &Font);
  6871  000EB8  0ED1               	movlw	209
  6872  000EBA  ECCE  F004         	call	PL4	;call to abstracted procedure
  6873  000EBE  0E12               	movlw	18
  6874  000EC0  ECD4  F00F         	call	_putchar_b_buf
  6875                           
  6876                           ;common.c: 415: putchar_b_buf(24,'á', &Font);
  6877  000EC4  0EE1               	movlw	225
  6878  000EC6  ECCE  F004         	call	PL4	;call to abstracted procedure
  6879  000ECA  0E18               	movlw	24
  6880  000ECC  ECD4  F00F         	call	_putchar_b_buf
  6881                           
  6882                           ;common.c: 416: break;
  6883  000ED0  D01C               	goto	l6484
  6884  000ED2                     l6478:
  6885                           
  6886                           ;common.c: 418: putchar_b_buf(18,'Í', &Font);
  6887  000ED2  0ECD               	movlw	205
  6888  000ED4  ECCE  F004         	call	PL4	;call to abstracted procedure
  6889  000ED8  0E12               	movlw	18
  6890  000EDA  ECD4  F00F         	call	_putchar_b_buf
  6891                           
  6892                           ;common.c: 419: putchar_b_buf(24,'ä', &Font);
  6893  000EDE  0EE4               	movlw	228
  6894  000EE0  ECCE  F004         	call	PL4	;call to abstracted procedure
  6895  000EE4  0E18               	movlw	24
  6896  000EE6  ECD4  F00F         	call	_putchar_b_buf
  6897                           
  6898                           ;common.c: 420: break;
  6899  000EEA  D00F               	goto	l6484
  6900  000EEC                     l6482:
  6901  000EEC  505C               	movf	_TSTime+3,w,c
  6902                           
  6903                           ; Switch size 1, requested type "space"
  6904                           ; Number of cases is 7, Range of values is 1 to 7
  6905                           ; switch strategies available:
  6906                           ; Name         Instructions Cycles
  6907                           ; simple_byte           22    12 (average)
  6908                           ;	Chosen strategy is simple_byte
  6909  000EEE  0A01               	xorlw	1	; case 1
  6910  000EF0  E0F0               	bz	l6478
  6911  000EF2  0A03               	xorlw	3	; case 2
  6912  000EF4  E0A0               	bz	l6466
  6913  000EF6  0A01               	xorlw	1	; case 3
  6914  000EF8  E0AB               	bz	l6468
  6915  000EFA  0A07               	xorlw	7	; case 4
  6916  000EFC  E0B6               	bz	l6470
  6917  000EFE  0A01               	xorlw	1	; case 5
  6918  000F00  E0C1               	bz	l6472
  6919  000F02  0A03               	xorlw	3	; case 6
  6920  000F04  E0CC               	bz	l6474
  6921  000F06  0A01               	xorlw	1	; case 7
  6922  000F08  E0D7               	bz	l6476
  6923  000F0A                     l6484:
  6924                           
  6925                           ;common.c: 422: }
  6926                           ;common.c: 423: Update_Matrix(Dis_Buff);
  6927  000F0A  0EA4               	movlw	low _Dis_Buff
  6928  000F0C  6E11               	movwf	Update_Matrix@buf,c
  6929  000F0E  EC3D  F012         	call	_Update_Matrix	;wreg free
  6930                           
  6931                           ;common.c: 424: en_put=1;
  6932  000F12  8066               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6933  000F14  0012               	return		;funcret
  6934  000F16                     __end_of_time_set_dy:
  6935                           	opt stack 0
  6936  000F16                     PL2:
  6937                           	opt stack 22
  6938  000F16  0E54               	movlw	low _default_state
  6939  000F18  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6940  000F1A  0E2A               	movlw	high _default_state
  6941  000F1C  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6942  000F1E  0E07               	movlw	7
  6943  000F20  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  6944  000F22  0ED0               	movlw	208
  6945  000F24  6E11               	movwf	RTOS_SetTask@taskDelay,c
  6946  000F26  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  6947  000F28  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  6948  000F2A  0CD0               	retlw	208
  6949  000F2C                     __end_ofPL2:
  6950                           	opt stack 0
  6951  000F2C                     PL136:
  6952                           	opt stack 22
  6953  000F2C  0E82               	movlw	low _time_set_dy
  6954  000F2E  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6955  000F30  0E0D               	movlw	high _time_set_dy
  6956  000F32  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6957  000F34  0012               	return	
  6958  000F36                     __end_ofPL136:
  6959                           	opt stack 0
  6960                           tosu	equ	0xFFF
  6961                           tosh	equ	0xFFE
  6962                           tosl	equ	0xFFD
  6963                           pclath	equ	0xFFA
  6964                           tblptru	equ	0xFF8
  6965                           tblptrh	equ	0xFF7
  6966                           tblptrl	equ	0xFF6
  6967                           tablat	equ	0xFF5
  6968                           prodh	equ	0xFF4
  6969                           prodl	equ	0xFF3
  6970                           intcon	equ	0xFF2
  6971                           intcon2	equ	0xFF1
  6972                           postinc0	equ	0xFEE
  6973                           wreg	equ	0xFE8
  6974                           indf1	equ	0xFE7
  6975                           plusw1	equ	0xFE3
  6976                           fsr1h	equ	0xFE2
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           plusw2	equ	0xFDB
  6982                           fsr2h	equ	0xFDA
  6983                           fsr2l	equ	0xFD9
  6984                           status	equ	0xFD8
  6985                           
  6986 ;; *************** function _time_set_dt *****************
  6987 ;; Defined at:
  6988 ;;		line 300 in file "common.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;		None
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;		None
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  1    wreg      void 
  6995 ;; Registers used:
  6996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;Total ram usage:        0 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    7
  7009 ;; This function calls:
  7010 ;;		_RTOS_DeleteTask
  7011 ;;		_RTOS_SetTask
  7012 ;;		_Update_Matrix
  7013 ;;		___lbdiv
  7014 ;;		___lbmod
  7015 ;;		_putchar_b_buf
  7016 ;;		_setDate
  7017 ;; This function is called by:
  7018 ;;		_time_set_mt
  7019 ;;		_RTOS_DispatchTask
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           	psect	text28
  7024  0012D4                     __ptext28:
  7025                           	opt stack 0
  7026  0012D4                     _time_set_dt:
  7027                           	opt stack 22
  7028                           
  7029                           ;common.c: 302: switch (events)
  7030                           
  7031                           ;incstack = 0
  7032  0012D4  D03A               	goto	l6410
  7033  0012D6                     l6368:
  7034                           
  7035                           ;common.c: 308: RTOS_DeleteTask(time_set_dt);
  7036  0012D6  D87E               	call	PL132	;call to abstracted procedure
  7037  0012D8  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  7038                           
  7039                           ;common.c: 309: RTOS_SetTask(time_set_dy, 0, 20);
  7040  0012DC  0E82               	movlw	low _time_set_dy
  7041  0012DE  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7042  0012E0  0E0D               	movlw	high _time_set_dy
  7043  0012E2  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7044  0012E4  EC6A  F00A         	call	PL18	;call to abstracted procedure
  7045  0012E8  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7046                           
  7047                           ;common.c: 310: RTOS_SetTask(default_state, 2000, 0);
  7048  0012EC  EC8B  F007         	call	PL2	;call to abstracted procedure
  7049  0012F0  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7050                           
  7051                           ;common.c: 311: events = 5;
  7052                           
  7053                           ;common.c: 312: en_put=1;
  7054  0012F4  D874               	call	PL152	;call to abstracted procedure
  7055                           
  7056                           ;common.c: 313: break;
  7057  0012F6  D033               	goto	l803
  7058  0012F8                     l6378:
  7059                           
  7060                           ;common.c: 315: RTOS_DeleteTask(time_set_dt);
  7061  0012F8  D86D               	call	PL132	;call to abstracted procedure
  7062  0012FA  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  7063                           
  7064                           ;common.c: 316: RTOS_DeleteTask(default_state);
  7065  0012FE  ECE7  F00A         	call	PL44	;call to abstracted procedure
  7066  001302  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  7067                           
  7068                           ;common.c: 317: RTOS_SetTask(time_led, 0, 20);
  7069  001306  ECDD  F00A         	call	PL8	;call to abstracted procedure
  7070  00130A  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7071                           
  7072                           ;common.c: 318: events = 5;
  7073  00130E  0E05               	movlw	5
  7074  001310  6E65               	movwf	_events,c
  7075                           
  7076                           ;common.c: 319: break;
  7077  001312  D025               	goto	l803
  7078  001314                     l6384:
  7079                           
  7080                           ;common.c: 321: TSTime.Tdt++;
  7081  001314  2A5D               	incf	_TSTime+4,f,c
  7082                           
  7083                           ;common.c: 322: if(TSTime.Tdt > 31) TSTime.Tdt = 1;
  7084  001316  0E1F               	movlw	31
  7085  001318  645D               	cpfsgt	_TSTime+4,c
  7086  00131A  D002               	goto	l6390
  7087  00131C  0E01               	movlw	1
  7088  00131E  6E5D               	movwf	_TSTime+4,c
  7089  001320                     l6390:
  7090                           
  7091                           ;common.c: 323: RTOS_SetTask(default_state, 2000, 0);
  7092  001320  EC8B  F007         	call	PL2	;call to abstracted procedure
  7093  001324  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7094                           
  7095                           ;common.c: 324: events = 5;
  7096                           
  7097                           ;common.c: 325: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  7098  001328  D84B               	call	PL16	;call to abstracted procedure
  7099  00132A  EC5B  F012         	call	_setDate
  7100                           
  7101                           ;common.c: 326: break;
  7102  00132E  D017               	goto	l803
  7103  001330                     l6396:
  7104                           
  7105                           ;common.c: 328: TSTime.Tdt--;
  7106  001330  065D               	decf	_TSTime+4,f,c
  7107                           
  7108                           ;common.c: 329: if(TSTime.Tdt == 0) TSTime.Tdt = 31;
  7109  001332  505D               	movf	_TSTime+4,w,c
  7110  001334  E102               	bnz	l6402
  7111  001336  0E1F               	movlw	31
  7112  001338  6E5D               	movwf	_TSTime+4,c
  7113  00133A                     l6402:
  7114                           
  7115                           ;common.c: 330: RTOS_SetTask(default_state, 2000, 0);
  7116  00133A  EC8B  F007         	call	PL2	;call to abstracted procedure
  7117  00133E  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7118                           
  7119                           ;common.c: 331: events = 5;
  7120                           
  7121                           ;common.c: 332: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  7122  001342  D83E               	call	PL16	;call to abstracted procedure
  7123  001344  EC5B  F012         	call	_setDate
  7124                           
  7125                           ;common.c: 333: break;
  7126  001348  D00A               	goto	l803
  7127  00134A                     l6410:
  7128  00134A  5065               	movf	_events,w,c
  7129                           
  7130                           ; Switch size 1, requested type "space"
  7131                           ; Number of cases is 5, Range of values is 1 to 5
  7132                           ; switch strategies available:
  7133                           ; Name         Instructions Cycles
  7134                           ; simple_byte           16     9 (average)
  7135                           ;	Chosen strategy is simple_byte
  7136  00134C  0A01               	xorlw	1	; case 1
  7137  00134E  E0C3               	bz	l6368
  7138  001350  0A03               	xorlw	3	; case 2
  7139  001352  E0E0               	bz	l6384
  7140  001354  0A01               	xorlw	1	; case 3
  7141  001356  E0EC               	bz	l6396
  7142  001358  0A07               	xorlw	7	; case 4
  7143  00135A  E0CE               	bz	l6378
  7144  00135C  0A01               	xorlw	1	; case 5
  7145  00135E                     l803:
  7146                           
  7147                           ;common.c: 335: if(en_put)
  7148  00135E  A066               	btfss	_en_put/(0+8),_en_put& (0+7),c
  7149  001360  D029               	goto	l6414
  7150                           
  7151                           ;common.c: 336: {
  7152                           ;common.c: 337: putchar_b_buf(0,'×', &Font);
  7153  001362  0ED7               	movlw	215
  7154  001364  ECCE  F004         	call	PL4	;call to abstracted procedure
  7155  001368  0E00               	movlw	0
  7156  00136A  ECD4  F00F         	call	_putchar_b_buf
  7157                           
  7158                           ;common.c: 338: putchar_b_buf(6,'ñ', &Font);
  7159  00136E  0EF1               	movlw	241
  7160  001370  ECCE  F004         	call	PL4	;call to abstracted procedure
  7161  001374  0E06               	movlw	6
  7162  001376  ECD4  F00F         	call	_putchar_b_buf
  7163                           
  7164                           ;common.c: 339: putchar_b_buf(12,':', &Font);
  7165  00137A  0E3A               	movlw	58
  7166  00137C  ECCE  F004         	call	PL4	;call to abstracted procedure
  7167  001380  0E0C               	movlw	12
  7168  001382  ECD4  F00F         	call	_putchar_b_buf
  7169                           
  7170                           ;common.c: 340: putchar_b_buf(18,(TSTime.Tdt/10) % 10, pFont);
  7171  001386  0E0A               	movlw	10
  7172  001388  6E13               	movwf	___lbmod@divisor,c
  7173  00138A  6E0F               	movwf	___lbdiv@divisor,c
  7174  00138C  505D               	movf	_TSTime+4,w,c
  7175  00138E  ECB0  F012         	call	___lbdiv
  7176  001392  ECB6  F013         	call	___lbmod
  7177  001396  EC38  F008         	call	PL30	;call to abstracted procedure
  7178  00139A  0E12               	movlw	18
  7179  00139C  ECD4  F00F         	call	_putchar_b_buf
  7180                           
  7181                           ;common.c: 341: putchar_b_buf(24,TSTime.Tdt % 10 , pFont);
  7182  0013A0  0E0A               	movlw	10
  7183  0013A2  6E13               	movwf	___lbmod@divisor,c
  7184  0013A4  505D               	movf	_TSTime+4,w,c
  7185  0013A6  ECB6  F013         	call	___lbmod
  7186  0013AA  EC38  F008         	call	PL30	;call to abstracted procedure
  7187  0013AE  0E18               	movlw	24
  7188  0013B0  ECD4  F00F         	call	_putchar_b_buf
  7189  0013B4                     l6414:
  7190                           
  7191                           ;common.c: 342: }
  7192                           ;common.c: 343: Update_Matrix(Dis_Buff);
  7193  0013B4  0EA4               	movlw	low _Dis_Buff
  7194  0013B6  6E11               	movwf	Update_Matrix@buf,c
  7195  0013B8  EC3D  F012         	call	_Update_Matrix	;wreg free
  7196                           
  7197                           ;common.c: 344: en_put=1;
  7198  0013BC  8066               	bsf	_en_put/(0+8),_en_put& (0+7),c
  7199  0013BE  0012               	return		;funcret
  7200  0013C0                     __end_of_time_set_dt:
  7201                           	opt stack 0
  7202  0013C0                     PL16:
  7203                           	opt stack 22
  7204  0013C0  0E05               	movlw	5
  7205  0013C2  6E65               	movwf	_events,c
  7206  0013C4  C05D  F01C         	movff	_TSTime+4,setDate@dateSet
  7207  0013C8  C05E  F01D         	movff	_TSTime+5,setDate@monthSet
  7208  0013CC  C05F  F01E         	movff	_TSTime+6,setDate@yearSet
  7209  0013D0  505C               	movf	_TSTime+3,w,c
  7210  0013D2  0012               	return	
  7211  0013D4                     __end_ofPL16:
  7212                           	opt stack 0
  7213  0013D4                     PL132:
  7214                           	opt stack 22
  7215  0013D4  0ED4               	movlw	low _time_set_dt
  7216  0013D6  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  7217  0013D8  0E12               	movlw	high _time_set_dt
  7218  0013DA  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  7219  0013DC  0012               	return	
  7220  0013DE                     __end_ofPL132:
  7221                           	opt stack 0
  7222  0013DE                     PL152:
  7223                           	opt stack 22
  7224  0013DE  0E05               	movlw	5
  7225  0013E0  6E65               	movwf	_events,c
  7226  0013E2  8066               	bsf	_en_put/(0+8),_en_put& (0+7),c
  7227  0013E4  0C05               	retlw	5
  7228  0013E6                     __end_ofPL152:
  7229                           	opt stack 0
  7230                           tosu	equ	0xFFF
  7231                           tosh	equ	0xFFE
  7232                           tosl	equ	0xFFD
  7233                           pclath	equ	0xFFA
  7234                           tblptru	equ	0xFF8
  7235                           tblptrh	equ	0xFF7
  7236                           tblptrl	equ	0xFF6
  7237                           tablat	equ	0xFF5
  7238                           prodh	equ	0xFF4
  7239                           prodl	equ	0xFF3
  7240                           intcon	equ	0xFF2
  7241                           intcon2	equ	0xFF1
  7242                           postinc0	equ	0xFEE
  7243                           wreg	equ	0xFE8
  7244                           indf1	equ	0xFE7
  7245                           plusw1	equ	0xFE3
  7246                           fsr1h	equ	0xFE2
  7247                           fsr1l	equ	0xFE1
  7248                           indf2	equ	0xFDF
  7249                           postinc2	equ	0xFDE
  7250                           postdec2	equ	0xFDD
  7251                           plusw2	equ	0xFDB
  7252                           fsr2h	equ	0xFDA
  7253                           fsr2l	equ	0xFD9
  7254                           status	equ	0xFD8
  7255                           
  7256 ;; *************** function _time_set_mt *****************
  7257 ;; Defined at:
  7258 ;;		line 200 in file "common.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;		None
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;		None
  7263 ;; Return value:  Size  Location     Type
  7264 ;;                  1    wreg      void 
  7265 ;; Registers used:
  7266 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;Total ram usage:        0 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    7
  7279 ;; This function calls:
  7280 ;;		_RTOS_DeleteTask
  7281 ;;		_RTOS_SetTask
  7282 ;;		_Update_Matrix
  7283 ;;		_putchar_b_buf
  7284 ;;		_setDate
  7285 ;; This function is called by:
  7286 ;;		_time_set_yr
  7287 ;;		_RTOS_DispatchTask
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           	psect	text29
  7292  0007A0                     __ptext29:
  7293                           	opt stack 0
  7294  0007A0                     _time_set_mt:
  7295                           	opt stack 22
  7296                           
  7297                           ;common.c: 202: switch (events)
  7298                           
  7299                           ;incstack = 0
  7300  0007A0  D03D               	goto	l6330
  7301  0007A2                     l6288:
  7302                           
  7303                           ;common.c: 208: RTOS_DeleteTask(time_set_mt);
  7304  0007A2  D902               	call	PL130	;call to abstracted procedure
  7305  0007A4  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  7306                           
  7307                           ;common.c: 209: RTOS_SetTask(time_set_dt, 0, 20);
  7308  0007A8  0ED4               	movlw	low _time_set_dt
  7309  0007AA  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7310  0007AC  0E12               	movlw	high _time_set_dt
  7311  0007AE  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7312  0007B0  EC6A  F00A         	call	PL18	;call to abstracted procedure
  7313  0007B4  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7314                           
  7315                           ;common.c: 210: RTOS_SetTask(default_state, 2000, 0);
  7316  0007B8  EC8B  F007         	call	PL2	;call to abstracted procedure
  7317  0007BC  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7318                           
  7319                           ;common.c: 211: events = 5;
  7320                           
  7321                           ;common.c: 212: en_put=1;
  7322  0007C0  ECEF  F009         	call	PL152	;call to abstracted procedure
  7323                           
  7324                           ;common.c: 213: break;
  7325  0007C4  D035               	goto	l776
  7326  0007C6                     l6298:
  7327                           
  7328                           ;common.c: 215: RTOS_DeleteTask(time_set_mt);
  7329  0007C6  D8F0               	call	PL130	;call to abstracted procedure
  7330  0007C8  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  7331                           
  7332                           ;common.c: 216: RTOS_DeleteTask(default_state);
  7333  0007CC  ECE7  F00A         	call	PL44	;call to abstracted procedure
  7334  0007D0  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  7335                           
  7336                           ;common.c: 217: RTOS_SetTask(time_led, 0, 20);
  7337  0007D4  ECDD  F00A         	call	PL8	;call to abstracted procedure
  7338  0007D8  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7339                           
  7340                           ;common.c: 218: events = 5;
  7341  0007DC  0E05               	movlw	5
  7342  0007DE  6E65               	movwf	_events,c
  7343                           
  7344                           ;common.c: 219: break;
  7345  0007E0  D027               	goto	l776
  7346  0007E2                     l6304:
  7347                           
  7348                           ;common.c: 221: TSTime.Tmt++;
  7349  0007E2  2A5E               	incf	_TSTime+5,f,c
  7350                           
  7351                           ;common.c: 222: if(TSTime.Tmt > 12) TSTime.Tmt = 1;
  7352  0007E4  0E0C               	movlw	12
  7353  0007E6  645E               	cpfsgt	_TSTime+5,c
  7354  0007E8  D002               	goto	l6310
  7355  0007EA  0E01               	movlw	1
  7356  0007EC  6E5E               	movwf	_TSTime+5,c
  7357  0007EE                     l6310:
  7358                           
  7359                           ;common.c: 223: RTOS_SetTask(default_state, 2000, 0);
  7360  0007EE  EC8B  F007         	call	PL2	;call to abstracted procedure
  7361  0007F2  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7362                           
  7363                           ;common.c: 224: events = 5;
  7364                           
  7365                           ;common.c: 225: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  7366  0007F6  ECE0  F009         	call	PL16	;call to abstracted procedure
  7367  0007FA  EC5B  F012         	call	_setDate
  7368                           
  7369                           ;common.c: 226: break;
  7370  0007FE  D018               	goto	l776
  7371  000800                     l6316:
  7372                           
  7373                           ;common.c: 228: TSTime.Tmt--;
  7374  000800  065E               	decf	_TSTime+5,f,c
  7375                           
  7376                           ;common.c: 229: if(TSTime.Tmt == 0) TSTime.Tmt = 12;
  7377  000802  505E               	movf	_TSTime+5,w,c
  7378  000804  E102               	bnz	l6322
  7379  000806  0E0C               	movlw	12
  7380  000808  6E5E               	movwf	_TSTime+5,c
  7381  00080A                     l6322:
  7382                           
  7383                           ;common.c: 230: RTOS_SetTask(default_state, 2000, 0);
  7384  00080A  EC8B  F007         	call	PL2	;call to abstracted procedure
  7385  00080E  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7386                           
  7387                           ;common.c: 231: events = 5;
  7388                           
  7389                           ;common.c: 232: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  7390  000812  ECE0  F009         	call	PL16	;call to abstracted procedure
  7391  000816  EC5B  F012         	call	_setDate
  7392                           
  7393                           ;common.c: 233: break;
  7394  00081A  D00A               	goto	l776
  7395  00081C                     l6330:
  7396  00081C  5065               	movf	_events,w,c
  7397                           
  7398                           ; Switch size 1, requested type "space"
  7399                           ; Number of cases is 5, Range of values is 1 to 5
  7400                           ; switch strategies available:
  7401                           ; Name         Instructions Cycles
  7402                           ; simple_byte           16     9 (average)
  7403                           ;	Chosen strategy is simple_byte
  7404  00081E  0A01               	xorlw	1	; case 1
  7405  000820  E0C0               	bz	l6288
  7406  000822  0A03               	xorlw	3	; case 2
  7407  000824  E0DE               	bz	l6304
  7408  000826  0A01               	xorlw	1	; case 3
  7409  000828  E0EB               	bz	l6316
  7410  00082A  0A07               	xorlw	7	; case 4
  7411  00082C  E0CC               	bz	l6298
  7412  00082E  0A01               	xorlw	1	; case 5
  7413  000830                     l776:
  7414                           
  7415                           ;common.c: 235: if(en_put)
  7416  000830  A066               	btfss	_en_put/(0+8),_en_put& (0+7),c
  7417  000832  D0AE               	goto	l6362
  7418                           
  7419                           ;common.c: 236: {
  7420                           ;common.c: 237: putchar_b_buf(0,'Ì', &Font);
  7421  000834  0ECC               	movlw	204
  7422  000836  D8B2               	call	PL4	;call to abstracted procedure
  7423  000838  0E00               	movlw	0
  7424  00083A  ECD4  F00F         	call	_putchar_b_buf
  7425                           
  7426                           ;common.c: 238: putchar_b_buf(6,'ñ', &Font);
  7427  00083E  0EF1               	movlw	241
  7428  000840  D8AD               	call	PL4	;call to abstracted procedure
  7429  000842  0E06               	movlw	6
  7430  000844  ECD4  F00F         	call	_putchar_b_buf
  7431                           
  7432                           ;common.c: 239: putchar_b_buf(12,':', &Font);
  7433  000848  0E3A               	movlw	58
  7434  00084A  D8A8               	call	PL4	;call to abstracted procedure
  7435  00084C  0E0C               	movlw	12
  7436  00084E  ECD4  F00F         	call	_putchar_b_buf
  7437                           
  7438                           ;common.c: 240: switch(TSTime.Tmt)
  7439  000852  D084               	goto	l6360
  7440  000854                     l6334:
  7441                           
  7442                           ;common.c: 243: putchar_b_buf(18,'Ñ', &Font);
  7443  000854  0ED1               	movlw	209
  7444  000856  D8A2               	call	PL4	;call to abstracted procedure
  7445  000858  0E12               	movlw	18
  7446  00085A  ECD4  F00F         	call	_putchar_b_buf
  7447                           
  7448                           ;common.c: 244: putchar_b_buf(24,'÷', &Font);
  7449  00085E  0EF7               	movlw	247
  7450  000860  D89D               	call	PL4	;call to abstracted procedure
  7451  000862  0E18               	movlw	24
  7452  000864  ECD4  F00F         	call	_putchar_b_buf
  7453                           
  7454                           ;common.c: 245: break;
  7455  000868  D093               	goto	l6362
  7456  00086A                     l6336:
  7457                           
  7458                           ;common.c: 247: putchar_b_buf(18,'Ë', &Font);
  7459  00086A  0ECB               	movlw	203
  7460  00086C  D897               	call	PL4	;call to abstracted procedure
  7461  00086E  0E12               	movlw	18
  7462  000870  ECD4  F00F         	call	_putchar_b_buf
  7463                           
  7464                           ;common.c: 248: putchar_b_buf(24,'ò', &Font);
  7465  000874  0EF2               	movlw	242
  7466  000876  D892               	call	PL4	;call to abstracted procedure
  7467  000878  0E18               	movlw	24
  7468  00087A  ECD4  F00F         	call	_putchar_b_buf
  7469                           
  7470                           ;common.c: 249: break;
  7471  00087E  D088               	goto	l6362
  7472  000880                     l6338:
  7473                           
  7474                           ;common.c: 251: putchar_b_buf(18,'Á', &Font);
  7475  000880  0EC1               	movlw	193
  7476  000882  D88C               	call	PL4	;call to abstracted procedure
  7477  000884  0E12               	movlw	18
  7478  000886  ECD4  F00F         	call	_putchar_b_buf
  7479                           
  7480                           ;common.c: 252: putchar_b_buf(24,'ð', &Font);
  7481  00088A  0EF0               	movlw	240
  7482  00088C  D887               	call	PL4	;call to abstracted procedure
  7483  00088E  0E18               	movlw	24
  7484  000890  ECD4  F00F         	call	_putchar_b_buf
  7485                           
  7486                           ;common.c: 253: break;
  7487  000894  D07D               	goto	l6362
  7488  000896                     l6340:
  7489                           
  7490                           ;common.c: 255: putchar_b_buf(18,'Ê', &Font);
  7491  000896  0ECA               	movlw	202
  7492  000898  D881               	call	PL4	;call to abstracted procedure
  7493  00089A  0E12               	movlw	18
  7494  00089C  ECD4  F00F         	call	_putchar_b_buf
  7495                           
  7496                           ;common.c: 256: putchar_b_buf(24,'â', &Font);
  7497  0008A0  0EE2               	movlw	226
  7498  0008A2  D87C               	call	PL4	;call to abstracted procedure
  7499  0008A4  0E18               	movlw	24
  7500  0008A6  ECD4  F00F         	call	_putchar_b_buf
  7501                           
  7502                           ;common.c: 257: break;
  7503  0008AA  D072               	goto	l6362
  7504  0008AC                     l6342:
  7505                           
  7506                           ;common.c: 259: putchar_b_buf(18,'Ò', &Font);
  7507  0008AC  0ED2               	movlw	210
  7508  0008AE  D876               	call	PL4	;call to abstracted procedure
  7509  0008B0  0E12               	movlw	18
  7510  0008B2  ECD4  F00F         	call	_putchar_b_buf
  7511                           
  7512                           ;common.c: 260: putchar_b_buf(24,'ð', &Font);
  7513  0008B6  0EF0               	movlw	240
  7514  0008B8  D871               	call	PL4	;call to abstracted procedure
  7515  0008BA  0E18               	movlw	24
  7516  0008BC  ECD4  F00F         	call	_putchar_b_buf
  7517                           
  7518                           ;common.c: 261: break;
  7519  0008C0  D067               	goto	l6362
  7520  0008C2                     l6344:
  7521                           
  7522                           ;common.c: 263: putchar_b_buf(18,'×', &Font);
  7523  0008C2  0ED7               	movlw	215
  7524  0008C4  D86B               	call	PL4	;call to abstracted procedure
  7525  0008C6  0E12               	movlw	18
  7526  0008C8  ECD4  F00F         	call	_putchar_b_buf
  7527                           
  7528                           ;common.c: 264: putchar_b_buf(24,'ð', &Font);
  7529  0008CC  0EF0               	movlw	240
  7530  0008CE  D866               	call	PL4	;call to abstracted procedure
  7531  0008D0  0E18               	movlw	24
  7532  0008D2  ECD4  F00F         	call	_putchar_b_buf
  7533                           
  7534                           ;common.c: 265: break;
  7535  0008D6  D05C               	goto	l6362
  7536  0008D8                     l6346:
  7537                           
  7538                           ;common.c: 267: putchar_b_buf(18,'Ë', &Font);
  7539  0008D8  0ECB               	movlw	203
  7540  0008DA  D860               	call	PL4	;call to abstracted procedure
  7541  0008DC  0E12               	movlw	18
  7542  0008DE  ECD4  F00F         	call	_putchar_b_buf
  7543                           
  7544                           ;common.c: 268: putchar_b_buf(24,'ï', &Font);
  7545  0008E2  0EEF               	movlw	239
  7546  0008E4  D85B               	call	PL4	;call to abstracted procedure
  7547  0008E6  0E18               	movlw	24
  7548  0008E8  ECD4  F00F         	call	_putchar_b_buf
  7549                           
  7550                           ;common.c: 269: break;
  7551  0008EC  D051               	goto	l6362
  7552  0008EE                     l6348:
  7553                           
  7554                           ;common.c: 271: putchar_b_buf(18,'Ñ', &Font);
  7555  0008EE  0ED1               	movlw	209
  7556  0008F0  D855               	call	PL4	;call to abstracted procedure
  7557  0008F2  0E12               	movlw	18
  7558  0008F4  ECD4  F00F         	call	_putchar_b_buf
  7559                           
  7560                           ;common.c: 272: putchar_b_buf(24,'ï', &Font);
  7561  0008F8  0EEF               	movlw	239
  7562  0008FA  D850               	call	PL4	;call to abstracted procedure
  7563  0008FC  0E18               	movlw	24
  7564  0008FE  ECD4  F00F         	call	_putchar_b_buf
  7565                           
  7566                           ;common.c: 273: break;
  7567  000902  D046               	goto	l6362
  7568  000904                     l6350:
  7569                           
  7570                           ;common.c: 275: putchar_b_buf(18,'Â', &Font);
  7571  000904  0EC2               	movlw	194
  7572  000906  D84A               	call	PL4	;call to abstracted procedure
  7573  000908  0E12               	movlw	18
  7574  00090A  ECD4  F00F         	call	_putchar_b_buf
  7575                           
  7576                           ;common.c: 276: putchar_b_buf(24,'ð', &Font);
  7577  00090E  0EF0               	movlw	240
  7578  000910  D845               	call	PL4	;call to abstracted procedure
  7579  000912  0E18               	movlw	24
  7580  000914  ECD4  F00F         	call	_putchar_b_buf
  7581                           
  7582                           ;common.c: 277: break;
  7583  000918  D03B               	goto	l6362
  7584  00091A                     l6352:
  7585                           
  7586                           ;common.c: 279: putchar_b_buf(18,'Æ', &Font);
  7587  00091A  0EC6               	movlw	198
  7588  00091C  D83F               	call	PL4	;call to abstracted procedure
  7589  00091E  0E12               	movlw	18
  7590  000920  ECD4  F00F         	call	_putchar_b_buf
  7591                           
  7592                           ;common.c: 280: putchar_b_buf(24,'ò', &Font);
  7593  000924  0EF2               	movlw	242
  7594  000926  D83A               	call	PL4	;call to abstracted procedure
  7595  000928  0E18               	movlw	24
  7596  00092A  ECD4  F00F         	call	_putchar_b_buf
  7597                           
  7598                           ;common.c: 281: break;
  7599  00092E  D030               	goto	l6362
  7600  000930                     l6354:
  7601                           
  7602                           ;common.c: 283: putchar_b_buf(18,'Ë', &Font);
  7603  000930  0ECB               	movlw	203
  7604  000932  D834               	call	PL4	;call to abstracted procedure
  7605  000934  0E12               	movlw	18
  7606  000936  ECD4  F00F         	call	_putchar_b_buf
  7607                           
  7608                           ;common.c: 284: putchar_b_buf(24,'ñ', &Font);
  7609  00093A  0EF1               	movlw	241
  7610  00093C  D82F               	call	PL4	;call to abstracted procedure
  7611  00093E  0E18               	movlw	24
  7612  000940  ECD4  F00F         	call	_putchar_b_buf
  7613                           
  7614                           ;common.c: 285: break;
  7615  000944  D025               	goto	l6362
  7616  000946                     l6356:
  7617                           
  7618                           ;common.c: 287: putchar_b_buf(18,'Ã', &Font);
  7619  000946  0EC3               	movlw	195
  7620  000948  D829               	call	PL4	;call to abstracted procedure
  7621  00094A  0E12               	movlw	18
  7622  00094C  ECD4  F00F         	call	_putchar_b_buf
  7623                           
  7624                           ;common.c: 288: putchar_b_buf(24,'ð', &Font);
  7625  000950  0EF0               	movlw	240
  7626  000952  D824               	call	PL4	;call to abstracted procedure
  7627  000954  0E18               	movlw	24
  7628  000956  ECD4  F00F         	call	_putchar_b_buf
  7629                           
  7630                           ;common.c: 289: break;
  7631  00095A  D01A               	goto	l6362
  7632  00095C                     l6360:
  7633  00095C  505E               	movf	_TSTime+5,w,c
  7634                           
  7635                           ; Switch size 1, requested type "space"
  7636                           ; Number of cases is 12, Range of values is 1 to 12
  7637                           ; switch strategies available:
  7638                           ; Name         Instructions Cycles
  7639                           ; simple_byte           37    19 (average)
  7640                           ;	Chosen strategy is simple_byte
  7641  00095E  0A01               	xorlw	1	; case 1
  7642  000960  E101 D778          	bz	l6334
  7643  000964  0A03               	xorlw	3	; case 2
  7644  000966  E081               	bz	l6336
  7645  000968  0A01               	xorlw	1	; case 3
  7646  00096A  E08A               	bz	l6338
  7647  00096C  0A07               	xorlw	7	; case 4
  7648  00096E  E093               	bz	l6340
  7649  000970  0A01               	xorlw	1	; case 5
  7650  000972  E09C               	bz	l6342
  7651  000974  0A03               	xorlw	3	; case 6
  7652  000976  E0A5               	bz	l6344
  7653  000978  0A01               	xorlw	1	; case 7
  7654  00097A  E0AE               	bz	l6346
  7655  00097C  0A0F               	xorlw	15	; case 8
  7656  00097E  E0B7               	bz	l6348
  7657  000980  0A01               	xorlw	1	; case 9
  7658  000982  E0C0               	bz	l6350
  7659  000984  0A03               	xorlw	3	; case 10
  7660  000986  E0C9               	bz	l6352
  7661  000988  0A01               	xorlw	1	; case 11
  7662  00098A  E0D2               	bz	l6354
  7663  00098C  0A07               	xorlw	7	; case 12
  7664  00098E  E0DB               	bz	l6356
  7665  000990                     l6362:
  7666                           
  7667                           ;common.c: 292: }
  7668                           ;common.c: 293: Update_Matrix(Dis_Buff);
  7669  000990  0EA4               	movlw	low _Dis_Buff
  7670  000992  6E11               	movwf	Update_Matrix@buf,c
  7671  000994  EC3D  F012         	call	_Update_Matrix	;wreg free
  7672                           
  7673                           ;common.c: 294: en_put=1;
  7674  000998  8066               	bsf	_en_put/(0+8),_en_put& (0+7),c
  7675  00099A  0012               	return		;funcret
  7676  00099C                     __end_of_time_set_mt:
  7677                           	opt stack 0
  7678  00099C                     PL4:
  7679                           	opt stack 24
  7680  00099C  6E17               	movwf	putchar_b_buf@symbol,c
  7681  00099E  0EB6               	movlw	low _Font
  7682  0009A0  6E18               	movwf	putchar_b_buf@pF,c
  7683  0009A2  0EB9               	movlw	high _Font
  7684  0009A4  6E19               	movwf	putchar_b_buf@pF+1,c
  7685  0009A6  0012               	return	
  7686  0009A8                     __end_ofPL4:
  7687                           	opt stack 0
  7688  0009A8                     PL130:
  7689                           	opt stack 22
  7690  0009A8  0EA0               	movlw	low _time_set_mt
  7691  0009AA  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  7692  0009AC  0E07               	movlw	high _time_set_mt
  7693  0009AE  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  7694  0009B0  0012               	return	
  7695  0009B2                     __end_ofPL130:
  7696                           	opt stack 0
  7697                           tosu	equ	0xFFF
  7698                           tosh	equ	0xFFE
  7699                           tosl	equ	0xFFD
  7700                           pclath	equ	0xFFA
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           prodh	equ	0xFF4
  7706                           prodl	equ	0xFF3
  7707                           intcon	equ	0xFF2
  7708                           intcon2	equ	0xFF1
  7709                           postinc0	equ	0xFEE
  7710                           wreg	equ	0xFE8
  7711                           indf1	equ	0xFE7
  7712                           plusw1	equ	0xFE3
  7713                           fsr1h	equ	0xFE2
  7714                           fsr1l	equ	0xFE1
  7715                           indf2	equ	0xFDF
  7716                           postinc2	equ	0xFDE
  7717                           postdec2	equ	0xFDD
  7718                           plusw2	equ	0xFDB
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723 ;; *************** function _default_state *****************
  7724 ;; Defined at:
  7725 ;;		line 692 in file "common.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;		None
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, status,2
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;Total ram usage:        0 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    3
  7746 ;; This function calls:
  7747 ;;		Nothing
  7748 ;; This function is called by:
  7749 ;;		_time_set_min
  7750 ;;		_time_set_hr
  7751 ;;		_time_set_yr
  7752 ;;		_time_set_mt
  7753 ;;		_time_set_dt
  7754 ;;		_time_set_dy
  7755 ;;		_set_font_set
  7756 ;;		_home_temp
  7757 ;;		_pressure
  7758 ;;		_time_led
  7759 ;;		_RTOS_DispatchTask
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           	psect	text30
  7764  002A54                     __ptext30:
  7765                           	opt stack 0
  7766  002A54                     _default_state:
  7767                           	opt stack 26
  7768                           
  7769                           ;common.c: 694: events = 4;
  7770                           
  7771                           ;incstack = 0
  7772  002A54  0E04               	movlw	4
  7773  002A56  6E65               	movwf	_events,c
  7774  002A58  0C04               	retlw	4	;funcret
  7775  002A5A                     __end_of_default_state:
  7776                           	opt stack 0
  7777                           tosu	equ	0xFFF
  7778                           tosh	equ	0xFFE
  7779                           tosl	equ	0xFFD
  7780                           pclath	equ	0xFFA
  7781                           tblptru	equ	0xFF8
  7782                           tblptrh	equ	0xFF7
  7783                           tblptrl	equ	0xFF6
  7784                           tablat	equ	0xFF5
  7785                           prodh	equ	0xFF4
  7786                           prodl	equ	0xFF3
  7787                           intcon	equ	0xFF2
  7788                           intcon2	equ	0xFF1
  7789                           postinc0	equ	0xFEE
  7790                           wreg	equ	0xFE8
  7791                           indf1	equ	0xFE7
  7792                           plusw1	equ	0xFE3
  7793                           fsr1h	equ	0xFE2
  7794                           fsr1l	equ	0xFE1
  7795                           indf2	equ	0xFDF
  7796                           postinc2	equ	0xFDE
  7797                           postdec2	equ	0xFDD
  7798                           plusw2	equ	0xFDB
  7799                           fsr2h	equ	0xFDA
  7800                           fsr2l	equ	0xFD9
  7801                           status	equ	0xFD8
  7802                           
  7803 ;; *************** function _time_set_hr *****************
  7804 ;; Defined at:
  7805 ;;		line 85 in file "common.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;		None
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;		None
  7810 ;; Return value:  Size  Location     Type
  7811 ;;                  1    wreg      void 
  7812 ;; Registers used:
  7813 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;Total ram usage:        0 bytes
  7824 ;; Hardware stack levels used:    1
  7825 ;; Hardware stack levels required when called:    7
  7826 ;; This function calls:
  7827 ;;		_RTOS_DeleteTask
  7828 ;;		_RTOS_SetTask
  7829 ;;		_Update_Matrix
  7830 ;;		___lbdiv
  7831 ;;		___lbmod
  7832 ;;		_clear_matrix
  7833 ;;		_putchar_b_buf
  7834 ;;		_setTime
  7835 ;; This function is called by:
  7836 ;;		_time_set_min
  7837 ;;		_RTOS_DispatchTask
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text31
  7842  000F36                     __ptext31:
  7843                           	opt stack 0
  7844  000F36                     _time_set_hr:
  7845                           	opt stack 22
  7846                           
  7847                           ;common.c: 87: show_digit = ~show_digit;
  7848                           
  7849                           ;incstack = 0
  7850  000F36  B266               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  7851  000F38  D002               	goto	u4700
  7852  000F3A  8266               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  7853  000F3C  D043               	goto	l6216
  7854  000F3E                     u4700:
  7855  000F3E  9266               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  7856                           
  7857                           ;common.c: 88: switch (events)
  7858  000F40  D041               	goto	l6216
  7859  000F42                     l6172:
  7860                           
  7861                           ;common.c: 94: RTOS_DeleteTask(time_set_hr);
  7862  000F42  D8A1               	call	PL108	;call to abstracted procedure
  7863  000F44  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  7864                           
  7865                           ;common.c: 95: RTOS_SetTask(time_set_yr, 0, 20);
  7866  000F48  0EEC               	movlw	low _time_set_yr
  7867  000F4A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7868  000F4C  0E15               	movlw	high _time_set_yr
  7869  000F4E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7870  000F50  EC6A  F00A         	call	PL18	;call to abstracted procedure
  7871  000F54  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7872                           
  7873                           ;common.c: 96: RTOS_SetTask(default_state, 2000, 0);
  7874  000F58  EC8B  F007         	call	PL2	;call to abstracted procedure
  7875  000F5C  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7876                           
  7877                           ;common.c: 98: events = 5;
  7878  000F60  0E05               	movlw	5
  7879  000F62  6E65               	movwf	_events,c
  7880                           
  7881                           ;common.c: 99: clear_matrix();
  7882  000F64  ECE9  F014         	call	_clear_matrix	;wreg free
  7883                           
  7884                           ;common.c: 100: en_put = 0;
  7885  000F68  9066               	bcf	_en_put/(0+8),_en_put& (0+7),c
  7886                           
  7887                           ;common.c: 101: break;
  7888  000F6A  D036               	goto	l746
  7889  000F6C                     l6184:
  7890                           
  7891                           ;common.c: 103: RTOS_DeleteTask(time_set_hr);
  7892  000F6C  D88C               	call	PL108	;call to abstracted procedure
  7893  000F6E  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  7894                           
  7895                           ;common.c: 104: RTOS_DeleteTask(default_state);
  7896  000F72  ECE7  F00A         	call	PL44	;call to abstracted procedure
  7897  000F76  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  7898                           
  7899                           ;common.c: 105: RTOS_SetTask(time_led, 0, 20);
  7900  000F7A  ECDD  F00A         	call	PL8	;call to abstracted procedure
  7901  000F7E  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7902                           
  7903                           ;common.c: 106: events = 5;
  7904  000F82  0E05               	movlw	5
  7905  000F84  6E65               	movwf	_events,c
  7906                           
  7907                           ;common.c: 107: break;
  7908  000F86  D028               	goto	l746
  7909  000F88                     l6190:
  7910                           
  7911                           ;common.c: 109: TSTime.Thr++;
  7912  000F88  2A5B               	incf	_TSTime+2,f,c
  7913                           
  7914                           ;common.c: 110: if(TSTime.Thr > 23) TSTime.Thr = 0;
  7915  000F8A  0E17               	movlw	23
  7916  000F8C  645B               	cpfsgt	_TSTime+2,c
  7917  000F8E  D001               	goto	l6196
  7918  000F90  6A5B               	clrf	_TSTime+2,c
  7919  000F92                     l6196:
  7920                           
  7921                           ;common.c: 111: RTOS_SetTask(default_state, 2000, 0);
  7922  000F92  EC8B  F007         	call	PL2	;call to abstracted procedure
  7923  000F96  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7924                           
  7925                           ;common.c: 112: events = 5;
  7926  000F9A  0E05               	movlw	5
  7927  000F9C  6E65               	movwf	_events,c
  7928                           
  7929                           ;common.c: 113: setTime(TSTime.Thr,TSTime.Tmin,0);
  7930  000F9E  D86E               	call	PL78	;call to abstracted procedure
  7931  000FA0  ECFB  F012         	call	_setTime
  7932                           
  7933                           ;common.c: 114: break;
  7934  000FA4  D019               	goto	l746
  7935  000FA6                     l6202:
  7936                           
  7937                           ;common.c: 116: TSTime.Thr--;
  7938  000FA6  065B               	decf	_TSTime+2,f,c
  7939                           
  7940                           ;common.c: 117: if(TSTime.Thr == 255) TSTime.Thr = 23;
  7941  000FA8  285B               	incf	_TSTime+2,w,c
  7942  000FAA  E102               	bnz	l6208
  7943  000FAC  0E17               	movlw	23
  7944  000FAE  6E5B               	movwf	_TSTime+2,c
  7945  000FB0                     l6208:
  7946                           
  7947                           ;common.c: 118: RTOS_SetTask(default_state, 2000, 0);
  7948  000FB0  EC8B  F007         	call	PL2	;call to abstracted procedure
  7949  000FB4  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  7950                           
  7951                           ;common.c: 119: events = 5;
  7952  000FB8  0E05               	movlw	5
  7953  000FBA  6E65               	movwf	_events,c
  7954                           
  7955                           ;common.c: 120: setTime(TSTime.Thr,TSTime.Tmin,0);
  7956  000FBC  D85F               	call	PL78	;call to abstracted procedure
  7957  000FBE  ECFB  F012         	call	_setTime
  7958                           
  7959                           ;common.c: 121: break;
  7960  000FC2  D00A               	goto	l746
  7961  000FC4                     l6216:
  7962  000FC4  5065               	movf	_events,w,c
  7963                           
  7964                           ; Switch size 1, requested type "space"
  7965                           ; Number of cases is 5, Range of values is 1 to 5
  7966                           ; switch strategies available:
  7967                           ; Name         Instructions Cycles
  7968                           ; simple_byte           16     9 (average)
  7969                           ;	Chosen strategy is simple_byte
  7970  000FC6  0A01               	xorlw	1	; case 1
  7971  000FC8  E0BC               	bz	l6172
  7972  000FCA  0A03               	xorlw	3	; case 2
  7973  000FCC  E0DD               	bz	l6190
  7974  000FCE  0A01               	xorlw	1	; case 3
  7975  000FD0  E0EA               	bz	l6202
  7976  000FD2  0A07               	xorlw	7	; case 4
  7977  000FD4  E0CB               	bz	l6184
  7978  000FD6  0A01               	xorlw	1	; case 5
  7979  000FD8                     l746:
  7980                           
  7981                           ;common.c: 123: if(en_put)
  7982  000FD8  A066               	btfss	_en_put/(0+8),_en_put& (0+7),c
  7983  000FDA  D03F               	goto	l6230
  7984                           
  7985                           ;common.c: 124: {
  7986                           ;common.c: 125: if(show_digit)
  7987  000FDC  A266               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  7988  000FDE  D033               	goto	l6228
  7989                           
  7990                           ;common.c: 126: {
  7991                           ;common.c: 128: putchar_b_buf(13,(TSTime.Tmin/10) % 10, pFont);
  7992  000FE0  D85C               	call	PL142	;call to abstracted procedure
  7993  000FE2  ECB0  F012         	call	___lbdiv
  7994  000FE6  ECB6  F013         	call	___lbmod
  7995  000FEA  D842               	call	PL30	;call to abstracted procedure
  7996  000FEC  0E0D               	movlw	13
  7997  000FEE  ECD4  F00F         	call	_putchar_b_buf
  7998                           
  7999                           ;common.c: 129: putchar_b_buf(19,TSTime.Tmin % 10, pFont);
  8000  000FF2  D858               	call	PL158	;call to abstracted procedure
  8001  000FF4  ECB6  F013         	call	___lbmod
  8002  000FF8  D83B               	call	PL30	;call to abstracted procedure
  8003  000FFA  0E13               	movlw	19
  8004  000FFC  ECD4  F00F         	call	_putchar_b_buf
  8005                           
  8006                           ;common.c: 131: if((TSTime.Thr/10) % 10)
  8007  001000  D847               	call	PL116	;call to abstracted procedure
  8008  001002  ECB0  F012         	call	___lbdiv
  8009  001006  ECB6  F013         	call	___lbmod
  8010  00100A  0900               	iorlw	0
  8011  00100C  E00A               	bz	l6226
  8012                           
  8013                           ;common.c: 132: putchar_b_buf(0,(TSTime.Thr/10) % 10, pFont);
  8014  00100E  D840               	call	PL116	;call to abstracted procedure
  8015  001010  ECB0  F012         	call	___lbdiv
  8016  001014  ECB6  F013         	call	___lbmod
  8017  001018  D82B               	call	PL30	;call to abstracted procedure
  8018  00101A  0E00               	movlw	0
  8019  00101C  ECD4  F00F         	call	_putchar_b_buf
  8020  001020  D008               	goto	l756
  8021  001022                     l6226:
  8022                           
  8023                           ;common.c: 133: else
  8024                           ;common.c: 134: putchar_b_buf(0,0, pFont);
  8025  001022  0E00               	movlw	0
  8026  001024  6A17               	clrf	putchar_b_buf@symbol,c
  8027  001026  C063  F018         	movff	_pFont,putchar_b_buf@pF
  8028  00102A  C064  F019         	movff	_pFont+1,putchar_b_buf@pF+1
  8029  00102E  ECD4  F00F         	call	_putchar_b_buf
  8030  001032                     l756:
  8031                           
  8032                           ;common.c: 135: putchar_b_buf(6,TSTime.Thr % 10, pFont);
  8033  001032  0E0A               	movlw	10
  8034  001034  6E13               	movwf	___lbmod@divisor,c
  8035  001036  505B               	movf	_TSTime+2,w,c
  8036  001038  ECB6  F013         	call	___lbmod
  8037  00103C  D819               	call	PL30	;call to abstracted procedure
  8038  00103E  0E06               	movlw	6
  8039  001040  ECD4  F00F         	call	_putchar_b_buf
  8040                           
  8041                           ;common.c: 136: }
  8042  001044  D00A               	goto	l6230
  8043  001046                     l6228:
  8044                           
  8045                           ;common.c: 137: else
  8046                           ;common.c: 138: {
  8047                           ;common.c: 140: putchar_b_buf(0,0, &Font);
  8048  001046  6A17               	clrf	putchar_b_buf@symbol,c
  8049  001048  D80E               	call	PL6	;call to abstracted procedure
  8050  00104A  0E00               	movlw	0
  8051  00104C  ECD4  F00F         	call	_putchar_b_buf
  8052                           
  8053                           ;common.c: 141: putchar_b_buf(6,0, &Font);
  8054  001050  6A17               	clrf	putchar_b_buf@symbol,c
  8055  001052  D809               	call	PL6	;call to abstracted procedure
  8056  001054  0E06               	movlw	6
  8057  001056  ECD4  F00F         	call	_putchar_b_buf
  8058  00105A                     l6230:
  8059                           
  8060                           ;common.c: 142: }
  8061                           ;common.c: 143: }
  8062                           ;common.c: 144: Update_Matrix(Dis_Buff);
  8063  00105A  0EA4               	movlw	low _Dis_Buff
  8064  00105C  6E11               	movwf	Update_Matrix@buf,c
  8065  00105E  EC3D  F012         	call	_Update_Matrix	;wreg free
  8066                           
  8067                           ;common.c: 145: en_put = 1;
  8068  001062  8066               	bsf	_en_put/(0+8),_en_put& (0+7),c
  8069  001064  0012               	return		;funcret
  8070  001066                     __end_of_time_set_hr:
  8071                           	opt stack 0
  8072  001066                     PL6:
  8073                           	opt stack 22
  8074  001066  0EB6               	movlw	low _Font
  8075  001068  6E18               	movwf	putchar_b_buf@pF,c
  8076  00106A  0EB9               	movlw	high _Font
  8077  00106C  6E19               	movwf	putchar_b_buf@pF+1,c
  8078  00106E  0012               	return	
  8079  001070                     __end_ofPL6:
  8080                           	opt stack 0
  8081  001070                     PL30:
  8082                           	opt stack 22
  8083  001070  6E17               	movwf	putchar_b_buf@symbol,c
  8084  001072  C063  F018         	movff	_pFont,putchar_b_buf@pF
  8085  001076  C064  F019         	movff	_pFont+1,putchar_b_buf@pF+1
  8086  00107A  0012               	return	
  8087  00107C                     __end_ofPL30:
  8088                           	opt stack 0
  8089  00107C                     PL78:
  8090                           	opt stack 22
  8091  00107C  C05A  F01C         	movff	_TSTime+1,setTime@mSet
  8092  001080  6A1D               	clrf	setTime@sSet,c
  8093  001082  505B               	movf	_TSTime+2,w,c
  8094  001084  0012               	return	
  8095  001086                     __end_ofPL78:
  8096                           	opt stack 0
  8097  001086                     PL108:
  8098                           	opt stack 22
  8099  001086  0E36               	movlw	low _time_set_hr
  8100  001088  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  8101  00108A  0E0F               	movlw	high _time_set_hr
  8102  00108C  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  8103  00108E  0012               	return	
  8104  001090                     __end_ofPL108:
  8105                           	opt stack 0
  8106  001090                     PL116:
  8107                           	opt stack 22
  8108  001090  0E0A               	movlw	10
  8109  001092  6E13               	movwf	___lbmod@divisor,c
  8110  001094  6E0F               	movwf	___lbdiv@divisor,c
  8111  001096  505B               	movf	_TSTime+2,w,c
  8112  001098  0012               	return	
  8113  00109A                     __end_ofPL116:
  8114                           	opt stack 0
  8115  00109A                     PL142:
  8116                           	opt stack 22
  8117  00109A  0E0A               	movlw	10
  8118  00109C  6E13               	movwf	___lbmod@divisor,c
  8119  00109E  6E0F               	movwf	___lbdiv@divisor,c
  8120  0010A0  505A               	movf	_TSTime+1,w,c
  8121  0010A2  0012               	return	
  8122  0010A4                     __end_ofPL142:
  8123                           	opt stack 0
  8124  0010A4                     PL158:
  8125                           	opt stack 22
  8126  0010A4  0E0A               	movlw	10
  8127  0010A6  6E13               	movwf	___lbmod@divisor,c
  8128  0010A8  505A               	movf	_TSTime+1,w,c
  8129  0010AA  0012               	return	
  8130  0010AC                     __end_ofPL158:
  8131                           	opt stack 0
  8132                           tosu	equ	0xFFF
  8133                           tosh	equ	0xFFE
  8134                           tosl	equ	0xFFD
  8135                           pclath	equ	0xFFA
  8136                           tblptru	equ	0xFF8
  8137                           tblptrh	equ	0xFF7
  8138                           tblptrl	equ	0xFF6
  8139                           tablat	equ	0xFF5
  8140                           prodh	equ	0xFF4
  8141                           prodl	equ	0xFF3
  8142                           intcon	equ	0xFF2
  8143                           intcon2	equ	0xFF1
  8144                           postinc0	equ	0xFEE
  8145                           wreg	equ	0xFE8
  8146                           indf1	equ	0xFE7
  8147                           plusw1	equ	0xFE3
  8148                           fsr1h	equ	0xFE2
  8149                           fsr1l	equ	0xFE1
  8150                           indf2	equ	0xFDF
  8151                           postinc2	equ	0xFDE
  8152                           postdec2	equ	0xFDD
  8153                           plusw2	equ	0xFDB
  8154                           fsr2h	equ	0xFDA
  8155                           fsr2l	equ	0xFD9
  8156                           status	equ	0xFD8
  8157                           
  8158 ;; *************** function _key_press *****************
  8159 ;; Defined at:
  8160 ;;		line 6 in file "key.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;		None
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;  key             1   14[COMRAM] unsigned char 
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  1    wreg      void 
  8167 ;; Registers used:
  8168 ;;		wreg, status,2, status,0
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 3F/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;Total ram usage:        1 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    3
  8181 ;; This function calls:
  8182 ;;		Nothing
  8183 ;; This function is called by:
  8184 ;;		_main
  8185 ;;		_RTOS_DispatchTask
  8186 ;; This function uses a non-reentrant model
  8187 ;;
  8188                           
  8189                           	psect	text32
  8190  00228A                     __ptext32:
  8191                           	opt stack 0
  8192  00228A                     _key_press:
  8193                           	opt stack 26
  8194                           
  8195                           ;key.c: 8: static uint8_t count = 0;
  8196                           ;key.c: 9: uint8_t key;
  8197                           ;key.c: 11: if ((PORTB & (1<<4))==0)
  8198                           
  8199                           ;incstack = 0
  8200  00228A  B881               	btfsc	3969,4,c	;volatile
  8201  00228C  D002               	goto	l945
  8202                           
  8203                           ;key.c: 12: key = 1;
  8204  00228E  0E01               	movlw	1
  8205  002290  D00B               	goto	L3
  8206  002292                     l945:
  8207                           
  8208                           ;key.c: 13: else if ((PORTB & (1<<1))==0)
  8209  002292  B281               	btfsc	3969,1,c	;volatile
  8210  002294  D002               	goto	l947
  8211                           
  8212                           ;key.c: 14: key = 2;
  8213  002296  0E02               	movlw	2
  8214  002298  D007               	goto	L3
  8215  00229A                     l947:
  8216                           
  8217                           ;key.c: 15: else if ((PORTB & (1<<2))==0)
  8218  00229A  B481               	btfsc	3969,2,c	;volatile
  8219  00229C  D002               	goto	l949
  8220                           
  8221                           ;key.c: 16: key = 3;
  8222  00229E  0E03               	movlw	3
  8223  0022A0  D003               	goto	L3
  8224  0022A2                     l949:
  8225                           
  8226                           ;key.c: 17: else if ((PORTB & (1<<3))==0)
  8227  0022A2  B681               	btfsc	3969,3,c	;volatile
  8228  0022A4  D003               	goto	l951
  8229                           
  8230                           ;key.c: 18: key = 4;
  8231  0022A6  0E04               	movlw	4
  8232  0022A8                     L3:
  8233  0022A8  6E0F               	movwf	key_press@key,c
  8234  0022AA  D001               	goto	l6718
  8235  0022AC                     l951:
  8236                           
  8237                           ;key.c: 19: else
  8238                           ;key.c: 20: key = (0);
  8239  0022AC  6A0F               	clrf	key_press@key,c
  8240  0022AE                     l6718:
  8241                           
  8242                           ;key.c: 23: if(key){
  8243  0022AE  500F               	movf	key_press@key,w,c
  8244  0022B0  E00F               	bz	l953
  8245                           
  8246                           ;key.c: 24: if(count <= 30)
  8247  0022B2  0E1F               	movlw	31
  8248  0022B4  0100               	movlb	0	; () banked
  8249  0022B6  61A0               	cpfslt	key_press@count& (0+255),b
  8250  0022B8  0C1F               	retlw	31
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;key.c: 25: {
  8254                           ;key.c: 26: count++;
  8255  0022BA  2BA0               	incf	key_press@count& (0+255),f,b
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;key.c: 27: if(count == 30)
  8259  0022BC  0E1E               	movlw	30
  8260  0022BE  19A0               	xorwf	key_press@count& (0+255),w,b
  8261  0022C0  A4D8               	btfss	status,2,c
  8262  0022C2  0012               	return	
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;key.c: 28: {
  8266                           ;key.c: 30: events = key;
  8267  0022C4  C00F  F065         	movff	key_press@key,_events
  8268                           
  8269                           ;key.c: 31: count = 0;
  8270  0022C8  6BA0               	clrf	key_press@count& (0+255),b
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;key.c: 32: play_sound = 1;
  8274  0022CA  0E01               	movlw	1
  8275  0022CC  6FA1               	movwf	_play_sound& (0+255),b
  8276  0022CE  0C01               	retlw	1
  8277  0022D0                     l953:
  8278                           
  8279                           ;key.c: 36: else
  8280                           ;key.c: 37: {
  8281                           ;key.c: 38: count = 0;
  8282  0022D0  0100               	movlb	0	; () banked
  8283  0022D2  6BA0               	clrf	key_press@count& (0+255),b
  8284                           
  8285                           ; BSR set to: 0
  8286  0022D4  0012               	return		;funcret
  8287  0022D6                     __end_of_key_press:
  8288                           	opt stack 0
  8289                           tosu	equ	0xFFF
  8290                           tosh	equ	0xFFE
  8291                           tosl	equ	0xFFD
  8292                           pclath	equ	0xFFA
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           postinc0	equ	0xFEE
  8302                           wreg	equ	0xFE8
  8303                           indf1	equ	0xFE7
  8304                           plusw1	equ	0xFE3
  8305                           fsr1h	equ	0xFE2
  8306                           fsr1l	equ	0xFE1
  8307                           indf2	equ	0xFDF
  8308                           postinc2	equ	0xFDE
  8309                           postdec2	equ	0xFDD
  8310                           plusw2	equ	0xFDB
  8311                           fsr2h	equ	0xFDA
  8312                           fsr2l	equ	0xFD9
  8313                           status	equ	0xFD8
  8314                           
  8315 ;; *************** function _time_led *****************
  8316 ;; Defined at:
  8317 ;;		line 617 in file "common.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;		None
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;		None
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      void 
  8324 ;; Registers used:
  8325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;Total ram usage:        0 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    8
  8338 ;; This function calls:
  8339 ;;		_FillBuf
  8340 ;;		_RTOS_DeleteTask
  8341 ;;		_RTOS_SetTask
  8342 ;;		_Update_Matrix
  8343 ;;		_bmp280Convert
  8344 ;;		_readTemp_Single
  8345 ;;		_scroll_left
  8346 ;; This function is called by:
  8347 ;;		_main
  8348 ;;		_time_set_min
  8349 ;;		_time_set_hr
  8350 ;;		_time_set_yr
  8351 ;;		_time_set_mt
  8352 ;;		_time_set_dt
  8353 ;;		_time_set_dy
  8354 ;;		_set_font_set
  8355 ;;		_home_temp
  8356 ;;		_pressure
  8357 ;;		_RTOS_DispatchTask
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           	psect	text33
  8362  0013E6                     __ptext33:
  8363                           	opt stack 0
  8364  0013E6                     _time_led:
  8365                           	opt stack 21
  8366                           
  8367                           ;common.c: 621: switch (events)
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;incstack = 0
  8371  0013E6  D05F               	goto	l6702
  8372  0013E8                     l6652:
  8373                           
  8374                           ;common.c: 624: FillBuf();
  8375  0013E8  ECE0  F008         	call	_FillBuf	;wreg free
  8376                           
  8377                           ; BSR set to: 0
  8378                           ;common.c: 625: if((TTime.Ts>5)&&(TTime.Ts<7))
  8379  0013EC  0E05               	movlw	5
  8380  0013EE  65C4               	cpfsgt	_TTime& (0+255),b
  8381  0013F0  D00B               	goto	l6660
  8382                           
  8383                           ; BSR set to: 0
  8384  0013F2  0E07               	movlw	7
  8385  0013F4  61C4               	cpfslt	_TTime& (0+255),b
  8386  0013F6  D008               	goto	l6660
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;common.c: 626: {
  8390                           ;common.c: 627: readTemp_Single(&temperature, &time_flag, &timer_val);
  8391  0013F8  0ED5               	movlw	low _temperature
  8392  0013FA  6E1B               	movwf	readTemp_Single@buf,c
  8393  0013FC  0ED7               	movlw	low _time_flag
  8394  0013FE  6E1C               	movwf	readTemp_Single@time_flag,c
  8395  001400  0ED8               	movlw	low _timer_val
  8396  001402  6E1D               	movwf	readTemp_Single@timer_val,c
  8397  001404  EC56  F008         	call	_readTemp_Single	;wreg free
  8398  001408                     l6660:
  8399                           
  8400                           ;common.c: 628: }
  8401                           ;common.c: 629: if(((TTime.Ts>14)&&(TTime.Ts<16))||((TTime.Ts>45)&&(TTime.Ts<47)))
  8402  001408  0E0E               	movlw	14
  8403  00140A  0100               	movlb	0	; () banked
  8404  00140C  65C4               	cpfsgt	_TTime& (0+255),b
  8405  00140E  D003               	goto	l6664
  8406                           
  8407                           ; BSR set to: 0
  8408  001410  0E0F               	movlw	15
  8409  001412  65C4               	cpfsgt	_TTime& (0+255),b
  8410  001414  D006               	goto	l6668
  8411  001416                     l6664:
  8412                           
  8413                           ; BSR set to: 0
  8414  001416  0E2D               	movlw	45
  8415  001418  65C4               	cpfsgt	_TTime& (0+255),b
  8416  00141A  D051               	goto	l6704
  8417                           
  8418                           ; BSR set to: 0
  8419  00141C  0E2F               	movlw	47
  8420  00141E  61C4               	cpfslt	_TTime& (0+255),b
  8421  001420  D04E               	goto	l6704
  8422  001422                     l6668:
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;common.c: 630: events = 3;
  8426  001422  0E03               	movlw	3
  8427  001424  D017               	goto	L4
  8428  001426                     l6670:
  8429                           
  8430                           ;common.c: 633: RTOS_DeleteTask(time_led);
  8431  001426  D85C               	call	PL94	;call to abstracted procedure
  8432  001428  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  8433                           
  8434                           ;common.c: 634: RTOS_SetTask(time_set_min, 0, 50);
  8435  00142C  0EE8               	movlw	low _time_set_min
  8436  00142E  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  8437  001430  0E16               	movlw	high _time_set_min
  8438  001432  D849               	call	PL10	;call to abstracted procedure
  8439  001434  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  8440                           
  8441                           ;common.c: 635: RTOS_SetTask(default_state, 2000, 0);
  8442  001438  EC8B  F007         	call	PL2	;call to abstracted procedure
  8443  00143C  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  8444                           
  8445                           ;common.c: 636: TSTime = TTime;
  8446  001440  EE20  F0C4         	lfsr	2,_TTime
  8447  001444  EE10  F059         	lfsr	1,_TSTime
  8448  001448  0E06               	movlw	6
  8449  00144A                     u5031:
  8450  00144A  CFDB FFE3          	movff	plusw2,plusw1
  8451  00144E  06E8               	decf	wreg,f,c
  8452  001450  E2FC               	bc	u5031
  8453  001452                     l6678:
  8454                           
  8455                           ;common.c: 637: events = 5;
  8456  001452  0E05               	movlw	5
  8457  001454                     L4:
  8458  001454  6E65               	movwf	_events,c
  8459                           
  8460                           ;common.c: 638: break;
  8461  001456  D033               	goto	l6704
  8462  001458                     l6680:
  8463                           
  8464                           ;common.c: 642: bmp280Convert(&press, &temperbmp280);
  8465  001458  0ECF               	movlw	low _press
  8466  00145A  6E3B               	movwf	bmp280Convert@press,c
  8467  00145C  0ECB               	movlw	low _temperbmp280
  8468  00145E  6E3C               	movwf	bmp280Convert@temper,c
  8469  001460  EC09  F000         	call	_bmp280Convert	;wreg free
  8470                           
  8471                           ;common.c: 644: scroll_left();
  8472  001464  EC6F  F010         	call	_scroll_left	;wreg free
  8473                           
  8474                           ;common.c: 645: RTOS_DeleteTask(time_led);
  8475  001468  D83B               	call	PL94	;call to abstracted procedure
  8476  00146A  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  8477                           
  8478                           ;common.c: 646: RTOS_SetTask(pressure, 0, 20);
  8479  00146E  0EB2               	movlw	low _pressure
  8480  001470  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  8481  001472  0E09               	movlw	high _pressure
  8482  001474  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  8483  001476  D82E               	call	PL18	;call to abstracted procedure
  8484  001478  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  8485  00147C  D7EA               	goto	l6678
  8486  00147E                     l6690:
  8487                           
  8488                           ;common.c: 657: scroll_left();
  8489  00147E  EC6F  F010         	call	_scroll_left	;wreg free
  8490                           
  8491                           ;common.c: 658: RTOS_DeleteTask(time_led);
  8492  001482  D82E               	call	PL94	;call to abstracted procedure
  8493  001484  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  8494                           
  8495                           ;common.c: 659: RTOS_SetTask(home_temp, 0, 20);
  8496  001488  0EA6               	movlw	low _home_temp
  8497  00148A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  8498  00148C  0E0B               	movlw	high _home_temp
  8499  00148E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  8500  001490  D821               	call	PL18	;call to abstracted procedure
  8501  001492  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  8502  001496  D7DD               	goto	l6678
  8503  001498                     l6696:
  8504                           
  8505                           ;common.c: 663: events = 5;
  8506  001498  0E05               	movlw	5
  8507  00149A  6E65               	movwf	_events,c
  8508                           
  8509                           ;common.c: 664: RTOS_DeleteTask(default_state);
  8510  00149C  ECE7  F00A         	call	PL44	;call to abstracted procedure
  8511  0014A0  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  8512                           
  8513                           ;common.c: 665: break;
  8514  0014A4  D00C               	goto	l6704
  8515  0014A6                     l6702:
  8516  0014A6  5065               	movf	_events,w,c
  8517                           
  8518                           ; Switch size 1, requested type "space"
  8519                           ; Number of cases is 6, Range of values is 1 to 6
  8520                           ; switch strategies available:
  8521                           ; Name         Instructions Cycles
  8522                           ; simple_byte           19    10 (average)
  8523                           ;	Chosen strategy is simple_byte
  8524  0014A8  0A01               	xorlw	1	; case 1
  8525  0014AA  E0BD               	bz	l6670
  8526  0014AC  0A03               	xorlw	3	; case 2
  8527  0014AE  E0D4               	bz	l6680
  8528  0014B0  0A01               	xorlw	1	; case 3
  8529  0014B2  E0E5               	bz	l6690
  8530  0014B4  0A07               	xorlw	7	; case 4
  8531  0014B6  E0F0               	bz	l6696
  8532  0014B8  0A01               	xorlw	1	; case 5
  8533  0014BA  E096               	bz	l6652
  8534  0014BC  0A03               	xorlw	3	; case 6
  8535  0014BE                     l6704:
  8536                           
  8537                           ;common.c: 670: Update_Matrix(Dis_Buff);
  8538  0014BE  0EA4               	movlw	low _Dis_Buff
  8539  0014C0  6E11               	movwf	Update_Matrix@buf,c
  8540  0014C2  EF3D  F012         	goto	_Update_Matrix	;wreg free
  8541  0014C6                     __end_of_time_led:
  8542                           	opt stack 0
  8543  0014C6                     PL10:
  8544                           	opt stack 22
  8545  0014C6  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  8546  0014C8  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  8547  0014CA  6A11               	clrf	RTOS_SetTask@taskDelay,c
  8548  0014CC  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  8549  0014CE  0E32               	movlw	50
  8550  0014D0  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  8551  0014D2  0C32               	retlw	50
  8552  0014D4                     __end_ofPL10:
  8553                           	opt stack 0
  8554  0014D4                     PL18:
  8555                           	opt stack 22
  8556  0014D4  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  8557  0014D6  6A11               	clrf	RTOS_SetTask@taskDelay,c
  8558  0014D8  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  8559  0014DA  0E14               	movlw	20
  8560  0014DC  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  8561  0014DE  0C14               	retlw	20
  8562  0014E0                     __end_ofPL18:
  8563                           	opt stack 0
  8564  0014E0                     PL94:
  8565                           	opt stack 21
  8566  0014E0  0EE6               	movlw	low _time_led
  8567  0014E2  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  8568  0014E4  0E13               	movlw	high _time_led
  8569  0014E6  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  8570  0014E8  0012               	return	
  8571  0014EA                     __end_ofPL94:
  8572                           	opt stack 0
  8573                           tosu	equ	0xFFF
  8574                           tosh	equ	0xFFE
  8575                           tosl	equ	0xFFD
  8576                           pclath	equ	0xFFA
  8577                           tblptru	equ	0xFF8
  8578                           tblptrh	equ	0xFF7
  8579                           tblptrl	equ	0xFF6
  8580                           tablat	equ	0xFF5
  8581                           prodh	equ	0xFF4
  8582                           prodl	equ	0xFF3
  8583                           intcon	equ	0xFF2
  8584                           intcon2	equ	0xFF1
  8585                           postinc0	equ	0xFEE
  8586                           wreg	equ	0xFE8
  8587                           indf1	equ	0xFE7
  8588                           plusw1	equ	0xFE3
  8589                           fsr1h	equ	0xFE2
  8590                           fsr1l	equ	0xFE1
  8591                           indf2	equ	0xFDF
  8592                           postinc2	equ	0xFDE
  8593                           postdec2	equ	0xFDD
  8594                           plusw2	equ	0xFDB
  8595                           fsr2h	equ	0xFDA
  8596                           fsr2l	equ	0xFD9
  8597                           status	equ	0xFD8
  8598                           
  8599 ;; *************** function _time_set_yr *****************
  8600 ;; Defined at:
  8601 ;;		line 150 in file "common.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;		None
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;		None
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  1    wreg      void 
  8608 ;; Registers used:
  8609 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;Total ram usage:        0 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    7
  8622 ;; This function calls:
  8623 ;;		_RTOS_DeleteTask
  8624 ;;		_RTOS_SetTask
  8625 ;;		_Update_Matrix
  8626 ;;		___lbdiv
  8627 ;;		___lbmod
  8628 ;;		_putchar_b_buf
  8629 ;;		_setDate
  8630 ;; This function is called by:
  8631 ;;		_time_set_hr
  8632 ;;		_RTOS_DispatchTask
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           	psect	text34
  8637  0015EC                     __ptext34:
  8638                           	opt stack 0
  8639  0015EC                     _time_set_yr:
  8640                           	opt stack 22
  8641                           
  8642                           ;common.c: 152: switch (events)
  8643                           
  8644                           ;incstack = 0
  8645  0015EC  D03D               	goto	l6278
  8646  0015EE                     l6236:
  8647                           
  8648                           ;common.c: 158: RTOS_DeleteTask(time_set_yr);
  8649  0015EE  D877               	call	PL110	;call to abstracted procedure
  8650  0015F0  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  8651                           
  8652                           ;common.c: 159: RTOS_SetTask(time_set_mt, 0, 20);
  8653  0015F4  0EA0               	movlw	low _time_set_mt
  8654  0015F6  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  8655  0015F8  0E07               	movlw	high _time_set_mt
  8656  0015FA  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  8657  0015FC  EC6A  F00A         	call	PL18	;call to abstracted procedure
  8658  001600  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  8659                           
  8660                           ;common.c: 160: RTOS_SetTask(default_state, 2000, 0);
  8661  001604  EC8B  F007         	call	PL2	;call to abstracted procedure
  8662  001608  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  8663                           
  8664                           ;common.c: 161: events = 5;
  8665  00160C  0E05               	movlw	5
  8666  00160E  6E65               	movwf	_events,c
  8667                           
  8668                           ;common.c: 162: en_put=0;
  8669  001610  9066               	bcf	_en_put/(0+8),_en_put& (0+7),c
  8670                           
  8671                           ;common.c: 163: break;
  8672  001612  D034               	goto	l763
  8673  001614                     l6246:
  8674                           
  8675                           ;common.c: 165: RTOS_DeleteTask(time_set_yr);
  8676  001614  D864               	call	PL110	;call to abstracted procedure
  8677  001616  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  8678                           
  8679                           ;common.c: 166: RTOS_DeleteTask(default_state);
  8680  00161A  ECE7  F00A         	call	PL44	;call to abstracted procedure
  8681  00161E  EC17  F00E         	call	_RTOS_DeleteTask	;wreg free
  8682                           
  8683                           ;common.c: 167: RTOS_SetTask(time_led, 0, 20);
  8684  001622  ECDD  F00A         	call	PL8	;call to abstracted procedure
  8685  001626  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  8686                           
  8687                           ;common.c: 168: events = 5;
  8688  00162A  0E05               	movlw	5
  8689  00162C  6E65               	movwf	_events,c
  8690                           
  8691                           ;common.c: 169: break;
  8692  00162E  D026               	goto	l763
  8693  001630                     l6252:
  8694                           
  8695                           ;common.c: 171: TSTime.Tyr++;
  8696  001630  2A5F               	incf	_TSTime+6,f,c
  8697                           
  8698                           ;common.c: 172: if(TSTime.Tyr > 99) TSTime.Tyr = 0;
  8699  001632  0E63               	movlw	99
  8700  001634  645F               	cpfsgt	_TSTime+6,c
  8701  001636  D001               	goto	l6258
  8702  001638  6A5F               	clrf	_TSTime+6,c
  8703  00163A                     l6258:
  8704                           
  8705                           ;common.c: 173: RTOS_SetTask(default_state, 2000, 0);
  8706  00163A  EC8B  F007         	call	PL2	;call to abstracted procedure
  8707  00163E  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  8708                           
  8709                           ;common.c: 174: events = 5;
  8710                           
  8711                           ;common.c: 175: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  8712  001642  ECE0  F009         	call	PL16	;call to abstracted procedure
  8713  001646  EC5B  F012         	call	_setDate
  8714                           
  8715                           ;common.c: 176: break;
  8716  00164A  D018               	goto	l763
  8717  00164C                     l6264:
  8718                           
  8719                           ;common.c: 178: TSTime.Tyr--;
  8720  00164C  065F               	decf	_TSTime+6,f,c
  8721                           
  8722                           ;common.c: 179: if(TSTime.Tyr == 255) TSTime.Tyr = 99;
  8723  00164E  285F               	incf	_TSTime+6,w,c
  8724  001650  E102               	bnz	l6270
  8725  001652  0E63               	movlw	99
  8726  001654  6E5F               	movwf	_TSTime+6,c
  8727  001656                     l6270:
  8728                           
  8729                           ;common.c: 180: RTOS_SetTask(default_state, 2000, 0);
  8730  001656  EC8B  F007         	call	PL2	;call to abstracted procedure
  8731  00165A  EC5C  F00E         	call	_RTOS_SetTask	;wreg free
  8732                           
  8733                           ;common.c: 181: events = 5;
  8734                           
  8735                           ;common.c: 182: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  8736  00165E  ECE0  F009         	call	PL16	;call to abstracted procedure
  8737  001662  EC5B  F012         	call	_setDate
  8738                           
  8739                           ;common.c: 183: break;
  8740  001666  D00A               	goto	l763
  8741  001668                     l6278:
  8742  001668  5065               	movf	_events,w,c
  8743                           
  8744                           ; Switch size 1, requested type "space"
  8745                           ; Number of cases is 5, Range of values is 1 to 5
  8746                           ; switch strategies available:
  8747                           ; Name         Instructions Cycles
  8748                           ; simple_byte           16     9 (average)
  8749                           ;	Chosen strategy is simple_byte
  8750  00166A  0A01               	xorlw	1	; case 1
  8751  00166C  E0C0               	bz	l6236
  8752  00166E  0A03               	xorlw	3	; case 2
  8753  001670  E0DF               	bz	l6252
  8754  001672  0A01               	xorlw	1	; case 3
  8755  001674  E0EB               	bz	l6264
  8756  001676  0A07               	xorlw	7	; case 4
  8757  001678  E0CD               	bz	l6246
  8758  00167A  0A01               	xorlw	1	; case 5
  8759  00167C                     l763:
  8760                           
  8761                           ;common.c: 185: if(en_put)
  8762  00167C  A066               	btfss	_en_put/(0+8),_en_put& (0+7),c
  8763  00167E  D029               	goto	l6282
  8764                           
  8765                           ;common.c: 186: {
  8766                           ;common.c: 187: putchar_b_buf(0,'Ð', &Font);
  8767  001680  0ED0               	movlw	208
  8768  001682  ECCE  F004         	call	PL4	;call to abstracted procedure
  8769  001686  0E00               	movlw	0
  8770  001688  ECD4  F00F         	call	_putchar_b_buf
  8771                           
  8772                           ;common.c: 188: putchar_b_buf(6,'ê', &Font);
  8773  00168C  0EEA               	movlw	234
  8774  00168E  ECCE  F004         	call	PL4	;call to abstracted procedure
  8775  001692  0E06               	movlw	6
  8776  001694  ECD4  F00F         	call	_putchar_b_buf
  8777                           
  8778                           ;common.c: 189: putchar_b_buf(12,':', &Font);
  8779  001698  0E3A               	movlw	58
  8780  00169A  ECCE  F004         	call	PL4	;call to abstracted procedure
  8781  00169E  0E0C               	movlw	12
  8782  0016A0  ECD4  F00F         	call	_putchar_b_buf
  8783                           
  8784                           ;common.c: 190: putchar_b_buf(18,(TSTime.Tyr/10) % 10, pFont);
  8785  0016A4  0E0A               	movlw	10
  8786  0016A6  6E13               	movwf	___lbmod@divisor,c
  8787  0016A8  6E0F               	movwf	___lbdiv@divisor,c
  8788  0016AA  505F               	movf	_TSTime+6,w,c
  8789  0016AC  ECB0  F012         	call	___lbdiv
  8790  0016B0  ECB6  F013         	call	___lbmod
  8791  0016B4  EC38  F008         	call	PL30	;call to abstracted procedure
  8792  0016B8  0E12               	movlw	18
  8793  0016BA  ECD4  F00F         	call	_putchar_b_buf
  8794                           
  8795                           ;common.c: 191: putchar_b_buf(24,TSTime.Tyr % 10, pFont);
  8796  0016BE  0E0A               	movlw	10
  8797  0016C0  6E13               	movwf	___lbmod@divisor,c
  8798  0016C2  505F               	movf	_TSTime+6,w,c
  8799  0016C4  ECB6  F013         	call	___lbmod
  8800  0016C8  EC38  F008         	call	PL30	;call to abstracted procedure
  8801  0016CC  0E18               	movlw	24
  8802  0016CE  ECD4  F00F         	call	_putchar_b_buf
  8803  0016D2                     l6282:
  8804                           
  8805                           ;common.c: 192: }
  8806                           ;common.c: 193: Update_Matrix(Dis_Buff);
  8807  0016D2  0EA4               	movlw	low _Dis_Buff
  8808  0016D4  6E11               	movwf	Update_Matrix@buf,c
  8809  0016D6  EC3D  F012         	call	_Update_Matrix	;wreg free
  8810                           
  8811                           ;common.c: 194: en_put=1;
  8812  0016DA  8066               	bsf	_en_put/(0+8),_en_put& (0+7),c
  8813  0016DC  0012               	return		;funcret
  8814  0016DE                     __end_of_time_set_yr:
  8815                           	opt stack 0
  8816  0016DE                     PL110:
  8817                           	opt stack 22
  8818  0016DE  0EEC               	movlw	low _time_set_yr
  8819  0016E0  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  8820  0016E2  0E15               	movlw	high _time_set_yr
  8821  0016E4  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  8822  0016E6  0012               	return	
  8823  0016E8                     __end_ofPL110:
  8824                           	opt stack 0
  8825                           tosu	equ	0xFFF
  8826                           tosh	equ	0xFFE
  8827                           tosl	equ	0xFFD
  8828                           pclath	equ	0xFFA
  8829                           tblptru	equ	0xFF8
  8830                           tblptrh	equ	0xFF7
  8831                           tblptrl	equ	0xFF6
  8832                           tablat	equ	0xFF5
  8833                           prodh	equ	0xFF4
  8834                           prodl	equ	0xFF3
  8835                           intcon	equ	0xFF2
  8836                           intcon2	equ	0xFF1
  8837                           postinc0	equ	0xFEE
  8838                           wreg	equ	0xFE8
  8839                           indf1	equ	0xFE7
  8840                           plusw1	equ	0xFE3
  8841                           fsr1h	equ	0xFE2
  8842                           fsr1l	equ	0xFE1
  8843                           indf2	equ	0xFDF
  8844                           postinc2	equ	0xFDE
  8845                           postdec2	equ	0xFDD
  8846                           plusw2	equ	0xFDB
  8847                           fsr2h	equ	0xFDA
  8848                           fsr2l	equ	0xFD9
  8849                           status	equ	0xFD8
  8850                           
  8851 ;; *************** function _setTime *****************
  8852 ;; Defined at:
  8853 ;;		line 74 in file "ds3231.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;  hSet            1    wreg     unsigned char 
  8856 ;;  mSet            1   27[COMRAM] unsigned char 
  8857 ;;  sSet            1   28[COMRAM] unsigned char 
  8858 ;; Auto vars:     Size  Location     Type
  8859 ;;  hSet            1   29[COMRAM] unsigned char 
  8860 ;; Return value:  Size  Location     Type
  8861 ;;                  1    wreg      void 
  8862 ;; Registers used:
  8863 ;;		wreg, status,2, status,0, cstack
  8864 ;; Tracked objects:
  8865 ;;		On entry : 0/0
  8866 ;;		On exit  : 0/0
  8867 ;;		Unchanged: 0/0
  8868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8869 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;Total ram usage:        3 bytes
  8874 ;; Hardware stack levels used:    1
  8875 ;; Hardware stack levels required when called:    6
  8876 ;; This function calls:
  8877 ;;		_DS3231_Write
  8878 ;;		_decimal_to_bcd
  8879 ;; This function is called by:
  8880 ;;		_time_set_min
  8881 ;;		_time_set_hr
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           	psect	text35
  8886  0025F6                     __ptext35:
  8887                           	opt stack 0
  8888  0025F6                     _setTime:
  8889                           	opt stack 22
  8890                           
  8891                           ;incstack = 0
  8892                           ;setTime@hSet stored from wreg
  8893  0025F6  6E1E               	movwf	setTime@hSet,c
  8894                           
  8895                           ;ds3231.c: 76: DS3231_Write(0x00, (decimal_to_bcd(sSet)));
  8896  0025F8  501D               	movf	setTime@sSet,w,c
  8897  0025FA  ECA3  F013         	call	_decimal_to_bcd
  8898  0025FE  6E1A               	movwf	DS3231_Write@value,c
  8899  002600  0E00               	movlw	0
  8900  002602  EC79  F014         	call	_DS3231_Write
  8901                           
  8902                           ;ds3231.c: 77: DS3231_Write(0x01, (decimal_to_bcd(mSet)));
  8903  002606  501C               	movf	setTime@mSet,w,c
  8904  002608  ECA3  F013         	call	_decimal_to_bcd
  8905  00260C  6E1A               	movwf	DS3231_Write@value,c
  8906  00260E  0E01               	movlw	1
  8907  002610  EC79  F014         	call	_DS3231_Write
  8908                           
  8909                           ;ds3231.c: 78: DS3231_Write(0x02, (0x3F & (decimal_to_bcd(hSet))));
  8910  002614  501E               	movf	setTime@hSet,w,c
  8911  002616  ECA3  F013         	call	_decimal_to_bcd
  8912  00261A  0B3F               	andlw	63
  8913  00261C  6E1A               	movwf	DS3231_Write@value,c
  8914  00261E  0E02               	movlw	2
  8915  002620  EF79  F014         	goto	_DS3231_Write
  8916  002624                     __end_of_setTime:
  8917                           	opt stack 0
  8918                           tosu	equ	0xFFF
  8919                           tosh	equ	0xFFE
  8920                           tosl	equ	0xFFD
  8921                           pclath	equ	0xFFA
  8922                           tblptru	equ	0xFF8
  8923                           tblptrh	equ	0xFF7
  8924                           tblptrl	equ	0xFF6
  8925                           tablat	equ	0xFF5
  8926                           prodh	equ	0xFF4
  8927                           prodl	equ	0xFF3
  8928                           intcon	equ	0xFF2
  8929                           intcon2	equ	0xFF1
  8930                           postinc0	equ	0xFEE
  8931                           wreg	equ	0xFE8
  8932                           indf1	equ	0xFE7
  8933                           plusw1	equ	0xFE3
  8934                           fsr1h	equ	0xFE2
  8935                           fsr1l	equ	0xFE1
  8936                           indf2	equ	0xFDF
  8937                           postinc2	equ	0xFDE
  8938                           postdec2	equ	0xFDD
  8939                           plusw2	equ	0xFDB
  8940                           fsr2h	equ	0xFDA
  8941                           fsr2l	equ	0xFD9
  8942                           status	equ	0xFD8
  8943                           
  8944 ;; *************** function _setDate *****************
  8945 ;; Defined at:
  8946 ;;		line 82 in file "ds3231.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;  daySet          1    wreg     unsigned char 
  8949 ;;  dateSet         1   27[COMRAM] unsigned char 
  8950 ;;  monthSet        1   28[COMRAM] unsigned char 
  8951 ;;  yearSet         1   29[COMRAM] unsigned char 
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;  daySet          1   30[COMRAM] unsigned char 
  8954 ;; Return value:  Size  Location     Type
  8955 ;;                  1    wreg      void 
  8956 ;; Registers used:
  8957 ;;		wreg, status,2, status,0, cstack
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8963 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8966 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;Total ram usage:        4 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; Hardware stack levels required when called:    6
  8970 ;; This function calls:
  8971 ;;		_DS3231_Write
  8972 ;;		_decimal_to_bcd
  8973 ;; This function is called by:
  8974 ;;		_time_set_yr
  8975 ;;		_time_set_mt
  8976 ;;		_time_set_dt
  8977 ;;		_time_set_dy
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           	psect	text36
  8982  0024B6                     __ptext36:
  8983                           	opt stack 0
  8984  0024B6                     _setDate:
  8985                           	opt stack 22
  8986                           
  8987                           ;incstack = 0
  8988                           ;setDate@daySet stored from wreg
  8989  0024B6  6E1F               	movwf	setDate@daySet,c
  8990                           
  8991                           ;ds3231.c: 84: DS3231_Write(0x03, (decimal_to_bcd(daySet)));
  8992  0024B8  501F               	movf	setDate@daySet,w,c
  8993  0024BA  ECA3  F013         	call	_decimal_to_bcd
  8994  0024BE  6E1A               	movwf	DS3231_Write@value,c
  8995  0024C0  0E03               	movlw	3
  8996  0024C2  EC79  F014         	call	_DS3231_Write
  8997                           
  8998                           ;ds3231.c: 85: DS3231_Write(0x04, (decimal_to_bcd(dateSet)));
  8999  0024C6  501C               	movf	setDate@dateSet,w,c
  9000  0024C8  ECA3  F013         	call	_decimal_to_bcd
  9001  0024CC  6E1A               	movwf	DS3231_Write@value,c
  9002  0024CE  0E04               	movlw	4
  9003  0024D0  EC79  F014         	call	_DS3231_Write
  9004                           
  9005                           ;ds3231.c: 86: DS3231_Write(0x05, (decimal_to_bcd(monthSet)));
  9006  0024D4  501D               	movf	setDate@monthSet,w,c
  9007  0024D6  ECA3  F013         	call	_decimal_to_bcd
  9008  0024DA  6E1A               	movwf	DS3231_Write@value,c
  9009  0024DC  0E05               	movlw	5
  9010  0024DE  EC79  F014         	call	_DS3231_Write
  9011                           
  9012                           ;ds3231.c: 87: DS3231_Write(0x06, (decimal_to_bcd(yearSet)));
  9013  0024E2  501E               	movf	setDate@yearSet,w,c
  9014  0024E4  ECA3  F013         	call	_decimal_to_bcd
  9015  0024E8  6E1A               	movwf	DS3231_Write@value,c
  9016  0024EA  0E06               	movlw	6
  9017  0024EC  EF79  F014         	goto	_DS3231_Write
  9018  0024F0                     __end_of_setDate:
  9019                           	opt stack 0
  9020                           tosu	equ	0xFFF
  9021                           tosh	equ	0xFFE
  9022                           tosl	equ	0xFFD
  9023                           pclath	equ	0xFFA
  9024                           tblptru	equ	0xFF8
  9025                           tblptrh	equ	0xFF7
  9026                           tblptrl	equ	0xFF6
  9027                           tablat	equ	0xFF5
  9028                           prodh	equ	0xFF4
  9029                           prodl	equ	0xFF3
  9030                           intcon	equ	0xFF2
  9031                           intcon2	equ	0xFF1
  9032                           postinc0	equ	0xFEE
  9033                           wreg	equ	0xFE8
  9034                           indf1	equ	0xFE7
  9035                           plusw1	equ	0xFE3
  9036                           fsr1h	equ	0xFE2
  9037                           fsr1l	equ	0xFE1
  9038                           indf2	equ	0xFDF
  9039                           postinc2	equ	0xFDE
  9040                           postdec2	equ	0xFDD
  9041                           plusw2	equ	0xFDB
  9042                           fsr2h	equ	0xFDA
  9043                           fsr2l	equ	0xFD9
  9044                           status	equ	0xFD8
  9045                           
  9046 ;; *************** function _decimal_to_bcd *****************
  9047 ;; Defined at:
  9048 ;;		line 10 in file "ds3231.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;  d               1    wreg     unsigned char 
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  d               1   24[COMRAM] unsigned char 
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      unsigned char 
  9055 ;; Registers used:
  9056 ;;		wreg, status,2, status,0, cstack
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;Total ram usage:        3 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    4
  9069 ;; This function calls:
  9070 ;;		___lbdiv
  9071 ;;		___lbmod
  9072 ;; This function is called by:
  9073 ;;		_setTime
  9074 ;;		_setDate
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           	psect	text37
  9079  002746                     __ptext37:
  9080                           	opt stack 0
  9081  002746                     _decimal_to_bcd:
  9082                           	opt stack 23
  9083                           
  9084                           ;incstack = 0
  9085                           ;decimal_to_bcd@d stored from wreg
  9086  002746  6E19               	movwf	decimal_to_bcd@d,c
  9087                           
  9088                           ;ds3231.c: 12: return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
  9089  002748  0E0A               	movlw	10
  9090  00274A  6E13               	movwf	___lbmod@divisor,c
  9091  00274C  5019               	movf	decimal_to_bcd@d,w,c
  9092  00274E  ECB6  F013         	call	___lbmod
  9093  002752  6E17               	movwf	??_decimal_to_bcd& (0+255),c
  9094  002754  0E0F               	movlw	15
  9095  002756  1617               	andwf	??_decimal_to_bcd,f,c
  9096  002758  0E0A               	movlw	10
  9097  00275A  6E0F               	movwf	___lbdiv@divisor,c
  9098  00275C  5019               	movf	decimal_to_bcd@d,w,c
  9099  00275E  ECB0  F012         	call	___lbdiv
  9100  002762  6E18               	movwf	(??_decimal_to_bcd+1)& (0+255),c
  9101  002764  3818               	swapf	??_decimal_to_bcd+1,w,c
  9102  002766  0BF0               	andlw	240
  9103  002768  1017               	iorwf	??_decimal_to_bcd,w,c
  9104  00276A  0012               	return		;funcret
  9105  00276C                     __end_of_decimal_to_bcd:
  9106                           	opt stack 0
  9107                           tosu	equ	0xFFF
  9108                           tosh	equ	0xFFE
  9109                           tosl	equ	0xFFD
  9110                           pclath	equ	0xFFA
  9111                           tblptru	equ	0xFF8
  9112                           tblptrh	equ	0xFF7
  9113                           tblptrl	equ	0xFF6
  9114                           tablat	equ	0xFF5
  9115                           prodh	equ	0xFF4
  9116                           prodl	equ	0xFF3
  9117                           intcon	equ	0xFF2
  9118                           intcon2	equ	0xFF1
  9119                           postinc0	equ	0xFEE
  9120                           wreg	equ	0xFE8
  9121                           indf1	equ	0xFE7
  9122                           plusw1	equ	0xFE3
  9123                           fsr1h	equ	0xFE2
  9124                           fsr1l	equ	0xFE1
  9125                           indf2	equ	0xFDF
  9126                           postinc2	equ	0xFDE
  9127                           postdec2	equ	0xFDD
  9128                           plusw2	equ	0xFDB
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133 ;; *************** function _DS3231_Write *****************
  9134 ;; Defined at:
  9135 ;;		line 30 in file "ds3231.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;  address         1    wreg     unsigned char 
  9138 ;;  value           1   25[COMRAM] unsigned char 
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;  address         1   26[COMRAM] unsigned char 
  9141 ;; Return value:  Size  Location     Type
  9142 ;;                  1    wreg      void 
  9143 ;; Registers used:
  9144 ;;		wreg, status,2, status,0, cstack
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9150 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;Total ram usage:        2 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    5
  9157 ;; This function calls:
  9158 ;;		_I2C_Master_Start
  9159 ;;		_I2C_Master_Stop
  9160 ;;		_I2C_Master_Write
  9161 ;; This function is called by:
  9162 ;;		_DS3231_init
  9163 ;;		_setTime
  9164 ;;		_setDate
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           	psect	text38
  9169  0028F2                     __ptext38:
  9170                           	opt stack 0
  9171  0028F2                     _DS3231_Write:
  9172                           	opt stack 23
  9173                           
  9174                           ;incstack = 0
  9175                           ;DS3231_Write@address stored from wreg
  9176  0028F2  6E1B               	movwf	DS3231_Write@address,c
  9177                           
  9178                           ;ds3231.c: 32: I2C_Master_Start();
  9179  0028F4  EC1C  F015         	call	_I2C_Master_Start	;wreg free
  9180                           
  9181                           ;ds3231.c: 33: I2C_Master_Write(0xD0);
  9182  0028F8  0ED0               	movlw	208
  9183  0028FA  EC12  F015         	call	_I2C_Master_Write
  9184                           
  9185                           ;ds3231.c: 34: I2C_Master_Write(address);
  9186  0028FE  501B               	movf	DS3231_Write@address,w,c
  9187  002900  EC12  F015         	call	_I2C_Master_Write
  9188                           
  9189                           ;ds3231.c: 35: I2C_Master_Write(value);
  9190  002904  501A               	movf	DS3231_Write@value,w,c
  9191  002906  EC12  F015         	call	_I2C_Master_Write
  9192                           
  9193                           ;ds3231.c: 36: I2C_Master_Stop();
  9194  00290A  EF18  F015         	goto	_I2C_Master_Stop	;wreg free
  9195  00290E                     __end_of_DS3231_Write:
  9196                           	opt stack 0
  9197                           tosu	equ	0xFFF
  9198                           tosh	equ	0xFFE
  9199                           tosl	equ	0xFFD
  9200                           pclath	equ	0xFFA
  9201                           tblptru	equ	0xFF8
  9202                           tblptrh	equ	0xFF7
  9203                           tblptrl	equ	0xFF6
  9204                           tablat	equ	0xFF5
  9205                           prodh	equ	0xFF4
  9206                           prodl	equ	0xFF3
  9207                           intcon	equ	0xFF2
  9208                           intcon2	equ	0xFF1
  9209                           postinc0	equ	0xFEE
  9210                           wreg	equ	0xFE8
  9211                           indf1	equ	0xFE7
  9212                           plusw1	equ	0xFE3
  9213                           fsr1h	equ	0xFE2
  9214                           fsr1l	equ	0xFE1
  9215                           indf2	equ	0xFDF
  9216                           postinc2	equ	0xFDE
  9217                           postdec2	equ	0xFDD
  9218                           plusw2	equ	0xFDB
  9219                           fsr2h	equ	0xFDA
  9220                           fsr2l	equ	0xFD9
  9221                           status	equ	0xFD8
  9222                           
  9223 ;; *************** function _readTemp_Single *****************
  9224 ;; Defined at:
  9225 ;;		line 32 in file "ds18b20.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;  buf             1   26[COMRAM] PTR unsigned int 
  9228 ;;		 -> temperature(2), 
  9229 ;;  time_flag       1   27[COMRAM] PTR unsigned char 
  9230 ;;		 -> time_flag(1), 
  9231 ;;  timer_val       1   28[COMRAM] PTR unsigned char 
  9232 ;;		 -> timer_val(1), 
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;  temp            2   34[COMRAM] unsigned int 
  9235 ;;  i               1   33[COMRAM] unsigned char 
  9236 ;;  tmp             1   32[COMRAM] unsigned char 
  9237 ;;  fptmp           1   31[COMRAM] unsigned char 
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      unsigned char 
  9240 ;; Registers used:
  9241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9242 ;; Tracked objects:
  9243 ;;		On entry : 3F/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9247 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;Total ram usage:       10 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    5
  9254 ;; This function calls:
  9255 ;;		___lwdiv
  9256 ;;		___lwmod
  9257 ;;		_ow_reset
  9258 ;;		_read_byte
  9259 ;;		_write_byte
  9260 ;; This function is called by:
  9261 ;;		_time_led
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           	psect	text39
  9266  0010AC                     __ptext39:
  9267                           	opt stack 0
  9268  0010AC                     _readTemp_Single:
  9269                           	opt stack 23
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;ds18b20.c: 36: uint8_t i, tmp, fptmp;
  9273                           ;ds18b20.c: 38: switch(*time_flag)
  9274                           
  9275                           ;incstack = 0
  9276  0010AC  D07F               	goto	l6036
  9277  0010AE                     l5970:
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;ds18b20.c: 41: if (!ow_reset())
  9281  0010AE  EC1F  F012         	call	_ow_reset	;wreg free
  9282  0010B2  0900               	iorlw	0
  9283  0010B4  A4D8               	btfss	status,2,c
  9284  0010B6  0012               	return	
  9285                           
  9286                           ;ds18b20.c: 42: {
  9287                           ;ds18b20.c: 49: write_byte(0xCC);
  9288  0010B8  0ECC               	movlw	204
  9289  0010BA  EC78  F012         	call	_write_byte
  9290                           
  9291                           ;ds18b20.c: 50: write_byte(0x44);
  9292  0010BE  0E44               	movlw	68
  9293  0010C0  EC78  F012         	call	_write_byte
  9294                           
  9295                           ;ds18b20.c: 51: *timer_val = 0;
  9296  0010C4  501D               	movf	readTemp_Single@timer_val,w,c
  9297  0010C6  6ED9               	movwf	fsr2l,c
  9298  0010C8  6ADA               	clrf	fsr2h,c
  9299  0010CA  6ADF               	clrf	indf2,c
  9300                           
  9301                           ;ds18b20.c: 52: *time_flag = 2;
  9302  0010CC  501C               	movf	readTemp_Single@time_flag,w,c
  9303  0010CE  6ED9               	movwf	fsr2l,c
  9304  0010D0  6ADA               	clrf	fsr2h,c
  9305  0010D2  0E02               	movlw	2
  9306  0010D4  6EDF               	movwf	indf2,c
  9307                           
  9308                           ;ds18b20.c: 53: T1CONbits.TMR1ON = 1;
  9309  0010D6  80CD               	bsf	4045,0,c	;volatile
  9310  0010D8  0C02               	retlw	2
  9311  0010DA                     l5982:
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;ds18b20.c: 72: ow_reset();
  9315  0010DA  EC1F  F012         	call	_ow_reset	;wreg free
  9316                           
  9317                           ;ds18b20.c: 73: write_byte(0xCC);
  9318  0010DE  0ECC               	movlw	204
  9319  0010E0  EC78  F012         	call	_write_byte
  9320                           
  9321                           ;ds18b20.c: 74: write_byte(0xBE);
  9322  0010E4  0EBE               	movlw	190
  9323  0010E6  EC78  F012         	call	_write_byte
  9324                           
  9325                           ;ds18b20.c: 75: for(i=0; i<2; i++)
  9326  0010EA  6A22               	clrf	readTemp_Single@i,c
  9327  0010EC                     l5994:
  9328                           
  9329                           ;ds18b20.c: 76: {
  9330                           ;ds18b20.c: 77: scratch[i]= read_byte();
  9331  0010EC  5022               	movf	readTemp_Single@i,w,c
  9332  0010EE  0F80               	addlw	low _scratch
  9333  0010F0  6ED9               	movwf	fsr2l,c
  9334  0010F2  6ADA               	clrf	fsr2h,c
  9335  0010F4  EC94  F012         	call	_read_byte	;wreg free
  9336  0010F8  6EDF               	movwf	indf2,c
  9337  0010FA  2A22               	incf	readTemp_Single@i,f,c
  9338  0010FC  0E01               	movlw	1
  9339  0010FE  6422               	cpfsgt	readTemp_Single@i,c
  9340  001100  D7F5               	goto	l5994
  9341                           
  9342                           ;ds18b20.c: 78: }
  9343                           ;ds18b20.c: 80: temp =(((uint16_t)scratch[1])<<8)|((uint16_t)scratch[0]);
  9344  001102  0100               	movlb	0	; () banked
  9345  001104  5181               	movf	(_scratch+1)& (0+255),w,b
  9346  001106  6E1E               	movwf	??_readTemp_Single& (0+255),c
  9347  001108  5180               	movf	_scratch& (0+255),w,b
  9348  00110A  6E23               	movwf	readTemp_Single@temp,c
  9349  00110C  C01E  F024         	movff	??_readTemp_Single,readTemp_Single@temp+1
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;ds18b20.c: 83: if (temp & 0x8000)
  9353  001110  AE24               	btfss	readTemp_Single@temp+1,7,c
  9354  001112  D004               	goto	l6006
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;ds18b20.c: 86: minus=1;
  9358  001114  6C23               	negf	readTemp_Single@temp,c
  9359  001116  1E24               	comf	readTemp_Single@temp+1,f,c
  9360  001118  B0D8               	btfsc	status,0,c
  9361  00111A  2A24               	incf	readTemp_Single@temp+1,f,c
  9362  00111C                     l6006:
  9363                           
  9364                           ; BSR set to: 0
  9365                           ;ds18b20.c: 87: }
  9366                           ;ds18b20.c: 89: tmp = temp & 0x0f;
  9367  00111C  5023               	movf	readTemp_Single@temp,w,c
  9368  00111E  0B0F               	andlw	15
  9369  001120  6E21               	movwf	readTemp_Single@tmp,c
  9370                           
  9371                           ; BSR set to: 0
  9372                           ;ds18b20.c: 90: tmp = fract[tmp];
  9373  001122  0EA6               	movlw	low _fract
  9374  001124  2421               	addwf	readTemp_Single@tmp,w,c
  9375  001126  6EF6               	movwf	tblptrl,c
  9376  001128  6AF7               	clrf	tblptrh,c
  9377  00112A  0EB9               	movlw	high _fract
  9378  00112C  22F7               	addwfc	tblptrh,f,c
  9379  00112E                     	if	0	;There are less than 3 active tblptr bytes
  9380  00112E                     	endif
  9381  00112E  0008               	tblrd		*
  9382  001130  CFF5 F021          	movff	tablat,readTemp_Single@tmp
  9383                           
  9384                           ; BSR set to: 0
  9385                           ;ds18b20.c: 91: temp = temp>>4;
  9386  001134  3A23               	swapf	readTemp_Single@temp,f,c
  9387  001136  3A24               	swapf	readTemp_Single@temp+1,f,c
  9388  001138  0E0F               	movlw	15
  9389  00113A  1623               	andwf	readTemp_Single@temp,f,c
  9390  00113C  5024               	movf	readTemp_Single@temp+1,w,c
  9391  00113E  0BF0               	andlw	240
  9392  001140  1223               	iorwf	readTemp_Single@temp,f,c
  9393  001142  0E0F               	movlw	15
  9394  001144  1624               	andwf	readTemp_Single@temp+1,f,c
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;ds18b20.c: 92: temp = (temp & 0x00ff) * 10;
  9398  001146  5023               	movf	readTemp_Single@temp,w,c
  9399  001148  0D0A               	mullw	10
  9400  00114A  CFF3 F023          	movff	prodl,readTemp_Single@temp
  9401  00114E  CFF4 F024          	movff	prodh,readTemp_Single@temp+1
  9402                           
  9403                           ; BSR set to: 0
  9404                           ;ds18b20.c: 93: temp = temp + tmp;
  9405  001152  5021               	movf	readTemp_Single@tmp,w,c
  9406  001154  2623               	addwf	readTemp_Single@temp,f,c
  9407  001156  0E00               	movlw	0
  9408  001158  2224               	addwfc	readTemp_Single@temp+1,f,c
  9409                           
  9410                           ; BSR set to: 0
  9411                           ;ds18b20.c: 99: fptmp = temp % 10;
  9412  00115A  C023  F016         	movff	readTemp_Single@temp,___lwmod@dividend
  9413  00115E  C024  F017         	movff	readTemp_Single@temp+1,___lwmod@dividend+1
  9414  001162  6A19               	clrf	___lwmod@divisor+1,c
  9415  001164  0E0A               	movlw	10
  9416  001166  6E18               	movwf	___lwmod@divisor,c
  9417  001168  EC00  F012         	call	___lwmod	;wreg free
  9418  00116C  5016               	movf	?___lwmod,w,c
  9419  00116E  6E20               	movwf	readTemp_Single@fptmp,c
  9420                           
  9421                           ;ds18b20.c: 100: temp = temp / 10;
  9422  001170  C023  F00F         	movff	readTemp_Single@temp,___lwdiv@dividend
  9423  001174  C024  F010         	movff	readTemp_Single@temp+1,___lwdiv@dividend+1
  9424  001178  6A12               	clrf	___lwdiv@divisor+1,c
  9425  00117A  0E0A               	movlw	10
  9426  00117C  6E11               	movwf	___lwdiv@divisor,c
  9427  00117E  ECB7  F011         	call	___lwdiv	;wreg free
  9428  001182  C00F  F023         	movff	?___lwdiv,readTemp_Single@temp
  9429  001186  C010  F024         	movff	?___lwdiv+1,readTemp_Single@temp+1
  9430                           
  9431                           ;ds18b20.c: 102: if (fptmp >=6) temp += 1;
  9432  00118A  0E05               	movlw	5
  9433  00118C  6420               	cpfsgt	readTemp_Single@fptmp,c
  9434  00118E  D002               	goto	l6024
  9435  001190  4A23               	infsnz	readTemp_Single@temp,f,c
  9436  001192  2A24               	incf	readTemp_Single@temp+1,f,c
  9437  001194                     l6024:
  9438                           
  9439                           ;ds18b20.c: 105: *buf = temp;
  9440  001194  501B               	movf	readTemp_Single@buf,w,c
  9441  001196  6ED9               	movwf	fsr2l,c
  9442  001198  6ADA               	clrf	fsr2h,c
  9443  00119A  C023  FFDE         	movff	readTemp_Single@temp,postinc2
  9444  00119E  C024  FFDD         	movff	readTemp_Single@temp+1,postdec2
  9445                           
  9446                           ;ds18b20.c: 106: *time_flag = 0;
  9447  0011A2  501C               	movf	readTemp_Single@time_flag,w,c
  9448  0011A4  6ED9               	movwf	fsr2l,c
  9449  0011A6  6ADA               	clrf	fsr2h,c
  9450  0011A8  6ADF               	clrf	indf2,c
  9451  0011AA  0C00               	retlw	0
  9452  0011AC                     l6036:
  9453                           
  9454                           ; BSR set to: 0
  9455  0011AC  501C               	movf	readTemp_Single@time_flag,w,c
  9456  0011AE  6ED9               	movwf	fsr2l,c
  9457  0011B0  6ADA               	clrf	fsr2h,c
  9458  0011B2  50DF               	movf	indf2,w,c
  9459                           
  9460                           ; Switch size 1, requested type "space"
  9461                           ; Number of cases is 3, Range of values is 0 to 2
  9462                           ; switch strategies available:
  9463                           ; Name         Instructions Cycles
  9464                           ; simple_byte           10     6 (average)
  9465                           ;	Chosen strategy is simple_byte
  9466  0011B4  E101 D77B          	bz	l5970
  9467  0011B8  0A01               	xorlw	1	; case 1
  9468  0011BA  E08F               	bz	l5982
  9469  0011BC  0A03               	xorlw	3	; case 2
  9470  0011BE  0012               	return	
  9471  0011C0                     __end_of_readTemp_Single:
  9472                           	opt stack 0
  9473                           tosu	equ	0xFFF
  9474                           tosh	equ	0xFFE
  9475                           tosl	equ	0xFFD
  9476                           pclath	equ	0xFFA
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodh	equ	0xFF4
  9482                           prodl	equ	0xFF3
  9483                           intcon	equ	0xFF2
  9484                           intcon2	equ	0xFF1
  9485                           postinc0	equ	0xFEE
  9486                           wreg	equ	0xFE8
  9487                           indf1	equ	0xFE7
  9488                           plusw1	equ	0xFE3
  9489                           fsr1h	equ	0xFE2
  9490                           fsr1l	equ	0xFE1
  9491                           indf2	equ	0xFDF
  9492                           postinc2	equ	0xFDE
  9493                           postdec2	equ	0xFDD
  9494                           plusw2	equ	0xFDB
  9495                           fsr2h	equ	0xFDA
  9496                           fsr2l	equ	0xFD9
  9497                           status	equ	0xFD8
  9498                           
  9499 ;; *************** function _write_byte *****************
  9500 ;; Defined at:
  9501 ;;		line 66 in file "onewire.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;  val             1    wreg     unsigned char 
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;  val             1   17[COMRAM] unsigned char 
  9506 ;;  i               1   19[COMRAM] unsigned char 
  9507 ;;  temp            1   18[COMRAM] unsigned char 
  9508 ;; Return value:  Size  Location     Type
  9509 ;;                  1    wreg      void 
  9510 ;; Registers used:
  9511 ;;		wreg, status,2, status,0, cstack
  9512 ;; Tracked objects:
  9513 ;;		On entry : 0/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9520 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;Total ram usage:        5 bytes
  9522 ;; Hardware stack levels used:    1
  9523 ;; Hardware stack levels required when called:    4
  9524 ;; This function calls:
  9525 ;;		_write_bit
  9526 ;; This function is called by:
  9527 ;;		_init_ds18b20
  9528 ;;		_readTemp_Single
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           	psect	text40
  9533  0024F0                     __ptext40:
  9534                           	opt stack 0
  9535  0024F0                     _write_byte:
  9536                           	opt stack 24
  9537                           
  9538                           ;incstack = 0
  9539                           ;write_byte@val stored from wreg
  9540  0024F0  6E12               	movwf	write_byte@val,c
  9541                           
  9542                           ;onewire.c: 68: uint8_t i;
  9543                           ;onewire.c: 69: uint8_t temp;
  9544                           ;onewire.c: 71: for (i=0;i<8;i++)
  9545  0024F2  6A14               	clrf	write_byte@i,c
  9546  0024F4                     l5498:
  9547                           
  9548                           ;onewire.c: 72: {
  9549                           ;onewire.c: 73: temp = val >> i;
  9550  0024F4  C014  F010         	movff	write_byte@i,??_write_byte
  9551  0024F8  C012  F011         	movff	write_byte@val,??_write_byte+1
  9552  0024FC  2A10               	incf	??_write_byte,f,c
  9553  0024FE  D002               	goto	u3804
  9554  002500                     u3805:
  9555  002500  90D8               	bcf	status,0,c
  9556  002502  3211               	rrcf	??_write_byte+1,f,c
  9557  002504                     u3804:
  9558  002504  2E10               	decfsz	??_write_byte,f,c
  9559  002506  D7FC               	goto	u3805
  9560  002508  5011               	movf	??_write_byte+1,w,c
  9561  00250A  6E13               	movwf	write_byte@temp,c
  9562                           
  9563                           ;onewire.c: 74: temp &= 0x01;
  9564  00250C  0E01               	movlw	1
  9565  00250E  1613               	andwf	write_byte@temp,f,c
  9566                           
  9567                           ;onewire.c: 75: write_bit(temp);
  9568  002510  5013               	movf	write_byte@temp,w,c
  9569  002512  ECC9  F013         	call	_write_bit
  9570  002516  2A14               	incf	write_byte@i,f,c
  9571  002518  0E07               	movlw	7
  9572  00251A  6414               	cpfsgt	write_byte@i,c
  9573  00251C  D7EB               	goto	l5498
  9574                           
  9575                           ;onewire.c: 76: }
  9576                           ;onewire.c: 78: _delay((unsigned long)((105)*(40000000/4000000.0)));
  9577  00251E  0ED2               	movlw	210
  9578  002520                     u5297:
  9579  002520  D000               	nop2	
  9580  002522  2EE8               	decfsz	wreg,f,c
  9581  002524  D7FD               	bra	u5297
  9582  002526  0012               	return		;funcret
  9583  002528                     __end_of_write_byte:
  9584                           	opt stack 0
  9585                           tosu	equ	0xFFF
  9586                           tosh	equ	0xFFE
  9587                           tosl	equ	0xFFD
  9588                           pclath	equ	0xFFA
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           intcon	equ	0xFF2
  9596                           intcon2	equ	0xFF1
  9597                           postinc0	equ	0xFEE
  9598                           wreg	equ	0xFE8
  9599                           indf1	equ	0xFE7
  9600                           plusw1	equ	0xFE3
  9601                           fsr1h	equ	0xFE2
  9602                           fsr1l	equ	0xFE1
  9603                           indf2	equ	0xFDF
  9604                           postinc2	equ	0xFDE
  9605                           postdec2	equ	0xFDD
  9606                           plusw2	equ	0xFDB
  9607                           fsr2h	equ	0xFDA
  9608                           fsr2l	equ	0xFD9
  9609                           status	equ	0xFD8
  9610                           
  9611 ;; *************** function _write_bit *****************
  9612 ;; Defined at:
  9613 ;;		line 34 in file "onewire.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;  bitval          1    wreg     unsigned char 
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;  bitval          1   14[COMRAM] unsigned char 
  9618 ;; Return value:  Size  Location     Type
  9619 ;;                  1    wreg      void 
  9620 ;; Registers used:
  9621 ;;		wreg, status,2, status,0, cstack
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;Total ram usage:        1 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; Hardware stack levels required when called:    3
  9634 ;; This function calls:
  9635 ;;		Nothing
  9636 ;; This function is called by:
  9637 ;;		_write_byte
  9638 ;; This function uses a non-reentrant model
  9639 ;;
  9640                           
  9641                           	psect	text41
  9642  002792                     __ptext41:
  9643                           	opt stack 0
  9644  002792                     _write_bit:
  9645                           	opt stack 24
  9646                           
  9647                           ;incstack = 0
  9648                           ;write_bit@bitval stored from wreg
  9649  002792  6E0F               	movwf	write_bit@bitval,c
  9650                           
  9651                           ;onewire.c: 36: PORTCbits.RC0 = 0;
  9652  002794  9082               	bcf	3970,0,c	;volatile
  9653                           
  9654                           ;onewire.c: 37: TRISCbits.RC0 = 0;
  9655  002796  9094               	bcf	3988,0,c	;volatile
  9656                           
  9657                           ;onewire.c: 38: if(bitval == 1) {
  9658  002798  040F               	decf	write_bit@bitval,w,c
  9659  00279A  E106               	bnz	l1045
  9660                           
  9661                           ;onewire.c: 39: _delay((unsigned long)((2)*(40000000/4000000.0)));
  9662  00279C  0E06               	movlw	6
  9663  00279E                     u5307:
  9664  00279E  2EE8               	decfsz	wreg,f,c
  9665  0027A0  D7FE               	bra	u5307
  9666  0027A2  D000               	nop2	
  9667                           
  9668                           ;onewire.c: 40: PORTCbits.RC0 = 1;
  9669  0027A4  8082               	bsf	3970,0,c	;volatile
  9670                           
  9671                           ;onewire.c: 41: TRISCbits.RC0 = 1;
  9672  0027A6  8094               	bsf	3988,0,c	;volatile
  9673  0027A8                     l1045:
  9674                           
  9675                           ;onewire.c: 42: }
  9676                           ;onewire.c: 43: _delay((unsigned long)((105)*(40000000/4000000.0)));
  9677  0027A8  0ED2               	movlw	210
  9678  0027AA                     u5317:
  9679  0027AA  D000               	nop2	
  9680  0027AC  2EE8               	decfsz	wreg,f,c
  9681  0027AE  D7FD               	bra	u5317
  9682                           
  9683                           ;onewire.c: 44: PORTCbits.RC0 = 1;
  9684  0027B0  8082               	bsf	3970,0,c	;volatile
  9685                           
  9686                           ;onewire.c: 45: TRISCbits.RC0 = 1;
  9687  0027B2  8094               	bsf	3988,0,c	;volatile
  9688  0027B4  0012               	return		;funcret
  9689  0027B6                     __end_of_write_bit:
  9690                           	opt stack 0
  9691                           tosu	equ	0xFFF
  9692                           tosh	equ	0xFFE
  9693                           tosl	equ	0xFFD
  9694                           pclath	equ	0xFFA
  9695                           tblptru	equ	0xFF8
  9696                           tblptrh	equ	0xFF7
  9697                           tblptrl	equ	0xFF6
  9698                           tablat	equ	0xFF5
  9699                           prodh	equ	0xFF4
  9700                           prodl	equ	0xFF3
  9701                           intcon	equ	0xFF2
  9702                           intcon2	equ	0xFF1
  9703                           postinc0	equ	0xFEE
  9704                           wreg	equ	0xFE8
  9705                           indf1	equ	0xFE7
  9706                           plusw1	equ	0xFE3
  9707                           fsr1h	equ	0xFE2
  9708                           fsr1l	equ	0xFE1
  9709                           indf2	equ	0xFDF
  9710                           postinc2	equ	0xFDE
  9711                           postdec2	equ	0xFDD
  9712                           plusw2	equ	0xFDB
  9713                           fsr2h	equ	0xFDA
  9714                           fsr2l	equ	0xFD9
  9715                           status	equ	0xFD8
  9716                           
  9717 ;; *************** function _read_byte *****************
  9718 ;; Defined at:
  9719 ;;		line 50 in file "onewire.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;		None
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;  i               1   17[COMRAM] unsigned char 
  9724 ;;  val             1   16[COMRAM] unsigned char 
  9725 ;; Return value:  Size  Location     Type
  9726 ;;                  1    wreg      unsigned char 
  9727 ;; Registers used:
  9728 ;;		wreg, status,2, status,0, cstack
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9736 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;Total ram usage:        4 bytes
  9739 ;; Hardware stack levels used:    1
  9740 ;; Hardware stack levels required when called:    4
  9741 ;; This function calls:
  9742 ;;		_read_bit
  9743 ;; This function is called by:
  9744 ;;		_readTemp_Single
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           	psect	text42
  9749  002528                     __ptext42:
  9750                           	opt stack 0
  9751  002528                     _read_byte:
  9752                           	opt stack 23
  9753                           
  9754                           ;onewire.c: 52: uint8_t i;
  9755                           ;onewire.c: 53: uint8_t val = 0;
  9756                           
  9757                           ;incstack = 0
  9758  002528  6A11               	clrf	read_byte@val,c
  9759                           
  9760                           ;onewire.c: 55: for(i=0;i<8;i++)
  9761  00252A  6A12               	clrf	read_byte@i,c
  9762  00252C                     l5514:
  9763                           
  9764                           ;onewire.c: 56: {
  9765                           ;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  9766  00252C  EC87  F014         	call	_read_bit	;wreg free
  9767  002530  0900               	iorlw	0
  9768  002532  E00C               	bz	l5518
  9769  002534  C012  F00F         	movff	read_byte@i,??_read_byte
  9770  002538  0E01               	movlw	1
  9771  00253A  6E10               	movwf	(??_read_byte+1)& (0+255),c
  9772  00253C  2A0F               	incf	??_read_byte,f,c
  9773  00253E  D002               	goto	u3834
  9774  002540                     u3835:
  9775  002540  90D8               	bcf	status,0,c
  9776  002542  3610               	rlcf	??_read_byte+1,f,c
  9777  002544                     u3834:
  9778  002544  2E0F               	decfsz	??_read_byte,f,c
  9779  002546  D7FC               	goto	u3835
  9780  002548  5010               	movf	??_read_byte+1,w,c
  9781  00254A  1211               	iorwf	read_byte@val,f,c
  9782  00254C                     l5518:
  9783                           
  9784                           ;onewire.c: 58: _delay((unsigned long)((120)*(40000000/4000000.0)));
  9785  00254C  0EF0               	movlw	240
  9786  00254E                     u5327:
  9787  00254E  D000               	nop2	
  9788  002550  2EE8               	decfsz	wreg,f,c
  9789  002552  D7FD               	bra	u5327
  9790  002554  2A12               	incf	read_byte@i,f,c
  9791  002556  0E07               	movlw	7
  9792  002558  6412               	cpfsgt	read_byte@i,c
  9793  00255A  D7E8               	goto	l5514
  9794                           
  9795                           ;onewire.c: 59: }
  9796                           ;onewire.c: 61: return val;
  9797  00255C  5011               	movf	read_byte@val,w,c
  9798  00255E  0012               	return		;funcret
  9799  002560                     __end_of_read_byte:
  9800                           	opt stack 0
  9801                           tosu	equ	0xFFF
  9802                           tosh	equ	0xFFE
  9803                           tosl	equ	0xFFD
  9804                           pclath	equ	0xFFA
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           intcon2	equ	0xFF1
  9813                           postinc0	equ	0xFEE
  9814                           wreg	equ	0xFE8
  9815                           indf1	equ	0xFE7
  9816                           plusw1	equ	0xFE3
  9817                           fsr1h	equ	0xFE2
  9818                           fsr1l	equ	0xFE1
  9819                           indf2	equ	0xFDF
  9820                           postinc2	equ	0xFDE
  9821                           postdec2	equ	0xFDD
  9822                           plusw2	equ	0xFDB
  9823                           fsr2h	equ	0xFDA
  9824                           fsr2l	equ	0xFD9
  9825                           status	equ	0xFD8
  9826                           
  9827 ;; *************** function _read_bit *****************
  9828 ;; Defined at:
  9829 ;;		line 22 in file "onewire.c"
  9830 ;; Parameters:    Size  Location     Type
  9831 ;;		None
  9832 ;; Auto vars:     Size  Location     Type
  9833 ;;		None
  9834 ;; Return value:  Size  Location     Type
  9835 ;;                  1    wreg      unsigned char 
  9836 ;; Registers used:
  9837 ;;		wreg
  9838 ;; Tracked objects:
  9839 ;;		On entry : 0/0
  9840 ;;		On exit  : 0/0
  9841 ;;		Unchanged: 0/0
  9842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9847 ;;Total ram usage:        0 bytes
  9848 ;; Hardware stack levels used:    1
  9849 ;; Hardware stack levels required when called:    3
  9850 ;; This function calls:
  9851 ;;		Nothing
  9852 ;; This function is called by:
  9853 ;;		_read_byte
  9854 ;; This function uses a non-reentrant model
  9855 ;;
  9856                           
  9857                           	psect	text43
  9858  00290E                     __ptext43:
  9859                           	opt stack 0
  9860  00290E                     _read_bit:
  9861                           	opt stack 23
  9862                           
  9863                           ;onewire.c: 24: PORTCbits.RC0 = 0;
  9864                           
  9865                           ;incstack = 0
  9866  00290E  9082               	bcf	3970,0,c	;volatile
  9867                           
  9868                           ;onewire.c: 25: TRISCbits.RC0 = 0;
  9869  002910  9094               	bcf	3988,0,c	;volatile
  9870                           
  9871                           ;onewire.c: 26: _delay((unsigned long)((1)*(40000000/4000000.0)));
  9872  002912  0E03               	movlw	3
  9873  002914                     u5337:
  9874  002914  2EE8               	decfsz	wreg,f,c
  9875  002916  D7FE               	bra	u5337
  9876  002918  F000               	nop	
  9877                           
  9878                           ;onewire.c: 27: PORTCbits.RC0 = 1;
  9879  00291A  8082               	bsf	3970,0,c	;volatile
  9880                           
  9881                           ;onewire.c: 28: TRISCbits.RC0 = 1;
  9882  00291C  8094               	bsf	3988,0,c	;volatile
  9883                           
  9884                           ;onewire.c: 29: _delay((unsigned long)((6)*(40000000/4000000.0)));
  9885  00291E  0E14               	movlw	20
  9886  002920                     u5347:
  9887  002920  2EE8               	decfsz	wreg,f,c
  9888  002922  D7FE               	bra	u5347
  9889                           
  9890                           ;onewire.c: 30: return(PORTCbits.RC0);
  9891  002924  B082               	btfsc	3970,0,c	;volatile
  9892  002926  0C01               	retlw	1
  9893  002928  0C00               	retlw	0	;funcret
  9894  00292A                     __end_of_read_bit:
  9895                           	opt stack 0
  9896                           tosu	equ	0xFFF
  9897                           tosh	equ	0xFFE
  9898                           tosl	equ	0xFFD
  9899                           pclath	equ	0xFFA
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           intcon	equ	0xFF2
  9907                           intcon2	equ	0xFF1
  9908                           postinc0	equ	0xFEE
  9909                           wreg	equ	0xFE8
  9910                           indf1	equ	0xFE7
  9911                           plusw1	equ	0xFE3
  9912                           fsr1h	equ	0xFE2
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           plusw2	equ	0xFDB
  9918                           fsr2h	equ	0xFDA
  9919                           fsr2l	equ	0xFD9
  9920                           status	equ	0xFD8
  9921                           
  9922 ;; *************** function _ow_reset *****************
  9923 ;; Defined at:
  9924 ;;		line 5 in file "onewire.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;		None
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  presence        1   15[COMRAM] unsigned char 
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  1    wreg      unsigned char 
  9931 ;; Registers used:
  9932 ;;		wreg, status,2
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9942 ;;Total ram usage:        2 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:    3
  9945 ;; This function calls:
  9946 ;;		Nothing
  9947 ;; This function is called by:
  9948 ;;		_init_ds18b20
  9949 ;;		_readTemp_Single
  9950 ;; This function uses a non-reentrant model
  9951 ;;
  9952                           
  9953                           	psect	text44
  9954  00243E                     __ptext44:
  9955                           	opt stack 0
  9956  00243E                     _ow_reset:
  9957                           	opt stack 25
  9958                           
  9959                           ;onewire.c: 7: uint8_t presence;
  9960                           ;onewire.c: 8: PORTCbits.RC0 = 0;
  9961                           
  9962                           ;incstack = 0
  9963  00243E  9082               	bcf	3970,0,c	;volatile
  9964                           
  9965                           ;onewire.c: 9: TRISCbits.RC0 = 0;
  9966  002440  9094               	bcf	3988,0,c	;volatile
  9967                           
  9968                           ;onewire.c: 10: _delay((unsigned long)((500)*(40000000/4000000.0)));
  9969  002442  0E07               	movlw	7
  9970  002444  6E0F               	movwf	??_ow_reset& (0+255),c
  9971  002446  0E7D               	movlw	125
  9972  002448                     u5357:
  9973  002448  2EE8               	decfsz	wreg,f,c
  9974  00244A  D7FE               	bra	u5357
  9975  00244C  2E0F               	decfsz	??_ow_reset& (0+255),f,c
  9976  00244E  D7FC               	bra	u5357
  9977  002450  F000               	nop	
  9978                           
  9979                           ;onewire.c: 11: PORTCbits.RC0 = 1;
  9980  002452  8082               	bsf	3970,0,c	;volatile
  9981                           
  9982                           ;onewire.c: 12: TRISCbits.RC0 = 1;
  9983  002454  8094               	bsf	3988,0,c	;volatile
  9984                           
  9985                           ;onewire.c: 13: _delay((unsigned long)((100)*(40000000/4000000.0)));
  9986  002456  0EC8               	movlw	200
  9987  002458                     u5367:
  9988  002458  D000               	nop2	
  9989  00245A  2EE8               	decfsz	wreg,f,c
  9990  00245C  D7FD               	bra	u5367
  9991                           
  9992                           ;onewire.c: 14: presence = PORTCbits.RC0;
  9993  00245E  0E00               	movlw	0
  9994  002460  B082               	btfsc	3970,0,c	;volatile
  9995  002462  0E01               	movlw	1
  9996  002464  6E10               	movwf	ow_reset@presence,c
  9997                           
  9998                           ;onewire.c: 15: _delay((unsigned long)((424)*(40000000/4000000.0)));
  9999  002466  0E06               	movlw	6
 10000  002468  6E0F               	movwf	??_ow_reset& (0+255),c
 10001  00246A  0E80               	movlw	128
 10002  00246C                     u5377:
 10003  00246C  2EE8               	decfsz	wreg,f,c
 10004  00246E  D7FE               	bra	u5377
 10005  002470  2E0F               	decfsz	??_ow_reset& (0+255),f,c
 10006  002472  D7FC               	bra	u5377
 10007  002474  D000               	nop2	
 10008                           
 10009                           ;onewire.c: 16: return(presence);
 10010  002476  5010               	movf	ow_reset@presence,w,c
 10011  002478  0012               	return		;funcret
 10012  00247A                     __end_of_ow_reset:
 10013                           	opt stack 0
 10014                           tosu	equ	0xFFF
 10015                           tosh	equ	0xFFE
 10016                           tosl	equ	0xFFD
 10017                           pclath	equ	0xFFA
 10018                           tblptru	equ	0xFF8
 10019                           tblptrh	equ	0xFF7
 10020                           tblptrl	equ	0xFF6
 10021                           tablat	equ	0xFF5
 10022                           prodh	equ	0xFF4
 10023                           prodl	equ	0xFF3
 10024                           intcon	equ	0xFF2
 10025                           intcon2	equ	0xFF1
 10026                           postinc0	equ	0xFEE
 10027                           wreg	equ	0xFE8
 10028                           indf1	equ	0xFE7
 10029                           plusw1	equ	0xFE3
 10030                           fsr1h	equ	0xFE2
 10031                           fsr1l	equ	0xFE1
 10032                           indf2	equ	0xFDF
 10033                           postinc2	equ	0xFDE
 10034                           postdec2	equ	0xFDD
 10035                           plusw2	equ	0xFDB
 10036                           fsr2h	equ	0xFDA
 10037                           fsr2l	equ	0xFD9
 10038                           status	equ	0xFD8
 10039                           
 10040 ;; *************** function _bmp280Convert *****************
 10041 ;; Defined at:
 10042 ;;		line 200 in file "BMP_280.c"
 10043 ;; Parameters:    Size  Location     Type
 10044 ;;  press           1   58[COMRAM] PTR long 
 10045 ;;		 -> press(4), 
 10046 ;;  temper          1   59[COMRAM] PTR long 
 10047 ;;		 -> temperbmp280(4), 
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;  var1            4   28[BANK0 ] long 
 10050 ;;  P               4   24[BANK0 ] unsigned long 
 10051 ;;  var2            4   20[BANK0 ] long 
 10052 ;;  adc_T           4   12[BANK0 ] long 
 10053 ;;  t_fine          4    8[BANK0 ] long 
 10054 ;;  T               4    4[BANK0 ] unsigned long 
 10055 ;;  adc_P           4    0[BANK0 ] long 
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  1    wreg      unsigned char 
 10058 ;; Registers used:
 10059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10066 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10067 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;      Totals:        21      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10069 ;;Total ram usage:       53 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    7
 10072 ;; This function calls:
 10073 ;;		___lldiv
 10074 ;;		___lmul
 10075 ;;		_bmp280ReadPressure
 10076 ;;		_bmp280ReadTemp
 10077 ;; This function is called by:
 10078 ;;		_time_led
 10079 ;; This function uses a non-reentrant model
 10080 ;;
 10081                           
 10082                           	psect	text45
 10083  000012                     __ptext45:
 10084                           	opt stack 0
 10085  000012                     _bmp280Convert:
 10086                           	opt stack 21
 10087                           
 10088                           ;BMP_280.c: 201: int32_t adc_T;
 10089                           ;BMP_280.c: 202: int32_t adc_P;
 10090                           ;BMP_280.c: 207: int32_t var1, var2, t_fine;
 10091                           ;BMP_280.c: 208: uint32_t T, P;
 10092                           ;BMP_280.c: 212: adc_T = bmp280ReadTemp();
 10093                           
 10094                           ;incstack = 0
 10095  000012  EC67  F013         	call	_bmp280ReadTemp	;wreg free
 10096  000016  C033  F0E5         	movff	?_bmp280ReadTemp,bmp280Convert@adc_T
 10097  00001A  C034  F0E6         	movff	?_bmp280ReadTemp+1,bmp280Convert@adc_T+1
 10098  00001E  C035  F0E7         	movff	?_bmp280ReadTemp+2,bmp280Convert@adc_T+2
 10099  000022  C036  F0E8         	movff	?_bmp280ReadTemp+3,bmp280Convert@adc_T+3
 10100                           
 10101                           ;BMP_280.c: 213: adc_P = bmp280ReadPressure();
 10102  000026  EC7B  F013         	call	_bmp280ReadPressure	;wreg free
 10103  00002A  C033  F0D9         	movff	?_bmp280ReadPressure,bmp280Convert@adc_P
 10104  00002E  C034  F0DA         	movff	?_bmp280ReadPressure+1,bmp280Convert@adc_P+1
 10105  000032  C035  F0DB         	movff	?_bmp280ReadPressure+2,bmp280Convert@adc_P+2
 10106  000036  C036  F0DC         	movff	?_bmp280ReadPressure+3,bmp280Convert@adc_P+3
 10107                           
 10108                           ;BMP_280.c: 215: var1 = ((((adc_T >> 3) - ((int32_t) dig_T1 << 1))) * ((int32_t) dig_T2)
      +                          ) >> 11;
 10109  00003A  0E0B               	movlw	11
 10110  00003C  DB81               	call	PL72	;call to abstracted procedure
 10111  00003E  90D8               	bcf	status,0,c
 10112  000040  343E               	rlcf	??_bmp280Convert+1,w,c
 10113  000042  6E42               	movwf	(??_bmp280Convert+5)& (0+255),c
 10114  000044  343F               	rlcf	??_bmp280Convert+2,w,c
 10115  000046  6E43               	movwf	(??_bmp280Convert+6)& (0+255),c
 10116  000048  3440               	rlcf	??_bmp280Convert+3,w,c
 10117  00004A  6E44               	movwf	(??_bmp280Convert+7)& (0+255),c
 10118  00004C  3441               	rlcf	??_bmp280Convert+4,w,c
 10119  00004E  6E45               	movwf	(??_bmp280Convert+8)& (0+255),c
 10120  000050  0E03               	movlw	3
 10121  000052  6E46               	movwf	(??_bmp280Convert+9)& (0+255),c
 10122  000054  C0E5  F047         	movff	bmp280Convert@adc_T,??_bmp280Convert+10
 10123  000058  C0E6  F048         	movff	bmp280Convert@adc_T+1,??_bmp280Convert+11
 10124  00005C  C0E7  F049         	movff	bmp280Convert@adc_T+2,??_bmp280Convert+12
 10125  000060  C0E8  F04A         	movff	bmp280Convert@adc_T+3,??_bmp280Convert+13
 10126  000064                     u4355:
 10127  000064  6646               	tstfsz	??_bmp280Convert+9,c
 10128  000066  D001               	goto	u4356
 10129  000068  D007               	goto	u4357
 10130  00006A                     u4356:
 10131  00006A  344A               	rlcf	??_bmp280Convert+13,w,c
 10132  00006C  324A               	rrcf	??_bmp280Convert+13,f,c
 10133  00006E  3249               	rrcf	??_bmp280Convert+12,f,c
 10134  000070  3248               	rrcf	??_bmp280Convert+11,f,c
 10135  000072  3247               	rrcf	??_bmp280Convert+10,f,c
 10136  000074  2E46               	decfsz	??_bmp280Convert+9,f,c
 10137  000076  D7F6               	goto	u4355
 10138  000078                     u4357:
 10139  000078  5042               	movf	??_bmp280Convert+5,w,c
 10140  00007A  5C47               	subwf	??_bmp280Convert+10,w,c
 10141  00007C  6E0F               	movwf	___lmul@multiplier,c
 10142  00007E  5043               	movf	??_bmp280Convert+6,w,c
 10143  000080  5848               	subwfb	??_bmp280Convert+11,w,c
 10144  000082  6E10               	movwf	___lmul@multiplier+1,c
 10145  000084  5044               	movf	??_bmp280Convert+7,w,c
 10146  000086  5849               	subwfb	??_bmp280Convert+12,w,c
 10147  000088  6E11               	movwf	___lmul@multiplier+2,c
 10148  00008A  5045               	movf	??_bmp280Convert+8,w,c
 10149  00008C  584A               	subwfb	??_bmp280Convert+13,w,c
 10150  00008E  6E12               	movwf	___lmul@multiplier+3,c
 10151  000090  C09B  F013         	movff	_dig_T2,___lmul@multiplicand
 10152  000094  C09C  F014         	movff	_dig_T2+1,___lmul@multiplicand+1
 10153  000098  DB4D               	call	PL66	;call to abstracted procedure
 10154  00009A  EC6B  F011         	call	___lmul	;wreg free
 10155  00009E                     u4365:
 10156  00009E  663D               	tstfsz	??_bmp280Convert,c
 10157  0000A0  D001               	goto	u4366
 10158  0000A2  D003               	goto	u4367
 10159  0000A4                     u4366:
 10160  0000A4  DB0B               	call	PL36	;call to abstracted procedure
 10161  0000A6  2E3D               	decfsz	??_bmp280Convert,f,c
 10162  0000A8  D7FA               	goto	u4365
 10163  0000AA                     u4367:
 10164  0000AA  DB17               	call	PL50	;call to abstracted procedure
 10165                           
 10166                           ;BMP_280.c: 219: var2 = (((((adc_T >> 4) - ((int32_t) dig_T1)) * ((adc_T >> 4) - ((int32
      +                          _t) dig_T1))) >> 12) * ((int32_t) dig_T3)) >> 14;
 10167  0000AC  0E0C               	movlw	12
 10168  0000AE  DB48               	call	PL72	;call to abstracted procedure
 10169  0000B0  0E04               	movlw	4
 10170  0000B2  6E42               	movwf	(??_bmp280Convert+5)& (0+255),c
 10171  0000B4  C0E5  F043         	movff	bmp280Convert@adc_T,??_bmp280Convert+6
 10172  0000B8  C0E6  F044         	movff	bmp280Convert@adc_T+1,??_bmp280Convert+7
 10173  0000BC  C0E7  F045         	movff	bmp280Convert@adc_T+2,??_bmp280Convert+8
 10174  0000C0  C0E8  F046         	movff	bmp280Convert@adc_T+3,??_bmp280Convert+9
 10175  0000C4                     u4375:
 10176  0000C4  6642               	tstfsz	??_bmp280Convert+5,c
 10177  0000C6  D001               	goto	u4376
 10178  0000C8  D003               	goto	u4377
 10179  0000CA                     u4376:
 10180  0000CA  DB55               	call	PL98	;call to abstracted procedure
 10181  0000CC  2E42               	decfsz	??_bmp280Convert+5,f,c
 10182  0000CE  D7FA               	goto	u4375
 10183  0000D0                     u4377:
 10184  0000D0  503E               	movf	??_bmp280Convert+1,w,c
 10185  0000D2  5C43               	subwf	??_bmp280Convert+6,w,c
 10186  0000D4  6E0F               	movwf	___lmul@multiplier,c
 10187  0000D6  503F               	movf	??_bmp280Convert+2,w,c
 10188  0000D8  5844               	subwfb	??_bmp280Convert+7,w,c
 10189  0000DA  6E10               	movwf	___lmul@multiplier+1,c
 10190  0000DC  5040               	movf	??_bmp280Convert+3,w,c
 10191  0000DE  5845               	subwfb	??_bmp280Convert+8,w,c
 10192  0000E0  6E11               	movwf	___lmul@multiplier+2,c
 10193  0000E2  5041               	movf	??_bmp280Convert+4,w,c
 10194  0000E4  5846               	subwfb	??_bmp280Convert+9,w,c
 10195  0000E6  6E12               	movwf	___lmul@multiplier+3,c
 10196  0000E8  0100               	movlb	0	; () banked
 10197  0000EA  519D               	movf	_dig_T1& (0+255),w,b
 10198  0000EC  6E47               	movwf	(??_bmp280Convert+10)& (0+255),c
 10199  0000EE  519E               	movf	(_dig_T1+1)& (0+255),w,b
 10200  0000F0  6E48               	movwf	(??_bmp280Convert+11)& (0+255),c
 10201  0000F2  6A49               	clrf	(??_bmp280Convert+12)& (0+255),c
 10202  0000F4  6A4A               	clrf	(??_bmp280Convert+13)& (0+255),c
 10203  0000F6  0E04               	movlw	4
 10204  0000F8  6E4B               	movwf	(??_bmp280Convert+14)& (0+255),c
 10205  0000FA  C0E5  F04C         	movff	bmp280Convert@adc_T,??_bmp280Convert+15
 10206  0000FE  C0E6  F04D         	movff	bmp280Convert@adc_T+1,??_bmp280Convert+16
 10207  000102  C0E7  F04E         	movff	bmp280Convert@adc_T+2,??_bmp280Convert+17
 10208  000106  C0E8  F04F         	movff	bmp280Convert@adc_T+3,??_bmp280Convert+18
 10209  00010A                     u4385:
 10210  00010A  664B               	tstfsz	??_bmp280Convert+14,c
 10211  00010C  D001               	goto	u4386
 10212  00010E  D007               	goto	u4387
 10213  000110                     u4386:
 10214  000110  344F               	rlcf	??_bmp280Convert+18,w,c
 10215  000112  324F               	rrcf	??_bmp280Convert+18,f,c
 10216  000114  324E               	rrcf	??_bmp280Convert+17,f,c
 10217  000116  324D               	rrcf	??_bmp280Convert+16,f,c
 10218  000118  324C               	rrcf	??_bmp280Convert+15,f,c
 10219  00011A  2E4B               	decfsz	??_bmp280Convert+14,f,c
 10220  00011C  D7F6               	goto	u4385
 10221  00011E                     u4387:
 10222  00011E  5047               	movf	??_bmp280Convert+10,w,c
 10223  000120  5C4C               	subwf	??_bmp280Convert+15,w,c
 10224  000122  6E13               	movwf	___lmul@multiplicand,c
 10225  000124  5048               	movf	??_bmp280Convert+11,w,c
 10226  000126  584D               	subwfb	??_bmp280Convert+16,w,c
 10227  000128  6E14               	movwf	___lmul@multiplicand+1,c
 10228  00012A  5049               	movf	??_bmp280Convert+12,w,c
 10229  00012C  584E               	subwfb	??_bmp280Convert+17,w,c
 10230  00012E  6E15               	movwf	___lmul@multiplicand+2,c
 10231  000130  504A               	movf	??_bmp280Convert+13,w,c
 10232  000132  584F               	subwfb	??_bmp280Convert+18,w,c
 10233  000134  6E16               	movwf	___lmul@multiplicand+3,c
 10234  000136  EC6B  F011         	call	___lmul	;wreg free
 10235  00013A                     u4395:
 10236  00013A  663D               	tstfsz	??_bmp280Convert,c
 10237  00013C  D001               	goto	u4396
 10238  00013E  D003               	goto	u4397
 10239  000140                     u4396:
 10240  000140  DABD               	call	PL36	;call to abstracted procedure
 10241  000142  2E3D               	decfsz	??_bmp280Convert,f,c
 10242  000144  D7FA               	goto	u4395
 10243  000146                     u4397:
 10244  000146  DAC0               	call	PL40	;call to abstracted procedure
 10245                           
 10246                           ;BMP_280.c: 219: var2 = (((((adc_T >> 4) - ((int32_t) dig_T1)) * ((adc_T >> 4) - ((int32
      +                          _t) dig_T1))) >> 12) * ((int32_t) dig_T3)) >> 14;
 10247  000148  0E0E               	movlw	14
 10248  00014A  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10249  00014C  DB0B               	call	PL76	;call to abstracted procedure
 10250  00014E  C099  F013         	movff	_dig_T3,___lmul@multiplicand
 10251  000152  C09A  F014         	movff	_dig_T3+1,___lmul@multiplicand+1
 10252  000156  DAEE               	call	PL66	;call to abstracted procedure
 10253  000158  EC6B  F011         	call	___lmul	;wreg free
 10254  00015C                     u4405:
 10255  00015C  663D               	tstfsz	??_bmp280Convert,c
 10256  00015E  D001               	goto	u4406
 10257  000160  D003               	goto	u4407
 10258  000162                     u4406:
 10259  000162  DAAC               	call	PL36	;call to abstracted procedure
 10260  000164  2E3D               	decfsz	??_bmp280Convert,f,c
 10261  000166  D7FA               	goto	u4405
 10262  000168                     u4407:
 10263  000168  DAC1               	call	PL52	;call to abstracted procedure
 10264                           
 10265                           ;BMP_280.c: 223: t_fine = var1 + var2;
 10266  00016A  0100               	movlb	0	; () banked
 10267  00016C  51ED               	movf	bmp280Convert@var2& (0+255),w,b
 10268  00016E  25F5               	addwf	bmp280Convert@var1& (0+255),w,b
 10269  000170  6FE1               	movwf	bmp280Convert@t_fine& (0+255),b
 10270  000172  51EE               	movf	(bmp280Convert@var2+1)& (0+255),w,b
 10271  000174  21F6               	addwfc	(bmp280Convert@var1+1)& (0+255),w,b
 10272  000176  6FE2               	movwf	(bmp280Convert@t_fine+1)& (0+255),b
 10273  000178  51EF               	movf	(bmp280Convert@var2+2)& (0+255),w,b
 10274  00017A  21F7               	addwfc	(bmp280Convert@var1+2)& (0+255),w,b
 10275  00017C  6FE3               	movwf	(bmp280Convert@t_fine+2)& (0+255),b
 10276  00017E  51F0               	movf	(bmp280Convert@var2+3)& (0+255),w,b
 10277  000180  21F8               	addwfc	(bmp280Convert@var1+3)& (0+255),w,b
 10278  000182  6FE4               	movwf	(bmp280Convert@t_fine+3)& (0+255),b
 10279                           
 10280                           ; BSR set to: 0
 10281                           ;BMP_280.c: 224: T = (t_fine * 5 + 128) >> 8;
 10282  000184  C0E1  F00F         	movff	bmp280Convert@t_fine,___lmul@multiplier
 10283  000188  C0E2  F010         	movff	bmp280Convert@t_fine+1,___lmul@multiplier+1
 10284  00018C  C0E3  F011         	movff	bmp280Convert@t_fine+2,___lmul@multiplier+2
 10285  000190  C0E4  F012         	movff	bmp280Convert@t_fine+3,___lmul@multiplier+3
 10286  000194  0E05               	movlw	5
 10287  000196  DAFA               	call	PL118	;call to abstracted procedure
 10288  000198  EC6B  F011         	call	___lmul	;wreg free
 10289  00019C  0E80               	movlw	128
 10290  00019E  240F               	addwf	?___lmul,w,c
 10291  0001A0  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10292  0001A2  0E00               	movlw	0
 10293  0001A4  2010               	addwfc	?___lmul+1,w,c
 10294  0001A6  6E3E               	movwf	(??_bmp280Convert+1)& (0+255),c
 10295  0001A8  0E00               	movlw	0
 10296  0001AA  2011               	addwfc	?___lmul+2,w,c
 10297  0001AC  6E3F               	movwf	(??_bmp280Convert+2)& (0+255),c
 10298  0001AE  0E00               	movlw	0
 10299  0001B0  2012               	addwfc	?___lmul+3,w,c
 10300  0001B2  6E40               	movwf	(??_bmp280Convert+3)& (0+255),c
 10301  0001B4  C03E  F03D         	movff	??_bmp280Convert+1,??_bmp280Convert
 10302  0001B8  C03F  F03E         	movff	??_bmp280Convert+2,??_bmp280Convert+1
 10303  0001BC  C040  F03F         	movff	??_bmp280Convert+3,??_bmp280Convert+2
 10304  0001C0  6A40               	clrf	??_bmp280Convert+3,c
 10305  0001C2  BE3F               	btfsc	??_bmp280Convert+2,7,c
 10306  0001C4  6840               	setf	??_bmp280Convert+3,c
 10307  0001C6  C03D  F0DD         	movff	??_bmp280Convert,bmp280Convert@T
 10308  0001CA  C03E  F0DE         	movff	??_bmp280Convert+1,bmp280Convert@T+1
 10309  0001CE  C03F  F0DF         	movff	??_bmp280Convert+2,bmp280Convert@T+2
 10310  0001D2  C040  F0E0         	movff	??_bmp280Convert+3,bmp280Convert@T+3
 10311                           
 10312                           ;BMP_280.c: 228: *temper = T;
 10313  0001D6  503C               	movf	bmp280Convert@temper,w,c
 10314  0001D8  6ED9               	movwf	fsr2l,c
 10315  0001DA  6ADA               	clrf	fsr2h,c
 10316  0001DC  C0DD  FFDE         	movff	bmp280Convert@T,postinc2
 10317  0001E0  C0DE  FFDE         	movff	bmp280Convert@T+1,postinc2
 10318  0001E4  C0DF  FFDE         	movff	bmp280Convert@T+2,postinc2
 10319  0001E8  C0E0  FFDE         	movff	bmp280Convert@T+3,postinc2
 10320                           
 10321                           ;BMP_280.c: 230: var1 = (((int32_t) t_fine) >> 1) - (int32_t) 64000;
 10322  0001EC  C0E1  F03D         	movff	bmp280Convert@t_fine,??_bmp280Convert
 10323  0001F0  C0E2  F03E         	movff	bmp280Convert@t_fine+1,??_bmp280Convert+1
 10324  0001F4  C0E3  F03F         	movff	bmp280Convert@t_fine+2,??_bmp280Convert+2
 10325  0001F8  C0E4  F040         	movff	bmp280Convert@t_fine+3,??_bmp280Convert+3
 10326  0001FC  3440               	rlcf	??_bmp280Convert+3,w,c
 10327  0001FE  DACB               	call	PL150	;call to abstracted procedure
 10328  000200  0E00               	movlw	0
 10329  000202  243D               	addwf	??_bmp280Convert,w,c
 10330  000204  0100               	movlb	0	; () banked
 10331  000206  6FF5               	movwf	bmp280Convert@var1& (0+255),b
 10332  000208  0E06               	movlw	6
 10333  00020A  203E               	addwfc	??_bmp280Convert+1,w,c
 10334  00020C  6FF6               	movwf	(bmp280Convert@var1+1)& (0+255),b
 10335  00020E  0EFF               	movlw	255
 10336  000210  203F               	addwfc	??_bmp280Convert+2,w,c
 10337  000212  6FF7               	movwf	(bmp280Convert@var1+2)& (0+255),b
 10338  000214  0EFF               	movlw	255
 10339  000216  2040               	addwfc	??_bmp280Convert+3,w,c
 10340  000218  6FF8               	movwf	(bmp280Convert@var1+3)& (0+255),b
 10341                           
 10342                           ; BSR set to: 0
 10343                           ;BMP_280.c: 234: var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t) dig_P6);
 10344  00021A  0E0B               	movlw	11
 10345  00021C  DA15               	call	PL12	;call to abstracted procedure
 10346  00021E  EC6B  F011         	call	___lmul	;wreg free
 10347  000222                     u4435:
 10348  000222  663D               	tstfsz	??_bmp280Convert,c
 10349  000224  D001               	goto	u4436
 10350  000226  D003               	goto	u4437
 10351  000228                     u4436:
 10352  000228  DA49               	call	PL36	;call to abstracted procedure
 10353  00022A  2E3D               	decfsz	??_bmp280Convert,f,c
 10354  00022C  D7FA               	goto	u4435
 10355  00022E                     u4437:
 10356  00022E  DA4C               	call	PL40	;call to abstracted procedure
 10357                           
 10358                           ;BMP_280.c: 234: var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t) dig_P6);
 10359  000230  DA99               	call	PL76	;call to abstracted procedure
 10360  000232  C08F  F013         	movff	_dig_P6,___lmul@multiplicand
 10361  000236  C090  F014         	movff	_dig_P6+1,___lmul@multiplicand+1
 10362  00023A  DA7C               	call	PL66	;call to abstracted procedure
 10363  00023C  EC6B  F011         	call	___lmul	;wreg free
 10364  000240  DA55               	call	PL52	;call to abstracted procedure
 10365                           
 10366                           ;BMP_280.c: 238: var2 = var2 + ((var1 * ((int32_t) dig_P5)) << 1);
 10367  000242  C091  F00F         	movff	_dig_P5,___lmul@multiplier
 10368  000246  C092  F010         	movff	_dig_P5+1,___lmul@multiplier+1
 10369  00024A  DA59               	call	PL56	;call to abstracted procedure
 10370  00024C  EC6B  F011         	call	___lmul	;wreg free
 10371  000250  90D8               	bcf	status,0,c
 10372  000252  340F               	rlcf	?___lmul,w,c
 10373  000254  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10374  000256  3410               	rlcf	?___lmul+1,w,c
 10375  000258  6E3E               	movwf	(??_bmp280Convert+1)& (0+255),c
 10376  00025A  3411               	rlcf	?___lmul+2,w,c
 10377  00025C  6E3F               	movwf	(??_bmp280Convert+2)& (0+255),c
 10378  00025E  3412               	rlcf	?___lmul+3,w,c
 10379  000260  6E40               	movwf	(??_bmp280Convert+3)& (0+255),c
 10380  000262  503D               	movf	??_bmp280Convert,w,c
 10381  000264  0100               	movlb	0	; () banked
 10382  000266  27ED               	addwf	bmp280Convert@var2& (0+255),f,b
 10383  000268  503E               	movf	??_bmp280Convert+1,w,c
 10384  00026A  23EE               	addwfc	(bmp280Convert@var2+1)& (0+255),f,b
 10385  00026C  503F               	movf	??_bmp280Convert+2,w,c
 10386  00026E  23EF               	addwfc	(bmp280Convert@var2+2)& (0+255),f,b
 10387  000270  5040               	movf	??_bmp280Convert+3,w,c
 10388  000272  23F0               	addwfc	(bmp280Convert@var2+3)& (0+255),f,b
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;BMP_280.c: 242: var2 = (var2 >> 2)+(((int32_t) dig_P4) << 16);
 10392  000274  5193               	movf	_dig_P4& (0+255),w,b
 10393  000276  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10394  000278  5194               	movf	(_dig_P4+1)& (0+255),w,b
 10395  00027A  6E3E               	movwf	(??_bmp280Convert+1)& (0+255),c
 10396  00027C  6A3F               	clrf	(??_bmp280Convert+2)& (0+255),c
 10397  00027E  6A40               	clrf	(??_bmp280Convert+3)& (0+255),c
 10398  000280  C03E  F040         	movff	??_bmp280Convert+1,??_bmp280Convert+3
 10399  000284  C03D  F03F         	movff	??_bmp280Convert,??_bmp280Convert+2
 10400  000288  6A3E               	clrf	??_bmp280Convert+1,c
 10401  00028A  6A3D               	clrf	??_bmp280Convert,c
 10402  00028C  0E02               	movlw	2
 10403  00028E  6E41               	movwf	(??_bmp280Convert+4)& (0+255),c
 10404  000290  C0ED  F042         	movff	bmp280Convert@var2,??_bmp280Convert+5
 10405  000294  C0EE  F043         	movff	bmp280Convert@var2+1,??_bmp280Convert+6
 10406  000298  C0EF  F044         	movff	bmp280Convert@var2+2,??_bmp280Convert+7
 10407  00029C  C0F0  F045         	movff	bmp280Convert@var2+3,??_bmp280Convert+8
 10408  0002A0                     u4445:
 10409  0002A0  6641               	tstfsz	??_bmp280Convert+4,c
 10410  0002A2  D001               	goto	u4446
 10411  0002A4  D007               	goto	u4447
 10412  0002A6                     u4446:
 10413  0002A6  3445               	rlcf	??_bmp280Convert+8,w,c
 10414  0002A8  3245               	rrcf	??_bmp280Convert+8,f,c
 10415  0002AA  3244               	rrcf	??_bmp280Convert+7,f,c
 10416  0002AC  3243               	rrcf	??_bmp280Convert+6,f,c
 10417  0002AE  3242               	rrcf	??_bmp280Convert+5,f,c
 10418  0002B0  2E41               	decfsz	??_bmp280Convert+4,f,c
 10419  0002B2  D7F6               	goto	u4445
 10420  0002B4                     u4447:
 10421  0002B4  503D               	movf	??_bmp280Convert,w,c
 10422  0002B6  2442               	addwf	??_bmp280Convert+5,w,c
 10423  0002B8  0100               	movlb	0	; () banked
 10424  0002BA  6FED               	movwf	bmp280Convert@var2& (0+255),b
 10425  0002BC  503E               	movf	??_bmp280Convert+1,w,c
 10426  0002BE  2043               	addwfc	??_bmp280Convert+6,w,c
 10427  0002C0  6FEE               	movwf	(bmp280Convert@var2+1)& (0+255),b
 10428  0002C2  503F               	movf	??_bmp280Convert+2,w,c
 10429  0002C4  2044               	addwfc	??_bmp280Convert+7,w,c
 10430  0002C6  6FEF               	movwf	(bmp280Convert@var2+2)& (0+255),b
 10431  0002C8  5040               	movf	??_bmp280Convert+3,w,c
 10432  0002CA  2045               	addwfc	??_bmp280Convert+8,w,c
 10433  0002CC  6FF0               	movwf	(bmp280Convert@var2+3)& (0+255),b
 10434                           
 10435                           ; BSR set to: 0
 10436                           ;BMP_280.c: 246: var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int
      +                          32_t) dig_P2) * var1) >> 1)) >> 18;
 10437  0002CE  0E0D               	movlw	13
 10438  0002D0  D9BB               	call	PL12	;call to abstracted procedure
 10439  0002D2  EC6B  F011         	call	___lmul	;wreg free
 10440  0002D6                     u4475:
 10441  0002D6  663D               	tstfsz	??_bmp280Convert,c
 10442  0002D8  D001               	goto	u4476
 10443  0002DA  D003               	goto	u4477
 10444  0002DC                     u4476:
 10445  0002DC  D9EF               	call	PL36	;call to abstracted procedure
 10446  0002DE  2E3D               	decfsz	??_bmp280Convert,f,c
 10447  0002E0  D7FA               	goto	u4475
 10448  0002E2                     u4477:
 10449  0002E2  D9F2               	call	PL40	;call to abstracted procedure
 10450                           
 10451                           ;BMP_280.c: 246: var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int
      +                          32_t) dig_P2) * var1) >> 1)) >> 18;
 10452  0002E4  0E12               	movlw	18
 10453  0002E6  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10454  0002E8  0E03               	movlw	3
 10455  0002EA  6E3E               	movwf	(??_bmp280Convert+1)& (0+255),c
 10456  0002EC  C095  F00F         	movff	_dig_P3,___lmul@multiplier
 10457  0002F0  C096  F010         	movff	_dig_P3+1,___lmul@multiplier+1
 10458  0002F4  0E00               	movlw	0
 10459  0002F6  DA11               	call	PL60	;call to abstracted procedure
 10460  0002F8  EC6B  F011         	call	___lmul	;wreg free
 10461  0002FC  C00F  F03F         	movff	?___lmul,??_bmp280Convert+2
 10462  000300  C010  F040         	movff	?___lmul+1,??_bmp280Convert+3
 10463  000304  C011  F041         	movff	?___lmul+2,??_bmp280Convert+4
 10464  000308  C012  F042         	movff	?___lmul+3,??_bmp280Convert+5
 10465  00030C                     u4485:
 10466  00030C  663E               	tstfsz	??_bmp280Convert+1,c
 10467  00030E  D001               	goto	u4486
 10468  000310  D007               	goto	u4487
 10469  000312                     u4486:
 10470  000312  3442               	rlcf	??_bmp280Convert+5,w,c
 10471  000314  3242               	rrcf	??_bmp280Convert+5,f,c
 10472  000316  3241               	rrcf	??_bmp280Convert+4,f,c
 10473  000318  3240               	rrcf	??_bmp280Convert+3,f,c
 10474  00031A  323F               	rrcf	??_bmp280Convert+2,f,c
 10475  00031C  2E3E               	decfsz	??_bmp280Convert+1,f,c
 10476  00031E  D7F6               	goto	u4485
 10477  000320                     u4487:
 10478  000320  C097  F00F         	movff	_dig_P2,___lmul@multiplier
 10479  000324  C098  F010         	movff	_dig_P2+1,___lmul@multiplier+1
 10480  000328  D9EA               	call	PL56	;call to abstracted procedure
 10481  00032A  EC6B  F011         	call	___lmul	;wreg free
 10482  00032E  D9C6               	call	PL36	;call to abstracted procedure
 10483  000330  500F               	movf	?___lmul,w,c
 10484  000332  243F               	addwf	??_bmp280Convert+2,w,c
 10485  000334  6E43               	movwf	(??_bmp280Convert+6)& (0+255),c
 10486  000336  5010               	movf	?___lmul+1,w,c
 10487  000338  2040               	addwfc	??_bmp280Convert+3,w,c
 10488  00033A  6E44               	movwf	(??_bmp280Convert+7)& (0+255),c
 10489  00033C  5011               	movf	?___lmul+2,w,c
 10490  00033E  2041               	addwfc	??_bmp280Convert+4,w,c
 10491  000340  6E45               	movwf	(??_bmp280Convert+8)& (0+255),c
 10492  000342  5012               	movf	?___lmul+3,w,c
 10493  000344  2042               	addwfc	??_bmp280Convert+5,w,c
 10494  000346  6E46               	movwf	(??_bmp280Convert+9)& (0+255),c
 10495  000348                     u4495:
 10496  000348  663D               	tstfsz	??_bmp280Convert,c
 10497  00034A  D001               	goto	u4496
 10498  00034C  D003               	goto	u4497
 10499  00034E                     u4496:
 10500  00034E  DA13               	call	PL98	;call to abstracted procedure
 10501  000350  2E3D               	decfsz	??_bmp280Convert,f,c
 10502  000352  D7FA               	goto	u4495
 10503  000354                     u4497:
 10504  000354  C043  F0F5         	movff	??_bmp280Convert+6,bmp280Convert@var1
 10505  000358  C044  F0F6         	movff	??_bmp280Convert+7,bmp280Convert@var1+1
 10506  00035C  C045  F0F7         	movff	??_bmp280Convert+8,bmp280Convert@var1+2
 10507  000360  C046  F0F8         	movff	??_bmp280Convert+9,bmp280Convert@var1+3
 10508                           
 10509                           ;BMP_280.c: 250: var1 = ((((32768 + var1))*((int32_t) dig_P1)) >> 15);
 10510  000364  0E0F               	movlw	15
 10511  000366  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10512  000368  0E00               	movlw	0
 10513  00036A  0100               	movlb	0	; () banked
 10514  00036C  25F5               	addwf	bmp280Convert@var1& (0+255),w,b
 10515  00036E  6E0F               	movwf	___lmul@multiplier,c
 10516  000370  0E80               	movlw	128
 10517  000372  21F6               	addwfc	(bmp280Convert@var1+1)& (0+255),w,b
 10518  000374  6E10               	movwf	___lmul@multiplier+1,c
 10519  000376  0E00               	movlw	0
 10520  000378  21F7               	addwfc	(bmp280Convert@var1+2)& (0+255),w,b
 10521  00037A  6E11               	movwf	___lmul@multiplier+2,c
 10522  00037C  0E00               	movlw	0
 10523  00037E  21F8               	addwfc	(bmp280Convert@var1+3)& (0+255),w,b
 10524  000380  6E12               	movwf	___lmul@multiplier+3,c
 10525  000382  C0D3  F013         	movff	_dig_P1,___lmul@multiplicand
 10526  000386  C0D4  F014         	movff	_dig_P1+1,___lmul@multiplicand+1
 10527  00038A  6A15               	clrf	___lmul@multiplicand+2,c
 10528  00038C  6A16               	clrf	___lmul@multiplicand+3,c
 10529  00038E  EC6B  F011         	call	___lmul	;wreg free
 10530  000392                     u4505:
 10531  000392  663D               	tstfsz	??_bmp280Convert,c
 10532  000394  D001               	goto	u4506
 10533  000396  D003               	goto	u4507
 10534  000398                     u4506:
 10535  000398  D991               	call	PL36	;call to abstracted procedure
 10536  00039A  2E3D               	decfsz	??_bmp280Convert,f,c
 10537  00039C  D7FA               	goto	u4505
 10538  00039E                     u4507:
 10539  00039E  D99D               	call	PL50	;call to abstracted procedure
 10540                           
 10541                           ;BMP_280.c: 254: if (var1 == 0) {
 10542  0003A0  0100               	movlb	0	; () banked
 10543  0003A2  51F5               	movf	bmp280Convert@var1& (0+255),w,b
 10544  0003A4  11F6               	iorwf	(bmp280Convert@var1+1)& (0+255),w,b
 10545  0003A6  11F7               	iorwf	(bmp280Convert@var1+2)& (0+255),w,b
 10546  0003A8  11F8               	iorwf	(bmp280Convert@var1+3)& (0+255),w,b
 10547  0003AA  E101               	bnz	l6066
 10548  0003AC  0012               	return	
 10549  0003AE                     l6066:
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;BMP_280.c: 256: }
 10553                           ;BMP_280.c: 257: P = (((uint32_t) (((int32_t) 1048576) - adc_P) - (var2 >> 12)))*3125;
 10554  0003AE  0E0C               	movlw	12
 10555  0003B0  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10556  0003B2  C0ED  F03E         	movff	bmp280Convert@var2,??_bmp280Convert+1
 10557  0003B6  C0EE  F03F         	movff	bmp280Convert@var2+1,??_bmp280Convert+2
 10558  0003BA  C0EF  F040         	movff	bmp280Convert@var2+2,??_bmp280Convert+3
 10559  0003BE  C0F0  F041         	movff	bmp280Convert@var2+3,??_bmp280Convert+4
 10560  0003C2                     u4525:
 10561  0003C2  663D               	tstfsz	??_bmp280Convert,c
 10562  0003C4  D001               	goto	u4526
 10563  0003C6  D004               	goto	u4527
 10564  0003C8                     u4526:
 10565  0003C8  3441               	rlcf	??_bmp280Convert+4,w,c
 10566  0003CA  D9DB               	call	PL114	;call to abstracted procedure
 10567  0003CC  2E3D               	decfsz	??_bmp280Convert,f,c
 10568  0003CE  D7F9               	goto	u4525
 10569  0003D0                     u4527:
 10570  0003D0  C0D9  F042         	movff	bmp280Convert@adc_P,??_bmp280Convert+5
 10571  0003D4  C0DA  F043         	movff	bmp280Convert@adc_P+1,??_bmp280Convert+6
 10572  0003D8  C0DB  F044         	movff	bmp280Convert@adc_P+2,??_bmp280Convert+7
 10573  0003DC  C0DC  F045         	movff	bmp280Convert@adc_P+3,??_bmp280Convert+8
 10574  0003E0  1E42               	comf	??_bmp280Convert+5,f,c
 10575  0003E2  1E43               	comf	??_bmp280Convert+6,f,c
 10576  0003E4  1E44               	comf	??_bmp280Convert+7,f,c
 10577  0003E6  1E45               	comf	??_bmp280Convert+8,f,c
 10578  0003E8  2A42               	incf	??_bmp280Convert+5,f,c
 10579  0003EA  0E00               	movlw	0
 10580  0003EC  2243               	addwfc	??_bmp280Convert+6,f,c
 10581  0003EE  2244               	addwfc	??_bmp280Convert+7,f,c
 10582  0003F0  2245               	addwfc	??_bmp280Convert+8,f,c
 10583  0003F2  503E               	movf	??_bmp280Convert+1,w,c
 10584  0003F4  5C42               	subwf	??_bmp280Convert+5,w,c
 10585  0003F6  6E46               	movwf	(??_bmp280Convert+9)& (0+255),c
 10586  0003F8  503F               	movf	??_bmp280Convert+2,w,c
 10587  0003FA  5843               	subwfb	??_bmp280Convert+6,w,c
 10588  0003FC  6E47               	movwf	(??_bmp280Convert+10)& (0+255),c
 10589  0003FE  5040               	movf	??_bmp280Convert+3,w,c
 10590  000400  5844               	subwfb	??_bmp280Convert+7,w,c
 10591  000402  6E48               	movwf	(??_bmp280Convert+11)& (0+255),c
 10592  000404  5041               	movf	??_bmp280Convert+4,w,c
 10593  000406  5845               	subwfb	??_bmp280Convert+8,w,c
 10594  000408  6E49               	movwf	(??_bmp280Convert+12)& (0+255),c
 10595  00040A  0E00               	movlw	0
 10596  00040C  2446               	addwf	??_bmp280Convert+9,w,c
 10597  00040E  6E0F               	movwf	___lmul@multiplier,c
 10598  000410  0E00               	movlw	0
 10599  000412  2047               	addwfc	??_bmp280Convert+10,w,c
 10600  000414  6E10               	movwf	___lmul@multiplier+1,c
 10601  000416  0E10               	movlw	16
 10602  000418  2048               	addwfc	??_bmp280Convert+11,w,c
 10603  00041A  6E11               	movwf	___lmul@multiplier+2,c
 10604  00041C  0E00               	movlw	0
 10605  00041E  2049               	addwfc	??_bmp280Convert+12,w,c
 10606  000420  6E12               	movwf	___lmul@multiplier+3,c
 10607  000422  0E35               	movlw	53
 10608  000424  6E13               	movwf	___lmul@multiplicand,c
 10609  000426  0E0C               	movlw	12
 10610  000428  6E14               	movwf	___lmul@multiplicand+1,c
 10611  00042A  6A15               	clrf	___lmul@multiplicand+2,c
 10612  00042C  6A16               	clrf	___lmul@multiplicand+3,c
 10613  00042E  EC6B  F011         	call	___lmul	;wreg free
 10614  000432  C00F  F0F1         	movff	?___lmul,bmp280Convert@P
 10615  000436  C010  F0F2         	movff	?___lmul+1,bmp280Convert@P+1
 10616  00043A  C011  F0F3         	movff	?___lmul+2,bmp280Convert@P+2
 10617  00043E  C012  F0F4         	movff	?___lmul+3,bmp280Convert@P+3
 10618                           
 10619                           ;BMP_280.c: 258: if (P < 0x80000000) {
 10620  000442  0E80               	movlw	128
 10621  000444  0100               	movlb	0	; () banked
 10622  000446  5DF4               	subwf	(bmp280Convert@P+3)& (0+255),w,b
 10623  000448  E215               	bc	l6072
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;BMP_280.c: 259: P = (P << 1) / ((uint32_t) var1);
 10627  00044A  90D8               	bcf	status,0,c
 10628  00044C  35F1               	rlcf	bmp280Convert@P& (0+255),w,b
 10629  00044E  6E1B               	movwf	___lldiv@dividend,c
 10630  000450  35F2               	rlcf	(bmp280Convert@P+1)& (0+255),w,b
 10631  000452  6E1C               	movwf	___lldiv@dividend+1,c
 10632  000454  35F3               	rlcf	(bmp280Convert@P+2)& (0+255),w,b
 10633  000456  6E1D               	movwf	___lldiv@dividend+2,c
 10634  000458  35F4               	rlcf	(bmp280Convert@P+3)& (0+255),w,b
 10635  00045A  6E1E               	movwf	___lldiv@dividend+3,c
 10636  00045C  D97A               	call	PL74	;call to abstracted procedure
 10637  00045E  EC99  F00F         	call	___lldiv	;wreg free
 10638  000462  C01B  F0F1         	movff	?___lldiv,bmp280Convert@P
 10639  000466  C01C  F0F2         	movff	?___lldiv+1,bmp280Convert@P+1
 10640  00046A  C01D  F0F3         	movff	?___lldiv+2,bmp280Convert@P+2
 10641  00046E  C01E  F0F4         	movff	?___lldiv+3,bmp280Convert@P+3
 10642                           
 10643                           ;BMP_280.c: 260: } else {
 10644  000472  D015               	goto	l1211
 10645  000474                     l6072:
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;BMP_280.c: 261: P = (P / (uint32_t) var1) * 2;
 10649  000474  C0F1  F01B         	movff	bmp280Convert@P,___lldiv@dividend
 10650  000478  C0F2  F01C         	movff	bmp280Convert@P+1,___lldiv@dividend+1
 10651  00047C  C0F3  F01D         	movff	bmp280Convert@P+2,___lldiv@dividend+2
 10652  000480  C0F4  F01E         	movff	bmp280Convert@P+3,___lldiv@dividend+3
 10653  000484  D966               	call	PL74	;call to abstracted procedure
 10654  000486  EC99  F00F         	call	___lldiv	;wreg free
 10655  00048A  90D8               	bcf	status,0,c
 10656  00048C  341B               	rlcf	?___lldiv,w,c
 10657  00048E  0100               	movlb	0	; () banked
 10658  000490  6FF1               	movwf	bmp280Convert@P& (0+255),b
 10659  000492  341C               	rlcf	?___lldiv+1,w,c
 10660  000494  6FF2               	movwf	(bmp280Convert@P+1)& (0+255),b
 10661  000496  341D               	rlcf	?___lldiv+2,w,c
 10662  000498  6FF3               	movwf	(bmp280Convert@P+2)& (0+255),b
 10663  00049A  341E               	rlcf	?___lldiv+3,w,c
 10664  00049C  6FF4               	movwf	(bmp280Convert@P+3)& (0+255),b
 10665  00049E                     l1211:
 10666                           
 10667                           ;BMP_280.c: 262: }
 10668                           ;BMP_280.c: 267: var1 = (((int32_t) dig_P9) * ((int32_t) (((P >> 3) * (P >> 3)) >> 13)))
      +                           >> 12;
 10669  00049E  C0F1  F03D         	movff	bmp280Convert@P,??_bmp280Convert
 10670  0004A2  C0F2  F03E         	movff	bmp280Convert@P+1,??_bmp280Convert+1
 10671  0004A6  C0F3  F03F         	movff	bmp280Convert@P+2,??_bmp280Convert+2
 10672  0004AA  C0F4  F040         	movff	bmp280Convert@P+3,??_bmp280Convert+3
 10673  0004AE  0E04               	movlw	4
 10674  0004B0  D002               	goto	u4540
 10675  0004B2                     u4545:
 10676  0004B2  90D8               	bcf	status,0,c
 10677  0004B4  D970               	call	PL150	;call to abstracted procedure
 10678  0004B6                     u4540:
 10679  0004B6  2EE8               	decfsz	wreg,f,c
 10680  0004B8  D7FC               	goto	u4545
 10681  0004BA  C03D  F00F         	movff	??_bmp280Convert,___lmul@multiplier
 10682  0004BE  C03E  F010         	movff	??_bmp280Convert+1,___lmul@multiplier+1
 10683  0004C2  C03F  F011         	movff	??_bmp280Convert+2,___lmul@multiplier+2
 10684  0004C6  C040  F012         	movff	??_bmp280Convert+3,___lmul@multiplier+3
 10685  0004CA  C0F1  F041         	movff	bmp280Convert@P,??_bmp280Convert+4
 10686  0004CE  C0F2  F042         	movff	bmp280Convert@P+1,??_bmp280Convert+5
 10687  0004D2  C0F3  F043         	movff	bmp280Convert@P+2,??_bmp280Convert+6
 10688  0004D6  C0F4  F044         	movff	bmp280Convert@P+3,??_bmp280Convert+7
 10689  0004DA  0E04               	movlw	4
 10690  0004DC  D005               	goto	u4550
 10691  0004DE                     u4555:
 10692  0004DE  90D8               	bcf	status,0,c
 10693  0004E0  3244               	rrcf	??_bmp280Convert+7,f,c
 10694  0004E2  3243               	rrcf	??_bmp280Convert+6,f,c
 10695  0004E4  3242               	rrcf	??_bmp280Convert+5,f,c
 10696  0004E6  3241               	rrcf	??_bmp280Convert+4,f,c
 10697  0004E8                     u4550:
 10698  0004E8  2EE8               	decfsz	wreg,f,c
 10699  0004EA  D7F9               	goto	u4555
 10700  0004EC  C041  F013         	movff	??_bmp280Convert+4,___lmul@multiplicand
 10701  0004F0  C042  F014         	movff	??_bmp280Convert+5,___lmul@multiplicand+1
 10702  0004F4  C043  F015         	movff	??_bmp280Convert+6,___lmul@multiplicand+2
 10703  0004F8  C044  F016         	movff	??_bmp280Convert+7,___lmul@multiplicand+3
 10704  0004FC  EC6B  F011         	call	___lmul	;wreg free
 10705  000500  0E0E               	movlw	14
 10706  000502  D005               	goto	u4560
 10707  000504                     u4565:
 10708  000504  90D8               	bcf	status,0,c
 10709  000506  3212               	rrcf	?___lmul+3,f,c
 10710  000508  3211               	rrcf	?___lmul+2,f,c
 10711  00050A  3210               	rrcf	?___lmul+1,f,c
 10712  00050C  320F               	rrcf	?___lmul,f,c
 10713  00050E                     u4560:
 10714  00050E  2EE8               	decfsz	wreg,f,c
 10715  000510  D7F9               	goto	u4565
 10716  000512  D8DA               	call	PL40	;call to abstracted procedure
 10717                           
 10718                           ;BMP_280.c: 262: }
 10719                           ;BMP_280.c: 267: var1 = (((int32_t) dig_P9) * ((int32_t) (((P >> 3) * (P >> 3)) >> 13)))
      +                           >> 12;
 10720  000514  0E0C               	movlw	12
 10721  000516  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10722  000518  C089  F00F         	movff	_dig_P9,___lmul@multiplier
 10723  00051C  C08A  F010         	movff	_dig_P9+1,___lmul@multiplier+1
 10724  000520  0E00               	movlw	0
 10725  000522  D8FB               	call	PL60	;call to abstracted procedure
 10726  000524  EC6B  F011         	call	___lmul	;wreg free
 10727  000528                     u4575:
 10728  000528  663D               	tstfsz	??_bmp280Convert,c
 10729  00052A  D001               	goto	u4576
 10730  00052C  D003               	goto	u4577
 10731  00052E                     u4576:
 10732  00052E  D8C6               	call	PL36	;call to abstracted procedure
 10733  000530  2E3D               	decfsz	??_bmp280Convert,f,c
 10734  000532  D7FA               	goto	u4575
 10735  000534                     u4577:
 10736  000534  D8D2               	call	PL50	;call to abstracted procedure
 10737                           
 10738                           ;BMP_280.c: 271: var2 = (((int32_t) (P >> 2)) * ((int32_t) dig_P8)) >> 13;
 10739  000536  0E0D               	movlw	13
 10740  000538  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10741  00053A  C0F1  F03E         	movff	bmp280Convert@P,??_bmp280Convert+1
 10742  00053E  C0F2  F03F         	movff	bmp280Convert@P+1,??_bmp280Convert+2
 10743  000542  C0F3  F040         	movff	bmp280Convert@P+2,??_bmp280Convert+3
 10744  000546  C0F4  F041         	movff	bmp280Convert@P+3,??_bmp280Convert+4
 10745  00054A  0E03               	movlw	3
 10746  00054C  D002               	goto	u4580
 10747  00054E                     u4585:
 10748  00054E  90D8               	bcf	status,0,c
 10749  000550  D918               	call	PL114	;call to abstracted procedure
 10750  000552                     u4580:
 10751  000552  2EE8               	decfsz	wreg,f,c
 10752  000554  D7FC               	goto	u4585
 10753  000556  C03E  F00F         	movff	??_bmp280Convert+1,___lmul@multiplier
 10754  00055A  C03F  F010         	movff	??_bmp280Convert+2,___lmul@multiplier+1
 10755  00055E  C040  F011         	movff	??_bmp280Convert+3,___lmul@multiplier+2
 10756  000562  C041  F012         	movff	??_bmp280Convert+4,___lmul@multiplier+3
 10757  000566  C08B  F013         	movff	_dig_P8,___lmul@multiplicand
 10758  00056A  C08C  F014         	movff	_dig_P8+1,___lmul@multiplicand+1
 10759  00056E  D8E2               	call	PL66	;call to abstracted procedure
 10760  000570  EC6B  F011         	call	___lmul	;wreg free
 10761  000574                     u4595:
 10762  000574  663D               	tstfsz	??_bmp280Convert,c
 10763  000576  D001               	goto	u4596
 10764  000578  D003               	goto	u4597
 10765  00057A                     u4596:
 10766  00057A  D8A0               	call	PL36	;call to abstracted procedure
 10767  00057C  2E3D               	decfsz	??_bmp280Convert,f,c
 10768  00057E  D7FA               	goto	u4595
 10769  000580                     u4597:
 10770  000580  D8B5               	call	PL52	;call to abstracted procedure
 10771                           
 10772                           ;BMP_280.c: 275: P = (uint32_t) ((int32_t) P + ((var1 + var2 + dig_P7) >> 4));
 10773  000582  0E04               	movlw	4
 10774  000584  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10775  000586  C08D  F03E         	movff	_dig_P7,??_bmp280Convert+1
 10776  00058A  C08E  F03F         	movff	_dig_P7+1,??_bmp280Convert+2
 10777  00058E  0E00               	movlw	0
 10778  000590  BE3F               	btfsc	(??_bmp280Convert+2)& (0+255),7,c
 10779  000592  0EFF               	movlw	255
 10780  000594  6E40               	movwf	(??_bmp280Convert+3)& (0+255),c
 10781  000596  6E41               	movwf	(??_bmp280Convert+4)& (0+255),c
 10782  000598  0100               	movlb	0	; () banked
 10783  00059A  51F5               	movf	bmp280Convert@var1& (0+255),w,b
 10784  00059C  243E               	addwf	??_bmp280Convert+1,w,c
 10785  00059E  6E42               	movwf	(??_bmp280Convert+5)& (0+255),c
 10786  0005A0  51F6               	movf	(bmp280Convert@var1+1)& (0+255),w,b
 10787  0005A2  203F               	addwfc	??_bmp280Convert+2,w,c
 10788  0005A4  6E43               	movwf	(??_bmp280Convert+6)& (0+255),c
 10789  0005A6  51F7               	movf	(bmp280Convert@var1+2)& (0+255),w,b
 10790  0005A8  2040               	addwfc	??_bmp280Convert+3,w,c
 10791  0005AA  6E44               	movwf	(??_bmp280Convert+7)& (0+255),c
 10792  0005AC  51F8               	movf	(bmp280Convert@var1+3)& (0+255),w,b
 10793  0005AE  2041               	addwfc	??_bmp280Convert+4,w,c
 10794  0005B0  6E45               	movwf	(??_bmp280Convert+8)& (0+255),c
 10795  0005B2  51ED               	movf	bmp280Convert@var2& (0+255),w,b
 10796  0005B4  2442               	addwf	??_bmp280Convert+5,w,c
 10797  0005B6  6E46               	movwf	(??_bmp280Convert+9)& (0+255),c
 10798  0005B8  51EE               	movf	(bmp280Convert@var2+1)& (0+255),w,b
 10799  0005BA  2043               	addwfc	??_bmp280Convert+6,w,c
 10800  0005BC  6E47               	movwf	(??_bmp280Convert+10)& (0+255),c
 10801  0005BE  51EF               	movf	(bmp280Convert@var2+2)& (0+255),w,b
 10802  0005C0  2044               	addwfc	??_bmp280Convert+7,w,c
 10803  0005C2  6E48               	movwf	(??_bmp280Convert+11)& (0+255),c
 10804  0005C4  51F0               	movf	(bmp280Convert@var2+3)& (0+255),w,b
 10805  0005C6  2045               	addwfc	??_bmp280Convert+8,w,c
 10806  0005C8  6E49               	movwf	(??_bmp280Convert+12)& (0+255),c
 10807  0005CA                     u4605:
 10808  0005CA  663D               	tstfsz	??_bmp280Convert,c
 10809  0005CC  D001               	goto	u4606
 10810  0005CE  D007               	goto	u4607
 10811  0005D0                     u4606:
 10812  0005D0  3449               	rlcf	??_bmp280Convert+12,w,c
 10813  0005D2  3249               	rrcf	??_bmp280Convert+12,f,c
 10814  0005D4  3248               	rrcf	??_bmp280Convert+11,f,c
 10815  0005D6  3247               	rrcf	??_bmp280Convert+10,f,c
 10816  0005D8  3246               	rrcf	??_bmp280Convert+9,f,c
 10817  0005DA  2E3D               	decfsz	??_bmp280Convert,f,c
 10818  0005DC  D7F6               	goto	u4605
 10819  0005DE                     u4607:
 10820  0005DE  0100               	movlb	0	; () banked
 10821  0005E0  51F1               	movf	bmp280Convert@P& (0+255),w,b
 10822  0005E2  2446               	addwf	??_bmp280Convert+9,w,c
 10823  0005E4  6FF1               	movwf	bmp280Convert@P& (0+255),b
 10824  0005E6  51F2               	movf	(bmp280Convert@P+1)& (0+255),w,b
 10825  0005E8  2047               	addwfc	??_bmp280Convert+10,w,c
 10826  0005EA  6FF2               	movwf	(bmp280Convert@P+1)& (0+255),b
 10827  0005EC  51F3               	movf	(bmp280Convert@P+2)& (0+255),w,b
 10828  0005EE  2048               	addwfc	??_bmp280Convert+11,w,c
 10829  0005F0  6FF3               	movwf	(bmp280Convert@P+2)& (0+255),b
 10830  0005F2  51F4               	movf	(bmp280Convert@P+3)& (0+255),w,b
 10831  0005F4  2049               	addwfc	??_bmp280Convert+12,w,c
 10832  0005F6  6FF4               	movwf	(bmp280Convert@P+3)& (0+255),b
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;BMP_280.c: 281: *press = P * 100 / 13332;
 10836  0005F8  C0F1  F00F         	movff	bmp280Convert@P,___lmul@multiplier
 10837  0005FC  C0F2  F010         	movff	bmp280Convert@P+1,___lmul@multiplier+1
 10838  000600  C0F3  F011         	movff	bmp280Convert@P+2,___lmul@multiplier+2
 10839  000604  C0F4  F012         	movff	bmp280Convert@P+3,___lmul@multiplier+3
 10840  000608  0E64               	movlw	100
 10841  00060A  D8C0               	call	PL118	;call to abstracted procedure
 10842  00060C  EC6B  F011         	call	___lmul	;wreg free
 10843  000610  C00F  F01B         	movff	?___lmul,___lldiv@dividend
 10844  000614  C010  F01C         	movff	?___lmul+1,___lldiv@dividend+1
 10845  000618  C011  F01D         	movff	?___lmul+2,___lldiv@dividend+2
 10846  00061C  C012  F01E         	movff	?___lmul+3,___lldiv@dividend+3
 10847  000620  0E14               	movlw	20
 10848  000622  6E1F               	movwf	___lldiv@divisor,c
 10849  000624  0E34               	movlw	52
 10850  000626  6E20               	movwf	___lldiv@divisor+1,c
 10851  000628  6A21               	clrf	___lldiv@divisor+2,c
 10852  00062A  6A22               	clrf	___lldiv@divisor+3,c
 10853  00062C  EC99  F00F         	call	___lldiv	;wreg free
 10854  000630  503B               	movf	bmp280Convert@press,w,c
 10855  000632  6ED9               	movwf	fsr2l,c
 10856  000634  6ADA               	clrf	fsr2h,c
 10857  000636  C01B  FFDE         	movff	?___lldiv,postinc2
 10858  00063A  C01C  FFDE         	movff	?___lldiv+1,postinc2
 10859  00063E  C01D  FFDE         	movff	?___lldiv+2,postinc2
 10860  000642  C01E  FFDE         	movff	?___lldiv+3,postinc2
 10861  000646  0012               	return		;funcret
 10862  000648                     __end_of_bmp280Convert:
 10863                           	opt stack 0
 10864  000648                     PL12:
 10865                           	opt stack 21
 10866  000648  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10867  00064A  0E02               	movlw	2
 10868  00064C  6E3E               	movwf	(??_bmp280Convert+1)& (0+255),c
 10869  00064E  C0F5  F03F         	movff	bmp280Convert@var1,??_bmp280Convert+2
 10870  000652  C0F6  F040         	movff	bmp280Convert@var1+1,??_bmp280Convert+3
 10871  000656  C0F7  F041         	movff	bmp280Convert@var1+2,??_bmp280Convert+4
 10872  00065A  C0F8  F042         	movff	bmp280Convert@var1+3,??_bmp280Convert+5
 10873  00065E                     u4415:
 10874  00065E  663E               	tstfsz	??_bmp280Convert+1,c
 10875  000660  D001               	goto	u4416
 10876  000662  D007               	goto	u4417
 10877  000664                     u4416:
 10878  000664  3442               	rlcf	??_bmp280Convert+5,w,c
 10879  000666  3242               	rrcf	??_bmp280Convert+5,f,c
 10880  000668  3241               	rrcf	??_bmp280Convert+4,f,c
 10881  00066A  3240               	rrcf	??_bmp280Convert+3,f,c
 10882  00066C  323F               	rrcf	??_bmp280Convert+2,f,c
 10883  00066E  2E3E               	decfsz	??_bmp280Convert+1,f,c
 10884  000670  D7F6               	goto	u4415
 10885  000672                     u4417:
 10886  000672  C03F  F00F         	movff	??_bmp280Convert+2,___lmul@multiplier
 10887  000676  C040  F010         	movff	??_bmp280Convert+3,___lmul@multiplier+1
 10888  00067A  C041  F011         	movff	??_bmp280Convert+4,___lmul@multiplier+2
 10889  00067E  C042  F012         	movff	??_bmp280Convert+5,___lmul@multiplier+3
 10890  000682  0E02               	movlw	2
 10891  000684  6E43               	movwf	(??_bmp280Convert+6)& (0+255),c
 10892  000686  C0F5  F044         	movff	bmp280Convert@var1,??_bmp280Convert+7
 10893  00068A  C0F6  F045         	movff	bmp280Convert@var1+1,??_bmp280Convert+8
 10894  00068E  C0F7  F046         	movff	bmp280Convert@var1+2,??_bmp280Convert+9
 10895  000692  C0F8  F047         	movff	bmp280Convert@var1+3,??_bmp280Convert+10
 10896  000696                     u4425:
 10897  000696  6643               	tstfsz	??_bmp280Convert+6,c
 10898  000698  D001               	goto	u4426
 10899  00069A  D007               	goto	u4427
 10900  00069C                     u4426:
 10901  00069C  3447               	rlcf	??_bmp280Convert+10,w,c
 10902  00069E  3247               	rrcf	??_bmp280Convert+10,f,c
 10903  0006A0  3246               	rrcf	??_bmp280Convert+9,f,c
 10904  0006A2  3245               	rrcf	??_bmp280Convert+8,f,c
 10905  0006A4  3244               	rrcf	??_bmp280Convert+7,f,c
 10906  0006A6  2E43               	decfsz	??_bmp280Convert+6,f,c
 10907  0006A8  D7F6               	goto	u4425
 10908  0006AA                     u4427:
 10909  0006AA  C044  F013         	movff	??_bmp280Convert+7,___lmul@multiplicand
 10910  0006AE  C045  F014         	movff	??_bmp280Convert+8,___lmul@multiplicand+1
 10911  0006B2  C046  F015         	movff	??_bmp280Convert+9,___lmul@multiplicand+2
 10912  0006B6  C047  F016         	movff	??_bmp280Convert+10,___lmul@multiplicand+3
 10913  0006BA  0012               	return	
 10914  0006BC                     __end_ofPL12:
 10915                           	opt stack 0
 10916  0006BC                     PL36:
 10917                           	opt stack 21
 10918  0006BC  3412               	rlcf	?___lmul+3,w,c
 10919  0006BE  3212               	rrcf	?___lmul+3,f,c
 10920  0006C0  3211               	rrcf	?___lmul+2,f,c
 10921  0006C2  3210               	rrcf	?___lmul+1,f,c
 10922  0006C4  320F               	rrcf	?___lmul,f,c
 10923  0006C6  0012               	return	
 10924  0006C8                     __end_ofPL36:
 10925                           	opt stack 0
 10926  0006C8                     PL40:
 10927                           	opt stack 21
 10928  0006C8  C00F  F0E9         	movff	?___lmul,_bmp280Convert$3035
 10929  0006CC  C010  F0EA         	movff	?___lmul+1,_bmp280Convert$3035+1
 10930  0006D0  C011  F0EB         	movff	?___lmul+2,_bmp280Convert$3035+2
 10931  0006D4  C012  F0EC         	movff	?___lmul+3,_bmp280Convert$3035+3
 10932  0006D8  0012               	return	
 10933  0006DA                     __end_ofPL40:
 10934                           	opt stack 0
 10935  0006DA                     PL50:
 10936                           	opt stack 21
 10937  0006DA  C00F  F0F5         	movff	?___lmul,bmp280Convert@var1
 10938  0006DE  C010  F0F6         	movff	?___lmul+1,bmp280Convert@var1+1
 10939  0006E2  C011  F0F7         	movff	?___lmul+2,bmp280Convert@var1+2
 10940  0006E6  C012  F0F8         	movff	?___lmul+3,bmp280Convert@var1+3
 10941  0006EA  0012               	return	
 10942  0006EC                     __end_ofPL50:
 10943                           	opt stack 0
 10944  0006EC                     PL52:
 10945                           	opt stack 21
 10946  0006EC  C00F  F0ED         	movff	?___lmul,bmp280Convert@var2
 10947  0006F0  C010  F0EE         	movff	?___lmul+1,bmp280Convert@var2+1
 10948  0006F4  C011  F0EF         	movff	?___lmul+2,bmp280Convert@var2+2
 10949  0006F8  C012  F0F0         	movff	?___lmul+3,bmp280Convert@var2+3
 10950  0006FC  0012               	return	
 10951  0006FE                     __end_ofPL52:
 10952                           	opt stack 0
 10953  0006FE                     PL56:
 10954                           	opt stack 21
 10955  0006FE  0E00               	movlw	0
 10956  000700  BE10               	btfsc	___lmul@multiplier+1,7,c
 10957  000702  0EFF               	movlw	-1
 10958  000704  6E11               	movwf	___lmul@multiplier+2,c
 10959  000706  6E12               	movwf	___lmul@multiplier+3,c
 10960  000708  C0F5  F013         	movff	bmp280Convert@var1,___lmul@multiplicand
 10961  00070C  C0F6  F014         	movff	bmp280Convert@var1+1,___lmul@multiplicand+1
 10962  000710  C0F7  F015         	movff	bmp280Convert@var1+2,___lmul@multiplicand+2
 10963  000714  C0F8  F016         	movff	bmp280Convert@var1+3,___lmul@multiplicand+3
 10964  000718  0012               	return	
 10965  00071A                     __end_ofPL56:
 10966                           	opt stack 0
 10967  00071A                     PL60:
 10968                           	opt stack 21
 10969  00071A  BE10               	btfsc	___lmul@multiplier+1,7,c
 10970  00071C  0EFF               	movlw	-1
 10971  00071E  6E11               	movwf	___lmul@multiplier+2,c
 10972  000720  6E12               	movwf	___lmul@multiplier+3,c
 10973  000722  C0E9  F013         	movff	_bmp280Convert$3035,___lmul@multiplicand
 10974  000726  C0EA  F014         	movff	_bmp280Convert$3035+1,___lmul@multiplicand+1
 10975  00072A  C0EB  F015         	movff	_bmp280Convert$3035+2,___lmul@multiplicand+2
 10976  00072E  C0EC  F016         	movff	_bmp280Convert$3035+3,___lmul@multiplicand+3
 10977  000732  0012               	return	
 10978  000734                     __end_ofPL60:
 10979                           	opt stack 0
 10980  000734                     PL66:
 10981                           	opt stack 21
 10982  000734  0E00               	movlw	0
 10983  000736  BE14               	btfsc	___lmul@multiplicand+1,7,c
 10984  000738  0EFF               	movlw	-1
 10985  00073A  6E15               	movwf	___lmul@multiplicand+2,c
 10986  00073C  6E16               	movwf	___lmul@multiplicand+3,c
 10987  00073E  0012               	return	
 10988  000740                     __end_ofPL66:
 10989                           	opt stack 0
 10990  000740                     PL72:
 10991                           	opt stack 21
 10992  000740  6E3D               	movwf	??_bmp280Convert& (0+255),c
 10993  000742  0100               	movlb	0	; () banked
 10994  000744  519D               	movf	_dig_T1& (0+255),w,b
 10995  000746  6E3E               	movwf	(??_bmp280Convert+1)& (0+255),c
 10996  000748  519E               	movf	(_dig_T1+1)& (0+255),w,b
 10997  00074A  6E3F               	movwf	(??_bmp280Convert+2)& (0+255),c
 10998  00074C  6A40               	clrf	(??_bmp280Convert+3)& (0+255),c
 10999  00074E  6A41               	clrf	(??_bmp280Convert+4)& (0+255),c
 11000  000750  0012               	return	
 11001  000752                     __end_ofPL72:
 11002                           	opt stack 0
 11003  000752                     PL74:
 11004                           	opt stack 21
 11005  000752  C0F5  F01F         	movff	bmp280Convert@var1,___lldiv@divisor
 11006  000756  C0F6  F020         	movff	bmp280Convert@var1+1,___lldiv@divisor+1
 11007  00075A  C0F7  F021         	movff	bmp280Convert@var1+2,___lldiv@divisor+2
 11008  00075E  C0F8  F022         	movff	bmp280Convert@var1+3,___lldiv@divisor+3
 11009  000762  0012               	return	
 11010  000764                     __end_ofPL74:
 11011                           	opt stack 0
 11012  000764                     PL76:
 11013                           	opt stack 21
 11014  000764  C0E9  F00F         	movff	_bmp280Convert$3035,___lmul@multiplier
 11015  000768  C0EA  F010         	movff	_bmp280Convert$3035+1,___lmul@multiplier+1
 11016  00076C  C0EB  F011         	movff	_bmp280Convert$3035+2,___lmul@multiplier+2
 11017  000770  C0EC  F012         	movff	_bmp280Convert$3035+3,___lmul@multiplier+3
 11018  000774  0012               	return	
 11019  000776                     __end_ofPL76:
 11020                           	opt stack 0
 11021  000776                     PL98:
 11022                           	opt stack 21
 11023  000776  3446               	rlcf	??_bmp280Convert+9,w,c
 11024  000778  3246               	rrcf	??_bmp280Convert+9,f,c
 11025  00077A  3245               	rrcf	??_bmp280Convert+8,f,c
 11026  00077C  3244               	rrcf	??_bmp280Convert+7,f,c
 11027  00077E  3243               	rrcf	??_bmp280Convert+6,f,c
 11028  000780  0012               	return	
 11029  000782                     __end_ofPL98:
 11030                           	opt stack 0
 11031  000782                     PL114:
 11032                           	opt stack 21
 11033  000782  3241               	rrcf	??_bmp280Convert+4,f,c
 11034  000784  3240               	rrcf	??_bmp280Convert+3,f,c
 11035  000786  323F               	rrcf	??_bmp280Convert+2,f,c
 11036  000788  323E               	rrcf	??_bmp280Convert+1,f,c
 11037  00078A  0012               	return	
 11038  00078C                     __end_ofPL114:
 11039                           	opt stack 0
 11040  00078C                     PL118:
 11041                           	opt stack 21
 11042  00078C  6E13               	movwf	___lmul@multiplicand,c
 11043  00078E  6A14               	clrf	___lmul@multiplicand+1,c
 11044  000790  6A15               	clrf	___lmul@multiplicand+2,c
 11045  000792  6A16               	clrf	___lmul@multiplicand+3,c
 11046  000794  0012               	return	
 11047  000796                     __end_ofPL118:
 11048                           	opt stack 0
 11049  000796                     PL150:
 11050                           	opt stack 21
 11051  000796  3240               	rrcf	??_bmp280Convert+3,f,c
 11052  000798  323F               	rrcf	??_bmp280Convert+2,f,c
 11053  00079A  323E               	rrcf	??_bmp280Convert+1,f,c
 11054  00079C  323D               	rrcf	??_bmp280Convert,f,c
 11055  00079E  0012               	return	
 11056  0007A0                     __end_ofPL150:
 11057                           	opt stack 0
 11058                           tosu	equ	0xFFF
 11059                           tosh	equ	0xFFE
 11060                           tosl	equ	0xFFD
 11061                           pclath	equ	0xFFA
 11062                           tblptru	equ	0xFF8
 11063                           tblptrh	equ	0xFF7
 11064                           tblptrl	equ	0xFF6
 11065                           tablat	equ	0xFF5
 11066                           prodh	equ	0xFF4
 11067                           prodl	equ	0xFF3
 11068                           intcon	equ	0xFF2
 11069                           intcon2	equ	0xFF1
 11070                           postinc0	equ	0xFEE
 11071                           wreg	equ	0xFE8
 11072                           indf1	equ	0xFE7
 11073                           plusw1	equ	0xFE3
 11074                           fsr1h	equ	0xFE2
 11075                           fsr1l	equ	0xFE1
 11076                           indf2	equ	0xFDF
 11077                           postinc2	equ	0xFDE
 11078                           postdec2	equ	0xFDD
 11079                           plusw2	equ	0xFDB
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function _bmp280ReadTemp *****************
 11085 ;; Defined at:
 11086 ;;		line 157 in file "BMP_280.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;		None
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;  temperature     4   54[COMRAM] long 
 11091 ;; Return value:  Size  Location     Type
 11092 ;;                  4   50[COMRAM] long 
 11093 ;; Registers used:
 11094 ;;		wreg, status,2, status,0, cstack
 11095 ;; Tracked objects:
 11096 ;;		On entry : 0/0
 11097 ;;		On exit  : 0/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11104 ;;Total ram usage:        8 bytes
 11105 ;; Hardware stack levels used:    1
 11106 ;; Hardware stack levels required when called:    6
 11107 ;; This function calls:
 11108 ;;		_bmp280ReadInt32
 11109 ;; This function is called by:
 11110 ;;		_bmp280Convert
 11111 ;; This function uses a non-reentrant model
 11112 ;;
 11113                           
 11114                           	psect	text46
 11115  0026CE                     __ptext46:
 11116                           	opt stack 0
 11117  0026CE                     _bmp280ReadTemp:
 11118                           	opt stack 21
 11119                           
 11120                           ;BMP_280.c: 161: temperature = bmp280ReadInt32(0xFA);
 11121                           
 11122                           ;incstack = 0
 11123  0026CE  0EFA               	movlw	250
 11124  0026D0  EC60  F00C         	call	_bmp280ReadInt32
 11125  0026D4  C012  F037         	movff	?_bmp280ReadInt32,bmp280ReadTemp@temperature
 11126  0026D8  C013  F038         	movff	?_bmp280ReadInt32+1,bmp280ReadTemp@temperature+1
 11127  0026DC  C014  F039         	movff	?_bmp280ReadInt32+2,bmp280ReadTemp@temperature+2
 11128  0026E0  C015  F03A         	movff	?_bmp280ReadInt32+3,bmp280ReadTemp@temperature+3
 11129                           
 11130                           ;BMP_280.c: 174: return temperature;
 11131  0026E4  C037  F033         	movff	bmp280ReadTemp@temperature,?_bmp280ReadTemp
 11132  0026E8  C038  F034         	movff	bmp280ReadTemp@temperature+1,?_bmp280ReadTemp+1
 11133  0026EC  C039  F035         	movff	bmp280ReadTemp@temperature+2,?_bmp280ReadTemp+2
 11134  0026F0  C03A  F036         	movff	bmp280ReadTemp@temperature+3,?_bmp280ReadTemp+3
 11135  0026F4  0012               	return		;funcret
 11136  0026F6                     __end_of_bmp280ReadTemp:
 11137                           	opt stack 0
 11138                           tosu	equ	0xFFF
 11139                           tosh	equ	0xFFE
 11140                           tosl	equ	0xFFD
 11141                           pclath	equ	0xFFA
 11142                           tblptru	equ	0xFF8
 11143                           tblptrh	equ	0xFF7
 11144                           tblptrl	equ	0xFF6
 11145                           tablat	equ	0xFF5
 11146                           prodh	equ	0xFF4
 11147                           prodl	equ	0xFF3
 11148                           intcon	equ	0xFF2
 11149                           intcon2	equ	0xFF1
 11150                           postinc0	equ	0xFEE
 11151                           wreg	equ	0xFE8
 11152                           indf1	equ	0xFE7
 11153                           plusw1	equ	0xFE3
 11154                           fsr1h	equ	0xFE2
 11155                           fsr1l	equ	0xFE1
 11156                           indf2	equ	0xFDF
 11157                           postinc2	equ	0xFDE
 11158                           postdec2	equ	0xFDD
 11159                           plusw2	equ	0xFDB
 11160                           fsr2h	equ	0xFDA
 11161                           fsr2l	equ	0xFD9
 11162                           status	equ	0xFD8
 11163                           
 11164 ;; *************** function _bmp280ReadPressure *****************
 11165 ;; Defined at:
 11166 ;;		line 182 in file "BMP_280.c"
 11167 ;; Parameters:    Size  Location     Type
 11168 ;;		None
 11169 ;; Auto vars:     Size  Location     Type
 11170 ;;  pressure        4   54[COMRAM] long 
 11171 ;; Return value:  Size  Location     Type
 11172 ;;                  4   50[COMRAM] long 
 11173 ;; Registers used:
 11174 ;;		wreg, status,2, status,0, cstack
 11175 ;; Tracked objects:
 11176 ;;		On entry : 0/0
 11177 ;;		On exit  : 0/0
 11178 ;;		Unchanged: 0/0
 11179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11180 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11181 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11183 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;Total ram usage:        8 bytes
 11185 ;; Hardware stack levels used:    1
 11186 ;; Hardware stack levels required when called:    6
 11187 ;; This function calls:
 11188 ;;		_bmp280ReadInt32
 11189 ;; This function is called by:
 11190 ;;		_bmp280Convert
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           	psect	text47
 11195  0026F6                     __ptext47:
 11196                           	opt stack 0
 11197  0026F6                     _bmp280ReadPressure:
 11198                           	opt stack 21
 11199                           
 11200                           ;BMP_280.c: 186: pressure = bmp280ReadInt32(0xF7);
 11201                           
 11202                           ;incstack = 0
 11203  0026F6  0EF7               	movlw	247
 11204  0026F8  EC60  F00C         	call	_bmp280ReadInt32
 11205  0026FC  C012  F037         	movff	?_bmp280ReadInt32,bmp280ReadPressure@pressure
 11206  002700  C013  F038         	movff	?_bmp280ReadInt32+1,bmp280ReadPressure@pressure+1
 11207  002704  C014  F039         	movff	?_bmp280ReadInt32+2,bmp280ReadPressure@pressure+2
 11208  002708  C015  F03A         	movff	?_bmp280ReadInt32+3,bmp280ReadPressure@pressure+3
 11209                           
 11210                           ;BMP_280.c: 197: return pressure;
 11211  00270C  C037  F033         	movff	bmp280ReadPressure@pressure,?_bmp280ReadPressure
 11212  002710  C038  F034         	movff	bmp280ReadPressure@pressure+1,?_bmp280ReadPressure+1
 11213  002714  C039  F035         	movff	bmp280ReadPressure@pressure+2,?_bmp280ReadPressure+2
 11214  002718  C03A  F036         	movff	bmp280ReadPressure@pressure+3,?_bmp280ReadPressure+3
 11215  00271C  0012               	return		;funcret
 11216  00271E                     __end_of_bmp280ReadPressure:
 11217                           	opt stack 0
 11218                           tosu	equ	0xFFF
 11219                           tosh	equ	0xFFE
 11220                           tosl	equ	0xFFD
 11221                           pclath	equ	0xFFA
 11222                           tblptru	equ	0xFF8
 11223                           tblptrh	equ	0xFF7
 11224                           tblptrl	equ	0xFF6
 11225                           tablat	equ	0xFF5
 11226                           prodh	equ	0xFF4
 11227                           prodl	equ	0xFF3
 11228                           intcon	equ	0xFF2
 11229                           intcon2	equ	0xFF1
 11230                           postinc0	equ	0xFEE
 11231                           wreg	equ	0xFE8
 11232                           indf1	equ	0xFE7
 11233                           plusw1	equ	0xFE3
 11234                           fsr1h	equ	0xFE2
 11235                           fsr1l	equ	0xFE1
 11236                           indf2	equ	0xFDF
 11237                           postinc2	equ	0xFDE
 11238                           postdec2	equ	0xFDD
 11239                           plusw2	equ	0xFDB
 11240                           fsr2h	equ	0xFDA
 11241                           fsr2l	equ	0xFD9
 11242                           status	equ	0xFD8
 11243                           
 11244 ;; *************** function _bmp280ReadInt32 *****************
 11245 ;; Defined at:
 11246 ;;		line 101 in file "BMP_280.c"
 11247 ;; Parameters:    Size  Location     Type
 11248 ;;  address         1    wreg     unsigned char 
 11249 ;; Auto vars:     Size  Location     Type
 11250 ;;  address         1   37[COMRAM] unsigned char 
 11251 ;;  xlsb            4   46[COMRAM] unsigned long 
 11252 ;;  lsb             4   42[COMRAM] unsigned long 
 11253 ;;  msb             4   38[COMRAM] unsigned long 
 11254 ;; Return value:  Size  Location     Type
 11255 ;;                  4   17[COMRAM] unsigned long 
 11256 ;; Registers used:
 11257 ;;		wreg, status,2, status,0, cstack
 11258 ;; Tracked objects:
 11259 ;;		On entry : 0/0
 11260 ;;		On exit  : 0/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11263 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11264 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11265 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11266 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11267 ;;Total ram usage:       33 bytes
 11268 ;; Hardware stack levels used:    1
 11269 ;; Hardware stack levels required when called:    5
 11270 ;; This function calls:
 11271 ;;		_I2C_Master_Read
 11272 ;;		_I2C_Master_RepeatedStart
 11273 ;;		_I2C_Master_Start
 11274 ;;		_I2C_Master_Stop
 11275 ;;		_I2C_Master_Write
 11276 ;; This function is called by:
 11277 ;;		_bmp280ReadTemp
 11278 ;;		_bmp280ReadPressure
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           	psect	text48
 11283  0018C0                     __ptext48:
 11284                           	opt stack 0
 11285  0018C0                     _bmp280ReadInt32:
 11286                           	opt stack 21
 11287                           
 11288                           ;incstack = 0
 11289                           ;bmp280ReadInt32@address stored from wreg
 11290  0018C0  6E26               	movwf	bmp280ReadInt32@address,c
 11291                           
 11292                           ;BMP_280.c: 103: uint32_t lsb = 0;
 11293  0018C2  6A2B               	clrf	bmp280ReadInt32@lsb,c
 11294  0018C4  6A2C               	clrf	bmp280ReadInt32@lsb+1,c
 11295  0018C6  6A2D               	clrf	bmp280ReadInt32@lsb+2,c
 11296  0018C8  6A2E               	clrf	bmp280ReadInt32@lsb+3,c
 11297                           
 11298                           ;BMP_280.c: 104: uint32_t xlsb = 0;
 11299  0018CA  6A2F               	clrf	bmp280ReadInt32@xlsb,c
 11300  0018CC  D861               	call	PL156	;call to abstracted procedure
 11301                           
 11302                           ;BMP_280.c: 106: I2C_Master_Start();
 11303  0018CE  EC1C  F015         	call	_I2C_Master_Start	;wreg free
 11304                           
 11305                           ;BMP_280.c: 107: I2C_Master_Write(0xEC);
 11306  0018D2  0EEC               	movlw	236
 11307  0018D4  EC12  F015         	call	_I2C_Master_Write
 11308                           
 11309                           ;BMP_280.c: 108: I2C_Master_Write(address);
 11310  0018D8  5026               	movf	bmp280ReadInt32@address,w,c
 11311  0018DA  EC12  F015         	call	_I2C_Master_Write
 11312                           
 11313                           ;BMP_280.c: 109: I2C_Master_RepeatedStart();
 11314  0018DE  EC20  F015         	call	_I2C_Master_RepeatedStart	;wreg free
 11315                           
 11316                           ;BMP_280.c: 110: I2C_Master_Write(0xEC | 0x01);
 11317  0018E2  0EED               	movlw	237
 11318  0018E4  EC12  F015         	call	_I2C_Master_Write
 11319                           
 11320                           ;BMP_280.c: 111: msb = (uint32_t) I2C_Master_Read(1);
 11321  0018E8  0E01               	movlw	1
 11322  0018EA  EC11  F014         	call	_I2C_Master_Read
 11323  0018EE  6E27               	movwf	bmp280ReadInt32@msb,c
 11324  0018F0  6A28               	clrf	bmp280ReadInt32@msb+1,c
 11325  0018F2  6A29               	clrf	bmp280ReadInt32@msb+2,c
 11326  0018F4  6A2A               	clrf	bmp280ReadInt32@msb+3,c
 11327                           
 11328                           ;BMP_280.c: 112: lsb = (uint32_t) I2C_Master_Read(1);
 11329  0018F6  0E01               	movlw	1
 11330  0018F8  EC11  F014         	call	_I2C_Master_Read
 11331  0018FC  6E2B               	movwf	bmp280ReadInt32@lsb,c
 11332  0018FE  6A2C               	clrf	bmp280ReadInt32@lsb+1,c
 11333  001900  6A2D               	clrf	bmp280ReadInt32@lsb+2,c
 11334  001902  6A2E               	clrf	bmp280ReadInt32@lsb+3,c
 11335                           
 11336                           ;BMP_280.c: 113: xlsb = (uint32_t) I2C_Master_Read(0);
 11337  001904  0E00               	movlw	0
 11338  001906  EC11  F014         	call	_I2C_Master_Read
 11339  00190A  6E2F               	movwf	bmp280ReadInt32@xlsb,c
 11340  00190C  D841               	call	PL156	;call to abstracted procedure
 11341                           
 11342                           ;BMP_280.c: 114: I2C_Master_Stop();
 11343  00190E  EC18  F015         	call	_I2C_Master_Stop	;wreg free
 11344                           
 11345                           ;BMP_280.c: 117: return ((msb << 16) + (lsb << 8) + xlsb) >> 4;
 11346  001912  C02B  F017         	movff	bmp280ReadInt32@lsb,??_bmp280ReadInt32+1
 11347  001916  C02C  F018         	movff	bmp280ReadInt32@lsb+1,??_bmp280ReadInt32+2
 11348  00191A  C02D  F019         	movff	bmp280ReadInt32@lsb+2,??_bmp280ReadInt32+3
 11349  00191E  6A16               	clrf	??_bmp280ReadInt32& (0+255),c
 11350  001920  C027  F01A         	movff	bmp280ReadInt32@msb,??_bmp280ReadInt32+4
 11351  001924  C028  F01B         	movff	bmp280ReadInt32@msb+1,??_bmp280ReadInt32+5
 11352  001928  C029  F01C         	movff	bmp280ReadInt32@msb+2,??_bmp280ReadInt32+6
 11353  00192C  C02A  F01D         	movff	bmp280ReadInt32@msb+3,??_bmp280ReadInt32+7
 11354  001930  C01B  F01D         	movff	??_bmp280ReadInt32+5,??_bmp280ReadInt32+7
 11355  001934  C01A  F01C         	movff	??_bmp280ReadInt32+4,??_bmp280ReadInt32+6
 11356  001938  6A1B               	clrf	??_bmp280ReadInt32+5,c
 11357  00193A  6A1A               	clrf	??_bmp280ReadInt32+4,c
 11358  00193C  5016               	movf	??_bmp280ReadInt32,w,c
 11359  00193E  241A               	addwf	??_bmp280ReadInt32+4,w,c
 11360  001940  6E1E               	movwf	(??_bmp280ReadInt32+8)& (0+255),c
 11361  001942  5017               	movf	??_bmp280ReadInt32+1,w,c
 11362  001944  201B               	addwfc	??_bmp280ReadInt32+5,w,c
 11363  001946  6E1F               	movwf	(??_bmp280ReadInt32+9)& (0+255),c
 11364  001948  5018               	movf	??_bmp280ReadInt32+2,w,c
 11365  00194A  201C               	addwfc	??_bmp280ReadInt32+6,w,c
 11366  00194C  6E20               	movwf	(??_bmp280ReadInt32+10)& (0+255),c
 11367  00194E  5019               	movf	??_bmp280ReadInt32+3,w,c
 11368  001950  201D               	addwfc	??_bmp280ReadInt32+7,w,c
 11369  001952  6E21               	movwf	(??_bmp280ReadInt32+11)& (0+255),c
 11370  001954  502F               	movf	bmp280ReadInt32@xlsb,w,c
 11371  001956  241E               	addwf	??_bmp280ReadInt32+8,w,c
 11372  001958  6E22               	movwf	(??_bmp280ReadInt32+12)& (0+255),c
 11373  00195A  5030               	movf	bmp280ReadInt32@xlsb+1,w,c
 11374  00195C  201F               	addwfc	??_bmp280ReadInt32+9,w,c
 11375  00195E  6E23               	movwf	(??_bmp280ReadInt32+13)& (0+255),c
 11376  001960  5031               	movf	bmp280ReadInt32@xlsb+2,w,c
 11377  001962  2020               	addwfc	??_bmp280ReadInt32+10,w,c
 11378  001964  6E24               	movwf	(??_bmp280ReadInt32+14)& (0+255),c
 11379  001966  5032               	movf	bmp280ReadInt32@xlsb+3,w,c
 11380  001968  2021               	addwfc	??_bmp280ReadInt32+11,w,c
 11381  00196A  6E25               	movwf	(??_bmp280ReadInt32+15)& (0+255),c
 11382  00196C  0E05               	movlw	5
 11383  00196E  D005               	goto	u3670
 11384  001970                     u3675:
 11385  001970  90D8               	bcf	status,0,c
 11386  001972  3225               	rrcf	??_bmp280ReadInt32+15,f,c
 11387  001974  3224               	rrcf	??_bmp280ReadInt32+14,f,c
 11388  001976  3223               	rrcf	??_bmp280ReadInt32+13,f,c
 11389  001978  3222               	rrcf	??_bmp280ReadInt32+12,f,c
 11390  00197A                     u3670:
 11391  00197A  2EE8               	decfsz	wreg,f,c
 11392  00197C  D7F9               	goto	u3675
 11393  00197E  C022  F012         	movff	??_bmp280ReadInt32+12,?_bmp280ReadInt32
 11394  001982  C023  F013         	movff	??_bmp280ReadInt32+13,?_bmp280ReadInt32+1
 11395  001986  C024  F014         	movff	??_bmp280ReadInt32+14,?_bmp280ReadInt32+2
 11396  00198A  C025  F015         	movff	??_bmp280ReadInt32+15,?_bmp280ReadInt32+3
 11397  00198E  0012               	return		;funcret
 11398  001990                     __end_of_bmp280ReadInt32:
 11399                           	opt stack 0
 11400  001990                     PL156:
 11401                           	opt stack 21
 11402  001990  6A30               	clrf	bmp280ReadInt32@xlsb+1,c
 11403  001992  6A31               	clrf	bmp280ReadInt32@xlsb+2,c
 11404  001994  6A32               	clrf	bmp280ReadInt32@xlsb+3,c
 11405  001996  0012               	return	
 11406  001998                     __end_ofPL156:
 11407                           	opt stack 0
 11408                           tosu	equ	0xFFF
 11409                           tosh	equ	0xFFE
 11410                           tosl	equ	0xFFD
 11411                           pclath	equ	0xFFA
 11412                           tblptru	equ	0xFF8
 11413                           tblptrh	equ	0xFF7
 11414                           tblptrl	equ	0xFF6
 11415                           tablat	equ	0xFF5
 11416                           prodh	equ	0xFF4
 11417                           prodl	equ	0xFF3
 11418                           intcon	equ	0xFF2
 11419                           intcon2	equ	0xFF1
 11420                           postinc0	equ	0xFEE
 11421                           wreg	equ	0xFE8
 11422                           indf1	equ	0xFE7
 11423                           plusw1	equ	0xFE3
 11424                           fsr1h	equ	0xFE2
 11425                           fsr1l	equ	0xFE1
 11426                           indf2	equ	0xFDF
 11427                           postinc2	equ	0xFDE
 11428                           postdec2	equ	0xFDD
 11429                           plusw2	equ	0xFDB
 11430                           fsr2h	equ	0xFDA
 11431                           fsr2l	equ	0xFD9
 11432                           status	equ	0xFD8
 11433                           
 11434 ;; *************** function ___lmul *****************
 11435 ;; Defined at:
 11436 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 11437 ;; Parameters:    Size  Location     Type
 11438 ;;  multiplier      4   14[COMRAM] unsigned long 
 11439 ;;  multiplicand    4   18[COMRAM] unsigned long 
 11440 ;; Auto vars:     Size  Location     Type
 11441 ;;  product         4   22[COMRAM] unsigned long 
 11442 ;; Return value:  Size  Location     Type
 11443 ;;                  4   14[COMRAM] unsigned long 
 11444 ;; Registers used:
 11445 ;;		wreg, status,2, status,0
 11446 ;; Tracked objects:
 11447 ;;		On entry : 0/0
 11448 ;;		On exit  : 0/0
 11449 ;;		Unchanged: 0/0
 11450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11451 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11452 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11454 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;Total ram usage:       12 bytes
 11456 ;; Hardware stack levels used:    1
 11457 ;; Hardware stack levels required when called:    3
 11458 ;; This function calls:
 11459 ;;		Nothing
 11460 ;; This function is called by:
 11461 ;;		_bmp280Convert
 11462 ;; This function uses a non-reentrant model
 11463 ;;
 11464                           
 11465                           	psect	text49
 11466  0022D6                     __ptext49:
 11467                           	opt stack 0
 11468  0022D6                     ___lmul:
 11469                           	opt stack 24
 11470                           
 11471                           ;incstack = 0
 11472  0022D6  6A17               	clrf	___lmul@product,c
 11473  0022D8  6A18               	clrf	___lmul@product+1,c
 11474  0022DA  6A19               	clrf	___lmul@product+2,c
 11475  0022DC  6A1A               	clrf	___lmul@product+3,c
 11476  0022DE                     l1344:
 11477  0022DE  A00F               	btfss	___lmul@multiplier,0,c
 11478  0022E0  D008               	goto	l5546
 11479  0022E2  5013               	movf	___lmul@multiplicand,w,c
 11480  0022E4  2617               	addwf	___lmul@product,f,c
 11481  0022E6  5014               	movf	___lmul@multiplicand+1,w,c
 11482  0022E8  2218               	addwfc	___lmul@product+1,f,c
 11483  0022EA  5015               	movf	___lmul@multiplicand+2,w,c
 11484  0022EC  2219               	addwfc	___lmul@product+2,f,c
 11485  0022EE  5016               	movf	___lmul@multiplicand+3,w,c
 11486  0022F0  221A               	addwfc	___lmul@product+3,f,c
 11487  0022F2                     l5546:
 11488  0022F2  90D8               	bcf	status,0,c
 11489  0022F4  3613               	rlcf	___lmul@multiplicand,f,c
 11490  0022F6  3614               	rlcf	___lmul@multiplicand+1,f,c
 11491  0022F8  3615               	rlcf	___lmul@multiplicand+2,f,c
 11492  0022FA  3616               	rlcf	___lmul@multiplicand+3,f,c
 11493  0022FC  90D8               	bcf	status,0,c
 11494  0022FE  3212               	rrcf	___lmul@multiplier+3,f,c
 11495  002300  3211               	rrcf	___lmul@multiplier+2,f,c
 11496  002302  3210               	rrcf	___lmul@multiplier+1,f,c
 11497  002304  320F               	rrcf	___lmul@multiplier,f,c
 11498  002306  500F               	movf	___lmul@multiplier,w,c
 11499  002308  1010               	iorwf	___lmul@multiplier+1,w,c
 11500  00230A  1011               	iorwf	___lmul@multiplier+2,w,c
 11501  00230C  1012               	iorwf	___lmul@multiplier+3,w,c
 11502  00230E  E1E7               	bnz	l1344
 11503  002310  C017  F00F         	movff	___lmul@product,?___lmul
 11504  002314  C018  F010         	movff	___lmul@product+1,?___lmul+1
 11505  002318  C019  F011         	movff	___lmul@product+2,?___lmul+2
 11506  00231C  C01A  F012         	movff	___lmul@product+3,?___lmul+3
 11507  002320  0012               	return		;funcret
 11508  002322                     __end_of___lmul:
 11509                           	opt stack 0
 11510                           tosu	equ	0xFFF
 11511                           tosh	equ	0xFFE
 11512                           tosl	equ	0xFFD
 11513                           pclath	equ	0xFFA
 11514                           tblptru	equ	0xFF8
 11515                           tblptrh	equ	0xFF7
 11516                           tblptrl	equ	0xFF6
 11517                           tablat	equ	0xFF5
 11518                           prodh	equ	0xFF4
 11519                           prodl	equ	0xFF3
 11520                           intcon	equ	0xFF2
 11521                           intcon2	equ	0xFF1
 11522                           postinc0	equ	0xFEE
 11523                           wreg	equ	0xFE8
 11524                           indf1	equ	0xFE7
 11525                           plusw1	equ	0xFE3
 11526                           fsr1h	equ	0xFE2
 11527                           fsr1l	equ	0xFE1
 11528                           indf2	equ	0xFDF
 11529                           postinc2	equ	0xFDE
 11530                           postdec2	equ	0xFDD
 11531                           plusw2	equ	0xFDB
 11532                           fsr2h	equ	0xFDA
 11533                           fsr2l	equ	0xFD9
 11534                           status	equ	0xFD8
 11535                           
 11536 ;; *************** function _FillBuf *****************
 11537 ;; Defined at:
 11538 ;;		line 157 in file "display.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;		None
 11541 ;; Auto vars:     Size  Location     Type
 11542 ;;  i               1   24[COMRAM] unsigned char 
 11543 ;; Return value:  Size  Location     Type
 11544 ;;                  1    wreg      void 
 11545 ;; Registers used:
 11546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11547 ;; Tracked objects:
 11548 ;;		On entry : 0/0
 11549 ;;		On exit  : 3F/0
 11550 ;;		Unchanged: 0/0
 11551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11554 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;Total ram usage:        3 bytes
 11557 ;; Hardware stack levels used:    1
 11558 ;; Hardware stack levels required when called:    4
 11559 ;; This function calls:
 11560 ;;		___lbdiv
 11561 ;;		___lbmod
 11562 ;; This function is called by:
 11563 ;;		_time_led
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           	psect	text50
 11568  0011C0                     __ptext50:
 11569                           	opt stack 0
 11570  0011C0                     _FillBuf:
 11571                           	opt stack 24
 11572                           
 11573                           ;display.c: 159: uint8_t i;
 11574                           ;display.c: 161: for(i=0; i<5; ++i)
 11575                           
 11576                           ;incstack = 0
 11577  0011C0  6A19               	clrf	FillBuf@i,c
 11578  0011C2                     l5824:
 11579                           
 11580                           ;display.c: 162: {
 11581                           ;display.c: 163: if((TTime.Thr/10) % 10)
 11582  0011C2  EC7B  F006         	call	PL42	;call to abstracted procedure
 11583  0011C6  51C6               	movf	(_TTime+2)& (0+255),w,b
 11584  0011C8  ECB0  F012         	call	___lbdiv
 11585  0011CC  ECB6  F013         	call	___lbmod
 11586  0011D0  0900               	iorlw	0
 11587  0011D2  E00B               	bz	l5828
 11588                           
 11589                           ;display.c: 164: Dis_Buff[i] = (*pFont)[(TTime.Thr/10) % 10][i];
 11590  0011D4  EC7B  F006         	call	PL42	;call to abstracted procedure
 11591  0011D8  51C6               	movf	(_TTime+2)& (0+255),w,b
 11592  0011DA  ECB0  F012         	call	___lbdiv
 11593  0011DE  ECB6  F013         	call	___lbmod
 11594  0011E2  D842               	call	PL14	;call to abstracted procedure
 11595  0011E4  0FA4               	addlw	low _Dis_Buff
 11596  0011E6  D86B               	call	PL46	;call to abstracted procedure
 11597  0011E8  D002               	goto	l5830
 11598  0011EA                     l5828:
 11599                           
 11600                           ;display.c: 165: else
 11601                           ;display.c: 166: Dis_Buff[i] = 0x00;
 11602  0011EA  5019               	movf	FillBuf@i,w,c
 11603  0011EC  D86E               	call	PL148	;call to abstracted procedure
 11604  0011EE                     l5830:
 11605                           
 11606                           ;display.c: 169: Dis_Buff[i + 6] = (*pFont)[TTime.Thr % 10 ][i];
 11607  0011EE  ECAF  F006         	call	PL88	;call to abstracted procedure
 11608  0011F2  ECB6  F013         	call	___lbmod
 11609  0011F6  D838               	call	PL14	;call to abstracted procedure
 11610  0011F8  0FAA               	addlw	low (_Dis_Buff+6)
 11611  0011FA  D861               	call	PL46	;call to abstracted procedure
 11612                           
 11613                           ;display.c: 170: Dis_Buff[i + 13] = (*pFont)[(TTime.Tmin/10) % 10 ][i];
 11614  0011FC  EC7B  F006         	call	PL42	;call to abstracted procedure
 11615  001200  51C5               	movf	(_TTime+1)& (0+255),w,b
 11616  001202  ECB0  F012         	call	___lbdiv
 11617  001206  ECB6  F013         	call	___lbmod
 11618  00120A  D82E               	call	PL14	;call to abstracted procedure
 11619  00120C  0FB1               	addlw	low (_Dis_Buff+13)
 11620  00120E  D857               	call	PL46	;call to abstracted procedure
 11621                           
 11622                           ;display.c: 171: Dis_Buff[i + 19] = (*pFont)[TTime.Tmin % 10 ][i];
 11623  001210  ECB4  F006         	call	PL90	;call to abstracted procedure
 11624  001214  ECB6  F013         	call	___lbmod
 11625  001218  D827               	call	PL14	;call to abstracted procedure
 11626  00121A  0FB7               	addlw	low (_Dis_Buff+19)
 11627  00121C  D850               	call	PL46	;call to abstracted procedure
 11628  00121E  2A19               	incf	FillBuf@i,f,c
 11629  001220  0E04               	movlw	4
 11630  001222  6419               	cpfsgt	FillBuf@i,c
 11631  001224  D7CE               	goto	l5824
 11632                           
 11633                           ;display.c: 173: }
 11634                           ;display.c: 175: for (i=0; i<3; ++i)
 11635  001226  6A19               	clrf	FillBuf@i,c
 11636  001228                     l5844:
 11637                           
 11638                           ;display.c: 176: {
 11639                           ;display.c: 177: Dis_Buff[i + 25] = FontS[(TTime.Ts/10) % 10 + 1][i];
 11640  001228  EC7B  F006         	call	PL42	;call to abstracted procedure
 11641  00122C  51C4               	movf	_TTime& (0+255),w,b
 11642  00122E  ECB0  F012         	call	___lbdiv
 11643  001232  ECB6  F013         	call	___lbmod
 11644  001236  D83D               	call	PL38	;call to abstracted procedure
 11645  001238  D82A               	call	PL24	;call to abstracted procedure
 11646  00123A  0FBD               	addlw	low (_Dis_Buff+25)
 11647  00123C  D840               	call	PL46	;call to abstracted procedure
 11648                           
 11649                           ;display.c: 178: Dis_Buff[i + 29] = FontS[TTime.Ts % 10 + 1][i];
 11650  00123E  ECB9  F006         	call	PL92	;call to abstracted procedure
 11651  001242  ECB6  F013         	call	___lbmod
 11652  001246  D835               	call	PL38	;call to abstracted procedure
 11653  001248  D822               	call	PL24	;call to abstracted procedure
 11654  00124A  0FC1               	addlw	low (_Dis_Buff+29)
 11655  00124C  D838               	call	PL46	;call to abstracted procedure
 11656  00124E  2A19               	incf	FillBuf@i,f,c
 11657  001250  0E02               	movlw	2
 11658  001252  6419               	cpfsgt	FillBuf@i,c
 11659  001254  D7E9               	goto	l5844
 11660                           
 11661                           ;display.c: 179: }
 11662                           ;display.c: 181: Dis_Buff[5] = 0;
 11663  001256  0100               	movlb	0	; () banked
 11664  001258  6BA9               	clrf	(_Dis_Buff+5)& (0+255),b
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;display.c: 182: Dis_Buff[11] = 0x80;
 11668  00125A  0E80               	movlw	128
 11669  00125C  6FAF               	movwf	(_Dis_Buff+11)& (0+255),b
 11670                           
 11671                           ;display.c: 183: Dis_Buff[12] = 0x80;
 11672  00125E  6FB0               	movwf	(_Dis_Buff+12)& (0+255),b
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;display.c: 184: Dis_Buff[18] = 0;
 11676  001260  6BB6               	clrf	(_Dis_Buff+18)& (0+255),b
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;display.c: 185: Dis_Buff[24] = 0;
 11680  001262  6BBC               	clrf	(_Dis_Buff+24)& (0+255),b
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;display.c: 186: Dis_Buff[28] = 0;
 11684  001264  6BC0               	clrf	(_Dis_Buff+28)& (0+255),b
 11685                           
 11686                           ; BSR set to: 0
 11687  001266  0012               	return		;funcret
 11688  001268                     __end_of_FillBuf:
 11689                           	opt stack 0
 11690  001268                     PL14:
 11691                           	opt stack 24
 11692  001268  0D05               	mullw	5
 11693  00126A  C063  F017         	movff	_pFont,??_FillBuf
 11694  00126E  C064  F018         	movff	_pFont+1,??_FillBuf+1
 11695  001272  50F3               	movf	prodl,w,c
 11696  001274  2617               	addwf	??_FillBuf,f,c
 11697  001276  50F4               	movf	prodh,w,c
 11698  001278  2218               	addwfc	??_FillBuf+1,f,c
 11699  00127A  5019               	movf	FillBuf@i,w,c
 11700  00127C  2617               	addwf	??_FillBuf,f,c
 11701  00127E  0E00               	movlw	0
 11702  001280  2218               	addwfc	??_FillBuf+1,f,c
 11703  001282  C017  FFF6         	movff	??_FillBuf,tblptrl
 11704  001286  C018  FFF7         	movff	??_FillBuf+1,tblptrh
 11705  00128A                     	if	0	;tblptru may be non-zero
 11706  00128A                     	endif
 11707  00128A                     	if	0	;tblptru may be non-zero
 11708  00128A                     	endif
 11709  00128A  5019               	movf	FillBuf@i,w,c
 11710  00128C  0012               	return	
 11711  00128E                     __end_ofPL14:
 11712                           	opt stack 0
 11713  00128E                     PL24:
 11714                           	opt stack 24
 11715  00128E  50F3               	movf	prodl,w,c
 11716  001290  2617               	addwf	??_FillBuf,f,c
 11717  001292  50F4               	movf	prodh,w,c
 11718  001294  2218               	addwfc	??_FillBuf+1,f,c
 11719  001296  5019               	movf	FillBuf@i,w,c
 11720  001298  2617               	addwf	??_FillBuf,f,c
 11721  00129A  0E00               	movlw	0
 11722  00129C  2218               	addwfc	??_FillBuf+1,f,c
 11723  00129E  0E03               	movlw	3
 11724  0012A0  2617               	addwf	??_FillBuf,f,c
 11725  0012A2  0E00               	movlw	0
 11726  0012A4  2218               	addwfc	??_FillBuf+1,f,c
 11727  0012A6  C017  FFF6         	movff	??_FillBuf,tblptrl
 11728  0012AA  C018  FFF7         	movff	??_FillBuf+1,tblptrh
 11729  0012AE                     	if	0	;tblptru may be non-zero
 11730  0012AE                     	endif
 11731  0012AE                     	if	0	;tblptru may be non-zero
 11732  0012AE                     	endif
 11733  0012AE  5019               	movf	FillBuf@i,w,c
 11734  0012B0  0012               	return	
 11735  0012B2                     __end_ofPL24:
 11736                           	opt stack 0
 11737  0012B2                     PL38:
 11738                           	opt stack 24
 11739  0012B2  0D03               	mullw	3
 11740  0012B4  0EB0               	movlw	low _FontS
 11741  0012B6  6E17               	movwf	??_FillBuf& (0+255),c
 11742  0012B8  0EBF               	movlw	high _FontS
 11743  0012BA  6E18               	movwf	(??_FillBuf+1)& (0+255),c
 11744  0012BC  0012               	return	
 11745  0012BE                     __end_ofPL38:
 11746                           	opt stack 0
 11747  0012BE                     PL46:
 11748                           	opt stack 24
 11749  0012BE  6ED9               	movwf	fsr2l,c
 11750  0012C0  6ADA               	clrf	fsr2h,c
 11751  0012C2  0008               	tblrd		*
 11752  0012C4  CFF5 FFDF          	movff	tablat,indf2
 11753  0012C8  0012               	return	
 11754  0012CA                     __end_ofPL46:
 11755                           	opt stack 0
 11756  0012CA                     PL148:
 11757                           	opt stack 27
 11758  0012CA  0FA4               	addlw	low _Dis_Buff
 11759  0012CC  6ED9               	movwf	fsr2l,c
 11760  0012CE  6ADA               	clrf	fsr2h,c
 11761  0012D0  6ADF               	clrf	indf2,c
 11762  0012D2  0012               	return	
 11763  0012D4                     __end_ofPL148:
 11764                           	opt stack 0
 11765                           tosu	equ	0xFFF
 11766                           tosh	equ	0xFFE
 11767                           tosl	equ	0xFFD
 11768                           pclath	equ	0xFFA
 11769                           tblptru	equ	0xFF8
 11770                           tblptrh	equ	0xFF7
 11771                           tblptrl	equ	0xFF6
 11772                           tablat	equ	0xFF5
 11773                           prodh	equ	0xFF4
 11774                           prodl	equ	0xFF3
 11775                           intcon	equ	0xFF2
 11776                           intcon2	equ	0xFF1
 11777                           postinc0	equ	0xFEE
 11778                           wreg	equ	0xFE8
 11779                           indf1	equ	0xFE7
 11780                           plusw1	equ	0xFE3
 11781                           fsr1h	equ	0xFE2
 11782                           fsr1l	equ	0xFE1
 11783                           indf2	equ	0xFDF
 11784                           postinc2	equ	0xFDE
 11785                           postdec2	equ	0xFDD
 11786                           plusw2	equ	0xFDB
 11787                           fsr2h	equ	0xFDA
 11788                           fsr2l	equ	0xFD9
 11789                           status	equ	0xFD8
 11790                           
 11791 ;; *************** function _write_eep *****************
 11792 ;; Defined at:
 11793 ;;		line 5 in file "eeprom.c"
 11794 ;; Parameters:    Size  Location     Type
 11795 ;;  address         1    wreg     unsigned char 
 11796 ;;  data            1   14[COMRAM] unsigned char 
 11797 ;; Auto vars:     Size  Location     Type
 11798 ;;  address         1   15[COMRAM] unsigned char 
 11799 ;; Return value:  Size  Location     Type
 11800 ;;                  1    wreg      void 
 11801 ;; Registers used:
 11802 ;;		wreg, status,2
 11803 ;; Tracked objects:
 11804 ;;		On entry : 0/0
 11805 ;;		On exit  : 0/0
 11806 ;;		Unchanged: 0/0
 11807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11808 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;Total ram usage:        2 bytes
 11813 ;; Hardware stack levels used:    1
 11814 ;; Hardware stack levels required when called:    3
 11815 ;; This function calls:
 11816 ;;		Nothing
 11817 ;; This function is called by:
 11818 ;;		_set_font_set
 11819 ;; This function uses a non-reentrant model
 11820 ;;
 11821                           
 11822                           	psect	text51
 11823  0027B6                     __ptext51:
 11824                           	opt stack 0
 11825  0027B6                     _write_eep:
 11826                           	opt stack 25
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;incstack = 0
 11830                           ;write_eep@address stored from wreg
 11831  0027B6  6E10               	movwf	write_eep@address,c
 11832  0027B8                     l1098:
 11833  0027B8  B2A6               	btfsc	4006,1,c	;volatile
 11834  0027BA  D7FE               	goto	l1098
 11835                           
 11836                           ;eeprom.c: 11: EEADR = address;
 11837  0027BC  C010  FFA9         	movff	write_eep@address,4009	;volatile
 11838                           
 11839                           ;eeprom.c: 12: EEDATA = data;
 11840  0027C0  C00F  FFA8         	movff	write_eep@data,4008	;volatile
 11841                           
 11842                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
 11843  0027C4  9EA6               	bcf	4006,7,c	;volatile
 11844                           
 11845                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
 11846  0027C6  9CA6               	bcf	4006,6,c	;volatile
 11847                           
 11848                           ;eeprom.c: 15: EECON1bits.WREN = 1;
 11849  0027C8  84A6               	bsf	4006,2,c	;volatile
 11850                           
 11851                           ;eeprom.c: 16: INTCONbits.GIE = 0;
 11852  0027CA  9EF2               	bcf	intcon,7,c	;volatile
 11853                           
 11854                           ;eeprom.c: 18: EECON2 = 0x55;
 11855  0027CC  0E55               	movlw	85
 11856  0027CE  6EA7               	movwf	4007,c	;volatile
 11857                           
 11858                           ;eeprom.c: 19: EECON2 = 0xAA;
 11859  0027D0  0EAA               	movlw	170
 11860  0027D2  6EA7               	movwf	4007,c	;volatile
 11861                           
 11862                           ;eeprom.c: 20: EECON1bits.WR = 1;
 11863  0027D4  82A6               	bsf	4006,1,c	;volatile
 11864                           
 11865                           ;eeprom.c: 22: INTCONbits.GIE = 1;
 11866  0027D6  8EF2               	bsf	intcon,7,c	;volatile
 11867  0027D8  0CAA               	retlw	170	;funcret
 11868  0027DA                     __end_of_write_eep:
 11869                           	opt stack 0
 11870                           tosu	equ	0xFFF
 11871                           tosh	equ	0xFFE
 11872                           tosl	equ	0xFFD
 11873                           pclath	equ	0xFFA
 11874                           tblptru	equ	0xFF8
 11875                           tblptrh	equ	0xFF7
 11876                           tblptrl	equ	0xFF6
 11877                           tablat	equ	0xFF5
 11878                           prodh	equ	0xFF4
 11879                           prodl	equ	0xFF3
 11880                           intcon	equ	0xFF2
 11881                           intcon2	equ	0xFF1
 11882                           postinc0	equ	0xFEE
 11883                           wreg	equ	0xFE8
 11884                           indf1	equ	0xFE7
 11885                           plusw1	equ	0xFE3
 11886                           fsr1h	equ	0xFE2
 11887                           fsr1l	equ	0xFE1
 11888                           indf2	equ	0xFDF
 11889                           postinc2	equ	0xFDE
 11890                           postdec2	equ	0xFDD
 11891                           plusw2	equ	0xFDB
 11892                           fsr2h	equ	0xFDA
 11893                           fsr2l	equ	0xFD9
 11894                           status	equ	0xFD8
 11895                           
 11896 ;; *************** function _set_font *****************
 11897 ;; Defined at:
 11898 ;;		line 534 in file "common.c"
 11899 ;; Parameters:    Size  Location     Type
 11900 ;;		None
 11901 ;; Auto vars:     Size  Location     Type
 11902 ;;		None
 11903 ;; Return value:  Size  Location     Type
 11904 ;;                  1    wreg      void 
 11905 ;; Registers used:
 11906 ;;		wreg, status,2, status,0
 11907 ;; Tracked objects:
 11908 ;;		On entry : 0/0
 11909 ;;		On exit  : 0/0
 11910 ;;		Unchanged: 0/0
 11911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11916 ;;Total ram usage:        0 bytes
 11917 ;; Hardware stack levels used:    1
 11918 ;; Hardware stack levels required when called:    3
 11919 ;; This function calls:
 11920 ;;		Nothing
 11921 ;; This function is called by:
 11922 ;;		_SYSTEM_Initialize
 11923 ;;		_set_font_set
 11924 ;; This function uses a non-reentrant model
 11925 ;;
 11926                           
 11927                           	psect	text52
 11928  002322                     __ptext52:
 11929                           	opt stack 0
 11930  002322                     _set_font:
 11931                           	opt stack 26
 11932                           
 11933                           ;common.c: 536: switch (type_font)
 11934                           
 11935                           ;incstack = 0
 11936  002322  D019               	goto	l5664
 11937  002324                     l5652:
 11938                           
 11939                           ;common.c: 539: pFont = &dFont1;
 11940  002324  0E7E               	movlw	low _dFont1
 11941  002326  6E63               	movwf	_pFont,c
 11942  002328  0EBF               	movlw	high _dFont1
 11943  00232A  6E64               	movwf	_pFont+1,c
 11944                           
 11945                           ;common.c: 540: break;
 11946  00232C  0012               	return	
 11947  00232E                     l5654:
 11948                           
 11949                           ;common.c: 542: pFont = &dFont2;
 11950  00232E  0E4C               	movlw	low _dFont2
 11951  002330  6E63               	movwf	_pFont,c
 11952  002332  0EBF               	movlw	high _dFont2
 11953  002334  6E64               	movwf	_pFont+1,c
 11954                           
 11955                           ;common.c: 543: break;
 11956  002336  0012               	return	
 11957  002338                     l5656:
 11958                           
 11959                           ;common.c: 545: pFont = &dFont3;
 11960  002338  0E1A               	movlw	low _dFont3
 11961  00233A  6E63               	movwf	_pFont,c
 11962  00233C  0EBF               	movlw	high _dFont3
 11963  00233E  6E64               	movwf	_pFont+1,c
 11964                           
 11965                           ;common.c: 546: break;
 11966  002340  0012               	return	
 11967  002342                     l5658:
 11968                           
 11969                           ;common.c: 548: pFont = &dFont4;
 11970  002342  0EE8               	movlw	low _dFont4
 11971  002344  6E63               	movwf	_pFont,c
 11972  002346  0EBE               	movlw	high _dFont4
 11973  002348  6E64               	movwf	_pFont+1,c
 11974                           
 11975                           ;common.c: 549: break;
 11976  00234A  0012               	return	
 11977  00234C                     l5660:
 11978                           
 11979                           ;common.c: 551: pFont = &dFont5;
 11980  00234C  0EB6               	movlw	low _dFont5
 11981  00234E  6E63               	movwf	_pFont,c
 11982  002350  0EBE               	movlw	high _dFont5
 11983  002352  6E64               	movwf	_pFont+1,c
 11984                           
 11985                           ;common.c: 552: break;
 11986  002354  0012               	return	
 11987  002356                     l5664:
 11988  002356  5062               	movf	_type_font,w,c
 11989                           
 11990                           ; Switch size 1, requested type "space"
 11991                           ; Number of cases is 5, Range of values is 1 to 5
 11992                           ; switch strategies available:
 11993                           ; Name         Instructions Cycles
 11994                           ; simple_byte           16     9 (average)
 11995                           ;	Chosen strategy is simple_byte
 11996  002358  0A01               	xorlw	1	; case 1
 11997  00235A  E0E4               	bz	l5652
 11998  00235C  0A03               	xorlw	3	; case 2
 11999  00235E  E0E7               	bz	l5654
 12000  002360  0A01               	xorlw	1	; case 3
 12001  002362  E0EA               	bz	l5656
 12002  002364  0A07               	xorlw	7	; case 4
 12003  002366  E0ED               	bz	l5658
 12004  002368  0A01               	xorlw	1	; case 5
 12005  00236A  E0F0               	bz	l5660
 12006  00236C  0012               	return		;funcret
 12007  00236E                     __end_of_set_font:
 12008                           	opt stack 0
 12009                           tosu	equ	0xFFF
 12010                           tosh	equ	0xFFE
 12011                           tosl	equ	0xFFD
 12012                           pclath	equ	0xFFA
 12013                           tblptru	equ	0xFF8
 12014                           tblptrh	equ	0xFF7
 12015                           tblptrl	equ	0xFF6
 12016                           tablat	equ	0xFF5
 12017                           prodh	equ	0xFF4
 12018                           prodl	equ	0xFF3
 12019                           intcon	equ	0xFF2
 12020                           intcon2	equ	0xFF1
 12021                           postinc0	equ	0xFEE
 12022                           wreg	equ	0xFE8
 12023                           indf1	equ	0xFE7
 12024                           plusw1	equ	0xFE3
 12025                           fsr1h	equ	0xFE2
 12026                           fsr1l	equ	0xFE1
 12027                           indf2	equ	0xFDF
 12028                           postinc2	equ	0xFDE
 12029                           postdec2	equ	0xFDD
 12030                           plusw2	equ	0xFDB
 12031                           fsr2h	equ	0xFDA
 12032                           fsr2l	equ	0xFD9
 12033                           status	equ	0xFD8
 12034                           
 12035 ;; *************** function _putchar_b_buf *****************
 12036 ;; Defined at:
 12037 ;;		line 51 in file "display.c"
 12038 ;; Parameters:    Size  Location     Type
 12039 ;;  x               1    wreg     unsigned char 
 12040 ;;  symbol          1   22[COMRAM] unsigned char 
 12041 ;;  pF              2   23[COMRAM] PTR unsigned char [5][0]
 12042 ;;		 -> dFont5(50), dFont4(50), dFont3(50), dFont2(50), 
 12043 ;;		 -> Font(1280), dFont1(50), 
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;  x               1   28[COMRAM] unsigned char 
 12046 ;;  i               1   30[COMRAM] unsigned char 
 12047 ;;  j               1   29[COMRAM] unsigned char 
 12048 ;;  mask            1   27[COMRAM] unsigned char 
 12049 ;; Return value:  Size  Location     Type
 12050 ;;                  1    wreg      void 
 12051 ;; Registers used:
 12052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12058 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12059 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12060 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12061 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12062 ;;Total ram usage:        9 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    4
 12065 ;; This function calls:
 12066 ;;		_pixel_off
 12067 ;;		_pixel_on
 12068 ;; This function is called by:
 12069 ;;		_time_set_min
 12070 ;;		_time_set_hr
 12071 ;;		_time_set_yr
 12072 ;;		_time_set_mt
 12073 ;;		_time_set_dt
 12074 ;;		_time_set_dy
 12075 ;;		_set_font_set
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           	psect	text53
 12080  001FA8                     __ptext53:
 12081                           	opt stack 0
 12082  001FA8                     _putchar_b_buf:
 12083                           	opt stack 24
 12084                           
 12085                           ;incstack = 0
 12086                           ;putchar_b_buf@x stored from wreg
 12087  001FA8  6E1D               	movwf	putchar_b_buf@x,c
 12088                           
 12089                           ;display.c: 53: uint8_t i, j, mask=0x01;
 12090  001FAA  0E01               	movlw	1
 12091  001FAC  6E1C               	movwf	putchar_b_buf@mask,c
 12092                           
 12093                           ;display.c: 56: for(i=0; i<5; i++)
 12094  001FAE  6A1F               	clrf	putchar_b_buf@i,c
 12095  001FB0                     l433:
 12096                           
 12097                           ;display.c: 57: {
 12098                           ;display.c: 58: for(j=0;j<8;j++)
 12099  001FB0  6A1E               	clrf	putchar_b_buf@j,c
 12100  001FB2                     l5740:
 12101                           
 12102                           ;display.c: 59: {
 12103                           ;display.c: 60: if((*pF)[symbol] [i] & mask)
 12104  001FB2  5017               	movf	putchar_b_buf@symbol,w,c
 12105  001FB4  0D05               	mullw	5
 12106  001FB6  C018  F01A         	movff	putchar_b_buf@pF,??_putchar_b_buf
 12107  001FBA  C019  F01B         	movff	putchar_b_buf@pF+1,??_putchar_b_buf+1
 12108  001FBE  50F3               	movf	prodl,w,c
 12109  001FC0  261A               	addwf	??_putchar_b_buf,f,c
 12110  001FC2  50F4               	movf	prodh,w,c
 12111  001FC4  221B               	addwfc	??_putchar_b_buf+1,f,c
 12112  001FC6  501F               	movf	putchar_b_buf@i,w,c
 12113  001FC8  261A               	addwf	??_putchar_b_buf,f,c
 12114  001FCA  0E00               	movlw	0
 12115  001FCC  221B               	addwfc	??_putchar_b_buf+1,f,c
 12116  001FCE  C01A  FFF6         	movff	??_putchar_b_buf,tblptrl
 12117  001FD2  C01B  FFF7         	movff	??_putchar_b_buf+1,tblptrh
 12118  001FD6                     	if	0	;tblptru may be non-zero
 12119  001FD6                     	endif
 12120  001FD6                     	if	0	;tblptru may be non-zero
 12121  001FD6                     	endif
 12122  001FD6  0008               	tblrd		*
 12123  001FD8  50F5               	movf	tablat,w,c
 12124  001FDA  141C               	andwf	putchar_b_buf@mask,w,c
 12125  001FDC  E007               	bz	l5744
 12126                           
 12127                           ;display.c: 61: pixel_on(x+i,j);
 12128  001FDE  C01E  F00F         	movff	putchar_b_buf@j,pixel_on@y
 12129  001FE2  501D               	movf	putchar_b_buf@x,w,c
 12130  001FE4  241F               	addwf	putchar_b_buf@i,w,c
 12131  001FE6  ECFF  F013         	call	_pixel_on
 12132  001FEA  D006               	goto	l5746
 12133  001FEC                     l5744:
 12134                           
 12135                           ;display.c: 62: else
 12136                           ;display.c: 63: pixel_off(x+i,j);
 12137  001FEC  C01E  F00F         	movff	putchar_b_buf@j,pixel_off@y
 12138  001FF0  501D               	movf	putchar_b_buf@x,w,c
 12139  001FF2  241F               	addwf	putchar_b_buf@i,w,c
 12140  001FF4  EC8F  F013         	call	_pixel_off
 12141  001FF8                     l5746:
 12142                           
 12143                           ;display.c: 65: mask = mask<<1;
 12144  001FF8  90D8               	bcf	status,0,c
 12145  001FFA  361C               	rlcf	putchar_b_buf@mask,f,c
 12146  001FFC  2A1E               	incf	putchar_b_buf@j,f,c
 12147  001FFE  0E07               	movlw	7
 12148  002000  641E               	cpfsgt	putchar_b_buf@j,c
 12149  002002  D7D7               	goto	l5740
 12150                           
 12151                           ;display.c: 66: };
 12152                           ;display.c: 68: mask=0x01;
 12153  002004  0E01               	movlw	1
 12154  002006  6E1C               	movwf	putchar_b_buf@mask,c
 12155  002008  2A1F               	incf	putchar_b_buf@i,f,c
 12156  00200A  0E04               	movlw	4
 12157  00200C  641F               	cpfsgt	putchar_b_buf@i,c
 12158  00200E  D7D0               	goto	l433
 12159  002010  0C04               	retlw	4
 12160  002012                     __end_of_putchar_b_buf:
 12161                           	opt stack 0
 12162                           tosu	equ	0xFFF
 12163                           tosh	equ	0xFFE
 12164                           tosl	equ	0xFFD
 12165                           pclath	equ	0xFFA
 12166                           tblptru	equ	0xFF8
 12167                           tblptrh	equ	0xFF7
 12168                           tblptrl	equ	0xFF6
 12169                           tablat	equ	0xFF5
 12170                           prodh	equ	0xFF4
 12171                           prodl	equ	0xFF3
 12172                           intcon	equ	0xFF2
 12173                           intcon2	equ	0xFF1
 12174                           postinc0	equ	0xFEE
 12175                           wreg	equ	0xFE8
 12176                           indf1	equ	0xFE7
 12177                           plusw1	equ	0xFE3
 12178                           fsr1h	equ	0xFE2
 12179                           fsr1l	equ	0xFE1
 12180                           indf2	equ	0xFDF
 12181                           postinc2	equ	0xFDE
 12182                           postdec2	equ	0xFDD
 12183                           plusw2	equ	0xFDB
 12184                           fsr2h	equ	0xFDA
 12185                           fsr2l	equ	0xFD9
 12186                           status	equ	0xFD8
 12187                           
 12188 ;; *************** function _sprintf *****************
 12189 ;; Defined at:
 12190 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;  sp              2   14[COMRAM] PTR unsigned char 
 12193 ;;		 -> text_buf(100), 
 12194 ;;  f               2   16[COMRAM] PTR const unsigned char 
 12195 ;;		 -> STR_2(36), STR_1(10), 
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;  tmpval          4    0        struct .
 12198 ;;  cp              3    0        PTR const unsigned char 
 12199 ;;  len             2    0        unsigned int 
 12200 ;;  val             2    0        unsigned int 
 12201 ;;  c               1   18[COMRAM] char 
 12202 ;;  flag            1    0        unsigned char 
 12203 ;;  prec            1    0        char 
 12204 ;;  ap              1    0        PTR void [1]
 12205 ;;		 -> ?_sprintf(2), 
 12206 ;; Return value:  Size  Location     Type
 12207 ;;                  2   14[COMRAM] int 
 12208 ;; Registers used:
 12209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12210 ;; Tracked objects:
 12211 ;;		On entry : 3F/0
 12212 ;;		On exit  : 3F/0
 12213 ;;		Unchanged: 3F/0
 12214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12215 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12218 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12219 ;;Total ram usage:        5 bytes
 12220 ;; Hardware stack levels used:    1
 12221 ;; Hardware stack levels required when called:    3
 12222 ;; This function calls:
 12223 ;;		Nothing
 12224 ;; This function is called by:
 12225 ;;		_pressure
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           	psect	text54
 12230  002594                     __ptext54:
 12231                           	opt stack 0
 12232  002594                     _sprintf:
 12233                           	opt stack 25
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;doprnt.c: 536: while(c = *f++) {
 12237                           
 12238                           ;incstack = 0
 12239  002594  D005               	goto	l5962
 12240  002596                     l5958:
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;doprnt.c: 540: {
 12244                           ;doprnt.c: 541: ((*sp++ = (c)));
 12245  002596  D812               	call	PL134	;call to abstracted procedure
 12246  002598  C013  FFDF         	movff	sprintf@c,indf2
 12247                           
 12248                           ; BSR set to: 0
 12249  00259C  4A0F               	infsnz	sprintf@sp,f,c
 12250  00259E  2A10               	incf	sprintf@sp+1,f,c
 12251  0025A0                     l5962:
 12252                           
 12253                           ; BSR set to: 0
 12254  0025A0  C011  FFF6         	movff	sprintf@f,tblptrl
 12255  0025A4  C012  FFF7         	movff	sprintf@f+1,tblptrh
 12256  0025A8  4A11               	infsnz	sprintf@f,f,c
 12257  0025AA  2A12               	incf	sprintf@f+1,f,c
 12258  0025AC                     	if	0	;tblptru may be non-zero
 12259  0025AC                     	endif
 12260  0025AC                     	if	0	;tblptru may be non-zero
 12261  0025AC                     	endif
 12262  0025AC  0008               	tblrd		*
 12263  0025AE  CFF5 F013          	movff	tablat,sprintf@c
 12264  0025B2  5013               	movf	sprintf@c,w,c
 12265  0025B4  E1F0               	bnz	l5958
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;doprnt.c: 1469: }
 12269                           ;doprnt.c: 1533: }
 12270                           ;doprnt.c: 1538: *sp = 0;
 12271  0025B6  D802               	call	PL134	;call to abstracted procedure
 12272  0025B8  6ADF               	clrf	indf2,c
 12273                           
 12274                           ; BSR set to: 0
 12275  0025BA  0C00               	retlw	0	;funcret
 12276  0025BC                     __end_of_sprintf:
 12277                           	opt stack 0
 12278  0025BC                     PL134:
 12279                           	opt stack 25
 12280  0025BC  C00F  FFD9         	movff	sprintf@sp,fsr2l
 12281  0025C0  C010  FFDA         	movff	sprintf@sp+1,fsr2h
 12282  0025C4  0012               	return	
 12283  0025C6                     __end_ofPL134:
 12284                           	opt stack 0
 12285                           tosu	equ	0xFFF
 12286                           tosh	equ	0xFFE
 12287                           tosl	equ	0xFFD
 12288                           pclath	equ	0xFFA
 12289                           tblptru	equ	0xFF8
 12290                           tblptrh	equ	0xFF7
 12291                           tblptrl	equ	0xFF6
 12292                           tablat	equ	0xFF5
 12293                           prodh	equ	0xFF4
 12294                           prodl	equ	0xFF3
 12295                           intcon	equ	0xFF2
 12296                           intcon2	equ	0xFF1
 12297                           postinc0	equ	0xFEE
 12298                           wreg	equ	0xFE8
 12299                           indf1	equ	0xFE7
 12300                           plusw1	equ	0xFE3
 12301                           fsr1h	equ	0xFE2
 12302                           fsr1l	equ	0xFE1
 12303                           indf2	equ	0xFDF
 12304                           postinc2	equ	0xFDE
 12305                           postdec2	equ	0xFDD
 12306                           plusw2	equ	0xFDB
 12307                           fsr2h	equ	0xFDA
 12308                           fsr2l	equ	0xFD9
 12309                           status	equ	0xFD8
 12310                           
 12311 ;; *************** function _interval_scroll_text *****************
 12312 ;; Defined at:
 12313 ;;		line 301 in file "display.c"
 12314 ;; Parameters:    Size  Location     Type
 12315 ;;		None
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;  i               1   21[COMRAM] unsigned char 
 12318 ;; Return value:  Size  Location     Type
 12319 ;;                  1    wreg      void 
 12320 ;; Registers used:
 12321 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12322 ;; Tracked objects:
 12323 ;;		On entry : 3F/0
 12324 ;;		On exit  : 3F/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12330 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12331 ;;Total ram usage:        2 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; Hardware stack levels required when called:    5
 12334 ;; This function calls:
 12335 ;;		_Update_Matrix
 12336 ;;		_scroll_text
 12337 ;; This function is called by:
 12338 ;;		_pressure
 12339 ;; This function uses a non-reentrant model
 12340 ;;
 12341                           
 12342                           	psect	text55
 12343  002624                     __ptext55:
 12344                           	opt stack 0
 12345  002624                     _interval_scroll_text:
 12346                           	opt stack 23
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;display.c: 303: uint8_t i;
 12350                           ;display.c: 305: while(scroll_text())
 12351                           
 12352                           ; BSR set to: 0
 12353                           ;incstack = 0
 12354  002624  D010               	goto	l5906
 12355  002626                     l5894:
 12356                           
 12357                           ; BSR set to: 0
 12358                           ;display.c: 306: {
 12359                           ;display.c: 307: Update_Matrix(Dis_Buff);
 12360  002626  0EA4               	movlw	low _Dis_Buff
 12361  002628  6E11               	movwf	Update_Matrix@buf,c
 12362  00262A  EC3D  F012         	call	_Update_Matrix	;wreg free
 12363                           
 12364                           ;display.c: 308: for(i=0; i<50; i++)
 12365  00262E  6A16               	clrf	interval_scroll_text@i,c
 12366  002630                     l5902:
 12367                           
 12368                           ;display.c: 309: _delay((unsigned long)((1)*(40000000/4000.0)));
 12369  002630  0E0D               	movlw	13
 12370  002632  6E15               	movwf	??_interval_scroll_text& (0+255),c
 12371  002634  0EFC               	movlw	252
 12372  002636                     u5387:
 12373  002636  2EE8               	decfsz	wreg,f,c
 12374  002638  D7FE               	bra	u5387
 12375  00263A  2E15               	decfsz	??_interval_scroll_text& (0+255),f,c
 12376  00263C  D7FC               	bra	u5387
 12377  00263E  2A16               	incf	interval_scroll_text@i,f,c
 12378  002640  0E31               	movlw	49
 12379  002642  6416               	cpfsgt	interval_scroll_text@i,c
 12380  002644  D7F5               	goto	l5902
 12381  002646                     l5906:
 12382  002646  EC22  F00F         	call	_scroll_text	;wreg free
 12383  00264A  0900               	iorlw	0
 12384  00264C  E1EC               	bnz	l5894
 12385                           
 12386                           ; BSR set to: 0
 12387  00264E  0012               	return		;funcret
 12388  002650                     __end_of_interval_scroll_text:
 12389                           	opt stack 0
 12390                           tosu	equ	0xFFF
 12391                           tosh	equ	0xFFE
 12392                           tosl	equ	0xFFD
 12393                           pclath	equ	0xFFA
 12394                           tblptru	equ	0xFF8
 12395                           tblptrh	equ	0xFF7
 12396                           tblptrl	equ	0xFF6
 12397                           tablat	equ	0xFF5
 12398                           prodh	equ	0xFF4
 12399                           prodl	equ	0xFF3
 12400                           intcon	equ	0xFF2
 12401                           intcon2	equ	0xFF1
 12402                           postinc0	equ	0xFEE
 12403                           wreg	equ	0xFE8
 12404                           indf1	equ	0xFE7
 12405                           plusw1	equ	0xFE3
 12406                           fsr1h	equ	0xFE2
 12407                           fsr1l	equ	0xFE1
 12408                           indf2	equ	0xFDF
 12409                           postinc2	equ	0xFDE
 12410                           postdec2	equ	0xFDD
 12411                           plusw2	equ	0xFDB
 12412                           fsr2h	equ	0xFDA
 12413                           fsr2l	equ	0xFD9
 12414                           status	equ	0xFD8
 12415                           
 12416 ;; *************** function _scroll_text *****************
 12417 ;; Defined at:
 12418 ;;		line 235 in file "display.c"
 12419 ;; Parameters:    Size  Location     Type
 12420 ;;		None
 12421 ;; Auto vars:     Size  Location     Type
 12422 ;;  i               1   16[COMRAM] unsigned char 
 12423 ;; Return value:  Size  Location     Type
 12424 ;;                  1    wreg      unsigned char 
 12425 ;; Registers used:
 12426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 12427 ;; Tracked objects:
 12428 ;;		On entry : 0/0
 12429 ;;		On exit  : 3F/0
 12430 ;;		Unchanged: 0/0
 12431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12433 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;Total ram usage:        3 bytes
 12437 ;; Hardware stack levels used:    1
 12438 ;; Hardware stack levels required when called:    3
 12439 ;; This function calls:
 12440 ;;		Nothing
 12441 ;; This function is called by:
 12442 ;;		_interval_scroll_text
 12443 ;; This function uses a non-reentrant model
 12444 ;;
 12445                           
 12446                           	psect	text56
 12447  001E44                     __ptext56:
 12448                           	opt stack 0
 12449  001E44                     _scroll_text:
 12450                           	opt stack 24
 12451                           
 12452                           ;display.c: 237: uint8_t i;
 12453                           ;display.c: 239: for (i=0; i<31; i++)
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;incstack = 0
 12457  001E44  6A11               	clrf	scroll_text@i,c
 12458  001E46                     l5432:
 12459                           
 12460                           ;display.c: 240: Dis_Buff[i] = Dis_Buff[i+1];
 12461  001E46  5011               	movf	scroll_text@i,w,c
 12462  001E48  0FA5               	addlw	low (_Dis_Buff+1)
 12463  001E4A  6ED9               	movwf	fsr2l,c
 12464  001E4C  6ADA               	clrf	fsr2h,c
 12465  001E4E  5011               	movf	scroll_text@i,w,c
 12466  001E50  EC99  F010         	call	PL104	;call to abstracted procedure
 12467  001E54  2A11               	incf	scroll_text@i,f,c
 12468  001E56  0E1E               	movlw	30
 12469  001E58  6411               	cpfsgt	scroll_text@i,c
 12470  001E5A  D7F5               	goto	l5432
 12471                           
 12472                           ;display.c: 242: if ((i_bchar) >= 5)
 12473  001E5C  0E04               	movlw	4
 12474  001E5E  6460               	cpfsgt	_i_bchar,c
 12475  001E60  D00D               	goto	l5454
 12476                           
 12477                           ;display.c: 243: {
 12478                           ;display.c: 244: if (text_buf[i_char] == 0)
 12479  001E62  D823               	call	PL70	;call to abstracted procedure
 12480  001E64  E107               	bnz	l497
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;display.c: 245: {
 12484                           ;display.c: 246: i_bchar++;
 12485  001E66  2A60               	incf	_i_bchar,f,c
 12486                           
 12487                           ; BSR set to: 0
 12488                           ;display.c: 247: if (i_bchar >= 32)
 12489  001E68  0E1F               	movlw	31
 12490  001E6A  6460               	cpfsgt	_i_bchar,c
 12491  001E6C  0C01               	retlw	1
 12492                           
 12493                           ; BSR set to: 0
 12494                           ;display.c: 248: {
 12495                           ;display.c: 249: i_char = 0;
 12496  001E6E  6BA2               	clrf	_i_char& (0+255),b
 12497                           
 12498                           ;display.c: 250: i_bchar = 0;
 12499  001E70  6A60               	clrf	_i_bchar,c
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;display.c: 251: return 0;
 12503  001E72  0C00               	retlw	0
 12504  001E74                     l497:
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;display.c: 254: else
 12508                           ;display.c: 255: {
 12509                           ;display.c: 256: Dis_Buff[31] = 0;
 12510  001E74  6BC3               	clrf	(_Dis_Buff+31)& (0+255),b
 12511                           
 12512                           ;display.c: 257: i_bchar = 0;
 12513  001E76  6A60               	clrf	_i_bchar,c
 12514                           
 12515                           ; BSR set to: 0
 12516                           ;display.c: 258: i_char++;
 12517  001E78  2BA2               	incf	_i_char& (0+255),f,b
 12518  001E7A  0C01               	retlw	1
 12519  001E7C                     l5454:
 12520                           
 12521                           ;display.c: 261: else
 12522                           ;display.c: 262: {
 12523                           ;display.c: 263: Dis_Buff[31] = Font[ text_buf[i_char]][i_bchar++];
 12524  001E7C  D816               	call	PL70	;call to abstracted procedure
 12525  001E7E  0D05               	mullw	5
 12526  001E80  0EB6               	movlw	low _Font
 12527  001E82  6E0F               	movwf	??_scroll_text& (0+255),c
 12528  001E84  0EB9               	movlw	high _Font
 12529  001E86  6E10               	movwf	(??_scroll_text+1)& (0+255),c
 12530  001E88  50F3               	movf	prodl,w,c
 12531  001E8A  260F               	addwf	??_scroll_text,f,c
 12532  001E8C  50F4               	movf	prodh,w,c
 12533  001E8E  2210               	addwfc	??_scroll_text+1,f,c
 12534  001E90  5060               	movf	_i_bchar,w,c
 12535  001E92  260F               	addwf	??_scroll_text,f,c
 12536  001E94  0E00               	movlw	0
 12537  001E96  2210               	addwfc	??_scroll_text+1,f,c
 12538  001E98  C00F  FFF6         	movff	??_scroll_text,tblptrl
 12539  001E9C  C010  FFF7         	movff	??_scroll_text+1,tblptrh
 12540  001EA0                     	if	0	;tblptru may be non-zero
 12541  001EA0                     	endif
 12542  001EA0                     	if	0	;tblptru may be non-zero
 12543  001EA0                     	endif
 12544  001EA0  0008               	tblrd		*
 12545  001EA2  CFF5 F0C3          	movff	tablat,_Dis_Buff+31
 12546                           
 12547                           ; BSR set to: 0
 12548  001EA6  2A60               	incf	_i_bchar,f,c
 12549                           
 12550                           ; BSR set to: 0
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;display.c: 265: }
 12554                           ;display.c: 269: return 1;
 12555  001EA8  0C01               	retlw	1	;funcret
 12556  001EAA                     __end_of_scroll_text:
 12557                           	opt stack 0
 12558  001EAA                     PL70:
 12559                           	opt stack 24
 12560  001EAA  0E78               	movlw	low _text_buf
 12561  001EAC  0100               	movlb	0	; () banked
 12562  001EAE  25A2               	addwf	_i_char& (0+255),w,b
 12563  001EB0  6ED9               	movwf	fsr2l,c
 12564  001EB2  6ADA               	clrf	fsr2h,c
 12565  001EB4  0E01               	movlw	high _text_buf
 12566  001EB6  22DA               	addwfc	fsr2h,f,c
 12567  001EB8  50DF               	movf	indf2,w,c
 12568  001EBA  0012               	return	
 12569  001EBC                     __end_ofPL70:
 12570                           	opt stack 0
 12571                           tosu	equ	0xFFF
 12572                           tosh	equ	0xFFE
 12573                           tosl	equ	0xFFD
 12574                           pclath	equ	0xFFA
 12575                           tblptru	equ	0xFF8
 12576                           tblptrh	equ	0xFF7
 12577                           tblptrl	equ	0xFF6
 12578                           tablat	equ	0xFF5
 12579                           prodh	equ	0xFF4
 12580                           prodl	equ	0xFF3
 12581                           intcon	equ	0xFF2
 12582                           intcon2	equ	0xFF1
 12583                           postinc0	equ	0xFEE
 12584                           wreg	equ	0xFE8
 12585                           indf1	equ	0xFE7
 12586                           plusw1	equ	0xFE3
 12587                           fsr1h	equ	0xFE2
 12588                           fsr1l	equ	0xFE1
 12589                           indf2	equ	0xFDF
 12590                           postinc2	equ	0xFDE
 12591                           postdec2	equ	0xFDD
 12592                           plusw2	equ	0xFDB
 12593                           fsr2h	equ	0xFDA
 12594                           fsr2l	equ	0xFD9
 12595                           status	equ	0xFD8
 12596                           
 12597 ;; *************** function ___llmod *****************
 12598 ;; Defined at:
 12599 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
 12600 ;; Parameters:    Size  Location     Type
 12601 ;;  dividend        4   39[COMRAM] unsigned long 
 12602 ;;  divisor         4   43[COMRAM] unsigned long 
 12603 ;; Auto vars:     Size  Location     Type
 12604 ;;  counter         1   47[COMRAM] unsigned char 
 12605 ;; Return value:  Size  Location     Type
 12606 ;;                  4   39[COMRAM] unsigned long 
 12607 ;; Registers used:
 12608 ;;		wreg, status,2, status,0
 12609 ;; Tracked objects:
 12610 ;;		On entry : 0/0
 12611 ;;		On exit  : 0/0
 12612 ;;		Unchanged: 0/0
 12613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12614 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12617 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12618 ;;Total ram usage:        9 bytes
 12619 ;; Hardware stack levels used:    1
 12620 ;; Hardware stack levels required when called:    3
 12621 ;; This function calls:
 12622 ;;		Nothing
 12623 ;; This function is called by:
 12624 ;;		_pressure
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           	psect	text57
 12629  00207C                     __ptext57:
 12630                           	opt stack 0
 12631  00207C                     ___llmod:
 12632                           	opt stack 25
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;incstack = 0
 12636  00207C  502C               	movf	___llmod@divisor,w,c
 12637  00207E  102D               	iorwf	___llmod@divisor+1,w,c
 12638  002080  102E               	iorwf	___llmod@divisor+2,w,c
 12639  002082  102F               	iorwf	___llmod@divisor+3,w,c
 12640  002084  E023               	bz	l1692
 12641  002086  0E01               	movlw	1
 12642  002088  6E30               	movwf	___llmod@counter,c
 12643  00208A  D006               	goto	l6094
 12644  00208C                     l6092:
 12645  00208C  90D8               	bcf	status,0,c
 12646  00208E  362C               	rlcf	___llmod@divisor,f,c
 12647  002090  362D               	rlcf	___llmod@divisor+1,f,c
 12648  002092  362E               	rlcf	___llmod@divisor+2,f,c
 12649  002094  362F               	rlcf	___llmod@divisor+3,f,c
 12650  002096  2A30               	incf	___llmod@counter,f,c
 12651  002098                     l6094:
 12652  002098  AE2F               	btfss	___llmod@divisor+3,7,c
 12653  00209A  D7F8               	goto	l6092
 12654  00209C                     l6096:
 12655  00209C  502C               	movf	___llmod@divisor,w,c
 12656  00209E  5C28               	subwf	___llmod@dividend,w,c
 12657  0020A0  502D               	movf	___llmod@divisor+1,w,c
 12658  0020A2  5829               	subwfb	___llmod@dividend+1,w,c
 12659  0020A4  502E               	movf	___llmod@divisor+2,w,c
 12660  0020A6  582A               	subwfb	___llmod@dividend+2,w,c
 12661  0020A8  502F               	movf	___llmod@divisor+3,w,c
 12662  0020AA  582B               	subwfb	___llmod@dividend+3,w,c
 12663  0020AC  E308               	bnc	l6100
 12664  0020AE  502C               	movf	___llmod@divisor,w,c
 12665  0020B0  5E28               	subwf	___llmod@dividend,f,c
 12666  0020B2  502D               	movf	___llmod@divisor+1,w,c
 12667  0020B4  5A29               	subwfb	___llmod@dividend+1,f,c
 12668  0020B6  502E               	movf	___llmod@divisor+2,w,c
 12669  0020B8  5A2A               	subwfb	___llmod@dividend+2,f,c
 12670  0020BA  502F               	movf	___llmod@divisor+3,w,c
 12671  0020BC  5A2B               	subwfb	___llmod@dividend+3,f,c
 12672  0020BE                     l6100:
 12673  0020BE  90D8               	bcf	status,0,c
 12674  0020C0  322F               	rrcf	___llmod@divisor+3,f,c
 12675  0020C2  322E               	rrcf	___llmod@divisor+2,f,c
 12676  0020C4  322D               	rrcf	___llmod@divisor+1,f,c
 12677  0020C6  322C               	rrcf	___llmod@divisor,f,c
 12678  0020C8  2E30               	decfsz	___llmod@counter,f,c
 12679  0020CA  D7E8               	goto	l6096
 12680  0020CC                     l1692:
 12681  0020CC  C028  F028         	movff	___llmod@dividend,?___llmod
 12682  0020D0  C029  F029         	movff	___llmod@dividend+1,?___llmod+1
 12683  0020D4  C02A  F02A         	movff	___llmod@dividend+2,?___llmod+2
 12684  0020D8  C02B  F02B         	movff	___llmod@dividend+3,?___llmod+3
 12685  0020DC  0012               	return		;funcret
 12686  0020DE                     __end_of___llmod:
 12687                           	opt stack 0
 12688                           tosu	equ	0xFFF
 12689                           tosh	equ	0xFFE
 12690                           tosl	equ	0xFFD
 12691                           pclath	equ	0xFFA
 12692                           tblptru	equ	0xFF8
 12693                           tblptrh	equ	0xFF7
 12694                           tblptrl	equ	0xFF6
 12695                           tablat	equ	0xFF5
 12696                           prodh	equ	0xFF4
 12697                           prodl	equ	0xFF3
 12698                           intcon	equ	0xFF2
 12699                           intcon2	equ	0xFF1
 12700                           postinc0	equ	0xFEE
 12701                           wreg	equ	0xFE8
 12702                           indf1	equ	0xFE7
 12703                           plusw1	equ	0xFE3
 12704                           fsr1h	equ	0xFE2
 12705                           fsr1l	equ	0xFE1
 12706                           indf2	equ	0xFDF
 12707                           postinc2	equ	0xFDE
 12708                           postdec2	equ	0xFDD
 12709                           plusw2	equ	0xFDB
 12710                           fsr2h	equ	0xFDA
 12711                           fsr2l	equ	0xFD9
 12712                           status	equ	0xFD8
 12713                           
 12714 ;; *************** function ___lldiv *****************
 12715 ;; Defined at:
 12716 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 12717 ;; Parameters:    Size  Location     Type
 12718 ;;  dividend        4   26[COMRAM] unsigned long 
 12719 ;;  divisor         4   30[COMRAM] unsigned long 
 12720 ;; Auto vars:     Size  Location     Type
 12721 ;;  quotient        4   34[COMRAM] unsigned long 
 12722 ;;  counter         1   38[COMRAM] unsigned char 
 12723 ;; Return value:  Size  Location     Type
 12724 ;;                  4   26[COMRAM] unsigned long 
 12725 ;; Registers used:
 12726 ;;		wreg, status,2, status,0
 12727 ;; Tracked objects:
 12728 ;;		On entry : 0/0
 12729 ;;		On exit  : 0/0
 12730 ;;		Unchanged: 0/0
 12731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12732 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12735 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12736 ;;Total ram usage:       13 bytes
 12737 ;; Hardware stack levels used:    1
 12738 ;; Hardware stack levels required when called:    3
 12739 ;; This function calls:
 12740 ;;		Nothing
 12741 ;; This function is called by:
 12742 ;;		_pressure
 12743 ;;		_bmp280Convert
 12744 ;; This function uses a non-reentrant model
 12745 ;;
 12746                           
 12747                           	psect	text58
 12748  001F32                     __ptext58:
 12749                           	opt stack 0
 12750  001F32                     ___lldiv:
 12751                           	opt stack 24
 12752                           
 12753                           ;incstack = 0
 12754  001F32  6A23               	clrf	___lldiv@quotient,c
 12755  001F34  6A24               	clrf	___lldiv@quotient+1,c
 12756  001F36  6A25               	clrf	___lldiv@quotient+2,c
 12757  001F38  6A26               	clrf	___lldiv@quotient+3,c
 12758  001F3A  501F               	movf	___lldiv@divisor,w,c
 12759  001F3C  1020               	iorwf	___lldiv@divisor+1,w,c
 12760  001F3E  1021               	iorwf	___lldiv@divisor+2,w,c
 12761  001F40  1022               	iorwf	___lldiv@divisor+3,w,c
 12762  001F42  E029               	bz	l1682
 12763  001F44  0E01               	movlw	1
 12764  001F46  6E27               	movwf	___lldiv@counter,c
 12765  001F48  D006               	goto	l5558
 12766  001F4A                     l5556:
 12767  001F4A  90D8               	bcf	status,0,c
 12768  001F4C  361F               	rlcf	___lldiv@divisor,f,c
 12769  001F4E  3620               	rlcf	___lldiv@divisor+1,f,c
 12770  001F50  3621               	rlcf	___lldiv@divisor+2,f,c
 12771  001F52  3622               	rlcf	___lldiv@divisor+3,f,c
 12772  001F54  2A27               	incf	___lldiv@counter,f,c
 12773  001F56                     l5558:
 12774  001F56  AE22               	btfss	___lldiv@divisor+3,7,c
 12775  001F58  D7F8               	goto	l5556
 12776  001F5A                     l5560:
 12777  001F5A  90D8               	bcf	status,0,c
 12778  001F5C  3623               	rlcf	___lldiv@quotient,f,c
 12779  001F5E  3624               	rlcf	___lldiv@quotient+1,f,c
 12780  001F60  3625               	rlcf	___lldiv@quotient+2,f,c
 12781  001F62  3626               	rlcf	___lldiv@quotient+3,f,c
 12782  001F64  501F               	movf	___lldiv@divisor,w,c
 12783  001F66  5C1B               	subwf	___lldiv@dividend,w,c
 12784  001F68  5020               	movf	___lldiv@divisor+1,w,c
 12785  001F6A  581C               	subwfb	___lldiv@dividend+1,w,c
 12786  001F6C  5021               	movf	___lldiv@divisor+2,w,c
 12787  001F6E  581D               	subwfb	___lldiv@dividend+2,w,c
 12788  001F70  5022               	movf	___lldiv@divisor+3,w,c
 12789  001F72  581E               	subwfb	___lldiv@dividend+3,w,c
 12790  001F74  E309               	bnc	l5568
 12791  001F76  501F               	movf	___lldiv@divisor,w,c
 12792  001F78  5E1B               	subwf	___lldiv@dividend,f,c
 12793  001F7A  5020               	movf	___lldiv@divisor+1,w,c
 12794  001F7C  5A1C               	subwfb	___lldiv@dividend+1,f,c
 12795  001F7E  5021               	movf	___lldiv@divisor+2,w,c
 12796  001F80  5A1D               	subwfb	___lldiv@dividend+2,f,c
 12797  001F82  5022               	movf	___lldiv@divisor+3,w,c
 12798  001F84  5A1E               	subwfb	___lldiv@dividend+3,f,c
 12799  001F86  8023               	bsf	___lldiv@quotient,0,c
 12800  001F88                     l5568:
 12801  001F88  90D8               	bcf	status,0,c
 12802  001F8A  3222               	rrcf	___lldiv@divisor+3,f,c
 12803  001F8C  3221               	rrcf	___lldiv@divisor+2,f,c
 12804  001F8E  3220               	rrcf	___lldiv@divisor+1,f,c
 12805  001F90  321F               	rrcf	___lldiv@divisor,f,c
 12806  001F92  2E27               	decfsz	___lldiv@counter,f,c
 12807  001F94  D7E2               	goto	l5560
 12808  001F96                     l1682:
 12809  001F96  C023  F01B         	movff	___lldiv@quotient,?___lldiv
 12810  001F9A  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
 12811  001F9E  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
 12812  001FA2  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
 12813  001FA6  0012               	return		;funcret
 12814  001FA8                     __end_of___lldiv:
 12815                           	opt stack 0
 12816                           tosu	equ	0xFFF
 12817                           tosh	equ	0xFFE
 12818                           tosl	equ	0xFFD
 12819                           pclath	equ	0xFFA
 12820                           tblptru	equ	0xFF8
 12821                           tblptrh	equ	0xFF7
 12822                           tblptrl	equ	0xFF6
 12823                           tablat	equ	0xFF5
 12824                           prodh	equ	0xFF4
 12825                           prodl	equ	0xFF3
 12826                           intcon	equ	0xFF2
 12827                           intcon2	equ	0xFF1
 12828                           postinc0	equ	0xFEE
 12829                           wreg	equ	0xFE8
 12830                           indf1	equ	0xFE7
 12831                           plusw1	equ	0xFE3
 12832                           fsr1h	equ	0xFE2
 12833                           fsr1l	equ	0xFE1
 12834                           indf2	equ	0xFDF
 12835                           postinc2	equ	0xFDE
 12836                           postdec2	equ	0xFDD
 12837                           plusw2	equ	0xFDB
 12838                           fsr2h	equ	0xFDA
 12839                           fsr2l	equ	0xFD9
 12840                           status	equ	0xFD8
 12841                           
 12842 ;; *************** function _scroll_left *****************
 12843 ;; Defined at:
 12844 ;;		line 277 in file "display.c"
 12845 ;; Parameters:    Size  Location     Type
 12846 ;;		None
 12847 ;; Auto vars:     Size  Location     Type
 12848 ;;  i               1   24[COMRAM] unsigned char 
 12849 ;;  speed           1   23[COMRAM] unsigned char 
 12850 ;;  k               1   22[COMRAM] unsigned char 
 12851 ;;  j               1   21[COMRAM] unsigned char 
 12852 ;; Return value:  Size  Location     Type
 12853 ;;                  1    wreg      void 
 12854 ;; Registers used:
 12855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12856 ;; Tracked objects:
 12857 ;;		On entry : 0/0
 12858 ;;		On exit  : 0/0
 12859 ;;		Unchanged: 0/0
 12860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12862 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12865 ;;Total ram usage:        5 bytes
 12866 ;; Hardware stack levels used:    1
 12867 ;; Hardware stack levels required when called:    5
 12868 ;; This function calls:
 12869 ;;		_Update_Matrix
 12870 ;; This function is called by:
 12871 ;;		_home_temp
 12872 ;;		_pressure
 12873 ;;		_time_led
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           	psect	text59
 12878  0020DE                     __ptext59:
 12879                           	opt stack 0
 12880  0020DE                     _scroll_left:
 12881                           	opt stack 23
 12882                           
 12883                           ;display.c: 279: uint8_t i,j,k,speed = 100;
 12884                           
 12885                           ;incstack = 0
 12886  0020DE  0E64               	movlw	100
 12887  0020E0  6E18               	movwf	scroll_left@speed,c
 12888                           
 12889                           ;display.c: 282: for (k=0;k<=31;k++)
 12890  0020E2  6A17               	clrf	scroll_left@k,c
 12891  0020E4                     l504:
 12892                           
 12893                           ;display.c: 283: {
 12894                           ;display.c: 284: for (i=0; i<=31; i++)
 12895  0020E4  6A19               	clrf	scroll_left@i,c
 12896  0020E6                     l5870:
 12897                           
 12898                           ;display.c: 285: Dis_Buff[i] = Dis_Buff[i+1];
 12899  0020E6  5019               	movf	scroll_left@i,w,c
 12900  0020E8  0FA5               	addlw	low (_Dis_Buff+1)
 12901  0020EA  6ED9               	movwf	fsr2l,c
 12902  0020EC  6ADA               	clrf	fsr2h,c
 12903  0020EE  5019               	movf	scroll_left@i,w,c
 12904  0020F0  D820               	call	PL104	;call to abstracted procedure
 12905  0020F2  2A19               	incf	scroll_left@i,f,c
 12906  0020F4  0E1F               	movlw	31
 12907  0020F6  6419               	cpfsgt	scroll_left@i,c
 12908  0020F8  D7F6               	goto	l5870
 12909                           
 12910                           ;display.c: 287: Dis_Buff[31] = 0;
 12911  0020FA  0100               	movlb	0	; () banked
 12912  0020FC  6BC3               	clrf	(_Dis_Buff+31)& (0+255),b
 12913                           
 12914                           ; BSR set to: 0
 12915                           ;display.c: 288: Update_Matrix(Dis_Buff);
 12916  0020FE  0EA4               	movlw	low _Dis_Buff
 12917  002100  6E11               	movwf	Update_Matrix@buf,c
 12918  002102  EC3D  F012         	call	_Update_Matrix	;wreg free
 12919                           
 12920                           ;display.c: 289: for(j=0; j<speed; j++)
 12921  002106  6A16               	clrf	scroll_left@j,c
 12922  002108  D008               	goto	l508
 12923  00210A                     l5880:
 12924                           
 12925                           ;display.c: 290: _delay((unsigned long)((1)*(40000000/4000.0)));
 12926  00210A  0E0D               	movlw	13
 12927  00210C  6E15               	movwf	??_scroll_left& (0+255),c
 12928  00210E  0EFC               	movlw	252
 12929  002110                     u5397:
 12930  002110  2EE8               	decfsz	wreg,f,c
 12931  002112  D7FE               	bra	u5397
 12932  002114  2E15               	decfsz	??_scroll_left& (0+255),f,c
 12933  002116  D7FC               	bra	u5397
 12934  002118  2A16               	incf	scroll_left@j,f,c
 12935  00211A                     l508:
 12936  00211A  5018               	movf	scroll_left@speed,w,c
 12937  00211C  5C16               	subwf	scroll_left@j,w,c
 12938  00211E  E3F5               	bnc	l5880
 12939                           
 12940                           ;display.c: 291: if (speed > 10) speed -=10;
 12941  002120  0E0A               	movlw	10
 12942  002122  6418               	cpfsgt	scroll_left@speed,c
 12943  002124  D001               	goto	l5888
 12944  002126  5E18               	subwf	scroll_left@speed,f,c
 12945  002128                     l5888:
 12946  002128  2A17               	incf	scroll_left@k,f,c
 12947  00212A  0E1F               	movlw	31
 12948  00212C  6417               	cpfsgt	scroll_left@k,c
 12949  00212E  D7DA               	goto	l504
 12950  002130  0C1F               	retlw	31
 12951  002132                     __end_of_scroll_left:
 12952                           	opt stack 0
 12953  002132                     PL104:
 12954                           	opt stack 24
 12955  002132  0FA4               	addlw	low _Dis_Buff
 12956  002134  6EE1               	movwf	fsr1l,c
 12957  002136  6AE2               	clrf	fsr1h,c
 12958  002138  CFDF FFE7          	movff	indf2,indf1
 12959  00213C  0012               	return	
 12960  00213E                     __end_ofPL104:
 12961                           	opt stack 0
 12962                           tosu	equ	0xFFF
 12963                           tosh	equ	0xFFE
 12964                           tosl	equ	0xFFD
 12965                           pclath	equ	0xFFA
 12966                           tblptru	equ	0xFF8
 12967                           tblptrh	equ	0xFF7
 12968                           tblptrl	equ	0xFF6
 12969                           tablat	equ	0xFF5
 12970                           prodh	equ	0xFF4
 12971                           prodl	equ	0xFF3
 12972                           intcon	equ	0xFF2
 12973                           intcon2	equ	0xFF1
 12974                           postinc0	equ	0xFEE
 12975                           wreg	equ	0xFE8
 12976                           indf1	equ	0xFE7
 12977                           plusw1	equ	0xFE3
 12978                           fsr1h	equ	0xFE2
 12979                           fsr1l	equ	0xFE1
 12980                           indf2	equ	0xFDF
 12981                           postinc2	equ	0xFDE
 12982                           postdec2	equ	0xFDD
 12983                           plusw2	equ	0xFDB
 12984                           fsr2h	equ	0xFDA
 12985                           fsr2l	equ	0xFD9
 12986                           status	equ	0xFD8
 12987                           
 12988 ;; *************** function _putchar_down_s *****************
 12989 ;; Defined at:
 12990 ;;		line 121 in file "display.c"
 12991 ;; Parameters:    Size  Location     Type
 12992 ;;  x               1    wreg     unsigned char 
 12993 ;;  symbol          1   22[COMRAM] unsigned char 
 12994 ;; Auto vars:     Size  Location     Type
 12995 ;;  x               1   28[COMRAM] unsigned char 
 12996 ;;  i               1   31[COMRAM] unsigned char 
 12997 ;;  j               1   30[COMRAM] unsigned char 
 12998 ;;  k               1   29[COMRAM] unsigned char 
 12999 ;; Return value:  Size  Location     Type
 13000 ;;                  1    wreg      void 
 13001 ;; Registers used:
 13002 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13003 ;; Tracked objects:
 13004 ;;		On entry : 0/0
 13005 ;;		On exit  : 0/0
 13006 ;;		Unchanged: 0/0
 13007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13008 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13009 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13010 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13011 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13012 ;;Total ram usage:       10 bytes
 13013 ;; Hardware stack levels used:    1
 13014 ;; Hardware stack levels required when called:    5
 13015 ;; This function calls:
 13016 ;;		_Update_Matrix
 13017 ;; This function is called by:
 13018 ;;		_home_temp
 13019 ;;		_pressure
 13020 ;; This function uses a non-reentrant model
 13021 ;;
 13022                           
 13023                           	psect	text60
 13024  001B06                     __ptext60:
 13025                           	opt stack 0
 13026  001B06                     _putchar_down_s:
 13027                           	opt stack 23
 13028                           
 13029                           ;incstack = 0
 13030                           ;putchar_down_s@x stored from wreg
 13031  001B06  6E1D               	movwf	putchar_down_s@x,c
 13032                           
 13033                           ;display.c: 123: uint8_t i, j, k;
 13034                           ;display.c: 128: for(j=0;j<=7;j++)
 13035  001B08  6A1F               	clrf	putchar_down_s@j,c
 13036  001B0A                     l460:
 13037                           
 13038                           ;display.c: 129: {
 13039                           ;display.c: 130: for(i=0;i<3;i++)
 13040  001B0A  6A20               	clrf	putchar_down_s@i,c
 13041  001B0C                     l5798:
 13042                           
 13043                           ;display.c: 131: {
 13044                           ;display.c: 132: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | (FontS[symbol][i] >> (8-1-j));
 13045  001B0C  501D               	movf	putchar_down_s@x,w,c
 13046  001B0E  0FA4               	addlw	low _Dis_Buff
 13047  001B10  2420               	addwf	putchar_down_s@i,w,c
 13048  001B12  6ED9               	movwf	fsr2l,c
 13049  001B14  6ADA               	clrf	fsr2h,c
 13050  001B16  501F               	movf	putchar_down_s@j,w,c
 13051  001B18  0807               	sublw	7
 13052  001B1A  6E18               	movwf	??_putchar_down_s& (0+255),c
 13053  001B1C  5017               	movf	putchar_down_s@symbol,w,c
 13054  001B1E  0D03               	mullw	3
 13055  001B20  0EB0               	movlw	low _FontS
 13056  001B22  6E19               	movwf	(??_putchar_down_s+1)& (0+255),c
 13057  001B24  0EBF               	movlw	high _FontS
 13058  001B26  6E1A               	movwf	(??_putchar_down_s+2)& (0+255),c
 13059  001B28  50F3               	movf	prodl,w,c
 13060  001B2A  2619               	addwf	??_putchar_down_s+1,f,c
 13061  001B2C  50F4               	movf	prodh,w,c
 13062  001B2E  221A               	addwfc	??_putchar_down_s+2,f,c
 13063  001B30  5020               	movf	putchar_down_s@i,w,c
 13064  001B32  2619               	addwf	??_putchar_down_s+1,f,c
 13065  001B34  0E00               	movlw	0
 13066  001B36  221A               	addwfc	??_putchar_down_s+2,f,c
 13067  001B38  C019  FFF6         	movff	??_putchar_down_s+1,tblptrl
 13068  001B3C  C01A  FFF7         	movff	??_putchar_down_s+2,tblptrh
 13069  001B40                     	if	0	;tblptru may be non-zero
 13070  001B40                     	endif
 13071  001B40                     	if	0	;tblptru may be non-zero
 13072  001B40                     	endif
 13073  001B40  0008               	tblrd		*
 13074  001B42  CFF5 F01B          	movff	tablat,??_putchar_down_s+3
 13075  001B46  2A18               	incf	??_putchar_down_s,f,c
 13076  001B48  D002               	goto	u4164
 13077  001B4A                     u4165:
 13078  001B4A  90D8               	bcf	status,0,c
 13079  001B4C  321B               	rrcf	??_putchar_down_s+3,f,c
 13080  001B4E                     u4164:
 13081  001B4E  2E18               	decfsz	??_putchar_down_s,f,c
 13082  001B50  D7FC               	goto	u4165
 13083  001B52  501D               	movf	putchar_down_s@x,w,c
 13084  001B54  0FA4               	addlw	low _Dis_Buff
 13085  001B56  2420               	addwf	putchar_down_s@i,w,c
 13086  001B58  6EE1               	movwf	fsr1l,c
 13087  001B5A  6AE2               	clrf	fsr1h,c
 13088  001B5C  50E7               	movf	indf1,w,c
 13089  001B5E  6E1C               	movwf	(??_putchar_down_s+4)& (0+255),c
 13090  001B60  90D8               	bcf	status,0,c
 13091  001B62  341C               	rlcf	??_putchar_down_s+4,w,c
 13092  001B64  101B               	iorwf	??_putchar_down_s+3,w,c
 13093  001B66  6EDF               	movwf	indf2,c
 13094  001B68  2A20               	incf	putchar_down_s@i,f,c
 13095  001B6A  0E02               	movlw	2
 13096  001B6C  6420               	cpfsgt	putchar_down_s@i,c
 13097  001B6E  D7CE               	goto	l5798
 13098                           
 13099                           ;display.c: 133: }
 13100                           ;display.c: 135: for(k=0;k<20;k++)
 13101  001B70  6A1E               	clrf	putchar_down_s@k,c
 13102  001B72                     l5808:
 13103                           
 13104                           ;display.c: 136: _delay((unsigned long)((1)*(40000000/4000.0)));
 13105  001B72  0E0D               	movlw	13
 13106  001B74  6E18               	movwf	??_putchar_down_s& (0+255),c
 13107  001B76  0EFC               	movlw	252
 13108  001B78                     u5407:
 13109  001B78  2EE8               	decfsz	wreg,f,c
 13110  001B7A  D7FE               	bra	u5407
 13111  001B7C  2E18               	decfsz	??_putchar_down_s& (0+255),f,c
 13112  001B7E  D7FC               	bra	u5407
 13113  001B80  2A1E               	incf	putchar_down_s@k,f,c
 13114  001B82  0E13               	movlw	19
 13115  001B84  641E               	cpfsgt	putchar_down_s@k,c
 13116  001B86  D7F5               	goto	l5808
 13117                           
 13118                           ;display.c: 137: Update_Matrix(Dis_Buff);
 13119  001B88  0EA4               	movlw	low _Dis_Buff
 13120  001B8A  6E11               	movwf	Update_Matrix@buf,c
 13121  001B8C  EC3D  F012         	call	_Update_Matrix	;wreg free
 13122  001B90  2A1F               	incf	putchar_down_s@j,f,c
 13123  001B92  0E07               	movlw	7
 13124  001B94  641F               	cpfsgt	putchar_down_s@j,c
 13125  001B96  D7B9               	goto	l460
 13126  001B98  0C07               	retlw	7
 13127  001B9A                     __end_of_putchar_down_s:
 13128                           	opt stack 0
 13129                           tosu	equ	0xFFF
 13130                           tosh	equ	0xFFE
 13131                           tosl	equ	0xFFD
 13132                           pclath	equ	0xFFA
 13133                           tblptru	equ	0xFF8
 13134                           tblptrh	equ	0xFF7
 13135                           tblptrl	equ	0xFF6
 13136                           tablat	equ	0xFF5
 13137                           prodh	equ	0xFF4
 13138                           prodl	equ	0xFF3
 13139                           intcon	equ	0xFF2
 13140                           intcon2	equ	0xFF1
 13141                           postinc0	equ	0xFEE
 13142                           wreg	equ	0xFE8
 13143                           indf1	equ	0xFE7
 13144                           plusw1	equ	0xFE3
 13145                           fsr1h	equ	0xFE2
 13146                           fsr1l	equ	0xFE1
 13147                           indf2	equ	0xFDF
 13148                           postinc2	equ	0xFDE
 13149                           postdec2	equ	0xFDD
 13150                           plusw2	equ	0xFDB
 13151                           fsr2h	equ	0xFDA
 13152                           fsr2l	equ	0xFD9
 13153                           status	equ	0xFD8
 13154                           
 13155 ;; *************** function _putchar_down *****************
 13156 ;; Defined at:
 13157 ;;		line 99 in file "display.c"
 13158 ;; Parameters:    Size  Location     Type
 13159 ;;  x               1    wreg     unsigned char 
 13160 ;;  symbol          1   48[COMRAM] unsigned char 
 13161 ;;  pF              2   49[COMRAM] PTR unsigned char [5][0]
 13162 ;;		 -> dFont5(50), dFont4(50), dFont3(50), dFont2(50), 
 13163 ;;		 -> Font(1280), dFont1(50), 
 13164 ;; Auto vars:     Size  Location     Type
 13165 ;;  x               1   56[COMRAM] unsigned char 
 13166 ;;  i               1   59[COMRAM] unsigned char 
 13167 ;;  j               1   58[COMRAM] unsigned char 
 13168 ;;  k               1   57[COMRAM] unsigned char 
 13169 ;; Return value:  Size  Location     Type
 13170 ;;                  1    wreg      void 
 13171 ;; Registers used:
 13172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13173 ;; Tracked objects:
 13174 ;;		On entry : 0/0
 13175 ;;		On exit  : 0/0
 13176 ;;		Unchanged: 0/0
 13177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13178 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13179 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13180 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13181 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13182 ;;Total ram usage:       12 bytes
 13183 ;; Hardware stack levels used:    1
 13184 ;; Hardware stack levels required when called:    5
 13185 ;; This function calls:
 13186 ;;		_Update_Matrix
 13187 ;; This function is called by:
 13188 ;;		_home_temp
 13189 ;;		_pressure
 13190 ;; This function uses a non-reentrant model
 13191 ;;
 13192                           
 13193                           	psect	text61
 13194  001B9A                     __ptext61:
 13195                           	opt stack 0
 13196  001B9A                     _putchar_down:
 13197                           	opt stack 23
 13198                           
 13199                           ;incstack = 0
 13200                           ;putchar_down@x stored from wreg
 13201  001B9A  6E39               	movwf	putchar_down@x,c
 13202                           
 13203                           ;display.c: 101: uint8_t i, j, k;
 13204                           ;display.c: 103: for(j=0;j<=7;j++)
 13205  001B9C  6A3B               	clrf	putchar_down@j,c
 13206  001B9E                     l451:
 13207                           
 13208                           ;display.c: 104: {
 13209                           ;display.c: 105: for(i=0;i<5;i++)
 13210  001B9E  6A3C               	clrf	putchar_down@i,c
 13211  001BA0                     l5768:
 13212                           
 13213                           ;display.c: 106: {
 13214                           ;display.c: 107: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | ((*pF)[symbol][i] >> (8-1-j));
 13215  001BA0  5039               	movf	putchar_down@x,w,c
 13216  001BA2  0FA4               	addlw	low _Dis_Buff
 13217  001BA4  243C               	addwf	putchar_down@i,w,c
 13218  001BA6  6ED9               	movwf	fsr2l,c
 13219  001BA8  6ADA               	clrf	fsr2h,c
 13220  001BAA  503B               	movf	putchar_down@j,w,c
 13221  001BAC  0807               	sublw	7
 13222  001BAE  6E34               	movwf	??_putchar_down& (0+255),c
 13223  001BB0  5031               	movf	putchar_down@symbol,w,c
 13224  001BB2  0D05               	mullw	5
 13225  001BB4  C032  F035         	movff	putchar_down@pF,??_putchar_down+1
 13226  001BB8  C033  F036         	movff	putchar_down@pF+1,??_putchar_down+2
 13227  001BBC  50F3               	movf	prodl,w,c
 13228  001BBE  2635               	addwf	??_putchar_down+1,f,c
 13229  001BC0  50F4               	movf	prodh,w,c
 13230  001BC2  2236               	addwfc	??_putchar_down+2,f,c
 13231  001BC4  503C               	movf	putchar_down@i,w,c
 13232  001BC6  2635               	addwf	??_putchar_down+1,f,c
 13233  001BC8  0E00               	movlw	0
 13234  001BCA  2236               	addwfc	??_putchar_down+2,f,c
 13235  001BCC  C035  FFF6         	movff	??_putchar_down+1,tblptrl
 13236  001BD0  C036  FFF7         	movff	??_putchar_down+2,tblptrh
 13237  001BD4                     	if	0	;tblptru may be non-zero
 13238  001BD4                     	endif
 13239  001BD4                     	if	0	;tblptru may be non-zero
 13240  001BD4                     	endif
 13241  001BD4  0008               	tblrd		*
 13242  001BD6  CFF5 F037          	movff	tablat,??_putchar_down+3
 13243  001BDA  2A34               	incf	??_putchar_down,f,c
 13244  001BDC  D002               	goto	u4124
 13245  001BDE                     u4125:
 13246  001BDE  90D8               	bcf	status,0,c
 13247  001BE0  3237               	rrcf	??_putchar_down+3,f,c
 13248  001BE2                     u4124:
 13249  001BE2  2E34               	decfsz	??_putchar_down,f,c
 13250  001BE4  D7FC               	goto	u4125
 13251  001BE6  5039               	movf	putchar_down@x,w,c
 13252  001BE8  0FA4               	addlw	low _Dis_Buff
 13253  001BEA  243C               	addwf	putchar_down@i,w,c
 13254  001BEC  6EE1               	movwf	fsr1l,c
 13255  001BEE  6AE2               	clrf	fsr1h,c
 13256  001BF0  50E7               	movf	indf1,w,c
 13257  001BF2  6E38               	movwf	(??_putchar_down+4)& (0+255),c
 13258  001BF4  90D8               	bcf	status,0,c
 13259  001BF6  3438               	rlcf	??_putchar_down+4,w,c
 13260  001BF8  1037               	iorwf	??_putchar_down+3,w,c
 13261  001BFA  6EDF               	movwf	indf2,c
 13262  001BFC  2A3C               	incf	putchar_down@i,f,c
 13263  001BFE  0E04               	movlw	4
 13264  001C00  643C               	cpfsgt	putchar_down@i,c
 13265  001C02  D7CE               	goto	l5768
 13266                           
 13267                           ;display.c: 108: }
 13268                           ;display.c: 110: for(k=0;k<20;k++)
 13269  001C04  6A3A               	clrf	putchar_down@k,c
 13270  001C06                     l5778:
 13271                           
 13272                           ;display.c: 111: _delay((unsigned long)((1)*(40000000/4000.0)));
 13273  001C06  0E0D               	movlw	13
 13274  001C08  6E34               	movwf	??_putchar_down& (0+255),c
 13275  001C0A  0EFC               	movlw	252
 13276  001C0C                     u5417:
 13277  001C0C  2EE8               	decfsz	wreg,f,c
 13278  001C0E  D7FE               	bra	u5417
 13279  001C10  2E34               	decfsz	??_putchar_down& (0+255),f,c
 13280  001C12  D7FC               	bra	u5417
 13281  001C14  2A3A               	incf	putchar_down@k,f,c
 13282  001C16  0E13               	movlw	19
 13283  001C18  643A               	cpfsgt	putchar_down@k,c
 13284  001C1A  D7F5               	goto	l5778
 13285                           
 13286                           ;display.c: 112: Update_Matrix(Dis_Buff);
 13287  001C1C  0EA4               	movlw	low _Dis_Buff
 13288  001C1E  6E11               	movwf	Update_Matrix@buf,c
 13289  001C20  EC3D  F012         	call	_Update_Matrix	;wreg free
 13290  001C24  2A3B               	incf	putchar_down@j,f,c
 13291  001C26  0E07               	movlw	7
 13292  001C28  643B               	cpfsgt	putchar_down@j,c
 13293  001C2A  D7B9               	goto	l451
 13294  001C2C  0C07               	retlw	7
 13295  001C2E                     __end_of_putchar_down:
 13296                           	opt stack 0
 13297                           tosu	equ	0xFFF
 13298                           tosh	equ	0xFFE
 13299                           tosl	equ	0xFFD
 13300                           pclath	equ	0xFFA
 13301                           tblptru	equ	0xFF8
 13302                           tblptrh	equ	0xFF7
 13303                           tblptrl	equ	0xFF6
 13304                           tablat	equ	0xFF5
 13305                           prodh	equ	0xFF4
 13306                           prodl	equ	0xFF3
 13307                           intcon	equ	0xFF2
 13308                           intcon2	equ	0xFF1
 13309                           postinc0	equ	0xFEE
 13310                           wreg	equ	0xFE8
 13311                           indf1	equ	0xFE7
 13312                           plusw1	equ	0xFE3
 13313                           fsr1h	equ	0xFE2
 13314                           fsr1l	equ	0xFE1
 13315                           indf2	equ	0xFDF
 13316                           postinc2	equ	0xFDE
 13317                           postdec2	equ	0xFDD
 13318                           plusw2	equ	0xFDB
 13319                           fsr2h	equ	0xFDA
 13320                           fsr2l	equ	0xFD9
 13321                           status	equ	0xFD8
 13322                           
 13323 ;; *************** function _Update_Matrix *****************
 13324 ;; Defined at:
 13325 ;;		line 51 in file "max7221.c"
 13326 ;; Parameters:    Size  Location     Type
 13327 ;;  buf             1   16[COMRAM] PTR unsigned char 
 13328 ;;		 -> Dis_Buff(32), 
 13329 ;; Auto vars:     Size  Location     Type
 13330 ;;  i               1   19[COMRAM] unsigned char 
 13331 ;;  j               1   18[COMRAM] unsigned char 
 13332 ;;  data            1   17[COMRAM] unsigned char 
 13333 ;; Return value:  Size  Location     Type
 13334 ;;                  1    wreg      void 
 13335 ;; Registers used:
 13336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13337 ;; Tracked objects:
 13338 ;;		On entry : 0/0
 13339 ;;		On exit  : 0/0
 13340 ;;		Unchanged: 0/0
 13341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13342 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13345 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13346 ;;Total ram usage:        4 bytes
 13347 ;; Hardware stack levels used:    1
 13348 ;; Hardware stack levels required when called:    4
 13349 ;; This function calls:
 13350 ;;		_Send_Byte_7221
 13351 ;; This function is called by:
 13352 ;;		_putchar_down
 13353 ;;		_putchar_down_s
 13354 ;;		_scroll_left
 13355 ;;		_interval_scroll_text
 13356 ;;		_time_set_min
 13357 ;;		_time_set_hr
 13358 ;;		_time_set_yr
 13359 ;;		_time_set_mt
 13360 ;;		_time_set_dt
 13361 ;;		_time_set_dy
 13362 ;;		_set_font_set
 13363 ;;		_time_led
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           	psect	text62
 13368  00247A                     __ptext62:
 13369                           	opt stack 0
 13370  00247A                     _Update_Matrix:
 13371                           	opt stack 24
 13372                           
 13373                           ;max7221.c: 53: uint8_t i, j, data;
 13374                           ;max7221.c: 56: for (i = 0; i < 8; i++)
 13375                           
 13376                           ;incstack = 0
 13377  00247A  6A14               	clrf	Update_Matrix@i,c
 13378  00247C                     l372:
 13379                           
 13380                           ;max7221.c: 57: {
 13381                           ;max7221.c: 58: LATDbits.LD0 = 0;
 13382  00247C  908C               	bcf	3980,0,c	;volatile
 13383                           
 13384                           ;max7221.c: 59: for (j = 0; j < 4; j++)
 13385  00247E  6A13               	clrf	Update_Matrix@j,c
 13386  002480                     l5408:
 13387                           
 13388                           ;max7221.c: 60: {
 13389                           ;max7221.c: 62: data = buf[8 * (4 - 1 - j) + i];
 13390  002480  5013               	movf	Update_Matrix@j,w,c
 13391  002482  0DF8               	mullw	-8
 13392  002484  5011               	movf	Update_Matrix@buf,w,c
 13393  002486  24F3               	addwf	prodl,w,c
 13394  002488  2414               	addwf	Update_Matrix@i,w,c
 13395  00248A  6ED9               	movwf	fsr2l,c
 13396  00248C  6ADA               	clrf	fsr2h,c
 13397  00248E  0E18               	movlw	24
 13398  002490  26D9               	addwf	fsr2l,f,c
 13399  002492  50DF               	movf	indf2,w,c
 13400  002494  6E12               	movwf	Update_Matrix@data,c
 13401                           
 13402                           ;max7221.c: 64: Send_Byte_7221(1 + i);
 13403  002496  2814               	incf	Update_Matrix@i,w,c
 13404  002498  ECED  F013         	call	_Send_Byte_7221
 13405                           
 13406                           ;max7221.c: 65: Send_Byte_7221(data);
 13407  00249C  5012               	movf	Update_Matrix@data,w,c
 13408  00249E  ECED  F013         	call	_Send_Byte_7221
 13409  0024A2  2A13               	incf	Update_Matrix@j,f,c
 13410  0024A4  0E03               	movlw	3
 13411  0024A6  6413               	cpfsgt	Update_Matrix@j,c
 13412  0024A8  D7EB               	goto	l5408
 13413                           
 13414                           ;max7221.c: 66: }
 13415                           ;max7221.c: 67: LATDbits.LD0 = 1;
 13416  0024AA  808C               	bsf	3980,0,c	;volatile
 13417  0024AC  2A14               	incf	Update_Matrix@i,f,c
 13418  0024AE  0E07               	movlw	7
 13419  0024B0  6414               	cpfsgt	Update_Matrix@i,c
 13420  0024B2  D7E4               	goto	l372
 13421  0024B4  0C07               	retlw	7
 13422  0024B6                     __end_of_Update_Matrix:
 13423                           	opt stack 0
 13424                           tosu	equ	0xFFF
 13425                           tosh	equ	0xFFE
 13426                           tosl	equ	0xFFD
 13427                           pclath	equ	0xFFA
 13428                           tblptru	equ	0xFF8
 13429                           tblptrh	equ	0xFF7
 13430                           tblptrl	equ	0xFF6
 13431                           tablat	equ	0xFF5
 13432                           prodh	equ	0xFF4
 13433                           prodl	equ	0xFF3
 13434                           intcon	equ	0xFF2
 13435                           intcon2	equ	0xFF1
 13436                           postinc0	equ	0xFEE
 13437                           wreg	equ	0xFE8
 13438                           indf1	equ	0xFE7
 13439                           plusw1	equ	0xFE3
 13440                           fsr1h	equ	0xFE2
 13441                           fsr1l	equ	0xFE1
 13442                           indf2	equ	0xFDF
 13443                           postinc2	equ	0xFDE
 13444                           postdec2	equ	0xFDD
 13445                           plusw2	equ	0xFDB
 13446                           fsr2h	equ	0xFDA
 13447                           fsr2l	equ	0xFD9
 13448                           status	equ	0xFD8
 13449                           
 13450 ;; *************** function _Send_Byte_7221 *****************
 13451 ;; Defined at:
 13452 ;;		line 6 in file "max7221.c"
 13453 ;; Parameters:    Size  Location     Type
 13454 ;;  dat             1    wreg     unsigned char 
 13455 ;; Auto vars:     Size  Location     Type
 13456 ;;  dat             1   14[COMRAM] unsigned char 
 13457 ;;  i               1   15[COMRAM] unsigned char 
 13458 ;; Return value:  Size  Location     Type
 13459 ;;                  1    wreg      void 
 13460 ;; Registers used:
 13461 ;;		wreg, status,2, status,0
 13462 ;; Tracked objects:
 13463 ;;		On entry : 0/0
 13464 ;;		On exit  : 0/0
 13465 ;;		Unchanged: 0/0
 13466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13471 ;;Total ram usage:        2 bytes
 13472 ;; Hardware stack levels used:    1
 13473 ;; Hardware stack levels required when called:    3
 13474 ;; This function calls:
 13475 ;;		Nothing
 13476 ;; This function is called by:
 13477 ;;		_Cmd7221
 13478 ;;		_Update_Matrix
 13479 ;; This function uses a non-reentrant model
 13480 ;;
 13481                           
 13482                           	psect	text63
 13483  0027DA                     __ptext63:
 13484                           	opt stack 0
 13485  0027DA                     _Send_Byte_7221:
 13486                           	opt stack 24
 13487                           
 13488                           ;incstack = 0
 13489                           ;Send_Byte_7221@dat stored from wreg
 13490  0027DA  6E0F               	movwf	Send_Byte_7221@dat,c
 13491                           
 13492                           ;max7221.c: 8: uint8_t i;
 13493                           ;max7221.c: 10: for (i = 0; i < 8; i++)
 13494  0027DC  6A10               	clrf	Send_Byte_7221@i,c
 13495  0027DE                     l360:
 13496                           
 13497                           ;max7221.c: 11: {
 13498                           ;max7221.c: 12: if (dat & 0x80)
 13499  0027DE  AE0F               	btfss	Send_Byte_7221@dat,7,c
 13500  0027E0  D002               	goto	l362
 13501                           
 13502                           ;max7221.c: 13: LATDbits.LD2 = 1;
 13503  0027E2  848C               	bsf	3980,2,c	;volatile
 13504  0027E4  D001               	goto	l363
 13505  0027E6                     l362:
 13506                           
 13507                           ;max7221.c: 14: else
 13508                           ;max7221.c: 15: LATDbits.LD2 = 0;
 13509  0027E6  948C               	bcf	3980,2,c	;volatile
 13510  0027E8                     l363:
 13511                           
 13512                           ;max7221.c: 16: LATDbits.LD1 = 1;
 13513  0027E8  828C               	bsf	3980,1,c	;volatile
 13514  0027EA  F000               	nop		;# 
 13515  0027EC  F000               	nop		;# 
 13516                           
 13517                           ;max7221.c: 23: LATDbits.LD1 = 0;
 13518  0027EE  928C               	bcf	3980,1,c	;volatile
 13519                           
 13520                           ;max7221.c: 24: dat <<= 1;
 13521  0027F0  90D8               	bcf	status,0,c
 13522  0027F2  360F               	rlcf	Send_Byte_7221@dat,f,c
 13523  0027F4  2A10               	incf	Send_Byte_7221@i,f,c
 13524  0027F6  0E07               	movlw	7
 13525  0027F8  6410               	cpfsgt	Send_Byte_7221@i,c
 13526  0027FA  D7F1               	goto	l360
 13527  0027FC  0C07               	retlw	7
 13528  0027FE                     __end_of_Send_Byte_7221:
 13529                           	opt stack 0
 13530                           tosu	equ	0xFFF
 13531                           tosh	equ	0xFFE
 13532                           tosl	equ	0xFFD
 13533                           pclath	equ	0xFFA
 13534                           tblptru	equ	0xFF8
 13535                           tblptrh	equ	0xFF7
 13536                           tblptrl	equ	0xFF6
 13537                           tablat	equ	0xFF5
 13538                           prodh	equ	0xFF4
 13539                           prodl	equ	0xFF3
 13540                           intcon	equ	0xFF2
 13541                           intcon2	equ	0xFF1
 13542                           postinc0	equ	0xFEE
 13543                           wreg	equ	0xFE8
 13544                           indf1	equ	0xFE7
 13545                           plusw1	equ	0xFE3
 13546                           fsr1h	equ	0xFE2
 13547                           fsr1l	equ	0xFE1
 13548                           indf2	equ	0xFDF
 13549                           postinc2	equ	0xFDE
 13550                           postdec2	equ	0xFDD
 13551                           plusw2	equ	0xFDB
 13552                           fsr2h	equ	0xFDA
 13553                           fsr2l	equ	0xFD9
 13554                           status	equ	0xFD8
 13555                           
 13556 ;; *************** function _pic_to_led *****************
 13557 ;; Defined at:
 13558 ;;		line 30 in file "display.c"
 13559 ;; Parameters:    Size  Location     Type
 13560 ;;  x               1    wreg     unsigned char 
 13561 ;;  pic             1   19[COMRAM] unsigned char 
 13562 ;; Auto vars:     Size  Location     Type
 13563 ;;  x               1   23[COMRAM] unsigned char 
 13564 ;;  i               1   25[COMRAM] unsigned char 
 13565 ;;  j               1   24[COMRAM] unsigned char 
 13566 ;;  mask            1   22[COMRAM] unsigned char 
 13567 ;; Return value:  Size  Location     Type
 13568 ;;                  1    wreg      void 
 13569 ;; Registers used:
 13570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13571 ;; Tracked objects:
 13572 ;;		On entry : 0/0
 13573 ;;		On exit  : 0/0
 13574 ;;		Unchanged: 0/0
 13575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13576 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13577 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13578 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13579 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13580 ;;Total ram usage:        7 bytes
 13581 ;; Hardware stack levels used:    1
 13582 ;; Hardware stack levels required when called:    4
 13583 ;; This function calls:
 13584 ;;		_pixel_off
 13585 ;;		_pixel_on
 13586 ;; This function is called by:
 13587 ;;		_home_temp
 13588 ;;		_pressure
 13589 ;; This function uses a non-reentrant model
 13590 ;;
 13591                           
 13592                           	psect	text64
 13593  002012                     __ptext64:
 13594                           	opt stack 0
 13595  002012                     _pic_to_led:
 13596                           	opt stack 24
 13597                           
 13598                           ;incstack = 0
 13599                           ;pic_to_led@x stored from wreg
 13600  002012  6E18               	movwf	pic_to_led@x,c
 13601                           
 13602                           ;display.c: 32: uint8_t i, j, mask=0x01;
 13603  002014  0E01               	movlw	1
 13604  002016  6E17               	movwf	pic_to_led@mask,c
 13605                           
 13606                           ;display.c: 34: for(i=0; i<7; i++){
 13607  002018  6A1A               	clrf	pic_to_led@i,c
 13608  00201A                     l424:
 13609                           
 13610                           ;display.c: 35: for(j=0;j<8;j++){
 13611  00201A  6A19               	clrf	pic_to_led@j,c
 13612  00201C                     l5710:
 13613                           
 13614                           ;display.c: 36: if(pic7x8[pic][i] & mask){
 13615  00201C  5014               	movf	pic_to_led@pic,w,c
 13616  00201E  0D07               	mullw	7
 13617  002020  0E83               	movlw	low _pic7x8
 13618  002022  6E15               	movwf	??_pic_to_led& (0+255),c
 13619  002024  0EB9               	movlw	high _pic7x8
 13620  002026  6E16               	movwf	(??_pic_to_led+1)& (0+255),c
 13621  002028  50F3               	movf	prodl,w,c
 13622  00202A  2615               	addwf	??_pic_to_led,f,c
 13623  00202C  50F4               	movf	prodh,w,c
 13624  00202E  2216               	addwfc	??_pic_to_led+1,f,c
 13625  002030  501A               	movf	pic_to_led@i,w,c
 13626  002032  2615               	addwf	??_pic_to_led,f,c
 13627  002034  0E00               	movlw	0
 13628  002036  2216               	addwfc	??_pic_to_led+1,f,c
 13629  002038  C015  FFF6         	movff	??_pic_to_led,tblptrl
 13630  00203C  C016  FFF7         	movff	??_pic_to_led+1,tblptrh
 13631  002040                     	if	0	;tblptru may be non-zero
 13632  002040                     	endif
 13633  002040                     	if	0	;tblptru may be non-zero
 13634  002040                     	endif
 13635  002040  0008               	tblrd		*
 13636  002042  50F5               	movf	tablat,w,c
 13637  002044  1417               	andwf	pic_to_led@mask,w,c
 13638  002046  E007               	bz	l5714
 13639                           
 13640                           ;display.c: 37: pixel_on(x+i,j);
 13641  002048  C019  F00F         	movff	pic_to_led@j,pixel_on@y
 13642  00204C  5018               	movf	pic_to_led@x,w,c
 13643  00204E  241A               	addwf	pic_to_led@i,w,c
 13644  002050  ECFF  F013         	call	_pixel_on
 13645                           
 13646                           ;display.c: 38: }
 13647  002054  D006               	goto	l5716
 13648  002056                     l5714:
 13649                           
 13650                           ;display.c: 39: else {
 13651                           ;display.c: 40: pixel_off(x+i,j);
 13652  002056  C019  F00F         	movff	pic_to_led@j,pixel_off@y
 13653  00205A  5018               	movf	pic_to_led@x,w,c
 13654  00205C  241A               	addwf	pic_to_led@i,w,c
 13655  00205E  EC8F  F013         	call	_pixel_off
 13656  002062                     l5716:
 13657                           
 13658                           ;display.c: 41: };
 13659                           ;display.c: 42: mask = mask<<1;
 13660  002062  90D8               	bcf	status,0,c
 13661  002064  3617               	rlcf	pic_to_led@mask,f,c
 13662  002066  2A19               	incf	pic_to_led@j,f,c
 13663  002068  0E07               	movlw	7
 13664  00206A  6419               	cpfsgt	pic_to_led@j,c
 13665  00206C  D7D7               	goto	l5710
 13666                           
 13667                           ;display.c: 43: };
 13668                           ;display.c: 44: mask=0x01;
 13669  00206E  0E01               	movlw	1
 13670  002070  6E17               	movwf	pic_to_led@mask,c
 13671  002072  2A1A               	incf	pic_to_led@i,f,c
 13672  002074  0E06               	movlw	6
 13673  002076  641A               	cpfsgt	pic_to_led@i,c
 13674  002078  D7D0               	goto	l424
 13675  00207A  0C06               	retlw	6
 13676  00207C                     __end_of_pic_to_led:
 13677                           	opt stack 0
 13678                           tosu	equ	0xFFF
 13679                           tosh	equ	0xFFE
 13680                           tosl	equ	0xFFD
 13681                           pclath	equ	0xFFA
 13682                           tblptru	equ	0xFF8
 13683                           tblptrh	equ	0xFF7
 13684                           tblptrl	equ	0xFF6
 13685                           tablat	equ	0xFF5
 13686                           prodh	equ	0xFF4
 13687                           prodl	equ	0xFF3
 13688                           intcon	equ	0xFF2
 13689                           intcon2	equ	0xFF1
 13690                           postinc0	equ	0xFEE
 13691                           wreg	equ	0xFE8
 13692                           indf1	equ	0xFE7
 13693                           plusw1	equ	0xFE3
 13694                           fsr1h	equ	0xFE2
 13695                           fsr1l	equ	0xFE1
 13696                           indf2	equ	0xFDF
 13697                           postinc2	equ	0xFDE
 13698                           postdec2	equ	0xFDD
 13699                           plusw2	equ	0xFDB
 13700                           fsr2h	equ	0xFDA
 13701                           fsr2l	equ	0xFD9
 13702                           status	equ	0xFD8
 13703                           
 13704 ;; *************** function _pixel_on *****************
 13705 ;; Defined at:
 13706 ;;		line 14 in file "display.c"
 13707 ;; Parameters:    Size  Location     Type
 13708 ;;  x               1    wreg     unsigned char 
 13709 ;;  y               1   14[COMRAM] unsigned char 
 13710 ;; Auto vars:     Size  Location     Type
 13711 ;;  x               1   17[COMRAM] unsigned char 
 13712 ;; Return value:  Size  Location     Type
 13713 ;;                  1    wreg      void 
 13714 ;; Registers used:
 13715 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13716 ;; Tracked objects:
 13717 ;;		On entry : 0/0
 13718 ;;		On exit  : 0/0
 13719 ;;		Unchanged: 0/0
 13720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13721 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13723 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13724 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13725 ;;Total ram usage:        4 bytes
 13726 ;; Hardware stack levels used:    1
 13727 ;; Hardware stack levels required when called:    3
 13728 ;; This function calls:
 13729 ;;		Nothing
 13730 ;; This function is called by:
 13731 ;;		_pic_to_led
 13732 ;;		_putchar_b_buf
 13733 ;; This function uses a non-reentrant model
 13734 ;;
 13735                           
 13736                           	psect	text65
 13737  0027FE                     __ptext65:
 13738                           	opt stack 0
 13739  0027FE                     _pixel_on:
 13740                           	opt stack 24
 13741                           
 13742                           ;incstack = 0
 13743                           ;pixel_on@x stored from wreg
 13744  0027FE  6E12               	movwf	pixel_on@x,c
 13745                           
 13746                           ;display.c: 16: Dis_Buff[x] |= (1<<y);
 13747  002800  C00F  F010         	movff	pixel_on@y,??_pixel_on
 13748  002804  0E01               	movlw	1
 13749  002806  6E11               	movwf	(??_pixel_on+1)& (0+255),c
 13750  002808  2A10               	incf	??_pixel_on,f,c
 13751  00280A  D002               	goto	u3744
 13752  00280C                     u3745:
 13753  00280C  90D8               	bcf	status,0,c
 13754  00280E  3611               	rlcf	??_pixel_on+1,f,c
 13755  002810                     u3744:
 13756  002810  2E10               	decfsz	??_pixel_on,f,c
 13757  002812  D7FC               	goto	u3745
 13758  002814  5012               	movf	pixel_on@x,w,c
 13759  002816  0FA4               	addlw	low _Dis_Buff
 13760  002818  6ED9               	movwf	fsr2l,c
 13761  00281A  6ADA               	clrf	fsr2h,c
 13762  00281C  5011               	movf	??_pixel_on+1,w,c
 13763  00281E  12DF               	iorwf	indf2,f,c
 13764  002820  0012               	return		;funcret
 13765  002822                     __end_of_pixel_on:
 13766                           	opt stack 0
 13767                           tosu	equ	0xFFF
 13768                           tosh	equ	0xFFE
 13769                           tosl	equ	0xFFD
 13770                           pclath	equ	0xFFA
 13771                           tblptru	equ	0xFF8
 13772                           tblptrh	equ	0xFF7
 13773                           tblptrl	equ	0xFF6
 13774                           tablat	equ	0xFF5
 13775                           prodh	equ	0xFF4
 13776                           prodl	equ	0xFF3
 13777                           intcon	equ	0xFF2
 13778                           intcon2	equ	0xFF1
 13779                           postinc0	equ	0xFEE
 13780                           wreg	equ	0xFE8
 13781                           indf1	equ	0xFE7
 13782                           plusw1	equ	0xFE3
 13783                           fsr1h	equ	0xFE2
 13784                           fsr1l	equ	0xFE1
 13785                           indf2	equ	0xFDF
 13786                           postinc2	equ	0xFDE
 13787                           postdec2	equ	0xFDD
 13788                           plusw2	equ	0xFDB
 13789                           fsr2h	equ	0xFDA
 13790                           fsr2l	equ	0xFD9
 13791                           status	equ	0xFD8
 13792                           
 13793 ;; *************** function _pixel_off *****************
 13794 ;; Defined at:
 13795 ;;		line 22 in file "display.c"
 13796 ;; Parameters:    Size  Location     Type
 13797 ;;  x               1    wreg     unsigned char 
 13798 ;;  y               1   14[COMRAM] unsigned char 
 13799 ;; Auto vars:     Size  Location     Type
 13800 ;;  x               1   18[COMRAM] unsigned char 
 13801 ;; Return value:  Size  Location     Type
 13802 ;;                  1    wreg      void 
 13803 ;; Registers used:
 13804 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13805 ;; Tracked objects:
 13806 ;;		On entry : 0/0
 13807 ;;		On exit  : 0/0
 13808 ;;		Unchanged: 0/0
 13809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13810 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;Total ram usage:        5 bytes
 13815 ;; Hardware stack levels used:    1
 13816 ;; Hardware stack levels required when called:    3
 13817 ;; This function calls:
 13818 ;;		Nothing
 13819 ;; This function is called by:
 13820 ;;		_pic_to_led
 13821 ;;		_putchar_b_buf
 13822 ;; This function uses a non-reentrant model
 13823 ;;
 13824                           
 13825                           	psect	text66
 13826  00271E                     __ptext66:
 13827                           	opt stack 0
 13828  00271E                     _pixel_off:
 13829                           	opt stack 24
 13830                           
 13831                           ;incstack = 0
 13832                           ;pixel_off@x stored from wreg
 13833  00271E  6E13               	movwf	pixel_off@x,c
 13834                           
 13835                           ;display.c: 24: Dis_Buff[x] &= ~(1<<y);
 13836  002720  C00F  F010         	movff	pixel_off@y,??_pixel_off
 13837  002724  0E01               	movlw	1
 13838  002726  6E11               	movwf	(??_pixel_off+1)& (0+255),c
 13839  002728  2A10               	incf	??_pixel_off,f,c
 13840  00272A  D002               	goto	u3754
 13841  00272C                     u3755:
 13842  00272C  90D8               	bcf	status,0,c
 13843  00272E  3611               	rlcf	??_pixel_off+1,f,c
 13844  002730                     u3754:
 13845  002730  2E10               	decfsz	??_pixel_off,f,c
 13846  002732  D7FC               	goto	u3755
 13847  002734  1C11               	comf	??_pixel_off+1,w,c
 13848  002736  6E12               	movwf	(??_pixel_off+2)& (0+255),c
 13849  002738  5013               	movf	pixel_off@x,w,c
 13850  00273A  0FA4               	addlw	low _Dis_Buff
 13851  00273C  6ED9               	movwf	fsr2l,c
 13852  00273E  6ADA               	clrf	fsr2h,c
 13853  002740  5012               	movf	??_pixel_off+2,w,c
 13854  002742  16DF               	andwf	indf2,f,c
 13855  002744  0012               	return		;funcret
 13856  002746                     __end_of_pixel_off:
 13857                           	opt stack 0
 13858                           tosu	equ	0xFFF
 13859                           tosh	equ	0xFFE
 13860                           tosl	equ	0xFFD
 13861                           pclath	equ	0xFFA
 13862                           tblptru	equ	0xFF8
 13863                           tblptrh	equ	0xFF7
 13864                           tblptrl	equ	0xFF6
 13865                           tablat	equ	0xFF5
 13866                           prodh	equ	0xFF4
 13867                           prodl	equ	0xFF3
 13868                           intcon	equ	0xFF2
 13869                           intcon2	equ	0xFF1
 13870                           postinc0	equ	0xFEE
 13871                           wreg	equ	0xFE8
 13872                           indf1	equ	0xFE7
 13873                           plusw1	equ	0xFE3
 13874                           fsr1h	equ	0xFE2
 13875                           fsr1l	equ	0xFE1
 13876                           indf2	equ	0xFDF
 13877                           postinc2	equ	0xFDE
 13878                           postdec2	equ	0xFDD
 13879                           plusw2	equ	0xFDB
 13880                           fsr2h	equ	0xFDA
 13881                           fsr2l	equ	0xFD9
 13882                           status	equ	0xFD8
 13883                           
 13884 ;; *************** function _clear_matrix *****************
 13885 ;; Defined at:
 13886 ;;		line 146 in file "display.c"
 13887 ;; Parameters:    Size  Location     Type
 13888 ;;		None
 13889 ;; Auto vars:     Size  Location     Type
 13890 ;;  i               1   14[COMRAM] unsigned char 
 13891 ;; Return value:  Size  Location     Type
 13892 ;;                  1    wreg      void 
 13893 ;; Registers used:
 13894 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13895 ;; Tracked objects:
 13896 ;;		On entry : 0/0
 13897 ;;		On exit  : 0/0
 13898 ;;		Unchanged: 0/0
 13899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13903 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13904 ;;Total ram usage:        1 bytes
 13905 ;; Hardware stack levels used:    1
 13906 ;; Hardware stack levels required when called:    3
 13907 ;; This function calls:
 13908 ;;		Nothing
 13909 ;; This function is called by:
 13910 ;;		_main
 13911 ;;		_time_set_hr
 13912 ;;		_home_temp
 13913 ;;		_pressure
 13914 ;; This function uses a non-reentrant model
 13915 ;;
 13916                           
 13917                           	psect	text67
 13918  0029D2                     __ptext67:
 13919                           	opt stack 0
 13920  0029D2                     _clear_matrix:
 13921                           	opt stack 27
 13922                           
 13923                           ;display.c: 148: uint8_t i;
 13924                           ;display.c: 149: for (i=0; i<=4 * 8; i++)
 13925                           
 13926                           ;incstack = 0
 13927  0029D2  6A0F               	clrf	clear_matrix@i,c
 13928  0029D4                     l5616:
 13929                           
 13930                           ;display.c: 150: Dis_Buff[i] = 0;
 13931  0029D4  500F               	movf	clear_matrix@i,w,c
 13932  0029D6  EC65  F009         	call	PL148	;call to abstracted procedure
 13933  0029DA  2A0F               	incf	clear_matrix@i,f,c
 13934  0029DC  0E20               	movlw	32
 13935  0029DE  640F               	cpfsgt	clear_matrix@i,c
 13936  0029E0  D7F9               	goto	l5616
 13937  0029E2  0C20               	retlw	32
 13938  0029E4                     __end_of_clear_matrix:
 13939                           	opt stack 0
 13940                           tosu	equ	0xFFF
 13941                           tosh	equ	0xFFE
 13942                           tosl	equ	0xFFD
 13943                           pclath	equ	0xFFA
 13944                           tblptru	equ	0xFF8
 13945                           tblptrh	equ	0xFF7
 13946                           tblptrl	equ	0xFF6
 13947                           tablat	equ	0xFF5
 13948                           prodh	equ	0xFF4
 13949                           prodl	equ	0xFF3
 13950                           intcon	equ	0xFF2
 13951                           intcon2	equ	0xFF1
 13952                           postinc0	equ	0xFEE
 13953                           wreg	equ	0xFE8
 13954                           indf1	equ	0xFE7
 13955                           plusw1	equ	0xFE3
 13956                           fsr1h	equ	0xFE2
 13957                           fsr1l	equ	0xFE1
 13958                           indf2	equ	0xFDF
 13959                           postinc2	equ	0xFDE
 13960                           postdec2	equ	0xFDD
 13961                           plusw2	equ	0xFDB
 13962                           fsr2h	equ	0xFDA
 13963                           fsr2l	equ	0xFD9
 13964                           status	equ	0xFD8
 13965                           
 13966 ;; *************** function ___lwmod *****************
 13967 ;; Defined at:
 13968 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 13969 ;; Parameters:    Size  Location     Type
 13970 ;;  dividend        2   21[COMRAM] unsigned int 
 13971 ;;  divisor         2   23[COMRAM] unsigned int 
 13972 ;; Auto vars:     Size  Location     Type
 13973 ;;  counter         1   25[COMRAM] unsigned char 
 13974 ;; Return value:  Size  Location     Type
 13975 ;;                  2   21[COMRAM] unsigned int 
 13976 ;; Registers used:
 13977 ;;		wreg, status,2, status,0
 13978 ;; Tracked objects:
 13979 ;;		On entry : 0/0
 13980 ;;		On exit  : 0/0
 13981 ;;		Unchanged: 0/0
 13982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13983 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13986 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13987 ;;Total ram usage:        5 bytes
 13988 ;; Hardware stack levels used:    1
 13989 ;; Hardware stack levels required when called:    3
 13990 ;; This function calls:
 13991 ;;		Nothing
 13992 ;; This function is called by:
 13993 ;;		_home_temp
 13994 ;;		_readTemp_Single
 13995 ;; This function uses a non-reentrant model
 13996 ;;
 13997                           
 13998                           	psect	text68
 13999  002400                     __ptext68:
 14000                           	opt stack 0
 14001  002400                     ___lwmod:
 14002                           	opt stack 24
 14003                           
 14004                           ;incstack = 0
 14005  002400  5018               	movf	___lwmod@divisor,w,c
 14006  002402  1019               	iorwf	___lwmod@divisor+1,w,c
 14007  002404  E017               	bz	l1745
 14008  002406  0E01               	movlw	1
 14009  002408  6E1A               	movwf	___lwmod@counter,c
 14010  00240A  D004               	goto	l5600
 14011  00240C                     l5598:
 14012  00240C  90D8               	bcf	status,0,c
 14013  00240E  3618               	rlcf	___lwmod@divisor,f,c
 14014  002410  3619               	rlcf	___lwmod@divisor+1,f,c
 14015  002412  2A1A               	incf	___lwmod@counter,f,c
 14016  002414                     l5600:
 14017  002414  AE19               	btfss	___lwmod@divisor+1,7,c
 14018  002416  D7FA               	goto	l5598
 14019  002418                     l5602:
 14020  002418  5018               	movf	___lwmod@divisor,w,c
 14021  00241A  5C16               	subwf	___lwmod@dividend,w,c
 14022  00241C  5019               	movf	___lwmod@divisor+1,w,c
 14023  00241E  5817               	subwfb	___lwmod@dividend+1,w,c
 14024  002420  E304               	bnc	l5606
 14025  002422  5018               	movf	___lwmod@divisor,w,c
 14026  002424  5E16               	subwf	___lwmod@dividend,f,c
 14027  002426  5019               	movf	___lwmod@divisor+1,w,c
 14028  002428  5A17               	subwfb	___lwmod@dividend+1,f,c
 14029  00242A                     l5606:
 14030  00242A  90D8               	bcf	status,0,c
 14031  00242C  3219               	rrcf	___lwmod@divisor+1,f,c
 14032  00242E  3218               	rrcf	___lwmod@divisor,f,c
 14033  002430  2E1A               	decfsz	___lwmod@counter,f,c
 14034  002432  D7F2               	goto	l5602
 14035  002434                     l1745:
 14036  002434  C016  F016         	movff	___lwmod@dividend,?___lwmod
 14037  002438  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 14038  00243C  0012               	return		;funcret
 14039  00243E                     __end_of___lwmod:
 14040                           	opt stack 0
 14041                           tosu	equ	0xFFF
 14042                           tosh	equ	0xFFE
 14043                           tosl	equ	0xFFD
 14044                           pclath	equ	0xFFA
 14045                           tblptru	equ	0xFF8
 14046                           tblptrh	equ	0xFF7
 14047                           tblptrl	equ	0xFF6
 14048                           tablat	equ	0xFF5
 14049                           prodh	equ	0xFF4
 14050                           prodl	equ	0xFF3
 14051                           intcon	equ	0xFF2
 14052                           intcon2	equ	0xFF1
 14053                           postinc0	equ	0xFEE
 14054                           wreg	equ	0xFE8
 14055                           indf1	equ	0xFE7
 14056                           plusw1	equ	0xFE3
 14057                           fsr1h	equ	0xFE2
 14058                           fsr1l	equ	0xFE1
 14059                           indf2	equ	0xFDF
 14060                           postinc2	equ	0xFDE
 14061                           postdec2	equ	0xFDD
 14062                           plusw2	equ	0xFDB
 14063                           fsr2h	equ	0xFDA
 14064                           fsr2l	equ	0xFD9
 14065                           status	equ	0xFD8
 14066                           
 14067 ;; *************** function ___lwdiv *****************
 14068 ;; Defined at:
 14069 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;  dividend        2   14[COMRAM] unsigned int 
 14072 ;;  divisor         2   16[COMRAM] unsigned int 
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;  quotient        2   19[COMRAM] unsigned int 
 14075 ;;  counter         1   18[COMRAM] unsigned char 
 14076 ;; Return value:  Size  Location     Type
 14077 ;;                  2   14[COMRAM] unsigned int 
 14078 ;; Registers used:
 14079 ;;		wreg, status,2, status,0
 14080 ;; Tracked objects:
 14081 ;;		On entry : 0/0
 14082 ;;		On exit  : 0/0
 14083 ;;		Unchanged: 0/0
 14084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14085 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14086 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14088 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14089 ;;Total ram usage:        7 bytes
 14090 ;; Hardware stack levels used:    1
 14091 ;; Hardware stack levels required when called:    3
 14092 ;; This function calls:
 14093 ;;		Nothing
 14094 ;; This function is called by:
 14095 ;;		_home_temp
 14096 ;;		_readTemp_Single
 14097 ;; This function uses a non-reentrant model
 14098 ;;
 14099                           
 14100                           	psect	text69
 14101  00236E                     __ptext69:
 14102                           	opt stack 0
 14103  00236E                     ___lwdiv:
 14104                           	opt stack 24
 14105                           
 14106                           ;incstack = 0
 14107  00236E  6A14               	clrf	___lwdiv@quotient,c
 14108  002370  6A15               	clrf	___lwdiv@quotient+1,c
 14109  002372  5011               	movf	___lwdiv@divisor,w,c
 14110  002374  1012               	iorwf	___lwdiv@divisor+1,w,c
 14111  002376  E01B               	bz	l1735
 14112  002378  0E01               	movlw	1
 14113  00237A  6E13               	movwf	___lwdiv@counter,c
 14114  00237C  D004               	goto	l5580
 14115  00237E                     l5578:
 14116  00237E  90D8               	bcf	status,0,c
 14117  002380  3611               	rlcf	___lwdiv@divisor,f,c
 14118  002382  3612               	rlcf	___lwdiv@divisor+1,f,c
 14119  002384  2A13               	incf	___lwdiv@counter,f,c
 14120  002386                     l5580:
 14121  002386  AE12               	btfss	___lwdiv@divisor+1,7,c
 14122  002388  D7FA               	goto	l5578
 14123  00238A                     l5582:
 14124  00238A  90D8               	bcf	status,0,c
 14125  00238C  3614               	rlcf	___lwdiv@quotient,f,c
 14126  00238E  3615               	rlcf	___lwdiv@quotient+1,f,c
 14127  002390  5011               	movf	___lwdiv@divisor,w,c
 14128  002392  5C0F               	subwf	___lwdiv@dividend,w,c
 14129  002394  5012               	movf	___lwdiv@divisor+1,w,c
 14130  002396  5810               	subwfb	___lwdiv@dividend+1,w,c
 14131  002398  E305               	bnc	l5590
 14132  00239A  5011               	movf	___lwdiv@divisor,w,c
 14133  00239C  5E0F               	subwf	___lwdiv@dividend,f,c
 14134  00239E  5012               	movf	___lwdiv@divisor+1,w,c
 14135  0023A0  5A10               	subwfb	___lwdiv@dividend+1,f,c
 14136  0023A2  8014               	bsf	___lwdiv@quotient,0,c
 14137  0023A4                     l5590:
 14138  0023A4  90D8               	bcf	status,0,c
 14139  0023A6  3212               	rrcf	___lwdiv@divisor+1,f,c
 14140  0023A8  3211               	rrcf	___lwdiv@divisor,f,c
 14141  0023AA  2E13               	decfsz	___lwdiv@counter,f,c
 14142  0023AC  D7EE               	goto	l5582
 14143  0023AE                     l1735:
 14144  0023AE  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 14145  0023B2  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14146  0023B6  0012               	return		;funcret
 14147  0023B8                     __end_of___lwdiv:
 14148                           	opt stack 0
 14149                           tosu	equ	0xFFF
 14150                           tosh	equ	0xFFE
 14151                           tosl	equ	0xFFD
 14152                           pclath	equ	0xFFA
 14153                           tblptru	equ	0xFF8
 14154                           tblptrh	equ	0xFF7
 14155                           tblptrl	equ	0xFF6
 14156                           tablat	equ	0xFF5
 14157                           prodh	equ	0xFF4
 14158                           prodl	equ	0xFF3
 14159                           intcon	equ	0xFF2
 14160                           intcon2	equ	0xFF1
 14161                           postinc0	equ	0xFEE
 14162                           wreg	equ	0xFE8
 14163                           indf1	equ	0xFE7
 14164                           plusw1	equ	0xFE3
 14165                           fsr1h	equ	0xFE2
 14166                           fsr1l	equ	0xFE1
 14167                           indf2	equ	0xFDF
 14168                           postinc2	equ	0xFDE
 14169                           postdec2	equ	0xFDD
 14170                           plusw2	equ	0xFDB
 14171                           fsr2h	equ	0xFDA
 14172                           fsr2l	equ	0xFD9
 14173                           status	equ	0xFD8
 14174                           
 14175 ;; *************** function ___lbmod *****************
 14176 ;; Defined at:
 14177 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbmod.c"
 14178 ;; Parameters:    Size  Location     Type
 14179 ;;  dividend        1    wreg     unsigned char 
 14180 ;;  divisor         1   18[COMRAM] unsigned char 
 14181 ;; Auto vars:     Size  Location     Type
 14182 ;;  dividend        1   19[COMRAM] unsigned char 
 14183 ;;  rem             1   21[COMRAM] unsigned char 
 14184 ;;  counter         1   20[COMRAM] unsigned char 
 14185 ;; Return value:  Size  Location     Type
 14186 ;;                  1    wreg      unsigned char 
 14187 ;; Registers used:
 14188 ;;		wreg, status,2, status,0
 14189 ;; Tracked objects:
 14190 ;;		On entry : 0/0
 14191 ;;		On exit  : 0/0
 14192 ;;		Unchanged: 0/0
 14193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14194 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14195 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;Total ram usage:        4 bytes
 14199 ;; Hardware stack levels used:    1
 14200 ;; Hardware stack levels required when called:    3
 14201 ;; This function calls:
 14202 ;;		Nothing
 14203 ;; This function is called by:
 14204 ;;		_FillBuf
 14205 ;;		_decimal_to_bcd
 14206 ;;		_time_set_min
 14207 ;;		_time_set_hr
 14208 ;;		_time_set_yr
 14209 ;;		_time_set_dt
 14210 ;;		_set_font_set
 14211 ;;		_home_temp
 14212 ;;		_pressure
 14213 ;; This function uses a non-reentrant model
 14214 ;;
 14215                           
 14216                           	psect	text70
 14217  00276C                     __ptext70:
 14218                           	opt stack 0
 14219  00276C                     ___lbmod:
 14220                           	opt stack 23
 14221                           
 14222                           ;incstack = 0
 14223                           ;___lbmod@dividend stored from wreg
 14224  00276C  6E14               	movwf	___lbmod@dividend,c
 14225  00276E  0E08               	movlw	8
 14226  002770  6E15               	movwf	___lbmod@counter,c
 14227  002772  6A16               	clrf	___lbmod@rem,c
 14228  002774                     l5384:
 14229  002774  90D8               	bcf	status,0,c
 14230  002776  3414               	rlcf	___lbmod@dividend,w,c
 14231  002778  3416               	rlcf	___lbmod@rem,w,c
 14232  00277A  6E16               	movwf	___lbmod@rem,c
 14233  00277C  90D8               	bcf	status,0,c
 14234  00277E  3614               	rlcf	___lbmod@dividend,f,c
 14235  002780  5013               	movf	___lbmod@divisor,w,c
 14236  002782  5C16               	subwf	___lbmod@rem,w,c
 14237  002784  E302               	bnc	l5392
 14238  002786  5013               	movf	___lbmod@divisor,w,c
 14239  002788  5E16               	subwf	___lbmod@rem,f,c
 14240  00278A                     l5392:
 14241  00278A  2E15               	decfsz	___lbmod@counter,f,c
 14242  00278C  D7F3               	goto	l5384
 14243  00278E  5016               	movf	___lbmod@rem,w,c
 14244  002790  0012               	return		;funcret
 14245  002792                     __end_of___lbmod:
 14246                           	opt stack 0
 14247                           tosu	equ	0xFFF
 14248                           tosh	equ	0xFFE
 14249                           tosl	equ	0xFFD
 14250                           pclath	equ	0xFFA
 14251                           tblptru	equ	0xFF8
 14252                           tblptrh	equ	0xFF7
 14253                           tblptrl	equ	0xFF6
 14254                           tablat	equ	0xFF5
 14255                           prodh	equ	0xFF4
 14256                           prodl	equ	0xFF3
 14257                           intcon	equ	0xFF2
 14258                           intcon2	equ	0xFF1
 14259                           postinc0	equ	0xFEE
 14260                           wreg	equ	0xFE8
 14261                           indf1	equ	0xFE7
 14262                           plusw1	equ	0xFE3
 14263                           fsr1h	equ	0xFE2
 14264                           fsr1l	equ	0xFE1
 14265                           indf2	equ	0xFDF
 14266                           postinc2	equ	0xFDE
 14267                           postdec2	equ	0xFDD
 14268                           plusw2	equ	0xFDB
 14269                           fsr2h	equ	0xFDA
 14270                           fsr2l	equ	0xFD9
 14271                           status	equ	0xFD8
 14272                           
 14273 ;; *************** function ___lbdiv *****************
 14274 ;; Defined at:
 14275 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbdiv.c"
 14276 ;; Parameters:    Size  Location     Type
 14277 ;;  dividend        1    wreg     unsigned char 
 14278 ;;  divisor         1   14[COMRAM] unsigned char 
 14279 ;; Auto vars:     Size  Location     Type
 14280 ;;  dividend        1   15[COMRAM] unsigned char 
 14281 ;;  quotient        1   17[COMRAM] unsigned char 
 14282 ;;  counter         1   16[COMRAM] unsigned char 
 14283 ;; Return value:  Size  Location     Type
 14284 ;;                  1    wreg      unsigned char 
 14285 ;; Registers used:
 14286 ;;		wreg, status,2, status,0
 14287 ;; Tracked objects:
 14288 ;;		On entry : 0/0
 14289 ;;		On exit  : 0/0
 14290 ;;		Unchanged: 0/0
 14291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14292 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14293 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14295 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14296 ;;Total ram usage:        4 bytes
 14297 ;; Hardware stack levels used:    1
 14298 ;; Hardware stack levels required when called:    3
 14299 ;; This function calls:
 14300 ;;		Nothing
 14301 ;; This function is called by:
 14302 ;;		_FillBuf
 14303 ;;		_decimal_to_bcd
 14304 ;;		_time_set_min
 14305 ;;		_time_set_hr
 14306 ;;		_time_set_yr
 14307 ;;		_time_set_dt
 14308 ;;		_home_temp
 14309 ;;		_pressure
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           	psect	text71
 14314  002560                     __ptext71:
 14315                           	opt stack 0
 14316  002560                     ___lbdiv:
 14317                           	opt stack 23
 14318                           
 14319                           ;incstack = 0
 14320                           ;___lbdiv@dividend stored from wreg
 14321  002560  6E10               	movwf	___lbdiv@dividend,c
 14322  002562  6A12               	clrf	___lbdiv@quotient,c
 14323  002564  500F               	movf	___lbdiv@divisor,w,c
 14324  002566  E014               	bz	l5376
 14325  002568  0E01               	movlw	1
 14326  00256A  6E11               	movwf	___lbdiv@counter,c
 14327  00256C  D003               	goto	l5364
 14328  00256E                     l5360:
 14329  00256E  90D8               	bcf	status,0,c
 14330  002570  360F               	rlcf	___lbdiv@divisor,f,c
 14331  002572  2A11               	incf	___lbdiv@counter,f,c
 14332  002574                     l5364:
 14333  002574  AE0F               	btfss	___lbdiv@divisor,7,c
 14334  002576  D7FB               	goto	l5360
 14335  002578                     l5366:
 14336  002578  90D8               	bcf	status,0,c
 14337  00257A  3612               	rlcf	___lbdiv@quotient,f,c
 14338  00257C  500F               	movf	___lbdiv@divisor,w,c
 14339  00257E  5C10               	subwf	___lbdiv@dividend,w,c
 14340  002580  E303               	bnc	l5372
 14341  002582  500F               	movf	___lbdiv@divisor,w,c
 14342  002584  5E10               	subwf	___lbdiv@dividend,f,c
 14343  002586  8012               	bsf	___lbdiv@quotient,0,c
 14344  002588                     l5372:
 14345  002588  90D8               	bcf	status,0,c
 14346  00258A  320F               	rrcf	___lbdiv@divisor,f,c
 14347  00258C  2E11               	decfsz	___lbdiv@counter,f,c
 14348  00258E  D7F4               	goto	l5366
 14349  002590                     l5376:
 14350  002590  5012               	movf	___lbdiv@quotient,w,c
 14351  002592  0012               	return		;funcret
 14352  002594                     __end_of___lbdiv:
 14353                           	opt stack 0
 14354                           tosu	equ	0xFFF
 14355                           tosh	equ	0xFFE
 14356                           tosl	equ	0xFFD
 14357                           pclath	equ	0xFFA
 14358                           tblptru	equ	0xFF8
 14359                           tblptrh	equ	0xFF7
 14360                           tblptrl	equ	0xFF6
 14361                           tablat	equ	0xFF5
 14362                           prodh	equ	0xFF4
 14363                           prodl	equ	0xFF3
 14364                           intcon	equ	0xFF2
 14365                           intcon2	equ	0xFF1
 14366                           postinc0	equ	0xFEE
 14367                           wreg	equ	0xFE8
 14368                           indf1	equ	0xFE7
 14369                           plusw1	equ	0xFE3
 14370                           fsr1h	equ	0xFE2
 14371                           fsr1l	equ	0xFE1
 14372                           indf2	equ	0xFDF
 14373                           postinc2	equ	0xFDE
 14374                           postdec2	equ	0xFDD
 14375                           plusw2	equ	0xFDB
 14376                           fsr2h	equ	0xFDA
 14377                           fsr2l	equ	0xFD9
 14378                           status	equ	0xFD8
 14379                           
 14380 ;; *************** function _RTOS_SetTask *****************
 14381 ;; Defined at:
 14382 ;;		line 22 in file "dispatcher.c"
 14383 ;; Parameters:    Size  Location     Type
 14384 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 14385 ;;		 -> pressure(1), home_temp(1), set_font_set(1), time_set_dy(1), 
 14386 ;;		 -> time_set_dt(1), time_set_mt(1), time_set_yr(1), default_state(1), 
 14387 ;;		 -> time_set_hr(1), time_set_min(1), GetTime(1), key_press(1), 
 14388 ;;		 -> time_led(1), 
 14389 ;;  taskDelay       2   16[COMRAM] unsigned int 
 14390 ;;  taskPeriod      2   18[COMRAM] unsigned int 
 14391 ;; Auto vars:     Size  Location     Type
 14392 ;;  i               1   22[COMRAM] unsigned char 
 14393 ;; Return value:  Size  Location     Type
 14394 ;;                  1    wreg      void 
 14395 ;; Registers used:
 14396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14397 ;; Tracked objects:
 14398 ;;		On entry : 0/0
 14399 ;;		On exit  : 0/0
 14400 ;;		Unchanged: 0/0
 14401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14402 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14404 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14405 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14406 ;;Total ram usage:        9 bytes
 14407 ;; Hardware stack levels used:    1
 14408 ;; Hardware stack levels required when called:    3
 14409 ;; This function calls:
 14410 ;;		Nothing
 14411 ;; This function is called by:
 14412 ;;		_main
 14413 ;;		_time_set_min
 14414 ;;		_time_set_hr
 14415 ;;		_time_set_yr
 14416 ;;		_time_set_mt
 14417 ;;		_time_set_dt
 14418 ;;		_time_set_dy
 14419 ;;		_set_font_set
 14420 ;;		_home_temp
 14421 ;;		_pressure
 14422 ;;		_time_led
 14423 ;; This function uses a non-reentrant model
 14424 ;;
 14425                           
 14426                           	psect	text72
 14427  001CB8                     __ptext72:
 14428                           	opt stack 0
 14429  001CB8                     _RTOS_SetTask:
 14430                           	opt stack 27
 14431                           
 14432                           ;dispatcher.c: 24: uint8_t i;
 14433                           ;dispatcher.c: 26: if(!taskFunc) return;
 14434                           
 14435                           ;incstack = 0
 14436  001CB8  500F               	movf	RTOS_SetTask@taskFunc,w,c
 14437  001CBA  1010               	iorwf	RTOS_SetTask@taskFunc+1,w,c
 14438  001CBC  E101               	bnz	l240
 14439  001CBE  0012               	return	
 14440  001CC0                     l240:
 14441                           
 14442                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 14443  001CC0  6A17               	clrf	RTOS_SetTask@i,c
 14444  001CC2  D018               	goto	l5638
 14445  001CC4                     l5626:
 14446                           
 14447                           ;dispatcher.c: 28: {
 14448                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 14449  001CC4  5017               	movf	RTOS_SetTask@i,w,c
 14450  001CC6  EC5C  F00D         	call	PL26	;call to abstracted procedure
 14451  001CCA  500F               	movf	RTOS_SetTask@taskFunc,w,c	;volatile
 14452  001CCC  18DE               	xorwf	postinc2,w,c
 14453  001CCE  E111               	bnz	l5636
 14454  001CD0  5010               	movf	RTOS_SetTask@taskFunc+1,w,c	;volatile
 14455  001CD2  18DE               	xorwf	postinc2,w,c
 14456  001CD4  E10E               	bnz	l5636
 14457                           
 14458                           ;dispatcher.c: 30: {
 14459                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 14460  001CD6  9EF2               	bcf	intcon,7,c	;volatile
 14461                           
 14462                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 14463  001CD8  5017               	movf	RTOS_SetTask@i,w,c
 14464  001CDA  EC51  F00C         	call	PL22	;call to abstracted procedure
 14465  001CDE  D82A               	call	PL144	;call to abstracted procedure
 14466                           
 14467                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 14468  001CE0  5017               	movf	RTOS_SetTask@i,w,c
 14469  001CE2  EC6E  F00D         	call	PL32	;call to abstracted procedure
 14470  001CE6  D821               	call	PL122	;call to abstracted procedure
 14471                           
 14472                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 14473  001CE8  5017               	movf	RTOS_SetTask@i,w,c
 14474  001CEA  EC64  F00D         	call	PL28	;call to abstracted procedure
 14475                           
 14476                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 14477  001CEE  8EF2               	bsf	intcon,7,c	;volatile
 14478  001CF0  0C00               	retlw	0
 14479  001CF2                     l5636:
 14480  001CF2  2A17               	incf	RTOS_SetTask@i,f,c
 14481  001CF4                     l5638:
 14482  001CF4  5061               	movf	_arrayTail,w,c	;volatile
 14483  001CF6  5C17               	subwf	RTOS_SetTask@i,w,c
 14484  001CF8  E3E5               	bnc	l5626
 14485                           
 14486                           ;dispatcher.c: 39: }
 14487                           ;dispatcher.c: 40: }
 14488                           ;dispatcher.c: 42: if (arrayTail < 15)
 14489  001CFA  0E0F               	movlw	15
 14490  001CFC  6061               	cpfslt	_arrayTail,c	;volatile
 14491  001CFE  0C0F               	retlw	15
 14492                           
 14493                           ;dispatcher.c: 43: {
 14494                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 14495  001D00  9EF2               	bcf	intcon,7,c	;volatile
 14496                           
 14497                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 14498  001D02  5061               	movf	_arrayTail,w,c	;volatile
 14499  001D04  EC5C  F00D         	call	PL26	;call to abstracted procedure
 14500  001D08  C00F  FFDE         	movff	RTOS_SetTask@taskFunc,postinc2	;volatile
 14501  001D0C  C010  FFDD         	movff	RTOS_SetTask@taskFunc+1,postdec2	;volatile
 14502                           
 14503                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 14504  001D10  5061               	movf	_arrayTail,w,c	;volatile
 14505  001D12  EC51  F00C         	call	PL22	;call to abstracted procedure
 14506  001D16  D80E               	call	PL144	;call to abstracted procedure
 14507                           
 14508                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 14509  001D18  5061               	movf	_arrayTail,w,c	;volatile
 14510  001D1A  EC6E  F00D         	call	PL32	;call to abstracted procedure
 14511  001D1E  D805               	call	PL122	;call to abstracted procedure
 14512                           
 14513                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 14514  001D20  5061               	movf	_arrayTail,w,c	;volatile
 14515  001D22  EC64  F00D         	call	PL28	;call to abstracted procedure
 14516                           
 14517                           ;dispatcher.c: 51: arrayTail++;
 14518                           
 14519                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 14520  001D26  EF80  F00D         	goto	PL160	;call to abstracted procedure
 14521  001D2A                     __end_of_RTOS_SetTask:
 14522                           	opt stack 0
 14523  001D2A                     PL122:
 14524                           	opt stack 27
 14525  001D2A  C013  FFDE         	movff	RTOS_SetTask@taskPeriod,postinc2
 14526  001D2E  C014  FFDD         	movff	RTOS_SetTask@taskPeriod+1,postdec2
 14527  001D32  0012               	return	
 14528  001D34                     __end_ofPL122:
 14529                           	opt stack 0
 14530  001D34                     PL144:
 14531                           	opt stack 27
 14532  001D34  C011  FFDE         	movff	RTOS_SetTask@taskDelay,postinc2
 14533  001D38  C012  FFDD         	movff	RTOS_SetTask@taskDelay+1,postdec2
 14534  001D3C  0012               	return	
 14535  001D3E                     __end_ofPL144:
 14536                           	opt stack 0
 14537                           tosu	equ	0xFFF
 14538                           tosh	equ	0xFFE
 14539                           tosl	equ	0xFFD
 14540                           pclath	equ	0xFFA
 14541                           tblptru	equ	0xFF8
 14542                           tblptrh	equ	0xFF7
 14543                           tblptrl	equ	0xFF6
 14544                           tablat	equ	0xFF5
 14545                           prodh	equ	0xFF4
 14546                           prodl	equ	0xFF3
 14547                           intcon	equ	0xFF2
 14548                           intcon2	equ	0xFF1
 14549                           postinc0	equ	0xFEE
 14550                           wreg	equ	0xFE8
 14551                           indf1	equ	0xFE7
 14552                           plusw1	equ	0xFE3
 14553                           fsr1h	equ	0xFE2
 14554                           fsr1l	equ	0xFE1
 14555                           indf2	equ	0xFDF
 14556                           postinc2	equ	0xFDE
 14557                           postdec2	equ	0xFDD
 14558                           plusw2	equ	0xFDB
 14559                           fsr2h	equ	0xFDA
 14560                           fsr2l	equ	0xFD9
 14561                           status	equ	0xFD8
 14562                           
 14563 ;; *************** function _RTOS_DeleteTask *****************
 14564 ;; Defined at:
 14565 ;;		line 59 in file "dispatcher.c"
 14566 ;; Parameters:    Size  Location     Type
 14567 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 14568 ;;		 -> pressure(1), home_temp(1), set_font_set(1), time_set_dy(1), 
 14569 ;;		 -> time_set_dt(1), time_set_mt(1), time_set_yr(1), default_state(1), 
 14570 ;;		 -> time_set_hr(1), time_set_min(1), GetTime(1), key_press(1), 
 14571 ;;		 -> time_led(1), 
 14572 ;; Auto vars:     Size  Location     Type
 14573 ;;  i               1   22[COMRAM] unsigned char 
 14574 ;; Return value:  Size  Location     Type
 14575 ;;                  1    wreg      void 
 14576 ;; Registers used:
 14577 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14578 ;; Tracked objects:
 14579 ;;		On entry : 0/0
 14580 ;;		On exit  : 0/0
 14581 ;;		Unchanged: 0/0
 14582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14583 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14585 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14586 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14587 ;;Total ram usage:        9 bytes
 14588 ;; Hardware stack levels used:    1
 14589 ;; Hardware stack levels required when called:    3
 14590 ;; This function calls:
 14591 ;;		Nothing
 14592 ;; This function is called by:
 14593 ;;		_RTOS_DispatchTask
 14594 ;;		_time_set_min
 14595 ;;		_time_set_hr
 14596 ;;		_time_set_yr
 14597 ;;		_time_set_mt
 14598 ;;		_time_set_dt
 14599 ;;		_time_set_dy
 14600 ;;		_set_font_set
 14601 ;;		_home_temp
 14602 ;;		_pressure
 14603 ;;		_time_led
 14604 ;; This function uses a non-reentrant model
 14605 ;;
 14606                           
 14607                           	psect	text73
 14608  001C2E                     __ptext73:
 14609                           	opt stack 0
 14610  001C2E                     _RTOS_DeleteTask:
 14611                           	opt stack 25
 14612                           
 14613                           ;dispatcher.c: 61: uint8_t i;
 14614                           ;dispatcher.c: 63: for (i=0; i<arrayTail; i++)
 14615                           
 14616                           ;incstack = 0
 14617  001C2E  6A17               	clrf	RTOS_DeleteTask@i,c
 14618  001C30  D03F               	goto	l5684
 14619  001C32                     l5668:
 14620                           
 14621                           ;dispatcher.c: 64: {
 14622                           ;dispatcher.c: 65: if(TaskArray[i].pFunc == taskFunc)
 14623  001C32  5017               	movf	RTOS_DeleteTask@i,w,c
 14624  001C34  EC5C  F00D         	call	PL26	;call to abstracted procedure
 14625  001C38  500F               	movf	RTOS_DeleteTask@taskFunc,w,c	;volatile
 14626  001C3A  18DE               	xorwf	postinc2,w,c
 14627  001C3C  E138               	bnz	l5682
 14628  001C3E  5010               	movf	RTOS_DeleteTask@taskFunc+1,w,c	;volatile
 14629  001C40  18DE               	xorwf	postinc2,w,c
 14630  001C42  E135               	bnz	l5682
 14631                           
 14632                           ;dispatcher.c: 66: {
 14633                           ;dispatcher.c: 68: (INTCONbits.GIE = 0);
 14634  001C44  9EF2               	bcf	intcon,7,c	;volatile
 14635                           
 14636                           ;dispatcher.c: 69: if(i != (arrayTail - 1))
 14637  001C46  5017               	movf	RTOS_DeleteTask@i,w,c
 14638  001C48  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 14639  001C4A  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 14640  001C4C  6813               	setf	(??_RTOS_DeleteTask+2)& (0+255),c
 14641  001C4E  6814               	setf	(??_RTOS_DeleteTask+3)& (0+255),c
 14642  001C50  5061               	movf	_arrayTail,w,c	;volatile
 14643  001C52  6E15               	movwf	(??_RTOS_DeleteTask+4)& (0+255),c
 14644  001C54  6A16               	clrf	(??_RTOS_DeleteTask+5)& (0+255),c
 14645  001C56  5013               	movf	??_RTOS_DeleteTask+2,w,c
 14646  001C58  2615               	addwf	??_RTOS_DeleteTask+4,f,c
 14647  001C5A  5014               	movf	??_RTOS_DeleteTask+3,w,c
 14648  001C5C  2216               	addwfc	??_RTOS_DeleteTask+5,f,c
 14649  001C5E  5011               	movf	??_RTOS_DeleteTask,w,c
 14650  001C60  1815               	xorwf	??_RTOS_DeleteTask+4,w,c
 14651  001C62  E103               	bnz	u4020
 14652  001C64  5012               	movf	??_RTOS_DeleteTask+1,w,c
 14653  001C66  1816               	xorwf	??_RTOS_DeleteTask+5,w,c
 14654  001C68  E01F               	bz	l5676
 14655  001C6A                     u4020:
 14656                           
 14657                           ;dispatcher.c: 70: {
 14658                           ;dispatcher.c: 71: TaskArray[i] = TaskArray[arrayTail - 1];
 14659  001C6A  5061               	movf	_arrayTail,w,c	;volatile
 14660  001C6C  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 14661  001C6E  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 14662  001C70  90D8               	bcf	status,0,c
 14663  001C72  3611               	rlcf	??_RTOS_DeleteTask,f,c
 14664  001C74  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 14665  001C76  90D8               	bcf	status,0,c
 14666  001C78  3611               	rlcf	??_RTOS_DeleteTask,f,c
 14667  001C7A  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 14668  001C7C  90D8               	bcf	status,0,c
 14669  001C7E  3611               	rlcf	??_RTOS_DeleteTask,f,c
 14670  001C80  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 14671  001C82  0EF8               	movlw	low (_TaskArray+65528)
 14672  001C84  2411               	addwf	??_RTOS_DeleteTask,w,c
 14673  001C86  6ED9               	movwf	fsr2l,c
 14674  001C88  0E00               	movlw	high (_TaskArray+65528)
 14675  001C8A  2012               	addwfc	??_RTOS_DeleteTask+1,w,c
 14676  001C8C  6EDA               	movwf	fsr2h,c
 14677  001C8E  5017               	movf	RTOS_DeleteTask@i,w,c
 14678  001C90  0D08               	mullw	8
 14679  001C92  0E00               	movlw	low _TaskArray
 14680  001C94  24F3               	addwf	prodl,w,c
 14681  001C96  6EE1               	movwf	fsr1l,c
 14682  001C98  0E01               	movlw	high _TaskArray
 14683  001C9A  20F4               	addwfc	prodh,w,c
 14684  001C9C  6EE2               	movwf	fsr1h,c
 14685  001C9E  0E07               	movlw	7
 14686  001CA0                     u4031:
 14687  001CA0  CFDB FFE3          	movff	plusw2,plusw1
 14688  001CA4  06E8               	decf	wreg,f,c
 14689  001CA6  E2FC               	bc	u4031
 14690  001CA8                     l5676:
 14691                           
 14692                           ;dispatcher.c: 72: }
 14693                           ;dispatcher.c: 73: arrayTail--;
 14694  001CA8  0661               	decf	_arrayTail,f,c	;volatile
 14695                           
 14696                           ;dispatcher.c: 74: (INTCONbits.GIE = 1);
 14697  001CAA  8EF2               	bsf	intcon,7,c	;volatile
 14698  001CAC  0012               	return	
 14699  001CAE                     l5682:
 14700  001CAE  2A17               	incf	RTOS_DeleteTask@i,f,c
 14701  001CB0                     l5684:
 14702  001CB0  5061               	movf	_arrayTail,w,c	;volatile
 14703  001CB2  5C17               	subwf	RTOS_DeleteTask@i,w,c
 14704  001CB4  E3BE               	bnc	l5668
 14705  001CB6  0012               	return		;funcret
 14706  001CB8                     __end_of_RTOS_DeleteTask:
 14707                           	opt stack 0
 14708                           tosu	equ	0xFFF
 14709                           tosh	equ	0xFFE
 14710                           tosl	equ	0xFFD
 14711                           pclath	equ	0xFFA
 14712                           tblptru	equ	0xFF8
 14713                           tblptrh	equ	0xFF7
 14714                           tblptrl	equ	0xFF6
 14715                           tablat	equ	0xFF5
 14716                           prodh	equ	0xFF4
 14717                           prodl	equ	0xFF3
 14718                           intcon	equ	0xFF2
 14719                           intcon2	equ	0xFF1
 14720                           postinc0	equ	0xFEE
 14721                           wreg	equ	0xFE8
 14722                           indf1	equ	0xFE7
 14723                           plusw1	equ	0xFE3
 14724                           fsr1h	equ	0xFE2
 14725                           fsr1l	equ	0xFE1
 14726                           indf2	equ	0xFDF
 14727                           postinc2	equ	0xFDE
 14728                           postdec2	equ	0xFDD
 14729                           plusw2	equ	0xFDB
 14730                           fsr2h	equ	0xFDA
 14731                           fsr2l	equ	0xFD9
 14732                           status	equ	0xFD8
 14733                           
 14734 ;; *************** function _getTime *****************
 14735 ;; Defined at:
 14736 ;;		line 49 in file "ds3231.c"
 14737 ;; Parameters:    Size  Location     Type
 14738 ;;  p3              1   19[COMRAM] PTR unsigned char 
 14739 ;;		 -> TTime(7), 
 14740 ;;  p2              1   20[COMRAM] PTR unsigned char 
 14741 ;;		 -> TTime(7), 
 14742 ;;  p1              1   21[COMRAM] PTR unsigned char 
 14743 ;;		 -> TTime(7), 
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;		None
 14746 ;; Return value:  Size  Location     Type
 14747 ;;                  1    wreg      void 
 14748 ;; Registers used:
 14749 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14750 ;; Tracked objects:
 14751 ;;		On entry : 0/0
 14752 ;;		On exit  : 0/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14755 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14758 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14759 ;;Total ram usage:        3 bytes
 14760 ;; Hardware stack levels used:    1
 14761 ;; Hardware stack levels required when called:    6
 14762 ;; This function calls:
 14763 ;;		_DS3231_Read
 14764 ;;		_bcd_to_decimal
 14765 ;; This function is called by:
 14766 ;;		_GetTime
 14767 ;;		_home_temp
 14768 ;;		_pressure
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772                           	psect	text74
 14773  00213E                     __ptext74:
 14774                           	opt stack 0
 14775  00213E                     _getTime:
 14776                           	opt stack 22
 14777                           
 14778                           ;ds3231.c: 51: *p1 = DS3231_Read(0x00);
 14779                           
 14780                           ;incstack = 0
 14781  00213E  5016               	movf	getTime@p1,w,c
 14782  002140  6ED9               	movwf	fsr2l,c
 14783  002142  6ADA               	clrf	fsr2h,c
 14784  002144  0E00               	movlw	0
 14785  002146  EC28  F013         	call	_DS3231_Read
 14786  00214A  6EDF               	movwf	indf2,c
 14787                           
 14788                           ;ds3231.c: 52: *p1 = bcd_to_decimal(*p1);
 14789  00214C  5016               	movf	getTime@p1,w,c
 14790  00214E  6ED9               	movwf	fsr2l,c
 14791  002150  6ADA               	clrf	fsr2h,c
 14792  002152  5016               	movf	getTime@p1,w,c
 14793  002154  EC0F  F00F         	call	PL96	;call to abstracted procedure
 14794  002158  ECB8  F014         	call	_bcd_to_decimal
 14795                           
 14796                           ;ds3231.c: 53: *p2 = DS3231_Read(0x01);
 14797  00215C  D816               	call	PL112	;call to abstracted procedure
 14798  00215E  0E01               	movlw	1
 14799  002160  EC28  F013         	call	_DS3231_Read
 14800                           
 14801                           ;ds3231.c: 54: *p2 = bcd_to_decimal(*p2);
 14802  002164  D812               	call	PL112	;call to abstracted procedure
 14803  002166  5015               	movf	getTime@p2,w,c
 14804  002168  EC0F  F00F         	call	PL96	;call to abstracted procedure
 14805  00216C  ECB8  F014         	call	_bcd_to_decimal
 14806                           
 14807                           ;ds3231.c: 55: *p3 = (0x3F & DS3231_Read(0x02));
 14808  002170  D811               	call	PL120	;call to abstracted procedure
 14809  002172  0E02               	movlw	2
 14810  002174  EC28  F013         	call	_DS3231_Read
 14811  002178  0B3F               	andlw	63
 14812                           
 14813                           ;ds3231.c: 56: *p3 = bcd_to_decimal(*p3);
 14814  00217A  D80C               	call	PL120	;call to abstracted procedure
 14815  00217C  5014               	movf	getTime@p3,w,c
 14816  00217E  EC0F  F00F         	call	PL96	;call to abstracted procedure
 14817  002182  ECB8  F014         	call	_bcd_to_decimal
 14818  002186  6EDF               	movwf	indf2,c
 14819  002188  0012               	return		;funcret
 14820  00218A                     __end_of_getTime:
 14821                           	opt stack 0
 14822  00218A                     PL112:
 14823                           	opt stack 22
 14824  00218A  6EDF               	movwf	indf2,c
 14825  00218C  5015               	movf	getTime@p2,w,c
 14826  00218E  6ED9               	movwf	fsr2l,c
 14827  002190  6ADA               	clrf	fsr2h,c
 14828  002192  0012               	return	
 14829  002194                     __end_ofPL112:
 14830                           	opt stack 0
 14831  002194                     PL120:
 14832                           	opt stack 22
 14833  002194  6EDF               	movwf	indf2,c
 14834  002196  5014               	movf	getTime@p3,w,c
 14835  002198  6ED9               	movwf	fsr2l,c
 14836  00219A  6ADA               	clrf	fsr2h,c
 14837  00219C  0012               	return	
 14838  00219E                     __end_ofPL120:
 14839                           	opt stack 0
 14840                           tosu	equ	0xFFF
 14841                           tosh	equ	0xFFE
 14842                           tosl	equ	0xFFD
 14843                           pclath	equ	0xFFA
 14844                           tblptru	equ	0xFF8
 14845                           tblptrh	equ	0xFF7
 14846                           tblptrl	equ	0xFF6
 14847                           tablat	equ	0xFF5
 14848                           prodh	equ	0xFF4
 14849                           prodl	equ	0xFF3
 14850                           intcon	equ	0xFF2
 14851                           intcon2	equ	0xFF1
 14852                           postinc0	equ	0xFEE
 14853                           wreg	equ	0xFE8
 14854                           indf1	equ	0xFE7
 14855                           plusw1	equ	0xFE3
 14856                           fsr1h	equ	0xFE2
 14857                           fsr1l	equ	0xFE1
 14858                           indf2	equ	0xFDF
 14859                           postinc2	equ	0xFDE
 14860                           postdec2	equ	0xFDD
 14861                           plusw2	equ	0xFDB
 14862                           fsr2h	equ	0xFDA
 14863                           fsr2l	equ	0xFD9
 14864                           status	equ	0xFD8
 14865                           
 14866 ;; *************** function _getDate *****************
 14867 ;; Defined at:
 14868 ;;		line 62 in file "ds3231.c"
 14869 ;; Parameters:    Size  Location     Type
 14870 ;;  p4              1   19[COMRAM] PTR unsigned char 
 14871 ;;		 -> TTime(7), 
 14872 ;;  p3              1   20[COMRAM] PTR unsigned char 
 14873 ;;		 -> TTime(7), 
 14874 ;;  p2              1   21[COMRAM] PTR unsigned char 
 14875 ;;		 -> TTime(7), 
 14876 ;;  p1              1   22[COMRAM] PTR unsigned char 
 14877 ;;		 -> TTime(7), 
 14878 ;; Auto vars:     Size  Location     Type
 14879 ;;		None
 14880 ;; Return value:  Size  Location     Type
 14881 ;;                  1    wreg      void 
 14882 ;; Registers used:
 14883 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14884 ;; Tracked objects:
 14885 ;;		On entry : 0/0
 14886 ;;		On exit  : 0/0
 14887 ;;		Unchanged: 0/0
 14888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14889 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14892 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14893 ;;Total ram usage:        4 bytes
 14894 ;; Hardware stack levels used:    1
 14895 ;; Hardware stack levels required when called:    6
 14896 ;; This function calls:
 14897 ;;		_DS3231_Read
 14898 ;;		_bcd_to_decimal
 14899 ;; This function is called by:
 14900 ;;		_GetTime
 14901 ;; This function uses a non-reentrant model
 14902 ;;
 14903                           
 14904                           	psect	text75
 14905  001DC2                     __ptext75:
 14906                           	opt stack 0
 14907  001DC2                     _getDate:
 14908                           	opt stack 22
 14909                           
 14910                           ;ds3231.c: 64: *p1 = DS3231_Read(0x06);
 14911                           
 14912                           ;incstack = 0
 14913  001DC2  5017               	movf	getDate@p1,w,c
 14914  001DC4  6ED9               	movwf	fsr2l,c
 14915  001DC6  6ADA               	clrf	fsr2h,c
 14916  001DC8  0E06               	movlw	6
 14917  001DCA  EC28  F013         	call	_DS3231_Read
 14918  001DCE  6EDF               	movwf	indf2,c
 14919                           
 14920                           ;ds3231.c: 65: *p1 = bcd_to_decimal(*p1);
 14921  001DD0  5017               	movf	getDate@p1,w,c
 14922  001DD2  6ED9               	movwf	fsr2l,c
 14923  001DD4  6ADA               	clrf	fsr2h,c
 14924  001DD6  5017               	movf	getDate@p1,w,c
 14925  001DD8  D822               	call	PL96	;call to abstracted procedure
 14926  001DDA  ECB8  F014         	call	_bcd_to_decimal
 14927                           
 14928                           ;ds3231.c: 66: *p2 = (0x1F & DS3231_Read(0x05));
 14929  001DDE  D82D               	call	PL138	;call to abstracted procedure
 14930  001DE0  0E05               	movlw	5
 14931  001DE2  EC28  F013         	call	_DS3231_Read
 14932  001DE6  0B1F               	andlw	31
 14933                           
 14934                           ;ds3231.c: 67: *p2 = bcd_to_decimal(*p2);
 14935  001DE8  D828               	call	PL138	;call to abstracted procedure
 14936  001DEA  5016               	movf	getDate@p2,w,c
 14937  001DEC  D818               	call	PL96	;call to abstracted procedure
 14938  001DEE  ECB8  F014         	call	_bcd_to_decimal
 14939                           
 14940                           ;ds3231.c: 68: *p3 = (0x3F & DS3231_Read(0x04));
 14941  001DF2  D819               	call	PL126	;call to abstracted procedure
 14942  001DF4  0E04               	movlw	4
 14943  001DF6  EC28  F013         	call	_DS3231_Read
 14944  001DFA  0B3F               	andlw	63
 14945                           
 14946                           ;ds3231.c: 69: *p3 = bcd_to_decimal(*p3);
 14947  001DFC  D814               	call	PL126	;call to abstracted procedure
 14948  001DFE  5015               	movf	getDate@p3,w,c
 14949  001E00  D80E               	call	PL96	;call to abstracted procedure
 14950  001E02  ECB8  F014         	call	_bcd_to_decimal
 14951                           
 14952                           ;ds3231.c: 70: *p4 = (0x07 & DS3231_Read(0x03));
 14953  001E06  D814               	call	PL128	;call to abstracted procedure
 14954  001E08  0E03               	movlw	3
 14955  001E0A  EC28  F013         	call	_DS3231_Read
 14956  001E0E  0B07               	andlw	7
 14957                           
 14958                           ;ds3231.c: 71: *p4 = bcd_to_decimal(*p4);
 14959  001E10  D80F               	call	PL128	;call to abstracted procedure
 14960  001E12  5014               	movf	getDate@p4,w,c
 14961  001E14  D804               	call	PL96	;call to abstracted procedure
 14962  001E16  ECB8  F014         	call	_bcd_to_decimal
 14963  001E1A  6EDF               	movwf	indf2,c
 14964  001E1C  0012               	return		;funcret
 14965  001E1E                     __end_of_getDate:
 14966                           	opt stack 0
 14967  001E1E                     PL96:
 14968                           	opt stack 22
 14969  001E1E  6EE1               	movwf	fsr1l,c
 14970  001E20  6AE2               	clrf	fsr1h,c
 14971  001E22  50E7               	movf	indf1,w,c
 14972  001E24  0012               	return	
 14973  001E26                     __end_ofPL96:
 14974                           	opt stack 0
 14975  001E26                     PL126:
 14976                           	opt stack 22
 14977  001E26  6EDF               	movwf	indf2,c
 14978  001E28  5015               	movf	getDate@p3,w,c
 14979  001E2A  6ED9               	movwf	fsr2l,c
 14980  001E2C  6ADA               	clrf	fsr2h,c
 14981  001E2E  0012               	return	
 14982  001E30                     __end_ofPL126:
 14983                           	opt stack 0
 14984  001E30                     PL128:
 14985                           	opt stack 22
 14986  001E30  6EDF               	movwf	indf2,c
 14987  001E32  5014               	movf	getDate@p4,w,c
 14988  001E34  6ED9               	movwf	fsr2l,c
 14989  001E36  6ADA               	clrf	fsr2h,c
 14990  001E38  0012               	return	
 14991  001E3A                     __end_ofPL128:
 14992                           	opt stack 0
 14993  001E3A                     PL138:
 14994                           	opt stack 22
 14995  001E3A  6EDF               	movwf	indf2,c
 14996  001E3C  5016               	movf	getDate@p2,w,c
 14997  001E3E  6ED9               	movwf	fsr2l,c
 14998  001E40  6ADA               	clrf	fsr2h,c
 14999  001E42  0012               	return	
 15000  001E44                     __end_ofPL138:
 15001                           	opt stack 0
 15002                           tosu	equ	0xFFF
 15003                           tosh	equ	0xFFE
 15004                           tosl	equ	0xFFD
 15005                           pclath	equ	0xFFA
 15006                           tblptru	equ	0xFF8
 15007                           tblptrh	equ	0xFF7
 15008                           tblptrl	equ	0xFF6
 15009                           tablat	equ	0xFF5
 15010                           prodh	equ	0xFF4
 15011                           prodl	equ	0xFF3
 15012                           intcon	equ	0xFF2
 15013                           intcon2	equ	0xFF1
 15014                           postinc0	equ	0xFEE
 15015                           wreg	equ	0xFE8
 15016                           indf1	equ	0xFE7
 15017                           plusw1	equ	0xFE3
 15018                           fsr1h	equ	0xFE2
 15019                           fsr1l	equ	0xFE1
 15020                           indf2	equ	0xFDF
 15021                           postinc2	equ	0xFDE
 15022                           postdec2	equ	0xFDD
 15023                           plusw2	equ	0xFDB
 15024                           fsr2h	equ	0xFDA
 15025                           fsr2l	equ	0xFD9
 15026                           status	equ	0xFD8
 15027                           
 15028 ;; *************** function _bcd_to_decimal *****************
 15029 ;; Defined at:
 15030 ;;		line 4 in file "ds3231.c"
 15031 ;; Parameters:    Size  Location     Type
 15032 ;;  d               1    wreg     unsigned char 
 15033 ;; Auto vars:     Size  Location     Type
 15034 ;;  d               1   15[COMRAM] unsigned char 
 15035 ;; Return value:  Size  Location     Type
 15036 ;;                  1    wreg      unsigned char 
 15037 ;; Registers used:
 15038 ;;		wreg, status,2, status,0, prodl, prodh
 15039 ;; Tracked objects:
 15040 ;;		On entry : 0/0
 15041 ;;		On exit  : 0/0
 15042 ;;		Unchanged: 0/0
 15043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15047 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15048 ;;Total ram usage:        2 bytes
 15049 ;; Hardware stack levels used:    1
 15050 ;; Hardware stack levels required when called:    3
 15051 ;; This function calls:
 15052 ;;		Nothing
 15053 ;; This function is called by:
 15054 ;;		_getTime
 15055 ;;		_getDate
 15056 ;; This function uses a non-reentrant model
 15057 ;;
 15058                           
 15059                           	psect	text76
 15060  002970                     __ptext76:
 15061                           	opt stack 0
 15062  002970                     _bcd_to_decimal:
 15063                           	opt stack 24
 15064                           
 15065                           ;incstack = 0
 15066                           ;bcd_to_decimal@d stored from wreg
 15067  002970  6E10               	movwf	bcd_to_decimal@d,c
 15068                           
 15069                           ;ds3231.c: 6: return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10));
 15070  002972  C010  F00F         	movff	bcd_to_decimal@d,??_bcd_to_decimal
 15071  002976  0E0F               	movlw	15
 15072  002978  160F               	andwf	??_bcd_to_decimal,f,c
 15073  00297A  3810               	swapf	bcd_to_decimal@d,w,c
 15074  00297C  0B0F               	andlw	15
 15075  00297E  0D0A               	mullw	10
 15076  002980  50F3               	movf	prodl,w,c
 15077  002982  240F               	addwf	??_bcd_to_decimal,w,c
 15078  002984  0012               	return		;funcret
 15079  002986                     __end_of_bcd_to_decimal:
 15080                           	opt stack 0
 15081                           tosu	equ	0xFFF
 15082                           tosh	equ	0xFFE
 15083                           tosl	equ	0xFFD
 15084                           pclath	equ	0xFFA
 15085                           tblptru	equ	0xFF8
 15086                           tblptrh	equ	0xFF7
 15087                           tblptrl	equ	0xFF6
 15088                           tablat	equ	0xFF5
 15089                           prodh	equ	0xFF4
 15090                           prodl	equ	0xFF3
 15091                           intcon	equ	0xFF2
 15092                           intcon2	equ	0xFF1
 15093                           postinc0	equ	0xFEE
 15094                           wreg	equ	0xFE8
 15095                           indf1	equ	0xFE7
 15096                           plusw1	equ	0xFE3
 15097                           fsr1h	equ	0xFE2
 15098                           fsr1l	equ	0xFE1
 15099                           indf2	equ	0xFDF
 15100                           postinc2	equ	0xFDE
 15101                           postdec2	equ	0xFDD
 15102                           plusw2	equ	0xFDB
 15103                           fsr2h	equ	0xFDA
 15104                           fsr2l	equ	0xFD9
 15105                           status	equ	0xFD8
 15106                           
 15107 ;; *************** function _DS3231_Read *****************
 15108 ;; Defined at:
 15109 ;;		line 16 in file "ds3231.c"
 15110 ;; Parameters:    Size  Location     Type
 15111 ;;  address         1    wreg     unsigned char 
 15112 ;; Auto vars:     Size  Location     Type
 15113 ;;  address         1   17[COMRAM] unsigned char 
 15114 ;;  value           1   18[COMRAM] unsigned char 
 15115 ;; Return value:  Size  Location     Type
 15116 ;;                  1    wreg      unsigned char 
 15117 ;; Registers used:
 15118 ;;		wreg, status,2, status,0, cstack
 15119 ;; Tracked objects:
 15120 ;;		On entry : 0/0
 15121 ;;		On exit  : 0/0
 15122 ;;		Unchanged: 0/0
 15123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15125 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15127 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15128 ;;Total ram usage:        2 bytes
 15129 ;; Hardware stack levels used:    1
 15130 ;; Hardware stack levels required when called:    5
 15131 ;; This function calls:
 15132 ;;		_I2C_Master_Read
 15133 ;;		_I2C_Master_RepeatedStart
 15134 ;;		_I2C_Master_Start
 15135 ;;		_I2C_Master_Stop
 15136 ;;		_I2C_Master_Write
 15137 ;; This function is called by:
 15138 ;;		_getTime
 15139 ;;		_getDate
 15140 ;; This function uses a non-reentrant model
 15141 ;;
 15142                           
 15143                           	psect	text77
 15144  002650                     __ptext77:
 15145                           	opt stack 0
 15146  002650                     _DS3231_Read:
 15147                           	opt stack 22
 15148                           
 15149                           ;incstack = 0
 15150                           ;DS3231_Read@address stored from wreg
 15151  002650  6E12               	movwf	DS3231_Read@address,c
 15152                           
 15153                           ;ds3231.c: 19: I2C_Master_Start();
 15154  002652  EC1C  F015         	call	_I2C_Master_Start	;wreg free
 15155                           
 15156                           ;ds3231.c: 20: I2C_Master_Write(0xD0);
 15157  002656  0ED0               	movlw	208
 15158  002658  EC12  F015         	call	_I2C_Master_Write
 15159                           
 15160                           ;ds3231.c: 21: I2C_Master_Write(address);
 15161  00265C  5012               	movf	DS3231_Read@address,w,c
 15162  00265E  EC12  F015         	call	_I2C_Master_Write
 15163                           
 15164                           ;ds3231.c: 22: I2C_Master_RepeatedStart();
 15165  002662  EC20  F015         	call	_I2C_Master_RepeatedStart	;wreg free
 15166                           
 15167                           ;ds3231.c: 23: I2C_Master_Write(0xD1);
 15168  002666  0ED1               	movlw	209
 15169  002668  EC12  F015         	call	_I2C_Master_Write
 15170                           
 15171                           ;ds3231.c: 24: value = I2C_Master_Read(0);
 15172  00266C  0E00               	movlw	0
 15173  00266E  EC11  F014         	call	_I2C_Master_Read
 15174  002672  6E13               	movwf	DS3231_Read@value,c
 15175                           
 15176                           ;ds3231.c: 25: I2C_Master_Stop();
 15177  002674  EC18  F015         	call	_I2C_Master_Stop	;wreg free
 15178                           
 15179                           ;ds3231.c: 26: return value;
 15180  002678  5013               	movf	DS3231_Read@value,w,c
 15181  00267A  0012               	return		;funcret
 15182  00267C                     __end_of_DS3231_Read:
 15183                           	opt stack 0
 15184                           tosu	equ	0xFFF
 15185                           tosh	equ	0xFFE
 15186                           tosl	equ	0xFFD
 15187                           pclath	equ	0xFFA
 15188                           tblptru	equ	0xFF8
 15189                           tblptrh	equ	0xFF7
 15190                           tblptrl	equ	0xFF6
 15191                           tablat	equ	0xFF5
 15192                           prodh	equ	0xFF4
 15193                           prodl	equ	0xFF3
 15194                           intcon	equ	0xFF2
 15195                           intcon2	equ	0xFF1
 15196                           postinc0	equ	0xFEE
 15197                           wreg	equ	0xFE8
 15198                           indf1	equ	0xFE7
 15199                           plusw1	equ	0xFE3
 15200                           fsr1h	equ	0xFE2
 15201                           fsr1l	equ	0xFE1
 15202                           indf2	equ	0xFDF
 15203                           postinc2	equ	0xFDE
 15204                           postdec2	equ	0xFDD
 15205                           plusw2	equ	0xFDB
 15206                           fsr2h	equ	0xFDA
 15207                           fsr2l	equ	0xFD9
 15208                           status	equ	0xFD8
 15209                           
 15210 ;; *************** function _I2C_Master_Write *****************
 15211 ;; Defined at:
 15212 ;;		line 51 in file "i2c.c"
 15213 ;; Parameters:    Size  Location     Type
 15214 ;;  d               1    wreg     unsigned char 
 15215 ;; Auto vars:     Size  Location     Type
 15216 ;;  d               1   15[COMRAM] unsigned char 
 15217 ;; Return value:  Size  Location     Type
 15218 ;;                  1    wreg      void 
 15219 ;; Registers used:
 15220 ;;		wreg, status,2, status,0, cstack
 15221 ;; Tracked objects:
 15222 ;;		On entry : 0/0
 15223 ;;		On exit  : 0/0
 15224 ;;		Unchanged: 0/0
 15225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15229 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15230 ;;Total ram usage:        1 bytes
 15231 ;; Hardware stack levels used:    1
 15232 ;; Hardware stack levels required when called:    4
 15233 ;; This function calls:
 15234 ;;		_I2C_Master_Wait
 15235 ;; This function is called by:
 15236 ;;		_DS3231_Read
 15237 ;;		_DS3231_Write
 15238 ;;		_bmp280ReadInt16
 15239 ;;		_bmp280ReadInt32
 15240 ;;		_bmp280WriteByte
 15241 ;; This function uses a non-reentrant model
 15242 ;;
 15243                           
 15244                           	psect	text78
 15245  002A24                     __ptext78:
 15246                           	opt stack 0
 15247  002A24                     _I2C_Master_Write:
 15248                           	opt stack 23
 15249                           
 15250                           ;incstack = 0
 15251                           ;I2C_Master_Write@d stored from wreg
 15252  002A24  6E10               	movwf	I2C_Master_Write@d,c
 15253                           
 15254                           ;i2c.c: 53: I2C_Master_Wait();
 15255  002A26  EC02  F015         	call	_I2C_Master_Wait	;wreg free
 15256                           
 15257                           ;i2c.c: 54: SSPBUF = d;
 15258  002A2A  C010  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 15259  002A2E  0012               	return		;funcret
 15260  002A30                     __end_of_I2C_Master_Write:
 15261                           	opt stack 0
 15262                           tosu	equ	0xFFF
 15263                           tosh	equ	0xFFE
 15264                           tosl	equ	0xFFD
 15265                           pclath	equ	0xFFA
 15266                           tblptru	equ	0xFF8
 15267                           tblptrh	equ	0xFF7
 15268                           tblptrl	equ	0xFF6
 15269                           tablat	equ	0xFF5
 15270                           prodh	equ	0xFF4
 15271                           prodl	equ	0xFF3
 15272                           intcon	equ	0xFF2
 15273                           intcon2	equ	0xFF1
 15274                           postinc0	equ	0xFEE
 15275                           wreg	equ	0xFE8
 15276                           indf1	equ	0xFE7
 15277                           plusw1	equ	0xFE3
 15278                           fsr1h	equ	0xFE2
 15279                           fsr1l	equ	0xFE1
 15280                           indf2	equ	0xFDF
 15281                           postinc2	equ	0xFDE
 15282                           postdec2	equ	0xFDD
 15283                           plusw2	equ	0xFDB
 15284                           fsr2h	equ	0xFDA
 15285                           fsr2l	equ	0xFD9
 15286                           status	equ	0xFD8
 15287                           
 15288 ;; *************** function _I2C_Master_Stop *****************
 15289 ;; Defined at:
 15290 ;;		line 44 in file "i2c.c"
 15291 ;; Parameters:    Size  Location     Type
 15292 ;;		None
 15293 ;; Auto vars:     Size  Location     Type
 15294 ;;		None
 15295 ;; Return value:  Size  Location     Type
 15296 ;;                  1    wreg      void 
 15297 ;; Registers used:
 15298 ;;		wreg, status,2, status,0, cstack
 15299 ;; Tracked objects:
 15300 ;;		On entry : 0/0
 15301 ;;		On exit  : 0/0
 15302 ;;		Unchanged: 0/0
 15303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15308 ;;Total ram usage:        0 bytes
 15309 ;; Hardware stack levels used:    1
 15310 ;; Hardware stack levels required when called:    4
 15311 ;; This function calls:
 15312 ;;		_I2C_Master_Wait
 15313 ;; This function is called by:
 15314 ;;		_DS3231_Read
 15315 ;;		_DS3231_Write
 15316 ;;		_bmp280ReadInt16
 15317 ;;		_bmp280ReadInt32
 15318 ;;		_bmp280WriteByte
 15319 ;; This function uses a non-reentrant model
 15320 ;;
 15321                           
 15322                           	psect	text79
 15323  002A30                     __ptext79:
 15324                           	opt stack 0
 15325  002A30                     _I2C_Master_Stop:
 15326                           	opt stack 23
 15327                           
 15328                           ;i2c.c: 46: I2C_Master_Wait();
 15329                           
 15330                           ;incstack = 0
 15331  002A30  EC02  F015         	call	_I2C_Master_Wait	;wreg free
 15332                           
 15333                           ;i2c.c: 47: PEN = 1;
 15334  002A34  84C5               	bsf	4037,2,c	;volatile
 15335  002A36  0012               	return		;funcret
 15336  002A38                     __end_of_I2C_Master_Stop:
 15337                           	opt stack 0
 15338                           tosu	equ	0xFFF
 15339                           tosh	equ	0xFFE
 15340                           tosl	equ	0xFFD
 15341                           pclath	equ	0xFFA
 15342                           tblptru	equ	0xFF8
 15343                           tblptrh	equ	0xFF7
 15344                           tblptrl	equ	0xFF6
 15345                           tablat	equ	0xFF5
 15346                           prodh	equ	0xFF4
 15347                           prodl	equ	0xFF3
 15348                           intcon	equ	0xFF2
 15349                           intcon2	equ	0xFF1
 15350                           postinc0	equ	0xFEE
 15351                           wreg	equ	0xFE8
 15352                           indf1	equ	0xFE7
 15353                           plusw1	equ	0xFE3
 15354                           fsr1h	equ	0xFE2
 15355                           fsr1l	equ	0xFE1
 15356                           indf2	equ	0xFDF
 15357                           postinc2	equ	0xFDE
 15358                           postdec2	equ	0xFDD
 15359                           plusw2	equ	0xFDB
 15360                           fsr2h	equ	0xFDA
 15361                           fsr2l	equ	0xFD9
 15362                           status	equ	0xFD8
 15363                           
 15364 ;; *************** function _I2C_Master_Start *****************
 15365 ;; Defined at:
 15366 ;;		line 30 in file "i2c.c"
 15367 ;; Parameters:    Size  Location     Type
 15368 ;;		None
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;		None
 15371 ;; Return value:  Size  Location     Type
 15372 ;;                  1    wreg      void 
 15373 ;; Registers used:
 15374 ;;		wreg, status,2, status,0, cstack
 15375 ;; Tracked objects:
 15376 ;;		On entry : 0/0
 15377 ;;		On exit  : 0/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15384 ;;Total ram usage:        0 bytes
 15385 ;; Hardware stack levels used:    1
 15386 ;; Hardware stack levels required when called:    4
 15387 ;; This function calls:
 15388 ;;		_I2C_Master_Wait
 15389 ;; This function is called by:
 15390 ;;		_DS3231_Read
 15391 ;;		_DS3231_Write
 15392 ;;		_bmp280ReadInt16
 15393 ;;		_bmp280ReadInt32
 15394 ;;		_bmp280WriteByte
 15395 ;; This function uses a non-reentrant model
 15396 ;;
 15397                           
 15398                           	psect	text80
 15399  002A38                     __ptext80:
 15400                           	opt stack 0
 15401  002A38                     _I2C_Master_Start:
 15402                           	opt stack 23
 15403                           
 15404                           ;i2c.c: 32: I2C_Master_Wait();
 15405                           
 15406                           ;incstack = 0
 15407  002A38  EC02  F015         	call	_I2C_Master_Wait	;wreg free
 15408                           
 15409                           ;i2c.c: 33: SEN = 1;
 15410  002A3C  80C5               	bsf	4037,0,c	;volatile
 15411  002A3E  0012               	return		;funcret
 15412  002A40                     __end_of_I2C_Master_Start:
 15413                           	opt stack 0
 15414                           tosu	equ	0xFFF
 15415                           tosh	equ	0xFFE
 15416                           tosl	equ	0xFFD
 15417                           pclath	equ	0xFFA
 15418                           tblptru	equ	0xFF8
 15419                           tblptrh	equ	0xFF7
 15420                           tblptrl	equ	0xFF6
 15421                           tablat	equ	0xFF5
 15422                           prodh	equ	0xFF4
 15423                           prodl	equ	0xFF3
 15424                           intcon	equ	0xFF2
 15425                           intcon2	equ	0xFF1
 15426                           postinc0	equ	0xFEE
 15427                           wreg	equ	0xFE8
 15428                           indf1	equ	0xFE7
 15429                           plusw1	equ	0xFE3
 15430                           fsr1h	equ	0xFE2
 15431                           fsr1l	equ	0xFE1
 15432                           indf2	equ	0xFDF
 15433                           postinc2	equ	0xFDE
 15434                           postdec2	equ	0xFDD
 15435                           plusw2	equ	0xFDB
 15436                           fsr2h	equ	0xFDA
 15437                           fsr2l	equ	0xFD9
 15438                           status	equ	0xFD8
 15439                           
 15440 ;; *************** function _I2C_Master_RepeatedStart *****************
 15441 ;; Defined at:
 15442 ;;		line 37 in file "i2c.c"
 15443 ;; Parameters:    Size  Location     Type
 15444 ;;		None
 15445 ;; Auto vars:     Size  Location     Type
 15446 ;;		None
 15447 ;; Return value:  Size  Location     Type
 15448 ;;                  1    wreg      void 
 15449 ;; Registers used:
 15450 ;;		wreg, status,2, status,0, cstack
 15451 ;; Tracked objects:
 15452 ;;		On entry : 0/0
 15453 ;;		On exit  : 0/0
 15454 ;;		Unchanged: 0/0
 15455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15460 ;;Total ram usage:        0 bytes
 15461 ;; Hardware stack levels used:    1
 15462 ;; Hardware stack levels required when called:    4
 15463 ;; This function calls:
 15464 ;;		_I2C_Master_Wait
 15465 ;; This function is called by:
 15466 ;;		_DS3231_Read
 15467 ;;		_bmp280ReadInt16
 15468 ;;		_bmp280ReadInt32
 15469 ;; This function uses a non-reentrant model
 15470 ;;
 15471                           
 15472                           	psect	text81
 15473  002A40                     __ptext81:
 15474                           	opt stack 0
 15475  002A40                     _I2C_Master_RepeatedStart:
 15476                           	opt stack 23
 15477                           
 15478                           ;i2c.c: 39: I2C_Master_Wait();
 15479                           
 15480                           ;incstack = 0
 15481  002A40  EC02  F015         	call	_I2C_Master_Wait	;wreg free
 15482                           
 15483                           ;i2c.c: 40: RSEN = 1;
 15484  002A44  82C5               	bsf	4037,1,c	;volatile
 15485  002A46  0012               	return		;funcret
 15486  002A48                     __end_of_I2C_Master_RepeatedStart:
 15487                           	opt stack 0
 15488                           tosu	equ	0xFFF
 15489                           tosh	equ	0xFFE
 15490                           tosl	equ	0xFFD
 15491                           pclath	equ	0xFFA
 15492                           tblptru	equ	0xFF8
 15493                           tblptrh	equ	0xFF7
 15494                           tblptrl	equ	0xFF6
 15495                           tablat	equ	0xFF5
 15496                           prodh	equ	0xFF4
 15497                           prodl	equ	0xFF3
 15498                           intcon	equ	0xFF2
 15499                           intcon2	equ	0xFF1
 15500                           postinc0	equ	0xFEE
 15501                           wreg	equ	0xFE8
 15502                           indf1	equ	0xFE7
 15503                           plusw1	equ	0xFE3
 15504                           fsr1h	equ	0xFE2
 15505                           fsr1l	equ	0xFE1
 15506                           indf2	equ	0xFDF
 15507                           postinc2	equ	0xFDE
 15508                           postdec2	equ	0xFDD
 15509                           plusw2	equ	0xFDB
 15510                           fsr2h	equ	0xFDA
 15511                           fsr2l	equ	0xFD9
 15512                           status	equ	0xFD8
 15513                           
 15514 ;; *************** function _I2C_Master_Read *****************
 15515 ;; Defined at:
 15516 ;;		line 58 in file "i2c.c"
 15517 ;; Parameters:    Size  Location     Type
 15518 ;;  a               1    wreg     unsigned char 
 15519 ;; Auto vars:     Size  Location     Type
 15520 ;;  a               1   15[COMRAM] unsigned char 
 15521 ;;  temp            1   16[COMRAM] unsigned char 
 15522 ;; Return value:  Size  Location     Type
 15523 ;;                  1    wreg      unsigned char 
 15524 ;; Registers used:
 15525 ;;		wreg, status,2, status,0, cstack
 15526 ;; Tracked objects:
 15527 ;;		On entry : 0/0
 15528 ;;		On exit  : 0/0
 15529 ;;		Unchanged: 0/0
 15530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15535 ;;Total ram usage:        2 bytes
 15536 ;; Hardware stack levels used:    1
 15537 ;; Hardware stack levels required when called:    4
 15538 ;; This function calls:
 15539 ;;		_I2C_Master_Wait
 15540 ;; This function is called by:
 15541 ;;		_DS3231_Read
 15542 ;;		_bmp280ReadInt16
 15543 ;;		_bmp280ReadInt32
 15544 ;; This function uses a non-reentrant model
 15545 ;;
 15546                           
 15547                           	psect	text82
 15548  002822                     __ptext82:
 15549                           	opt stack 0
 15550  002822                     _I2C_Master_Read:
 15551                           	opt stack 23
 15552                           
 15553                           ;incstack = 0
 15554                           ;I2C_Master_Read@a stored from wreg
 15555  002822  6E10               	movwf	I2C_Master_Read@a,c
 15556                           
 15557                           ;i2c.c: 60: uint8_t temp;
 15558                           ;i2c.c: 61: I2C_Master_Wait();
 15559  002824  EC02  F015         	call	_I2C_Master_Wait	;wreg free
 15560                           
 15561                           ;i2c.c: 62: RCEN = 1;
 15562  002828  86C5               	bsf	4037,3,c	;volatile
 15563                           
 15564                           ;i2c.c: 63: I2C_Master_Wait();
 15565  00282A  EC02  F015         	call	_I2C_Master_Wait	;wreg free
 15566                           
 15567                           ;i2c.c: 64: temp = SSPBUF;
 15568  00282E  CFC9 F011          	movff	4041,I2C_Master_Read@temp	;volatile
 15569                           
 15570                           ;i2c.c: 65: I2C_Master_Wait();
 15571  002832  EC02  F015         	call	_I2C_Master_Wait	;wreg free
 15572                           
 15573                           ;i2c.c: 66: ACKDT = (a)?0:1;
 15574  002836  5010               	movf	I2C_Master_Read@a,w,c
 15575  002838  E102               	bnz	u3610
 15576  00283A  8AC5               	bsf	4037,5,c	;volatile
 15577  00283C  D001               	goto	l5302
 15578  00283E                     u3610:
 15579  00283E  9AC5               	bcf	4037,5,c	;volatile
 15580  002840                     l5302:
 15581                           
 15582                           ;i2c.c: 67: ACKEN = 1;
 15583  002840  88C5               	bsf	4037,4,c	;volatile
 15584                           
 15585                           ;i2c.c: 68: return temp;
 15586  002842  5011               	movf	I2C_Master_Read@temp,w,c
 15587  002844  0012               	return		;funcret
 15588  002846                     __end_of_I2C_Master_Read:
 15589                           	opt stack 0
 15590                           tosu	equ	0xFFF
 15591                           tosh	equ	0xFFE
 15592                           tosl	equ	0xFFD
 15593                           pclath	equ	0xFFA
 15594                           tblptru	equ	0xFF8
 15595                           tblptrh	equ	0xFF7
 15596                           tblptrl	equ	0xFF6
 15597                           tablat	equ	0xFF5
 15598                           prodh	equ	0xFF4
 15599                           prodl	equ	0xFF3
 15600                           intcon	equ	0xFF2
 15601                           intcon2	equ	0xFF1
 15602                           postinc0	equ	0xFEE
 15603                           wreg	equ	0xFE8
 15604                           indf1	equ	0xFE7
 15605                           plusw1	equ	0xFE3
 15606                           fsr1h	equ	0xFE2
 15607                           fsr1l	equ	0xFE1
 15608                           indf2	equ	0xFDF
 15609                           postinc2	equ	0xFDE
 15610                           postdec2	equ	0xFDD
 15611                           plusw2	equ	0xFDB
 15612                           fsr2h	equ	0xFDA
 15613                           fsr2l	equ	0xFD9
 15614                           status	equ	0xFD8
 15615                           
 15616 ;; *************** function _I2C_Master_Wait *****************
 15617 ;; Defined at:
 15618 ;;		line 24 in file "i2c.c"
 15619 ;; Parameters:    Size  Location     Type
 15620 ;;		None
 15621 ;; Auto vars:     Size  Location     Type
 15622 ;;		None
 15623 ;; Return value:  Size  Location     Type
 15624 ;;                  1    wreg      void 
 15625 ;; Registers used:
 15626 ;;		wreg, status,2, status,0
 15627 ;; Tracked objects:
 15628 ;;		On entry : 0/0
 15629 ;;		On exit  : 0/0
 15630 ;;		Unchanged: 0/0
 15631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15634 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15636 ;;Total ram usage:        1 bytes
 15637 ;; Hardware stack levels used:    1
 15638 ;; Hardware stack levels required when called:    3
 15639 ;; This function calls:
 15640 ;;		Nothing
 15641 ;; This function is called by:
 15642 ;;		_I2C_Master_Start
 15643 ;;		_I2C_Master_RepeatedStart
 15644 ;;		_I2C_Master_Stop
 15645 ;;		_I2C_Master_Write
 15646 ;;		_I2C_Master_Read
 15647 ;; This function uses a non-reentrant model
 15648 ;;
 15649                           
 15650                           	psect	text83
 15651  002A04                     __ptext83:
 15652                           	opt stack 0
 15653  002A04                     _I2C_Master_Wait:
 15654                           	opt stack 23
 15655  002A04                     l182:
 15656  002A04  B4C7               	btfsc	4039,2,c	;volatile
 15657  002A06  D7FE               	goto	l182
 15658  002A08  CFC5 F00F          	movff	4037,??_I2C_Master_Wait	;volatile
 15659  002A0C  0E1F               	movlw	31
 15660  002A0E  160F               	andwf	??_I2C_Master_Wait,f,c
 15661  002A10  E1F9               	bnz	l182
 15662  002A12  0C1F               	retlw	31	;funcret
 15663  002A14                     __end_of_I2C_Master_Wait:
 15664                           	opt stack 0
 15665                           tosu	equ	0xFFF
 15666                           tosh	equ	0xFFE
 15667                           tosl	equ	0xFFD
 15668                           pclath	equ	0xFFA
 15669                           tblptru	equ	0xFF8
 15670                           tblptrh	equ	0xFF7
 15671                           tblptrl	equ	0xFF6
 15672                           tablat	equ	0xFF5
 15673                           prodh	equ	0xFF4
 15674                           prodl	equ	0xFF3
 15675                           intcon	equ	0xFF2
 15676                           intcon2	equ	0xFF1
 15677                           postinc0	equ	0xFEE
 15678                           wreg	equ	0xFE8
 15679                           indf1	equ	0xFE7
 15680                           plusw1	equ	0xFE3
 15681                           fsr1h	equ	0xFE2
 15682                           fsr1l	equ	0xFE1
 15683                           indf2	equ	0xFDF
 15684                           postinc2	equ	0xFDE
 15685                           postdec2	equ	0xFDD
 15686                           plusw2	equ	0xFDB
 15687                           fsr2h	equ	0xFDA
 15688                           fsr2l	equ	0xFD9
 15689                           status	equ	0xFD8
 15690                           
 15691 ;; *************** function _INTERRUPT_InterruptManager *****************
 15692 ;; Defined at:
 15693 ;;		line 4 in file "interrupt.c"
 15694 ;; Parameters:    Size  Location     Type
 15695 ;;		None
 15696 ;; Auto vars:     Size  Location     Type
 15697 ;;		None
 15698 ;; Return value:  Size  Location     Type
 15699 ;;                  1    wreg      void 
 15700 ;; Registers used:
 15701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15702 ;; Tracked objects:
 15703 ;;		On entry : 0/0
 15704 ;;		On exit  : 0/0
 15705 ;;		Unchanged: 0/0
 15706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15709 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15710 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15711 ;;Total ram usage:        5 bytes
 15712 ;; Hardware stack levels used:    1
 15713 ;; Hardware stack levels required when called:    2
 15714 ;; This function calls:
 15715 ;;		_INT0_ISR
 15716 ;;		_TMR0_ISR
 15717 ;;		_TMR1_ISR
 15718 ;;		_TMR3_ISR
 15719 ;; This function is called by:
 15720 ;;		Interrupt level 2
 15721 ;; This function uses a non-reentrant model
 15722 ;;
 15723                           
 15724                           	psect	intcode
 15725  000008                     __pintcode:
 15726                           	opt stack 0
 15727  000008                     _INTERRUPT_InterruptManager:
 15728                           	opt stack 21
 15729                           
 15730                           ;incstack = 0
 15731  000008  8267               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15732  00000A  ED9F  F00E         	call	int_func,f	;refresh shadow registers
 15733                           tosu	equ	0xFFF
 15734                           tosh	equ	0xFFE
 15735                           tosl	equ	0xFFD
 15736                           pclath	equ	0xFFA
 15737                           tblptru	equ	0xFF8
 15738                           tblptrh	equ	0xFF7
 15739                           tblptrl	equ	0xFF6
 15740                           tablat	equ	0xFF5
 15741                           prodh	equ	0xFF4
 15742                           prodl	equ	0xFF3
 15743                           intcon	equ	0xFF2
 15744                           intcon2	equ	0xFF1
 15745                           postinc0	equ	0xFEE
 15746                           wreg	equ	0xFE8
 15747                           indf1	equ	0xFE7
 15748                           plusw1	equ	0xFE3
 15749                           fsr1h	equ	0xFE2
 15750                           fsr1l	equ	0xFE1
 15751                           indf2	equ	0xFDF
 15752                           postinc2	equ	0xFDE
 15753                           postdec2	equ	0xFDD
 15754                           plusw2	equ	0xFDB
 15755                           fsr2h	equ	0xFDA
 15756                           fsr2l	equ	0xFD9
 15757                           status	equ	0xFD8
 15758                           
 15759                           	psect	intcode_body
 15760  001D3E                     __pintcode_body:
 15761                           	opt stack 21
 15762  001D3E                     int_func:
 15763                           	opt stack 21
 15764  001D3E  0006               	pop		; remove dummy address from shadow register refresh
 15765  001D40  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManager+1
 15766  001D44  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManager+2
 15767  001D48  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManager+3
 15768  001D4C  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManager+4
 15769                           
 15770                           ;interrupt.c: 7: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 15771  001D50  BAF2               	btfsc	intcon,5,c	;volatile
 15772  001D52  A4F2               	btfss	intcon,2,c	;volatile
 15773  001D54  D003               	goto	i2l326
 15774                           
 15775                           ;interrupt.c: 8: {
 15776                           ;interrupt.c: 9: TMR0_ISR();
 15777  001D56  EC0A  F015         	call	_TMR0_ISR	;wreg free
 15778                           
 15779                           ;interrupt.c: 10: }
 15780  001D5A  D029               	goto	i2l333
 15781  001D5C                     i2l326:
 15782                           
 15783                           ;interrupt.c: 11: else if (INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
 15784  001D5C  B8F2               	btfsc	intcon,4,c	;volatile
 15785  001D5E  A2F2               	btfss	intcon,1,c	;volatile
 15786  001D60  D011               	goto	i2l328
 15787                           
 15788                           ;interrupt.c: 12: {
 15789                           ;interrupt.c: 13: INTCONbits.INT0IF = 0;
 15790  001D62  92F2               	bcf	intcon,1,c	;volatile
 15791  001D64  0E01               	movlw	1
 15792                           
 15793                           ;interrupt.c: 14: INTCON2bits.INTEDG0 = ~INTCON2bits.INTEDG0;
 15794  001D66  ACF1               	btfss	intcon2,6,c	;volatile
 15795  001D68  0E00               	movlw	0
 15796  001D6A  0AFF               	xorlw	255
 15797  001D6C  6E0A               	movwf	??_INTERRUPT_InterruptManager& (0+255),c
 15798  001D6E  3A0A               	swapf	??_INTERRUPT_InterruptManager,f,c
 15799  001D70  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 15800  001D72  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 15801  001D74  50F1               	movf	intcon2,w,c	;volatile
 15802  001D76  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 15803  001D78  0BBF               	andlw	-65
 15804  001D7A  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 15805  001D7C  6EF1               	movwf	intcon2,c	;volatile
 15806                           
 15807                           ;interrupt.c: 16: INT0_ISR();
 15808  001D7E  ECCD  F014         	call	_INT0_ISR	;wreg free
 15809                           
 15810                           ;interrupt.c: 17: } else if (PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF ==1)
 15811  001D82  D015               	goto	i2l333
 15812  001D84                     i2l328:
 15813  001D84  B09D               	btfsc	3997,0,c	;volatile
 15814  001D86  A09E               	btfss	3998,0,c	;volatile
 15815  001D88  D008               	goto	i2l330
 15816                           
 15817                           ;interrupt.c: 18: {
 15818                           ;interrupt.c: 19: PIR1bits.TMR1IF = 0;
 15819  001D8A  909E               	bcf	3998,0,c	;volatile
 15820                           
 15821                           ;interrupt.c: 20: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
 15822  001D8C  0E3C               	movlw	60
 15823  001D8E  6ECF               	movwf	4047,c	;volatile
 15824                           
 15825                           ;interrupt.c: 21: TMR1L = ((unsigned char)((15536)&0xFF));
 15826  001D90  0EB0               	movlw	176
 15827  001D92  6ECE               	movwf	4046,c	;volatile
 15828                           
 15829                           ;interrupt.c: 22: TMR1_ISR();
 15830  001D94  ECC3  F014         	call	_TMR1_ISR	;wreg free
 15831                           
 15832                           ;interrupt.c: 24: } else if (PIE2bits.TMR3IE == 1 && PIR2bits.TMR3IF ==1)
 15833  001D98  D00A               	goto	i2l333
 15834  001D9A                     i2l330:
 15835  001D9A  B2A0               	btfsc	4000,1,c	;volatile
 15836  001D9C  A2A1               	btfss	4001,1,c	;volatile
 15837  001D9E  D007               	goto	i2l333
 15838                           
 15839                           ;interrupt.c: 25: {
 15840                           ;interrupt.c: 26: PIR2bits.TMR3IF = 0;
 15841  001DA0  92A1               	bcf	4001,1,c	;volatile
 15842                           
 15843                           ;interrupt.c: 27: TMR3H = ((unsigned char)(((60536)>>8)&0xFF));
 15844  001DA2  0EEC               	movlw	236
 15845  001DA4  6EB3               	movwf	4019,c	;volatile
 15846                           
 15847                           ;interrupt.c: 28: TMR3L = ((unsigned char)((60536)&0xFF));
 15848  001DA6  0E78               	movlw	120
 15849  001DA8  6EB2               	movwf	4018,c	;volatile
 15850                           
 15851                           ;interrupt.c: 30: TMR3_ISR();
 15852  001DAA  EC32  F014         	call	_TMR3_ISR	;wreg free
 15853  001DAE                     i2l333:
 15854  001DAE  C00E  FFF4         	movff	??_INTERRUPT_InterruptManager+4,prodh
 15855  001DB2  C00D  FFF3         	movff	??_INTERRUPT_InterruptManager+3,prodl
 15856  001DB6  C00C  FFDA         	movff	??_INTERRUPT_InterruptManager+2,fsr2h
 15857  001DBA  C00B  FFD9         	movff	??_INTERRUPT_InterruptManager+1,fsr2l
 15858  001DBE  9267               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15859  001DC0  0011               	retfie		f
 15860  001DC2                     __end_of_INTERRUPT_InterruptManager:
 15861                           	opt stack 0
 15862                           tosu	equ	0xFFF
 15863                           tosh	equ	0xFFE
 15864                           tosl	equ	0xFFD
 15865                           pclath	equ	0xFFA
 15866                           tblptru	equ	0xFF8
 15867                           tblptrh	equ	0xFF7
 15868                           tblptrl	equ	0xFF6
 15869                           tablat	equ	0xFF5
 15870                           prodh	equ	0xFF4
 15871                           prodl	equ	0xFF3
 15872                           intcon	equ	0xFF2
 15873                           intcon2	equ	0xFF1
 15874                           postinc0	equ	0xFEE
 15875                           wreg	equ	0xFE8
 15876                           indf1	equ	0xFE7
 15877                           plusw1	equ	0xFE3
 15878                           fsr1h	equ	0xFE2
 15879                           fsr1l	equ	0xFE1
 15880                           indf2	equ	0xFDF
 15881                           postinc2	equ	0xFDE
 15882                           postdec2	equ	0xFDD
 15883                           plusw2	equ	0xFDB
 15884                           fsr2h	equ	0xFDA
 15885                           fsr2l	equ	0xFD9
 15886                           status	equ	0xFD8
 15887                           
 15888 ;; *************** function _TMR3_ISR *****************
 15889 ;; Defined at:
 15890 ;;		line 15 in file "sound.c"
 15891 ;; Parameters:    Size  Location     Type
 15892 ;;		None
 15893 ;; Auto vars:     Size  Location     Type
 15894 ;;		None
 15895 ;; Return value:  Size  Location     Type
 15896 ;;                  1    wreg      void 
 15897 ;; Registers used:
 15898 ;;		wreg, status,2, status,0
 15899 ;; Tracked objects:
 15900 ;;		On entry : 0/0
 15901 ;;		On exit  : 3F/0
 15902 ;;		Unchanged: 0/0
 15903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15908 ;;Total ram usage:        0 bytes
 15909 ;; Hardware stack levels used:    1
 15910 ;; This function calls:
 15911 ;;		Nothing
 15912 ;; This function is called by:
 15913 ;;		_INTERRUPT_InterruptManager
 15914 ;; This function uses a non-reentrant model
 15915 ;;
 15916                           
 15917                           	psect	text85
 15918  002864                     __ptext85:
 15919                           	opt stack 0
 15920  002864                     _TMR3_ISR:
 15921                           	opt stack 22
 15922                           
 15923                           ;sound.c: 18: if (play_sound)
 15924                           
 15925                           ;incstack = 0
 15926  002864  0100               	movlb	0	; () banked
 15927  002866  51A1               	movf	_play_sound& (0+255),w,b
 15928  002868  B4D8               	btfsc	status,2,c
 15929  00286A  0012               	return	
 15930                           
 15931                           ; BSR set to: 0
 15932                           ;sound.c: 19: {
 15933                           ;sound.c: 20: count_sound++;
 15934  00286C  2B9F               	incf	_count_sound& (0+255),f,b
 15935                           
 15936                           ; BSR set to: 0
 15937                           ;sound.c: 22: if (count_sound < 20)
 15938  00286E  0E14               	movlw	20
 15939  002870  619F               	cpfslt	_count_sound& (0+255),b
 15940  002872  D003               	goto	i2l1122
 15941                           
 15942                           ; BSR set to: 0
 15943                           ;sound.c: 23: LATD ^= (1<<7);
 15944  002874  0E80               	movlw	128
 15945  002876  1A8C               	xorwf	3980,f,c	;volatile
 15946  002878  0C80               	retlw	128
 15947  00287A                     i2l1122:
 15948                           
 15949                           ; BSR set to: 0
 15950                           ;sound.c: 24: else
 15951                           ;sound.c: 25: {
 15952                           ;sound.c: 26: count_sound = 0;
 15953  00287A  6B9F               	clrf	_count_sound& (0+255),b
 15954                           
 15955                           ;sound.c: 27: play_sound = 0;
 15956  00287C  6BA1               	clrf	_play_sound& (0+255),b
 15957                           
 15958                           ; BSR set to: 0
 15959                           ;sound.c: 28: LATD &= ~(1<<7);
 15960  00287E  9E8C               	bcf	3980,7,c	;volatile
 15961                           
 15962                           ; BSR set to: 0
 15963  002880  0012               	return		;funcret
 15964  002882                     __end_of_TMR3_ISR:
 15965                           	opt stack 0
 15966                           tosu	equ	0xFFF
 15967                           tosh	equ	0xFFE
 15968                           tosl	equ	0xFFD
 15969                           pclath	equ	0xFFA
 15970                           tblptru	equ	0xFF8
 15971                           tblptrh	equ	0xFF7
 15972                           tblptrl	equ	0xFF6
 15973                           tablat	equ	0xFF5
 15974                           prodh	equ	0xFF4
 15975                           prodl	equ	0xFF3
 15976                           intcon	equ	0xFF2
 15977                           intcon2	equ	0xFF1
 15978                           postinc0	equ	0xFEE
 15979                           wreg	equ	0xFE8
 15980                           indf1	equ	0xFE7
 15981                           plusw1	equ	0xFE3
 15982                           fsr1h	equ	0xFE2
 15983                           fsr1l	equ	0xFE1
 15984                           indf2	equ	0xFDF
 15985                           postinc2	equ	0xFDE
 15986                           postdec2	equ	0xFDD
 15987                           plusw2	equ	0xFDB
 15988                           fsr2h	equ	0xFDA
 15989                           fsr2l	equ	0xFD9
 15990                           status	equ	0xFD8
 15991                           
 15992 ;; *************** function _TMR1_ISR *****************
 15993 ;; Defined at:
 15994 ;;		line 715 in file "common.c"
 15995 ;; Parameters:    Size  Location     Type
 15996 ;;		None
 15997 ;; Auto vars:     Size  Location     Type
 15998 ;;		None
 15999 ;; Return value:  Size  Location     Type
 16000 ;;                  1    wreg      void 
 16001 ;; Registers used:
 16002 ;;		wreg, status,2, status,0
 16003 ;; Tracked objects:
 16004 ;;		On entry : 0/0
 16005 ;;		On exit  : 3F/0
 16006 ;;		Unchanged: 0/0
 16007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16012 ;;Total ram usage:        0 bytes
 16013 ;; Hardware stack levels used:    1
 16014 ;; This function calls:
 16015 ;;		Nothing
 16016 ;; This function is called by:
 16017 ;;		_INTERRUPT_InterruptManager
 16018 ;; This function uses a non-reentrant model
 16019 ;;
 16020                           
 16021                           	psect	text86
 16022  002986                     __ptext86:
 16023                           	opt stack 0
 16024  002986                     _TMR1_ISR:
 16025                           	opt stack 22
 16026                           
 16027                           ;common.c: 719: if(++timer_val >= 150)
 16028                           
 16029                           ; BSR set to: 0
 16030                           ;incstack = 0
 16031  002986  0100               	movlb	0	; () banked
 16032  002988  2BD8               	incf	_timer_val& (0+255),f,b
 16033  00298A  0E95               	movlw	149
 16034  00298C  65D8               	cpfsgt	_timer_val& (0+255),b
 16035  00298E  0C95               	retlw	149
 16036                           
 16037                           ; BSR set to: 0
 16038                           ;common.c: 720: {
 16039                           ;common.c: 721: timer_val = 0;
 16040  002990  6BD8               	clrf	_timer_val& (0+255),b
 16041                           
 16042                           ; BSR set to: 0
 16043                           ;common.c: 722: time_flag = 1;
 16044  002992  0E01               	movlw	1
 16045  002994  6FD7               	movwf	_time_flag& (0+255),b
 16046                           
 16047                           ; BSR set to: 0
 16048                           ;common.c: 723: T1CONbits.TMR1ON = 0;
 16049  002996  90CD               	bcf	4045,0,c	;volatile
 16050                           
 16051                           ; BSR set to: 0
 16052  002998  0C01               	retlw	1	;funcret
 16053  00299A                     __end_of_TMR1_ISR:
 16054                           	opt stack 0
 16055                           tosu	equ	0xFFF
 16056                           tosh	equ	0xFFE
 16057                           tosl	equ	0xFFD
 16058                           pclath	equ	0xFFA
 16059                           tblptru	equ	0xFF8
 16060                           tblptrh	equ	0xFF7
 16061                           tblptrl	equ	0xFF6
 16062                           tablat	equ	0xFF5
 16063                           prodh	equ	0xFF4
 16064                           prodl	equ	0xFF3
 16065                           intcon	equ	0xFF2
 16066                           intcon2	equ	0xFF1
 16067                           postinc0	equ	0xFEE
 16068                           wreg	equ	0xFE8
 16069                           indf1	equ	0xFE7
 16070                           plusw1	equ	0xFE3
 16071                           fsr1h	equ	0xFE2
 16072                           fsr1l	equ	0xFE1
 16073                           indf2	equ	0xFDF
 16074                           postinc2	equ	0xFDE
 16075                           postdec2	equ	0xFDD
 16076                           plusw2	equ	0xFDB
 16077                           fsr2h	equ	0xFDA
 16078                           fsr2l	equ	0xFD9
 16079                           status	equ	0xFD8
 16080                           
 16081 ;; *************** function _TMR0_ISR *****************
 16082 ;; Defined at:
 16083 ;;		line 127 in file "dispatcher.c"
 16084 ;; Parameters:    Size  Location     Type
 16085 ;;		None
 16086 ;; Auto vars:     Size  Location     Type
 16087 ;;		None
 16088 ;; Return value:  Size  Location     Type
 16089 ;;                  1    wreg      void 
 16090 ;; Registers used:
 16091 ;;		wreg, status,2
 16092 ;; Tracked objects:
 16093 ;;		On entry : 0/0
 16094 ;;		On exit  : 3F/0
 16095 ;;		Unchanged: 0/0
 16096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16101 ;;Total ram usage:        0 bytes
 16102 ;; Hardware stack levels used:    1
 16103 ;; This function calls:
 16104 ;;		Nothing
 16105 ;; This function is called by:
 16106 ;;		_INTERRUPT_InterruptManager
 16107 ;; This function uses a non-reentrant model
 16108 ;;
 16109                           
 16110                           	psect	text87
 16111  002A14                     __ptext87:
 16112                           	opt stack 0
 16113  002A14                     _TMR0_ISR:
 16114                           	opt stack 22
 16115                           
 16116                           ;dispatcher.c: 131: INTCONbits.TMR0IF = 0;
 16117                           
 16118                           ; BSR set to: 0
 16119                           ;incstack = 0
 16120  002A14  94F2               	bcf	intcon,2,c	;volatile
 16121                           
 16122                           ;dispatcher.c: 132: TMR0 = 61;
 16123  002A16  6AD7               	clrf	4055,c	;volatile
 16124  002A18  0E3D               	movlw	61
 16125  002A1A  6ED6               	movwf	4054,c	;volatile
 16126                           
 16127                           ;dispatcher.c: 133: Timer0Interrupt = 1;
 16128  002A1C  0E01               	movlw	1
 16129  002A1E  0100               	movlb	0	; () banked
 16130  002A20  6FA3               	movwf	_Timer0Interrupt& (0+255),b
 16131                           
 16132                           ; BSR set to: 0
 16133  002A22  0C01               	retlw	1	;funcret
 16134  002A24                     __end_of_TMR0_ISR:
 16135                           	opt stack 0
 16136                           tosu	equ	0xFFF
 16137                           tosh	equ	0xFFE
 16138                           tosl	equ	0xFFD
 16139                           pclath	equ	0xFFA
 16140                           tblptru	equ	0xFF8
 16141                           tblptrh	equ	0xFF7
 16142                           tblptrl	equ	0xFF6
 16143                           tablat	equ	0xFF5
 16144                           prodh	equ	0xFF4
 16145                           prodl	equ	0xFF3
 16146                           intcon	equ	0xFF2
 16147                           intcon2	equ	0xFF1
 16148                           postinc0	equ	0xFEE
 16149                           wreg	equ	0xFE8
 16150                           indf1	equ	0xFE7
 16151                           plusw1	equ	0xFE3
 16152                           fsr1h	equ	0xFE2
 16153                           fsr1l	equ	0xFE1
 16154                           indf2	equ	0xFDF
 16155                           postinc2	equ	0xFDE
 16156                           postdec2	equ	0xFDD
 16157                           plusw2	equ	0xFDB
 16158                           fsr2h	equ	0xFDA
 16159                           fsr2l	equ	0xFD9
 16160                           status	equ	0xFD8
 16161                           
 16162 ;; *************** function _INT0_ISR *****************
 16163 ;; Defined at:
 16164 ;;		line 698 in file "common.c"
 16165 ;; Parameters:    Size  Location     Type
 16166 ;;		None
 16167 ;; Auto vars:     Size  Location     Type
 16168 ;;		None
 16169 ;; Return value:  Size  Location     Type
 16170 ;;                  1    wreg      void 
 16171 ;; Registers used:
 16172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16173 ;; Tracked objects:
 16174 ;;		On entry : 0/0
 16175 ;;		On exit  : 0/0
 16176 ;;		Unchanged: 0/0
 16177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16182 ;;Total ram usage:        0 bytes
 16183 ;; Hardware stack levels used:    1
 16184 ;; Hardware stack levels required when called:    1
 16185 ;; This function calls:
 16186 ;;		i2_RTOS_SetTask
 16187 ;; This function is called by:
 16188 ;;		_INTERRUPT_InterruptManager
 16189 ;; This function uses a non-reentrant model
 16190 ;;
 16191                           
 16192                           	psect	text88
 16193  00299A                     __ptext88:
 16194                           	opt stack 0
 16195  00299A                     _INT0_ISR:
 16196                           	opt stack 21
 16197                           
 16198                           ;common.c: 707: RTOS_SetTask(GetTime, 0, 0);
 16199                           
 16200                           ; BSR set to: 0
 16201                           ;incstack = 0
 16202  00299A  0ED6               	movlw	low _GetTime
 16203  00299C  6E01               	movwf	i2RTOS_SetTask@taskFunc,c
 16204  00299E  0E28               	movlw	high _GetTime
 16205  0029A0  6E02               	movwf	i2RTOS_SetTask@taskFunc+1,c
 16206  0029A2  6A04               	clrf	i2RTOS_SetTask@taskDelay+1,c
 16207  0029A4  6A03               	clrf	i2RTOS_SetTask@taskDelay,c
 16208  0029A6  6A06               	clrf	i2RTOS_SetTask@taskPeriod+1,c
 16209  0029A8  6A05               	clrf	i2RTOS_SetTask@taskPeriod,c
 16210  0029AA  EF2A  F00D         	goto	i2_RTOS_SetTask	;wreg free
 16211  0029AE                     __end_of_INT0_ISR:
 16212                           	opt stack 0
 16213                           tosu	equ	0xFFF
 16214                           tosh	equ	0xFFE
 16215                           tosl	equ	0xFFD
 16216                           pclath	equ	0xFFA
 16217                           tblptru	equ	0xFF8
 16218                           tblptrh	equ	0xFF7
 16219                           tblptrl	equ	0xFF6
 16220                           tablat	equ	0xFF5
 16221                           prodh	equ	0xFF4
 16222                           prodl	equ	0xFF3
 16223                           intcon	equ	0xFF2
 16224                           intcon2	equ	0xFF1
 16225                           postinc0	equ	0xFEE
 16226                           wreg	equ	0xFE8
 16227                           indf1	equ	0xFE7
 16228                           plusw1	equ	0xFE3
 16229                           fsr1h	equ	0xFE2
 16230                           fsr1l	equ	0xFE1
 16231                           indf2	equ	0xFDF
 16232                           postinc2	equ	0xFDE
 16233                           postdec2	equ	0xFDD
 16234                           plusw2	equ	0xFDB
 16235                           fsr2h	equ	0xFDA
 16236                           fsr2l	equ	0xFD9
 16237                           status	equ	0xFD8
 16238                           
 16239 ;; *************** function i2_RTOS_SetTask *****************
 16240 ;; Defined at:
 16241 ;;		line 22 in file "dispatcher.c"
 16242 ;; Parameters:    Size  Location     Type
 16243 ;;  taskFunc        2    0[COMRAM] PTR FTN()void 
 16244 ;;		 -> pressure(1), home_temp(1), set_font_set(1), time_set_dy(1), 
 16245 ;;		 -> time_set_dt(1), time_set_mt(1), time_set_yr(1), default_state(1), 
 16246 ;;		 -> time_set_hr(1), time_set_min(1), GetTime(1), key_press(1), 
 16247 ;;		 -> time_led(1), 
 16248 ;;  taskDelay       2    2[COMRAM] unsigned int 
 16249 ;;  taskPeriod      2    4[COMRAM] unsigned int 
 16250 ;; Auto vars:     Size  Location     Type
 16251 ;;  RTOS_SetTask    1    8[COMRAM] unsigned char 
 16252 ;; Return value:  Size  Location     Type
 16253 ;;                  1    wreg      void 
 16254 ;; Registers used:
 16255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16256 ;; Tracked objects:
 16257 ;;		On entry : 0/0
 16258 ;;		On exit  : 0/0
 16259 ;;		Unchanged: 0/0
 16260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16261 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16263 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16264 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16265 ;;Total ram usage:        9 bytes
 16266 ;; Hardware stack levels used:    1
 16267 ;; This function calls:
 16268 ;;		Nothing
 16269 ;; This function is called by:
 16270 ;;		_INT0_ISR
 16271 ;; This function uses a non-reentrant model
 16272 ;;
 16273                           
 16274                           	psect	text89
 16275  001A54                     __ptext89:
 16276                           	opt stack 0
 16277  001A54                     i2_RTOS_SetTask:
 16278                           	opt stack 21
 16279                           
 16280                           ;dispatcher.c: 24: uint8_t i;
 16281                           ;dispatcher.c: 26: if(!taskFunc) return;
 16282                           
 16283                           ;incstack = 0
 16284  001A54  5001               	movf	i2RTOS_SetTask@taskFunc,w,c
 16285  001A56  1002               	iorwf	i2RTOS_SetTask@taskFunc+1,w,c
 16286  001A58  E101               	bnz	i2l240
 16287  001A5A  0012               	return	
 16288  001A5C                     i2l240:
 16289                           
 16290                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 16291  001A5C  6A09               	clrf	i2RTOS_SetTask@i,c
 16292  001A5E  D015               	goto	i2l5136
 16293  001A60                     i2l5124:
 16294                           
 16295                           ;dispatcher.c: 28: {
 16296                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 16297  001A60  5009               	movf	i2RTOS_SetTask@i,w,c
 16298  001A62  D82A               	call	PL26	;call to abstracted procedure
 16299  001A64  5001               	movf	i2RTOS_SetTask@taskFunc,w,c	;volatile
 16300  001A66  18DE               	xorwf	postinc2,w,c
 16301  001A68  E10F               	bnz	i2l5134
 16302  001A6A  5002               	movf	i2RTOS_SetTask@taskFunc+1,w,c	;volatile
 16303  001A6C  18DE               	xorwf	postinc2,w,c
 16304  001A6E  E10C               	bnz	i2l5134
 16305                           
 16306                           ;dispatcher.c: 30: {
 16307                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 16308  001A70  9EF2               	bcf	intcon,7,c	;volatile
 16309                           
 16310                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 16311  001A72  5009               	movf	i2RTOS_SetTask@i,w,c
 16312  001A74  EC51  F00C         	call	PL22	;call to abstracted procedure
 16313  001A78  D83E               	call	PL124	;call to abstracted procedure
 16314                           
 16315                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 16316  001A7A  5009               	movf	i2RTOS_SetTask@i,w,c
 16317  001A7C  D82F               	call	PL32	;call to abstracted procedure
 16318  001A7E  D836               	call	PL106	;call to abstracted procedure
 16319                           
 16320                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 16321  001A80  5009               	movf	i2RTOS_SetTask@i,w,c
 16322  001A82  D822               	call	PL28	;call to abstracted procedure
 16323                           
 16324                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 16325  001A84  8EF2               	bsf	intcon,7,c	;volatile
 16326  001A86  0C00               	retlw	0
 16327  001A88                     i2l5134:
 16328  001A88  2A09               	incf	i2RTOS_SetTask@i,f,c
 16329  001A8A                     i2l5136:
 16330  001A8A  5061               	movf	_arrayTail,w,c	;volatile
 16331  001A8C  5C09               	subwf	i2RTOS_SetTask@i,w,c
 16332  001A8E  E3E8               	bnc	i2l5124
 16333                           
 16334                           ;dispatcher.c: 39: }
 16335                           ;dispatcher.c: 40: }
 16336                           ;dispatcher.c: 42: if (arrayTail < 15)
 16337  001A90  0E0F               	movlw	15
 16338  001A92  6061               	cpfslt	_arrayTail,c	;volatile
 16339  001A94  0C0F               	retlw	15
 16340                           
 16341                           ;dispatcher.c: 43: {
 16342                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 16343  001A96  9EF2               	bcf	intcon,7,c	;volatile
 16344                           
 16345                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 16346  001A98  5061               	movf	_arrayTail,w,c	;volatile
 16347  001A9A  D80E               	call	PL26	;call to abstracted procedure
 16348  001A9C  C001  FFDE         	movff	i2RTOS_SetTask@taskFunc,postinc2	;volatile
 16349  001AA0  C002  FFDD         	movff	i2RTOS_SetTask@taskFunc+1,postdec2	;volatile
 16350                           
 16351                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 16352  001AA4  5061               	movf	_arrayTail,w,c	;volatile
 16353  001AA6  EC51  F00C         	call	PL22	;call to abstracted procedure
 16354  001AAA  D825               	call	PL124	;call to abstracted procedure
 16355                           
 16356                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 16357  001AAC  5061               	movf	_arrayTail,w,c	;volatile
 16358  001AAE  D816               	call	PL32	;call to abstracted procedure
 16359  001AB0  D81D               	call	PL106	;call to abstracted procedure
 16360                           
 16361                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 16362  001AB2  5061               	movf	_arrayTail,w,c	;volatile
 16363  001AB4  D809               	call	PL28	;call to abstracted procedure
 16364                           
 16365                           ;dispatcher.c: 51: arrayTail++;
 16366                           
 16367                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 16368  001AB6  D024               	goto	PL160	;call to abstracted procedure
 16369  001AB8                     __end_ofi2_RTOS_SetTask:
 16370                           	opt stack 0
 16371  001AB8                     PL26:
 16372                           	opt stack 27
 16373  001AB8  0D08               	mullw	8
 16374  001ABA  0E00               	movlw	low _TaskArray
 16375  001ABC  24F3               	addwf	prodl,w,c
 16376  001ABE  6ED9               	movwf	fsr2l,c
 16377  001AC0  0E01               	movlw	high _TaskArray
 16378  001AC2  20F4               	addwfc	prodh,w,c
 16379  001AC4  6EDA               	movwf	fsr2h,c
 16380  001AC6  0012               	return	
 16381  001AC8                     __end_ofPL26:
 16382                           	opt stack 0
 16383  001AC8                     PL28:
 16384                           	opt stack 27
 16385  001AC8  0D08               	mullw	8
 16386  001ACA  0E06               	movlw	low (_TaskArray+6)
 16387  001ACC  24F3               	addwf	prodl,w,c
 16388  001ACE  6ED9               	movwf	fsr2l,c
 16389  001AD0  0E01               	movlw	high (_TaskArray+6)
 16390  001AD2  20F4               	addwfc	prodh,w,c
 16391  001AD4  6EDA               	movwf	fsr2h,c
 16392  001AD6  6ADE               	clrf	postinc2,c
 16393  001AD8  6ADD               	clrf	postdec2,c
 16394  001ADA  0012               	return	
 16395  001ADC                     __end_ofPL28:
 16396                           	opt stack 0
 16397  001ADC                     PL32:
 16398                           	opt stack 27
 16399  001ADC  0D08               	mullw	8
 16400  001ADE  0E04               	movlw	low (_TaskArray+4)
 16401  001AE0  24F3               	addwf	prodl,w,c
 16402  001AE2  6ED9               	movwf	fsr2l,c
 16403  001AE4  0E01               	movlw	high (_TaskArray+4)
 16404  001AE6  20F4               	addwfc	prodh,w,c
 16405  001AE8  6EDA               	movwf	fsr2h,c
 16406  001AEA  0012               	return	
 16407  001AEC                     __end_ofPL32:
 16408                           	opt stack 0
 16409  001AEC                     PL106:
 16410                           	opt stack 21
 16411  001AEC  C005  FFDE         	movff	i2RTOS_SetTask@taskPeriod,postinc2
 16412  001AF0  C006  FFDD         	movff	i2RTOS_SetTask@taskPeriod+1,postdec2
 16413  001AF4  0012               	return	
 16414  001AF6                     __end_ofPL106:
 16415                           	opt stack 0
 16416  001AF6                     PL124:
 16417                           	opt stack 21
 16418  001AF6  C003  FFDE         	movff	i2RTOS_SetTask@taskDelay,postinc2
 16419  001AFA  C004  FFDD         	movff	i2RTOS_SetTask@taskDelay+1,postdec2
 16420  001AFE  0012               	return	
 16421  001B00                     __end_ofPL124:
 16422                           	opt stack 0
 16423  001B00                     PL160:
 16424                           	opt stack 27
 16425  001B00  2A61               	incf	_arrayTail,f,c	;volatile
 16426  001B02  8EF2               	bsf	intcon,7,c	;volatile
 16427  001B04  0C00               	retlw	0	;funcret
 16428  001B06                     __end_ofPL160:
 16429                           	opt stack 0
 16430                           tosu	equ	0xFFF
 16431                           tosh	equ	0xFFE
 16432                           tosl	equ	0xFFD
 16433                           pclath	equ	0xFFA
 16434                           tblptru	equ	0xFF8
 16435                           tblptrh	equ	0xFF7
 16436                           tblptrl	equ	0xFF6
 16437                           tablat	equ	0xFF5
 16438                           prodh	equ	0xFF4
 16439                           prodl	equ	0xFF3
 16440                           intcon	equ	0xFF2
 16441                           intcon2	equ	0xFF1
 16442                           postinc0	equ	0xFEE
 16443                           wreg	equ	0xFE8
 16444                           indf1	equ	0xFE7
 16445                           plusw1	equ	0xFE3
 16446                           fsr1h	equ	0xFE2
 16447                           fsr1l	equ	0xFE1
 16448                           indf2	equ	0xFDF
 16449                           postinc2	equ	0xFDE
 16450                           postdec2	equ	0xFDD
 16451                           plusw2	equ	0xFDB
 16452                           fsr2h	equ	0xFDA
 16453                           fsr2l	equ	0xFD9
 16454                           status	equ	0xFD8
 16455                           tosu	equ	0xFFF
 16456                           tosh	equ	0xFFE
 16457                           tosl	equ	0xFFD
 16458                           pclath	equ	0xFFA
 16459                           tblptru	equ	0xFF8
 16460                           tblptrh	equ	0xFF7
 16461                           tblptrl	equ	0xFF6
 16462                           tablat	equ	0xFF5
 16463                           prodh	equ	0xFF4
 16464                           prodl	equ	0xFF3
 16465                           intcon	equ	0xFF2
 16466                           intcon2	equ	0xFF1
 16467                           postinc0	equ	0xFEE
 16468                           wreg	equ	0xFE8
 16469                           indf1	equ	0xFE7
 16470                           plusw1	equ	0xFE3
 16471                           fsr1h	equ	0xFE2
 16472                           fsr1l	equ	0xFE1
 16473                           indf2	equ	0xFDF
 16474                           postinc2	equ	0xFDE
 16475                           postdec2	equ	0xFDD
 16476                           plusw2	equ	0xFDB
 16477                           fsr2h	equ	0xFDA
 16478                           fsr2l	equ	0xFD9
 16479                           status	equ	0xFD8
 16480                           
 16481                           	psect	text90
 16482  000000                     __ptext90:
 16483                           	opt stack 0
 16484                           tosu	equ	0xFFF
 16485                           tosh	equ	0xFFE
 16486                           tosl	equ	0xFFD
 16487                           pclath	equ	0xFFA
 16488                           tblptru	equ	0xFF8
 16489                           tblptrh	equ	0xFF7
 16490                           tblptrl	equ	0xFF6
 16491                           tablat	equ	0xFF5
 16492                           prodh	equ	0xFF4
 16493                           prodl	equ	0xFF3
 16494                           intcon	equ	0xFF2
 16495                           intcon2	equ	0xFF1
 16496                           postinc0	equ	0xFEE
 16497                           wreg	equ	0xFE8
 16498                           indf1	equ	0xFE7
 16499                           plusw1	equ	0xFE3
 16500                           fsr1h	equ	0xFE2
 16501                           fsr1l	equ	0xFE1
 16502                           indf2	equ	0xFDF
 16503                           postinc2	equ	0xFDE
 16504                           postdec2	equ	0xFDD
 16505                           plusw2	equ	0xFDB
 16506                           fsr2h	equ	0xFDA
 16507                           fsr2l	equ	0xFD9
 16508                           status	equ	0xFD8
 16509                           
 16510                           	psect	rparam
 16511  0000                     tosu	equ	0xFFF
 16512                           tosh	equ	0xFFE
 16513                           tosl	equ	0xFFD
 16514                           pclath	equ	0xFFA
 16515                           tblptru	equ	0xFF8
 16516                           tblptrh	equ	0xFF7
 16517                           tblptrl	equ	0xFF6
 16518                           tablat	equ	0xFF5
 16519                           prodh	equ	0xFF4
 16520                           prodl	equ	0xFF3
 16521                           intcon	equ	0xFF2
 16522                           intcon2	equ	0xFF1
 16523                           postinc0	equ	0xFEE
 16524                           wreg	equ	0xFE8
 16525                           indf1	equ	0xFE7
 16526                           plusw1	equ	0xFE3
 16527                           fsr1h	equ	0xFE2
 16528                           fsr1l	equ	0xFE1
 16529                           indf2	equ	0xFDF
 16530                           postinc2	equ	0xFDE
 16531                           postdec2	equ	0xFDD
 16532                           plusw2	equ	0xFDB
 16533                           fsr2h	equ	0xFDA
 16534                           fsr2l	equ	0xFD9
 16535                           status	equ	0xFD8
 16536                           
 16537                           	psect	temp
 16538  000067                     btemp:
 16539                           	opt stack 0
 16540  000067                     	ds	1
 16541  0000                     int$flags	set	btemp
 16542                           tosu	equ	0xFFF
 16543                           tosh	equ	0xFFE
 16544                           tosl	equ	0xFFD
 16545                           pclath	equ	0xFFA
 16546                           tblptru	equ	0xFF8
 16547                           tblptrh	equ	0xFF7
 16548                           tblptrl	equ	0xFF6
 16549                           tablat	equ	0xFF5
 16550                           prodh	equ	0xFF4
 16551                           prodl	equ	0xFF3
 16552                           intcon	equ	0xFF2
 16553                           intcon2	equ	0xFF1
 16554                           postinc0	equ	0xFEE
 16555                           wreg	equ	0xFE8
 16556                           indf1	equ	0xFE7
 16557                           plusw1	equ	0xFE3
 16558                           fsr1h	equ	0xFE2
 16559                           fsr1l	equ	0xFE1
 16560                           indf2	equ	0xFDF
 16561                           postinc2	equ	0xFDE
 16562                           postdec2	equ	0xFDD
 16563                           plusw2	equ	0xFDB
 16564                           fsr2h	equ	0xFDA
 16565                           fsr2l	equ	0xFD9
 16566                           status	equ	0xFD8
 16567                           tosu	equ	0xFFF
 16568                           tosh	equ	0xFFE
 16569                           tosl	equ	0xFFD
 16570                           pclath	equ	0xFFA
 16571                           tblptru	equ	0xFF8
 16572                           tblptrh	equ	0xFF7
 16573                           tblptrl	equ	0xFF6
 16574                           tablat	equ	0xFF5
 16575                           prodh	equ	0xFF4
 16576                           prodl	equ	0xFF3
 16577                           intcon	equ	0xFF2
 16578                           intcon2	equ	0xFF1
 16579                           postinc0	equ	0xFEE
 16580                           wreg	equ	0xFE8
 16581                           indf1	equ	0xFE7
 16582                           plusw1	equ	0xFE3
 16583                           fsr1h	equ	0xFE2
 16584                           fsr1l	equ	0xFE1
 16585                           indf2	equ	0xFDF
 16586                           postinc2	equ	0xFDE
 16587                           postdec2	equ	0xFDD
 16588                           plusw2	equ	0xFDB
 16589                           fsr2h	equ	0xFDA
 16590                           fsr2l	equ	0xFD9
 16591                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    1614
    Data        3
    BSS         319
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     102
    BANK0           128     32     121
    BANK1           256      0     220
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_2(CODE[36]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 100
		 -> text_buf(BANK1[100]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    bmp280Convert@press	PTR long  size(1) Largest target is 4
		 -> press(BANK0[4]), 

    bmp280Convert@temper	PTR long  size(1) Largest target is 4
		 -> temperbmp280(BANK0[4]), 

    readTemp_Single@buf	PTR unsigned int  size(1) Largest target is 2
		 -> temperature(BANK0[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(BANK0[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(BANK0[1]), 

    getDate@p4	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getDate@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getDate@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getDate@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getTime@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getTime@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getTime@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    putchar_down@pF	PTR unsigned char [5][0] size(2) Largest target is 1280
		 -> dFont5(CODE[50]), dFont4(CODE[50]), dFont3(CODE[50]), dFont2(CODE[50]), 
		 -> Font(CODE[1280]), dFont1(CODE[50]), 

    putchar_b_buf@pF	PTR unsigned char [5][0] size(2) Largest target is 1280
		 -> dFont5(CODE[50]), dFont4(CODE[50]), dFont3(CODE[50]), dFont2(CODE[50]), 
		 -> Font(CODE[1280]), dFont1(CODE[50]), 

    pFont	PTR unsigned char [5][0] size(2) Largest target is 50
		 -> dFont5(CODE[50]), dFont4(CODE[50]), dFont3(CODE[50]), dFont2(CODE[50]), 
		 -> dFont1(CODE[50]), 

    Update_Matrix@buf	PTR unsigned char  size(1) Largest target is 32
		 -> Dis_Buff(BANK0[32]), 

    RTOS_DispatchTask@function	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 

    RTOS_DeleteTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 

    S473task$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 

    TaskArray.pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 

    RTOS_SetTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> pressure(), home_temp(), set_font_set(), time_set_dy(), 
		 -> time_set_dt(), time_set_mt(), time_set_yr(), default_state(), 
		 -> time_set_hr(), time_set_min(), GetTime(), key_press(), 
		 -> time_led(), 


Critical Paths under _main in COMRAM

    _main->_RTOS_DispatchTask
    _nrf24_init->_nrf24_write_reg
    _nrf24_write_reg->_spi_rw
    _init_ds18b20->_write_byte
    _bmp280_Init->_bmp280ReadInt16
    _bmp280WriteByte->_I2C_Master_Write
    _bmp280ReadInt16->_I2C_Master_Read
    _Init7221->_Cmd7221
    _Cmd7221->_Send_Byte_7221
    _DS3231_init->_DS3231_Write
    _time_set_yr->_putchar_b_buf
    _time_set_yr->_setDate
    _time_set_mt->_putchar_b_buf
    _time_set_mt->_setDate
    _time_set_min->_putchar_b_buf
    _time_set_hr->_putchar_b_buf
    _setTime->_DS3231_Write
    _time_set_dy->_putchar_b_buf
    _time_set_dy->_setDate
    _time_set_dt->_putchar_b_buf
    _time_set_dt->_setDate
    _setDate->_DS3231_Write
    _decimal_to_bcd->___lbmod
    _DS3231_Write->_decimal_to_bcd
    _time_led->_bmp280Convert
    _readTemp_Single->___lwmod
    _write_byte->_write_bit
    _bmp280Convert->_bmp280ReadPressure
    _bmp280Convert->_bmp280ReadTemp
    _bmp280ReadTemp->_bmp280ReadInt32
    _bmp280ReadPressure->_bmp280ReadInt32
    _bmp280ReadInt32->_I2C_Master_Read
    _FillBuf->___lbmod
    _set_font_set->_putchar_b_buf
    _putchar_b_buf->___lbmod
    _pressure->_putchar_down
    _interval_scroll_text->_Update_Matrix
    ___llmod->___lldiv
    ___lldiv->___lmul
    _home_temp->_putchar_down
    _scroll_left->_Update_Matrix
    _putchar_down_s->___lbmod
    _putchar_down->___llmod
    _Update_Matrix->_Send_Byte_7221
    _pic_to_led->_pixel_off
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    _GetTime->_getDate
    _getTime->_DS3231_Read
    _getDate->_DS3231_Read
    _DS3231_Read->_I2C_Master_Read
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_RepeatedStart->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INT0_ISR->i2_RTOS_SetTask

Critical Paths under _main in BANK0

    _time_led->_bmp280Convert

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  360368
                                             87 COMRAM     1     1      0
                  _RTOS_DispatchTask
                       _RTOS_SetTask
                  _SYSTEM_Initialize
                       _clear_matrix
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3530
                        _DS3231_init
                           _I2C_Init
                           _Init7221
                     _Interrupt_Init
                          _Port_Init
                          _RTOS_Init
                            _TMRInit
                        _bmp280_Init
                       _init_ds18b20
                          _init_uart
                         _nrf24_init
                           _read_eep
                           _set_font
                         _sound_init
                           _spi_init
 ---------------------------------------------------------------------------------
 (2) _spi_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sound_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _read_eep                                             2     0      2      86
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _nrf24_init                                           2     1      1    1361
                                             18 COMRAM     2     1      1
                    _nrf24_write_reg
 ---------------------------------------------------------------------------------
 (3) _nrf24_write_reg                                      2     1      1    1242
                                             16 COMRAM     2     1      1
                             _spi_rw
 ---------------------------------------------------------------------------------
 (4) _spi_rw                                               2     2      0      60
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         0     0      0     232
                           _ow_reset
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _bmp280_Init                                          0     0      0     448
                    _bmp280ReadInt16
                    _bmp280WriteByte
 ---------------------------------------------------------------------------------
 (3) _bmp280WriteByte                                      2     1      1     247
                                             16 COMRAM     2     1      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _bmp280ReadInt16                                      9     7      2     201
                                             17 COMRAM     9     7      2
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _TMRInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTOS_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init7221                                             0     0      0     617
                            _Cmd7221
 ---------------------------------------------------------------------------------
 (3) _Cmd7221                                              3     2      1     617
                                             16 COMRAM     3     2      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DS3231_init                                          0     0      0     786
                       _DS3231_Write
 ---------------------------------------------------------------------------------
 (1) _RTOS_DispatchTask                                    8     8      0  346071
                                             79 COMRAM     8     8      0
                            _GetTime *
                    _RTOS_DeleteTask
                      _default_state *
                          _home_temp *
                          _key_press *
                           _pressure *
                       _set_font_set *
                           _time_led *
                        _time_set_dt *
                        _time_set_dy *
                        _time_set_hr *
                       _time_set_min *
                        _time_set_mt *
                        _time_set_yr *
 ---------------------------------------------------------------------------------
 (2) _time_set_yr                                          0     0      0   38245
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_mt                                          0     0      0   33691
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_min                                         0     0      0   36982
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _time_set_hr                                          0     0      0   37081
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                       _clear_matrix
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (3) _setTime                                              3     1      2    6111
                                             27 COMRAM     3     1      2
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (2) _time_set_dy                                          0     0      0   33691
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_dt                                          0     0      0   38245
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (3) _setDate                                              4     1      3    7374
                                             27 COMRAM     4     1      3
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (4) _decimal_to_bcd                                       3     3      0    4616
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write                                         2     1      1     786
                                             25 COMRAM     2     1      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                     _decimal_to_bcd (ARG)
 ---------------------------------------------------------------------------------
 (2) _time_led                                             0     0      0   30203
                            _FillBuf
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _bmp280Convert
                    _readTemp_Single
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _readTemp_Single                                     10     7      3    2901
                                             26 COMRAM    10     7      3
                            ___lwdiv
                            ___lwmod
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (3) _write_byte                                           5     5      0     198
                                             15 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (4) _write_bit                                            1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _read_byte                                            4     4      0     136
                                             14 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (5) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ow_reset                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _bmp280Convert                                       65    63      2    6050
                                             58 COMRAM    21    19      2
                                              0 BANK0     32    32      0
                            ___lldiv
                             ___lmul
                 _bmp280ReadPressure
                     _bmp280ReadTemp
 ---------------------------------------------------------------------------------
 (4) _bmp280ReadTemp                                       8     4      4     275
                                             50 COMRAM     8     4      4
                    _bmp280ReadInt32
 ---------------------------------------------------------------------------------
 (4) _bmp280ReadPressure                                   8     4      4     275
                                             50 COMRAM     8     4      4
                    _bmp280ReadInt32
 ---------------------------------------------------------------------------------
 (5) _bmp280ReadInt32                                     33    29      4     238
                                             17 COMRAM    33    29      4
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    2714
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _FillBuf                                              3     3      0    5093
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) _set_font_set                                         0     0      0   29383
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbmod
                      _putchar_b_buf
                           _set_font
                          _write_eep
 ---------------------------------------------------------------------------------
 (3) _write_eep                                            2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _set_font                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _putchar_b_buf                                        9     6      3   11781
                                             22 COMRAM     9     6      3
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (2) _pressure                                             1     1      0   32644
                                             60 COMRAM     1     1      0
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                            ___lbdiv
                            ___lbmod
                            ___lldiv
                            ___llmod
                       _clear_matrix
                            _getTime
               _interval_scroll_text
                         _pic_to_led
                       _putchar_down
                     _putchar_down_s
                        _scroll_left
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             19    15      4     398
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _interval_scroll_text                                 2     2      0    1518
                                             20 COMRAM     2     2      0
                      _Update_Matrix
                        _scroll_text
 ---------------------------------------------------------------------------------
 (4) _scroll_text                                          3     3      0     130
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     694
                                             39 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    1011
                                             26 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _key_press                                            1     1      0      77
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _home_temp                                            1     1      0   30728
                                             60 COMRAM     1     1      0
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                       _clear_matrix
                            _getTime
                         _pic_to_led
                       _putchar_down
                     _putchar_down_s
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _scroll_left                                          5     5      0    1623
                                             20 COMRAM     5     5      0
                      _Update_Matrix
 ---------------------------------------------------------------------------------
 (3) _putchar_down_s                                      10     9      1    2049
                                             22 COMRAM    10     9      1
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_down                                        12     9      3    5006
                                             48 COMRAM    12     9      3
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                            ___lldiv (ARG)
                            ___llmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Update_Matrix                                        4     3      1    1320
                                             16 COMRAM     4     3      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (4) _Send_Byte_7221                                       2     2      0     102
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _pic_to_led                                           7     6      1    1278
                                             19 COMRAM     7     6      1
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (4) _pixel_on                                             4     3      1     273
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _pixel_off                                            5     4      1     273
                                             14 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (1) _clear_matrix                                         1     1      0      99
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1002
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1    2850
                                             18 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1    1704
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _RTOS_SetTask                                         9     3      6   10668
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _RTOS_DeleteTask                                      9     7      2    2548
                                             14 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _default_state                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              0     0      0    2104
                            _getDate
                            _getTime
 ---------------------------------------------------------------------------------
 (3) _getTime                                              3     0      3    1198
                                             19 COMRAM     3     0      3
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (3) _getDate                                              4     0      4     906
                                             19 COMRAM     4     0      4
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (4) _bcd_to_decimal                                       2     2      0      62
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _DS3231_Read                                          2     2      0     164
                                             17 COMRAM     2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     1     1      0      31
                                             15 COMRAM     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             15 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           5     5      0     344
                                              9 COMRAM     5     5      0
                           _INT0_ISR
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR3_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _INT0_ISR                                             0     0      0     344
                     i2_RTOS_SetTask
 ---------------------------------------------------------------------------------
 (10) i2_RTOS_SetTask                                      9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTOS_DispatchTask
     _GetTime *
       _getDate
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
     _RTOS_DeleteTask *
     _default_state *
     _home_temp *
       _RTOS_DeleteTask
       _RTOS_SetTask
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clear_matrix
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _pic_to_led
         _pixel_off
         _pixel_on
       _putchar_down
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         ___lldiv (ARG)
           ___lmul (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
       _putchar_down_s
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _key_press *
     _pressure *
       _RTOS_DeleteTask
       _RTOS_SetTask
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       ___lldiv
         ___lmul (ARG)
       ___llmod
         ___lldiv (ARG)
           ___lmul (ARG)
       _clear_matrix
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _interval_scroll_text
         _Update_Matrix
           _Send_Byte_7221
         _scroll_text
       _pic_to_led
         _pixel_off
         _pixel_on
       _putchar_down
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         ___lldiv (ARG)
           ___lmul (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
       _putchar_down_s
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
       _sprintf
     _set_font_set *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _set_font
       _write_eep
     _time_led *
       _FillBuf
         ___lbdiv
         ___lbmod
           ___lbdiv (ARG)
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _bmp280Convert
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _bmp280ReadPressure
           _bmp280ReadInt32
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_RepeatedStart
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
         _bmp280ReadTemp
           _bmp280ReadInt32
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_RepeatedStart
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
       _readTemp_Single
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _ow_reset
         _read_byte
           _read_bit
         _write_byte
           _write_bit
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _time_set_dt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_dy *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_hr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _clear_matrix
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_min *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_mt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_yr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
   _RTOS_SetTask
   _SYSTEM_Initialize
     _DS3231_init
       _DS3231_Write
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _decimal_to_bcd (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _I2C_Init
     _Init7221
       _Cmd7221
         _Send_Byte_7221
     _Interrupt_Init
     _Port_Init
     _RTOS_Init
     _TMRInit
     _bmp280_Init
       _bmp280ReadInt16
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_RepeatedStart
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _bmp280WriteByte
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _init_ds18b20
       _ow_reset
       _write_byte
         _write_bit
     _init_uart
     _nrf24_init
       _nrf24_write_reg
         _spi_rw
     _read_eep
     _set_font
     _sound_init
     _spi_init
   _clear_matrix

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     i2_RTOS_SetTask
   _TMR0_ISR
   _TMR1_ISR
   _TMR3_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DC       7       85.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     20      79       5       94.5%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     58      66       1       81.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BB      34        0.0%
DATA                 0      0     1BB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Jul 20 12:33:13 2017

                   ??_Interrupt_Init 000F                                   PL2 0F16  
                                 PL4 099C                                   PL6 1066  
                                 PL8 15BA                 nrf24_write_reg@value 0011  
                        __CFG_BORV$3 000000                      ??_Update_Matrix 0012  
          bmp280ReadTemp@temperature 0037                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                       _decimal_to_bcd 2746  
                       __CFG_CP2$OFF 000000                    ??_RTOS_DeleteTask 0011  
                                PL10 14C6                                  PL20 0CEA  
                                PL12 0648                                  PL30 1070  
                                PL22 18A2                                  PL14 1268  
                                PL40 06C8                                  PL32 1ADC  
                                PL24 128E                                  PL16 13C0  
                                PL50 06DA                                  PL42 0CF6  
                                PL34 18B2                                  PL26 1AB8  
                                PL18 14D4                                  PL60 071A  
                                PL52 06EC                                  PL44 15CE  
                                PL36 06BC                                  PL28 1AC8  
                                PL70 1EAA                                  PL62 0B7A  
                                PL54 0B52                                  PL46 12BE  
                                PL38 12B2                                  PL80 0D20  
                                PL72 0740                                  PL64 0D08  
                                PL56 06FE                                  PL48 0D00  
                                PL90 0D68                                  PL82 0D30  
                                PL74 0752                                  PL66 0734  
                                PL58 0B6E                                  PL92 0D72  
                                PL84 0D40                                  PL76 0764  
                                PL68 0D12                                  PL94 14E0  
                                PL86 0D50                                  PL78 107C  
                                PL96 1E1E                                  PL88 0D5E  
                                PL98 0776                                  l240 1CC0  
                                l182 2A04                                  l424 201A  
                                l360 27DE                                  l504 20E4  
                                l176 296A                                  l433 1FB0  
                                l257 180C                                  l362 27E6  
                                l363 27E8                                  l451 1B9E  
                                l372 247C                                  l460 1B0A  
                                l508 211A                                  l803 135E  
                                l732 177A                                  l816 0E0C  
                                l497 1E74                                  l746 0FD8  
                                l763 167C                                  l756 1032  
                                l838 1566                                  l951 22AC  
                                l776 0830                                  l953 22D0  
                                l945 2292                                  l857 0C5E  
                                l881 0AB4                                  l947 229A  
                                l949 22A2                         __CFG_CPB$OFF 000000  
                                _PEN 007E2A                         __CFG_CPD$OFF 000000  
                                _SEN 007E28                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
                      write_eep@data 000F           bmp280ReadPressure@pressure 0037  
             bmp280ReadInt32@address 0026               bmp280ReadInt16@address 0016  
                      _bmp280Convert 0012                                 PL100 0B94  
                               PL110 16DE                                 PL102 15D8  
                               PL120 2194                                 PL112 218A  
                               PL104 2132                                 PL130 09A8  
                               PL122 1D2A                                 PL114 0782  
                               PL106 1AEC                                 PL140 15E2  
                               PL132 13D4                                 PL124 1AF6  
                               PL116 1090                                 PL108 1086  
                               PL150 0796                                 PL142 109A  
                               PL134 25BC                                 PL126 1E26  
                               PL118 078C                                 PL160 1B00  
                               PL152 13DE                                 PL144 1D34  
                               PL136 0F2C                                 PL128 1E30  
                               PL162 0D7C                                 PL154 0BA0  
                               PL146 17CC                                 PL138 1E3A  
                               PL156 1990                                 PL148 12CA  
                               PL158 10A4                         __CFG_LVP$OFF 000000  
                       _putchar_down 1B9A                         __CFG_WDT$OFF 000000  
                               l1104 29AE                                 l1211 049E  
                               l1045 27A8                                 l1227 2680  
                               l1229 2688                                 l2222 268A  
                               l1344 22DE                                 l1098 27B8  
                               l1735 23AE                                 l1745 2434  
                               l1682 1F96                                 l6100 20BE  
                               l1692 20CC                                 l5302 2840  
                               l6006 111C                                 l6024 1194  
                               l6120 16F4                                 l6202 0FA6  
                               l6036 11AC                                 l6140 1738  
                               l6230 105A                                 l6310 07EE  
                               l6134 172E                                 l6126 1710  
                               l5360 256E                                 l5600 2414  
                               l5408 2480                                 l5432 1E46  
                               l6072 0474                                 l6208 0FB0  
                               l6216 0FC4                                 l6304 07E2  
                               l6152 1754                                 l6128 1716  
                               l6160 1766                                 l5602 2418  
                               l6066 03AE                                 l5514 252C  
                               l6226 1022                                 l6322 080A  
                               l6330 081C                                 l6402 133A  
                               l6410 134A                                 l6146 174A  
                               l5372 2588                                 l5364 2574  
                               l6092 208C                                 l6252 1630  
                               l6236 15EE                                 l6228 1046  
                               l6172 0F42                                 l6340 0896  
                               l6316 0800                                 l6420 0D84  
                               l6164 17A8                                 l5366 2578  
                               l5606 242A                                 l5710 201C  
                               l6094 2098                                 l5454 1E7C  
                               l5518 254C                                 l6270 1656  
                               l6246 1614                                 l6190 0F88  
                               l6350 0904                                 l6342 08AC  
                               l6334 0854                                 l6414 13B4  
                               l6430 0DA6                                 l6510 1524  
                               l6166 17C0                                 l5376 2590  
                               l5392 278A                                 l5384 2774  
                               l5616 29D4                                 l5560 1F5A  
                               l6096 209C                                 l6264 164C  
                               l6184 0F6C                                 l6352 091A  
                               l6344 08C2                                 l6336 086A  
                               l6360 095C                                 l6504 1518  
                               l5626 1CC4                                 l5714 2056  
                               l5546 22F2                                 l6282 16D2  
                               l6258 163A                                 l6354 0930  
                               l6346 08D8                                 l6338 0880  
                               l6362 0990                                 l6442 0DCE  
                               l5636 1CF2                                 l5580 2386  
                               l5716 2062                                 l5556 1F4A  
                               l5740 1FB2                                 l5660 234C  
                               l5652 2324                                 l6196 0F92  
                               l6356 0946                                 l6348 08EE  
                               l6436 0DC2                                 l6524 1542  
                               l6516 1532                                 l5638 1CF4  
                               l5590 23A4                                 l5582 238A  
                               l5558 1F56                                 l5902 2630  
                               l5654 232E                                 l5830 11EE  
                               l6278 1668                                 l6702 14A6  
                               l6390 1320                                 l6470 0E6A  
                               l6454 0DE8                                 l6462 0DF8  
                               l6518 1538                                 l6534 1552  
                               l6614 0A46                                 l6606 0A22  
                               l5808 1B72                                 l5568 1F88  
                               l5744 1FEC                                 l5656 2338  
                               l5664 2356                                 l5824 11C2  
                               l6704 14BE                                 l6288 07A2  
                               l6384 1314                                 l6368 12D6  
                               l6472 0E84                                 l6448 0DDE  
                               l6544 0BA8                                 l6632 0AAA  
                               l5682 1CAE                                 l5578 237E  
                               l5906 2646                                 l5746 1FF8  
                               l5658 2342                                 l5498 24F4  
                               l6298 07C6                                 l6378 12F8  
                               l6474 0E9E                                 l6466 0E36  
                               l6482 0EEC                                 l6538 15AE  
                               l6490 14EC                                 l6562 0C1A  
                               l6554 0BE2                                 l6626 0A7A  
                               l6618 0A58                                 l6802 2238  
                               l5676 1CA8                                 l5668 1C32  
                               l5684 1CB0                                 l5844 1228  
                               l5828 11EA                                 l6660 1408  
                               l6652 13E8                                 l6396 1330  
                               l6476 0EB8                                 l6468 0E50  
                               l6484 0F0A                                 l6628 0A7E  
                               l5692 284C                                 l5598 240C  
                               l5870 20E6                                 l6670 1426  
                               l6718 22AE                                 l6478 0ED2  
                               l6574 0C56                                 l6566 0C28  
                               l6590 0CDA                                 l5768 1BA0  
                               l5880 210A                                 l6680 1458  
                               l6664 1416                                 l6496 14FE  
                               l6648 0B42                                 l6760 17E2  
                               l5778 1C06                                 l5962 25A0  
                               l5970 10AE                                 l6690 147E  
                               l6498 1504                                 l6594 09B4  
                               l6770 1810                                 l6668 1422  
                               l6780 1880                                 l6764 17FA  
                               l5798 1B0C                                 l5894 2626  
                               l5958 2596                                 l5982 10DA  
                               l6678 1452                                 l6782 1898  
                               l6766 1804                                 l5888 2128  
                               l6696 1498                                 l6776 184A  
                               l6784 189A                                 l6768 1806  
                               l5994 10EC                                 STR_1 BFF5  
                               STR_2 BFD1                     ow_reset@presence 0010  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                         _DS3231_Write 28F2  
                               u4020 1C6A                                 u4031 1CA0  
                               u4124 1BE2                                 u4125 1BDE  
                               u5031 144A                                 u3610 283E  
                               u4164 1B4E                                 u4165 1B4A  
                               u4405 015C                                 u4406 0162  
                               u4415 065E                                 u4407 0168  
                               u4416 0664                                 u4505 0392  
                               u4425 0696                                 u4417 0672  
                               u4506 0398                                 u4426 069C  
                               u4507 039E                                 u4435 0222  
                               u4427 06AA                                 u4355 0064  
                               u5307 279E                                 u4540 04B6  
                               u4436 0228                                 u4356 006A  
                               u3804 2504                                 u4700 0F3E  
                               u4605 05CA                                 u4525 03C2  
                               u4445 02A0                                 u4437 022E  
                               u4365 009E                                 u4357 0078  
                               u5317 27AA                                 u3805 2500  
                               u3670 197A                                 u4606 05D0  
                               u4550 04E8                                 u4526 03C8  
                               u4446 02A6                                 u4366 00A4  
                               u5407 1B78                                 u4607 05DE  
                               u4527 03D0                                 u4447 02B4  
                               u4375 00C4                                 u4367 00AA  
                               u5327 254E                                 u3744 2810  
                               u4560 050E                                 u4376 00CA  
                               u3745 280C                                 u5417 1C0C  
                               u4545 04B2                                 u4385 010A  
                               u4377 00D0                                 u5337 2914  
                               u3754 2730                                 u4386 0110  
                               u3834 2544                                 u4650 16F0  
                               u5178 1884                                 u3755 272C  
                               u3675 1970                                 u4555 04DE  
                               u4475 02D6                                 u4395 013A  
                               u4387 011E                                 u5347 2920  
                               u3835 2540                                 u4580 0552  
                               u4476 02DC                                 u4396 0140  
                               _RCEN 007E2B                                 u4565 0504  
                               u4485 030C                                 u4477 02E2  
                               u4397 0146                                 u5357 2448  
                               u4486 0312                                 u4575 0528  
                               u4495 0348                                 u4487 0320  
                               u5367 2458                                 u5287 21F6  
                               u4576 052E                                 u4496 034E  
                               u4585 054E                                 u4577 0534  
                               u4497 0354                                 u5377 246C  
                               u5297 2520                                 u5387 2636  
                               u4595 0574                                 u4596 057A  
                               u5397 2110                                 u4597 0580  
                               _TMR0 000FD6                                 _RSEN 007E29  
                       _RTOS_SetTask 1CB8                         __CFG_PWRT$ON 000000  
                               _Font B9B6                      __end_of_Cmd7221 2864  
   __end_of_I2C_Master_RepeatedStart 2A48                                 _main 21F0  
                   __end_of_I2C_Init 2970                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0067  
                      write_byte@val 0012                      __end_of_TMRInit 28BA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E              __size_ofi2_RTOS_SetTask 0064  
                      __CFG_IESO$OFF 000000              __end_of_nrf24_write_reg 295A  
                    __end_of_FillBuf 1268                      __end_of_GetTime 28F2  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
             __end_of_decimal_to_bcd 276C                 RTOS_SetTask@taskFunc 000F  
                      _putchar_b_buf 1FA8                     __end_of_INT0_ISR 29AE  
                     _bmp280ReadTemp 26CE                     ?_I2C_Master_Read 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
             bmp280WriteByte@address 0012                                ?_main 0001  
                              _ACKEN 007E2C                                _ACKDT 007E2D  
                    __end_of___lbdiv 2594                                _EEADR 000FA9  
                    __end_of___lbmod 2792                __end_of_default_state 2A5A  
                    __end_of___lldiv 1FA8                                _T0CON 000FD5  
                    __end_of___llmod 20DE                      __end_of___lwdiv 23B8  
                    __end_of___lwmod 243E                                i2l240 1A5C  
                              i2l330 1D9A                                i2l333 1DAE  
                              i2l326 1D5C                                i2l328 1D84  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TMR3H 000FB3                                _TMR3L 000FB2  
                              _SPBRG 000FAF                                _PORTB 000F81  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                        __CFG_WRT0$OFF 000000  
                    __end_of_getDate 1E1E                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                 __end_of_clear_matrix 29E4  
                ___lmul@multiplicand 0013                                _TTime 00C4  
                              _FontS BFB0                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                      __end_of_getTime 218A  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     ?_bmp280Convert 003B                     __end_of_TMR0_ISR 2A24  
                   __end_of_TMR1_ISR 299A                        __CFG_WRTB$OFF 000000  
                   __end_of_TMR3_ISR 2882                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                                _pFont 0063  
                     __CFG_EBTRB$OFF 000000                                _fract B9A6  
                      pic_to_led@pic 0014                                _press 00CF  
                    __end_of_setDate 24F0                       write_byte@temp 0013  
                    __end_of_setTime 2624                       __pbitbssCOMRAM 0330  
                              pclath 000FFA                                tablat 000FF5  
       __end_of_interval_scroll_text 2650                                plusw1 000FE3  
                              plusw2 000FDB                                status 000FD8  
                    __end_of_sprintf 25BC                      ___lbdiv@divisor 000F  
                       __end_ofPL100 0BA0                         __end_ofPL110 16E8  
                       __end_ofPL102 15E2                         __end_ofPL120 219E  
                       __end_ofPL112 2194                         __end_ofPL104 213E  
                       __end_ofPL130 09B2                         __end_ofPL122 1D34  
                       __end_ofPL114 078C                         __end_ofPL106 1AF6  
                       __end_ofPL140 15EC                         __end_ofPL132 13DE  
                       __end_ofPL124 1B00                         __end_ofPL116 109A  
                       __end_ofPL108 1090                         __end_ofPL150 07A0  
                       __end_ofPL142 10A4                         __end_ofPL134 25C6  
                       __end_ofPL126 1E30                         __end_ofPL118 0796  
                       __end_ofPL160 1B06                         __end_ofPL152 13E6  
                       __end_ofPL144 1D3E                         __end_ofPL136 0F36  
                       __end_ofPL128 1E3A                         __end_ofPL162 0D82  
                       __end_ofPL154 0BA6                         __end_ofPL146 17D6  
                       __end_ofPL138 1E44                         __end_ofPL156 1998  
                       __end_ofPL148 12D4                         __end_ofPL158 10AC  
                 __size_of_RTOS_Init 0010                      ___lbdiv@counter 0011  
                 bmp280ReadInt32@lsb 002B                   bmp280ReadInt16@lsb 0019  
                 bmp280ReadInt32@msb 0027                   bmp280ReadInt16@msb 0017  
                    write_bit@bitval 000F                      __initialization 219E  
                       __end_of_Font BEB6                     __end_of_Init7221 25F6  
                       __end_of_main 223E               __end_of_bmp280ReadTemp 26F6  
                    _readTemp_Single 10AC                       ?_putchar_b_buf 0017  
                    ?_decimal_to_bcd 0001                   _bmp280Convert$3035 00E9  
        ?_INTERRUPT_InterruptManager 0001                       __CFG_OSC$HSPLL 000000  
              RTOS_SetTask@taskDelay 0011                      decimal_to_bcd@d 0019  
                             ??_main 0058                      _bmp280ReadInt32 18C0  
                    _bmp280ReadInt16 223E                        __activetblptr 000002  
                   ??_Send_Byte_7221 000F                        ?_init_ds18b20 0001  
                  ?_I2C_Master_Start 0001                    ?_I2C_Master_Write 0001  
                     _putchar_down_s 1B06                            ??_Cmd7221 0012  
                 ??_I2C_Master_Start 0010                   ??_I2C_Master_Write 0010  
                   ___llmod@dividend 0028                               _EEDATA 000FA8  
                             _EECON2 000FA7                            ??_TMRInit 000F  
               nrf24_init@pay_length 0013                               i2l1122 287A  
                             i2l5124 1A60                               i2l5134 1A88  
                             i2l5136 1A8A                            ??_FillBuf 0017  
                             _SPBRGH 000FB0                            ??_GetTime 0018  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                      setDate@daySet 001F                    DS3231_Write@value 001A  
                             _TSTime 0059                     ?_nrf24_write_reg 0011  
                     __CFG_XINST$OFF 000000             _I2C_Master_RepeatedStart 2A40  
                             _dFont1 BF7E                               _dFont2 BF4C  
                             _dFont3 BF1A                               _dFont4 BEE8  
                             _dFont5 BEB6                      Send_Byte_7221@i 0010  
                             ___lmul 22D6                    _RTOS_DispatchTask 17D6  
                    ?_bmp280ReadTemp 0033                               _dig_P1 00D3  
                             _dig_P2 0097                               _dig_P3 0095  
                             _dig_P4 0093                               _dig_P5 0091  
                             _dig_P6 008F                               _dig_P7 008D  
                             _dig_P8 008B                               _dig_T1 009D  
                             _dig_P9 0089                               _dig_T2 009B  
                             _dig_T3 0099                            ??___lbdiv 0010  
                     __CFG_STVREN$ON 000000                            ??___lbmod 0014  
                             _i_char 00A2                            ??___lldiv 0023  
                       ?_scroll_left 0001                            ??___llmod 0030  
                          ??___lwdiv 0013                     RTOS_DeleteTask@i 0017  
                       ?_scroll_text 0001                            ??___lwmod 001A  
                             _en_put 0330                               _pic7x8 B983  
                     pic_to_led@mask 0017                   ?_RTOS_DispatchTask 0001  
                             _events 0065                     __end_of_read_bit 292A  
                   __end_of_read_eep 29C0                               clear_0 21C2  
                             clear_1 21CE                               clear_2 21DC  
                          ??_getDate 0018                               _spi_rw 267C  
                          ??_getTime 0017                       ??_init_ds18b20 0015  
             __end_of_putchar_down_s 1B9A                      ??_bmp280Convert 003D  
                       ?_time_set_dt 0001                         ?_time_set_dy 0001  
                       ?_time_set_hr 0001                    __end_of_RTOS_Init 2A04  
                    _bmp280WriteByte 2882                         ?_time_set_mt 0001  
                       ?_time_set_yr 0001                         __pdataCOMRAM 0063  
                   __end_of_set_font 236E                            ?_I2C_Init 0001  
                 __size_of_Port_Init 001C                     __end_of_pixel_on 2822  
                ??_RTOS_DispatchTask 0050                            ??_setDate 001F  
                   __end_of_time_led 14C6                         __mediumconst B982  
                   __end_of_ow_reset 247A                            ??_setTime 001E  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                     __end_of_spi_init 29F4  
                   __end_of_pressure 0B52                            ??_sprintf 0013  
                   ___lbdiv@dividend 0010                    _SYSTEM_Initialize 23B8  
                    ___lbmod@divisor 0013                           __accesstop 0080  
            __end_of__initialization 21E2                      ___lbmod@counter 0015  
                          ?_INT0_ISR 0001                      __CFG_PBADEN$OFF 000000  
                 ?_SYSTEM_Initialize 0001                       i2_RTOS_SetTask 1A54  
                  nrf24_init@channel 0014                  bmp280ReadInt32@xlsb 002F  
                      ___rparam_used 000001              __end_of_readTemp_Single 11C0  
                   write_eep@address 0010                      _RTOS_DeleteTask 1C2E  
          __end_of_RTOS_DispatchTask 18A2                        __end_of_FontS BFD1  
                    ??_putchar_b_buf 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 001C              __end_of_bmp280ReadInt32 1990  
            __end_of_bmp280ReadInt16 228A                            ?_TMR0_ISR 0001  
                          ?_TMR1_ISR 0001                            ?_TMR3_ISR 0001  
                      __end_of_fract B9B6                          pic_to_led@i 001A  
                        pic_to_led@j 0019                          pic_to_led@x 0018  
                         __end_ofPL2 0F2C                           __end_ofPL4 09A8  
                         __end_ofPL6 1070                           __end_ofPL8 15CE  
                 _bmp280ReadPressure 26F6                     ___lbdiv@quotient 0012  
              __size_of_clear_matrix 0012                interval_scroll_text@i 0016  
               _interval_scroll_text 2624                      ?_putchar_down_s 0017  
                         ??_I2C_Init 000F                  ?_bmp280ReadPressure 0033  
                          ?_Init7221 0001            __end_of_SYSTEM_Initialize 2400  
                      ??_bmp280_Init 001B               RTOS_SetTask@taskPeriod 0013  
                         __pbssBANK0 0080                           __pbssBANK1 0100  
             __end_ofi2_RTOS_SetTask 1AB8                        ??_DS3231_Read 0012  
                         ??_INT0_ISR 000A                   __size_of_home_temp 0144  
                      ??_DS3231_init 001C                   __size_of_key_press 004C  
                 __size_of_init_uart 001A                   __size_of_read_byte 0038  
                  __end_of_Port_Init 28D6                 ??_bmp280ReadPressure 0037  
                       _clear_matrix 29D2                      bcd_to_decimal@d 0010  
                            ?___lmul 000F                           ??_TMR0_ISR 0001  
                         ??_TMR1_ISR 0001                           ??_TMR3_ISR 0001  
            __end_of_bmp280WriteByte 289E                      _Timer0Interrupt 00A3  
            i2RTOS_SetTask@taskDelay 0003                       ___lmul@product 0017  
              ?_interval_scroll_text 0001                              ?_spi_rw 0001  
                 __size_of_pixel_off 0028                __end_of_Update_Matrix 24B6  
                            _INTCON2 000FF1              __size_of_bcd_to_decimal 0016  
                            _Cmd7221 2846                           _nrf24_init 1EBC  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                         ??_Init7221 0014                          setTime@hSet 001E  
                        setTime@mSet 001C                              _SSPSTAT 000FC7  
                        setTime@sSet 001D                              _TMRInit 289E  
            __end_of_RTOS_DeleteTask 1CB8                       setDate@dateSet 001C  
                    ?i2_RTOS_SetTask 0001                              _FillBuf 11C0  
                            _GetTime 28D6                            ?_read_eep 000F  
                          ?_read_bit 0001                 __end_of_init_ds18b20 26CE  
                 __size_of_write_eep 0024                   __size_of_write_bit 0024  
                __end_of_bmp280_Init 1A54                     Update_Matrix@buf 0011  
                   ?_readTemp_Single 001B                     ??_decimal_to_bcd 0017  
                            __Hparam 0000           __size_of_RTOS_DispatchTask 00CC  
                            __Lparam 0000                            ?_set_font 0001  
                      ?_set_font_set 0001                            ?_pixel_on 000F  
                     setDate@yearSet 001E                            ?_time_led 0001  
                __end_of_DS3231_Read 267C                            ?_ow_reset 0001  
                          ?_spi_init 0001                            ?_pressure 0001  
                __end_of_DS3231_init 29D2                              ___lbdiv 2560  
                    __size_of___lmul 004C                              ___lbmod 276C  
                   ?_bmp280ReadInt32 0012                     ?_bmp280ReadInt16 0012  
                            ___lldiv 1F32                              ___llmod 207C  
                            ___lwdiv 236E                              ___lwmod 2400  
                            _i_bchar 0060                              __pcinit 219E  
                            _getDate 1DC2                              __ramtop 1000  
               __size_of_scroll_left 0054             readTemp_Single@time_flag 001C  
                            __ptext0 21F0                              __ptext1 23B8  
                            __ptext2 29E4                              __ptext3 2A48  
                            _getTime 213E                              __ptext4 29AE  
                            __ptext5 1EBC                              __ptext6 2944  
                            __ptext7 267C                              __ptext8 292A  
                            __ptext9 26A6                 __size_of_scroll_text 0066  
                    __size_of_spi_rw 002A                    __end_of_home_temp 0CEA  
           readTemp_Single@timer_val 001D                            _T1CONbits 000FCD  
            __size_of_Interrupt_Init 0006                           _pic_to_led 2012  
                          _T3CONbits 000FB1                    __end_of_key_press 22D6  
                  __end_of_init_uart 2944                              _setDate 24B6  
                  __end_of_read_byte 2560                              _setTime 25F6  
                            _scratch 0080             __size_of_I2C_Master_Read 0024  
           __size_of_I2C_Master_Wait 0010             __size_of_I2C_Master_Stop 0008  
               __size_of_time_set_dt 00EC                        putchar_down@i 003C  
               __size_of_time_set_dy 0194                        putchar_down@j 003B  
               __size_of_time_set_hr 0130                        putchar_down@k 003A  
                putchar_b_buf@symbol 0017                 __size_of_time_set_mt 01FC  
                      putchar_down@x 0039                 __size_of_time_set_yr 00F2  
         __size_of_SYSTEM_Initialize 0048                              _sprintf 2594  
                     __pintcode_body 1D3E                 end_of_initialization 21E2  
         ??_I2C_Master_RepeatedStart 0010                        ?_time_set_min 0001  
                       key_press@key 000F                        __Lmediumconst B982  
                            int_func 1D3E                           ??_read_eep 0011  
                         ??_read_bit 000F                    __end_of_pixel_off 2746  
                         _play_sound 00A1                     DS3231_Read@value 0013  
                   ??_bmp280ReadTemp 0037            __size_of_I2C_Master_Start 0008  
             __size_of_default_state 0006            __size_of_I2C_Master_Write 000C  
                 RTOS_DispatchTask@i 0057                   RTOS_DispatchTask@j 0056  
                    ___lldiv@divisor 001F                        RTOS_SetTask@i 0017  
                     ??_set_font_set 0020                      ___lldiv@counter 0027  
                         ??_set_font 000F                           ??_pixel_on 0010  
                         ??_time_led 0050                            _RCSTAbits 000FAB  
                         ??_ow_reset 000F                     scroll_left@speed 0018  
                            spi_rw@i 0010                     I2C_Master_Read@a 0010  
                            postdec2 000FDD                           ??_spi_init 000F  
                            postinc0 000FEE                              postinc2 000FDE  
                         ??_pressure 003D                         read_byte@val 0011  
             ??_interval_scroll_text 0015                     ?_bmp280WriteByte 0011  
                          _PORTCbits 000F82                            _PORTDbits 000F83  
                         _show_digit 0331                    bmp280Convert@var1 00F5  
                  bmp280Convert@var2 00ED                    __end_of_write_eep 27DA  
                  __end_of_write_bit 27B6                     ___lbmod@dividend 0014  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                  __size_of_I2C_Init 0016                          ?_nrf24_init 0013  
                          _RTOS_Init 29F4                  bmp280WriteByte@data 0011  
                        _bmp280_Init 1998                     ?_RTOS_DeleteTask 000F  
                     ??_time_set_min 0020                          ___lbmod@rem 0016  
                        _DS3231_Read 2650                           _sound_init 2A48  
                          _TXSTAbits 000FAC                          _DS3231_init 29C0  
                  __size_of_INT0_ISR 0014                          spi_rw@value 000F  
                     __end_of_dFont1 BFB0                       __end_of_dFont2 BF7E  
                     __end_of_dFont3 BF4C                       __end_of_dFont4 BF1A  
                     __end_of_dFont5 BEE8                     ??_putchar_down_s 0018  
                     __end_of___lmul 2322                          _BAUDCONbits 000FB8  
                      __pidataCOMRAM 2A5A                           _write_byte 24F0  
           __size_of_nrf24_write_reg 0016                    __size_of_TMR0_ISR 0010  
                  __size_of_TMR1_ISR 0014                    __size_of_TMR3_ISR 001E  
                     __end_of_pic7x8 B9A6                       __end_of_spi_rw 26A6  
                      _default_state 2A54                          ?_pic_to_led 0014  
                        __end_ofPL10 14D4                          __end_ofPL20 0CF6  
                        __end_ofPL12 06BC                          __end_ofPL30 107C  
                        __end_ofPL22 18B2                          __end_ofPL14 128E  
                        __end_ofPL40 06DA                          __end_ofPL32 1AEC  
                        __end_ofPL24 12B2                          __end_ofPL16 13D4  
                        __end_ofPL50 06EC                          __end_ofPL42 0D00  
                        __end_ofPL34 18C0                          __end_ofPL26 1AC8  
                        __end_ofPL18 14E0                          __end_ofPL60 0734  
                        __end_ofPL52 06FE                          __end_ofPL44 15D8  
                        __end_ofPL36 06C8                          __end_ofPL28 1ADC  
                        __end_ofPL70 1EBC                          __end_ofPL62 0B94  
                        __end_ofPL54 0B6E                          __end_ofPL46 12CA  
                        __end_ofPL38 12BE                          __end_ofPL80 0D30  
                        __end_ofPL72 0752                          __end_ofPL64 0D12  
                        __end_ofPL56 071A                          __end_ofPL48 0D08  
                        __end_ofPL90 0D72                          __end_ofPL82 0D40  
                        __end_ofPL74 0764                          __end_ofPL66 0740  
                        __end_ofPL58 0B7A                          __end_ofPL92 0D7C  
                        __end_ofPL84 0D50                          __end_ofPL76 0776  
                        __end_ofPL68 0D20                          __end_ofPL94 14EA  
                        __end_ofPL86 0D5E                          __end_ofPL78 1086  
                        __end_ofPL96 1E26                          __end_ofPL88 0D68  
                        __end_ofPL98 0782                  start_initialization 219E  
                     _bcd_to_decimal 2970                __end_of_bmp280Convert 0648  
                         ?_RTOS_Init 0001                        ?_putchar_down 0031  
                      ?_DS3231_Write 001A                __size_of_init_ds18b20 0028  
                      ?_RTOS_SetTask 000F                    __size_of_Init7221 0030  
            __size_of_Send_Byte_7221 0024                    ??_I2C_Master_Read 0010  
                  ??_I2C_Master_Wait 000F                    ??_I2C_Master_Stop 0010  
                    ___llmod@divisor 002C                            _TaskArray 0100  
                    ___llmod@counter 0030                        clear_matrix@i 000F  
                           ??___lmul 0017                            _Port_Init 28BA  
              __end_of_putchar_b_buf 2012                  __size_of_nrf24_init 0076  
                   __CFG_LPT1OSC$OFF 000000                      read_eep@address 000F  
                           ??_spi_rw 000F                           read_byte@i 0012  
                     ?_default_state 0001               __end_of_bcd_to_decimal 2986  
                     _Interrupt_Init 2A4E                         _init_ds18b20 26A6  
                        __pbssCOMRAM 0059                        __pcstackBANK0 00D9  
               __end_of_set_font_set 15BA                     ??i2_RTOS_SetTask 0007  
                     ??_putchar_down 0034            RTOS_DispatchTask@function 0054  
                           ?_Cmd7221 0011                       ??_DS3231_Write 001B  
                     ??_RTOS_SetTask 0015                             ?_TMRInit 0001  
               readTemp_Single@fptmp 0020                             ?_FillBuf 0001  
                           ?_GetTime 0001                          ?_sound_init 0001  
                   _I2C_Master_Start 2A38                     _I2C_Master_Write 2A24  
                  __size_of_read_bit 001C                    __size_of_read_eep 0012  
                   ___lwdiv@dividend 000F                  __size_of_pic_to_led 006A  
        __size_of_bmp280ReadPressure 0028                    __CFG_CCP2MX$PORTC 000000  
                          __pintcode 0008                        __pmediumconst B982  
                           ?___lbdiv 000F               i2RTOS_SetTask@taskFunc 0001  
                           ?___lbmod 0013                             ?___lldiv 001B  
                         ?_Port_Init 0001                             ?___llmod 0028  
                  __size_of_set_font 004C                             ?___lwdiv 000F  
                           ?___lwmod 0016                    __size_of_pixel_on 0024  
                           Cmd7221@i 0013                    __size_of_time_led 00E0  
                  __size_of_ow_reset 003C                    __size_of_spi_init 0010  
                        ?_write_byte 0001                    __size_of_pressure 01A0  
             __end_of_Interrupt_Init 2A54                             ?_getDate 0014  
       ??_INTERRUPT_InterruptManager 000A                            _arrayTail 0061  
               __end_of_time_set_min 17CC                       bmp280Convert@P 00F1  
                     bmp280Convert@T 00DD                             ?_getTime 0014  
                    ?_bcd_to_decimal 0001                             _I2C_Init 295A  
                           ?_setDate 001C                             ?_setTime 001C  
           i2RTOS_SetTask@taskPeriod 0005                    ??_nrf24_write_reg 0012  
                          _home_temp 0BA6                          ??_RTOS_Init 000F  
                   ___lwdiv@quotient 0014                             ?_sprintf 000F  
                          _key_press 228A                            _init_uart 292A  
                          _read_byte 2528                           Cmd7221@adr 0012  
                         Cmd7221@val 0011                      putchar_b_buf@pF 0018  
                           _INT0_ISR 299A                             _LATCbits 000F8B  
                           _LATDbits 000F8C                            getDate@p1 0017  
                          getDate@p2 0016                            getDate@p3 0015  
                          getDate@p4 0014                             _PIE1bits 000F9D  
                           _PIE2bits 000FA0                           pixel_off@x 0013  
                         pixel_off@y 000F                     readTemp_Single@i 0022  
             __size_of_Update_Matrix 003C  __size_of_INTERRUPT_InterruptManager 1DBA  
                           _PIR1bits 000F9E                             _PIR2bits 000FA1  
                           FillBuf@i 0019                            _pixel_off 271E  
                   __CFG_WDTPS$32768 000000                            _time_flag 00D7  
                      ??_scroll_left 0015                             _TMR0_ISR 2A14  
                           _TMR1_ISR 2986                             _TMR3_ISR 2864  
                      ??_scroll_text 000F                            getTime@p1 0016  
                          getTime@p2 0015                            getTime@p3 0014  
                          _timer_val 00D8                  DS3231_Write@address 001B  
                    putchar_down_s@i 0020                      putchar_down_s@j 001F  
                    putchar_down_s@k 001E                      putchar_down_s@x 001D  
           __size_of_readTemp_Single 0114                      ??_default_state 000F  
                    ?_Interrupt_Init 0001                   nrf24_write_reg@reg 0012  
                      ??_time_set_dt 0020                        ??_time_set_dy 0020  
                      ??_time_set_hr 0020                        ??_time_set_mt 0020  
                      ??_time_set_yr 0020                  __size_of_sound_init 0006  
           __size_of_bmp280ReadInt32 00D0             __size_of_bmp280ReadInt16 004C  
                        write_byte@i 0014                             _Dis_Buff 00A4  
                         ?_home_temp 0001                         ??_nrf24_init 0014  
                I2C_Master_Read@temp 0011                             _Init7221 25C6  
                         ?_key_press 0001                            _write_eep 27B6  
                          _write_bit 2792                           ?_init_uart 0001  
                  ___lmul@multiplier 000F                          _INTCON2bits 000FF1  
                   __size_of_Cmd7221 001E                           ?_read_byte 0001  
                          _type_font 0062                         ?_bmp280_Init 0001  
                     _Send_Byte_7221 27DA                     __size_of_TMRInit 001C  
                       ?_DS3231_Read 0001                  __size_of_write_byte 0038  
                  Update_Matrix@data 0012                     __size_of_FillBuf 00A8  
                   __size_of_GetTime 001C                         ?_DS3231_init 0001  
                         _EECON1bits 000FA6                          _count_sound 009F  
                           __Hrparam 0000                      setDate@monthSet 001D  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                         ?_pixel_off 000F                 __end_of_putchar_down 1C2E  
                 DS3231_Read@address 0012                          ??_Port_Init 000F  
                  Send_Byte_7221@dat 000F                       key_press@count 00A0  
               __end_of_DS3231_Write 290E    __size_of_I2C_Master_RepeatedStart 0008  
                   __size_of___lbdiv 0034                     __size_of___lbmod 0026  
                 __end_of_nrf24_init 1F32            ?_I2C_Master_RepeatedStart 0001  
               __end_of_RTOS_SetTask 1D2A                     __size_of___lldiv 0076  
                   __size_of___llmod 0062                     __size_of___lwdiv 004A  
                   __size_of___lwmod 003E                __size_of_set_font_set 00D0  
      __size_of_interval_scroll_text 002C              __size_of_decimal_to_bcd 0026  
                   __size_of_getDate 005C                     __size_of_getTime 004C  
                __end_of_scroll_left 2132                  readTemp_Single@temp 0023  
                       ??_pic_to_led 0015                  __end_of_scroll_text 1EAA  
                      _Update_Matrix 247A                      _I2C_Master_Read 2822  
                    _I2C_Master_Wait 2A04                      _I2C_Master_Stop 2A30  
           __size_of_bmp280WriteByte 001C                      ___lwdiv@divisor 0011  
                   __size_of_setDate 003A                      ___lwdiv@counter 0013  
                   __size_of_setTime 002E                             __ptext10 1998  
                           __ptext11 2882                             __ptext20 29C0  
                           __ptext12 223E                             __ptext21 17D6  
                           __ptext13 289E                             __ptext30 2A54  
                           __ptext22 09B2                             __ptext14 29F4  
                           __ptext31 0F36                             __ptext23 0BA6  
                           __ptext15 28BA                             __ptext40 24F0  
                           __ptext32 228A                             __ptext24 16E8  
                           __ptext16 2A4E                             __ptext41 2792  
                           __ptext33 13E6                             __ptext25 28D6  
                           __ptext17 25C6                             __ptext50 11C0  
                           __ptext42 2528                             __ptext34 15EC  
                           __ptext26 14EA                             __ptext18 2846  
                           __ptext51 27B6                             __ptext43 290E  
                           __ptext35 25F6                             __ptext27 0D82  
                           __ptext19 295A                             __ptext60 1B06  
                           __ptext52 2322                             __ptext44 243E  
                           __ptext36 24B6                             __ptext28 12D4  
                           __ptext61 1B9A                             __ptext53 1FA8  
                           __ptext45 0012                             __ptext37 2746  
                           __ptext29 07A0                             __ptext70 276C  
                           __ptext62 247A                             __ptext54 2594  
                           __ptext46 26CE                             __ptext38 28F2  
                           __ptext71 2560                             __ptext63 27DA  
                           __ptext55 2624                             __ptext47 26F6  
                           __ptext39 10AC                             __ptext80 2A38  
                           __ptext72 1CB8                             __ptext64 2012  
                           __ptext56 1E44                             __ptext48 18C0  
                           __ptext81 2A40                             __ptext73 1C2E  
                           __ptext65 27FE                             __ptext57 207C  
                           __ptext49 22D6                             __ptext90 0000  
                           __ptext82 2822                             __ptext74 213E  
                           __ptext66 271E                             __ptext58 1F32  
                           __ptext83 2A04                             __ptext75 1DC2  
                           __ptext67 29D2                             __ptext59 20DE  
                           __ptext76 2970                             __ptext68 2400  
                           __ptext85 2864                             __ptext77 2650  
                           __ptext69 236E                             __ptext86 2986  
                           __ptext78 2A24                             __ptext87 2A14  
                           __ptext79 2A30                             __ptext88 299A  
                           __ptext89 1A54               __end_of_Send_Byte_7221 27FE  
                         ?_write_eep 000F                           ?_write_bit 0001  
                __end_of_time_set_dt 13C0                  __end_of_time_set_dy 0F16  
                __end_of_time_set_hr 1066                  __end_of_time_set_mt 099C  
                __end_of_time_set_yr 16DE                     __size_of_sprintf 0028  
                     Update_Matrix@i 0014                       Update_Matrix@j 0013  
                      __size_of_main 004E                             _read_bit 290E  
                           _read_eep 29AE                    putchar_b_buf@mask 001C  
                     putchar_b_buf@i 001F                       putchar_b_buf@j 001E  
                     putchar_b_buf@x 001D              RTOS_DeleteTask@taskFunc 000F  
                          pixel_on@x 0012                            pixel_on@y 000F  
                      ?_clear_matrix 0001                             _set_font 2322  
           __size_of_RTOS_DeleteTask 008A                             _pixel_on 27FE  
                       _set_font_set 14EA                   __end_of_pic_to_led 207C  
                           _time_led 13E6                 putchar_down_s@symbol 0017  
                     putchar_down@pF 0032                             _ow_reset 243E  
              __size_of_time_set_min 00E4                             _spi_init 29E4  
                           int$flags 0067                             _pressure 09B2  
                           _text_buf 0178   __end_of_INTERRUPT_InterruptManager 1DC2  
         _INTERRUPT_InterruptManager 0008                      i2RTOS_SetTask@i 0009  
            __size_of_bmp280ReadTemp 0028                       ?_Update_Matrix 0011  
           __end_of_I2C_Master_Start 2A40             __end_of_I2C_Master_Write 2A30  
                         _INTCONbits 000FF2                    ??_readTemp_Single 001E  
                        ??_home_temp 003D                         _temperbmp280 00CB  
                       scroll_left@i 0019                         scroll_left@j 0016  
                       scroll_left@k 0017                      ?_Send_Byte_7221 0001  
                        ??_key_press 000F                          ??_init_uart 000F  
                        ??_read_byte 000F                         scroll_text@i 0011  
                  ??_bmp280ReadInt32 0016                    ??_bmp280ReadInt16 0014  
                 readTemp_Single@buf 001B                             intlevel2 0000  
                 readTemp_Single@tmp 0021                            sprintf@sp 000F  
                   ___lwmod@dividend 0016                     ___lldiv@dividend 001B  
                       ??_sound_init 000F                         _time_set_min 16E8  
                     ??_clear_matrix 000F                          ??_pixel_off 0010  
             __size_of_bmp280Convert 0636                     ??_bcd_to_decimal 000F  
                        _scroll_left 20DE                          _scroll_text 1E44  
                    _nrf24_write_reg 2944              __end_of_I2C_Master_Read 2846  
            __end_of_I2C_Master_Wait 2A14              __end_of_I2C_Master_Stop 2A38  
                 putchar_down@symbol 0031                         ??_write_byte 0010  
                        _temperature 00D5                             sprintf@c 0013  
                           sprintf@f 0011                  bmp280Convert@t_fine 00E1  
                bmp280Convert@temper 003C                          _time_set_dt 12D4  
                   ___lldiv@quotient 0023                          _time_set_dy 0D82  
                        _time_set_hr 0F36                    I2C_Master_Write@d 0010  
                        _time_set_mt 07A0                      ___lwmod@divisor 0018  
                        _time_set_yr 15EC                   __end_of_sound_init 2A4E  
                    ___lwmod@counter 001A              __size_of_putchar_down_s 0094  
                 bmp280Convert@adc_P 00D9                   bmp280Convert@adc_T 00E5  
                        ??_write_eep 0010                          ??_write_bit 000F  
                 bmp280Convert@press 003B               __size_of_putchar_b_buf 006A  
                  ??_bmp280WriteByte 0012                 __size_of_bmp280_Init 00BC  
         __end_of_bmp280ReadPressure 271E                   __end_of_write_byte 2528  
              __size_of_putchar_down 0094                __size_of_DS3231_Write 001C  
               __size_of_DS3231_Read 002C                __size_of_RTOS_SetTask 0072  
               __size_of_DS3231_init 0012  
