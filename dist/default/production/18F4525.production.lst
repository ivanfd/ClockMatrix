

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Tue Feb 21 16:58:59 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18F4525
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	pa_nodes0,global,class=CODE,delta=1
    76  0000                     
    77                           ; Version 1.41
    78                           ; Generated 25/01/2017 GMT
    79                           ; 
    80                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F4525 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     tosu	equ	0xFFF
   112                           tosh	equ	0xFFE
   113                           tosl	equ	0xFFD
   114                           pclath	equ	0xFFA
   115                           tblptru	equ	0xFF8
   116                           tblptrh	equ	0xFF7
   117                           tblptrl	equ	0xFF6
   118                           tablat	equ	0xFF5
   119                           prodh	equ	0xFF4
   120                           prodl	equ	0xFF3
   121                           intcon	equ	0xFF2
   122                           intcon2	equ	0xFF1
   123                           wreg	equ	0xFE8
   124                           indf1	equ	0xFE7
   125                           plusw1	equ	0xFE3
   126                           fsr1h	equ	0xFE2
   127                           fsr1l	equ	0xFE1
   128                           indf2	equ	0xFDF
   129                           postinc2	equ	0xFDE
   130                           postdec2	equ	0xFDD
   131                           plusw2	equ	0xFDB
   132                           fsr2h	equ	0xFDA
   133                           fsr2l	equ	0xFD9
   134                           status	equ	0xFD8
   135                           
   136                           	psect	idataCOMRAM
   137  00138A                     __pidataCOMRAM:
   138                           	opt stack 0
   139                           
   140                           ;initializer for _events
   141  00138A  05                 	db	5
   142                           tosu	equ	0xFFF
   143                           tosh	equ	0xFFE
   144                           tosl	equ	0xFFD
   145                           pclath	equ	0xFFA
   146                           tblptru	equ	0xFF8
   147                           tblptrh	equ	0xFF7
   148                           tblptrl	equ	0xFF6
   149                           tablat	equ	0xFF5
   150                           prodh	equ	0xFF4
   151                           prodl	equ	0xFF3
   152                           intcon	equ	0xFF2
   153                           intcon2	equ	0xFF1
   154                           wreg	equ	0xFE8
   155                           indf1	equ	0xFE7
   156                           plusw1	equ	0xFE3
   157                           fsr1h	equ	0xFE2
   158                           fsr1l	equ	0xFE1
   159                           indf2	equ	0xFDF
   160                           postinc2	equ	0xFDE
   161                           postdec2	equ	0xFDD
   162                           plusw2	equ	0xFDB
   163                           fsr2h	equ	0xFDA
   164                           fsr2l	equ	0xFD9
   165                           status	equ	0xFD8
   166                           
   167                           	psect	mediumconst
   168  00BAAA                     __pmediumconst:
   169                           	opt stack 0
   170  00BAAA  00                 	db	0
   171  00BAAB                     _pic7x8:
   172                           	opt stack 0
   173  00BAAB  00                 	db	0
   174  00BAAC  00                 	db	0
   175  00BAAD  00                 	db	0
   176  00BAAE  00                 	db	0
   177  00BAAF  00                 	db	0
   178  00BAB0  00                 	db	0
   179  00BAB1  00                 	db	0
   180  00BAB2  08                 	db	8
   181  00BAB3  7C                 	db	124
   182  00BAB4  4E                 	db	78
   183  00BAB5  4F                 	db	79
   184  00BAB6  4E                 	db	78
   185  00BAB7  7C                 	db	124
   186  00BAB8  08                 	db	8
   187  00BAB9  04                 	db	4
   188  00BABA  26                 	db	38
   189  00BABB  47                 	db	71
   190  00BABC  3F                 	db	63
   191  00BABD  07                 	db	7
   192  00BABE  06                 	db	6
   193  00BABF  04                 	db	4
   194  00BAC0  20                 	db	32
   195  00BAC1  3E                 	db	62
   196  00BAC2  7F                 	db	127
   197  00BAC3  7F                 	db	127
   198  00BAC4  3F                 	db	63
   199  00BAC5  3E                 	db	62
   200  00BAC6  20                 	db	32
   201  00BAC7                     __end_of_pic7x8:
   202                           	opt stack 0
   203  00BAC7                     _Font:
   204                           	opt stack 0
   205  00BAC7  00                 	db	0
   206  00BAC8  00                 	db	0
   207  00BAC9  00                 	db	0
   208  00BACA  00                 	db	0
   209  00BACB  00                 	db	0
   210  00BACC  45                 	db	69
   211  00BACD  51                 	db	81
   212  00BACE  45                 	db	69
   213  00BACF  3E                 	db	62
   214  00BAD0  00                 	db	0
   215  00BAD1  6B                 	db	107
   216  00BAD2  6F                 	db	111
   217  00BAD3  6B                 	db	107
   218  00BAD4  3E                 	db	62
   219  00BAD5  00                 	db	0
   220  00BAD6  3E                 	db	62
   221  00BAD7  7C                 	db	124
   222  00BAD8  3E                 	db	62
   223  00BAD9  1C                 	db	28
   224  00BADA  00                 	db	0
   225  00BADB  3C                 	db	60
   226  00BADC  7E                 	db	126
   227  00BADD  3C                 	db	60
   228  00BADE  18                 	db	24
   229  00BADF  00                 	db	0
   230  00BAE0  36                 	db	54
   231  00BAE1  7F                 	db	127
   232  00BAE2  36                 	db	54
   233  00BAE3  30                 	db	48
   234  00BAE4  00                 	db	0
   235  00BAE5  00                 	db	0
   236  00BAE6  00                 	db	0
   237  00BAE7  00                 	db	0
   238  00BAE8  00                 	db	0
   239  00BAE9  00                 	db	0
   240  00BAEA  00                 	db	0
   241  00BAEB  00                 	db	0
   242  00BAEC  00                 	db	0
   243  00BAED  00                 	db	0
   244  00BAEE  00                 	db	0
   245  00BAEF  00                 	db	0
   246  00BAF0  00                 	db	0
   247  00BAF1  00                 	db	0
   248  00BAF2  00                 	db	0
   249  00BAF3  00                 	db	0
   250  00BAF4  00                 	db	0
   251  00BAF5  00                 	db	0
   252  00BAF6  00                 	db	0
   253  00BAF7  00                 	db	0
   254  00BAF8  00                 	db	0
   255  00BAF9  00                 	db	0
   256  00BAFA  00                 	db	0
   257  00BAFB  00                 	db	0
   258  00BAFC  00                 	db	0
   259  00BAFD  00                 	db	0
   260  00BAFE  00                 	db	0
   261  00BAFF  00                 	db	0
   262  00BB00  00                 	db	0
   263  00BB01  00                 	db	0
   264  00BB02  00                 	db	0
   265  00BB03  00                 	db	0
   266  00BB04  00                 	db	0
   267  00BB05  00                 	db	0
   268  00BB06  00                 	db	0
   269  00BB07  00                 	db	0
   270  00BB08  00                 	db	0
   271  00BB09  00                 	db	0
   272  00BB0A  00                 	db	0
   273  00BB0B  00                 	db	0
   274  00BB0C  00                 	db	0
   275  00BB0D  00                 	db	0
   276  00BB0E  00                 	db	0
   277  00BB0F  00                 	db	0
   278  00BB10  00                 	db	0
   279  00BB11  00                 	db	0
   280  00BB12  00                 	db	0
   281  00BB13  00                 	db	0
   282  00BB14  00                 	db	0
   283  00BB15  00                 	db	0
   284  00BB16  00                 	db	0
   285  00BB17  00                 	db	0
   286  00BB18  00                 	db	0
   287  00BB19  00                 	db	0
   288  00BB1A  00                 	db	0
   289  00BB1B  00                 	db	0
   290  00BB1C  00                 	db	0
   291  00BB1D  00                 	db	0
   292  00BB1E  00                 	db	0
   293  00BB1F  00                 	db	0
   294  00BB20  00                 	db	0
   295  00BB21  00                 	db	0
   296  00BB22  00                 	db	0
   297  00BB23  00                 	db	0
   298  00BB24  00                 	db	0
   299  00BB25  00                 	db	0
   300  00BB26  00                 	db	0
   301  00BB27  00                 	db	0
   302  00BB28  00                 	db	0
   303  00BB29  00                 	db	0
   304  00BB2A  00                 	db	0
   305  00BB2B  00                 	db	0
   306  00BB2C  00                 	db	0
   307  00BB2D  00                 	db	0
   308  00BB2E  00                 	db	0
   309  00BB2F  00                 	db	0
   310  00BB30  00                 	db	0
   311  00BB31  00                 	db	0
   312  00BB32  00                 	db	0
   313  00BB33  00                 	db	0
   314  00BB34  00                 	db	0
   315  00BB35  00                 	db	0
   316  00BB36  00                 	db	0
   317  00BB37  00                 	db	0
   318  00BB38  00                 	db	0
   319  00BB39  00                 	db	0
   320  00BB3A  00                 	db	0
   321  00BB3B  00                 	db	0
   322  00BB3C  00                 	db	0
   323  00BB3D  00                 	db	0
   324  00BB3E  00                 	db	0
   325  00BB3F  7C                 	db	124
   326  00BB40  4E                 	db	78
   327  00BB41  4E                 	db	78
   328  00BB42  7C                 	db	124
   329  00BB43  08                 	db	8
   330  00BB44  20                 	db	32
   331  00BB45  34                 	db	52
   332  00BB46  7E                 	db	126
   333  00BB47  34                 	db	52
   334  00BB48  20                 	db	32
   335  00BB49  00                 	db	0
   336  00BB4A  00                 	db	0
   337  00BB4B  36                 	db	54
   338  00BB4C  36                 	db	54
   339  00BB4D  00                 	db	0
   340  00BB4E  00                 	db	0
   341  00BB4F  00                 	db	0
   342  00BB50  00                 	db	0
   343  00BB51  00                 	db	0
   344  00BB52  00                 	db	0
   345  00BB53  00                 	db	0
   346  00BB54  00                 	db	0
   347  00BB55  00                 	db	0
   348  00BB56  00                 	db	0
   349  00BB57  00                 	db	0
   350  00BB58  00                 	db	0
   351  00BB59  00                 	db	0
   352  00BB5A  00                 	db	0
   353  00BB5B  00                 	db	0
   354  00BB5C  00                 	db	0
   355  00BB5D  00                 	db	0
   356  00BB5E  00                 	db	0
   357  00BB5F  00                 	db	0
   358  00BB60  00                 	db	0
   359  00BB61  00                 	db	0
   360  00BB62  00                 	db	0
   361  00BB63  00                 	db	0
   362  00BB64  00                 	db	0
   363  00BB65  00                 	db	0
   364  00BB66  00                 	db	0
   365  00BB67  00                 	db	0
   366  00BB68  00                 	db	0
   367  00BB69  00                 	db	0
   368  00BB6A  00                 	db	0
   369  00BB6B  00                 	db	0
   370  00BB6C  00                 	db	0
   371  00BB6D  00                 	db	0
   372  00BB6E  5F                 	db	95
   373  00BB6F  00                 	db	0
   374  00BB70  00                 	db	0
   375  00BB71  00                 	db	0
   376  00BB72  07                 	db	7
   377  00BB73  00                 	db	0
   378  00BB74  07                 	db	7
   379  00BB75  00                 	db	0
   380  00BB76  14                 	db	20
   381  00BB77  7F                 	db	127
   382  00BB78  14                 	db	20
   383  00BB79  7F                 	db	127
   384  00BB7A  14                 	db	20
   385  00BB7B  24                 	db	36
   386  00BB7C  2A                 	db	42
   387  00BB7D  7F                 	db	127
   388  00BB7E  2A                 	db	42
   389  00BB7F  12                 	db	18
   390  00BB80  23                 	db	35
   391  00BB81  13                 	db	19
   392  00BB82  08                 	db	8
   393  00BB83  64                 	db	100
   394  00BB84  62                 	db	98
   395  00BB85  36                 	db	54
   396  00BB86  49                 	db	73
   397  00BB87  56                 	db	86
   398  00BB88  20                 	db	32
   399  00BB89  50                 	db	80
   400  00BB8A  00                 	db	0
   401  00BB8B  08                 	db	8
   402  00BB8C  07                 	db	7
   403  00BB8D  03                 	db	3
   404  00BB8E  00                 	db	0
   405  00BB8F  00                 	db	0
   406  00BB90  1C                 	db	28
   407  00BB91  22                 	db	34
   408  00BB92  41                 	db	65
   409  00BB93  00                 	db	0
   410  00BB94  00                 	db	0
   411  00BB95  41                 	db	65
   412  00BB96  22                 	db	34
   413  00BB97  1C                 	db	28
   414  00BB98  00                 	db	0
   415  00BB99  2A                 	db	42
   416  00BB9A  1C                 	db	28
   417  00BB9B  7F                 	db	127
   418  00BB9C  1C                 	db	28
   419  00BB9D  2A                 	db	42
   420  00BB9E  08                 	db	8
   421  00BB9F  08                 	db	8
   422  00BBA0  3E                 	db	62
   423  00BBA1  08                 	db	8
   424  00BBA2  08                 	db	8
   425  00BBA3  00                 	db	0
   426  00BBA4  80                 	db	128
   427  00BBA5  70                 	db	112
   428  00BBA6  30                 	db	48
   429  00BBA7  00                 	db	0
   430  00BBA8  08                 	db	8
   431  00BBA9  08                 	db	8
   432  00BBAA  08                 	db	8
   433  00BBAB  08                 	db	8
   434  00BBAC  08                 	db	8
   435  00BBAD  60                 	db	96
   436  00BBAE  60                 	db	96
   437  00BBAF  00                 	db	0
   438  00BBB0  00                 	db	0
   439  00BBB1  00                 	db	0
   440  00BBB2  20                 	db	32
   441  00BBB3  10                 	db	16
   442  00BBB4  08                 	db	8
   443  00BBB5  04                 	db	4
   444  00BBB6  02                 	db	2
   445  00BBB7  7F                 	db	127
   446  00BBB8  7F                 	db	127
   447  00BBB9  41                 	db	65
   448  00BBBA  7F                 	db	127
   449  00BBBB  7F                 	db	127
   450  00BBBC  00                 	db	0
   451  00BBBD  01                 	db	1
   452  00BBBE  7F                 	db	127
   453  00BBBF  7F                 	db	127
   454  00BBC0  00                 	db	0
   455  00BBC1  63                 	db	99
   456  00BBC2  73                 	db	115
   457  00BBC3  59                 	db	89
   458  00BBC4  4F                 	db	79
   459  00BBC5  47                 	db	71
   460  00BBC6  63                 	db	99
   461  00BBC7  63                 	db	99
   462  00BBC8  49                 	db	73
   463  00BBC9  7F                 	db	127
   464  00BBCA  77                 	db	119
   465  00BBCB  1F                 	db	31
   466  00BBCC  1F                 	db	31
   467  00BBCD  10                 	db	16
   468  00BBCE  7F                 	db	127
   469  00BBCF  7F                 	db	127
   470  00BBD0  6F                 	db	111
   471  00BBD1  6F                 	db	111
   472  00BBD2  49                 	db	73
   473  00BBD3  79                 	db	121
   474  00BBD4  79                 	db	121
   475  00BBD5  7F                 	db	127
   476  00BBD6  7F                 	db	127
   477  00BBD7  49                 	db	73
   478  00BBD8  7B                 	db	123
   479  00BBD9  7B                 	db	123
   480  00BBDA  03                 	db	3
   481  00BBDB  73                 	db	115
   482  00BBDC  79                 	db	121
   483  00BBDD  0F                 	db	15
   484  00BBDE  07                 	db	7
   485  00BBDF  77                 	db	119
   486  00BBE0  7F                 	db	127
   487  00BBE1  49                 	db	73
   488  00BBE2  7F                 	db	127
   489  00BBE3  77                 	db	119
   490  00BBE4  6F                 	db	111
   491  00BBE5  6F                 	db	111
   492  00BBE6  49                 	db	73
   493  00BBE7  7F                 	db	127
   494  00BBE8  7F                 	db	127
   495  00BBE9  00                 	db	0
   496  00BBEA  00                 	db	0
   497  00BBEB  36                 	db	54
   498  00BBEC  36                 	db	54
   499  00BBED  00                 	db	0
   500  00BBEE  00                 	db	0
   501  00BBEF  40                 	db	64
   502  00BBF0  34                 	db	52
   503  00BBF1  00                 	db	0
   504  00BBF2  00                 	db	0
   505  00BBF3  00                 	db	0
   506  00BBF4  08                 	db	8
   507  00BBF5  14                 	db	20
   508  00BBF6  22                 	db	34
   509  00BBF7  41                 	db	65
   510  00BBF8  14                 	db	20
   511  00BBF9  14                 	db	20
   512  00BBFA  14                 	db	20
   513  00BBFB  14                 	db	20
   514  00BBFC  14                 	db	20
   515  00BBFD  00                 	db	0
   516  00BBFE  41                 	db	65
   517  00BBFF  22                 	db	34
   518  00BC00  14                 	db	20
   519  00BC01  08                 	db	8
   520  00BC02  02                 	db	2
   521  00BC03  01                 	db	1
   522  00BC04  59                 	db	89
   523  00BC05  09                 	db	9
   524  00BC06  06                 	db	6
   525  00BC07  3E                 	db	62
   526  00BC08  41                 	db	65
   527  00BC09  5D                 	db	93
   528  00BC0A  59                 	db	89
   529  00BC0B  4E                 	db	78
   530  00BC0C  7C                 	db	124
   531  00BC0D  12                 	db	18
   532  00BC0E  11                 	db	17
   533  00BC0F  12                 	db	18
   534  00BC10  7C                 	db	124
   535  00BC11  7F                 	db	127
   536  00BC12  49                 	db	73
   537  00BC13  49                 	db	73
   538  00BC14  49                 	db	73
   539  00BC15  36                 	db	54
   540  00BC16  3E                 	db	62
   541  00BC17  41                 	db	65
   542  00BC18  41                 	db	65
   543  00BC19  41                 	db	65
   544  00BC1A  22                 	db	34
   545  00BC1B  7F                 	db	127
   546  00BC1C  41                 	db	65
   547  00BC1D  41                 	db	65
   548  00BC1E  41                 	db	65
   549  00BC1F  3E                 	db	62
   550  00BC20  7F                 	db	127
   551  00BC21  49                 	db	73
   552  00BC22  49                 	db	73
   553  00BC23  49                 	db	73
   554  00BC24  41                 	db	65
   555  00BC25  7F                 	db	127
   556  00BC26  09                 	db	9
   557  00BC27  09                 	db	9
   558  00BC28  09                 	db	9
   559  00BC29  01                 	db	1
   560  00BC2A  3E                 	db	62
   561  00BC2B  41                 	db	65
   562  00BC2C  41                 	db	65
   563  00BC2D  51                 	db	81
   564  00BC2E  72                 	db	114
   565  00BC2F  7F                 	db	127
   566  00BC30  08                 	db	8
   567  00BC31  08                 	db	8
   568  00BC32  08                 	db	8
   569  00BC33  7F                 	db	127
   570  00BC34  00                 	db	0
   571  00BC35  41                 	db	65
   572  00BC36  7F                 	db	127
   573  00BC37  41                 	db	65
   574  00BC38  00                 	db	0
   575  00BC39  20                 	db	32
   576  00BC3A  40                 	db	64
   577  00BC3B  41                 	db	65
   578  00BC3C  3F                 	db	63
   579  00BC3D  01                 	db	1
   580  00BC3E  7F                 	db	127
   581  00BC3F  08                 	db	8
   582  00BC40  14                 	db	20
   583  00BC41  22                 	db	34
   584  00BC42  41                 	db	65
   585  00BC43  7F                 	db	127
   586  00BC44  40                 	db	64
   587  00BC45  40                 	db	64
   588  00BC46  40                 	db	64
   589  00BC47  40                 	db	64
   590  00BC48  7F                 	db	127
   591  00BC49  02                 	db	2
   592  00BC4A  04                 	db	4
   593  00BC4B  02                 	db	2
   594  00BC4C  7F                 	db	127
   595  00BC4D  7F                 	db	127
   596  00BC4E  04                 	db	4
   597  00BC4F  08                 	db	8
   598  00BC50  10                 	db	16
   599  00BC51  7F                 	db	127
   600  00BC52  3E                 	db	62
   601  00BC53  41                 	db	65
   602  00BC54  41                 	db	65
   603  00BC55  41                 	db	65
   604  00BC56  3E                 	db	62
   605  00BC57  7F                 	db	127
   606  00BC58  09                 	db	9
   607  00BC59  09                 	db	9
   608  00BC5A  09                 	db	9
   609  00BC5B  06                 	db	6
   610  00BC5C  3E                 	db	62
   611  00BC5D  41                 	db	65
   612  00BC5E  51                 	db	81
   613  00BC5F  21                 	db	33
   614  00BC60  5E                 	db	94
   615  00BC61  7F                 	db	127
   616  00BC62  09                 	db	9
   617  00BC63  19                 	db	25
   618  00BC64  29                 	db	41
   619  00BC65  46                 	db	70
   620  00BC66  26                 	db	38
   621  00BC67  49                 	db	73
   622  00BC68  49                 	db	73
   623  00BC69  49                 	db	73
   624  00BC6A  32                 	db	50
   625  00BC6B  01                 	db	1
   626  00BC6C  01                 	db	1
   627  00BC6D  7F                 	db	127
   628  00BC6E  01                 	db	1
   629  00BC6F  01                 	db	1
   630  00BC70  3F                 	db	63
   631  00BC71  40                 	db	64
   632  00BC72  40                 	db	64
   633  00BC73  40                 	db	64
   634  00BC74  3F                 	db	63
   635  00BC75  1F                 	db	31
   636  00BC76  20                 	db	32
   637  00BC77  40                 	db	64
   638  00BC78  20                 	db	32
   639  00BC79  1F                 	db	31
   640  00BC7A  3F                 	db	63
   641  00BC7B  40                 	db	64
   642  00BC7C  38                 	db	56
   643  00BC7D  40                 	db	64
   644  00BC7E  3F                 	db	63
   645  00BC7F  63                 	db	99
   646  00BC80  14                 	db	20
   647  00BC81  08                 	db	8
   648  00BC82  14                 	db	20
   649  00BC83  63                 	db	99
   650  00BC84  03                 	db	3
   651  00BC85  04                 	db	4
   652  00BC86  78                 	db	120
   653  00BC87  04                 	db	4
   654  00BC88  03                 	db	3
   655  00BC89  61                 	db	97
   656  00BC8A  51                 	db	81
   657  00BC8B  49                 	db	73
   658  00BC8C  45                 	db	69
   659  00BC8D  43                 	db	67
   660  00BC8E  00                 	db	0
   661  00BC8F  7F                 	db	127
   662  00BC90  41                 	db	65
   663  00BC91  41                 	db	65
   664  00BC92  00                 	db	0
   665  00BC93  02                 	db	2
   666  00BC94  04                 	db	4
   667  00BC95  08                 	db	8
   668  00BC96  10                 	db	16
   669  00BC97  20                 	db	32
   670  00BC98  00                 	db	0
   671  00BC99  41                 	db	65
   672  00BC9A  41                 	db	65
   673  00BC9B  7F                 	db	127
   674  00BC9C  00                 	db	0
   675  00BC9D  04                 	db	4
   676  00BC9E  02                 	db	2
   677  00BC9F  01                 	db	1
   678  00BCA0  02                 	db	2
   679  00BCA1  04                 	db	4
   680  00BCA2  40                 	db	64
   681  00BCA3  40                 	db	64
   682  00BCA4  40                 	db	64
   683  00BCA5  40                 	db	64
   684  00BCA6  40                 	db	64
   685  00BCA7  00                 	db	0
   686  00BCA8  03                 	db	3
   687  00BCA9  07                 	db	7
   688  00BCAA  08                 	db	8
   689  00BCAB  00                 	db	0
   690  00BCAC  20                 	db	32
   691  00BCAD  54                 	db	84
   692  00BCAE  54                 	db	84
   693  00BCAF  78                 	db	120
   694  00BCB0  40                 	db	64
   695  00BCB1  7F                 	db	127
   696  00BCB2  28                 	db	40
   697  00BCB3  44                 	db	68
   698  00BCB4  44                 	db	68
   699  00BCB5  38                 	db	56
   700  00BCB6  38                 	db	56
   701  00BCB7  44                 	db	68
   702  00BCB8  44                 	db	68
   703  00BCB9  44                 	db	68
   704  00BCBA  28                 	db	40
   705  00BCBB  38                 	db	56
   706  00BCBC  44                 	db	68
   707  00BCBD  44                 	db	68
   708  00BCBE  28                 	db	40
   709  00BCBF  7F                 	db	127
   710  00BCC0  38                 	db	56
   711  00BCC1  54                 	db	84
   712  00BCC2  54                 	db	84
   713  00BCC3  54                 	db	84
   714  00BCC4  18                 	db	24
   715  00BCC5  08                 	db	8
   716  00BCC6  7E                 	db	126
   717  00BCC7  09                 	db	9
   718  00BCC8  02                 	db	2
   719  00BCC9  00                 	db	0
   720  00BCCA  18                 	db	24
   721  00BCCB  A4                 	db	164
   722  00BCCC  A4                 	db	164
   723  00BCCD  9C                 	db	156
   724  00BCCE  78                 	db	120
   725  00BCCF  7F                 	db	127
   726  00BCD0  08                 	db	8
   727  00BCD1  04                 	db	4
   728  00BCD2  04                 	db	4
   729  00BCD3  78                 	db	120
   730  00BCD4  00                 	db	0
   731  00BCD5  44                 	db	68
   732  00BCD6  7D                 	db	125
   733  00BCD7  40                 	db	64
   734  00BCD8  00                 	db	0
   735  00BCD9  20                 	db	32
   736  00BCDA  40                 	db	64
   737  00BCDB  40                 	db	64
   738  00BCDC  3D                 	db	61
   739  00BCDD  00                 	db	0
   740  00BCDE  7F                 	db	127
   741  00BCDF  10                 	db	16
   742  00BCE0  28                 	db	40
   743  00BCE1  44                 	db	68
   744  00BCE2  00                 	db	0
   745  00BCE3  00                 	db	0
   746  00BCE4  41                 	db	65
   747  00BCE5  7F                 	db	127
   748  00BCE6  40                 	db	64
   749  00BCE7  00                 	db	0
   750  00BCE8  7C                 	db	124
   751  00BCE9  04                 	db	4
   752  00BCEA  78                 	db	120
   753  00BCEB  04                 	db	4
   754  00BCEC  78                 	db	120
   755  00BCED  7C                 	db	124
   756  00BCEE  08                 	db	8
   757  00BCEF  04                 	db	4
   758  00BCF0  04                 	db	4
   759  00BCF1  78                 	db	120
   760  00BCF2  38                 	db	56
   761  00BCF3  44                 	db	68
   762  00BCF4  44                 	db	68
   763  00BCF5  44                 	db	68
   764  00BCF6  38                 	db	56
   765  00BCF7  FC                 	db	252
   766  00BCF8  18                 	db	24
   767  00BCF9  24                 	db	36
   768  00BCFA  24                 	db	36
   769  00BCFB  18                 	db	24
   770  00BCFC  18                 	db	24
   771  00BCFD  24                 	db	36
   772  00BCFE  24                 	db	36
   773  00BCFF  18                 	db	24
   774  00BD00  FC                 	db	252
   775  00BD01  7C                 	db	124
   776  00BD02  04                 	db	4
   777  00BD03  04                 	db	4
   778  00BD04  08                 	db	8
   779  00BD05  00                 	db	0
   780  00BD06  48                 	db	72
   781  00BD07  54                 	db	84
   782  00BD08  54                 	db	84
   783  00BD09  54                 	db	84
   784  00BD0A  24                 	db	36
   785  00BD0B  00                 	db	0
   786  00BD0C  04                 	db	4
   787  00BD0D  3F                 	db	63
   788  00BD0E  44                 	db	68
   789  00BD0F  20                 	db	32
   790  00BD10  3C                 	db	60
   791  00BD11  40                 	db	64
   792  00BD12  40                 	db	64
   793  00BD13  20                 	db	32
   794  00BD14  7C                 	db	124
   795  00BD15  1C                 	db	28
   796  00BD16  20                 	db	32
   797  00BD17  40                 	db	64
   798  00BD18  20                 	db	32
   799  00BD19  1C                 	db	28
   800  00BD1A  3C                 	db	60
   801  00BD1B  40                 	db	64
   802  00BD1C  30                 	db	48
   803  00BD1D  40                 	db	64
   804  00BD1E  3C                 	db	60
   805  00BD1F  44                 	db	68
   806  00BD20  28                 	db	40
   807  00BD21  10                 	db	16
   808  00BD22  28                 	db	40
   809  00BD23  44                 	db	68
   810  00BD24  4C                 	db	76
   811  00BD25  90                 	db	144
   812  00BD26  90                 	db	144
   813  00BD27  90                 	db	144
   814  00BD28  7C                 	db	124
   815  00BD29  44                 	db	68
   816  00BD2A  64                 	db	100
   817  00BD2B  54                 	db	84
   818  00BD2C  4C                 	db	76
   819  00BD2D  44                 	db	68
   820  00BD2E  00                 	db	0
   821  00BD2F  08                 	db	8
   822  00BD30  36                 	db	54
   823  00BD31  41                 	db	65
   824  00BD32  00                 	db	0
   825  00BD33  00                 	db	0
   826  00BD34  00                 	db	0
   827  00BD35  77                 	db	119
   828  00BD36  00                 	db	0
   829  00BD37  00                 	db	0
   830  00BD38  00                 	db	0
   831  00BD39  41                 	db	65
   832  00BD3A  36                 	db	54
   833  00BD3B  08                 	db	8
   834  00BD3C  00                 	db	0
   835  00BD3D  02                 	db	2
   836  00BD3E  01                 	db	1
   837  00BD3F  02                 	db	2
   838  00BD40  04                 	db	4
   839  00BD41  02                 	db	2
   840  00BD42  00                 	db	0
   841  00BD43  00                 	db	0
   842  00BD44  00                 	db	0
   843  00BD45  00                 	db	0
   844  00BD46  00                 	db	0
   845  00BD47  00                 	db	0
   846  00BD48  00                 	db	0
   847  00BD49  00                 	db	0
   848  00BD4A  00                 	db	0
   849  00BD4B  00                 	db	0
   850  00BD4C  00                 	db	0
   851  00BD4D  00                 	db	0
   852  00BD4E  00                 	db	0
   853  00BD4F  00                 	db	0
   854  00BD50  00                 	db	0
   855  00BD51  00                 	db	0
   856  00BD52  00                 	db	0
   857  00BD53  00                 	db	0
   858  00BD54  00                 	db	0
   859  00BD55  00                 	db	0
   860  00BD56  00                 	db	0
   861  00BD57  00                 	db	0
   862  00BD58  00                 	db	0
   863  00BD59  00                 	db	0
   864  00BD5A  00                 	db	0
   865  00BD5B  00                 	db	0
   866  00BD5C  00                 	db	0
   867  00BD5D  00                 	db	0
   868  00BD5E  00                 	db	0
   869  00BD5F  00                 	db	0
   870  00BD60  40                 	db	64
   871  00BD61  00                 	db	0
   872  00BD62  40                 	db	64
   873  00BD63  00                 	db	0
   874  00BD64  40                 	db	64
   875  00BD65  00                 	db	0
   876  00BD66  00                 	db	0
   877  00BD67  00                 	db	0
   878  00BD68  00                 	db	0
   879  00BD69  00                 	db	0
   880  00BD6A  00                 	db	0
   881  00BD6B  00                 	db	0
   882  00BD6C  00                 	db	0
   883  00BD6D  00                 	db	0
   884  00BD6E  00                 	db	0
   885  00BD6F  3E                 	db	62
   886  00BD70  55                 	db	85
   887  00BD71  55                 	db	85
   888  00BD72  41                 	db	65
   889  00BD73  22                 	db	34
   890  00BD74  00                 	db	0
   891  00BD75  00                 	db	0
   892  00BD76  00                 	db	0
   893  00BD77  00                 	db	0
   894  00BD78  00                 	db	0
   895  00BD79  00                 	db	0
   896  00BD7A  00                 	db	0
   897  00BD7B  00                 	db	0
   898  00BD7C  00                 	db	0
   899  00BD7D  00                 	db	0
   900  00BD7E  00                 	db	0
   901  00BD7F  00                 	db	0
   902  00BD80  00                 	db	0
   903  00BD81  00                 	db	0
   904  00BD82  00                 	db	0
   905  00BD83  00                 	db	0
   906  00BD84  00                 	db	0
   907  00BD85  00                 	db	0
   908  00BD86  00                 	db	0
   909  00BD87  00                 	db	0
   910  00BD88  00                 	db	0
   911  00BD89  00                 	db	0
   912  00BD8A  00                 	db	0
   913  00BD8B  00                 	db	0
   914  00BD8C  00                 	db	0
   915  00BD8D  00                 	db	0
   916  00BD8E  00                 	db	0
   917  00BD8F  00                 	db	0
   918  00BD90  00                 	db	0
   919  00BD91  00                 	db	0
   920  00BD92  00                 	db	0
   921  00BD93  00                 	db	0
   922  00BD94  00                 	db	0
   923  00BD95  00                 	db	0
   924  00BD96  00                 	db	0
   925  00BD97  00                 	db	0
   926  00BD98  00                 	db	0
   927  00BD99  00                 	db	0
   928  00BD9A  00                 	db	0
   929  00BD9B  00                 	db	0
   930  00BD9C  00                 	db	0
   931  00BD9D  00                 	db	0
   932  00BD9E  00                 	db	0
   933  00BD9F  00                 	db	0
   934  00BDA0  00                 	db	0
   935  00BDA1  00                 	db	0
   936  00BDA2  00                 	db	0
   937  00BDA3  00                 	db	0
   938  00BDA4  00                 	db	0
   939  00BDA5  00                 	db	0
   940  00BDA6  00                 	db	0
   941  00BDA7  00                 	db	0
   942  00BDA8  00                 	db	0
   943  00BDA9  00                 	db	0
   944  00BDAA  00                 	db	0
   945  00BDAB  00                 	db	0
   946  00BDAC  00                 	db	0
   947  00BDAD  00                 	db	0
   948  00BDAE  00                 	db	0
   949  00BDAF  00                 	db	0
   950  00BDB0  00                 	db	0
   951  00BDB1  0C                 	db	12
   952  00BDB2  1E                 	db	30
   953  00BDB3  1E                 	db	30
   954  00BDB4  0C                 	db	12
   955  00BDB5  00                 	db	0
   956  00BDB6  00                 	db	0
   957  00BDB7  00                 	db	0
   958  00BDB8  00                 	db	0
   959  00BDB9  00                 	db	0
   960  00BDBA  00                 	db	0
   961  00BDBB  00                 	db	0
   962  00BDBC  00                 	db	0
   963  00BDBD  00                 	db	0
   964  00BDBE  00                 	db	0
   965  00BDBF  00                 	db	0
   966  00BDC0  00                 	db	0
   967  00BDC1  00                 	db	0
   968  00BDC2  00                 	db	0
   969  00BDC3  00                 	db	0
   970  00BDC4  00                 	db	0
   971  00BDC5  00                 	db	0
   972  00BDC6  00                 	db	0
   973  00BDC7  00                 	db	0
   974  00BDC8  00                 	db	0
   975  00BDC9  00                 	db	0
   976  00BDCA  00                 	db	0
   977  00BDCB  00                 	db	0
   978  00BDCC  00                 	db	0
   979  00BDCD  00                 	db	0
   980  00BDCE  00                 	db	0
   981  00BDCF  00                 	db	0
   982  00BDD0  00                 	db	0
   983  00BDD1  00                 	db	0
   984  00BDD2  00                 	db	0
   985  00BDD3  00                 	db	0
   986  00BDD4  00                 	db	0
   987  00BDD5  00                 	db	0
   988  00BDD6  00                 	db	0
   989  00BDD7  00                 	db	0
   990  00BDD8  00                 	db	0
   991  00BDD9  00                 	db	0
   992  00BDDA  00                 	db	0
   993  00BDDB  00                 	db	0
   994  00BDDC  00                 	db	0
   995  00BDDD  00                 	db	0
   996  00BDDE  00                 	db	0
   997  00BDDF  00                 	db	0
   998  00BDE0  00                 	db	0
   999  00BDE1  00                 	db	0
  1000  00BDE2  00                 	db	0
  1001  00BDE3  00                 	db	0
  1002  00BDE4  00                 	db	0
  1003  00BDE5  00                 	db	0
  1004  00BDE6  00                 	db	0
  1005  00BDE7  00                 	db	0
  1006  00BDE8  00                 	db	0
  1007  00BDE9  00                 	db	0
  1008  00BDEA  00                 	db	0
  1009  00BDEB  00                 	db	0
  1010  00BDEC  00                 	db	0
  1011  00BDED  00                 	db	0
  1012  00BDEE  00                 	db	0
  1013  00BDEF  00                 	db	0
  1014  00BDF0  00                 	db	0
  1015  00BDF1  00                 	db	0
  1016  00BDF2  00                 	db	0
  1017  00BDF3  00                 	db	0
  1018  00BDF4  00                 	db	0
  1019  00BDF5  00                 	db	0
  1020  00BDF6  00                 	db	0
  1021  00BDF7  00                 	db	0
  1022  00BDF8  00                 	db	0
  1023  00BDF9  00                 	db	0
  1024  00BDFA  00                 	db	0
  1025  00BDFB  00                 	db	0
  1026  00BDFC  00                 	db	0
  1027  00BDFD  00                 	db	0
  1028  00BDFE  00                 	db	0
  1029  00BDFF  00                 	db	0
  1030  00BE00  7E                 	db	126
  1031  00BE01  02                 	db	2
  1032  00BE02  02                 	db	2
  1033  00BE03  02                 	db	2
  1034  00BE04  03                 	db	3
  1035  00BE05  00                 	db	0
  1036  00BE06  00                 	db	0
  1037  00BE07  00                 	db	0
  1038  00BE08  00                 	db	0
  1039  00BE09  00                 	db	0
  1040  00BE0A  00                 	db	0
  1041  00BE0B  00                 	db	0
  1042  00BE0C  00                 	db	0
  1043  00BE0D  00                 	db	0
  1044  00BE0E  00                 	db	0
  1045  00BE0F  7E                 	db	126
  1046  00BE10  4B                 	db	75
  1047  00BE11  4A                 	db	74
  1048  00BE12  4B                 	db	75
  1049  00BE13  42                 	db	66
  1050  00BE14  00                 	db	0
  1051  00BE15  00                 	db	0
  1052  00BE16  00                 	db	0
  1053  00BE17  00                 	db	0
  1054  00BE18  00                 	db	0
  1055  00BE19  3E                 	db	62
  1056  00BE1A  49                 	db	73
  1057  00BE1B  49                 	db	73
  1058  00BE1C  49                 	db	73
  1059  00BE1D  22                 	db	34
  1060  00BE1E  00                 	db	0
  1061  00BE1F  00                 	db	0
  1062  00BE20  00                 	db	0
  1063  00BE21  00                 	db	0
  1064  00BE22  00                 	db	0
  1065  00BE23  00                 	db	0
  1066  00BE24  00                 	db	0
  1067  00BE25  00                 	db	0
  1068  00BE26  00                 	db	0
  1069  00BE27  00                 	db	0
  1070  00BE28  00                 	db	0
  1071  00BE29  00                 	db	0
  1072  00BE2A  00                 	db	0
  1073  00BE2B  00                 	db	0
  1074  00BE2C  00                 	db	0
  1075  00BE2D  00                 	db	0
  1076  00BE2E  00                 	db	0
  1077  00BE2F  00                 	db	0
  1078  00BE30  00                 	db	0
  1079  00BE31  00                 	db	0
  1080  00BE32  00                 	db	0
  1081  00BE33  41                 	db	65
  1082  00BE34  7E                 	db	126
  1083  00BE35  41                 	db	65
  1084  00BE36  00                 	db	0
  1085  00BE37  00                 	db	0
  1086  00BE38  06                 	db	6
  1087  00BE39  09                 	db	9
  1088  00BE3A  09                 	db	9
  1089  00BE3B  06                 	db	6
  1090  00BE3C  44                 	db	68
  1091  00BE3D  44                 	db	68
  1092  00BE3E  5F                 	db	95
  1093  00BE3F  44                 	db	68
  1094  00BE40  44                 	db	68
  1095  00BE41  00                 	db	0
  1096  00BE42  41                 	db	65
  1097  00BE43  7F                 	db	127
  1098  00BE44  41                 	db	65
  1099  00BE45  00                 	db	0
  1100  00BE46  00                 	db	0
  1101  00BE47  44                 	db	68
  1102  00BE48  7D                 	db	125
  1103  00BE49  40                 	db	64
  1104  00BE4A  00                 	db	0
  1105  00BE4B  00                 	db	0
  1106  00BE4C  7C                 	db	124
  1107  00BE4D  04                 	db	4
  1108  00BE4E  04                 	db	4
  1109  00BE4F  06                 	db	6
  1110  00BE50  00                 	db	0
  1111  00BE51  00                 	db	0
  1112  00BE52  00                 	db	0
  1113  00BE53  00                 	db	0
  1114  00BE54  00                 	db	0
  1115  00BE55  00                 	db	0
  1116  00BE56  00                 	db	0
  1117  00BE57  00                 	db	0
  1118  00BE58  00                 	db	0
  1119  00BE59  00                 	db	0
  1120  00BE5A  00                 	db	0
  1121  00BE5B  00                 	db	0
  1122  00BE5C  00                 	db	0
  1123  00BE5D  00                 	db	0
  1124  00BE5E  00                 	db	0
  1125  00BE5F  38                 	db	56
  1126  00BE60  55                 	db	85
  1127  00BE61  54                 	db	84
  1128  00BE62  55                 	db	85
  1129  00BE63  18                 	db	24
  1130  00BE64  00                 	db	0
  1131  00BE65  00                 	db	0
  1132  00BE66  00                 	db	0
  1133  00BE67  00                 	db	0
  1134  00BE68  00                 	db	0
  1135  00BE69  38                 	db	56
  1136  00BE6A  54                 	db	84
  1137  00BE6B  54                 	db	84
  1138  00BE6C  54                 	db	84
  1139  00BE6D  44                 	db	68
  1140  00BE6E  22                 	db	34
  1141  00BE6F  14                 	db	20
  1142  00BE70  2A                 	db	42
  1143  00BE71  14                 	db	20
  1144  00BE72  08                 	db	8
  1145  00BE73  20                 	db	32
  1146  00BE74  40                 	db	64
  1147  00BE75  40                 	db	64
  1148  00BE76  3D                 	db	61
  1149  00BE77  00                 	db	0
  1150  00BE78  00                 	db	0
  1151  00BE79  00                 	db	0
  1152  00BE7A  00                 	db	0
  1153  00BE7B  00                 	db	0
  1154  00BE7C  00                 	db	0
  1155  00BE7D  00                 	db	0
  1156  00BE7E  00                 	db	0
  1157  00BE7F  00                 	db	0
  1158  00BE80  00                 	db	0
  1159  00BE81  00                 	db	0
  1160  00BE82  00                 	db	0
  1161  00BE83  45                 	db	69
  1162  00BE84  7C                 	db	124
  1163  00BE85  41                 	db	65
  1164  00BE86  00                 	db	0
  1165  00BE87  7E                 	db	126
  1166  00BE88  11                 	db	17
  1167  00BE89  11                 	db	17
  1168  00BE8A  11                 	db	17
  1169  00BE8B  7E                 	db	126
  1170  00BE8C  7F                 	db	127
  1171  00BE8D  49                 	db	73
  1172  00BE8E  49                 	db	73
  1173  00BE8F  49                 	db	73
  1174  00BE90  31                 	db	49
  1175  00BE91  7F                 	db	127
  1176  00BE92  49                 	db	73
  1177  00BE93  49                 	db	73
  1178  00BE94  49                 	db	73
  1179  00BE95  36                 	db	54
  1180  00BE96  7F                 	db	127
  1181  00BE97  01                 	db	1
  1182  00BE98  01                 	db	1
  1183  00BE99  01                 	db	1
  1184  00BE9A  01                 	db	1
  1185  00BE9B  C0                 	db	192
  1186  00BE9C  7E                 	db	126
  1187  00BE9D  41                 	db	65
  1188  00BE9E  7E                 	db	126
  1189  00BE9F  C0                 	db	192
  1190  00BEA0  7F                 	db	127
  1191  00BEA1  49                 	db	73
  1192  00BEA2  49                 	db	73
  1193  00BEA3  49                 	db	73
  1194  00BEA4  41                 	db	65
  1195  00BEA5  77                 	db	119
  1196  00BEA6  08                 	db	8
  1197  00BEA7  7F                 	db	127
  1198  00BEA8  08                 	db	8
  1199  00BEA9  77                 	db	119
  1200  00BEAA  22                 	db	34
  1201  00BEAB  41                 	db	65
  1202  00BEAC  49                 	db	73
  1203  00BEAD  49                 	db	73
  1204  00BEAE  36                 	db	54
  1205  00BEAF  7F                 	db	127
  1206  00BEB0  10                 	db	16
  1207  00BEB1  08                 	db	8
  1208  00BEB2  04                 	db	4
  1209  00BEB3  7F                 	db	127
  1210  00BEB4  7E                 	db	126
  1211  00BEB5  11                 	db	17
  1212  00BEB6  09                 	db	9
  1213  00BEB7  05                 	db	5
  1214  00BEB8  7E                 	db	126
  1215  00BEB9  7F                 	db	127
  1216  00BEBA  08                 	db	8
  1217  00BEBB  14                 	db	20
  1218  00BEBC  22                 	db	34
  1219  00BEBD  41                 	db	65
  1220  00BEBE  40                 	db	64
  1221  00BEBF  7E                 	db	126
  1222  00BEC0  01                 	db	1
  1223  00BEC1  01                 	db	1
  1224  00BEC2  7F                 	db	127
  1225  00BEC3  7F                 	db	127
  1226  00BEC4  02                 	db	2
  1227  00BEC5  0C                 	db	12
  1228  00BEC6  02                 	db	2
  1229  00BEC7  7F                 	db	127
  1230  00BEC8  7F                 	db	127
  1231  00BEC9  08                 	db	8
  1232  00BECA  08                 	db	8
  1233  00BECB  08                 	db	8
  1234  00BECC  7F                 	db	127
  1235  00BECD  3E                 	db	62
  1236  00BECE  41                 	db	65
  1237  00BECF  41                 	db	65
  1238  00BED0  41                 	db	65
  1239  00BED1  3E                 	db	62
  1240  00BED2  7F                 	db	127
  1241  00BED3  01                 	db	1
  1242  00BED4  01                 	db	1
  1243  00BED5  01                 	db	1
  1244  00BED6  7F                 	db	127
  1245  00BED7  7F                 	db	127
  1246  00BED8  09                 	db	9
  1247  00BED9  09                 	db	9
  1248  00BEDA  09                 	db	9
  1249  00BEDB  06                 	db	6
  1250  00BEDC  3E                 	db	62
  1251  00BEDD  41                 	db	65
  1252  00BEDE  41                 	db	65
  1253  00BEDF  41                 	db	65
  1254  00BEE0  22                 	db	34
  1255  00BEE1  01                 	db	1
  1256  00BEE2  01                 	db	1
  1257  00BEE3  7F                 	db	127
  1258  00BEE4  01                 	db	1
  1259  00BEE5  01                 	db	1
  1260  00BEE6  27                 	db	39
  1261  00BEE7  48                 	db	72
  1262  00BEE8  48                 	db	72
  1263  00BEE9  48                 	db	72
  1264  00BEEA  3F                 	db	63
  1265  00BEEB  0E                 	db	14
  1266  00BEEC  11                 	db	17
  1267  00BEED  7F                 	db	127
  1268  00BEEE  11                 	db	17
  1269  00BEEF  0E                 	db	14
  1270  00BEF0  63                 	db	99
  1271  00BEF1  14                 	db	20
  1272  00BEF2  08                 	db	8
  1273  00BEF3  14                 	db	20
  1274  00BEF4  63                 	db	99
  1275  00BEF5  7F                 	db	127
  1276  00BEF6  40                 	db	64
  1277  00BEF7  40                 	db	64
  1278  00BEF8  7F                 	db	127
  1279  00BEF9  C0                 	db	192
  1280  00BEFA  07                 	db	7
  1281  00BEFB  08                 	db	8
  1282  00BEFC  08                 	db	8
  1283  00BEFD  08                 	db	8
  1284  00BEFE  7F                 	db	127
  1285  00BEFF  7F                 	db	127
  1286  00BF00  40                 	db	64
  1287  00BF01  7E                 	db	126
  1288  00BF02  40                 	db	64
  1289  00BF03  7F                 	db	127
  1290  00BF04  7F                 	db	127
  1291  00BF05  40                 	db	64
  1292  00BF06  7E                 	db	126
  1293  00BF07  40                 	db	64
  1294  00BF08  FF                 	db	255
  1295  00BF09  01                 	db	1
  1296  00BF0A  7F                 	db	127
  1297  00BF0B  44                 	db	68
  1298  00BF0C  44                 	db	68
  1299  00BF0D  38                 	db	56
  1300  00BF0E  7F                 	db	127
  1301  00BF0F  44                 	db	68
  1302  00BF10  38                 	db	56
  1303  00BF11  00                 	db	0
  1304  00BF12  7F                 	db	127
  1305  00BF13  7F                 	db	127
  1306  00BF14  44                 	db	68
  1307  00BF15  44                 	db	68
  1308  00BF16  44                 	db	68
  1309  00BF17  38                 	db	56
  1310  00BF18  22                 	db	34
  1311  00BF19  41                 	db	65
  1312  00BF1A  49                 	db	73
  1313  00BF1B  49                 	db	73
  1314  00BF1C  3E                 	db	62
  1315  00BF1D  7F                 	db	127
  1316  00BF1E  08                 	db	8
  1317  00BF1F  3E                 	db	62
  1318  00BF20  41                 	db	65
  1319  00BF21  3E                 	db	62
  1320  00BF22  46                 	db	70
  1321  00BF23  29                 	db	41
  1322  00BF24  19                 	db	25
  1323  00BF25  09                 	db	9
  1324  00BF26  7F                 	db	127
  1325  00BF27  20                 	db	32
  1326  00BF28  54                 	db	84
  1327  00BF29  54                 	db	84
  1328  00BF2A  54                 	db	84
  1329  00BF2B  78                 	db	120
  1330  00BF2C  3C                 	db	60
  1331  00BF2D  4A                 	db	74
  1332  00BF2E  4A                 	db	74
  1333  00BF2F  4A                 	db	74
  1334  00BF30  31                 	db	49
  1335  00BF31  7C                 	db	124
  1336  00BF32  54                 	db	84
  1337  00BF33  54                 	db	84
  1338  00BF34  54                 	db	84
  1339  00BF35  28                 	db	40
  1340  00BF36  00                 	db	0
  1341  00BF37  7C                 	db	124
  1342  00BF38  04                 	db	4
  1343  00BF39  04                 	db	4
  1344  00BF3A  04                 	db	4
  1345  00BF3B  C0                 	db	192
  1346  00BF3C  78                 	db	120
  1347  00BF3D  44                 	db	68
  1348  00BF3E  7C                 	db	124
  1349  00BF3F  C0                 	db	192
  1350  00BF40  38                 	db	56
  1351  00BF41  54                 	db	84
  1352  00BF42  54                 	db	84
  1353  00BF43  54                 	db	84
  1354  00BF44  18                 	db	24
  1355  00BF45  6C                 	db	108
  1356  00BF46  10                 	db	16
  1357  00BF47  7C                 	db	124
  1358  00BF48  10                 	db	16
  1359  00BF49  6C                 	db	108
  1360  00BF4A  28                 	db	40
  1361  00BF4B  44                 	db	68
  1362  00BF4C  54                 	db	84
  1363  00BF4D  54                 	db	84
  1364  00BF4E  28                 	db	40
  1365  00BF4F  7C                 	db	124
  1366  00BF50  20                 	db	32
  1367  00BF51  10                 	db	16
  1368  00BF52  08                 	db	8
  1369  00BF53  7C                 	db	124
  1370  00BF54  7C                 	db	124
  1371  00BF55  21                 	db	33
  1372  00BF56  11                 	db	17
  1373  00BF57  09                 	db	9
  1374  00BF58  7C                 	db	124
  1375  00BF59  7C                 	db	124
  1376  00BF5A  10                 	db	16
  1377  00BF5B  10                 	db	16
  1378  00BF5C  28                 	db	40
  1379  00BF5D  44                 	db	68
  1380  00BF5E  40                 	db	64
  1381  00BF5F  38                 	db	56
  1382  00BF60  04                 	db	4
  1383  00BF61  04                 	db	4
  1384  00BF62  7C                 	db	124
  1385  00BF63  7C                 	db	124
  1386  00BF64  08                 	db	8
  1387  00BF65  10                 	db	16
  1388  00BF66  08                 	db	8
  1389  00BF67  7C                 	db	124
  1390  00BF68  7C                 	db	124
  1391  00BF69  10                 	db	16
  1392  00BF6A  10                 	db	16
  1393  00BF6B  10                 	db	16
  1394  00BF6C  7C                 	db	124
  1395  00BF6D  38                 	db	56
  1396  00BF6E  44                 	db	68
  1397  00BF6F  44                 	db	68
  1398  00BF70  44                 	db	68
  1399  00BF71  38                 	db	56
  1400  00BF72  7C                 	db	124
  1401  00BF73  04                 	db	4
  1402  00BF74  04                 	db	4
  1403  00BF75  04                 	db	4
  1404  00BF76  7C                 	db	124
  1405  00BF77  7C                 	db	124
  1406  00BF78  14                 	db	20
  1407  00BF79  14                 	db	20
  1408  00BF7A  14                 	db	20
  1409  00BF7B  08                 	db	8
  1410  00BF7C  38                 	db	56
  1411  00BF7D  44                 	db	68
  1412  00BF7E  44                 	db	68
  1413  00BF7F  44                 	db	68
  1414  00BF80  28                 	db	40
  1415  00BF81  04                 	db	4
  1416  00BF82  04                 	db	4
  1417  00BF83  7C                 	db	124
  1418  00BF84  04                 	db	4
  1419  00BF85  04                 	db	4
  1420  00BF86  4C                 	db	76
  1421  00BF87  50                 	db	80
  1422  00BF88  50                 	db	80
  1423  00BF89  50                 	db	80
  1424  00BF8A  3C                 	db	60
  1425  00BF8B  18                 	db	24
  1426  00BF8C  24                 	db	36
  1427  00BF8D  7C                 	db	124
  1428  00BF8E  24                 	db	36
  1429  00BF8F  18                 	db	24
  1430  00BF90  00                 	db	0
  1431  00BF91  6C                 	db	108
  1432  00BF92  10                 	db	16
  1433  00BF93  10                 	db	16
  1434  00BF94  6C                 	db	108
  1435  00BF95  7C                 	db	124
  1436  00BF96  40                 	db	64
  1437  00BF97  40                 	db	64
  1438  00BF98  7C                 	db	124
  1439  00BF99  C0                 	db	192
  1440  00BF9A  0C                 	db	12
  1441  00BF9B  10                 	db	16
  1442  00BF9C  10                 	db	16
  1443  00BF9D  10                 	db	16
  1444  00BF9E  7C                 	db	124
  1445  00BF9F  7C                 	db	124
  1446  00BFA0  40                 	db	64
  1447  00BFA1  78                 	db	120
  1448  00BFA2  40                 	db	64
  1449  00BFA3  7C                 	db	124
  1450  00BFA4  7C                 	db	124
  1451  00BFA5  40                 	db	64
  1452  00BFA6  78                 	db	120
  1453  00BFA7  40                 	db	64
  1454  00BFA8  FC                 	db	252
  1455  00BFA9  04                 	db	4
  1456  00BFAA  7C                 	db	124
  1457  00BFAB  50                 	db	80
  1458  00BFAC  50                 	db	80
  1459  00BFAD  20                 	db	32
  1460  00BFAE  7C                 	db	124
  1461  00BFAF  50                 	db	80
  1462  00BFB0  20                 	db	32
  1463  00BFB1  00                 	db	0
  1464  00BFB2  7C                 	db	124
  1465  00BFB3  00                 	db	0
  1466  00BFB4  7C                 	db	124
  1467  00BFB5  50                 	db	80
  1468  00BFB6  50                 	db	80
  1469  00BFB7  20                 	db	32
  1470  00BFB8  44                 	db	68
  1471  00BFB9  54                 	db	84
  1472  00BFBA  54                 	db	84
  1473  00BFBB  54                 	db	84
  1474  00BFBC  38                 	db	56
  1475  00BFBD  7C                 	db	124
  1476  00BFBE  10                 	db	16
  1477  00BFBF  38                 	db	56
  1478  00BFC0  44                 	db	68
  1479  00BFC1  38                 	db	56
  1480  00BFC2  48                 	db	72
  1481  00BFC3  54                 	db	84
  1482  00BFC4  34                 	db	52
  1483  00BFC5  14                 	db	20
  1484  00BFC6  7C                 	db	124
  1485  00BFC7                     __end_of_Font:
  1486                           	opt stack 0
  1487  00BFC7                     _FontS:
  1488                           	opt stack 0
  1489  00BFC7  00                 	db	0
  1490  00BFC8  00                 	db	0
  1491  00BFC9  00                 	db	0
  1492  00BFCA  7C                 	db	124
  1493  00BFCB  44                 	db	68
  1494  00BFCC  7C                 	db	124
  1495  00BFCD  00                 	db	0
  1496  00BFCE  7C                 	db	124
  1497  00BFCF  00                 	db	0
  1498  00BFD0  74                 	db	116
  1499  00BFD1  54                 	db	84
  1500  00BFD2  5C                 	db	92
  1501  00BFD3  54                 	db	84
  1502  00BFD4  54                 	db	84
  1503  00BFD5  7C                 	db	124
  1504  00BFD6  1C                 	db	28
  1505  00BFD7  10                 	db	16
  1506  00BFD8  7C                 	db	124
  1507  00BFD9  5C                 	db	92
  1508  00BFDA  54                 	db	84
  1509  00BFDB  74                 	db	116
  1510  00BFDC  7C                 	db	124
  1511  00BFDD  54                 	db	84
  1512  00BFDE  74                 	db	116
  1513  00BFDF  04                 	db	4
  1514  00BFE0  04                 	db	4
  1515  00BFE1  7C                 	db	124
  1516  00BFE2  7C                 	db	124
  1517  00BFE3  54                 	db	84
  1518  00BFE4  7C                 	db	124
  1519  00BFE5  5C                 	db	92
  1520  00BFE6  54                 	db	84
  1521  00BFE7  7C                 	db	124
  1522  00BFE8                     __end_of_FontS:
  1523                           	opt stack 0
  1524  0000                     _TMR0	set	4054
  1525  0000                     _TRISCbits	set	3988
  1526  0000                     _PORTB	set	3969
  1527  0000                     _T1CON	set	4045
  1528  0000                     _LATDbits	set	3980
  1529  0000                     _TMR1L	set	4046
  1530  0000                     _TMR1H	set	4047
  1531  0000                     _PIR1bits	set	3998
  1532  0000                     _PIE1bits	set	3997
  1533  0000                     _T0CON	set	4053
  1534  0000                     _SSPBUF	set	4041
  1535  0000                     _SSPCON2	set	4037
  1536  0000                     _SSPADD	set	4040
  1537  0000                     _SSPSTAT	set	4039
  1538  0000                     _SSPCON1	set	4038
  1539  0000                     _PORTCbits	set	3970
  1540  0000                     _INTCON2bits	set	4081
  1541  0000                     _TRISD	set	3989
  1542  0000                     _LATD	set	3980
  1543  0000                     _INTCON2	set	4081
  1544  0000                     _TRISB	set	3987
  1545  0000                     _LATB	set	3978
  1546  0000                     _TRISC	set	3988
  1547  0000                     _LATC	set	3979
  1548  0000                     _INTCONbits	set	4082
  1549  0000                     _ACKEN	set	32300
  1550  0000                     _ACKDT	set	32301
  1551  0000                     _RCEN	set	32299
  1552  0000                     _SSPIF	set	31987
  1553  0000                     _RSEN	set	32297
  1554  0000                     _ACKSTAT	set	32302
  1555  0000                     _SEN	set	32296
  1556  0000                     _R_W	set	32314
  1557  0000                     _PEN	set	32298
  1558  00BFE8                     STR_1:
  1559  00BFE8  43                 	db	67	;'C'
  1560  00BFE9  6C                 	db	108	;'l'
  1561  00BFEA  6F                 	db	111	;'o'
  1562  00BFEB  63                 	db	99	;'c'
  1563  00BFEC  6B                 	db	107	;'k'
  1564  00BFED  20                 	db	32
  1565  00BFEE  76                 	db	118	;'v'
  1566  00BFEF  31                 	db	49	;'1'
  1567  00BFF0  2E                 	db	46
  1568  00BFF1  30                 	db	48	;'0'
  1569  00BFF2  20                 	db	32
  1570  00BFF3  62                 	db	98	;'b'
  1571  00BFF4  79                 	db	121	;'y'
  1572  00BFF5  20                 	db	32
  1573  00BFF6  49                 	db	73	;'I'
  1574  00BFF7  76                 	db	118	;'v'
  1575  00BFF8  61                 	db	97	;'a'
  1576  00BFF9  6E                 	db	110	;'n'
  1577  00BFFA  5F                 	db	95	;'_'
  1578  00BFFB  66                 	db	102	;'f'
  1579  00BFFC  64                 	db	100	;'d'
  1580  00BFFD  00                 	db	0
  1581                           
  1582                           ; #config settings
  1583  00BFFE  00                 	db	0	; dummy byte at the end
  1584  0000                     tosu	equ	0xFFF
  1585                           tosh	equ	0xFFE
  1586                           tosl	equ	0xFFD
  1587                           pclath	equ	0xFFA
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           prodh	equ	0xFF4
  1593                           prodl	equ	0xFF3
  1594                           intcon	equ	0xFF2
  1595                           intcon2	equ	0xFF1
  1596                           wreg	equ	0xFE8
  1597                           indf1	equ	0xFE7
  1598                           plusw1	equ	0xFE3
  1599                           fsr1h	equ	0xFE2
  1600                           fsr1l	equ	0xFE1
  1601                           indf2	equ	0xFDF
  1602                           postinc2	equ	0xFDE
  1603                           postdec2	equ	0xFDD
  1604                           plusw2	equ	0xFDB
  1605                           fsr2h	equ	0xFDA
  1606                           fsr2l	equ	0xFD9
  1607                           status	equ	0xFD8
  1608                           
  1609                           	psect	cinit
  1610  000E96                     __pcinit:
  1611                           	opt stack 0
  1612  000E96                     start_initialization:
  1613                           	opt stack 0
  1614  000E96                     __initialization:
  1615                           	opt stack 0
  1616                           
  1617                           ; Initialize objects allocated to COMRAM (1 bytes)
  1618                           ; load TBLPTR registers with __pidataCOMRAM
  1619  000E96  0E8A               	movlw	low __pidataCOMRAM
  1620  000E98  6EF6               	movwf	tblptrl,c
  1621  000E9A  0E13               	movlw	high __pidataCOMRAM
  1622  000E9C  6EF7               	movwf	tblptrh,c
  1623  000E9E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1624  000EA0  6EF8               	movwf	tblptru,c
  1625  000EA2  0009               	tblrd		*+	;fetch initializer
  1626  000EA4  CFF5 F05D          	movff	tablat,__pdataCOMRAM
  1627                           
  1628                           ; Clear objects allocated to BANK1 (100 bytes)
  1629  000EA8  EE01  F000         	lfsr	0,__pbssBANK1
  1630  000EAC  0E64               	movlw	100
  1631  000EAE                     clear_0:
  1632  000EAE  6AEE               	clrf	postinc0,c
  1633  000EB0  06E8               	decf	wreg,f,c
  1634  000EB2  E1FD               	bnz	clear_0
  1635                           
  1636                           ; Clear objects allocated to BANK0 (120 bytes)
  1637  000EB4  EE00  F080         	lfsr	0,__pbssBANK0
  1638  000EB8  0E78               	movlw	120
  1639  000EBA                     clear_1:
  1640  000EBA  6AEE               	clrf	postinc0,c
  1641  000EBC  06E8               	decf	wreg,f,c
  1642  000EBE  E1FD               	bnz	clear_1
  1643                           
  1644                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1645  000EC0  6A5C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1646                           
  1647                           ; Clear objects allocated to COMRAM (51 bytes)
  1648  000EC2  EE00  F001         	lfsr	0,__pbssCOMRAM
  1649  000EC6  0E33               	movlw	51
  1650  000EC8                     clear_2:
  1651  000EC8  6AEE               	clrf	postinc0,c
  1652  000ECA  06E8               	decf	wreg,f,c
  1653  000ECC  E1FD               	bnz	clear_2
  1654  000ECE                     end_of_initialization:
  1655                           	opt stack 0
  1656  000ECE                     __end_of__initialization:
  1657                           	opt stack 0
  1658  000ECE  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1659  000ED0  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1660  000ED2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1661  000ED4  6EF8               	movwf	tblptru,c
  1662  000ED6  0100               	movlb	0
  1663  000ED8  EF24  F007         	goto	_main	;jump to C main() function
  1664                           tosu	equ	0xFFF
  1665                           tosh	equ	0xFFE
  1666                           tosl	equ	0xFFD
  1667                           pclath	equ	0xFFA
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           prodh	equ	0xFF4
  1673                           prodl	equ	0xFF3
  1674                           intcon	equ	0xFF2
  1675                           intcon2	equ	0xFF1
  1676                           postinc0	equ	0xFEE
  1677                           wreg	equ	0xFE8
  1678                           indf1	equ	0xFE7
  1679                           plusw1	equ	0xFE3
  1680                           fsr1h	equ	0xFE2
  1681                           fsr1l	equ	0xFE1
  1682                           indf2	equ	0xFDF
  1683                           postinc2	equ	0xFDE
  1684                           postdec2	equ	0xFDD
  1685                           plusw2	equ	0xFDB
  1686                           fsr2h	equ	0xFDA
  1687                           fsr2l	equ	0xFD9
  1688                           status	equ	0xFD8
  1689                           
  1690                           	psect	bitbssCOMRAM
  1691  0002E0                     __pbitbssCOMRAM:
  1692                           	opt stack 0
  1693  0002E0                     _en_put:
  1694                           	opt stack 0
  1695  0002E0                     	ds	1
  1696  0002E1                     _show_digit:
  1697                           	opt stack 0
  1698  0002E1                     	ds	1
  1699                           tosu	equ	0xFFF
  1700                           tosh	equ	0xFFE
  1701                           tosl	equ	0xFFD
  1702                           pclath	equ	0xFFA
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           prodh	equ	0xFF4
  1708                           prodl	equ	0xFF3
  1709                           intcon	equ	0xFF2
  1710                           intcon2	equ	0xFF1
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           indf1	equ	0xFE7
  1714                           plusw1	equ	0xFE3
  1715                           fsr1h	equ	0xFE2
  1716                           fsr1l	equ	0xFE1
  1717                           indf2	equ	0xFDF
  1718                           postinc2	equ	0xFDE
  1719                           postdec2	equ	0xFDD
  1720                           plusw2	equ	0xFDB
  1721                           fsr2h	equ	0xFDA
  1722                           fsr2l	equ	0xFD9
  1723                           status	equ	0xFD8
  1724                           
  1725                           	psect	bssCOMRAM
  1726  000001                     __pbssCOMRAM:
  1727                           	opt stack 0
  1728  000001                     _TSTime:
  1729                           	opt stack 0
  1730  000001                     	ds	7
  1731  000008                     key_press@count:
  1732                           	opt stack 0
  1733  000008                     	ds	1
  1734  000009                     _i_bchar:
  1735                           	opt stack 0
  1736  000009                     	ds	1
  1737  00000A                     _i_char:
  1738                           	opt stack 0
  1739  00000A                     	ds	1
  1740  00000B                     _Timer0Interrupt:
  1741                           	opt stack 0
  1742  00000B                     	ds	1
  1743  00000C                     _arrayTail:
  1744                           	opt stack 0
  1745  00000C                     	ds	1
  1746  00000D                     _Dis_Buff:
  1747                           	opt stack 0
  1748  00000D                     	ds	32
  1749  00002D                     _TTime:
  1750                           	opt stack 0
  1751  00002D                     	ds	7
  1752                           tosu	equ	0xFFF
  1753                           tosh	equ	0xFFE
  1754                           tosl	equ	0xFFD
  1755                           pclath	equ	0xFFA
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           prodh	equ	0xFF4
  1761                           prodl	equ	0xFF3
  1762                           intcon	equ	0xFF2
  1763                           intcon2	equ	0xFF1
  1764                           postinc0	equ	0xFEE
  1765                           wreg	equ	0xFE8
  1766                           indf1	equ	0xFE7
  1767                           plusw1	equ	0xFE3
  1768                           fsr1h	equ	0xFE2
  1769                           fsr1l	equ	0xFE1
  1770                           indf2	equ	0xFDF
  1771                           postinc2	equ	0xFDE
  1772                           postdec2	equ	0xFDD
  1773                           plusw2	equ	0xFDB
  1774                           fsr2h	equ	0xFDA
  1775                           fsr2l	equ	0xFD9
  1776                           status	equ	0xFD8
  1777                           
  1778                           	psect	dataCOMRAM
  1779  00005D                     __pdataCOMRAM:
  1780                           	opt stack 0
  1781  00005D                     _events:
  1782                           	opt stack 0
  1783  00005D                     	ds	1
  1784                           tosu	equ	0xFFF
  1785                           tosh	equ	0xFFE
  1786                           tosl	equ	0xFFD
  1787                           pclath	equ	0xFFA
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           prodh	equ	0xFF4
  1793                           prodl	equ	0xFF3
  1794                           intcon	equ	0xFF2
  1795                           intcon2	equ	0xFF1
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           indf1	equ	0xFE7
  1799                           plusw1	equ	0xFE3
  1800                           fsr1h	equ	0xFE2
  1801                           fsr1l	equ	0xFE1
  1802                           indf2	equ	0xFDF
  1803                           postinc2	equ	0xFDE
  1804                           postdec2	equ	0xFDD
  1805                           plusw2	equ	0xFDB
  1806                           fsr2h	equ	0xFDA
  1807                           fsr2l	equ	0xFD9
  1808                           status	equ	0xFD8
  1809                           
  1810                           	psect	bssBANK0
  1811  000080                     __pbssBANK0:
  1812                           	opt stack 0
  1813  000080                     _TaskArray:
  1814                           	opt stack 0
  1815  000080                     	ds	120
  1816                           tosu	equ	0xFFF
  1817                           tosh	equ	0xFFE
  1818                           tosl	equ	0xFFD
  1819                           pclath	equ	0xFFA
  1820                           tblptru	equ	0xFF8
  1821                           tblptrh	equ	0xFF7
  1822                           tblptrl	equ	0xFF6
  1823                           tablat	equ	0xFF5
  1824                           prodh	equ	0xFF4
  1825                           prodl	equ	0xFF3
  1826                           intcon	equ	0xFF2
  1827                           intcon2	equ	0xFF1
  1828                           postinc0	equ	0xFEE
  1829                           wreg	equ	0xFE8
  1830                           indf1	equ	0xFE7
  1831                           plusw1	equ	0xFE3
  1832                           fsr1h	equ	0xFE2
  1833                           fsr1l	equ	0xFE1
  1834                           indf2	equ	0xFDF
  1835                           postinc2	equ	0xFDE
  1836                           postdec2	equ	0xFDD
  1837                           plusw2	equ	0xFDB
  1838                           fsr2h	equ	0xFDA
  1839                           fsr2l	equ	0xFD9
  1840                           status	equ	0xFD8
  1841                           
  1842                           	psect	bssBANK1
  1843  000100                     __pbssBANK1:
  1844                           	opt stack 0
  1845  000100                     _text_buf:
  1846                           	opt stack 0
  1847  000100                     	ds	100
  1848                           tosu	equ	0xFFF
  1849                           tosh	equ	0xFFE
  1850                           tosl	equ	0xFFD
  1851                           pclath	equ	0xFFA
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           prodh	equ	0xFF4
  1857                           prodl	equ	0xFF3
  1858                           intcon	equ	0xFF2
  1859                           intcon2	equ	0xFF1
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           indf1	equ	0xFE7
  1863                           plusw1	equ	0xFE3
  1864                           fsr1h	equ	0xFE2
  1865                           fsr1l	equ	0xFE1
  1866                           indf2	equ	0xFDF
  1867                           postinc2	equ	0xFDE
  1868                           postdec2	equ	0xFDD
  1869                           plusw2	equ	0xFDB
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874                           	psect	cstackCOMRAM
  1875  000034                     __pcstackCOMRAM:
  1876                           	opt stack 0
  1877  000034                     i2RTOS_SetTask@taskFunc:
  1878                           	opt stack 0
  1879                           
  1880                           ; 2 bytes @ 0x0
  1881  000034                     	ds	2
  1882  000036                     i2RTOS_SetTask@taskDelay:
  1883                           	opt stack 0
  1884                           
  1885                           ; 2 bytes @ 0x2
  1886  000036                     	ds	2
  1887  000038                     i2RTOS_SetTask@taskPeriod:
  1888                           	opt stack 0
  1889                           
  1890                           ; 2 bytes @ 0x4
  1891  000038                     	ds	2
  1892  00003A                     
  1893                           ; 1 bytes @ 0x6
  1894  00003A                     	ds	2
  1895  00003C                     i2RTOS_SetTask@i:
  1896                           	opt stack 0
  1897                           
  1898                           ; 1 bytes @ 0x8
  1899  00003C                     	ds	1
  1900  00003D                     ??_INTERRUPT_InterruptManager:
  1901                           
  1902                           ; 1 bytes @ 0x9
  1903  00003D                     	ds	5
  1904  000042                     ??_ow_reset:
  1905  000042                     ??_I2C_idle:
  1906  000042                     ??_scroll_text:
  1907  000042                     ??_bcd_to_decimal:
  1908  000042                     ?_sprintf:
  1909                           	opt stack 0
  1910  000042                     Send_Byte_7221@dat:
  1911                           	opt stack 0
  1912  000042                     pixel_on@y:
  1913                           	opt stack 0
  1914  000042                     pixel_off@y:
  1915                           	opt stack 0
  1916  000042                     clear_matrix@i:
  1917                           	opt stack 0
  1918  000042                     key_press@key:
  1919                           	opt stack 0
  1920  000042                     ___lbdiv@divisor:
  1921                           	opt stack 0
  1922  000042                     RTOS_SetTask@taskFunc:
  1923                           	opt stack 0
  1924  000042                     RTOS_DeleteTask@taskFunc:
  1925                           	opt stack 0
  1926  000042                     sprintf@sp:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0xE
  1930  000042                     	ds	1
  1931  000043                     ??_pixel_on:
  1932  000043                     ??_pixel_off:
  1933  000043                     I2C_start@_R_W:
  1934                           	opt stack 0
  1935  000043                     I2C_restart@_R_W:
  1936                           	opt stack 0
  1937  000043                     I2C_write@data:
  1938                           	opt stack 0
  1939  000043                     Send_Byte_7221@i:
  1940                           	opt stack 0
  1941  000043                     bcd_to_decimal@d:
  1942                           	opt stack 0
  1943  000043                     ___lbdiv@dividend:
  1944                           	opt stack 0
  1945                           
  1946                           ; 1 bytes @ 0xF
  1947  000043                     	ds	1
  1948  000044                     ??_RTOS_DeleteTask:
  1949  000044                     I2C_start@adress:
  1950                           	opt stack 0
  1951  000044                     I2C_restart@adres:
  1952                           	opt stack 0
  1953  000044                     Cmd7221@val:
  1954                           	opt stack 0
  1955  000044                     Update_Matrix@buf:
  1956                           	opt stack 0
  1957  000044                     scroll_text@i:
  1958                           	opt stack 0
  1959  000044                     ___lbdiv@counter:
  1960                           	opt stack 0
  1961  000044                     RTOS_SetTask@taskDelay:
  1962                           	opt stack 0
  1963  000044                     sprintf@f:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0x10
  1967  000044                     	ds	1
  1968  000045                     Cmd7221@adr:
  1969                           	opt stack 0
  1970  000045                     Update_Matrix@data:
  1971                           	opt stack 0
  1972  000045                     pixel_on@x:
  1973                           	opt stack 0
  1974  000045                     DS3231_Read@address:
  1975                           	opt stack 0
  1976  000045                     ___lbdiv@quotient:
  1977                           	opt stack 0
  1978                           
  1979                           ; 1 bytes @ 0x11
  1980  000045                     	ds	1
  1981  000046                     Cmd7221@i:
  1982                           	opt stack 0
  1983  000046                     Update_Matrix@j:
  1984                           	opt stack 0
  1985  000046                     pixel_off@x:
  1986                           	opt stack 0
  1987  000046                     DS3231_Read@value:
  1988                           	opt stack 0
  1989  000046                     sprintf@c:
  1990                           	opt stack 0
  1991  000046                     ___lbmod@divisor:
  1992                           	opt stack 0
  1993  000046                     RTOS_SetTask@taskPeriod:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x12
  1997  000046                     	ds	1
  1998  000047                     Update_Matrix@i:
  1999                           	opt stack 0
  2000  000047                     pic_to_led@pic:
  2001                           	opt stack 0
  2002  000047                     getTime@p3:
  2003                           	opt stack 0
  2004  000047                     getDate@p4:
  2005                           	opt stack 0
  2006  000047                     ___lbmod@dividend:
  2007                           	opt stack 0
  2008                           
  2009                           ; 1 bytes @ 0x13
  2010  000047                     	ds	1
  2011  000048                     ??_version:
  2012  000048                     ??_pic_to_led:
  2013  000048                     getTime@p2:
  2014                           	opt stack 0
  2015  000048                     getDate@p3:
  2016                           	opt stack 0
  2017  000048                     ___lbmod@counter:
  2018                           	opt stack 0
  2019                           
  2020                           ; 1 bytes @ 0x14
  2021  000048                     	ds	1
  2022  000049                     getTime@p1:
  2023                           	opt stack 0
  2024  000049                     getDate@p2:
  2025                           	opt stack 0
  2026  000049                     version@i:
  2027                           	opt stack 0
  2028  000049                     ___lbmod@rem:
  2029                           	opt stack 0
  2030                           
  2031                           ; 1 bytes @ 0x15
  2032  000049                     	ds	1
  2033  00004A                     ??_FillBuf:
  2034  00004A                     ??_decimal_to_bcd:
  2035  00004A                     RTOS_SetTask@i:
  2036                           	opt stack 0
  2037  00004A                     RTOS_DeleteTask@i:
  2038                           	opt stack 0
  2039  00004A                     pic_to_led@mask:
  2040                           	opt stack 0
  2041  00004A                     putchar_b_buf@symbol:
  2042                           	opt stack 0
  2043  00004A                     getDate@p1:
  2044                           	opt stack 0
  2045                           
  2046                           ; 1 bytes @ 0x16
  2047  00004A                     	ds	1
  2048  00004B                     ??_putchar_b_buf:
  2049  00004B                     pic_to_led@x:
  2050                           	opt stack 0
  2051                           
  2052                           ; 1 bytes @ 0x17
  2053  00004B                     	ds	1
  2054  00004C                     pic_to_led@j:
  2055                           	opt stack 0
  2056  00004C                     FillBuf@i:
  2057                           	opt stack 0
  2058  00004C                     decimal_to_bcd@d:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0x18
  2062  00004C                     	ds	1
  2063  00004D                     pic_to_led@i:
  2064                           	opt stack 0
  2065  00004D                     putchar_b_buf@mask:
  2066                           	opt stack 0
  2067  00004D                     DS3231_Write@value:
  2068                           	opt stack 0
  2069                           
  2070                           ; 1 bytes @ 0x19
  2071  00004D                     	ds	1
  2072  00004E                     putchar_b_buf@x:
  2073                           	opt stack 0
  2074  00004E                     DS3231_Write@address:
  2075                           	opt stack 0
  2076                           
  2077                           ; 1 bytes @ 0x1A
  2078  00004E                     	ds	1
  2079  00004F                     putchar_b_buf@j:
  2080                           	opt stack 0
  2081  00004F                     setTime@mSet:
  2082                           	opt stack 0
  2083  00004F                     setDate@dateSet:
  2084                           	opt stack 0
  2085                           
  2086                           ; 1 bytes @ 0x1B
  2087  00004F                     	ds	1
  2088  000050                     putchar_b_buf@i:
  2089                           	opt stack 0
  2090  000050                     setTime@sSet:
  2091                           	opt stack 0
  2092  000050                     setDate@monthSet:
  2093                           	opt stack 0
  2094                           
  2095                           ; 1 bytes @ 0x1C
  2096  000050                     	ds	1
  2097  000051                     setTime@hSet:
  2098                           	opt stack 0
  2099  000051                     setDate@yearSet:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x1D
  2103  000051                     	ds	1
  2104  000052                     setDate@daySet:
  2105                           	opt stack 0
  2106                           
  2107                           ; 1 bytes @ 0x1E
  2108  000052                     	ds	1
  2109  000053                     ??_RTOS_DispatchTask:
  2110  000053                     
  2111                           ; 1 bytes @ 0x1F
  2112  000053                     	ds	4
  2113  000057                     RTOS_DispatchTask@function:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x23
  2117  000057                     	ds	2
  2118  000059                     RTOS_DispatchTask@j:
  2119                           	opt stack 0
  2120                           
  2121                           ; 1 bytes @ 0x25
  2122  000059                     	ds	1
  2123  00005A                     RTOS_DispatchTask@i:
  2124                           	opt stack 0
  2125                           
  2126                           ; 1 bytes @ 0x26
  2127  00005A                     	ds	1
  2128  00005B                     ??_main:
  2129                           
  2130                           ; 1 bytes @ 0x27
  2131  00005B                     	ds	1
  2132                           tosu	equ	0xFFF
  2133                           tosh	equ	0xFFE
  2134                           tosl	equ	0xFFD
  2135                           pclath	equ	0xFFA
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           intcon	equ	0xFF2
  2143                           intcon2	equ	0xFF1
  2144                           postinc0	equ	0xFEE
  2145                           wreg	equ	0xFE8
  2146                           indf1	equ	0xFE7
  2147                           plusw1	equ	0xFE3
  2148                           fsr1h	equ	0xFE2
  2149                           fsr1l	equ	0xFE1
  2150                           indf2	equ	0xFDF
  2151                           postinc2	equ	0xFDE
  2152                           postdec2	equ	0xFDD
  2153                           plusw2	equ	0xFDB
  2154                           fsr2h	equ	0xFDA
  2155                           fsr2l	equ	0xFD9
  2156                           status	equ	0xFD8
  2157                           
  2158 ;;
  2159 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2160 ;;
  2161 ;; *************** function _main *****************
  2162 ;; Defined at:
  2163 ;;		line 19 in file "main.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;Total ram usage:        1 bytes
  2182 ;; Hardware stack levels required when called:    9
  2183 ;; This function calls:
  2184 ;;		_RTOS_DispatchTask
  2185 ;;		_RTOS_SetTask
  2186 ;;		_SYSTEM_Initialize
  2187 ;;		_clear_matrix
  2188 ;;		_version
  2189 ;; This function is called by:
  2190 ;;		Startup code after reset
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text0
  2195  000E48                     __ptext0:
  2196                           	opt stack 0
  2197  000E48                     _main:
  2198                           	opt stack 22
  2199                           
  2200                           ;main.c: 20: _delay((unsigned long)((10)*(40000000/4000.0)));
  2201                           
  2202                           ;incstack = 0
  2203  000E48  0E82               	movlw	130
  2204  000E4A  6E5B               	movwf	??_main& (0+255),c
  2205  000E4C  0EDE               	movlw	222
  2206  000E4E                     u1947:
  2207  000E4E  2EE8               	decfsz	wreg,f,c
  2208  000E50  D7FE               	bra	u1947
  2209  000E52  2E5B               	decfsz	??_main& (0+255),f,c
  2210  000E54  D7FC               	bra	u1947
  2211                           
  2212                           ;main.c: 21: SYSTEM_Initialize();
  2213  000E56  EC24  F009         	call	_SYSTEM_Initialize	;wreg free
  2214                           
  2215                           ;main.c: 23: clear_matrix();
  2216  000E5A  EC67  F009         	call	_clear_matrix	;wreg free
  2217                           
  2218                           ;main.c: 24: version();
  2219  000E5E  EC90  F007         	call	_version	;wreg free
  2220                           
  2221                           ;main.c: 26: (INTCONbits.GIE = 0);
  2222  000E62  9EF2               	bcf	intcon,7,c	;volatile
  2223                           
  2224                           ;main.c: 27: RTOS_SetTask(time_led, 100, 20);
  2225  000E64  0E2C               	movlw	low _time_led
  2226  000E66  6E42               	movwf	RTOS_SetTask@taskFunc,c
  2227  000E68  0E0A               	movlw	high _time_led
  2228  000E6A  6E43               	movwf	RTOS_SetTask@taskFunc+1,c
  2229  000E6C  6A45               	clrf	RTOS_SetTask@taskDelay+1,c
  2230  000E6E  0E64               	movlw	100
  2231  000E70  6E44               	movwf	RTOS_SetTask@taskDelay,c
  2232  000E72  6A47               	clrf	RTOS_SetTask@taskPeriod+1,c
  2233  000E74  0E14               	movlw	20
  2234  000E76  6E46               	movwf	RTOS_SetTask@taskPeriod,c
  2235  000E78  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  2236                           
  2237                           ;main.c: 28: RTOS_SetTask(key_press,0,1);
  2238  000E7C  0EDC               	movlw	low _key_press
  2239  000E7E  6E42               	movwf	RTOS_SetTask@taskFunc,c
  2240  000E80  0E0E               	movlw	high _key_press
  2241  000E82  ECB9  F004         	call	PL34	;call to abstracted procedure
  2242  000E86  0E01               	movlw	1
  2243  000E88  6E46               	movwf	RTOS_SetTask@taskPeriod,c
  2244  000E8A  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  2245                           
  2246                           ;main.c: 29: (INTCONbits.GIE = 1);
  2247  000E8E  8EF2               	bsf	intcon,7,c	;volatile
  2248  000E90                     l3367:
  2249                           
  2250                           ;main.c: 32: {
  2251                           ;main.c: 33: RTOS_DispatchTask();
  2252  000E90  ECEC  F003         	call	_RTOS_DispatchTask	;wreg free
  2253  000E94  D7FD               	goto	l3367
  2254  000E96                     __end_of_main:
  2255                           	opt stack 0
  2256                           tosu	equ	0xFFF
  2257                           tosh	equ	0xFFE
  2258                           tosl	equ	0xFFD
  2259                           pclath	equ	0xFFA
  2260                           tblptru	equ	0xFF8
  2261                           tblptrh	equ	0xFF7
  2262                           tblptrl	equ	0xFF6
  2263                           tablat	equ	0xFF5
  2264                           prodh	equ	0xFF4
  2265                           prodl	equ	0xFF3
  2266                           intcon	equ	0xFF2
  2267                           intcon2	equ	0xFF1
  2268                           postinc0	equ	0xFEE
  2269                           wreg	equ	0xFE8
  2270                           indf1	equ	0xFE7
  2271                           plusw1	equ	0xFE3
  2272                           fsr1h	equ	0xFE2
  2273                           fsr1l	equ	0xFE1
  2274                           indf2	equ	0xFDF
  2275                           postinc2	equ	0xFDE
  2276                           postdec2	equ	0xFDD
  2277                           plusw2	equ	0xFDB
  2278                           fsr2h	equ	0xFDA
  2279                           fsr2l	equ	0xFD9
  2280                           status	equ	0xFD8
  2281                           
  2282 ;; *************** function _version *****************
  2283 ;; Defined at:
  2284 ;;		line 463 in file "common.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;		None
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  i               1   21[COMRAM] unsigned char 
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;Total ram usage:        2 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    5
  2305 ;; This function calls:
  2306 ;;		_Update_Matrix
  2307 ;;		_scroll_text
  2308 ;;		_sprintf
  2309 ;; This function is called by:
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text1
  2315  000F20                     __ptext1:
  2316                           	opt stack 0
  2317  000F20                     _version:
  2318                           	opt stack 25
  2319                           
  2320                           ;common.c: 465: uint8_t i;
  2321                           ;common.c: 467: sprintf(text_buf, "Clock v1.0 by Ivan_fd");
  2322                           
  2323                           ;incstack = 0
  2324  000F20  0E00               	movlw	low _text_buf
  2325  000F22  6E42               	movwf	sprintf@sp,c
  2326  000F24  0E01               	movlw	high _text_buf
  2327  000F26  6E43               	movwf	sprintf@sp+1,c
  2328  000F28  0EE8               	movlw	low STR_1
  2329  000F2A  6E44               	movwf	sprintf@f,c
  2330  000F2C  0EBF               	movlw	high STR_1
  2331  000F2E  6E45               	movwf	sprintf@f+1,c
  2332  000F30  EC1F  F008         	call	_sprintf	;wreg free
  2333                           
  2334                           ;common.c: 468: while(scroll_text())
  2335  000F34  D010               	goto	l3317
  2336  000F36                     l3305:
  2337                           
  2338                           ;common.c: 469: {
  2339                           ;common.c: 470: Update_Matrix(Dis_Buff);
  2340  000F36  0E0D               	movlw	low _Dis_Buff
  2341  000F38  6E44               	movwf	Update_Matrix@buf,c
  2342  000F3A  ECB0  F007         	call	_Update_Matrix	;wreg free
  2343                           
  2344                           ;common.c: 471: for(i=0; i<60; i++)
  2345  000F3E  6A49               	clrf	version@i,c
  2346  000F40                     l3313:
  2347                           
  2348                           ;common.c: 472: _delay((unsigned long)((1)*(40000000/4000.0)));
  2349  000F40  0E0D               	movlw	13
  2350  000F42  6E48               	movwf	??_version& (0+255),c
  2351  000F44  0EFC               	movlw	252
  2352  000F46                     u1957:
  2353  000F46  2EE8               	decfsz	wreg,f,c
  2354  000F48  D7FE               	bra	u1957
  2355  000F4A  2E48               	decfsz	??_version& (0+255),f,c
  2356  000F4C  D7FC               	bra	u1957
  2357  000F4E  2A49               	incf	version@i,f,c
  2358  000F50  0E3B               	movlw	59
  2359  000F52  6449               	cpfsgt	version@i,c
  2360  000F54  D7F5               	goto	l3313
  2361  000F56                     l3317:
  2362  000F56  ECDF  F005         	call	_scroll_text	;wreg free
  2363  000F5A  0900               	iorlw	0
  2364  000F5C  E1EC               	bnz	l3305
  2365  000F5E  0012               	return		;funcret
  2366  000F60                     __end_of_version:
  2367                           	opt stack 0
  2368                           tosu	equ	0xFFF
  2369                           tosh	equ	0xFFE
  2370                           tosl	equ	0xFFD
  2371                           pclath	equ	0xFFA
  2372                           tblptru	equ	0xFF8
  2373                           tblptrh	equ	0xFF7
  2374                           tblptrl	equ	0xFF6
  2375                           tablat	equ	0xFF5
  2376                           prodh	equ	0xFF4
  2377                           prodl	equ	0xFF3
  2378                           intcon	equ	0xFF2
  2379                           intcon2	equ	0xFF1
  2380                           postinc0	equ	0xFEE
  2381                           wreg	equ	0xFE8
  2382                           indf1	equ	0xFE7
  2383                           plusw1	equ	0xFE3
  2384                           fsr1h	equ	0xFE2
  2385                           fsr1l	equ	0xFE1
  2386                           indf2	equ	0xFDF
  2387                           postinc2	equ	0xFDE
  2388                           postdec2	equ	0xFDD
  2389                           plusw2	equ	0xFDB
  2390                           fsr2h	equ	0xFDA
  2391                           fsr2l	equ	0xFD9
  2392                           status	equ	0xFD8
  2393                           
  2394 ;; *************** function _sprintf *****************
  2395 ;; Defined at:
  2396 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  sp              2   14[COMRAM] PTR unsigned char 
  2399 ;;		 -> text_buf(100), 
  2400 ;;  f               2   16[COMRAM] PTR const unsigned char 
  2401 ;;		 -> STR_1(22), 
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  tmpval          4    0        struct .
  2404 ;;  cp              3    0        PTR const unsigned char 
  2405 ;;  len             2    0        unsigned int 
  2406 ;;  val             2    0        unsigned int 
  2407 ;;  c               1   18[COMRAM] char 
  2408 ;;  flag            1    0        unsigned char 
  2409 ;;  prec            1    0        char 
  2410 ;;  ap              1    0        PTR void [1]
  2411 ;;		 -> ?_sprintf(2), 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  2   14[COMRAM] int 
  2414 ;; Registers used:
  2415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;Total ram usage:        5 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    3
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_version
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text2
  2436  00103E                     __ptext2:
  2437                           	opt stack 0
  2438  00103E                     _sprintf:
  2439                           	opt stack 26
  2440                           
  2441                           ;doprnt.c: 536: while(c = *f++) {
  2442                           
  2443                           ;incstack = 0
  2444  00103E  D005               	goto	l3235
  2445  001040                     l3231:
  2446                           
  2447                           ;doprnt.c: 540: {
  2448                           ;doprnt.c: 541: ((*sp++ = (c)));
  2449  001040  D812               	call	PL70	;call to abstracted procedure
  2450  001042  C046  FFDF         	movff	sprintf@c,indf2
  2451  001046  4A42               	infsnz	sprintf@sp,f,c
  2452  001048  2A43               	incf	sprintf@sp+1,f,c
  2453  00104A                     l3235:
  2454  00104A  C044  FFF6         	movff	sprintf@f,tblptrl
  2455  00104E  C045  FFF7         	movff	sprintf@f+1,tblptrh
  2456  001052  4A44               	infsnz	sprintf@f,f,c
  2457  001054  2A45               	incf	sprintf@f+1,f,c
  2458  001056                     	if	0	;tblptru may be non-zero
  2459  001056                     	endif
  2460  001056                     	if	0	;tblptru may be non-zero
  2461  001056                     	endif
  2462  001056  0008               	tblrd		*
  2463  001058  CFF5 F046          	movff	tablat,sprintf@c
  2464  00105C  5046               	movf	sprintf@c,w,c
  2465  00105E  E1F0               	bnz	l3231
  2466                           
  2467                           ;doprnt.c: 1469: }
  2468                           ;doprnt.c: 1533: }
  2469                           ;doprnt.c: 1538: *sp = 0;
  2470  001060  D802               	call	PL70	;call to abstracted procedure
  2471  001062  6ADF               	clrf	indf2,c
  2472  001064  0C00               	retlw	0	;funcret
  2473  001066                     __end_of_sprintf:
  2474                           	opt stack 0
  2475  001066                     PL70:
  2476                           	opt stack 26
  2477  001066  C042  FFD9         	movff	sprintf@sp,fsr2l
  2478  00106A  C043  FFDA         	movff	sprintf@sp+1,fsr2h
  2479  00106E  0012               	return	
  2480  001070                     __end_ofPL70:
  2481                           	opt stack 0
  2482                           tosu	equ	0xFFF
  2483                           tosh	equ	0xFFE
  2484                           tosl	equ	0xFFD
  2485                           pclath	equ	0xFFA
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           intcon	equ	0xFF2
  2493                           intcon2	equ	0xFF1
  2494                           postinc0	equ	0xFEE
  2495                           wreg	equ	0xFE8
  2496                           indf1	equ	0xFE7
  2497                           plusw1	equ	0xFE3
  2498                           fsr1h	equ	0xFE2
  2499                           fsr1l	equ	0xFE1
  2500                           indf2	equ	0xFDF
  2501                           postinc2	equ	0xFDE
  2502                           postdec2	equ	0xFDD
  2503                           plusw2	equ	0xFDB
  2504                           fsr2h	equ	0xFDA
  2505                           fsr2l	equ	0xFD9
  2506                           status	equ	0xFD8
  2507                           
  2508 ;; *************** function _scroll_text *****************
  2509 ;; Defined at:
  2510 ;;		line 229 in file "display.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;  i               1   16[COMRAM] unsigned char 
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      unsigned char 
  2517 ;; Registers used:
  2518 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;Total ram usage:        3 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    3
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_version
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text3
  2539  000BBE                     __ptext3:
  2540                           	opt stack 0
  2541  000BBE                     _scroll_text:
  2542                           	opt stack 26
  2543                           
  2544                           ;display.c: 231: uint8_t i;
  2545                           ;display.c: 233: for (i=0; i<31; i++)
  2546                           
  2547                           ;incstack = 0
  2548  000BBE  6A44               	clrf	scroll_text@i,c
  2549  000BC0                     l2807:
  2550                           
  2551                           ;display.c: 234: Dis_Buff[i] = Dis_Buff[i+1];
  2552  000BC0  5044               	movf	scroll_text@i,w,c
  2553  000BC2  0F0E               	addlw	low (_Dis_Buff+1)
  2554  000BC4  6ED9               	movwf	fsr2l,c
  2555  000BC6  6ADA               	clrf	fsr2h,c
  2556  000BC8  5044               	movf	scroll_text@i,w,c
  2557  000BCA  0F0D               	addlw	low _Dis_Buff
  2558  000BCC  6EE1               	movwf	fsr1l,c
  2559  000BCE  6AE2               	clrf	fsr1h,c
  2560  000BD0  CFDF FFE7          	movff	indf2,indf1
  2561  000BD4  2A44               	incf	scroll_text@i,f,c
  2562  000BD6  0E1E               	movlw	30
  2563  000BD8  6444               	cpfsgt	scroll_text@i,c
  2564  000BDA  D7F2               	goto	l2807
  2565                           
  2566                           ;display.c: 236: if ((i_bchar) >= 5)
  2567  000BDC  0E04               	movlw	4
  2568  000BDE  6409               	cpfsgt	_i_bchar,c
  2569  000BE0  D00D               	goto	l2829
  2570                           
  2571                           ;display.c: 237: {
  2572                           ;display.c: 238: if (text_buf[i_char] == 0)
  2573  000BE2  D823               	call	PL32	;call to abstracted procedure
  2574  000BE4  E107               	bnz	l425
  2575                           
  2576                           ;display.c: 239: {
  2577                           ;display.c: 240: i_bchar++;
  2578  000BE6  2A09               	incf	_i_bchar,f,c
  2579                           
  2580                           ;display.c: 241: if (i_bchar >= 32)
  2581  000BE8  0E1F               	movlw	31
  2582  000BEA  6409               	cpfsgt	_i_bchar,c
  2583  000BEC  0C01               	retlw	1
  2584                           
  2585                           ;display.c: 242: {
  2586                           ;display.c: 243: i_char = 0;
  2587  000BEE  6A0A               	clrf	_i_char,c
  2588                           
  2589                           ;display.c: 244: i_bchar = 0;
  2590  000BF0  6A09               	clrf	_i_bchar,c
  2591                           
  2592                           ;display.c: 245: return 0;
  2593  000BF2  0C00               	retlw	0
  2594  000BF4                     l425:
  2595                           
  2596                           ;display.c: 248: else
  2597                           ;display.c: 249: {
  2598                           ;display.c: 250: Dis_Buff[31] = 0;
  2599  000BF4  6A2C               	clrf	_Dis_Buff+31,c
  2600                           
  2601                           ;display.c: 251: i_bchar = 0;
  2602  000BF6  6A09               	clrf	_i_bchar,c
  2603                           
  2604                           ;display.c: 252: i_char++;
  2605  000BF8  2A0A               	incf	_i_char,f,c
  2606  000BFA  0C01               	retlw	1
  2607  000BFC                     l2829:
  2608                           
  2609                           ;display.c: 255: else
  2610                           ;display.c: 256: {
  2611                           ;display.c: 257: Dis_Buff[31] = Font[ text_buf[i_char]][i_bchar++];
  2612  000BFC  D816               	call	PL32	;call to abstracted procedure
  2613  000BFE  0D05               	mullw	5
  2614  000C00  0EC7               	movlw	low _Font
  2615  000C02  6E42               	movwf	??_scroll_text& (0+255),c
  2616  000C04  0EBA               	movlw	high _Font
  2617  000C06  6E43               	movwf	(??_scroll_text+1)& (0+255),c
  2618  000C08  50F3               	movf	prodl,w,c
  2619  000C0A  2642               	addwf	??_scroll_text,f,c
  2620  000C0C  50F4               	movf	prodh,w,c
  2621  000C0E  2243               	addwfc	??_scroll_text+1,f,c
  2622  000C10  5009               	movf	_i_bchar,w,c
  2623  000C12  2642               	addwf	??_scroll_text,f,c
  2624  000C14  0E00               	movlw	0
  2625  000C16  2243               	addwfc	??_scroll_text+1,f,c
  2626  000C18  C042  FFF6         	movff	??_scroll_text,tblptrl
  2627  000C1C  C043  FFF7         	movff	??_scroll_text+1,tblptrh
  2628  000C20                     	if	0	;tblptru may be non-zero
  2629  000C20                     	endif
  2630  000C20                     	if	0	;tblptru may be non-zero
  2631  000C20                     	endif
  2632  000C20  0008               	tblrd		*
  2633  000C22  CFF5 F02C          	movff	tablat,_Dis_Buff+31
  2634  000C26  2A09               	incf	_i_bchar,f,c
  2635                           
  2636                           ;display.c: 259: }
  2637                           ;display.c: 263: return 1;
  2638  000C28  0C01               	retlw	1	;funcret
  2639  000C2A                     __end_of_scroll_text:
  2640                           	opt stack 0
  2641  000C2A                     PL32:
  2642                           	opt stack 26
  2643  000C2A  0E00               	movlw	low _text_buf
  2644  000C2C  240A               	addwf	_i_char,w,c
  2645  000C2E  6ED9               	movwf	fsr2l,c
  2646  000C30  6ADA               	clrf	fsr2h,c
  2647  000C32  0E01               	movlw	high _text_buf
  2648  000C34  22DA               	addwfc	fsr2h,f,c
  2649  000C36  50DF               	movf	indf2,w,c
  2650  000C38  0012               	return	
  2651  000C3A                     __end_ofPL32:
  2652                           	opt stack 0
  2653                           tosu	equ	0xFFF
  2654                           tosh	equ	0xFFE
  2655                           tosl	equ	0xFFD
  2656                           pclath	equ	0xFFA
  2657                           tblptru	equ	0xFF8
  2658                           tblptrh	equ	0xFF7
  2659                           tblptrl	equ	0xFF6
  2660                           tablat	equ	0xFF5
  2661                           prodh	equ	0xFF4
  2662                           prodl	equ	0xFF3
  2663                           intcon	equ	0xFF2
  2664                           intcon2	equ	0xFF1
  2665                           postinc0	equ	0xFEE
  2666                           wreg	equ	0xFE8
  2667                           indf1	equ	0xFE7
  2668                           plusw1	equ	0xFE3
  2669                           fsr1h	equ	0xFE2
  2670                           fsr1l	equ	0xFE1
  2671                           indf2	equ	0xFDF
  2672                           postinc2	equ	0xFDE
  2673                           postdec2	equ	0xFDD
  2674                           plusw2	equ	0xFDB
  2675                           fsr2h	equ	0xFDA
  2676                           fsr2l	equ	0xFD9
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _SYSTEM_Initialize *****************
  2680 ;; Defined at:
  2681 ;;		line 64 in file "init.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  1    wreg      void 
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;Total ram usage:        0 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    7
  2702 ;; This function calls:
  2703 ;;		_DS3231_init
  2704 ;;		_I2C_Init
  2705 ;;		_Init7221
  2706 ;;		_Interrupt_Init
  2707 ;;		_Port_Init
  2708 ;;		_RTOS_Init
  2709 ;;		_TMR1Init
  2710 ;; This function is called by:
  2711 ;;		_main
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text4
  2716  001248                     __ptext4:
  2717                           	opt stack 0
  2718  001248                     _SYSTEM_Initialize:
  2719                           	opt stack 23
  2720                           
  2721                           ;init.c: 67: Port_Init();
  2722                           
  2723                           ;incstack = 0
  2724  001248  EC32  F009         	call	_Port_Init	;wreg free
  2725                           
  2726                           ;init.c: 68: I2C_Init();
  2727  00124C  EC5B  F009         	call	_I2C_Init	;wreg free
  2728                           
  2729                           ;init.c: 69: TMR1Init();
  2730  001250  EC99  F009         	call	_TMR1Init	;wreg free
  2731                           
  2732                           ;init.c: 70: Interrupt_Init();
  2733  001254  ECBE  F009         	call	_Interrupt_Init	;wreg free
  2734                           
  2735                           ;init.c: 71: Init7221();
  2736  001258  EC38  F008         	call	_Init7221	;wreg free
  2737                           
  2738                           ;init.c: 72: DS3231_init();
  2739  00125C  EC87  F009         	call	_DS3231_init	;wreg free
  2740                           
  2741                           ;init.c: 73: RTOS_Init();
  2742  001260  EFA1  F009         	goto	_RTOS_Init	;wreg free
  2743  001264                     __end_of_SYSTEM_Initialize:
  2744                           	opt stack 0
  2745                           tosu	equ	0xFFF
  2746                           tosh	equ	0xFFE
  2747                           tosl	equ	0xFFD
  2748                           pclath	equ	0xFFA
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           intcon	equ	0xFF2
  2756                           intcon2	equ	0xFF1
  2757                           postinc0	equ	0xFEE
  2758                           wreg	equ	0xFE8
  2759                           indf1	equ	0xFE7
  2760                           plusw1	equ	0xFE3
  2761                           fsr1h	equ	0xFE2
  2762                           fsr1l	equ	0xFE1
  2763                           indf2	equ	0xFDF
  2764                           postinc2	equ	0xFDE
  2765                           postdec2	equ	0xFDD
  2766                           plusw2	equ	0xFDB
  2767                           fsr2h	equ	0xFDA
  2768                           fsr2l	equ	0xFD9
  2769                           status	equ	0xFD8
  2770                           
  2771 ;; *************** function _TMR1Init *****************
  2772 ;; Defined at:
  2773 ;;		line 5 in file "timer.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    3
  2794 ;; This function calls:
  2795 ;;		Nothing
  2796 ;; This function is called by:
  2797 ;;		_SYSTEM_Initialize
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text5
  2802  001332                     __ptext5:
  2803                           	opt stack 0
  2804  001332                     _TMR1Init:
  2805                           	opt stack 26
  2806                           
  2807                           ;timer.c: 7: T1CON = 0b00000001;
  2808                           
  2809                           ;incstack = 0
  2810  001332  0E01               	movlw	1
  2811  001334  6ECD               	movwf	4045,c	;volatile
  2812                           
  2813                           ;timer.c: 8: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  2814  001336  0E3C               	movlw	60
  2815  001338  6ECF               	movwf	4047,c	;volatile
  2816                           
  2817                           ;timer.c: 9: TMR1L = ((unsigned char)((15536)&0xFF));
  2818  00133A  0EB0               	movlw	176
  2819  00133C  6ECE               	movwf	4046,c	;volatile
  2820                           
  2821                           ;timer.c: 10: PIE1bits.TMR1IE = 1;
  2822  00133E  809D               	bsf	3997,0,c	;volatile
  2823  001340  0CB0               	retlw	176	;funcret
  2824  001342                     __end_of_TMR1Init:
  2825                           	opt stack 0
  2826                           tosu	equ	0xFFF
  2827                           tosh	equ	0xFFE
  2828                           tosl	equ	0xFFD
  2829                           pclath	equ	0xFFA
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           intcon	equ	0xFF2
  2837                           intcon2	equ	0xFF1
  2838                           postinc0	equ	0xFEE
  2839                           wreg	equ	0xFE8
  2840                           indf1	equ	0xFE7
  2841                           plusw1	equ	0xFE3
  2842                           fsr1h	equ	0xFE2
  2843                           fsr1l	equ	0xFE1
  2844                           indf2	equ	0xFDF
  2845                           postinc2	equ	0xFDE
  2846                           postdec2	equ	0xFDD
  2847                           plusw2	equ	0xFDB
  2848                           fsr2h	equ	0xFDA
  2849                           fsr2l	equ	0xFD9
  2850                           status	equ	0xFD8
  2851                           
  2852 ;; *************** function _RTOS_Init *****************
  2853 ;; Defined at:
  2854 ;;		line 10 in file "dispatcher.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;		None
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;		None
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;Total ram usage:        0 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    3
  2875 ;; This function calls:
  2876 ;;		Nothing
  2877 ;; This function is called by:
  2878 ;;		_SYSTEM_Initialize
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text6
  2883  001342                     __ptext6:
  2884                           	opt stack 0
  2885  001342                     _RTOS_Init:
  2886                           	opt stack 26
  2887                           
  2888                           ;dispatcher.c: 12: T0CON = 0b11000111;
  2889                           
  2890                           ;incstack = 0
  2891  001342  0EC7               	movlw	199
  2892  001344  6ED5               	movwf	4053,c	;volatile
  2893                           
  2894                           ;dispatcher.c: 13: INTCONbits.TMR0IE = 1;
  2895  001346  8AF2               	bsf	intcon,5,c	;volatile
  2896                           
  2897                           ;dispatcher.c: 14: TMR0 = 61;
  2898  001348  6AD7               	clrf	4055,c	;volatile
  2899  00134A  0E3D               	movlw	61
  2900  00134C  6ED6               	movwf	4054,c	;volatile
  2901                           
  2902                           ;dispatcher.c: 16: arrayTail = 0;
  2903  00134E  6A0C               	clrf	_arrayTail,c	;volatile
  2904  001350  0012               	return		;funcret
  2905  001352                     __end_of_RTOS_Init:
  2906                           	opt stack 0
  2907                           tosu	equ	0xFFF
  2908                           tosh	equ	0xFFE
  2909                           tosl	equ	0xFFD
  2910                           pclath	equ	0xFFA
  2911                           tblptru	equ	0xFF8
  2912                           tblptrh	equ	0xFF7
  2913                           tblptrl	equ	0xFF6
  2914                           tablat	equ	0xFF5
  2915                           prodh	equ	0xFF4
  2916                           prodl	equ	0xFF3
  2917                           intcon	equ	0xFF2
  2918                           intcon2	equ	0xFF1
  2919                           postinc0	equ	0xFEE
  2920                           wreg	equ	0xFE8
  2921                           indf1	equ	0xFE7
  2922                           plusw1	equ	0xFE3
  2923                           fsr1h	equ	0xFE2
  2924                           fsr1l	equ	0xFE1
  2925                           indf2	equ	0xFDF
  2926                           postinc2	equ	0xFDE
  2927                           postdec2	equ	0xFDD
  2928                           plusw2	equ	0xFDB
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _Port_Init *****************
  2934 ;; Defined at:
  2935 ;;		line 77 in file "init.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2, status,0
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;Total ram usage:        0 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    3
  2956 ;; This function calls:
  2957 ;;		Nothing
  2958 ;; This function is called by:
  2959 ;;		_SYSTEM_Initialize
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text7
  2964  001264                     __ptext7:
  2965                           	opt stack 0
  2966  001264                     _Port_Init:
  2967                           	opt stack 26
  2968                           
  2969                           ;init.c: 79: LATC = 0x00;
  2970                           
  2971                           ;incstack = 0
  2972  001264  6A8B               	clrf	3979,c	;volatile
  2973                           
  2974                           ;init.c: 80: TRISC = 0b00011000;
  2975  001266  0E18               	movlw	24
  2976  001268  6E94               	movwf	3988,c	;volatile
  2977                           
  2978                           ;init.c: 81: LATB = 0x00;
  2979  00126A  6A8A               	clrf	3978,c	;volatile
  2980                           
  2981                           ;init.c: 82: TRISB = 0b00011111;
  2982  00126C  0E1F               	movlw	31
  2983  00126E  6E93               	movwf	3987,c	;volatile
  2984                           
  2985                           ;init.c: 83: INTCON2 &= (~(1<<7));
  2986  001270  9EF1               	bcf	intcon2,7,c	;volatile
  2987                           
  2988                           ;init.c: 84: LATD = 0x00;
  2989  001272  6A8C               	clrf	3980,c	;volatile
  2990                           
  2991                           ;init.c: 85: TRISD = 0x00;
  2992  001274  6A95               	clrf	3989,c	;volatile
  2993                           
  2994                           ;init.c: 86: INTCON2bits.INTEDG0 = 1;
  2995  001276  8CF1               	bsf	intcon2,6,c	;volatile
  2996                           
  2997                           ;init.c: 87: INTCONbits.INT0IF = 0;
  2998  001278  92F2               	bcf	intcon,1,c	;volatile
  2999                           
  3000                           ;init.c: 88: INTCONbits.INT0IE = 1;
  3001  00127A  88F2               	bsf	intcon,4,c	;volatile
  3002                           
  3003                           ;init.c: 89: PORTCbits.RC0 = 1;
  3004  00127C  8082               	bsf	3970,0,c	;volatile
  3005  00127E  0012               	return		;funcret
  3006  001280                     __end_of_Port_Init:
  3007                           	opt stack 0
  3008                           tosu	equ	0xFFF
  3009                           tosh	equ	0xFFE
  3010                           tosl	equ	0xFFD
  3011                           pclath	equ	0xFFA
  3012                           tblptru	equ	0xFF8
  3013                           tblptrh	equ	0xFF7
  3014                           tblptrl	equ	0xFF6
  3015                           tablat	equ	0xFF5
  3016                           prodh	equ	0xFF4
  3017                           prodl	equ	0xFF3
  3018                           intcon	equ	0xFF2
  3019                           intcon2	equ	0xFF1
  3020                           postinc0	equ	0xFEE
  3021                           wreg	equ	0xFE8
  3022                           indf1	equ	0xFE7
  3023                           plusw1	equ	0xFE3
  3024                           fsr1h	equ	0xFE2
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           plusw2	equ	0xFDB
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _Interrupt_Init *****************
  3035 ;; Defined at:
  3036 ;;		line 92 in file "init.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		None
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;Total ram usage:        0 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    3
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_SYSTEM_Initialize
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text8
  3065  00137C                     __ptext8:
  3066                           	opt stack 0
  3067  00137C                     _Interrupt_Init:
  3068                           	opt stack 26
  3069                           
  3070                           ;init.c: 94: (INTCONbits.GIE = 1);
  3071                           
  3072                           ;incstack = 0
  3073  00137C  8EF2               	bsf	intcon,7,c	;volatile
  3074                           
  3075                           ;init.c: 95: (INTCONbits.PEIE = 1);
  3076  00137E  8CF2               	bsf	intcon,6,c	;volatile
  3077  001380  0012               	return		;funcret
  3078  001382                     __end_of_Interrupt_Init:
  3079                           	opt stack 0
  3080                           tosu	equ	0xFFF
  3081                           tosh	equ	0xFFE
  3082                           tosl	equ	0xFFD
  3083                           pclath	equ	0xFFA
  3084                           tblptru	equ	0xFF8
  3085                           tblptrh	equ	0xFF7
  3086                           tblptrl	equ	0xFF6
  3087                           tablat	equ	0xFF5
  3088                           prodh	equ	0xFF4
  3089                           prodl	equ	0xFF3
  3090                           intcon	equ	0xFF2
  3091                           intcon2	equ	0xFF1
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           indf1	equ	0xFE7
  3095                           plusw1	equ	0xFE3
  3096                           fsr1h	equ	0xFE2
  3097                           fsr1l	equ	0xFE1
  3098                           indf2	equ	0xFDF
  3099                           postinc2	equ	0xFDE
  3100                           postdec2	equ	0xFDD
  3101                           plusw2	equ	0xFDB
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function _Init7221 *****************
  3107 ;; Defined at:
  3108 ;;		line 77 in file "max7221.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      void 
  3115 ;; Registers used:
  3116 ;;		wreg, status,2, status,0, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;Total ram usage:        0 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    5
  3129 ;; This function calls:
  3130 ;;		_Cmd7221
  3131 ;; This function is called by:
  3132 ;;		_SYSTEM_Initialize
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text9
  3137  001070                     __ptext9:
  3138                           	opt stack 0
  3139  001070                     _Init7221:
  3140                           	opt stack 24
  3141                           
  3142                           ;max7221.c: 79: LATDbits.LD0 = 1;
  3143                           
  3144                           ;incstack = 0
  3145  001070  808C               	bsf	3980,0,c	;volatile
  3146                           
  3147                           ;max7221.c: 81: Cmd7221(0x0C,1);
  3148  001072  0E01               	movlw	1
  3149  001074  6E44               	movwf	Cmd7221@val,c
  3150  001076  0E0C               	movlw	12
  3151  001078  EC15  F009         	call	_Cmd7221
  3152                           
  3153                           ;max7221.c: 82: Cmd7221(0x09,0);
  3154  00107C  6A44               	clrf	Cmd7221@val,c
  3155  00107E  0E09               	movlw	9
  3156  001080  EC15  F009         	call	_Cmd7221
  3157                           
  3158                           ;max7221.c: 83: Cmd7221(0x0B,7);
  3159  001084  0E07               	movlw	7
  3160  001086  6E44               	movwf	Cmd7221@val,c
  3161  001088  0E0B               	movlw	11
  3162  00108A  EC15  F009         	call	_Cmd7221
  3163                           
  3164                           ;max7221.c: 84: Cmd7221(0x0A,0x01);
  3165  00108E  0E01               	movlw	1
  3166  001090  6E44               	movwf	Cmd7221@val,c
  3167  001092  0E0A               	movlw	10
  3168  001094  EC15  F009         	call	_Cmd7221
  3169                           
  3170                           ;max7221.c: 85: Cmd7221(0x0F,0);
  3171  001098  6A44               	clrf	Cmd7221@val,c
  3172  00109A  0E0F               	movlw	15
  3173  00109C  EF15  F009         	goto	_Cmd7221
  3174  0010A0                     __end_of_Init7221:
  3175                           	opt stack 0
  3176                           tosu	equ	0xFFF
  3177                           tosh	equ	0xFFE
  3178                           tosl	equ	0xFFD
  3179                           pclath	equ	0xFFA
  3180                           tblptru	equ	0xFF8
  3181                           tblptrh	equ	0xFF7
  3182                           tblptrl	equ	0xFF6
  3183                           tablat	equ	0xFF5
  3184                           prodh	equ	0xFF4
  3185                           prodl	equ	0xFF3
  3186                           intcon	equ	0xFF2
  3187                           intcon2	equ	0xFF1
  3188                           postinc0	equ	0xFEE
  3189                           wreg	equ	0xFE8
  3190                           indf1	equ	0xFE7
  3191                           plusw1	equ	0xFE3
  3192                           fsr1h	equ	0xFE2
  3193                           fsr1l	equ	0xFE1
  3194                           indf2	equ	0xFDF
  3195                           postinc2	equ	0xFDE
  3196                           postdec2	equ	0xFDD
  3197                           plusw2	equ	0xFDB
  3198                           fsr2h	equ	0xFDA
  3199                           fsr2l	equ	0xFD9
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function _Cmd7221 *****************
  3203 ;; Defined at:
  3204 ;;		line 33 in file "max7221.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;  adr             1    wreg     unsigned char 
  3207 ;;  val             1   16[COMRAM] unsigned char 
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  adr             1   17[COMRAM] unsigned char 
  3210 ;;  i               1   18[COMRAM] unsigned char 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3220 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;Total ram usage:        3 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    4
  3227 ;; This function calls:
  3228 ;;		_Send_Byte_7221
  3229 ;; This function is called by:
  3230 ;;		_Init7221
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text10
  3235  00122A                     __ptext10:
  3236                           	opt stack 0
  3237  00122A                     _Cmd7221:
  3238                           	opt stack 24
  3239                           
  3240                           ;incstack = 0
  3241                           ;Cmd7221@adr stored from wreg
  3242  00122A  6E45               	movwf	Cmd7221@adr,c
  3243                           
  3244                           ;max7221.c: 35: uint8_t i;
  3245                           ;max7221.c: 36: LATDbits.LD0 = 0;
  3246  00122C  908C               	bcf	3980,0,c	;volatile
  3247                           
  3248                           ;max7221.c: 37: for (i = 0; i < 4; i++ )
  3249  00122E  6A46               	clrf	Cmd7221@i,c
  3250  001230                     l2639:
  3251                           
  3252                           ;max7221.c: 38: {
  3253                           ;max7221.c: 39: Send_Byte_7221(adr);
  3254  001230  5045               	movf	Cmd7221@adr,w,c
  3255  001232  EC03  F009         	call	_Send_Byte_7221
  3256                           
  3257                           ;max7221.c: 40: Send_Byte_7221(val);
  3258  001236  5044               	movf	Cmd7221@val,w,c
  3259  001238  EC03  F009         	call	_Send_Byte_7221
  3260  00123C  2A46               	incf	Cmd7221@i,f,c
  3261  00123E  0E03               	movlw	3
  3262  001240  6446               	cpfsgt	Cmd7221@i,c
  3263  001242  D7F6               	goto	l2639
  3264                           
  3265                           ;max7221.c: 42: }
  3266                           ;max7221.c: 44: LATDbits.LD0 = 1;
  3267  001244  808C               	bsf	3980,0,c	;volatile
  3268  001246  0C03               	retlw	3	;funcret
  3269  001248                     __end_of_Cmd7221:
  3270                           	opt stack 0
  3271                           tosu	equ	0xFFF
  3272                           tosh	equ	0xFFE
  3273                           tosl	equ	0xFFD
  3274                           pclath	equ	0xFFA
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           intcon	equ	0xFF2
  3282                           intcon2	equ	0xFF1
  3283                           postinc0	equ	0xFEE
  3284                           wreg	equ	0xFE8
  3285                           indf1	equ	0xFE7
  3286                           plusw1	equ	0xFE3
  3287                           fsr1h	equ	0xFE2
  3288                           fsr1l	equ	0xFE1
  3289                           indf2	equ	0xFDF
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           plusw2	equ	0xFDB
  3293                           fsr2h	equ	0xFDA
  3294                           fsr2l	equ	0xFD9
  3295                           status	equ	0xFD8
  3296                           
  3297 ;; *************** function _I2C_Init *****************
  3298 ;; Defined at:
  3299 ;;		line 11 in file "i2c.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;		None
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  1    wreg      void 
  3306 ;; Registers used:
  3307 ;;		wreg, status,2, status,0
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;Total ram usage:        0 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; Hardware stack levels required when called:    3
  3320 ;; This function calls:
  3321 ;;		Nothing
  3322 ;; This function is called by:
  3323 ;;		_SYSTEM_Initialize
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text11
  3328  0012B6                     __ptext11:
  3329                           	opt stack 0
  3330  0012B6                     _I2C_Init:
  3331                           	opt stack 26
  3332                           
  3333                           ;i2c.c: 13: TRISC |= 0b00011000;
  3334                           
  3335                           ;incstack = 0
  3336  0012B6  0E18               	movlw	24
  3337  0012B8  1294               	iorwf	3988,f,c	;volatile
  3338                           
  3339                           ;i2c.c: 14: SSPCON1 = 0b00101000;
  3340  0012BA  0E28               	movlw	40
  3341  0012BC  6EC6               	movwf	4038,c	;volatile
  3342                           
  3343                           ;i2c.c: 15: SSPSTAT = 0b10000000;
  3344  0012BE  0E80               	movlw	128
  3345  0012C0  6EC7               	movwf	4039,c	;volatile
  3346                           
  3347                           ;i2c.c: 17: SSPADD = 0x1F;
  3348  0012C2  0E1F               	movlw	31
  3349  0012C4  6EC8               	movwf	4040,c	;volatile
  3350                           
  3351                           ;i2c.c: 18: PEN = 1;
  3352  0012C6  84C5               	bsf	4037,2,c	;volatile
  3353  0012C8                     l136:
  3354  0012C8  A4C5               	btfss	4037,2,c	;volatile
  3355  0012CA  0012               	return		;funcret
  3356  0012CC  D7FD               	goto	l136
  3357  0012CE                     __end_of_I2C_Init:
  3358                           	opt stack 0
  3359                           tosu	equ	0xFFF
  3360                           tosh	equ	0xFFE
  3361                           tosl	equ	0xFFD
  3362                           pclath	equ	0xFFA
  3363                           tblptru	equ	0xFF8
  3364                           tblptrh	equ	0xFF7
  3365                           tblptrl	equ	0xFF6
  3366                           tablat	equ	0xFF5
  3367                           prodh	equ	0xFF4
  3368                           prodl	equ	0xFF3
  3369                           intcon	equ	0xFF2
  3370                           intcon2	equ	0xFF1
  3371                           postinc0	equ	0xFEE
  3372                           wreg	equ	0xFE8
  3373                           indf1	equ	0xFE7
  3374                           plusw1	equ	0xFE3
  3375                           fsr1h	equ	0xFE2
  3376                           fsr1l	equ	0xFE1
  3377                           indf2	equ	0xFDF
  3378                           postinc2	equ	0xFDE
  3379                           postdec2	equ	0xFDD
  3380                           plusw2	equ	0xFDB
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _DS3231_init *****************
  3386 ;; Defined at:
  3387 ;;		line 37 in file "ds3231.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;		None
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  1    wreg      void 
  3394 ;; Registers used:
  3395 ;;		wreg, status,2, status,0, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;Total ram usage:        0 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    6
  3408 ;; This function calls:
  3409 ;;		_DS3231_Write
  3410 ;; This function is called by:
  3411 ;;		_SYSTEM_Initialize
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text12
  3416  00130E                     __ptext12:
  3417                           	opt stack 0
  3418  00130E                     _DS3231_init:
  3419                           	opt stack 23
  3420                           
  3421                           ;ds3231.c: 39: DS3231_Write(0x0E, 0x00);
  3422                           
  3423                           ;incstack = 0
  3424  00130E  6A4D               	clrf	DS3231_Write@value,c
  3425  001310  0E0E               	movlw	14
  3426  001312  EC4E  F009         	call	_DS3231_Write
  3427                           
  3428                           ;ds3231.c: 40: DS3231_Write(0x0F, 0x08);
  3429  001316  0E08               	movlw	8
  3430  001318  6E4D               	movwf	DS3231_Write@value,c
  3431  00131A  0E0F               	movlw	15
  3432  00131C  EF4E  F009         	goto	_DS3231_Write
  3433  001320                     __end_of_DS3231_init:
  3434                           	opt stack 0
  3435                           tosu	equ	0xFFF
  3436                           tosh	equ	0xFFE
  3437                           tosl	equ	0xFFD
  3438                           pclath	equ	0xFFA
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           intcon	equ	0xFF2
  3446                           intcon2	equ	0xFF1
  3447                           postinc0	equ	0xFEE
  3448                           wreg	equ	0xFE8
  3449                           indf1	equ	0xFE7
  3450                           plusw1	equ	0xFE3
  3451                           fsr1h	equ	0xFE2
  3452                           fsr1l	equ	0xFE1
  3453                           indf2	equ	0xFDF
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           plusw2	equ	0xFDB
  3457                           fsr2h	equ	0xFDA
  3458                           fsr2l	equ	0xFD9
  3459                           status	equ	0xFD8
  3460                           
  3461 ;; *************** function _RTOS_DispatchTask *****************
  3462 ;; Defined at:
  3463 ;;		line 84 in file "dispatcher.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;		None
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  function        2   35[COMRAM] PTR FTN()void 
  3468 ;;		 -> time_set_dy(1), time_set_dt(1), time_set_mt(1), time_set_yr(1), 
  3469 ;;		 -> default_state(1), time_set_hr(1), time_set_min(1), GetTime(1), 
  3470 ;;		 -> key_press(1), time_led(1), 
  3471 ;;  i               1   38[COMRAM] unsigned char 
  3472 ;;  j               1   37[COMRAM] unsigned char 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      void 
  3475 ;; Registers used:
  3476 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;Total ram usage:        8 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    8
  3489 ;; This function calls:
  3490 ;;		_GetTime
  3491 ;;		_RTOS_DeleteTask
  3492 ;;		_default_state
  3493 ;;		_key_press
  3494 ;;		_time_led
  3495 ;;		_time_set_dt
  3496 ;;		_time_set_dy
  3497 ;;		_time_set_hr
  3498 ;;		_time_set_min
  3499 ;;		_time_set_mt
  3500 ;;		_time_set_yr
  3501 ;; This function is called by:
  3502 ;;		_main
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text13
  3507  0007D8                     __ptext13:
  3508                           	opt stack 0
  3509  0007D8                     _RTOS_DispatchTask:
  3510                           	opt stack 22
  3511                           
  3512                           ;dispatcher.c: 86: uint8_t i, j;
  3513                           ;dispatcher.c: 87: void (*function) (void);
  3514                           ;dispatcher.c: 89: if (Timer0Interrupt)
  3515                           
  3516                           ;incstack = 0
  3517  0007D8  500B               	movf	_Timer0Interrupt,w,c
  3518  0007DA  E018               	bz	l229
  3519                           
  3520                           ;dispatcher.c: 90: {
  3521                           ;dispatcher.c: 91: Timer0Interrupt = 0;
  3522  0007DC  6A0B               	clrf	_Timer0Interrupt,c
  3523                           
  3524                           ;dispatcher.c: 92: for (j=0; j<arrayTail; j++)
  3525  0007DE  6A59               	clrf	RTOS_DispatchTask@j,c
  3526  0007E0  D012               	goto	l3331
  3527  0007E2                     l3323:
  3528                           
  3529                           ;dispatcher.c: 93: {
  3530                           ;dispatcher.c: 94: if (TaskArray[j].delay == 0)
  3531  0007E2  5059               	movf	RTOS_DispatchTask@j,w,c
  3532  0007E4  D85E               	call	PL18	;call to abstracted procedure
  3533  0007E6  50DE               	movf	postinc2,w,c
  3534  0007E8  10DE               	iorwf	postinc2,w,c
  3535  0007EA  E107               	bnz	l3327
  3536                           
  3537                           ;dispatcher.c: 95: TaskArray[j].run = 1;
  3538  0007EC  5059               	movf	RTOS_DispatchTask@j,w,c
  3539  0007EE  0D08               	mullw	8
  3540  0007F0  D85E               	call	PL22	;call to abstracted procedure
  3541  0007F2  0E01               	movlw	1
  3542  0007F4  6EDE               	movwf	postinc2,c
  3543  0007F6  6ADD               	clrf	postdec2,c
  3544  0007F8  D005               	goto	l3329
  3545  0007FA                     l3327:
  3546                           
  3547                           ;dispatcher.c: 96: else TaskArray[j].delay--;
  3548  0007FA  5059               	movf	RTOS_DispatchTask@j,w,c
  3549  0007FC  D852               	call	PL18	;call to abstracted procedure
  3550  0007FE  06DE               	decf	postinc2,f,c
  3551  000800  0E00               	movlw	0
  3552  000802  5ADD               	subwfb	postdec2,f,c
  3553  000804                     l3329:
  3554  000804  2A59               	incf	RTOS_DispatchTask@j,f,c
  3555  000806                     l3331:
  3556  000806  500C               	movf	_arrayTail,w,c	;volatile
  3557  000808  5C59               	subwf	RTOS_DispatchTask@j,w,c
  3558  00080A  E3EB               	bnc	l3323
  3559  00080C                     l229:
  3560                           
  3561                           ;dispatcher.c: 97: }
  3562                           ;dispatcher.c: 98: }
  3563                           ;dispatcher.c: 100: for (i=0; i<arrayTail; i++)
  3564  00080C  6A5A               	clrf	RTOS_DispatchTask@i,c
  3565  00080E  D045               	goto	l3347
  3566  000810                     l3333:
  3567                           
  3568                           ;dispatcher.c: 101: {
  3569                           ;dispatcher.c: 102: if (TaskArray[i].run == 1)
  3570  000810  505A               	movf	RTOS_DispatchTask@i,w,c
  3571  000812  0D08               	mullw	8
  3572  000814  D84C               	call	PL22	;call to abstracted procedure
  3573  000816  04DE               	decf	postinc2,w,c
  3574  000818  10DE               	iorwf	postinc2,w,c
  3575  00081A  E13E               	bnz	l3345
  3576                           
  3577                           ;dispatcher.c: 103: {
  3578                           ;dispatcher.c: 104: function = TaskArray[i].pFunc;
  3579  00081C  505A               	movf	RTOS_DispatchTask@i,w,c
  3580  00081E  ECFD  F004         	call	PL20	;call to abstracted procedure
  3581  000822  CFDE F057          	movff	postinc2,RTOS_DispatchTask@function
  3582  000826  CFDD F058          	movff	postdec2,RTOS_DispatchTask@function+1
  3583                           
  3584                           ;dispatcher.c: 106: if(TaskArray[i].period == 0)
  3585  00082A  505A               	movf	RTOS_DispatchTask@i,w,c
  3586  00082C  EC03  F005         	call	PL26	;call to abstracted procedure
  3587  000830  50DE               	movf	postinc2,w,c
  3588  000832  10DE               	iorwf	postinc2,w,c
  3589  000834  E10A               	bnz	l3339
  3590                           
  3591                           ;dispatcher.c: 107: {
  3592                           ;dispatcher.c: 108: RTOS_DeleteTask(TaskArray[i].pFunc);
  3593  000836  505A               	movf	RTOS_DispatchTask@i,w,c
  3594  000838  ECFD  F004         	call	PL20	;call to abstracted procedure
  3595  00083C  CFDE F042          	movff	postinc2,RTOS_DeleteTask@taskFunc
  3596  000840  CFDD F043          	movff	postdec2,RTOS_DeleteTask@taskFunc+1
  3597  000844  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  3598                           
  3599                           ;dispatcher.c: 110: }
  3600  000848  D01B               	goto	l3343
  3601  00084A                     l3339:
  3602                           
  3603                           ;dispatcher.c: 111: else
  3604                           ;dispatcher.c: 112: {
  3605                           ;dispatcher.c: 113: TaskArray[i].run = 0;
  3606  00084A  505A               	movf	RTOS_DispatchTask@i,w,c
  3607  00084C  ECF5  F004         	call	PL16	;call to abstracted procedure
  3608                           
  3609                           ;dispatcher.c: 114: if(!TaskArray[i].delay)
  3610  000850  505A               	movf	RTOS_DispatchTask@i,w,c
  3611  000852  D827               	call	PL18	;call to abstracted procedure
  3612  000854  50DE               	movf	postinc2,w,c
  3613  000856  10DE               	iorwf	postinc2,w,c
  3614  000858  E113               	bnz	l3343
  3615                           
  3616                           ;dispatcher.c: 115: {
  3617                           ;dispatcher.c: 116: TaskArray[i].delay = TaskArray[i].period-1;
  3618  00085A  6853               	setf	??_RTOS_DispatchTask& (0+255),c
  3619  00085C  6854               	setf	(??_RTOS_DispatchTask+1)& (0+255),c
  3620  00085E  505A               	movf	RTOS_DispatchTask@i,w,c
  3621  000860  EC03  F005         	call	PL26	;call to abstracted procedure
  3622  000864  CFDE F055          	movff	postinc2,??_RTOS_DispatchTask+2
  3623  000868  CFDD F056          	movff	postdec2,??_RTOS_DispatchTask+3
  3624  00086C  5053               	movf	??_RTOS_DispatchTask,w,c
  3625  00086E  2655               	addwf	??_RTOS_DispatchTask+2,f,c
  3626  000870  5054               	movf	??_RTOS_DispatchTask+1,w,c
  3627  000872  2256               	addwfc	??_RTOS_DispatchTask+3,f,c
  3628  000874  505A               	movf	RTOS_DispatchTask@i,w,c
  3629  000876  D815               	call	PL18	;call to abstracted procedure
  3630  000878  C055  FFDE         	movff	??_RTOS_DispatchTask+2,postinc2
  3631  00087C  C056  FFDD         	movff	??_RTOS_DispatchTask+3,postdec2
  3632  000880                     l3343:
  3633                           
  3634                           ;dispatcher.c: 117: }
  3635                           ;dispatcher.c: 118: }
  3636                           ;dispatcher.c: 119: (*function)();
  3637  000880  D801               	call	u1858
  3638  000882  D00A               	goto	l3345
  3639  000884                     u1858:
  3640  000884  0005               	push	
  3641  000886  6EFA               	movwf	pclath,c
  3642  000888  5057               	movf	RTOS_DispatchTask@function,w,c
  3643  00088A  6EFD               	movwf	tosl,c
  3644  00088C  5058               	movf	RTOS_DispatchTask@function+1,w,c
  3645  00088E  6EFE               	movwf	tosh,c
  3646  000890  50F8               	movf	tblptru,w,c
  3647  000892  6EFF               	movwf	tosu,c
  3648  000894  50FA               	movf	pclath,w,c
  3649  000896  0012               	return		;indir
  3650  000898                     l3345:
  3651  000898  2A5A               	incf	RTOS_DispatchTask@i,f,c
  3652  00089A                     l3347:
  3653  00089A  500C               	movf	_arrayTail,w,c	;volatile
  3654  00089C  5C5A               	subwf	RTOS_DispatchTask@i,w,c
  3655  00089E  E3B8               	bnc	l3333
  3656  0008A0  0012               	return		;funcret
  3657  0008A2                     __end_of_RTOS_DispatchTask:
  3658                           	opt stack 0
  3659  0008A2                     PL18:
  3660                           	opt stack 27
  3661  0008A2  0D08               	mullw	8
  3662  0008A4  50F3               	movf	prodl,w,c
  3663  0008A6  0F82               	addlw	low (_TaskArray+2)
  3664  0008A8  6ED9               	movwf	fsr2l,c
  3665  0008AA  6ADA               	clrf	fsr2h,c
  3666  0008AC  0012               	return	
  3667  0008AE                     __end_ofPL18:
  3668                           	opt stack 0
  3669  0008AE                     PL22:
  3670                           	opt stack 22
  3671  0008AE  50F3               	movf	prodl,w,c
  3672  0008B0  0F86               	addlw	low (_TaskArray+6)
  3673  0008B2  6ED9               	movwf	fsr2l,c
  3674  0008B4  6ADA               	clrf	fsr2h,c
  3675  0008B6  0012               	return	
  3676  0008B8                     __end_ofPL22:
  3677                           	opt stack 0
  3678                           tosu	equ	0xFFF
  3679                           tosh	equ	0xFFE
  3680                           tosl	equ	0xFFD
  3681                           pclath	equ	0xFFA
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           prodh	equ	0xFF4
  3687                           prodl	equ	0xFF3
  3688                           intcon	equ	0xFF2
  3689                           intcon2	equ	0xFF1
  3690                           postinc0	equ	0xFEE
  3691                           wreg	equ	0xFE8
  3692                           indf1	equ	0xFE7
  3693                           plusw1	equ	0xFE3
  3694                           fsr1h	equ	0xFE2
  3695                           fsr1l	equ	0xFE1
  3696                           indf2	equ	0xFDF
  3697                           postinc2	equ	0xFDE
  3698                           postdec2	equ	0xFDD
  3699                           plusw2	equ	0xFDB
  3700                           fsr2h	equ	0xFDA
  3701                           fsr2l	equ	0xFD9
  3702                           status	equ	0xFD8
  3703                           
  3704 ;; *************** function _time_set_min *****************
  3705 ;; Defined at:
  3706 ;;		line 23 in file "common.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;		None
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;		None
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  1    wreg      void 
  3713 ;; Registers used:
  3714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;Total ram usage:        0 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; Hardware stack levels required when called:    5
  3727 ;; This function calls:
  3728 ;;		_RTOS_DeleteTask
  3729 ;;		_RTOS_SetTask
  3730 ;;		_Update_Matrix
  3731 ;;		___lbdiv
  3732 ;;		___lbmod
  3733 ;;		_putchar_b_buf
  3734 ;; This function is called by:
  3735 ;;		_time_led
  3736 ;;		_RTOS_DispatchTask
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text14
  3741  0008B8                     __ptext14:
  3742                           	opt stack 0
  3743  0008B8                     _time_set_min:
  3744                           	opt stack 24
  3745                           
  3746                           ;common.c: 25: show_digit = ~show_digit;
  3747                           
  3748                           ;incstack = 0
  3749  0008B8  B25C               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  3750  0008BA  D002               	goto	u1410
  3751  0008BC  825C               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  3752  0008BE  D02C               	goto	l2877
  3753  0008C0                     u1410:
  3754  0008C0  925C               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  3755                           
  3756                           ;common.c: 26: switch (events)
  3757  0008C2  D02A               	goto	l2877
  3758  0008C4                     l2841:
  3759                           
  3760                           ;common.c: 33: RTOS_DeleteTask(time_set_min);
  3761  0008C4  D85B               	call	PL44	;call to abstracted procedure
  3762  0008C6  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  3763                           
  3764                           ;common.c: 34: RTOS_SetTask(time_set_hr, 0, 50);
  3765  0008CA  0E84               	movlw	low _time_set_hr
  3766  0008CC  6E42               	movwf	RTOS_SetTask@taskFunc,c
  3767  0008CE  0E03               	movlw	high _time_set_hr
  3768  0008D0  D850               	call	PL34	;call to abstracted procedure
  3769  0008D2  0E32               	movlw	50
  3770  0008D4  6E46               	movwf	RTOS_SetTask@taskPeriod,c
  3771  0008D6  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  3772  0008DA                     l2845:
  3773                           
  3774                           ;common.c: 35: RTOS_SetTask(default_state, 2000, 0);
  3775  0008DA  ECCD  F002         	call	PL2	;call to abstracted procedure
  3776  0008DE  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  3777  0008E2                     l2847:
  3778                           
  3779                           ;common.c: 36: events = 5;
  3780  0008E2  0E05               	movlw	5
  3781  0008E4  6E5D               	movwf	_events,c
  3782                           
  3783                           ;common.c: 37: break;
  3784  0008E6  D022               	goto	l577
  3785  0008E8                     l2849:
  3786                           
  3787                           ;common.c: 39: RTOS_DeleteTask(time_set_min);
  3788  0008E8  D849               	call	PL44	;call to abstracted procedure
  3789  0008EA  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  3790                           
  3791                           ;common.c: 40: RTOS_DeleteTask(default_state);
  3792  0008EE  ECB2  F001         	call	PL30	;call to abstracted procedure
  3793  0008F2  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  3794                           
  3795                           ;common.c: 41: RTOS_SetTask(time_led, 0, 20);
  3796  0008F6  ECA8  F001         	call	PL10	;call to abstracted procedure
  3797  0008FA  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  3798  0008FE  D7F1               	goto	l2847
  3799  000900                     l2855:
  3800                           
  3801                           ;common.c: 45: TSTime.Tmin++;
  3802  000900  2A02               	incf	_TSTime+1,f,c
  3803                           
  3804                           ;common.c: 46: if(TSTime.Tmin > 59) TSTime.Tmin = 0;
  3805  000902  0E3B               	movlw	59
  3806  000904  6402               	cpfsgt	_TSTime+1,c
  3807  000906  D7E9               	goto	l2845
  3808  000908  6A02               	clrf	_TSTime+1,c
  3809  00090A  D7E7               	goto	l2845
  3810  00090C                     l2865:
  3811                           
  3812                           ;common.c: 51: TSTime.Tmin--;
  3813  00090C  0602               	decf	_TSTime+1,f,c
  3814                           
  3815                           ;common.c: 52: if(TSTime.Tmin == 255) TSTime.Tmin = 59;
  3816  00090E  2802               	incf	_TSTime+1,w,c
  3817  000910  E1E4               	bnz	l2845
  3818  000912  0E3B               	movlw	59
  3819  000914  6E02               	movwf	_TSTime+1,c
  3820  000916  D7E1               	goto	l2845
  3821  000918                     l2877:
  3822  000918  505D               	movf	_events,w,c
  3823                           
  3824                           ; Switch size 1, requested type "space"
  3825                           ; Number of cases is 5, Range of values is 1 to 5
  3826                           ; switch strategies available:
  3827                           ; Name         Instructions Cycles
  3828                           ; simple_byte           16     9 (average)
  3829                           ;	Chosen strategy is simple_byte
  3830  00091A  0A01               	xorlw	1	; case 1
  3831  00091C  E0D3               	bz	l2841
  3832  00091E  0A03               	xorlw	3	; case 2
  3833  000920  E0EF               	bz	l2855
  3834  000922  0A01               	xorlw	1	; case 3
  3835  000924  E0F3               	bz	l2865
  3836  000926  0A07               	xorlw	7	; case 4
  3837  000928  E0DF               	bz	l2849
  3838  00092A  0A01               	xorlw	1	; case 5
  3839  00092C                     l577:
  3840                           
  3841                           ;common.c: 58: if(show_digit)
  3842  00092C  A25C               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  3843  00092E  D013               	goto	l2881
  3844                           
  3845                           ;common.c: 59: {
  3846                           ;common.c: 60: putchar_b_buf(13,(TSTime.Tmin/10) % 10 + 48);
  3847  000930  EC53  F002         	call	PL78	;call to abstracted procedure
  3848  000934  EC05  F008         	call	___lbdiv
  3849  000938  ECCC  F008         	call	___lbmod
  3850  00093C  EC5F  F002         	call	PL102	;call to abstracted procedure
  3851  000940  EC8A  F006         	call	_putchar_b_buf
  3852                           
  3853                           ;common.c: 61: putchar_b_buf(19,TSTime.Tmin % 10 + 48);
  3854  000944  EC5B  F002         	call	PL98	;call to abstracted procedure
  3855  000948  ECCC  F008         	call	___lbmod
  3856  00094C  EC58  F002         	call	PL94	;call to abstracted procedure
  3857  000950  EC8A  F006         	call	_putchar_b_buf
  3858                           
  3859                           ;common.c: 62: }
  3860  000954  D008               	goto	l2883
  3861  000956                     l2881:
  3862                           
  3863                           ;common.c: 63: else
  3864                           ;common.c: 64: {
  3865                           ;common.c: 65: putchar_b_buf(13,0);
  3866  000956  6A4A               	clrf	putchar_b_buf@symbol,c
  3867  000958  0E0D               	movlw	13
  3868  00095A  EC8A  F006         	call	_putchar_b_buf
  3869                           
  3870                           ;common.c: 66: putchar_b_buf(19,0);
  3871  00095E  6A4A               	clrf	putchar_b_buf@symbol,c
  3872  000960  0E13               	movlw	19
  3873  000962  EC8A  F006         	call	_putchar_b_buf
  3874  000966                     l2883:
  3875                           
  3876                           ;common.c: 67: }
  3877                           ;common.c: 68: Update_Matrix(Dis_Buff);
  3878  000966  0E0D               	movlw	low _Dis_Buff
  3879  000968  6E44               	movwf	Update_Matrix@buf,c
  3880  00096A  ECB0  F007         	call	_Update_Matrix	;wreg free
  3881                           
  3882                           ;common.c: 69: en_put = 1;
  3883  00096E  805C               	bsf	_en_put/(0+8),_en_put& (0+7),c
  3884  000970  0012               	return		;funcret
  3885  000972                     __end_of_time_set_min:
  3886                           	opt stack 0
  3887  000972                     PL34:
  3888                           	opt stack 22
  3889  000972  6E43               	movwf	RTOS_SetTask@taskFunc+1,c
  3890  000974  6A45               	clrf	RTOS_SetTask@taskDelay+1,c
  3891  000976  6A44               	clrf	RTOS_SetTask@taskDelay,c
  3892  000978  6A47               	clrf	RTOS_SetTask@taskPeriod+1,c
  3893  00097A  0012               	return	
  3894  00097C                     __end_ofPL34:
  3895                           	opt stack 0
  3896  00097C                     PL44:
  3897                           	opt stack 24
  3898  00097C  0EB8               	movlw	low _time_set_min
  3899  00097E  6E42               	movwf	RTOS_DeleteTask@taskFunc,c
  3900  000980  0E08               	movlw	high _time_set_min
  3901  000982  6E43               	movwf	RTOS_DeleteTask@taskFunc+1,c
  3902  000984  0012               	return	
  3903  000986                     __end_ofPL44:
  3904                           	opt stack 0
  3905                           tosu	equ	0xFFF
  3906                           tosh	equ	0xFFE
  3907                           tosl	equ	0xFFD
  3908                           pclath	equ	0xFFA
  3909                           tblptru	equ	0xFF8
  3910                           tblptrh	equ	0xFF7
  3911                           tblptrl	equ	0xFF6
  3912                           tablat	equ	0xFF5
  3913                           prodh	equ	0xFF4
  3914                           prodl	equ	0xFF3
  3915                           intcon	equ	0xFF2
  3916                           intcon2	equ	0xFF1
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           indf1	equ	0xFE7
  3920                           plusw1	equ	0xFE3
  3921                           fsr1h	equ	0xFE2
  3922                           fsr1l	equ	0xFE1
  3923                           indf2	equ	0xFDF
  3924                           postinc2	equ	0xFDE
  3925                           postdec2	equ	0xFDD
  3926                           plusw2	equ	0xFDB
  3927                           fsr2h	equ	0xFDA
  3928                           fsr2l	equ	0xFD9
  3929                           status	equ	0xFD8
  3930                           
  3931 ;; *************** function _GetTime *****************
  3932 ;; Defined at:
  3933 ;;		line 14 in file "common.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;		None
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  1    wreg      void 
  3940 ;; Registers used:
  3941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;Total ram usage:        0 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    7
  3954 ;; This function calls:
  3955 ;;		_getDate
  3956 ;;		_getTime
  3957 ;; This function is called by:
  3958 ;;		_INT0_ISR
  3959 ;;		_RTOS_DispatchTask
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text15
  3964  0011BE                     __ptext15:
  3965                           	opt stack 0
  3966  0011BE                     _GetTime:
  3967                           	opt stack 22
  3968                           
  3969                           ;common.c: 16: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  3970                           
  3971                           ;incstack = 0
  3972  0011BE  0E2F               	movlw	low (_TTime+2)
  3973  0011C0  6E47               	movwf	getTime@p3,c
  3974  0011C2  0E2E               	movlw	low (_TTime+1)
  3975  0011C4  6E48               	movwf	getTime@p2,c
  3976  0011C6  0E2D               	movlw	low _TTime
  3977  0011C8  6E49               	movwf	getTime@p1,c
  3978  0011CA  ECF4  F006         	call	_getTime	;wreg free
  3979                           
  3980                           ;common.c: 17: getDate(&TTime.Tdy,&TTime.Tdt,&TTime.Tmt,&TTime.Tyr);
  3981  0011CE  0E30               	movlw	low (_TTime+3)
  3982  0011D0  6E47               	movwf	getDate@p4,c
  3983  0011D2  0E31               	movlw	low (_TTime+4)
  3984  0011D4  6E48               	movwf	getDate@p3,c
  3985  0011D6  0E32               	movlw	low (_TTime+5)
  3986  0011D8  6E49               	movwf	getDate@p2,c
  3987  0011DA  0E33               	movlw	low (_TTime+6)
  3988  0011DC  6E4A               	movwf	getDate@p1,c
  3989  0011DE  EF9E  F005         	goto	_getDate	;wreg free
  3990  0011E2                     __end_of_GetTime:
  3991                           	opt stack 0
  3992                           tosu	equ	0xFFF
  3993                           tosh	equ	0xFFE
  3994                           tosl	equ	0xFFD
  3995                           pclath	equ	0xFFA
  3996                           tblptru	equ	0xFF8
  3997                           tblptrh	equ	0xFF7
  3998                           tblptrl	equ	0xFF6
  3999                           tablat	equ	0xFF5
  4000                           prodh	equ	0xFF4
  4001                           prodl	equ	0xFF3
  4002                           intcon	equ	0xFF2
  4003                           intcon2	equ	0xFF1
  4004                           postinc0	equ	0xFEE
  4005                           wreg	equ	0xFE8
  4006                           indf1	equ	0xFE7
  4007                           plusw1	equ	0xFE3
  4008                           fsr1h	equ	0xFE2
  4009                           fsr1l	equ	0xFE1
  4010                           indf2	equ	0xFDF
  4011                           postinc2	equ	0xFDE
  4012                           postdec2	equ	0xFDD
  4013                           plusw2	equ	0xFDB
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018 ;; *************** function _time_set_dy *****************
  4019 ;; Defined at:
  4020 ;;		line 338 in file "common.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    7
  4041 ;; This function calls:
  4042 ;;		_RTOS_DeleteTask
  4043 ;;		_RTOS_SetTask
  4044 ;;		_Update_Matrix
  4045 ;;		_putchar_b_buf
  4046 ;;		_setDate
  4047 ;; This function is called by:
  4048 ;;		_time_set_dt
  4049 ;;		_RTOS_DispatchTask
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text16
  4054  000208                     __ptext16:
  4055                           	opt stack 0
  4056  000208                     _time_set_dy:
  4057                           	opt stack 22
  4058                           
  4059                           ;common.c: 340: switch (events)
  4060                           
  4061                           ;incstack = 0
  4062  000208  D035               	goto	l3173
  4063  00020A                     l3131:
  4064                           
  4065                           ;common.c: 346: RTOS_DeleteTask(time_set_dy);
  4066  00020A  D8B4               	call	PL74	;call to abstracted procedure
  4067  00020C  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4068                           
  4069                           ;common.c: 347: RTOS_SetTask(time_led, 0, 20);
  4070  000210  D89F               	call	PL10	;call to abstracted procedure
  4071  000212  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4072                           
  4073                           ;common.c: 348: RTOS_DeleteTask(default_state);
  4074  000216  D8A6               	call	PL30	;call to abstracted procedure
  4075  000218  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4076                           
  4077                           ;common.c: 349: events = 5;
  4078                           
  4079                           ;common.c: 350: en_put=1;
  4080  00021C  ECEA  F002         	call	PL82	;call to abstracted procedure
  4081                           
  4082                           ;common.c: 351: break;
  4083  000220  D033               	goto	l659
  4084  000222                     l3141:
  4085                           
  4086                           ;common.c: 353: RTOS_DeleteTask(time_set_dy);
  4087  000222  D8A8               	call	PL74	;call to abstracted procedure
  4088  000224  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4089                           
  4090                           ;common.c: 354: RTOS_DeleteTask(default_state);
  4091  000228  D89D               	call	PL30	;call to abstracted procedure
  4092  00022A  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4093                           
  4094                           ;common.c: 355: RTOS_SetTask(time_led, 0, 20);
  4095  00022E  D890               	call	PL10	;call to abstracted procedure
  4096  000230  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4097                           
  4098                           ;common.c: 356: events = 5;
  4099  000234  0E05               	movlw	5
  4100  000236  6E5D               	movwf	_events,c
  4101                           
  4102                           ;common.c: 357: break;
  4103  000238  D027               	goto	l659
  4104  00023A                     l3147:
  4105                           
  4106                           ;common.c: 359: TSTime.Tdy++;
  4107  00023A  2A04               	incf	_TSTime+3,f,c
  4108                           
  4109                           ;common.c: 360: if(TSTime.Tdy > 7) TSTime.Tdy = 1;
  4110  00023C  0E07               	movlw	7
  4111  00023E  6404               	cpfsgt	_TSTime+3,c
  4112  000240  D002               	goto	l3153
  4113  000242  0E01               	movlw	1
  4114  000244  6E04               	movwf	_TSTime+3,c
  4115  000246                     l3153:
  4116                           
  4117                           ;common.c: 361: RTOS_SetTask(default_state, 2000, 0);
  4118  000246  ECCD  F002         	call	PL2	;call to abstracted procedure
  4119  00024A  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4120                           
  4121                           ;common.c: 362: events = 5;
  4122                           
  4123                           ;common.c: 363: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4124  00024E  ECD8  F002         	call	PL8	;call to abstracted procedure
  4125  000252  ECCE  F007         	call	_setDate
  4126                           
  4127                           ;common.c: 364: break;
  4128  000256  D018               	goto	l659
  4129  000258                     l3159:
  4130                           
  4131                           ;common.c: 366: TSTime.Tdy--;
  4132  000258  0604               	decf	_TSTime+3,f,c
  4133                           
  4134                           ;common.c: 367: if(TSTime.Tdy == 0) TSTime.Tdy = 7;
  4135  00025A  5004               	movf	_TSTime+3,w,c
  4136  00025C  E102               	bnz	l3165
  4137  00025E  0E07               	movlw	7
  4138  000260  6E04               	movwf	_TSTime+3,c
  4139  000262                     l3165:
  4140                           
  4141                           ;common.c: 368: RTOS_SetTask(default_state, 2000, 0);
  4142  000262  ECCD  F002         	call	PL2	;call to abstracted procedure
  4143  000266  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4144                           
  4145                           ;common.c: 369: events = 5;
  4146                           
  4147                           ;common.c: 370: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4148  00026A  ECD8  F002         	call	PL8	;call to abstracted procedure
  4149  00026E  ECCE  F007         	call	_setDate
  4150                           
  4151                           ;common.c: 371: break;
  4152  000272  D00A               	goto	l659
  4153  000274                     l3173:
  4154  000274  505D               	movf	_events,w,c
  4155                           
  4156                           ; Switch size 1, requested type "space"
  4157                           ; Number of cases is 5, Range of values is 1 to 5
  4158                           ; switch strategies available:
  4159                           ; Name         Instructions Cycles
  4160                           ; simple_byte           16     9 (average)
  4161                           ;	Chosen strategy is simple_byte
  4162  000276  0A01               	xorlw	1	; case 1
  4163  000278  E0C8               	bz	l3131
  4164  00027A  0A03               	xorlw	3	; case 2
  4165  00027C  E0DE               	bz	l3147
  4166  00027E  0A01               	xorlw	1	; case 3
  4167  000280  E0EB               	bz	l3159
  4168  000282  0A07               	xorlw	7	; case 4
  4169  000284  E0CE               	bz	l3141
  4170  000286  0A01               	xorlw	1	; case 5
  4171  000288                     l659:
  4172                           
  4173                           ;common.c: 373: if(en_put)
  4174  000288  A05C               	btfss	_en_put/(0+8),_en_put& (0+7),c
  4175  00028A  D05C               	goto	l3195
  4176                           
  4177                           ;common.c: 374: {
  4178                           ;common.c: 375: putchar_b_buf(0,'Ä');
  4179  00028C  0EC4               	movlw	196
  4180  00028E  6E4A               	movwf	putchar_b_buf@symbol,c
  4181  000290  0E00               	movlw	0
  4182  000292  EC8A  F006         	call	_putchar_b_buf
  4183                           
  4184                           ;common.c: 376: putchar_b_buf(6,'í');
  4185  000296  0EED               	movlw	237
  4186  000298  6E4A               	movwf	putchar_b_buf@symbol,c
  4187  00029A  0E06               	movlw	6
  4188  00029C  EC8A  F006         	call	_putchar_b_buf
  4189                           
  4190                           ;common.c: 377: putchar_b_buf(12,':');
  4191  0002A0  ECE7  F002         	call	PL72	;call to abstracted procedure
  4192  0002A4  EC8A  F006         	call	_putchar_b_buf
  4193                           
  4194                           ;common.c: 378: switch(TSTime.Tdy)
  4195  0002A8  D03E               	goto	l3193
  4196  0002AA                     l3177:
  4197                           
  4198                           ;common.c: 381: putchar_b_buf(18,'Ï');
  4199  0002AA  D869               	call	PL104	;call to abstracted procedure
  4200  0002AC  EC8A  F006         	call	_putchar_b_buf
  4201                           
  4202                           ;common.c: 382: putchar_b_buf(24,'í');
  4203  0002B0  0EED               	movlw	237
  4204  0002B2  6E4A               	movwf	putchar_b_buf@symbol,c
  4205  0002B4  0E18               	movlw	24
  4206  0002B6  EC8A  F006         	call	_putchar_b_buf
  4207                           
  4208                           ;common.c: 383: break;
  4209  0002BA  D044               	goto	l3195
  4210  0002BC                     l3179:
  4211                           
  4212                           ;common.c: 385: putchar_b_buf(18,'Â');
  4213  0002BC  ECFB  F000         	call	PL88	;call to abstracted procedure
  4214  0002C0  EC8A  F006         	call	_putchar_b_buf
  4215                           
  4216                           ;common.c: 386: putchar_b_buf(24,'ò');
  4217  0002C4  D854               	call	PL42	;call to abstracted procedure
  4218  0002C6  EC8A  F006         	call	_putchar_b_buf
  4219                           
  4220                           ;common.c: 387: break;
  4221  0002CA  D03C               	goto	l3195
  4222  0002CC                     l3181:
  4223                           
  4224                           ;common.c: 389: putchar_b_buf(18,'Ñ');
  4225  0002CC  ECED  F000         	call	PL58	;call to abstracted procedure
  4226  0002D0  EC8A  F006         	call	_putchar_b_buf
  4227                           
  4228                           ;common.c: 390: putchar_b_buf(24,'ð');
  4229  0002D4  ECEA  F000         	call	PL40	;call to abstracted procedure
  4230  0002D8  EC8A  F006         	call	_putchar_b_buf
  4231                           
  4232                           ;common.c: 391: break;
  4233  0002DC  D033               	goto	l3195
  4234  0002DE                     l3183:
  4235                           
  4236                           ;common.c: 393: putchar_b_buf(18,'×');
  4237  0002DE  ECFE  F000         	call	PL90	;call to abstracted procedure
  4238  0002E2  EC8A  F006         	call	_putchar_b_buf
  4239                           
  4240                           ;common.c: 394: putchar_b_buf(24,'ò');
  4241  0002E6  D843               	call	PL42	;call to abstracted procedure
  4242  0002E8  EC8A  F006         	call	_putchar_b_buf
  4243                           
  4244                           ;common.c: 395: break;
  4245  0002EC  D02B               	goto	l3195
  4246  0002EE                     l3185:
  4247                           
  4248                           ;common.c: 397: putchar_b_buf(18,'Ï');
  4249  0002EE  D847               	call	PL104	;call to abstracted procedure
  4250  0002F0  EC8A  F006         	call	_putchar_b_buf
  4251                           
  4252                           ;common.c: 398: putchar_b_buf(24,'ò');
  4253  0002F4  D83C               	call	PL42	;call to abstracted procedure
  4254  0002F6  EC8A  F006         	call	_putchar_b_buf
  4255                           
  4256                           ;common.c: 399: break;
  4257  0002FA  D024               	goto	l3195
  4258  0002FC                     l3187:
  4259                           
  4260                           ;common.c: 401: putchar_b_buf(18,'Ñ');
  4261  0002FC  ECED  F000         	call	PL58	;call to abstracted procedure
  4262  000300  EC8A  F006         	call	_putchar_b_buf
  4263                           
  4264                           ;common.c: 402: putchar_b_buf(24,'á');
  4265  000304  0EE1               	movlw	225
  4266  000306  6E4A               	movwf	putchar_b_buf@symbol,c
  4267  000308  0E18               	movlw	24
  4268  00030A  EC8A  F006         	call	_putchar_b_buf
  4269                           
  4270                           ;common.c: 403: break;
  4271  00030E  D01A               	goto	l3195
  4272  000310                     l3189:
  4273                           
  4274                           ;common.c: 405: putchar_b_buf(18,'Í');
  4275  000310  0ECD               	movlw	205
  4276  000312  6E4A               	movwf	putchar_b_buf@symbol,c
  4277  000314  0E12               	movlw	18
  4278  000316  EC8A  F006         	call	_putchar_b_buf
  4279                           
  4280                           ;common.c: 406: putchar_b_buf(24,'ä');
  4281  00031A  0EE4               	movlw	228
  4282  00031C  6E4A               	movwf	putchar_b_buf@symbol,c
  4283  00031E  0E18               	movlw	24
  4284  000320  EC8A  F006         	call	_putchar_b_buf
  4285                           
  4286                           ;common.c: 407: break;
  4287  000324  D00F               	goto	l3195
  4288  000326                     l3193:
  4289  000326  5004               	movf	_TSTime+3,w,c
  4290                           
  4291                           ; Switch size 1, requested type "space"
  4292                           ; Number of cases is 7, Range of values is 1 to 7
  4293                           ; switch strategies available:
  4294                           ; Name         Instructions Cycles
  4295                           ; simple_byte           22    12 (average)
  4296                           ;	Chosen strategy is simple_byte
  4297  000328  0A01               	xorlw	1	; case 1
  4298  00032A  E0F2               	bz	l3189
  4299  00032C  0A03               	xorlw	3	; case 2
  4300  00032E  E0BD               	bz	l3177
  4301  000330  0A01               	xorlw	1	; case 3
  4302  000332  E0C4               	bz	l3179
  4303  000334  0A07               	xorlw	7	; case 4
  4304  000336  E0CA               	bz	l3181
  4305  000338  0A01               	xorlw	1	; case 5
  4306  00033A  E0D1               	bz	l3183
  4307  00033C  0A03               	xorlw	3	; case 6
  4308  00033E  E0D7               	bz	l3185
  4309  000340  0A01               	xorlw	1	; case 7
  4310  000342  E0DC               	bz	l3187
  4311  000344                     l3195:
  4312                           
  4313                           ;common.c: 409: }
  4314                           ;common.c: 410: Update_Matrix(Dis_Buff);
  4315  000344  0E0D               	movlw	low _Dis_Buff
  4316  000346  6E44               	movwf	Update_Matrix@buf,c
  4317  000348  ECB0  F007         	call	_Update_Matrix	;wreg free
  4318                           
  4319                           ;common.c: 411: en_put=1;
  4320  00034C  805C               	bsf	_en_put/(0+8),_en_put& (0+7),c
  4321  00034E  0012               	return		;funcret
  4322  000350                     __end_of_time_set_dy:
  4323                           	opt stack 0
  4324  000350                     PL10:
  4325                           	opt stack 24
  4326  000350  0E2C               	movlw	low _time_led
  4327  000352  6E42               	movwf	RTOS_SetTask@taskFunc,c
  4328  000354  0E0A               	movlw	high _time_led
  4329  000356  6E43               	movwf	RTOS_SetTask@taskFunc+1,c
  4330  000358  6A45               	clrf	RTOS_SetTask@taskDelay+1,c
  4331  00035A  6A44               	clrf	RTOS_SetTask@taskDelay,c
  4332  00035C  6A47               	clrf	RTOS_SetTask@taskPeriod+1,c
  4333  00035E  0E14               	movlw	20
  4334  000360  6E46               	movwf	RTOS_SetTask@taskPeriod,c
  4335  000362  0C14               	retlw	20
  4336  000364                     __end_ofPL10:
  4337                           	opt stack 0
  4338  000364                     PL30:
  4339                           	opt stack 24
  4340  000364  0E82               	movlw	low _default_state
  4341  000366  6E42               	movwf	RTOS_DeleteTask@taskFunc,c
  4342  000368  0E13               	movlw	high _default_state
  4343  00036A  6E43               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4344  00036C  0012               	return	
  4345  00036E                     __end_ofPL30:
  4346                           	opt stack 0
  4347  00036E                     PL42:
  4348                           	opt stack 22
  4349  00036E  0EF2               	movlw	242
  4350  000370  6E4A               	movwf	putchar_b_buf@symbol,c
  4351  000372  0C18               	retlw	24
  4352  000374                     __end_ofPL42:
  4353                           	opt stack 0
  4354  000374                     PL74:
  4355                           	opt stack 22
  4356  000374  0E08               	movlw	low _time_set_dy
  4357  000376  6E42               	movwf	RTOS_DeleteTask@taskFunc,c
  4358  000378  0E02               	movlw	high _time_set_dy
  4359  00037A  6E43               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4360  00037C  0012               	return	
  4361  00037E                     __end_ofPL74:
  4362                           	opt stack 0
  4363  00037E                     PL104:
  4364                           	opt stack 22
  4365  00037E  0ECF               	movlw	207
  4366  000380  6E4A               	movwf	putchar_b_buf@symbol,c
  4367  000382  0C12               	retlw	18
  4368  000384                     __end_ofPL104:
  4369                           	opt stack 0
  4370                           tosu	equ	0xFFF
  4371                           tosh	equ	0xFFE
  4372                           tosl	equ	0xFFD
  4373                           pclath	equ	0xFFA
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           intcon2	equ	0xFF1
  4382                           postinc0	equ	0xFEE
  4383                           wreg	equ	0xFE8
  4384                           indf1	equ	0xFE7
  4385                           plusw1	equ	0xFE3
  4386                           fsr1h	equ	0xFE2
  4387                           fsr1l	equ	0xFE1
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           plusw2	equ	0xFDB
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _time_set_dt *****************
  4397 ;; Defined at:
  4398 ;;		line 287 in file "common.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    7
  4419 ;; This function calls:
  4420 ;;		_RTOS_DeleteTask
  4421 ;;		_RTOS_SetTask
  4422 ;;		_Update_Matrix
  4423 ;;		___lbdiv
  4424 ;;		___lbmod
  4425 ;;		_putchar_b_buf
  4426 ;;		_setDate
  4427 ;; This function is called by:
  4428 ;;		_time_set_mt
  4429 ;;		_RTOS_DispatchTask
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text17
  4434  0004C4                     __ptext17:
  4435                           	opt stack 0
  4436  0004C4                     _time_set_dt:
  4437                           	opt stack 22
  4438                           
  4439                           ;common.c: 289: switch (events)
  4440                           
  4441                           ;incstack = 0
  4442  0004C4  D037               	goto	l3121
  4443  0004C6                     l3079:
  4444                           
  4445                           ;common.c: 295: RTOS_DeleteTask(time_set_dt);
  4446  0004C6  D87E               	call	PL68	;call to abstracted procedure
  4447  0004C8  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4448                           
  4449                           ;common.c: 296: RTOS_SetTask(time_set_dy, 0, 20);
  4450  0004CC  0E08               	movlw	low _time_set_dy
  4451  0004CE  6E42               	movwf	RTOS_SetTask@taskFunc,c
  4452  0004D0  0E02               	movlw	high _time_set_dy
  4453  0004D2  6E43               	movwf	RTOS_SetTask@taskFunc+1,c
  4454  0004D4  ECE4  F000         	call	PL12	;call to abstracted procedure
  4455  0004D8  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4456                           
  4457                           ;common.c: 297: RTOS_SetTask(default_state, 2000, 0);
  4458  0004DC  D85E               	call	PL2	;call to abstracted procedure
  4459  0004DE  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4460                           
  4461                           ;common.c: 298: events = 5;
  4462                           
  4463                           ;common.c: 299: en_put=1;
  4464  0004E2  D878               	call	PL82	;call to abstracted procedure
  4465                           
  4466                           ;common.c: 300: break;
  4467  0004E4  D031               	goto	l646
  4468  0004E6                     l3089:
  4469                           
  4470                           ;common.c: 302: RTOS_DeleteTask(time_set_dt);
  4471  0004E6  D86E               	call	PL68	;call to abstracted procedure
  4472  0004E8  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4473                           
  4474                           ;common.c: 303: RTOS_DeleteTask(default_state);
  4475  0004EC  ECB2  F001         	call	PL30	;call to abstracted procedure
  4476  0004F0  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4477                           
  4478                           ;common.c: 304: RTOS_SetTask(time_led, 0, 20);
  4479  0004F4  ECA8  F001         	call	PL10	;call to abstracted procedure
  4480  0004F8  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4481                           
  4482                           ;common.c: 305: events = 5;
  4483  0004FC  0E05               	movlw	5
  4484  0004FE  6E5D               	movwf	_events,c
  4485                           
  4486                           ;common.c: 306: break;
  4487  000500  D023               	goto	l646
  4488  000502                     l3095:
  4489                           
  4490                           ;common.c: 308: TSTime.Tdt++;
  4491  000502  2A05               	incf	_TSTime+4,f,c
  4492                           
  4493                           ;common.c: 309: if(TSTime.Tdt > 31) TSTime.Tdt = 1;
  4494  000504  0E1F               	movlw	31
  4495  000506  6405               	cpfsgt	_TSTime+4,c
  4496  000508  D002               	goto	l3101
  4497  00050A  0E01               	movlw	1
  4498  00050C  6E05               	movwf	_TSTime+4,c
  4499  00050E                     l3101:
  4500                           
  4501                           ;common.c: 310: RTOS_SetTask(default_state, 2000, 0);
  4502  00050E  D845               	call	PL2	;call to abstracted procedure
  4503  000510  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4504                           
  4505                           ;common.c: 311: events = 5;
  4506                           
  4507                           ;common.c: 312: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4508  000514  D84D               	call	PL8	;call to abstracted procedure
  4509  000516  ECCE  F007         	call	_setDate
  4510                           
  4511                           ;common.c: 313: break;
  4512  00051A  D016               	goto	l646
  4513  00051C                     l3107:
  4514                           
  4515                           ;common.c: 315: TSTime.Tdt--;
  4516  00051C  0605               	decf	_TSTime+4,f,c
  4517                           
  4518                           ;common.c: 316: if(TSTime.Tdt == 0) TSTime.Tdt = 31;
  4519  00051E  5005               	movf	_TSTime+4,w,c
  4520  000520  E102               	bnz	l3113
  4521  000522  0E1F               	movlw	31
  4522  000524  6E05               	movwf	_TSTime+4,c
  4523  000526                     l3113:
  4524                           
  4525                           ;common.c: 317: RTOS_SetTask(default_state, 2000, 0);
  4526  000526  D839               	call	PL2	;call to abstracted procedure
  4527  000528  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4528                           
  4529                           ;common.c: 318: events = 5;
  4530                           
  4531                           ;common.c: 319: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4532  00052C  D841               	call	PL8	;call to abstracted procedure
  4533  00052E  ECCE  F007         	call	_setDate
  4534                           
  4535                           ;common.c: 320: break;
  4536  000532  D00A               	goto	l646
  4537  000534                     l3121:
  4538  000534  505D               	movf	_events,w,c
  4539                           
  4540                           ; Switch size 1, requested type "space"
  4541                           ; Number of cases is 5, Range of values is 1 to 5
  4542                           ; switch strategies available:
  4543                           ; Name         Instructions Cycles
  4544                           ; simple_byte           16     9 (average)
  4545                           ;	Chosen strategy is simple_byte
  4546  000536  0A01               	xorlw	1	; case 1
  4547  000538  E0C6               	bz	l3079
  4548  00053A  0A03               	xorlw	3	; case 2
  4549  00053C  E0E2               	bz	l3095
  4550  00053E  0A01               	xorlw	1	; case 3
  4551  000540  E0ED               	bz	l3107
  4552  000542  0A07               	xorlw	7	; case 4
  4553  000544  E0D0               	bz	l3089
  4554  000546  0A01               	xorlw	1	; case 5
  4555  000548                     l646:
  4556                           
  4557                           ;common.c: 322: if(en_put)
  4558  000548  A05C               	btfss	_en_put/(0+8),_en_put& (0+7),c
  4559  00054A  D021               	goto	l3125
  4560                           
  4561                           ;common.c: 323: {
  4562                           ;common.c: 324: putchar_b_buf(0,'×');
  4563  00054C  0ED7               	movlw	215
  4564  00054E  6E4A               	movwf	putchar_b_buf@symbol,c
  4565  000550  0E00               	movlw	0
  4566  000552  EC8A  F006         	call	_putchar_b_buf
  4567                           
  4568                           ;common.c: 325: putchar_b_buf(6,'ñ');
  4569  000556  ECF8  F000         	call	PL86	;call to abstracted procedure
  4570  00055A  EC8A  F006         	call	_putchar_b_buf
  4571                           
  4572                           ;common.c: 326: putchar_b_buf(12,':');
  4573  00055E  D837               	call	PL72	;call to abstracted procedure
  4574  000560  EC8A  F006         	call	_putchar_b_buf
  4575                           
  4576                           ;common.c: 327: putchar_b_buf(18,(TSTime.Tdt/10) % 10 + 48);
  4577  000564  0E0A               	movlw	10
  4578  000566  6E46               	movwf	___lbmod@divisor,c
  4579  000568  6E42               	movwf	___lbdiv@divisor,c
  4580  00056A  5005               	movf	_TSTime+4,w,c
  4581  00056C  EC05  F008         	call	___lbdiv
  4582  000570  ECCC  F008         	call	___lbmod
  4583  000574  ECE6  F003         	call	PL92	;call to abstracted procedure
  4584  000578  EC8A  F006         	call	_putchar_b_buf
  4585                           
  4586                           ;common.c: 328: putchar_b_buf(24,TSTime.Tdt % 10 + 48);
  4587  00057C  0E0A               	movlw	10
  4588  00057E  6E46               	movwf	___lbmod@divisor,c
  4589  000580  5005               	movf	_TSTime+4,w,c
  4590  000582  ECCC  F008         	call	___lbmod
  4591  000586  ECE9  F003         	call	PL96	;call to abstracted procedure
  4592  00058A  EC8A  F006         	call	_putchar_b_buf
  4593  00058E                     l3125:
  4594                           
  4595                           ;common.c: 329: }
  4596                           ;common.c: 330: Update_Matrix(Dis_Buff);
  4597  00058E  0E0D               	movlw	low _Dis_Buff
  4598  000590  6E44               	movwf	Update_Matrix@buf,c
  4599  000592  ECB0  F007         	call	_Update_Matrix	;wreg free
  4600                           
  4601                           ;common.c: 331: en_put=1;
  4602  000596  805C               	bsf	_en_put/(0+8),_en_put& (0+7),c
  4603  000598  0012               	return		;funcret
  4604  00059A                     __end_of_time_set_dt:
  4605                           	opt stack 0
  4606  00059A                     PL2:
  4607                           	opt stack 24
  4608  00059A  0E82               	movlw	low _default_state
  4609  00059C  6E42               	movwf	RTOS_SetTask@taskFunc,c
  4610  00059E  0E13               	movlw	high _default_state
  4611  0005A0  6E43               	movwf	RTOS_SetTask@taskFunc+1,c
  4612  0005A2  0E07               	movlw	7
  4613  0005A4  6E45               	movwf	RTOS_SetTask@taskDelay+1,c
  4614  0005A6  0ED0               	movlw	208
  4615  0005A8  6E44               	movwf	RTOS_SetTask@taskDelay,c
  4616  0005AA  6A47               	clrf	RTOS_SetTask@taskPeriod+1,c
  4617  0005AC  6A46               	clrf	RTOS_SetTask@taskPeriod,c
  4618  0005AE  0CD0               	retlw	208
  4619  0005B0                     __end_ofPL2:
  4620                           	opt stack 0
  4621  0005B0                     PL8:
  4622                           	opt stack 22
  4623  0005B0  0E05               	movlw	5
  4624  0005B2  6E5D               	movwf	_events,c
  4625  0005B4  C005  F04F         	movff	_TSTime+4,setDate@dateSet
  4626  0005B8  C006  F050         	movff	_TSTime+5,setDate@monthSet
  4627  0005BC  C007  F051         	movff	_TSTime+6,setDate@yearSet
  4628  0005C0  5004               	movf	_TSTime+3,w,c
  4629  0005C2  0012               	return	
  4630  0005C4                     __end_ofPL8:
  4631                           	opt stack 0
  4632  0005C4                     PL68:
  4633                           	opt stack 22
  4634  0005C4  0EC4               	movlw	low _time_set_dt
  4635  0005C6  6E42               	movwf	RTOS_DeleteTask@taskFunc,c
  4636  0005C8  0E04               	movlw	high _time_set_dt
  4637  0005CA  6E43               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4638  0005CC  0012               	return	
  4639  0005CE                     __end_ofPL68:
  4640                           	opt stack 0
  4641  0005CE                     PL72:
  4642                           	opt stack 22
  4643  0005CE  0E3A               	movlw	58
  4644  0005D0  6E4A               	movwf	putchar_b_buf@symbol,c
  4645  0005D2  0C0C               	retlw	12
  4646  0005D4                     __end_ofPL72:
  4647                           	opt stack 0
  4648  0005D4                     PL82:
  4649                           	opt stack 22
  4650  0005D4  0E05               	movlw	5
  4651  0005D6  6E5D               	movwf	_events,c
  4652  0005D8  805C               	bsf	_en_put/(0+8),_en_put& (0+7),c
  4653  0005DA  0C05               	retlw	5
  4654  0005DC                     __end_ofPL82:
  4655                           	opt stack 0
  4656                           tosu	equ	0xFFF
  4657                           tosh	equ	0xFFE
  4658                           tosl	equ	0xFFD
  4659                           pclath	equ	0xFFA
  4660                           tblptru	equ	0xFF8
  4661                           tblptrh	equ	0xFF7
  4662                           tblptrl	equ	0xFF6
  4663                           tablat	equ	0xFF5
  4664                           prodh	equ	0xFF4
  4665                           prodl	equ	0xFF3
  4666                           intcon	equ	0xFF2
  4667                           intcon2	equ	0xFF1
  4668                           postinc0	equ	0xFEE
  4669                           wreg	equ	0xFE8
  4670                           indf1	equ	0xFE7
  4671                           plusw1	equ	0xFE3
  4672                           fsr1h	equ	0xFE2
  4673                           fsr1l	equ	0xFE1
  4674                           indf2	equ	0xFDF
  4675                           postinc2	equ	0xFDE
  4676                           postdec2	equ	0xFDD
  4677                           plusw2	equ	0xFDB
  4678                           fsr2h	equ	0xFDA
  4679                           fsr2l	equ	0xFD9
  4680                           status	equ	0xFD8
  4681                           
  4682 ;; *************** function _time_set_mt *****************
  4683 ;; Defined at:
  4684 ;;		line 187 in file "common.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;		None
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;		None
  4689 ;; Return value:  Size  Location     Type
  4690 ;;                  1    wreg      void 
  4691 ;; Registers used:
  4692 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;Total ram usage:        0 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    7
  4705 ;; This function calls:
  4706 ;;		_RTOS_DeleteTask
  4707 ;;		_RTOS_SetTask
  4708 ;;		_Update_Matrix
  4709 ;;		_putchar_b_buf
  4710 ;;		_setDate
  4711 ;; This function is called by:
  4712 ;;		_time_set_yr
  4713 ;;		_RTOS_DispatchTask
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text18
  4718  000012                     __ptext18:
  4719                           	opt stack 0
  4720  000012                     _time_set_mt:
  4721                           	opt stack 22
  4722                           
  4723                           ;common.c: 189: switch (events)
  4724                           
  4725                           ;incstack = 0
  4726  000012  D03C               	goto	l3041
  4727  000014                     l2999:
  4728                           
  4729                           ;common.c: 195: RTOS_DeleteTask(time_set_mt);
  4730  000014  D8E5               	call	PL66	;call to abstracted procedure
  4731  000016  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4732                           
  4733                           ;common.c: 196: RTOS_SetTask(time_set_dt, 0, 20);
  4734  00001A  0EC4               	movlw	low _time_set_dt
  4735  00001C  6E42               	movwf	RTOS_SetTask@taskFunc,c
  4736  00001E  0E04               	movlw	high _time_set_dt
  4737  000020  6E43               	movwf	RTOS_SetTask@taskFunc+1,c
  4738  000022  D8D2               	call	PL12	;call to abstracted procedure
  4739  000024  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4740                           
  4741                           ;common.c: 197: RTOS_SetTask(default_state, 2000, 0);
  4742  000028  ECCD  F002         	call	PL2	;call to abstracted procedure
  4743  00002C  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4744                           
  4745                           ;common.c: 198: events = 5;
  4746                           
  4747                           ;common.c: 199: en_put=1;
  4748  000030  ECEA  F002         	call	PL82	;call to abstracted procedure
  4749                           
  4750                           ;common.c: 200: break;
  4751  000034  D035               	goto	l619
  4752  000036                     l3009:
  4753                           
  4754                           ;common.c: 202: RTOS_DeleteTask(time_set_mt);
  4755  000036  D8D4               	call	PL66	;call to abstracted procedure
  4756  000038  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4757                           
  4758                           ;common.c: 203: RTOS_DeleteTask(default_state);
  4759  00003C  ECB2  F001         	call	PL30	;call to abstracted procedure
  4760  000040  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  4761                           
  4762                           ;common.c: 204: RTOS_SetTask(time_led, 0, 20);
  4763  000044  ECA8  F001         	call	PL10	;call to abstracted procedure
  4764  000048  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4765                           
  4766                           ;common.c: 205: events = 5;
  4767  00004C  0E05               	movlw	5
  4768  00004E  6E5D               	movwf	_events,c
  4769                           
  4770                           ;common.c: 206: break;
  4771  000050  D027               	goto	l619
  4772  000052                     l3015:
  4773                           
  4774                           ;common.c: 208: TSTime.Tmt++;
  4775  000052  2A06               	incf	_TSTime+5,f,c
  4776                           
  4777                           ;common.c: 209: if(TSTime.Tmt > 12) TSTime.Tmt = 1;
  4778  000054  0E0C               	movlw	12
  4779  000056  6406               	cpfsgt	_TSTime+5,c
  4780  000058  D002               	goto	l3021
  4781  00005A  0E01               	movlw	1
  4782  00005C  6E06               	movwf	_TSTime+5,c
  4783  00005E                     l3021:
  4784                           
  4785                           ;common.c: 210: RTOS_SetTask(default_state, 2000, 0);
  4786  00005E  ECCD  F002         	call	PL2	;call to abstracted procedure
  4787  000062  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4788                           
  4789                           ;common.c: 211: events = 5;
  4790                           
  4791                           ;common.c: 212: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4792  000066  ECD8  F002         	call	PL8	;call to abstracted procedure
  4793  00006A  ECCE  F007         	call	_setDate
  4794                           
  4795                           ;common.c: 213: break;
  4796  00006E  D018               	goto	l619
  4797  000070                     l3027:
  4798                           
  4799                           ;common.c: 215: TSTime.Tmt--;
  4800  000070  0606               	decf	_TSTime+5,f,c
  4801                           
  4802                           ;common.c: 216: if(TSTime.Tmt == 0) TSTime.Tmt = 12;
  4803  000072  5006               	movf	_TSTime+5,w,c
  4804  000074  E102               	bnz	l3033
  4805  000076  0E0C               	movlw	12
  4806  000078  6E06               	movwf	_TSTime+5,c
  4807  00007A                     l3033:
  4808                           
  4809                           ;common.c: 217: RTOS_SetTask(default_state, 2000, 0);
  4810  00007A  ECCD  F002         	call	PL2	;call to abstracted procedure
  4811  00007E  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  4812                           
  4813                           ;common.c: 218: events = 5;
  4814                           
  4815                           ;common.c: 219: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  4816  000082  ECD8  F002         	call	PL8	;call to abstracted procedure
  4817  000086  ECCE  F007         	call	_setDate
  4818                           
  4819                           ;common.c: 220: break;
  4820  00008A  D00A               	goto	l619
  4821  00008C                     l3041:
  4822  00008C  505D               	movf	_events,w,c
  4823                           
  4824                           ; Switch size 1, requested type "space"
  4825                           ; Number of cases is 5, Range of values is 1 to 5
  4826                           ; switch strategies available:
  4827                           ; Name         Instructions Cycles
  4828                           ; simple_byte           16     9 (average)
  4829                           ;	Chosen strategy is simple_byte
  4830  00008E  0A01               	xorlw	1	; case 1
  4831  000090  E0C1               	bz	l2999
  4832  000092  0A03               	xorlw	3	; case 2
  4833  000094  E0DE               	bz	l3015
  4834  000096  0A01               	xorlw	1	; case 3
  4835  000098  E0EB               	bz	l3027
  4836  00009A  0A07               	xorlw	7	; case 4
  4837  00009C  E0CC               	bz	l3009
  4838  00009E  0A01               	xorlw	1	; case 5
  4839  0000A0                     l619:
  4840                           
  4841                           ;common.c: 222: if(en_put)
  4842  0000A0  A05C               	btfss	_en_put/(0+8),_en_put& (0+7),c
  4843  0000A2  D08C               	goto	l3073
  4844                           
  4845                           ;common.c: 223: {
  4846                           ;common.c: 224: putchar_b_buf(0,'Ì');
  4847  0000A4  0ECC               	movlw	204
  4848  0000A6  6E4A               	movwf	putchar_b_buf@symbol,c
  4849  0000A8  0E00               	movlw	0
  4850  0000AA  EC8A  F006         	call	_putchar_b_buf
  4851                           
  4852                           ;common.c: 225: putchar_b_buf(6,'ñ');
  4853  0000AE  D8A0               	call	PL86	;call to abstracted procedure
  4854  0000B0  EC8A  F006         	call	_putchar_b_buf
  4855                           
  4856                           ;common.c: 226: putchar_b_buf(12,':');
  4857  0000B4  ECE7  F002         	call	PL72	;call to abstracted procedure
  4858  0000B8  EC8A  F006         	call	_putchar_b_buf
  4859                           
  4860                           ;common.c: 227: switch(TSTime.Tmt)
  4861  0000BC  D066               	goto	l3071
  4862  0000BE                     l3045:
  4863                           
  4864                           ;common.c: 230: putchar_b_buf(18,'Ñ');
  4865  0000BE  D88D               	call	PL58	;call to abstracted procedure
  4866  0000C0  EC8A  F006         	call	_putchar_b_buf
  4867                           
  4868                           ;common.c: 231: putchar_b_buf(24,'÷');
  4869  0000C4  0EF7               	movlw	247
  4870  0000C6  6E4A               	movwf	putchar_b_buf@symbol,c
  4871  0000C8  0E18               	movlw	24
  4872  0000CA  EC8A  F006         	call	_putchar_b_buf
  4873                           
  4874                           ;common.c: 232: break;
  4875  0000CE  D076               	goto	l3073
  4876  0000D0                     l3047:
  4877                           
  4878                           ;common.c: 234: putchar_b_buf(18,'Ë');
  4879  0000D0  D88C               	call	PL84	;call to abstracted procedure
  4880  0000D2  EC8A  F006         	call	_putchar_b_buf
  4881                           
  4882                           ;common.c: 235: putchar_b_buf(24,'ò');
  4883  0000D6  ECB7  F001         	call	PL42	;call to abstracted procedure
  4884  0000DA  EC8A  F006         	call	_putchar_b_buf
  4885                           
  4886                           ;common.c: 236: break;
  4887  0000DE  D06E               	goto	l3073
  4888  0000E0                     l3049:
  4889                           
  4890                           ;common.c: 238: putchar_b_buf(18,'Á');
  4891  0000E0  0EC1               	movlw	193
  4892  0000E2  6E4A               	movwf	putchar_b_buf@symbol,c
  4893  0000E4  0E12               	movlw	18
  4894  0000E6  EC8A  F006         	call	_putchar_b_buf
  4895                           
  4896                           ;common.c: 239: putchar_b_buf(24,'ð');
  4897  0000EA  D874               	call	PL40	;call to abstracted procedure
  4898  0000EC  EC8A  F006         	call	_putchar_b_buf
  4899                           
  4900                           ;common.c: 240: break;
  4901  0000F0  D065               	goto	l3073
  4902  0000F2                     l3051:
  4903                           
  4904                           ;common.c: 242: putchar_b_buf(18,'Ê');
  4905  0000F2  0ECA               	movlw	202
  4906  0000F4  6E4A               	movwf	putchar_b_buf@symbol,c
  4907  0000F6  0E12               	movlw	18
  4908  0000F8  EC8A  F006         	call	_putchar_b_buf
  4909                           
  4910                           ;common.c: 243: putchar_b_buf(24,'â');
  4911  0000FC  0EE2               	movlw	226
  4912  0000FE  6E4A               	movwf	putchar_b_buf@symbol,c
  4913  000100  0E18               	movlw	24
  4914  000102  EC8A  F006         	call	_putchar_b_buf
  4915                           
  4916                           ;common.c: 244: break;
  4917  000106  D05A               	goto	l3073
  4918  000108                     l3053:
  4919                           
  4920                           ;common.c: 246: putchar_b_buf(18,'Ò');
  4921  000108  0ED2               	movlw	210
  4922  00010A  6E4A               	movwf	putchar_b_buf@symbol,c
  4923  00010C  0E12               	movlw	18
  4924  00010E  EC8A  F006         	call	_putchar_b_buf
  4925                           
  4926                           ;common.c: 247: putchar_b_buf(24,'ð');
  4927  000112  D860               	call	PL40	;call to abstracted procedure
  4928  000114  EC8A  F006         	call	_putchar_b_buf
  4929                           
  4930                           ;common.c: 248: break;
  4931  000118  D051               	goto	l3073
  4932  00011A                     l3055:
  4933                           
  4934                           ;common.c: 250: putchar_b_buf(18,'×');
  4935  00011A  D870               	call	PL90	;call to abstracted procedure
  4936  00011C  EC8A  F006         	call	_putchar_b_buf
  4937                           
  4938                           ;common.c: 251: putchar_b_buf(24,'ð');
  4939  000120  D859               	call	PL40	;call to abstracted procedure
  4940  000122  EC8A  F006         	call	_putchar_b_buf
  4941                           
  4942                           ;common.c: 252: break;
  4943  000126  D04A               	goto	l3073
  4944  000128                     l3057:
  4945                           
  4946                           ;common.c: 254: putchar_b_buf(18,'Ë');
  4947  000128  D860               	call	PL84	;call to abstracted procedure
  4948  00012A  EC8A  F006         	call	_putchar_b_buf
  4949                           
  4950                           ;common.c: 255: putchar_b_buf(24,'ï');
  4951  00012E  D869               	call	PL100	;call to abstracted procedure
  4952  000130  EC8A  F006         	call	_putchar_b_buf
  4953                           
  4954                           ;common.c: 256: break;
  4955  000134  D043               	goto	l3073
  4956  000136                     l3059:
  4957                           
  4958                           ;common.c: 258: putchar_b_buf(18,'Ñ');
  4959  000136  D851               	call	PL58	;call to abstracted procedure
  4960  000138  EC8A  F006         	call	_putchar_b_buf
  4961                           
  4962                           ;common.c: 259: putchar_b_buf(24,'ï');
  4963  00013C  D862               	call	PL100	;call to abstracted procedure
  4964  00013E  EC8A  F006         	call	_putchar_b_buf
  4965                           
  4966                           ;common.c: 260: break;
  4967  000142  D03C               	goto	l3073
  4968  000144                     l3061:
  4969                           
  4970                           ;common.c: 262: putchar_b_buf(18,'Â');
  4971  000144  D858               	call	PL88	;call to abstracted procedure
  4972  000146  EC8A  F006         	call	_putchar_b_buf
  4973                           
  4974                           ;common.c: 263: putchar_b_buf(24,'ð');
  4975  00014A  D844               	call	PL40	;call to abstracted procedure
  4976  00014C  EC8A  F006         	call	_putchar_b_buf
  4977                           
  4978                           ;common.c: 264: break;
  4979  000150  D035               	goto	l3073
  4980  000152                     l3063:
  4981                           
  4982                           ;common.c: 266: putchar_b_buf(18,'Æ');
  4983  000152  0EC6               	movlw	198
  4984  000154  6E4A               	movwf	putchar_b_buf@symbol,c
  4985  000156  0E12               	movlw	18
  4986  000158  EC8A  F006         	call	_putchar_b_buf
  4987                           
  4988                           ;common.c: 267: putchar_b_buf(24,'ò');
  4989  00015C  ECB7  F001         	call	PL42	;call to abstracted procedure
  4990  000160  EC8A  F006         	call	_putchar_b_buf
  4991                           
  4992                           ;common.c: 268: break;
  4993  000164  D02B               	goto	l3073
  4994  000166                     l3065:
  4995                           
  4996                           ;common.c: 270: putchar_b_buf(18,'Ë');
  4997  000166  D841               	call	PL84	;call to abstracted procedure
  4998  000168  EC8A  F006         	call	_putchar_b_buf
  4999                           
  5000                           ;common.c: 271: putchar_b_buf(24,'ñ');
  5001  00016C  0EF1               	movlw	241
  5002  00016E  6E4A               	movwf	putchar_b_buf@symbol,c
  5003  000170  0E18               	movlw	24
  5004  000172  EC8A  F006         	call	_putchar_b_buf
  5005                           
  5006                           ;common.c: 272: break;
  5007  000176  D022               	goto	l3073
  5008  000178                     l3067:
  5009                           
  5010                           ;common.c: 274: putchar_b_buf(18,'Ã');
  5011  000178  0EC3               	movlw	195
  5012  00017A  6E4A               	movwf	putchar_b_buf@symbol,c
  5013  00017C  0E12               	movlw	18
  5014  00017E  EC8A  F006         	call	_putchar_b_buf
  5015                           
  5016                           ;common.c: 275: putchar_b_buf(24,'ð');
  5017  000182  D828               	call	PL40	;call to abstracted procedure
  5018  000184  EC8A  F006         	call	_putchar_b_buf
  5019                           
  5020                           ;common.c: 276: break;
  5021  000188  D019               	goto	l3073
  5022  00018A                     l3071:
  5023  00018A  5006               	movf	_TSTime+5,w,c
  5024                           
  5025                           ; Switch size 1, requested type "space"
  5026                           ; Number of cases is 12, Range of values is 1 to 12
  5027                           ; switch strategies available:
  5028                           ; Name         Instructions Cycles
  5029                           ; simple_byte           37    19 (average)
  5030                           ;	Chosen strategy is simple_byte
  5031  00018C  0A01               	xorlw	1	; case 1
  5032  00018E  E097               	bz	l3045
  5033  000190  0A03               	xorlw	3	; case 2
  5034  000192  E09E               	bz	l3047
  5035  000194  0A01               	xorlw	1	; case 3
  5036  000196  E0A4               	bz	l3049
  5037  000198  0A07               	xorlw	7	; case 4
  5038  00019A  E0AB               	bz	l3051
  5039  00019C  0A01               	xorlw	1	; case 5
  5040  00019E  E0B4               	bz	l3053
  5041  0001A0  0A03               	xorlw	3	; case 6
  5042  0001A2  E0BB               	bz	l3055
  5043  0001A4  0A01               	xorlw	1	; case 7
  5044  0001A6  E0C0               	bz	l3057
  5045  0001A8  0A0F               	xorlw	15	; case 8
  5046  0001AA  E0C5               	bz	l3059
  5047  0001AC  0A01               	xorlw	1	; case 9
  5048  0001AE  E0CA               	bz	l3061
  5049  0001B0  0A03               	xorlw	3	; case 10
  5050  0001B2  E0CF               	bz	l3063
  5051  0001B4  0A01               	xorlw	1	; case 11
  5052  0001B6  E0D7               	bz	l3065
  5053  0001B8  0A07               	xorlw	7	; case 12
  5054  0001BA  E0DE               	bz	l3067
  5055  0001BC                     l3073:
  5056                           
  5057                           ;common.c: 279: }
  5058                           ;common.c: 280: Update_Matrix(Dis_Buff);
  5059  0001BC  0E0D               	movlw	low _Dis_Buff
  5060  0001BE  6E44               	movwf	Update_Matrix@buf,c
  5061  0001C0  ECB0  F007         	call	_Update_Matrix	;wreg free
  5062                           
  5063                           ;common.c: 281: en_put=1;
  5064  0001C4  805C               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5065  0001C6  0012               	return		;funcret
  5066  0001C8                     __end_of_time_set_mt:
  5067                           	opt stack 0
  5068  0001C8                     PL12:
  5069                           	opt stack 22
  5070  0001C8  6A45               	clrf	RTOS_SetTask@taskDelay+1,c
  5071  0001CA  6A44               	clrf	RTOS_SetTask@taskDelay,c
  5072  0001CC  6A47               	clrf	RTOS_SetTask@taskPeriod+1,c
  5073  0001CE  0E14               	movlw	20
  5074  0001D0  6E46               	movwf	RTOS_SetTask@taskPeriod,c
  5075  0001D2  0C14               	retlw	20
  5076  0001D4                     __end_ofPL12:
  5077                           	opt stack 0
  5078  0001D4                     PL40:
  5079                           	opt stack 22
  5080  0001D4  0EF0               	movlw	240
  5081  0001D6  6E4A               	movwf	putchar_b_buf@symbol,c
  5082  0001D8  0C18               	retlw	24
  5083  0001DA                     __end_ofPL40:
  5084                           	opt stack 0
  5085  0001DA                     PL58:
  5086                           	opt stack 22
  5087  0001DA  0ED1               	movlw	209
  5088  0001DC  6E4A               	movwf	putchar_b_buf@symbol,c
  5089  0001DE  0C12               	retlw	18
  5090  0001E0                     __end_ofPL58:
  5091                           	opt stack 0
  5092  0001E0                     PL66:
  5093                           	opt stack 22
  5094  0001E0  0E12               	movlw	low _time_set_mt
  5095  0001E2  6E42               	movwf	RTOS_DeleteTask@taskFunc,c
  5096  0001E4  0E00               	movlw	high _time_set_mt
  5097  0001E6  6E43               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5098  0001E8  0012               	return	
  5099  0001EA                     __end_ofPL66:
  5100                           	opt stack 0
  5101  0001EA                     PL84:
  5102                           	opt stack 22
  5103  0001EA  0ECB               	movlw	203
  5104  0001EC  6E4A               	movwf	putchar_b_buf@symbol,c
  5105  0001EE  0C12               	retlw	18
  5106  0001F0                     __end_ofPL84:
  5107                           	opt stack 0
  5108  0001F0                     PL86:
  5109                           	opt stack 22
  5110  0001F0  0EF1               	movlw	241
  5111  0001F2  6E4A               	movwf	putchar_b_buf@symbol,c
  5112  0001F4  0C06               	retlw	6
  5113  0001F6                     __end_ofPL86:
  5114                           	opt stack 0
  5115  0001F6                     PL88:
  5116                           	opt stack 22
  5117  0001F6  0EC2               	movlw	194
  5118  0001F8  6E4A               	movwf	putchar_b_buf@symbol,c
  5119  0001FA  0C12               	retlw	18
  5120  0001FC                     __end_ofPL88:
  5121                           	opt stack 0
  5122  0001FC                     PL90:
  5123                           	opt stack 22
  5124  0001FC  0ED7               	movlw	215
  5125  0001FE  6E4A               	movwf	putchar_b_buf@symbol,c
  5126  000200  0C12               	retlw	18
  5127  000202                     __end_ofPL90:
  5128                           	opt stack 0
  5129  000202                     PL100:
  5130                           	opt stack 22
  5131  000202  0EEF               	movlw	239
  5132  000204  6E4A               	movwf	putchar_b_buf@symbol,c
  5133  000206  0C18               	retlw	24
  5134  000208                     __end_ofPL100:
  5135                           	opt stack 0
  5136                           tosu	equ	0xFFF
  5137                           tosh	equ	0xFFE
  5138                           tosl	equ	0xFFD
  5139                           pclath	equ	0xFFA
  5140                           tblptru	equ	0xFF8
  5141                           tblptrh	equ	0xFF7
  5142                           tblptrl	equ	0xFF6
  5143                           tablat	equ	0xFF5
  5144                           prodh	equ	0xFF4
  5145                           prodl	equ	0xFF3
  5146                           intcon	equ	0xFF2
  5147                           intcon2	equ	0xFF1
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           indf1	equ	0xFE7
  5151                           plusw1	equ	0xFE3
  5152                           fsr1h	equ	0xFE2
  5153                           fsr1l	equ	0xFE1
  5154                           indf2	equ	0xFDF
  5155                           postinc2	equ	0xFDE
  5156                           postdec2	equ	0xFDD
  5157                           plusw2	equ	0xFDB
  5158                           fsr2h	equ	0xFDA
  5159                           fsr2l	equ	0xFD9
  5160                           status	equ	0xFD8
  5161                           
  5162 ;; *************** function _default_state *****************
  5163 ;; Defined at:
  5164 ;;		line 477 in file "common.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;		None
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;		None
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  1    wreg      void 
  5171 ;; Registers used:
  5172 ;;		wreg, status,2
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;Total ram usage:        0 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    3
  5185 ;; This function calls:
  5186 ;;		Nothing
  5187 ;; This function is called by:
  5188 ;;		_time_set_min
  5189 ;;		_time_set_hr
  5190 ;;		_time_set_yr
  5191 ;;		_time_set_mt
  5192 ;;		_time_set_dt
  5193 ;;		_time_set_dy
  5194 ;;		_time_led
  5195 ;;		_RTOS_DispatchTask
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text19
  5200  001382                     __ptext19:
  5201                           	opt stack 0
  5202  001382                     _default_state:
  5203                           	opt stack 26
  5204                           
  5205                           ;common.c: 479: events = 4;
  5206                           
  5207                           ;incstack = 0
  5208  001382  0E04               	movlw	4
  5209  001384  6E5D               	movwf	_events,c
  5210  001386  0C04               	retlw	4	;funcret
  5211  001388                     __end_of_default_state:
  5212                           	opt stack 0
  5213                           tosu	equ	0xFFF
  5214                           tosh	equ	0xFFE
  5215                           tosl	equ	0xFFD
  5216                           pclath	equ	0xFFA
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           prodh	equ	0xFF4
  5222                           prodl	equ	0xFF3
  5223                           intcon	equ	0xFF2
  5224                           intcon2	equ	0xFF1
  5225                           postinc0	equ	0xFEE
  5226                           wreg	equ	0xFE8
  5227                           indf1	equ	0xFE7
  5228                           plusw1	equ	0xFE3
  5229                           fsr1h	equ	0xFE2
  5230                           fsr1l	equ	0xFE1
  5231                           indf2	equ	0xFDF
  5232                           postinc2	equ	0xFDE
  5233                           postdec2	equ	0xFDD
  5234                           plusw2	equ	0xFDB
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _time_set_hr *****************
  5240 ;; Defined at:
  5241 ;;		line 75 in file "common.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;		None
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;Total ram usage:        0 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    7
  5262 ;; This function calls:
  5263 ;;		_RTOS_DeleteTask
  5264 ;;		_RTOS_SetTask
  5265 ;;		_Update_Matrix
  5266 ;;		___lbdiv
  5267 ;;		___lbmod
  5268 ;;		_clear_matrix
  5269 ;;		_putchar_b_buf
  5270 ;;		_setTime
  5271 ;; This function is called by:
  5272 ;;		_time_set_min
  5273 ;;		_RTOS_DispatchTask
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           	psect	text20
  5278  000384                     __ptext20:
  5279                           	opt stack 0
  5280  000384                     _time_set_hr:
  5281                           	opt stack 22
  5282                           
  5283                           ;common.c: 77: show_digit = ~show_digit;
  5284                           
  5285                           ;incstack = 0
  5286  000384  B25C               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  5287  000386  D002               	goto	u1460
  5288  000388  825C               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  5289  00038A  D03F               	goto	l2933
  5290  00038C                     u1460:
  5291  00038C  925C               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  5292                           
  5293                           ;common.c: 78: switch (events)
  5294  00038E  D03D               	goto	l2933
  5295  000390                     l2889:
  5296                           
  5297                           ;common.c: 84: RTOS_DeleteTask(time_set_hr);
  5298  000390  D885               	call	PL48	;call to abstracted procedure
  5299  000392  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  5300                           
  5301                           ;common.c: 85: RTOS_SetTask(time_set_yr, 0, 20);
  5302  000396  0EE0               	movlw	low _time_set_yr
  5303  000398  6E42               	movwf	RTOS_SetTask@taskFunc,c
  5304  00039A  0E06               	movlw	high _time_set_yr
  5305  00039C  6E43               	movwf	RTOS_SetTask@taskFunc+1,c
  5306  00039E  ECE4  F000         	call	PL12	;call to abstracted procedure
  5307  0003A2  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5308                           
  5309                           ;common.c: 86: RTOS_SetTask(default_state, 2000, 0);
  5310  0003A6  ECCD  F002         	call	PL2	;call to abstracted procedure
  5311  0003AA  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5312                           
  5313                           ;common.c: 88: events = 5;
  5314  0003AE  0E05               	movlw	5
  5315  0003B0  6E5D               	movwf	_events,c
  5316                           
  5317                           ;common.c: 89: clear_matrix();
  5318  0003B2  EC67  F009         	call	_clear_matrix	;wreg free
  5319                           
  5320                           ;common.c: 90: en_put = 0;
  5321  0003B6  905C               	bcf	_en_put/(0+8),_en_put& (0+7),c
  5322                           
  5323                           ;common.c: 91: break;
  5324  0003B8  D032               	goto	l591
  5325  0003BA                     l2901:
  5326                           
  5327                           ;common.c: 93: RTOS_DeleteTask(time_set_hr);
  5328  0003BA  D870               	call	PL48	;call to abstracted procedure
  5329  0003BC  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  5330                           
  5331                           ;common.c: 94: RTOS_DeleteTask(default_state);
  5332  0003C0  ECB2  F001         	call	PL30	;call to abstracted procedure
  5333  0003C4  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  5334                           
  5335                           ;common.c: 95: RTOS_SetTask(time_led, 0, 20);
  5336  0003C8  ECA8  F001         	call	PL10	;call to abstracted procedure
  5337  0003CC  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5338                           
  5339                           ;common.c: 96: events = 5;
  5340  0003D0  0E05               	movlw	5
  5341  0003D2  6E5D               	movwf	_events,c
  5342                           
  5343                           ;common.c: 97: break;
  5344  0003D4  D024               	goto	l591
  5345  0003D6                     l2907:
  5346                           
  5347                           ;common.c: 99: TSTime.Thr++;
  5348  0003D6  2A03               	incf	_TSTime+2,f,c
  5349                           
  5350                           ;common.c: 100: if(TSTime.Thr > 23) TSTime.Thr = 0;
  5351  0003D8  0E17               	movlw	23
  5352  0003DA  6403               	cpfsgt	_TSTime+2,c
  5353  0003DC  D001               	goto	l2913
  5354  0003DE  6A03               	clrf	_TSTime+2,c
  5355  0003E0                     l2913:
  5356                           
  5357                           ;common.c: 101: RTOS_SetTask(default_state, 2000, 0);
  5358  0003E0  ECCD  F002         	call	PL2	;call to abstracted procedure
  5359  0003E4  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5360                           
  5361                           ;common.c: 102: events = 5;
  5362                           
  5363                           ;common.c: 103: setTime(TSTime.Thr,TSTime.Tmin,0);
  5364  0003E8  D852               	call	PL36	;call to abstracted procedure
  5365  0003EA  EC50  F008         	call	_setTime
  5366                           
  5367                           ;common.c: 104: break;
  5368  0003EE  D017               	goto	l591
  5369  0003F0                     l2919:
  5370                           
  5371                           ;common.c: 106: TSTime.Thr--;
  5372  0003F0  0603               	decf	_TSTime+2,f,c
  5373                           
  5374                           ;common.c: 107: if(TSTime.Thr == 255) TSTime.Thr = 23;
  5375  0003F2  2803               	incf	_TSTime+2,w,c
  5376  0003F4  E102               	bnz	l2925
  5377  0003F6  0E17               	movlw	23
  5378  0003F8  6E03               	movwf	_TSTime+2,c
  5379  0003FA                     l2925:
  5380                           
  5381                           ;common.c: 108: RTOS_SetTask(default_state, 2000, 0);
  5382  0003FA  ECCD  F002         	call	PL2	;call to abstracted procedure
  5383  0003FE  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5384                           
  5385                           ;common.c: 109: events = 5;
  5386                           
  5387                           ;common.c: 110: setTime(TSTime.Thr,TSTime.Tmin,0);
  5388  000402  D845               	call	PL36	;call to abstracted procedure
  5389  000404  EC50  F008         	call	_setTime
  5390                           
  5391                           ;common.c: 111: break;
  5392  000408  D00A               	goto	l591
  5393  00040A                     l2933:
  5394  00040A  505D               	movf	_events,w,c
  5395                           
  5396                           ; Switch size 1, requested type "space"
  5397                           ; Number of cases is 5, Range of values is 1 to 5
  5398                           ; switch strategies available:
  5399                           ; Name         Instructions Cycles
  5400                           ; simple_byte           16     9 (average)
  5401                           ;	Chosen strategy is simple_byte
  5402  00040C  0A01               	xorlw	1	; case 1
  5403  00040E  E0C0               	bz	l2889
  5404  000410  0A03               	xorlw	3	; case 2
  5405  000412  E0E1               	bz	l2907
  5406  000414  0A01               	xorlw	1	; case 3
  5407  000416  E0EC               	bz	l2919
  5408  000418  0A07               	xorlw	7	; case 4
  5409  00041A  E0CF               	bz	l2901
  5410  00041C  0A01               	xorlw	1	; case 5
  5411  00041E                     l591:
  5412                           
  5413                           ;common.c: 113: if(en_put)
  5414  00041E  A05C               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5415  000420  D030               	goto	l2941
  5416                           
  5417                           ;common.c: 114: {
  5418                           ;common.c: 115: if(show_digit)
  5419  000422  A25C               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  5420  000424  D026               	goto	l2939
  5421                           
  5422                           ;common.c: 116: {
  5423                           ;common.c: 118: putchar_b_buf(13,(TSTime.Tmin/10) % 10 + 48);
  5424  000426  D83F               	call	PL78	;call to abstracted procedure
  5425  000428  EC05  F008         	call	___lbdiv
  5426  00042C  ECCC  F008         	call	___lbmod
  5427  000430  D846               	call	PL102	;call to abstracted procedure
  5428  000432  EC8A  F006         	call	_putchar_b_buf
  5429                           
  5430                           ;common.c: 119: putchar_b_buf(19,TSTime.Tmin % 10 + 48);
  5431  000436  D83F               	call	PL98	;call to abstracted procedure
  5432  000438  ECCC  F008         	call	___lbmod
  5433  00043C  D839               	call	PL94	;call to abstracted procedure
  5434  00043E  EC8A  F006         	call	_putchar_b_buf
  5435                           
  5436                           ;common.c: 121: putchar_b_buf(0,(TSTime.Thr/10) % 10 + 48);
  5437  000442  0E0A               	movlw	10
  5438  000444  6E46               	movwf	___lbmod@divisor,c
  5439  000446  6E42               	movwf	___lbdiv@divisor,c
  5440  000448  5003               	movf	_TSTime+2,w,c
  5441  00044A  EC05  F008         	call	___lbdiv
  5442  00044E  ECCC  F008         	call	___lbmod
  5443  000452  0F30               	addlw	48
  5444  000454  6E4A               	movwf	putchar_b_buf@symbol,c
  5445  000456  0E00               	movlw	0
  5446  000458  EC8A  F006         	call	_putchar_b_buf
  5447                           
  5448                           ;common.c: 122: putchar_b_buf(6,TSTime.Thr % 10 + 48);
  5449  00045C  0E0A               	movlw	10
  5450  00045E  6E46               	movwf	___lbmod@divisor,c
  5451  000460  5003               	movf	_TSTime+2,w,c
  5452  000462  ECCC  F008         	call	___lbmod
  5453  000466  0F30               	addlw	48
  5454  000468  6E4A               	movwf	putchar_b_buf@symbol,c
  5455  00046A  0E06               	movlw	6
  5456  00046C  EC8A  F006         	call	_putchar_b_buf
  5457                           
  5458                           ;common.c: 123: }
  5459  000470  D008               	goto	l2941
  5460  000472                     l2939:
  5461                           
  5462                           ;common.c: 124: else
  5463                           ;common.c: 125: {
  5464                           ;common.c: 127: putchar_b_buf(0,0);
  5465  000472  0E00               	movlw	0
  5466  000474  6A4A               	clrf	putchar_b_buf@symbol,c
  5467  000476  EC8A  F006         	call	_putchar_b_buf
  5468                           
  5469                           ;common.c: 128: putchar_b_buf(6,0);
  5470  00047A  6A4A               	clrf	putchar_b_buf@symbol,c
  5471  00047C  0E06               	movlw	6
  5472  00047E  EC8A  F006         	call	_putchar_b_buf
  5473  000482                     l2941:
  5474                           
  5475                           ;common.c: 129: }
  5476                           ;common.c: 130: }
  5477                           ;common.c: 131: Update_Matrix(Dis_Buff);
  5478  000482  0E0D               	movlw	low _Dis_Buff
  5479  000484  6E44               	movwf	Update_Matrix@buf,c
  5480  000486  ECB0  F007         	call	_Update_Matrix	;wreg free
  5481                           
  5482                           ;common.c: 132: en_put = 1;
  5483  00048A  805C               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5484  00048C  0012               	return		;funcret
  5485  00048E                     __end_of_time_set_hr:
  5486                           	opt stack 0
  5487  00048E                     PL36:
  5488                           	opt stack 22
  5489  00048E  0E05               	movlw	5
  5490  000490  6E5D               	movwf	_events,c
  5491  000492  C002  F04F         	movff	_TSTime+1,setTime@mSet
  5492  000496  6A50               	clrf	setTime@sSet,c
  5493  000498  5003               	movf	_TSTime+2,w,c
  5494  00049A  0012               	return	
  5495  00049C                     __end_ofPL36:
  5496                           	opt stack 0
  5497  00049C                     PL48:
  5498                           	opt stack 22
  5499  00049C  0E84               	movlw	low _time_set_hr
  5500  00049E  6E42               	movwf	RTOS_DeleteTask@taskFunc,c
  5501  0004A0  0E03               	movlw	high _time_set_hr
  5502  0004A2  6E43               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5503  0004A4  0012               	return	
  5504  0004A6                     __end_ofPL48:
  5505                           	opt stack 0
  5506  0004A6                     PL78:
  5507                           	opt stack 24
  5508  0004A6  0E0A               	movlw	10
  5509  0004A8  6E46               	movwf	___lbmod@divisor,c
  5510  0004AA  6E42               	movwf	___lbdiv@divisor,c
  5511  0004AC  5002               	movf	_TSTime+1,w,c
  5512  0004AE  0012               	return	
  5513  0004B0                     __end_ofPL78:
  5514                           	opt stack 0
  5515  0004B0                     PL94:
  5516                           	opt stack 24
  5517  0004B0  0F30               	addlw	48
  5518  0004B2  6E4A               	movwf	putchar_b_buf@symbol,c
  5519  0004B4  0C13               	retlw	19
  5520  0004B6                     __end_ofPL94:
  5521                           	opt stack 0
  5522  0004B6                     PL98:
  5523                           	opt stack 24
  5524  0004B6  0E0A               	movlw	10
  5525  0004B8  6E46               	movwf	___lbmod@divisor,c
  5526  0004BA  5002               	movf	_TSTime+1,w,c
  5527  0004BC  0012               	return	
  5528  0004BE                     __end_ofPL98:
  5529                           	opt stack 0
  5530  0004BE                     PL102:
  5531                           	opt stack 24
  5532  0004BE  0F30               	addlw	48
  5533  0004C0  6E4A               	movwf	putchar_b_buf@symbol,c
  5534  0004C2  0C0D               	retlw	13
  5535  0004C4                     __end_ofPL102:
  5536                           	opt stack 0
  5537                           tosu	equ	0xFFF
  5538                           tosh	equ	0xFFE
  5539                           tosl	equ	0xFFD
  5540                           pclath	equ	0xFFA
  5541                           tblptru	equ	0xFF8
  5542                           tblptrh	equ	0xFF7
  5543                           tblptrl	equ	0xFF6
  5544                           tablat	equ	0xFF5
  5545                           prodh	equ	0xFF4
  5546                           prodl	equ	0xFF3
  5547                           intcon	equ	0xFF2
  5548                           intcon2	equ	0xFF1
  5549                           postinc0	equ	0xFEE
  5550                           wreg	equ	0xFE8
  5551                           indf1	equ	0xFE7
  5552                           plusw1	equ	0xFE3
  5553                           fsr1h	equ	0xFE2
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           plusw2	equ	0xFDB
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _key_press *****************
  5564 ;; Defined at:
  5565 ;;		line 5 in file "key.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  key             1   14[COMRAM] unsigned char 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;Total ram usage:        1 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    3
  5586 ;; This function calls:
  5587 ;;		Nothing
  5588 ;; This function is called by:
  5589 ;;		_main
  5590 ;;		_RTOS_DispatchTask
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text21
  5595  000EDC                     __ptext21:
  5596                           	opt stack 0
  5597  000EDC                     _key_press:
  5598                           	opt stack 26
  5599                           
  5600                           ;key.c: 7: static uint8_t count = 0;
  5601                           ;key.c: 8: uint8_t key;
  5602                           ;key.c: 10: if ((PORTB & (1<<4))==0)
  5603                           
  5604                           ;incstack = 0
  5605  000EDC  B881               	btfsc	3969,4,c	;volatile
  5606  000EDE  D002               	goto	l725
  5607                           
  5608                           ;key.c: 11: key = 1;
  5609  000EE0  0E01               	movlw	1
  5610  000EE2  D00B               	goto	L3
  5611  000EE4                     l725:
  5612                           
  5613                           ;key.c: 12: else if ((PORTB & (1<<1))==0)
  5614  000EE4  B281               	btfsc	3969,1,c	;volatile
  5615  000EE6  D002               	goto	l727
  5616                           
  5617                           ;key.c: 13: key = 2;
  5618  000EE8  0E02               	movlw	2
  5619  000EEA  D007               	goto	L3
  5620  000EEC                     l727:
  5621                           
  5622                           ;key.c: 14: else if ((PORTB & (1<<2))==0)
  5623  000EEC  B481               	btfsc	3969,2,c	;volatile
  5624  000EEE  D002               	goto	l729
  5625                           
  5626                           ;key.c: 15: key = 3;
  5627  000EF0  0E03               	movlw	3
  5628  000EF2  D003               	goto	L3
  5629  000EF4                     l729:
  5630                           
  5631                           ;key.c: 16: else if ((PORTB & (1<<3))==0)
  5632  000EF4  B681               	btfsc	3969,3,c	;volatile
  5633  000EF6  D003               	goto	l731
  5634                           
  5635                           ;key.c: 17: key = 4;
  5636  000EF8  0E04               	movlw	4
  5637  000EFA                     L3:
  5638  000EFA  6E42               	movwf	key_press@key,c
  5639  000EFC  D001               	goto	l3253
  5640  000EFE                     l731:
  5641                           
  5642                           ;key.c: 18: else
  5643                           ;key.c: 19: key = (0);
  5644  000EFE  6A42               	clrf	key_press@key,c
  5645  000F00                     l3253:
  5646                           
  5647                           ;key.c: 22: if(key){
  5648  000F00  5042               	movf	key_press@key,w,c
  5649  000F02  E00C               	bz	l733
  5650                           
  5651                           ;key.c: 23: if(count <= 30)
  5652  000F04  0E1F               	movlw	31
  5653  000F06  6008               	cpfslt	key_press@count,c
  5654  000F08  0C1F               	retlw	31
  5655                           
  5656                           ;key.c: 24: {
  5657                           ;key.c: 25: count++;
  5658  000F0A  2A08               	incf	key_press@count,f,c
  5659                           
  5660                           ;key.c: 26: if(count == 30)
  5661  000F0C  0E1E               	movlw	30
  5662  000F0E  1808               	xorwf	key_press@count,w,c
  5663  000F10  A4D8               	btfss	status,2,c
  5664  000F12  0012               	return	
  5665                           
  5666                           ;key.c: 27: {
  5667                           ;key.c: 29: events = key;
  5668  000F14  C042  F05D         	movff	key_press@key,_events
  5669                           
  5670                           ;key.c: 30: count = 0;
  5671  000F18  6A08               	clrf	key_press@count,c
  5672  000F1A  0012               	return	
  5673  000F1C                     l733:
  5674                           
  5675                           ;key.c: 34: else
  5676                           ;key.c: 35: {
  5677                           ;key.c: 36: count = 0;
  5678  000F1C  6A08               	clrf	key_press@count,c
  5679  000F1E  0012               	return		;funcret
  5680  000F20                     __end_of_key_press:
  5681                           	opt stack 0
  5682                           tosu	equ	0xFFF
  5683                           tosh	equ	0xFFE
  5684                           tosl	equ	0xFFD
  5685                           pclath	equ	0xFFA
  5686                           tblptru	equ	0xFF8
  5687                           tblptrh	equ	0xFF7
  5688                           tblptrl	equ	0xFF6
  5689                           tablat	equ	0xFF5
  5690                           prodh	equ	0xFF4
  5691                           prodl	equ	0xFF3
  5692                           intcon	equ	0xFF2
  5693                           intcon2	equ	0xFF1
  5694                           postinc0	equ	0xFEE
  5695                           wreg	equ	0xFE8
  5696                           indf1	equ	0xFE7
  5697                           plusw1	equ	0xFE3
  5698                           fsr1h	equ	0xFE2
  5699                           fsr1l	equ	0xFE1
  5700                           indf2	equ	0xFDF
  5701                           postinc2	equ	0xFDE
  5702                           postdec2	equ	0xFDD
  5703                           plusw2	equ	0xFDB
  5704                           fsr2h	equ	0xFDA
  5705                           fsr2l	equ	0xFD9
  5706                           status	equ	0xFD8
  5707                           
  5708 ;; *************** function _time_led *****************
  5709 ;; Defined at:
  5710 ;;		line 417 in file "common.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;		None
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;		None
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  1    wreg      void 
  5717 ;; Registers used:
  5718 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;Total ram usage:        0 bytes
  5729 ;; Hardware stack levels used:    1
  5730 ;; Hardware stack levels required when called:    5
  5731 ;; This function calls:
  5732 ;;		_FillBuf
  5733 ;;		_RTOS_DeleteTask
  5734 ;;		_RTOS_SetTask
  5735 ;;		_Update_Matrix
  5736 ;;		_clear_matrix
  5737 ;;		_ow_reset
  5738 ;;		_pic_to_led
  5739 ;; This function is called by:
  5740 ;;		_main
  5741 ;;		_time_set_min
  5742 ;;		_time_set_hr
  5743 ;;		_time_set_yr
  5744 ;;		_time_set_mt
  5745 ;;		_time_set_dt
  5746 ;;		_time_set_dy
  5747 ;;		_RTOS_DispatchTask
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	text22
  5752  000A2C                     __ptext22:
  5753                           	opt stack 0
  5754  000A2C                     _time_led:
  5755                           	opt stack 24
  5756                           
  5757                           ;common.c: 421: switch (events)
  5758                           
  5759                           ;incstack = 0
  5760  000A2C  D037               	goto	l3225
  5761  000A2E                     l3201:
  5762                           
  5763                           ;common.c: 424: FillBuf();
  5764  000A2E  ECEE  F002         	call	_FillBuf	;wreg free
  5765                           
  5766                           ;common.c: 426: break;
  5767  000A32  D03D               	goto	l3227
  5768  000A34                     l3203:
  5769                           
  5770                           ;common.c: 440: RTOS_DeleteTask(time_led);
  5771  000A34  0E2C               	movlw	low _time_led
  5772  000A36  6E42               	movwf	RTOS_DeleteTask@taskFunc,c
  5773  000A38  0E0A               	movlw	high _time_led
  5774  000A3A  6E43               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5775  000A3C  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  5776                           
  5777                           ;common.c: 441: RTOS_SetTask(time_set_min, 0, 50);
  5778  000A40  0EB8               	movlw	low _time_set_min
  5779  000A42  6E42               	movwf	RTOS_SetTask@taskFunc,c
  5780  000A44  0E08               	movlw	high _time_set_min
  5781  000A46  ECB9  F004         	call	PL34	;call to abstracted procedure
  5782  000A4A  0E32               	movlw	50
  5783  000A4C  6E46               	movwf	RTOS_SetTask@taskPeriod,c
  5784  000A4E  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5785                           
  5786                           ;common.c: 442: RTOS_SetTask(default_state, 2000, 0);
  5787  000A52  ECCD  F002         	call	PL2	;call to abstracted procedure
  5788  000A56  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5789                           
  5790                           ;common.c: 443: TSTime = TTime;
  5791  000A5A  EE20  F02D         	lfsr	2,_TTime
  5792  000A5E  EE10  F001         	lfsr	1,_TSTime
  5793  000A62  0E06               	movlw	6
  5794  000A64                     u1641:
  5795  000A64  CFDB FFE3          	movff	plusw2,plusw1
  5796  000A68  06E8               	decf	wreg,f,c
  5797  000A6A  E2FC               	bc	u1641
  5798                           
  5799                           ;common.c: 444: events = 5;
  5800  000A6C  0E05               	movlw	5
  5801  000A6E  6E5D               	movwf	_events,c
  5802                           
  5803                           ;common.c: 445: break;
  5804  000A70  D01E               	goto	l3227
  5805  000A72                     l3213:
  5806                           
  5807                           ;common.c: 447: clear_matrix();
  5808  000A72  EC67  F009         	call	_clear_matrix	;wreg free
  5809                           
  5810                           ;common.c: 448: pic_to_led(0,1);
  5811  000A76  0E01               	movlw	1
  5812  000A78  6E47               	movwf	pic_to_led@pic,c
  5813  000A7A  0E00               	movlw	0
  5814  000A7C  ECBF  F006         	call	_pic_to_led
  5815                           
  5816                           ;common.c: 449: pic_to_led(8,2);
  5817  000A80  0E02               	movlw	2
  5818  000A82  6E47               	movwf	pic_to_led@pic,c
  5819  000A84  0E08               	movlw	8
  5820  000A86  ECBF  F006         	call	_pic_to_led
  5821                           
  5822                           ;common.c: 450: pic_to_led(16,3);
  5823  000A8A  0E03               	movlw	3
  5824  000A8C  6E47               	movwf	pic_to_led@pic,c
  5825  000A8E  0E10               	movlw	16
  5826  000A90  ECBF  F006         	call	_pic_to_led
  5827                           
  5828                           ;common.c: 451: break;
  5829  000A94  D00C               	goto	l3227
  5830  000A96                     l3221:
  5831                           
  5832                           ;common.c: 453: ow_reset();
  5833  000A96  ECEB  F007         	call	_ow_reset	;wreg free
  5834                           
  5835                           ;common.c: 454: break;
  5836  000A9A  D009               	goto	l3227
  5837  000A9C                     l3225:
  5838  000A9C  505D               	movf	_events,w,c
  5839                           
  5840                           ; Switch size 1, requested type "space"
  5841                           ; Number of cases is 4, Range of values is 1 to 5
  5842                           ; switch strategies available:
  5843                           ; Name         Instructions Cycles
  5844                           ; simple_byte           13     7 (average)
  5845                           ;	Chosen strategy is simple_byte
  5846  000A9E  0A01               	xorlw	1	; case 1
  5847  000AA0  E0C9               	bz	l3203
  5848  000AA2  0A03               	xorlw	3	; case 2
  5849  000AA4  E0E6               	bz	l3213
  5850  000AA6  0A01               	xorlw	1	; case 3
  5851  000AA8  E0F6               	bz	l3221
  5852  000AAA  0A06               	xorlw	6	; case 5
  5853  000AAC  E0C0               	bz	l3201
  5854  000AAE                     l3227:
  5855                           
  5856                           ;common.c: 456: Update_Matrix(Dis_Buff);
  5857  000AAE  0E0D               	movlw	low _Dis_Buff
  5858  000AB0  6E44               	movwf	Update_Matrix@buf,c
  5859  000AB2  EFB0  F007         	goto	_Update_Matrix	;wreg free
  5860  000AB6                     __end_of_time_led:
  5861                           	opt stack 0
  5862                           tosu	equ	0xFFF
  5863                           tosh	equ	0xFFE
  5864                           tosl	equ	0xFFD
  5865                           pclath	equ	0xFFA
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           intcon	equ	0xFF2
  5873                           intcon2	equ	0xFF1
  5874                           postinc0	equ	0xFEE
  5875                           wreg	equ	0xFE8
  5876                           indf1	equ	0xFE7
  5877                           plusw1	equ	0xFE3
  5878                           fsr1h	equ	0xFE2
  5879                           fsr1l	equ	0xFE1
  5880                           indf2	equ	0xFDF
  5881                           postinc2	equ	0xFDE
  5882                           postdec2	equ	0xFDD
  5883                           plusw2	equ	0xFDB
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function _time_set_yr *****************
  5889 ;; Defined at:
  5890 ;;		line 137 in file "common.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;		None
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;Total ram usage:        0 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    7
  5911 ;; This function calls:
  5912 ;;		_RTOS_DeleteTask
  5913 ;;		_RTOS_SetTask
  5914 ;;		_Update_Matrix
  5915 ;;		___lbdiv
  5916 ;;		___lbmod
  5917 ;;		_putchar_b_buf
  5918 ;;		_setDate
  5919 ;; This function is called by:
  5920 ;;		_time_set_hr
  5921 ;;		_RTOS_DispatchTask
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	text23
  5926  0006E0                     __ptext23:
  5927                           	opt stack 0
  5928  0006E0                     _time_set_yr:
  5929                           	opt stack 22
  5930                           
  5931                           ;common.c: 139: switch (events)
  5932                           
  5933                           ;incstack = 0
  5934  0006E0  D03D               	goto	l2989
  5935  0006E2                     l2947:
  5936                           
  5937                           ;common.c: 145: RTOS_DeleteTask(time_set_yr);
  5938  0006E2  D86F               	call	PL50	;call to abstracted procedure
  5939  0006E4  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  5940                           
  5941                           ;common.c: 146: RTOS_SetTask(time_set_mt, 0, 20);
  5942  0006E8  0E12               	movlw	low _time_set_mt
  5943  0006EA  6E42               	movwf	RTOS_SetTask@taskFunc,c
  5944  0006EC  0E00               	movlw	high _time_set_mt
  5945  0006EE  6E43               	movwf	RTOS_SetTask@taskFunc+1,c
  5946  0006F0  ECE4  F000         	call	PL12	;call to abstracted procedure
  5947  0006F4  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5948                           
  5949                           ;common.c: 147: RTOS_SetTask(default_state, 2000, 0);
  5950  0006F8  ECCD  F002         	call	PL2	;call to abstracted procedure
  5951  0006FC  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5952                           
  5953                           ;common.c: 148: events = 5;
  5954  000700  0E05               	movlw	5
  5955  000702  6E5D               	movwf	_events,c
  5956                           
  5957                           ;common.c: 149: en_put=0;
  5958  000704  905C               	bcf	_en_put/(0+8),_en_put& (0+7),c
  5959                           
  5960                           ;common.c: 150: break;
  5961  000706  D034               	goto	l606
  5962  000708                     l2957:
  5963                           
  5964                           ;common.c: 152: RTOS_DeleteTask(time_set_yr);
  5965  000708  D85C               	call	PL50	;call to abstracted procedure
  5966  00070A  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  5967                           
  5968                           ;common.c: 153: RTOS_DeleteTask(default_state);
  5969  00070E  ECB2  F001         	call	PL30	;call to abstracted procedure
  5970  000712  EC1D  F006         	call	_RTOS_DeleteTask	;wreg free
  5971                           
  5972                           ;common.c: 154: RTOS_SetTask(time_led, 0, 20);
  5973  000716  ECA8  F001         	call	PL10	;call to abstracted procedure
  5974  00071A  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5975                           
  5976                           ;common.c: 155: events = 5;
  5977  00071E  0E05               	movlw	5
  5978  000720  6E5D               	movwf	_events,c
  5979                           
  5980                           ;common.c: 156: break;
  5981  000722  D026               	goto	l606
  5982  000724                     l2963:
  5983                           
  5984                           ;common.c: 158: TSTime.Tyr++;
  5985  000724  2A07               	incf	_TSTime+6,f,c
  5986                           
  5987                           ;common.c: 159: if(TSTime.Tyr > 99) TSTime.Tyr = 0;
  5988  000726  0E63               	movlw	99
  5989  000728  6407               	cpfsgt	_TSTime+6,c
  5990  00072A  D001               	goto	l2969
  5991  00072C  6A07               	clrf	_TSTime+6,c
  5992  00072E                     l2969:
  5993                           
  5994                           ;common.c: 160: RTOS_SetTask(default_state, 2000, 0);
  5995  00072E  ECCD  F002         	call	PL2	;call to abstracted procedure
  5996  000732  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  5997                           
  5998                           ;common.c: 161: events = 5;
  5999                           
  6000                           ;common.c: 162: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6001  000736  ECD8  F002         	call	PL8	;call to abstracted procedure
  6002  00073A  ECCE  F007         	call	_setDate
  6003                           
  6004                           ;common.c: 163: break;
  6005  00073E  D018               	goto	l606
  6006  000740                     l2975:
  6007                           
  6008                           ;common.c: 165: TSTime.Tyr--;
  6009  000740  0607               	decf	_TSTime+6,f,c
  6010                           
  6011                           ;common.c: 166: if(TSTime.Tyr == 255) TSTime.Tyr = 99;
  6012  000742  2807               	incf	_TSTime+6,w,c
  6013  000744  E102               	bnz	l2981
  6014  000746  0E63               	movlw	99
  6015  000748  6E07               	movwf	_TSTime+6,c
  6016  00074A                     l2981:
  6017                           
  6018                           ;common.c: 167: RTOS_SetTask(default_state, 2000, 0);
  6019  00074A  ECCD  F002         	call	PL2	;call to abstracted procedure
  6020  00074E  EC5B  F005         	call	_RTOS_SetTask	;wreg free
  6021                           
  6022                           ;common.c: 168: events = 5;
  6023                           
  6024                           ;common.c: 169: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6025  000752  ECD8  F002         	call	PL8	;call to abstracted procedure
  6026  000756  ECCE  F007         	call	_setDate
  6027                           
  6028                           ;common.c: 170: break;
  6029  00075A  D00A               	goto	l606
  6030  00075C                     l2989:
  6031  00075C  505D               	movf	_events,w,c
  6032                           
  6033                           ; Switch size 1, requested type "space"
  6034                           ; Number of cases is 5, Range of values is 1 to 5
  6035                           ; switch strategies available:
  6036                           ; Name         Instructions Cycles
  6037                           ; simple_byte           16     9 (average)
  6038                           ;	Chosen strategy is simple_byte
  6039  00075E  0A01               	xorlw	1	; case 1
  6040  000760  E0C0               	bz	l2947
  6041  000762  0A03               	xorlw	3	; case 2
  6042  000764  E0DF               	bz	l2963
  6043  000766  0A01               	xorlw	1	; case 3
  6044  000768  E0EB               	bz	l2975
  6045  00076A  0A07               	xorlw	7	; case 4
  6046  00076C  E0CD               	bz	l2957
  6047  00076E  0A01               	xorlw	1	; case 5
  6048  000770                     l606:
  6049                           
  6050                           ;common.c: 172: if(en_put)
  6051  000770  A05C               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6052  000772  D021               	goto	l2993
  6053                           
  6054                           ;common.c: 173: {
  6055                           ;common.c: 174: putchar_b_buf(0,'Ð');
  6056  000774  0ED0               	movlw	208
  6057  000776  6E4A               	movwf	putchar_b_buf@symbol,c
  6058  000778  0E00               	movlw	0
  6059  00077A  EC8A  F006         	call	_putchar_b_buf
  6060                           
  6061                           ;common.c: 175: putchar_b_buf(6,'ê');
  6062  00077E  0EEA               	movlw	234
  6063  000780  6E4A               	movwf	putchar_b_buf@symbol,c
  6064  000782  0E06               	movlw	6
  6065  000784  EC8A  F006         	call	_putchar_b_buf
  6066                           
  6067                           ;common.c: 176: putchar_b_buf(12,':');
  6068  000788  ECE7  F002         	call	PL72	;call to abstracted procedure
  6069  00078C  EC8A  F006         	call	_putchar_b_buf
  6070                           
  6071                           ;common.c: 177: putchar_b_buf(18,(TSTime.Tyr/10) % 10 + 48);
  6072  000790  0E0A               	movlw	10
  6073  000792  6E46               	movwf	___lbmod@divisor,c
  6074  000794  6E42               	movwf	___lbdiv@divisor,c
  6075  000796  5007               	movf	_TSTime+6,w,c
  6076  000798  EC05  F008         	call	___lbdiv
  6077  00079C  ECCC  F008         	call	___lbmod
  6078  0007A0  D815               	call	PL92	;call to abstracted procedure
  6079  0007A2  EC8A  F006         	call	_putchar_b_buf
  6080                           
  6081                           ;common.c: 178: putchar_b_buf(24,TSTime.Tyr % 10 + 48);
  6082  0007A6  0E0A               	movlw	10
  6083  0007A8  6E46               	movwf	___lbmod@divisor,c
  6084  0007AA  5007               	movf	_TSTime+6,w,c
  6085  0007AC  ECCC  F008         	call	___lbmod
  6086  0007B0  D810               	call	PL96	;call to abstracted procedure
  6087  0007B2  EC8A  F006         	call	_putchar_b_buf
  6088  0007B6                     l2993:
  6089                           
  6090                           ;common.c: 179: }
  6091                           ;common.c: 180: Update_Matrix(Dis_Buff);
  6092  0007B6  0E0D               	movlw	low _Dis_Buff
  6093  0007B8  6E44               	movwf	Update_Matrix@buf,c
  6094  0007BA  ECB0  F007         	call	_Update_Matrix	;wreg free
  6095                           
  6096                           ;common.c: 181: en_put=1;
  6097  0007BE  805C               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6098  0007C0  0012               	return		;funcret
  6099  0007C2                     __end_of_time_set_yr:
  6100                           	opt stack 0
  6101  0007C2                     PL50:
  6102                           	opt stack 22
  6103  0007C2  0EE0               	movlw	low _time_set_yr
  6104  0007C4  6E42               	movwf	RTOS_DeleteTask@taskFunc,c
  6105  0007C6  0E06               	movlw	high _time_set_yr
  6106  0007C8  6E43               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6107  0007CA  0012               	return	
  6108  0007CC                     __end_ofPL50:
  6109                           	opt stack 0
  6110  0007CC                     PL92:
  6111                           	opt stack 22
  6112  0007CC  0F30               	addlw	48
  6113  0007CE  6E4A               	movwf	putchar_b_buf@symbol,c
  6114  0007D0  0C12               	retlw	18
  6115  0007D2                     __end_ofPL92:
  6116                           	opt stack 0
  6117  0007D2                     PL96:
  6118                           	opt stack 22
  6119  0007D2  0F30               	addlw	48
  6120  0007D4  6E4A               	movwf	putchar_b_buf@symbol,c
  6121  0007D6  0C18               	retlw	24
  6122  0007D8                     __end_ofPL96:
  6123                           	opt stack 0
  6124                           tosu	equ	0xFFF
  6125                           tosh	equ	0xFFE
  6126                           tosl	equ	0xFFD
  6127                           pclath	equ	0xFFA
  6128                           tblptru	equ	0xFF8
  6129                           tblptrh	equ	0xFF7
  6130                           tblptrl	equ	0xFF6
  6131                           tablat	equ	0xFF5
  6132                           prodh	equ	0xFF4
  6133                           prodl	equ	0xFF3
  6134                           intcon	equ	0xFF2
  6135                           intcon2	equ	0xFF1
  6136                           postinc0	equ	0xFEE
  6137                           wreg	equ	0xFE8
  6138                           indf1	equ	0xFE7
  6139                           plusw1	equ	0xFE3
  6140                           fsr1h	equ	0xFE2
  6141                           fsr1l	equ	0xFE1
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           plusw2	equ	0xFDB
  6146                           fsr2h	equ	0xFDA
  6147                           fsr2l	equ	0xFD9
  6148                           status	equ	0xFD8
  6149                           
  6150 ;; *************** function _setTime *****************
  6151 ;; Defined at:
  6152 ;;		line 71 in file "ds3231.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  hSet            1    wreg     unsigned char 
  6155 ;;  mSet            1   27[COMRAM] unsigned char 
  6156 ;;  sSet            1   28[COMRAM] unsigned char 
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;  hSet            1   29[COMRAM] unsigned char 
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  1    wreg      void 
  6161 ;; Registers used:
  6162 ;;		wreg, status,2, status,0, cstack
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6168 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6169 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;Total ram usage:        3 bytes
  6173 ;; Hardware stack levels used:    1
  6174 ;; Hardware stack levels required when called:    6
  6175 ;; This function calls:
  6176 ;;		_DS3231_Write
  6177 ;;		_decimal_to_bcd
  6178 ;; This function is called by:
  6179 ;;		_time_set_hr
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text24
  6184  0010A0                     __ptext24:
  6185                           	opt stack 0
  6186  0010A0                     _setTime:
  6187                           	opt stack 22
  6188                           
  6189                           ;incstack = 0
  6190                           ;setTime@hSet stored from wreg
  6191  0010A0  6E51               	movwf	setTime@hSet,c
  6192                           
  6193                           ;ds3231.c: 73: DS3231_Write(0x00, (decimal_to_bcd(sSet)));
  6194  0010A2  5050               	movf	setTime@sSet,w,c
  6195  0010A4  ECB9  F008         	call	_decimal_to_bcd
  6196  0010A8  6E4D               	movwf	DS3231_Write@value,c
  6197  0010AA  0E00               	movlw	0
  6198  0010AC  EC4E  F009         	call	_DS3231_Write
  6199                           
  6200                           ;ds3231.c: 74: DS3231_Write(0x01, (decimal_to_bcd(mSet)));
  6201  0010B0  504F               	movf	setTime@mSet,w,c
  6202  0010B2  ECB9  F008         	call	_decimal_to_bcd
  6203  0010B6  6E4D               	movwf	DS3231_Write@value,c
  6204  0010B8  0E01               	movlw	1
  6205  0010BA  EC4E  F009         	call	_DS3231_Write
  6206                           
  6207                           ;ds3231.c: 75: DS3231_Write(0x02, (0x3F & (decimal_to_bcd(hSet))));
  6208  0010BE  5051               	movf	setTime@hSet,w,c
  6209  0010C0  ECB9  F008         	call	_decimal_to_bcd
  6210  0010C4  0B3F               	andlw	63
  6211  0010C6  6E4D               	movwf	DS3231_Write@value,c
  6212  0010C8  0E02               	movlw	2
  6213  0010CA  EF4E  F009         	goto	_DS3231_Write
  6214  0010CE                     __end_of_setTime:
  6215                           	opt stack 0
  6216                           tosu	equ	0xFFF
  6217                           tosh	equ	0xFFE
  6218                           tosl	equ	0xFFD
  6219                           pclath	equ	0xFFA
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           intcon	equ	0xFF2
  6227                           intcon2	equ	0xFF1
  6228                           postinc0	equ	0xFEE
  6229                           wreg	equ	0xFE8
  6230                           indf1	equ	0xFE7
  6231                           plusw1	equ	0xFE3
  6232                           fsr1h	equ	0xFE2
  6233                           fsr1l	equ	0xFE1
  6234                           indf2	equ	0xFDF
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           plusw2	equ	0xFDB
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _setDate *****************
  6243 ;; Defined at:
  6244 ;;		line 79 in file "ds3231.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  daySet          1    wreg     unsigned char 
  6247 ;;  dateSet         1   27[COMRAM] unsigned char 
  6248 ;;  monthSet        1   28[COMRAM] unsigned char 
  6249 ;;  yearSet         1   29[COMRAM] unsigned char 
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;  daySet          1   30[COMRAM] unsigned char 
  6252 ;; Return value:  Size  Location     Type
  6253 ;;                  1    wreg      void 
  6254 ;; Registers used:
  6255 ;;		wreg, status,2, status,0, cstack
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6261 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6264 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;Total ram usage:        4 bytes
  6266 ;; Hardware stack levels used:    1
  6267 ;; Hardware stack levels required when called:    6
  6268 ;; This function calls:
  6269 ;;		_DS3231_Write
  6270 ;;		_decimal_to_bcd
  6271 ;; This function is called by:
  6272 ;;		_time_set_yr
  6273 ;;		_time_set_mt
  6274 ;;		_time_set_dt
  6275 ;;		_time_set_dy
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text25
  6280  000F9C                     __ptext25:
  6281                           	opt stack 0
  6282  000F9C                     _setDate:
  6283                           	opt stack 22
  6284                           
  6285                           ;incstack = 0
  6286                           ;setDate@daySet stored from wreg
  6287  000F9C  6E52               	movwf	setDate@daySet,c
  6288                           
  6289                           ;ds3231.c: 81: DS3231_Write(0x03, (decimal_to_bcd(daySet)));
  6290  000F9E  5052               	movf	setDate@daySet,w,c
  6291  000FA0  ECB9  F008         	call	_decimal_to_bcd
  6292  000FA4  6E4D               	movwf	DS3231_Write@value,c
  6293  000FA6  0E03               	movlw	3
  6294  000FA8  EC4E  F009         	call	_DS3231_Write
  6295                           
  6296                           ;ds3231.c: 82: DS3231_Write(0x04, (decimal_to_bcd(dateSet)));
  6297  000FAC  504F               	movf	setDate@dateSet,w,c
  6298  000FAE  ECB9  F008         	call	_decimal_to_bcd
  6299  000FB2  6E4D               	movwf	DS3231_Write@value,c
  6300  000FB4  0E04               	movlw	4
  6301  000FB6  EC4E  F009         	call	_DS3231_Write
  6302                           
  6303                           ;ds3231.c: 83: DS3231_Write(0x05, (decimal_to_bcd(monthSet)));
  6304  000FBA  5050               	movf	setDate@monthSet,w,c
  6305  000FBC  ECB9  F008         	call	_decimal_to_bcd
  6306  000FC0  6E4D               	movwf	DS3231_Write@value,c
  6307  000FC2  0E05               	movlw	5
  6308  000FC4  EC4E  F009         	call	_DS3231_Write
  6309                           
  6310                           ;ds3231.c: 84: DS3231_Write(0x06, (decimal_to_bcd(yearSet)));
  6311  000FC8  5051               	movf	setDate@yearSet,w,c
  6312  000FCA  ECB9  F008         	call	_decimal_to_bcd
  6313  000FCE  6E4D               	movwf	DS3231_Write@value,c
  6314  000FD0  0E06               	movlw	6
  6315  000FD2  EF4E  F009         	goto	_DS3231_Write
  6316  000FD6                     __end_of_setDate:
  6317                           	opt stack 0
  6318                           tosu	equ	0xFFF
  6319                           tosh	equ	0xFFE
  6320                           tosl	equ	0xFFD
  6321                           pclath	equ	0xFFA
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon	equ	0xFF2
  6329                           intcon2	equ	0xFF1
  6330                           postinc0	equ	0xFEE
  6331                           wreg	equ	0xFE8
  6332                           indf1	equ	0xFE7
  6333                           plusw1	equ	0xFE3
  6334                           fsr1h	equ	0xFE2
  6335                           fsr1l	equ	0xFE1
  6336                           indf2	equ	0xFDF
  6337                           postinc2	equ	0xFDE
  6338                           postdec2	equ	0xFDD
  6339                           plusw2	equ	0xFDB
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function _decimal_to_bcd *****************
  6345 ;; Defined at:
  6346 ;;		line 10 in file "ds3231.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  d               1    wreg     unsigned char 
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;  d               1   24[COMRAM] unsigned char 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      unsigned char 
  6353 ;; Registers used:
  6354 ;;		wreg, status,2, status,0, cstack
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;Total ram usage:        3 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    4
  6367 ;; This function calls:
  6368 ;;		___lbdiv
  6369 ;;		___lbmod
  6370 ;; This function is called by:
  6371 ;;		_setTime
  6372 ;;		_setDate
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text26
  6377  001172                     __ptext26:
  6378                           	opt stack 0
  6379  001172                     _decimal_to_bcd:
  6380                           	opt stack 23
  6381                           
  6382                           ;incstack = 0
  6383                           ;decimal_to_bcd@d stored from wreg
  6384  001172  6E4C               	movwf	decimal_to_bcd@d,c
  6385                           
  6386                           ;ds3231.c: 12: return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
  6387  001174  0E0A               	movlw	10
  6388  001176  6E46               	movwf	___lbmod@divisor,c
  6389  001178  504C               	movf	decimal_to_bcd@d,w,c
  6390  00117A  ECCC  F008         	call	___lbmod
  6391  00117E  6E4A               	movwf	??_decimal_to_bcd& (0+255),c
  6392  001180  0E0F               	movlw	15
  6393  001182  164A               	andwf	??_decimal_to_bcd,f,c
  6394  001184  0E0A               	movlw	10
  6395  001186  6E42               	movwf	___lbdiv@divisor,c
  6396  001188  504C               	movf	decimal_to_bcd@d,w,c
  6397  00118A  EC05  F008         	call	___lbdiv
  6398  00118E  6E4B               	movwf	(??_decimal_to_bcd+1)& (0+255),c
  6399  001190  384B               	swapf	??_decimal_to_bcd+1,w,c
  6400  001192  0BF0               	andlw	240
  6401  001194  104A               	iorwf	??_decimal_to_bcd,w,c
  6402  001196  0012               	return		;funcret
  6403  001198                     __end_of_decimal_to_bcd:
  6404                           	opt stack 0
  6405                           tosu	equ	0xFFF
  6406                           tosh	equ	0xFFE
  6407                           tosl	equ	0xFFD
  6408                           pclath	equ	0xFFA
  6409                           tblptru	equ	0xFF8
  6410                           tblptrh	equ	0xFF7
  6411                           tblptrl	equ	0xFF6
  6412                           tablat	equ	0xFF5
  6413                           prodh	equ	0xFF4
  6414                           prodl	equ	0xFF3
  6415                           intcon	equ	0xFF2
  6416                           intcon2	equ	0xFF1
  6417                           postinc0	equ	0xFEE
  6418                           wreg	equ	0xFE8
  6419                           indf1	equ	0xFE7
  6420                           plusw1	equ	0xFE3
  6421                           fsr1h	equ	0xFE2
  6422                           fsr1l	equ	0xFE1
  6423                           indf2	equ	0xFDF
  6424                           postinc2	equ	0xFDE
  6425                           postdec2	equ	0xFDD
  6426                           plusw2	equ	0xFDB
  6427                           fsr2h	equ	0xFDA
  6428                           fsr2l	equ	0xFD9
  6429                           status	equ	0xFD8
  6430                           
  6431 ;; *************** function _DS3231_Write *****************
  6432 ;; Defined at:
  6433 ;;		line 28 in file "ds3231.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;  address         1    wreg     unsigned char 
  6436 ;;  value           1   25[COMRAM] unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  address         1   26[COMRAM] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0, cstack
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6448 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;Total ram usage:        2 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    5
  6455 ;; This function calls:
  6456 ;;		_I2C_start
  6457 ;;		_I2C_stop
  6458 ;;		_I2C_write
  6459 ;; This function is called by:
  6460 ;;		_DS3231_init
  6461 ;;		_setTime
  6462 ;;		_setDate
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text27
  6467  00129C                     __ptext27:
  6468                           	opt stack 0
  6469  00129C                     _DS3231_Write:
  6470                           	opt stack 23
  6471                           
  6472                           ;incstack = 0
  6473                           ;DS3231_Write@address stored from wreg
  6474  00129C  6E4E               	movwf	DS3231_Write@address,c
  6475                           
  6476                           ;ds3231.c: 30: I2C_start(0xD0,0);
  6477  00129E  6A43               	clrf	I2C_start@_R_W,c
  6478  0012A0  0ED0               	movlw	208
  6479  0012A2  EC67  F008         	call	_I2C_start
  6480                           
  6481                           ;ds3231.c: 31: I2C_write(address);
  6482  0012A6  504E               	movf	DS3231_Write@address,w,c
  6483  0012A8  EC40  F009         	call	_I2C_write
  6484                           
  6485                           ;ds3231.c: 32: I2C_write(value);
  6486  0012AC  504D               	movf	DS3231_Write@value,w,c
  6487  0012AE  EC40  F009         	call	_I2C_write
  6488                           
  6489                           ;ds3231.c: 33: I2C_stop();
  6490  0012B2  EFB8  F009         	goto	_I2C_stop	;wreg free
  6491  0012B6                     __end_of_DS3231_Write:
  6492                           	opt stack 0
  6493                           tosu	equ	0xFFF
  6494                           tosh	equ	0xFFE
  6495                           tosl	equ	0xFFD
  6496                           pclath	equ	0xFFA
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           intcon2	equ	0xFF1
  6505                           postinc0	equ	0xFEE
  6506                           wreg	equ	0xFE8
  6507                           indf1	equ	0xFE7
  6508                           plusw1	equ	0xFE3
  6509                           fsr1h	equ	0xFE2
  6510                           fsr1l	equ	0xFE1
  6511                           indf2	equ	0xFDF
  6512                           postinc2	equ	0xFDE
  6513                           postdec2	equ	0xFDD
  6514                           plusw2	equ	0xFDB
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519 ;; *************** function _putchar_b_buf *****************
  6520 ;; Defined at:
  6521 ;;		line 50 in file "display.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;  x               1    wreg     unsigned char 
  6524 ;;  symbol          1   22[COMRAM] unsigned char 
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;  x               1   26[COMRAM] unsigned char 
  6527 ;;  i               1   28[COMRAM] unsigned char 
  6528 ;;  j               1   27[COMRAM] unsigned char 
  6529 ;;  mask            1   25[COMRAM] unsigned char 
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      void 
  6532 ;; Registers used:
  6533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6539 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;Total ram usage:        7 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    4
  6546 ;; This function calls:
  6547 ;;		_pixel_off
  6548 ;;		_pixel_on
  6549 ;; This function is called by:
  6550 ;;		_time_set_min
  6551 ;;		_time_set_hr
  6552 ;;		_time_set_yr
  6553 ;;		_time_set_mt
  6554 ;;		_time_set_dt
  6555 ;;		_time_set_dy
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           	psect	text28
  6560  000D14                     __ptext28:
  6561                           	opt stack 0
  6562  000D14                     _putchar_b_buf:
  6563                           	opt stack 24
  6564                           
  6565                           ;incstack = 0
  6566                           ;putchar_b_buf@x stored from wreg
  6567  000D14  6E4E               	movwf	putchar_b_buf@x,c
  6568                           
  6569                           ;display.c: 52: uint8_t i, j, mask=0x01;
  6570  000D16  0E01               	movlw	1
  6571  000D18  6E4D               	movwf	putchar_b_buf@mask,c
  6572                           
  6573                           ;display.c: 55: for(i=0; i<5; i++)
  6574  000D1A  6A50               	clrf	putchar_b_buf@i,c
  6575  000D1C                     l362:
  6576                           
  6577                           ;display.c: 56: {
  6578                           ;display.c: 57: for(j=0;j<8;j++)
  6579  000D1C  6A4F               	clrf	putchar_b_buf@j,c
  6580  000D1E                     l2711:
  6581                           
  6582                           ;display.c: 58: {
  6583                           ;display.c: 59: if(Font[symbol] [i] & mask)
  6584  000D1E  504A               	movf	putchar_b_buf@symbol,w,c
  6585  000D20  0D05               	mullw	5
  6586  000D22  0EC7               	movlw	low _Font
  6587  000D24  6E4B               	movwf	??_putchar_b_buf& (0+255),c
  6588  000D26  0EBA               	movlw	high _Font
  6589  000D28  6E4C               	movwf	(??_putchar_b_buf+1)& (0+255),c
  6590  000D2A  50F3               	movf	prodl,w,c
  6591  000D2C  264B               	addwf	??_putchar_b_buf,f,c
  6592  000D2E  50F4               	movf	prodh,w,c
  6593  000D30  224C               	addwfc	??_putchar_b_buf+1,f,c
  6594  000D32  5050               	movf	putchar_b_buf@i,w,c
  6595  000D34  264B               	addwf	??_putchar_b_buf,f,c
  6596  000D36  0E00               	movlw	0
  6597  000D38  224C               	addwfc	??_putchar_b_buf+1,f,c
  6598  000D3A  C04B  FFF6         	movff	??_putchar_b_buf,tblptrl
  6599  000D3E  C04C  FFF7         	movff	??_putchar_b_buf+1,tblptrh
  6600  000D42                     	if	0	;tblptru may be non-zero
  6601  000D42                     	endif
  6602  000D42                     	if	0	;tblptru may be non-zero
  6603  000D42                     	endif
  6604  000D42  0008               	tblrd		*
  6605  000D44  50F5               	movf	tablat,w,c
  6606  000D46  144D               	andwf	putchar_b_buf@mask,w,c
  6607  000D48  E007               	bz	l2715
  6608                           
  6609                           ;display.c: 60: pixel_on(x+i,j);
  6610  000D4A  C04F  F042         	movff	putchar_b_buf@j,pixel_on@y
  6611  000D4E  504E               	movf	putchar_b_buf@x,w,c
  6612  000D50  2450               	addwf	putchar_b_buf@i,w,c
  6613  000D52  ECF1  F008         	call	_pixel_on
  6614  000D56  D006               	goto	l2717
  6615  000D58                     l2715:
  6616                           
  6617                           ;display.c: 61: else
  6618                           ;display.c: 62: pixel_off(x+i,j);
  6619  000D58  C04F  F042         	movff	putchar_b_buf@j,pixel_off@y
  6620  000D5C  504E               	movf	putchar_b_buf@x,w,c
  6621  000D5E  2450               	addwf	putchar_b_buf@i,w,c
  6622  000D60  EC91  F008         	call	_pixel_off
  6623  000D64                     l2717:
  6624                           
  6625                           ;display.c: 64: mask = mask<<1;
  6626  000D64  90D8               	bcf	status,0,c
  6627  000D66  364D               	rlcf	putchar_b_buf@mask,f,c
  6628  000D68  2A4F               	incf	putchar_b_buf@j,f,c
  6629  000D6A  0E07               	movlw	7
  6630  000D6C  644F               	cpfsgt	putchar_b_buf@j,c
  6631  000D6E  D7D7               	goto	l2711
  6632                           
  6633                           ;display.c: 65: };
  6634                           ;display.c: 67: mask=0x01;
  6635  000D70  0E01               	movlw	1
  6636  000D72  6E4D               	movwf	putchar_b_buf@mask,c
  6637  000D74  2A50               	incf	putchar_b_buf@i,f,c
  6638  000D76  0E04               	movlw	4
  6639  000D78  6450               	cpfsgt	putchar_b_buf@i,c
  6640  000D7A  D7D0               	goto	l362
  6641  000D7C  0C04               	retlw	4
  6642  000D7E                     __end_of_putchar_b_buf:
  6643                           	opt stack 0
  6644                           tosu	equ	0xFFF
  6645                           tosh	equ	0xFFE
  6646                           tosl	equ	0xFFD
  6647                           pclath	equ	0xFFA
  6648                           tblptru	equ	0xFF8
  6649                           tblptrh	equ	0xFF7
  6650                           tblptrl	equ	0xFF6
  6651                           tablat	equ	0xFF5
  6652                           prodh	equ	0xFF4
  6653                           prodl	equ	0xFF3
  6654                           intcon	equ	0xFF2
  6655                           intcon2	equ	0xFF1
  6656                           postinc0	equ	0xFEE
  6657                           wreg	equ	0xFE8
  6658                           indf1	equ	0xFE7
  6659                           plusw1	equ	0xFE3
  6660                           fsr1h	equ	0xFE2
  6661                           fsr1l	equ	0xFE1
  6662                           indf2	equ	0xFDF
  6663                           postinc2	equ	0xFDE
  6664                           postdec2	equ	0xFDD
  6665                           plusw2	equ	0xFDB
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function _pic_to_led *****************
  6671 ;; Defined at:
  6672 ;;		line 29 in file "display.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  x               1    wreg     unsigned char 
  6675 ;;  pic             1   19[COMRAM] unsigned char 
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  x               1   23[COMRAM] unsigned char 
  6678 ;;  i               1   25[COMRAM] unsigned char 
  6679 ;;  j               1   24[COMRAM] unsigned char 
  6680 ;;  mask            1   22[COMRAM] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6690 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;Total ram usage:        7 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    4
  6697 ;; This function calls:
  6698 ;;		_pixel_off
  6699 ;;		_pixel_on
  6700 ;; This function is called by:
  6701 ;;		_time_led
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text29
  6706  000D7E                     __ptext29:
  6707                           	opt stack 0
  6708  000D7E                     _pic_to_led:
  6709                           	opt stack 24
  6710                           
  6711                           ;incstack = 0
  6712                           ;pic_to_led@x stored from wreg
  6713  000D7E  6E4B               	movwf	pic_to_led@x,c
  6714                           
  6715                           ;display.c: 31: uint8_t i, j, mask=0x01;
  6716  000D80  0E01               	movlw	1
  6717  000D82  6E4A               	movwf	pic_to_led@mask,c
  6718                           
  6719                           ;display.c: 33: for(i=0; i<7; i++){
  6720  000D84  6A4D               	clrf	pic_to_led@i,c
  6721  000D86                     l353:
  6722                           
  6723                           ;display.c: 34: for(j=0;j<8;j++){
  6724  000D86  6A4C               	clrf	pic_to_led@j,c
  6725  000D88                     l2681:
  6726                           
  6727                           ;display.c: 35: if(pic7x8[pic][i] & mask){
  6728  000D88  5047               	movf	pic_to_led@pic,w,c
  6729  000D8A  0D07               	mullw	7
  6730  000D8C  0EAB               	movlw	low _pic7x8
  6731  000D8E  6E48               	movwf	??_pic_to_led& (0+255),c
  6732  000D90  0EBA               	movlw	high _pic7x8
  6733  000D92  6E49               	movwf	(??_pic_to_led+1)& (0+255),c
  6734  000D94  50F3               	movf	prodl,w,c
  6735  000D96  2648               	addwf	??_pic_to_led,f,c
  6736  000D98  50F4               	movf	prodh,w,c
  6737  000D9A  2249               	addwfc	??_pic_to_led+1,f,c
  6738  000D9C  504D               	movf	pic_to_led@i,w,c
  6739  000D9E  2648               	addwf	??_pic_to_led,f,c
  6740  000DA0  0E00               	movlw	0
  6741  000DA2  2249               	addwfc	??_pic_to_led+1,f,c
  6742  000DA4  C048  FFF6         	movff	??_pic_to_led,tblptrl
  6743  000DA8  C049  FFF7         	movff	??_pic_to_led+1,tblptrh
  6744  000DAC                     	if	0	;tblptru may be non-zero
  6745  000DAC                     	endif
  6746  000DAC                     	if	0	;tblptru may be non-zero
  6747  000DAC                     	endif
  6748  000DAC  0008               	tblrd		*
  6749  000DAE  50F5               	movf	tablat,w,c
  6750  000DB0  144A               	andwf	pic_to_led@mask,w,c
  6751  000DB2  E007               	bz	l2685
  6752                           
  6753                           ;display.c: 36: pixel_on(x+i,j);
  6754  000DB4  C04C  F042         	movff	pic_to_led@j,pixel_on@y
  6755  000DB8  504B               	movf	pic_to_led@x,w,c
  6756  000DBA  244D               	addwf	pic_to_led@i,w,c
  6757  000DBC  ECF1  F008         	call	_pixel_on
  6758                           
  6759                           ;display.c: 37: }
  6760  000DC0  D006               	goto	l2687
  6761  000DC2                     l2685:
  6762                           
  6763                           ;display.c: 38: else {
  6764                           ;display.c: 39: pixel_off(x+i,j);
  6765  000DC2  C04C  F042         	movff	pic_to_led@j,pixel_off@y
  6766  000DC6  504B               	movf	pic_to_led@x,w,c
  6767  000DC8  244D               	addwf	pic_to_led@i,w,c
  6768  000DCA  EC91  F008         	call	_pixel_off
  6769  000DCE                     l2687:
  6770                           
  6771                           ;display.c: 40: };
  6772                           ;display.c: 41: mask = mask<<1;
  6773  000DCE  90D8               	bcf	status,0,c
  6774  000DD0  364A               	rlcf	pic_to_led@mask,f,c
  6775  000DD2  2A4C               	incf	pic_to_led@j,f,c
  6776  000DD4  0E07               	movlw	7
  6777  000DD6  644C               	cpfsgt	pic_to_led@j,c
  6778  000DD8  D7D7               	goto	l2681
  6779                           
  6780                           ;display.c: 42: };
  6781                           ;display.c: 43: mask=0x01;
  6782  000DDA  0E01               	movlw	1
  6783  000DDC  6E4A               	movwf	pic_to_led@mask,c
  6784  000DDE  2A4D               	incf	pic_to_led@i,f,c
  6785  000DE0  0E06               	movlw	6
  6786  000DE2  644D               	cpfsgt	pic_to_led@i,c
  6787  000DE4  D7D0               	goto	l353
  6788  000DE6  0C06               	retlw	6
  6789  000DE8                     __end_of_pic_to_led:
  6790                           	opt stack 0
  6791                           tosu	equ	0xFFF
  6792                           tosh	equ	0xFFE
  6793                           tosl	equ	0xFFD
  6794                           pclath	equ	0xFFA
  6795                           tblptru	equ	0xFF8
  6796                           tblptrh	equ	0xFF7
  6797                           tblptrl	equ	0xFF6
  6798                           tablat	equ	0xFF5
  6799                           prodh	equ	0xFF4
  6800                           prodl	equ	0xFF3
  6801                           intcon	equ	0xFF2
  6802                           intcon2	equ	0xFF1
  6803                           postinc0	equ	0xFEE
  6804                           wreg	equ	0xFE8
  6805                           indf1	equ	0xFE7
  6806                           plusw1	equ	0xFE3
  6807                           fsr1h	equ	0xFE2
  6808                           fsr1l	equ	0xFE1
  6809                           indf2	equ	0xFDF
  6810                           postinc2	equ	0xFDE
  6811                           postdec2	equ	0xFDD
  6812                           plusw2	equ	0xFDB
  6813                           fsr2h	equ	0xFDA
  6814                           fsr2l	equ	0xFD9
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _pixel_on *****************
  6818 ;; Defined at:
  6819 ;;		line 13 in file "display.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  x               1    wreg     unsigned char 
  6822 ;;  y               1   14[COMRAM] unsigned char 
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;  x               1   17[COMRAM] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      void 
  6827 ;; Registers used:
  6828 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6834 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;Total ram usage:        4 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    3
  6841 ;; This function calls:
  6842 ;;		Nothing
  6843 ;; This function is called by:
  6844 ;;		_pic_to_led
  6845 ;;		_putchar_b_buf
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           	psect	text30
  6850  0011E2                     __ptext30:
  6851                           	opt stack 0
  6852  0011E2                     _pixel_on:
  6853                           	opt stack 24
  6854                           
  6855                           ;incstack = 0
  6856                           ;pixel_on@x stored from wreg
  6857  0011E2  6E45               	movwf	pixel_on@x,c
  6858                           
  6859                           ;display.c: 15: Dis_Buff[x] |= (1<<y);
  6860  0011E4  C042  F043         	movff	pixel_on@y,??_pixel_on
  6861  0011E8  0E01               	movlw	1
  6862  0011EA  6E44               	movwf	(??_pixel_on+1)& (0+255),c
  6863  0011EC  2A43               	incf	??_pixel_on,f,c
  6864  0011EE  D002               	goto	u1154
  6865  0011F0                     u1155:
  6866  0011F0  90D8               	bcf	status,0,c
  6867  0011F2  3644               	rlcf	??_pixel_on+1,f,c
  6868  0011F4                     u1154:
  6869  0011F4  2E43               	decfsz	??_pixel_on,f,c
  6870  0011F6  D7FC               	goto	u1155
  6871  0011F8  5045               	movf	pixel_on@x,w,c
  6872  0011FA  0F0D               	addlw	low _Dis_Buff
  6873  0011FC  6ED9               	movwf	fsr2l,c
  6874  0011FE  6ADA               	clrf	fsr2h,c
  6875  001200  5044               	movf	??_pixel_on+1,w,c
  6876  001202  12DF               	iorwf	indf2,f,c
  6877  001204  0012               	return		;funcret
  6878  001206                     __end_of_pixel_on:
  6879                           	opt stack 0
  6880                           tosu	equ	0xFFF
  6881                           tosh	equ	0xFFE
  6882                           tosl	equ	0xFFD
  6883                           pclath	equ	0xFFA
  6884                           tblptru	equ	0xFF8
  6885                           tblptrh	equ	0xFF7
  6886                           tblptrl	equ	0xFF6
  6887                           tablat	equ	0xFF5
  6888                           prodh	equ	0xFF4
  6889                           prodl	equ	0xFF3
  6890                           intcon	equ	0xFF2
  6891                           intcon2	equ	0xFF1
  6892                           postinc0	equ	0xFEE
  6893                           wreg	equ	0xFE8
  6894                           indf1	equ	0xFE7
  6895                           plusw1	equ	0xFE3
  6896                           fsr1h	equ	0xFE2
  6897                           fsr1l	equ	0xFE1
  6898                           indf2	equ	0xFDF
  6899                           postinc2	equ	0xFDE
  6900                           postdec2	equ	0xFDD
  6901                           plusw2	equ	0xFDB
  6902                           fsr2h	equ	0xFDA
  6903                           fsr2l	equ	0xFD9
  6904                           status	equ	0xFD8
  6905                           
  6906 ;; *************** function _pixel_off *****************
  6907 ;; Defined at:
  6908 ;;		line 21 in file "display.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;  x               1    wreg     unsigned char 
  6911 ;;  y               1   14[COMRAM] unsigned char 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  x               1   18[COMRAM] unsigned char 
  6914 ;; Return value:  Size  Location     Type
  6915 ;;                  1    wreg      void 
  6916 ;; Registers used:
  6917 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6923 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6925 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;Total ram usage:        5 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:    3
  6930 ;; This function calls:
  6931 ;;		Nothing
  6932 ;; This function is called by:
  6933 ;;		_pic_to_led
  6934 ;;		_putchar_b_buf
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text31
  6939  001122                     __ptext31:
  6940                           	opt stack 0
  6941  001122                     _pixel_off:
  6942                           	opt stack 24
  6943                           
  6944                           ;incstack = 0
  6945                           ;pixel_off@x stored from wreg
  6946  001122  6E46               	movwf	pixel_off@x,c
  6947                           
  6948                           ;display.c: 23: Dis_Buff[x] &= ~(1<<y);
  6949  001124  C042  F043         	movff	pixel_off@y,??_pixel_off
  6950  001128  0E01               	movlw	1
  6951  00112A  6E44               	movwf	(??_pixel_off+1)& (0+255),c
  6952  00112C  2A43               	incf	??_pixel_off,f,c
  6953  00112E  D002               	goto	u1164
  6954  001130                     u1165:
  6955  001130  90D8               	bcf	status,0,c
  6956  001132  3644               	rlcf	??_pixel_off+1,f,c
  6957  001134                     u1164:
  6958  001134  2E43               	decfsz	??_pixel_off,f,c
  6959  001136  D7FC               	goto	u1165
  6960  001138  1C44               	comf	??_pixel_off+1,w,c
  6961  00113A  6E45               	movwf	(??_pixel_off+2)& (0+255),c
  6962  00113C  5046               	movf	pixel_off@x,w,c
  6963  00113E  0F0D               	addlw	low _Dis_Buff
  6964  001140  6ED9               	movwf	fsr2l,c
  6965  001142  6ADA               	clrf	fsr2h,c
  6966  001144  5045               	movf	??_pixel_off+2,w,c
  6967  001146  16DF               	andwf	indf2,f,c
  6968  001148  0012               	return		;funcret
  6969  00114A                     __end_of_pixel_off:
  6970                           	opt stack 0
  6971                           tosu	equ	0xFFF
  6972                           tosh	equ	0xFFE
  6973                           tosl	equ	0xFFD
  6974                           pclath	equ	0xFFA
  6975                           tblptru	equ	0xFF8
  6976                           tblptrh	equ	0xFF7
  6977                           tblptrl	equ	0xFF6
  6978                           tablat	equ	0xFF5
  6979                           prodh	equ	0xFF4
  6980                           prodl	equ	0xFF3
  6981                           intcon	equ	0xFF2
  6982                           intcon2	equ	0xFF1
  6983                           postinc0	equ	0xFEE
  6984                           wreg	equ	0xFE8
  6985                           indf1	equ	0xFE7
  6986                           plusw1	equ	0xFE3
  6987                           fsr1h	equ	0xFE2
  6988                           fsr1l	equ	0xFE1
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           postdec2	equ	0xFDD
  6992                           plusw2	equ	0xFDB
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _ow_reset *****************
  6998 ;; Defined at:
  6999 ;;		line 5 in file "onewire.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  presence        1    0        unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      unsigned char 
  7006 ;; Registers used:
  7007 ;;		wreg
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;Total ram usage:        2 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    3
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_time_led
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text32
  7028  000FD6                     __ptext32:
  7029                           	opt stack 0
  7030  000FD6                     _ow_reset:
  7031                           	opt stack 25
  7032                           
  7033                           ;onewire.c: 7: uint8_t presence;
  7034                           ;onewire.c: 8: PORTCbits.RC0 = 0;
  7035                           
  7036                           ;incstack = 0
  7037  000FD6  9082               	bcf	3970,0,c	;volatile
  7038                           
  7039                           ;onewire.c: 9: TRISCbits.RC0 = 0;
  7040  000FD8  9094               	bcf	3988,0,c	;volatile
  7041                           
  7042                           ;onewire.c: 10: _delay((unsigned long)((500)*(40000000/4000000.0)));
  7043  000FDA  0E07               	movlw	7
  7044  000FDC  6E42               	movwf	??_ow_reset& (0+255),c
  7045  000FDE  0E7D               	movlw	125
  7046  000FE0                     u1967:
  7047  000FE0  2EE8               	decfsz	wreg,f,c
  7048  000FE2  D7FE               	bra	u1967
  7049  000FE4  2E42               	decfsz	??_ow_reset& (0+255),f,c
  7050  000FE6  D7FC               	bra	u1967
  7051  000FE8  F000               	nop	
  7052                           
  7053                           ;onewire.c: 11: PORTCbits.RC0 = 1;
  7054  000FEA  8082               	bsf	3970,0,c	;volatile
  7055                           
  7056                           ;onewire.c: 12: TRISCbits.RC0 = 1;
  7057  000FEC  8094               	bsf	3988,0,c	;volatile
  7058                           
  7059                           ;onewire.c: 13: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7060  000FEE  0EC8               	movlw	200
  7061  000FF0                     u1977:
  7062  000FF0  D000               	nop2	
  7063  000FF2  2EE8               	decfsz	wreg,f,c
  7064  000FF4  D7FD               	bra	u1977
  7065  000FF6  5082               	movf	3970,w,c	;volatile
  7066                           
  7067                           ;onewire.c: 15: _delay((unsigned long)((424)*(40000000/4000000.0)));
  7068  000FF8  0E06               	movlw	6
  7069  000FFA  6E42               	movwf	??_ow_reset& (0+255),c
  7070  000FFC  0E80               	movlw	128
  7071  000FFE                     u1987:
  7072  000FFE  2EE8               	decfsz	wreg,f,c
  7073  001000  D7FE               	bra	u1987
  7074  001002  2E42               	decfsz	??_ow_reset& (0+255),f,c
  7075  001004  D7FC               	bra	u1987
  7076  001006  D000               	nop2	
  7077  001008  0012               	return		;funcret
  7078  00100A                     __end_of_ow_reset:
  7079                           	opt stack 0
  7080                           tosu	equ	0xFFF
  7081                           tosh	equ	0xFFE
  7082                           tosl	equ	0xFFD
  7083                           pclath	equ	0xFFA
  7084                           tblptru	equ	0xFF8
  7085                           tblptrh	equ	0xFF7
  7086                           tblptrl	equ	0xFF6
  7087                           tablat	equ	0xFF5
  7088                           prodh	equ	0xFF4
  7089                           prodl	equ	0xFF3
  7090                           intcon	equ	0xFF2
  7091                           intcon2	equ	0xFF1
  7092                           postinc0	equ	0xFEE
  7093                           wreg	equ	0xFE8
  7094                           indf1	equ	0xFE7
  7095                           plusw1	equ	0xFE3
  7096                           fsr1h	equ	0xFE2
  7097                           fsr1l	equ	0xFE1
  7098                           indf2	equ	0xFDF
  7099                           postinc2	equ	0xFDE
  7100                           postdec2	equ	0xFDD
  7101                           plusw2	equ	0xFDB
  7102                           fsr2h	equ	0xFDA
  7103                           fsr2l	equ	0xFD9
  7104                           status	equ	0xFD8
  7105                           
  7106 ;; *************** function _clear_matrix *****************
  7107 ;; Defined at:
  7108 ;;		line 145 in file "display.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;		None
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;  i               1   14[COMRAM] unsigned char 
  7113 ;; Return value:  Size  Location     Type
  7114 ;;                  1    wreg      void 
  7115 ;; Registers used:
  7116 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7117 ;; Tracked objects:
  7118 ;;		On entry : 0/0
  7119 ;;		On exit  : 0/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;Total ram usage:        1 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; Hardware stack levels required when called:    3
  7129 ;; This function calls:
  7130 ;;		Nothing
  7131 ;; This function is called by:
  7132 ;;		_main
  7133 ;;		_time_set_hr
  7134 ;;		_time_led
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           	psect	text33
  7139  0012CE                     __ptext33:
  7140                           	opt stack 0
  7141  0012CE                     _clear_matrix:
  7142                           	opt stack 27
  7143                           
  7144                           ;display.c: 147: uint8_t i;
  7145                           ;display.c: 148: for (i=0; i<=4 * 8; i++)
  7146                           
  7147                           ;incstack = 0
  7148  0012CE  6A42               	clrf	clear_matrix@i,c
  7149  0012D0                     l2579:
  7150                           
  7151                           ;display.c: 149: Dis_Buff[i] = 0;
  7152  0012D0  5042               	movf	clear_matrix@i,w,c
  7153  0012D2  0F0D               	addlw	low _Dis_Buff
  7154  0012D4  6ED9               	movwf	fsr2l,c
  7155  0012D6  6ADA               	clrf	fsr2h,c
  7156  0012D8  6ADF               	clrf	indf2,c
  7157  0012DA  2A42               	incf	clear_matrix@i,f,c
  7158  0012DC  0E20               	movlw	32
  7159  0012DE  6442               	cpfsgt	clear_matrix@i,c
  7160  0012E0  D7F7               	goto	l2579
  7161  0012E2  0C20               	retlw	32
  7162  0012E4                     __end_of_clear_matrix:
  7163                           	opt stack 0
  7164                           tosu	equ	0xFFF
  7165                           tosh	equ	0xFFE
  7166                           tosl	equ	0xFFD
  7167                           pclath	equ	0xFFA
  7168                           tblptru	equ	0xFF8
  7169                           tblptrh	equ	0xFF7
  7170                           tblptrl	equ	0xFF6
  7171                           tablat	equ	0xFF5
  7172                           prodh	equ	0xFF4
  7173                           prodl	equ	0xFF3
  7174                           intcon	equ	0xFF2
  7175                           intcon2	equ	0xFF1
  7176                           postinc0	equ	0xFEE
  7177                           wreg	equ	0xFE8
  7178                           indf1	equ	0xFE7
  7179                           plusw1	equ	0xFE3
  7180                           fsr1h	equ	0xFE2
  7181                           fsr1l	equ	0xFE1
  7182                           indf2	equ	0xFDF
  7183                           postinc2	equ	0xFDE
  7184                           postdec2	equ	0xFDD
  7185                           plusw2	equ	0xFDB
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _Update_Matrix *****************
  7191 ;; Defined at:
  7192 ;;		line 51 in file "max7221.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  buf             1   16[COMRAM] PTR unsigned char 
  7195 ;;		 -> Dis_Buff(32), 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  i               1   19[COMRAM] unsigned char 
  7198 ;;  j               1   18[COMRAM] unsigned char 
  7199 ;;  data            1   17[COMRAM] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  1    wreg      void 
  7202 ;; Registers used:
  7203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7209 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;Total ram usage:        4 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    4
  7216 ;; This function calls:
  7217 ;;		_Send_Byte_7221
  7218 ;; This function is called by:
  7219 ;;		_time_set_min
  7220 ;;		_time_set_hr
  7221 ;;		_time_set_yr
  7222 ;;		_time_set_mt
  7223 ;;		_time_set_dt
  7224 ;;		_time_set_dy
  7225 ;;		_time_led
  7226 ;;		_version
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           	psect	text34
  7231  000F60                     __ptext34:
  7232                           	opt stack 0
  7233  000F60                     _Update_Matrix:
  7234                           	opt stack 25
  7235                           
  7236                           ;max7221.c: 53: uint8_t i, j, data;
  7237                           ;max7221.c: 56: for (i = 0; i < 8; i++)
  7238                           
  7239                           ;incstack = 0
  7240  000F60  6A47               	clrf	Update_Matrix@i,c
  7241  000F62                     l311:
  7242                           
  7243                           ;max7221.c: 57: {
  7244                           ;max7221.c: 58: LATDbits.LD0 = 0;
  7245  000F62  908C               	bcf	3980,0,c	;volatile
  7246                           
  7247                           ;max7221.c: 59: for (j = 0; j < 4; j++)
  7248  000F64  6A46               	clrf	Update_Matrix@j,c
  7249  000F66                     l2655:
  7250                           
  7251                           ;max7221.c: 60: {
  7252                           ;max7221.c: 62: data = buf[8 * (4 - 1 - j) + i];
  7253  000F66  5046               	movf	Update_Matrix@j,w,c
  7254  000F68  0DF8               	mullw	-8
  7255  000F6A  5044               	movf	Update_Matrix@buf,w,c
  7256  000F6C  24F3               	addwf	prodl,w,c
  7257  000F6E  2447               	addwf	Update_Matrix@i,w,c
  7258  000F70  6ED9               	movwf	fsr2l,c
  7259  000F72  6ADA               	clrf	fsr2h,c
  7260  000F74  0E18               	movlw	24
  7261  000F76  26D9               	addwf	fsr2l,f,c
  7262  000F78  50DF               	movf	indf2,w,c
  7263  000F7A  6E45               	movwf	Update_Matrix@data,c
  7264                           
  7265                           ;max7221.c: 64: Send_Byte_7221(1 + i);
  7266  000F7C  2847               	incf	Update_Matrix@i,w,c
  7267  000F7E  EC03  F009         	call	_Send_Byte_7221
  7268                           
  7269                           ;max7221.c: 65: Send_Byte_7221(data);
  7270  000F82  5045               	movf	Update_Matrix@data,w,c
  7271  000F84  EC03  F009         	call	_Send_Byte_7221
  7272  000F88  2A46               	incf	Update_Matrix@j,f,c
  7273  000F8A  0E03               	movlw	3
  7274  000F8C  6446               	cpfsgt	Update_Matrix@j,c
  7275  000F8E  D7EB               	goto	l2655
  7276                           
  7277                           ;max7221.c: 66: }
  7278                           ;max7221.c: 67: LATDbits.LD0 = 1;
  7279  000F90  808C               	bsf	3980,0,c	;volatile
  7280  000F92  2A47               	incf	Update_Matrix@i,f,c
  7281  000F94  0E07               	movlw	7
  7282  000F96  6447               	cpfsgt	Update_Matrix@i,c
  7283  000F98  D7E4               	goto	l311
  7284  000F9A  0C07               	retlw	7
  7285  000F9C                     __end_of_Update_Matrix:
  7286                           	opt stack 0
  7287                           tosu	equ	0xFFF
  7288                           tosh	equ	0xFFE
  7289                           tosl	equ	0xFFD
  7290                           pclath	equ	0xFFA
  7291                           tblptru	equ	0xFF8
  7292                           tblptrh	equ	0xFF7
  7293                           tblptrl	equ	0xFF6
  7294                           tablat	equ	0xFF5
  7295                           prodh	equ	0xFF4
  7296                           prodl	equ	0xFF3
  7297                           intcon	equ	0xFF2
  7298                           intcon2	equ	0xFF1
  7299                           postinc0	equ	0xFEE
  7300                           wreg	equ	0xFE8
  7301                           indf1	equ	0xFE7
  7302                           plusw1	equ	0xFE3
  7303                           fsr1h	equ	0xFE2
  7304                           fsr1l	equ	0xFE1
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           plusw2	equ	0xFDB
  7309                           fsr2h	equ	0xFDA
  7310                           fsr2l	equ	0xFD9
  7311                           status	equ	0xFD8
  7312                           
  7313 ;; *************** function _Send_Byte_7221 *****************
  7314 ;; Defined at:
  7315 ;;		line 6 in file "max7221.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  dat             1    wreg     unsigned char 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  dat             1   14[COMRAM] unsigned char 
  7320 ;;  i               1   15[COMRAM] unsigned char 
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;Total ram usage:        2 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    3
  7337 ;; This function calls:
  7338 ;;		Nothing
  7339 ;; This function is called by:
  7340 ;;		_Cmd7221
  7341 ;;		_Update_Matrix
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           	psect	text35
  7346  001206                     __ptext35:
  7347                           	opt stack 0
  7348  001206                     _Send_Byte_7221:
  7349                           	opt stack 25
  7350                           
  7351                           ;incstack = 0
  7352                           ;Send_Byte_7221@dat stored from wreg
  7353  001206  6E42               	movwf	Send_Byte_7221@dat,c
  7354                           
  7355                           ;max7221.c: 8: uint8_t i;
  7356                           ;max7221.c: 10: for (i = 0; i < 8; i++)
  7357  001208  6A43               	clrf	Send_Byte_7221@i,c
  7358  00120A                     l299:
  7359                           
  7360                           ;max7221.c: 11: {
  7361                           ;max7221.c: 12: if (dat & 0x80)
  7362  00120A  AE42               	btfss	Send_Byte_7221@dat,7,c
  7363  00120C  D002               	goto	l301
  7364                           
  7365                           ;max7221.c: 13: LATDbits.LD2 = 1;
  7366  00120E  848C               	bsf	3980,2,c	;volatile
  7367  001210  D001               	goto	l302
  7368  001212                     l301:
  7369                           
  7370                           ;max7221.c: 14: else
  7371                           ;max7221.c: 15: LATDbits.LD2 = 0;
  7372  001212  948C               	bcf	3980,2,c	;volatile
  7373  001214                     l302:
  7374                           
  7375                           ;max7221.c: 16: LATDbits.LD1 = 1;
  7376  001214  828C               	bsf	3980,1,c	;volatile
  7377  001216  F000               	nop		;# 
  7378  001218  F000               	nop		;# 
  7379                           
  7380                           ;max7221.c: 23: LATDbits.LD1 = 0;
  7381  00121A  928C               	bcf	3980,1,c	;volatile
  7382                           
  7383                           ;max7221.c: 24: dat <<= 1;
  7384  00121C  90D8               	bcf	status,0,c
  7385  00121E  3642               	rlcf	Send_Byte_7221@dat,f,c
  7386  001220  2A43               	incf	Send_Byte_7221@i,f,c
  7387  001222  0E07               	movlw	7
  7388  001224  6443               	cpfsgt	Send_Byte_7221@i,c
  7389  001226  D7F1               	goto	l299
  7390  001228  0C07               	retlw	7
  7391  00122A                     __end_of_Send_Byte_7221:
  7392                           	opt stack 0
  7393                           tosu	equ	0xFFF
  7394                           tosh	equ	0xFFE
  7395                           tosl	equ	0xFFD
  7396                           pclath	equ	0xFFA
  7397                           tblptru	equ	0xFF8
  7398                           tblptrh	equ	0xFF7
  7399                           tblptrl	equ	0xFF6
  7400                           tablat	equ	0xFF5
  7401                           prodh	equ	0xFF4
  7402                           prodl	equ	0xFF3
  7403                           intcon	equ	0xFF2
  7404                           intcon2	equ	0xFF1
  7405                           postinc0	equ	0xFEE
  7406                           wreg	equ	0xFE8
  7407                           indf1	equ	0xFE7
  7408                           plusw1	equ	0xFE3
  7409                           fsr1h	equ	0xFE2
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           plusw2	equ	0xFDB
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function _RTOS_SetTask *****************
  7420 ;; Defined at:
  7421 ;;		line 22 in file "dispatcher.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
  7424 ;;		 -> time_set_dy(1), time_set_dt(1), time_set_mt(1), time_set_yr(1), 
  7425 ;;		 -> default_state(1), time_set_hr(1), time_set_min(1), GetTime(1), 
  7426 ;;		 -> key_press(1), time_led(1), 
  7427 ;;  taskDelay       2   16[COMRAM] unsigned int 
  7428 ;;  taskPeriod      2   18[COMRAM] unsigned int 
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;  i               1   22[COMRAM] unsigned char 
  7431 ;; Return value:  Size  Location     Type
  7432 ;;                  1    wreg      void 
  7433 ;; Registers used:
  7434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7440 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;Total ram usage:        9 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:    3
  7447 ;; This function calls:
  7448 ;;		Nothing
  7449 ;; This function is called by:
  7450 ;;		_main
  7451 ;;		_time_set_min
  7452 ;;		_time_set_hr
  7453 ;;		_time_set_yr
  7454 ;;		_time_set_mt
  7455 ;;		_time_set_dt
  7456 ;;		_time_set_dy
  7457 ;;		_time_led
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           	psect	text36
  7462  000AB6                     __ptext36:
  7463                           	opt stack 0
  7464  000AB6                     _RTOS_SetTask:
  7465                           	opt stack 27
  7466                           
  7467                           ;dispatcher.c: 24: uint8_t i;
  7468                           ;dispatcher.c: 26: if(!taskFunc) return;
  7469                           
  7470                           ;incstack = 0
  7471  000AB6  5042               	movf	RTOS_SetTask@taskFunc,w,c
  7472  000AB8  1043               	iorwf	RTOS_SetTask@taskFunc+1,w,c
  7473  000ABA  E101               	bnz	l212
  7474  000ABC  0012               	return	
  7475  000ABE                     l212:
  7476                           
  7477                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
  7478  000ABE  6A4A               	clrf	RTOS_SetTask@i,c
  7479  000AC0  D018               	goto	l2601
  7480  000AC2                     l2589:
  7481                           
  7482                           ;dispatcher.c: 28: {
  7483                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
  7484  000AC2  504A               	movf	RTOS_SetTask@i,w,c
  7485  000AC4  ECFD  F004         	call	PL20	;call to abstracted procedure
  7486  000AC8  5042               	movf	RTOS_SetTask@taskFunc,w,c	;volatile
  7487  000ACA  18DE               	xorwf	postinc2,w,c
  7488  000ACC  E111               	bnz	l2599
  7489  000ACE  5043               	movf	RTOS_SetTask@taskFunc+1,w,c	;volatile
  7490  000AD0  18DE               	xorwf	postinc2,w,c
  7491  000AD2  E10E               	bnz	l2599
  7492                           
  7493                           ;dispatcher.c: 30: {
  7494                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
  7495  000AD4  9EF2               	bcf	intcon,7,c	;volatile
  7496                           
  7497                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
  7498  000AD6  504A               	movf	RTOS_SetTask@i,w,c
  7499  000AD8  EC51  F004         	call	PL18	;call to abstracted procedure
  7500  000ADC  D82A               	call	PL80	;call to abstracted procedure
  7501                           
  7502                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
  7503  000ADE  504A               	movf	RTOS_SetTask@i,w,c
  7504  000AE0  EC03  F005         	call	PL26	;call to abstracted procedure
  7505  000AE4  D821               	call	PL56	;call to abstracted procedure
  7506                           
  7507                           ;dispatcher.c: 35: TaskArray[i].run = 0;
  7508  000AE6  504A               	movf	RTOS_SetTask@i,w,c
  7509  000AE8  ECF5  F004         	call	PL16	;call to abstracted procedure
  7510                           
  7511                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
  7512  000AEC  8EF2               	bsf	intcon,7,c	;volatile
  7513  000AEE  0C00               	retlw	0
  7514  000AF0                     l2599:
  7515  000AF0  2A4A               	incf	RTOS_SetTask@i,f,c
  7516  000AF2                     l2601:
  7517  000AF2  500C               	movf	_arrayTail,w,c	;volatile
  7518  000AF4  5C4A               	subwf	RTOS_SetTask@i,w,c
  7519  000AF6  E3E5               	bnc	l2589
  7520                           
  7521                           ;dispatcher.c: 39: }
  7522                           ;dispatcher.c: 40: }
  7523                           ;dispatcher.c: 42: if (arrayTail < 15)
  7524  000AF8  0E0F               	movlw	15
  7525  000AFA  600C               	cpfslt	_arrayTail,c	;volatile
  7526  000AFC  0C0F               	retlw	15
  7527                           
  7528                           ;dispatcher.c: 43: {
  7529                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
  7530  000AFE  9EF2               	bcf	intcon,7,c	;volatile
  7531                           
  7532                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
  7533  000B00  500C               	movf	_arrayTail,w,c
  7534  000B02  ECFD  F004         	call	PL20	;call to abstracted procedure
  7535  000B06  C042  FFDE         	movff	RTOS_SetTask@taskFunc,postinc2	;volatile
  7536  000B0A  C043  FFDD         	movff	RTOS_SetTask@taskFunc+1,postdec2	;volatile
  7537                           
  7538                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
  7539  000B0E  500C               	movf	_arrayTail,w,c
  7540  000B10  EC51  F004         	call	PL18	;call to abstracted procedure
  7541  000B14  D80E               	call	PL80	;call to abstracted procedure
  7542                           
  7543                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
  7544  000B16  500C               	movf	_arrayTail,w,c
  7545  000B18  EC03  F005         	call	PL26	;call to abstracted procedure
  7546  000B1C  D805               	call	PL56	;call to abstracted procedure
  7547                           
  7548                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
  7549  000B1E  500C               	movf	_arrayTail,w,c
  7550  000B20  ECF5  F004         	call	PL16	;call to abstracted procedure
  7551                           
  7552                           ;dispatcher.c: 51: arrayTail++;
  7553                           
  7554                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
  7555  000B24  EF13  F005         	goto	PL106	;call to abstracted procedure
  7556  000B28                     __end_of_RTOS_SetTask:
  7557                           	opt stack 0
  7558  000B28                     PL56:
  7559                           	opt stack 27
  7560  000B28  C046  FFDE         	movff	RTOS_SetTask@taskPeriod,postinc2
  7561  000B2C  C047  FFDD         	movff	RTOS_SetTask@taskPeriod+1,postdec2
  7562  000B30  0012               	return	
  7563  000B32                     __end_ofPL56:
  7564                           	opt stack 0
  7565  000B32                     PL80:
  7566                           	opt stack 27
  7567  000B32  C044  FFDE         	movff	RTOS_SetTask@taskDelay,postinc2
  7568  000B36  C045  FFDD         	movff	RTOS_SetTask@taskDelay+1,postdec2
  7569  000B3A  0012               	return	
  7570  000B3C                     __end_ofPL80:
  7571                           	opt stack 0
  7572                           tosu	equ	0xFFF
  7573                           tosh	equ	0xFFE
  7574                           tosl	equ	0xFFD
  7575                           pclath	equ	0xFFA
  7576                           tblptru	equ	0xFF8
  7577                           tblptrh	equ	0xFF7
  7578                           tblptrl	equ	0xFF6
  7579                           tablat	equ	0xFF5
  7580                           prodh	equ	0xFF4
  7581                           prodl	equ	0xFF3
  7582                           intcon	equ	0xFF2
  7583                           intcon2	equ	0xFF1
  7584                           postinc0	equ	0xFEE
  7585                           wreg	equ	0xFE8
  7586                           indf1	equ	0xFE7
  7587                           plusw1	equ	0xFE3
  7588                           fsr1h	equ	0xFE2
  7589                           fsr1l	equ	0xFE1
  7590                           indf2	equ	0xFDF
  7591                           postinc2	equ	0xFDE
  7592                           postdec2	equ	0xFDD
  7593                           plusw2	equ	0xFDB
  7594                           fsr2h	equ	0xFDA
  7595                           fsr2l	equ	0xFD9
  7596                           status	equ	0xFD8
  7597                           
  7598 ;; *************** function _RTOS_DeleteTask *****************
  7599 ;; Defined at:
  7600 ;;		line 59 in file "dispatcher.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
  7603 ;;		 -> time_set_dy(1), time_set_dt(1), time_set_mt(1), time_set_yr(1), 
  7604 ;;		 -> default_state(1), time_set_hr(1), time_set_min(1), GetTime(1), 
  7605 ;;		 -> key_press(1), time_led(1), 
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;  i               1   22[COMRAM] unsigned char 
  7608 ;; Return value:  Size  Location     Type
  7609 ;;                  1    wreg      void 
  7610 ;; Registers used:
  7611 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7617 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;Total ram usage:        9 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; Hardware stack levels required when called:    3
  7624 ;; This function calls:
  7625 ;;		Nothing
  7626 ;; This function is called by:
  7627 ;;		_RTOS_DispatchTask
  7628 ;;		_time_set_min
  7629 ;;		_time_set_hr
  7630 ;;		_time_set_yr
  7631 ;;		_time_set_mt
  7632 ;;		_time_set_dt
  7633 ;;		_time_set_dy
  7634 ;;		_time_led
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           	psect	text37
  7639  000C3A                     __ptext37:
  7640                           	opt stack 0
  7641  000C3A                     _RTOS_DeleteTask:
  7642                           	opt stack 25
  7643                           
  7644                           ;dispatcher.c: 61: uint8_t i;
  7645                           ;dispatcher.c: 63: for (i=0; i<arrayTail; i++)
  7646                           
  7647                           ;incstack = 0
  7648  000C3A  6A4A               	clrf	RTOS_DeleteTask@i,c
  7649  000C3C  D031               	goto	l2631
  7650  000C3E                     l2615:
  7651                           
  7652                           ;dispatcher.c: 64: {
  7653                           ;dispatcher.c: 65: if(TaskArray[i].pFunc == taskFunc)
  7654  000C3E  504A               	movf	RTOS_DeleteTask@i,w,c
  7655  000C40  ECFD  F004         	call	PL20	;call to abstracted procedure
  7656  000C44  5042               	movf	RTOS_DeleteTask@taskFunc,w,c	;volatile
  7657  000C46  18DE               	xorwf	postinc2,w,c
  7658  000C48  E12A               	bnz	l2629
  7659  000C4A  5043               	movf	RTOS_DeleteTask@taskFunc+1,w,c	;volatile
  7660  000C4C  18DE               	xorwf	postinc2,w,c
  7661  000C4E  E127               	bnz	l2629
  7662                           
  7663                           ;dispatcher.c: 66: {
  7664                           ;dispatcher.c: 68: (INTCONbits.GIE = 0);
  7665  000C50  9EF2               	bcf	intcon,7,c	;volatile
  7666                           
  7667                           ;dispatcher.c: 69: if(i != (arrayTail - 1))
  7668  000C52  504A               	movf	RTOS_DeleteTask@i,w,c
  7669  000C54  6E44               	movwf	??_RTOS_DeleteTask& (0+255),c
  7670  000C56  6A45               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
  7671  000C58  6846               	setf	(??_RTOS_DeleteTask+2)& (0+255),c
  7672  000C5A  6847               	setf	(??_RTOS_DeleteTask+3)& (0+255),c
  7673  000C5C  500C               	movf	_arrayTail,w,c	;volatile
  7674  000C5E  6E48               	movwf	(??_RTOS_DeleteTask+4)& (0+255),c
  7675  000C60  6A49               	clrf	(??_RTOS_DeleteTask+5)& (0+255),c
  7676  000C62  5046               	movf	??_RTOS_DeleteTask+2,w,c
  7677  000C64  2648               	addwf	??_RTOS_DeleteTask+4,f,c
  7678  000C66  5047               	movf	??_RTOS_DeleteTask+3,w,c
  7679  000C68  2249               	addwfc	??_RTOS_DeleteTask+5,f,c
  7680  000C6A  5044               	movf	??_RTOS_DeleteTask,w,c
  7681  000C6C  1848               	xorwf	??_RTOS_DeleteTask+4,w,c
  7682  000C6E  E103               	bnz	u1230
  7683  000C70  5045               	movf	??_RTOS_DeleteTask+1,w,c
  7684  000C72  1849               	xorwf	??_RTOS_DeleteTask+5,w,c
  7685  000C74  E011               	bz	l2623
  7686  000C76                     u1230:
  7687                           
  7688                           ;dispatcher.c: 70: {
  7689                           ;dispatcher.c: 71: TaskArray[i] = TaskArray[arrayTail - 1];
  7690  000C76  500C               	movf	_arrayTail,w,c	;volatile
  7691  000C78  0D08               	mullw	8
  7692  000C7A  50F3               	movf	prodl,w,c
  7693  000C7C  0F78               	addlw	low (_TaskArray+248)
  7694  000C7E  6ED9               	movwf	fsr2l,c
  7695  000C80  6ADA               	clrf	fsr2h,c
  7696  000C82  504A               	movf	RTOS_DeleteTask@i,w,c
  7697  000C84  0D08               	mullw	8
  7698  000C86  50F3               	movf	prodl,w,c
  7699  000C88  0F80               	addlw	low _TaskArray
  7700  000C8A  6EE1               	movwf	fsr1l,c
  7701  000C8C  6AE2               	clrf	fsr1h,c
  7702  000C8E  0E07               	movlw	7
  7703  000C90                     u1241:
  7704  000C90  CFDB FFE3          	movff	plusw2,plusw1
  7705  000C94  06E8               	decf	wreg,f,c
  7706  000C96  E2FC               	bc	u1241
  7707  000C98                     l2623:
  7708                           
  7709                           ;dispatcher.c: 72: }
  7710                           ;dispatcher.c: 73: arrayTail--;
  7711  000C98  060C               	decf	_arrayTail,f,c	;volatile
  7712                           
  7713                           ;dispatcher.c: 74: (INTCONbits.GIE = 1);
  7714  000C9A  8EF2               	bsf	intcon,7,c	;volatile
  7715  000C9C  0012               	return	
  7716  000C9E                     l2629:
  7717  000C9E  2A4A               	incf	RTOS_DeleteTask@i,f,c
  7718  000CA0                     l2631:
  7719  000CA0  500C               	movf	_arrayTail,w,c	;volatile
  7720  000CA2  5C4A               	subwf	RTOS_DeleteTask@i,w,c
  7721  000CA4  E3CC               	bnc	l2615
  7722  000CA6  0012               	return		;funcret
  7723  000CA8                     __end_of_RTOS_DeleteTask:
  7724                           	opt stack 0
  7725                           tosu	equ	0xFFF
  7726                           tosh	equ	0xFFE
  7727                           tosl	equ	0xFFD
  7728                           pclath	equ	0xFFA
  7729                           tblptru	equ	0xFF8
  7730                           tblptrh	equ	0xFF7
  7731                           tblptrl	equ	0xFF6
  7732                           tablat	equ	0xFF5
  7733                           prodh	equ	0xFF4
  7734                           prodl	equ	0xFF3
  7735                           intcon	equ	0xFF2
  7736                           intcon2	equ	0xFF1
  7737                           postinc0	equ	0xFEE
  7738                           wreg	equ	0xFE8
  7739                           indf1	equ	0xFE7
  7740                           plusw1	equ	0xFE3
  7741                           fsr1h	equ	0xFE2
  7742                           fsr1l	equ	0xFE1
  7743                           indf2	equ	0xFDF
  7744                           postinc2	equ	0xFDE
  7745                           postdec2	equ	0xFDD
  7746                           plusw2	equ	0xFDB
  7747                           fsr2h	equ	0xFDA
  7748                           fsr2l	equ	0xFD9
  7749                           status	equ	0xFD8
  7750                           
  7751 ;; *************** function _FillBuf *****************
  7752 ;; Defined at:
  7753 ;;		line 156 in file "display.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;		None
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  i               1   24[COMRAM] unsigned char 
  7758 ;; Return value:  Size  Location     Type
  7759 ;;                  1    wreg      void 
  7760 ;; Registers used:
  7761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;Total ram usage:        3 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    4
  7774 ;; This function calls:
  7775 ;;		___lbdiv
  7776 ;;		___lbmod
  7777 ;; This function is called by:
  7778 ;;		_time_led
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text38
  7783  0005DC                     __ptext38:
  7784                           	opt stack 0
  7785  0005DC                     _FillBuf:
  7786                           	opt stack 24
  7787                           
  7788                           ;display.c: 158: uint8_t i;
  7789                           ;display.c: 160: for(i=0; i<5; ++i)
  7790                           
  7791                           ;incstack = 0
  7792  0005DC  6A4C               	clrf	FillBuf@i,c
  7793  0005DE                     l2735:
  7794                           
  7795                           ;display.c: 161: {
  7796                           ;display.c: 162: Dis_Buff[i] = Font[(TTime.Thr/10) % 10 + 48][i];
  7797  0005DE  0E0A               	movlw	10
  7798  0005E0  6E46               	movwf	___lbmod@divisor,c
  7799  0005E2  6E42               	movwf	___lbdiv@divisor,c
  7800  0005E4  502F               	movf	_TTime+2,w,c
  7801  0005E6  EC05  F008         	call	___lbdiv
  7802  0005EA  ECCC  F008         	call	___lbmod
  7803  0005EE  D83B               	call	PL4	;call to abstracted procedure
  7804  0005F0  0F0D               	addlw	low _Dis_Buff
  7805                           
  7806                           ;display.c: 163: Dis_Buff[i + 6] = Font[TTime.Thr % 10 + 48][i];
  7807  0005F2  D868               	call	PL24	;call to abstracted procedure
  7808  0005F4  502F               	movf	_TTime+2,w,c
  7809  0005F6  ECCC  F008         	call	___lbmod
  7810  0005FA  D835               	call	PL4	;call to abstracted procedure
  7811  0005FC  0F13               	addlw	low (_Dis_Buff+6)
  7812                           
  7813                           ;display.c: 164: Dis_Buff[i + 13] = Font[(TTime.Tmin/10) % 10 + 48][i];
  7814  0005FE  D862               	call	PL24	;call to abstracted procedure
  7815  000600  6E42               	movwf	___lbdiv@divisor,c
  7816  000602  502E               	movf	_TTime+1,w,c
  7817  000604  EC05  F008         	call	___lbdiv
  7818  000608  ECCC  F008         	call	___lbmod
  7819  00060C  D82C               	call	PL4	;call to abstracted procedure
  7820  00060E  0F1A               	addlw	low (_Dis_Buff+13)
  7821                           
  7822                           ;display.c: 165: Dis_Buff[i + 19] = Font[TTime.Tmin % 10 + 48][i];
  7823  000610  D859               	call	PL24	;call to abstracted procedure
  7824  000612  502E               	movf	_TTime+1,w,c
  7825  000614  ECCC  F008         	call	___lbmod
  7826  000618  D826               	call	PL4	;call to abstracted procedure
  7827  00061A  0F20               	addlw	low (_Dis_Buff+19)
  7828  00061C  6ED9               	movwf	fsr2l,c
  7829  00061E  D85A               	call	PL28	;call to abstracted procedure
  7830  000620  0E04               	movlw	4
  7831  000622  644C               	cpfsgt	FillBuf@i,c
  7832  000624  D7DC               	goto	l2735
  7833                           
  7834                           ;display.c: 167: }
  7835                           ;display.c: 169: for (i=0; i<3; ++i)
  7836  000626  6A4C               	clrf	FillBuf@i,c
  7837  000628                     l2745:
  7838                           
  7839                           ;display.c: 170: {
  7840                           ;display.c: 171: Dis_Buff[i + 25] = FontS[(TTime.Ts/10) % 10 + 1][i];
  7841  000628  0E0A               	movlw	10
  7842  00062A  6E46               	movwf	___lbmod@divisor,c
  7843  00062C  6E42               	movwf	___lbdiv@divisor,c
  7844  00062E  502D               	movf	_TTime,w,c
  7845  000630  EC05  F008         	call	___lbdiv
  7846  000634  ECCC  F008         	call	___lbmod
  7847  000638  D840               	call	PL14	;call to abstracted procedure
  7848  00063A  D82C               	call	PL6	;call to abstracted procedure
  7849  00063C  0F26               	addlw	low (_Dis_Buff+25)
  7850                           
  7851                           ;display.c: 172: Dis_Buff[i + 29] = FontS[TTime.Ts % 10 + 1][i];
  7852  00063E  D842               	call	PL24	;call to abstracted procedure
  7853  000640  502D               	movf	_TTime,w,c
  7854  000642  ECCC  F008         	call	___lbmod
  7855  000646  D839               	call	PL14	;call to abstracted procedure
  7856  000648  D825               	call	PL6	;call to abstracted procedure
  7857  00064A  0F2A               	addlw	low (_Dis_Buff+29)
  7858  00064C  6ED9               	movwf	fsr2l,c
  7859  00064E  D842               	call	PL28	;call to abstracted procedure
  7860  000650  0E02               	movlw	2
  7861  000652  644C               	cpfsgt	FillBuf@i,c
  7862  000654  D7E9               	goto	l2745
  7863                           
  7864                           ;display.c: 173: }
  7865                           ;display.c: 175: Dis_Buff[5] = 0;
  7866  000656  6A12               	clrf	_Dis_Buff+5,c
  7867                           
  7868                           ;display.c: 176: Dis_Buff[11] = 0x80;
  7869  000658  0E80               	movlw	128
  7870  00065A  6E18               	movwf	_Dis_Buff+11,c
  7871                           
  7872                           ;display.c: 177: Dis_Buff[12] = 0x80;
  7873  00065C  6E19               	movwf	_Dis_Buff+12,c
  7874                           
  7875                           ;display.c: 178: Dis_Buff[18] = 0;
  7876  00065E  6A1F               	clrf	_Dis_Buff+18,c
  7877                           
  7878                           ;display.c: 179: Dis_Buff[24] = 0;
  7879  000660  6A25               	clrf	_Dis_Buff+24,c
  7880                           
  7881                           ;display.c: 180: Dis_Buff[28] = 0;
  7882  000662  6A29               	clrf	_Dis_Buff+28,c
  7883  000664  0012               	return		;funcret
  7884  000666                     __end_of_FillBuf:
  7885                           	opt stack 0
  7886  000666                     PL4:
  7887                           	opt stack 24
  7888  000666  0D05               	mullw	5
  7889  000668  0EC7               	movlw	low _Font
  7890  00066A  6E4A               	movwf	??_FillBuf& (0+255),c
  7891  00066C  0EBA               	movlw	high _Font
  7892  00066E  6E4B               	movwf	(??_FillBuf+1)& (0+255),c
  7893  000670  50F3               	movf	prodl,w,c
  7894  000672  264A               	addwf	??_FillBuf,f,c
  7895  000674  50F4               	movf	prodh,w,c
  7896  000676  224B               	addwfc	??_FillBuf+1,f,c
  7897  000678  504C               	movf	FillBuf@i,w,c
  7898  00067A  264A               	addwf	??_FillBuf,f,c
  7899  00067C  0E00               	movlw	0
  7900  00067E  224B               	addwfc	??_FillBuf+1,f,c
  7901  000680  0EF0               	movlw	240
  7902  000682  264A               	addwf	??_FillBuf,f,c
  7903  000684  0E00               	movlw	0
  7904  000686  224B               	addwfc	??_FillBuf+1,f,c
  7905  000688  C04A  FFF6         	movff	??_FillBuf,tblptrl
  7906  00068C  C04B  FFF7         	movff	??_FillBuf+1,tblptrh
  7907  000690                     	if	0	;tblptru may be non-zero
  7908  000690                     	endif
  7909  000690                     	if	0	;tblptru may be non-zero
  7910  000690                     	endif
  7911  000690  504C               	movf	FillBuf@i,w,c
  7912  000692  0012               	return	
  7913  000694                     __end_ofPL4:
  7914                           	opt stack 0
  7915  000694                     PL6:
  7916                           	opt stack 24
  7917  000694  6E4B               	movwf	(??_FillBuf+1)& (0+255),c
  7918  000696  50F3               	movf	prodl,w,c
  7919  000698  264A               	addwf	??_FillBuf,f,c
  7920  00069A  50F4               	movf	prodh,w,c
  7921  00069C  224B               	addwfc	??_FillBuf+1,f,c
  7922  00069E  504C               	movf	FillBuf@i,w,c
  7923  0006A0  264A               	addwf	??_FillBuf,f,c
  7924  0006A2  0E00               	movlw	0
  7925  0006A4  224B               	addwfc	??_FillBuf+1,f,c
  7926  0006A6  0E03               	movlw	3
  7927  0006A8  264A               	addwf	??_FillBuf,f,c
  7928  0006AA  0E00               	movlw	0
  7929  0006AC  224B               	addwfc	??_FillBuf+1,f,c
  7930  0006AE  C04A  FFF6         	movff	??_FillBuf,tblptrl
  7931  0006B2  C04B  FFF7         	movff	??_FillBuf+1,tblptrh
  7932  0006B6                     	if	0	;tblptru may be non-zero
  7933  0006B6                     	endif
  7934  0006B6                     	if	0	;tblptru may be non-zero
  7935  0006B6                     	endif
  7936  0006B6  504C               	movf	FillBuf@i,w,c
  7937  0006B8  0012               	return	
  7938  0006BA                     __end_ofPL6:
  7939                           	opt stack 0
  7940  0006BA                     PL14:
  7941                           	opt stack 24
  7942  0006BA  0D03               	mullw	3
  7943  0006BC  0EC7               	movlw	low _FontS
  7944  0006BE  6E4A               	movwf	??_FillBuf& (0+255),c
  7945  0006C0  0EBF               	movlw	high _FontS
  7946  0006C2  0012               	return	
  7947  0006C4                     __end_ofPL14:
  7948                           	opt stack 0
  7949  0006C4                     PL24:
  7950                           	opt stack 24
  7951  0006C4  6ED9               	movwf	fsr2l,c
  7952  0006C6  6ADA               	clrf	fsr2h,c
  7953  0006C8  0008               	tblrd		*
  7954  0006CA  CFF5 FFDF          	movff	tablat,indf2
  7955  0006CE  0E0A               	movlw	10
  7956  0006D0  6E46               	movwf	___lbmod@divisor,c
  7957  0006D2  0C0A               	retlw	10
  7958  0006D4                     __end_ofPL24:
  7959                           	opt stack 0
  7960  0006D4                     PL28:
  7961                           	opt stack 24
  7962  0006D4  6ADA               	clrf	fsr2h,c
  7963  0006D6  0008               	tblrd		*
  7964  0006D8  CFF5 FFDF          	movff	tablat,indf2
  7965  0006DC  2A4C               	incf	FillBuf@i,f,c
  7966  0006DE  0012               	return	
  7967  0006E0                     __end_ofPL28:
  7968                           	opt stack 0
  7969                           tosu	equ	0xFFF
  7970                           tosh	equ	0xFFE
  7971                           tosl	equ	0xFFD
  7972                           pclath	equ	0xFFA
  7973                           tblptru	equ	0xFF8
  7974                           tblptrh	equ	0xFF7
  7975                           tblptrl	equ	0xFF6
  7976                           tablat	equ	0xFF5
  7977                           prodh	equ	0xFF4
  7978                           prodl	equ	0xFF3
  7979                           intcon	equ	0xFF2
  7980                           intcon2	equ	0xFF1
  7981                           postinc0	equ	0xFEE
  7982                           wreg	equ	0xFE8
  7983                           indf1	equ	0xFE7
  7984                           plusw1	equ	0xFE3
  7985                           fsr1h	equ	0xFE2
  7986                           fsr1l	equ	0xFE1
  7987                           indf2	equ	0xFDF
  7988                           postinc2	equ	0xFDE
  7989                           postdec2	equ	0xFDD
  7990                           plusw2	equ	0xFDB
  7991                           fsr2h	equ	0xFDA
  7992                           fsr2l	equ	0xFD9
  7993                           status	equ	0xFD8
  7994                           
  7995 ;; *************** function ___lbmod *****************
  7996 ;; Defined at:
  7997 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbmod.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;  dividend        1    wreg     unsigned char 
  8000 ;;  divisor         1   18[COMRAM] unsigned char 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  dividend        1   19[COMRAM] unsigned char 
  8003 ;;  rem             1   21[COMRAM] unsigned char 
  8004 ;;  counter         1   20[COMRAM] unsigned char 
  8005 ;; Return value:  Size  Location     Type
  8006 ;;                  1    wreg      unsigned char 
  8007 ;; Registers used:
  8008 ;;		wreg, status,2, status,0
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/0
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8014 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;Total ram usage:        4 bytes
  8019 ;; Hardware stack levels used:    1
  8020 ;; Hardware stack levels required when called:    3
  8021 ;; This function calls:
  8022 ;;		Nothing
  8023 ;; This function is called by:
  8024 ;;		_FillBuf
  8025 ;;		_decimal_to_bcd
  8026 ;;		_time_set_min
  8027 ;;		_time_set_hr
  8028 ;;		_time_set_yr
  8029 ;;		_time_set_dt
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           	psect	text39
  8034  001198                     __ptext39:
  8035                           	opt stack 0
  8036  001198                     ___lbmod:
  8037                           	opt stack 23
  8038                           
  8039                           ;incstack = 0
  8040                           ;___lbmod@dividend stored from wreg
  8041  001198  6E47               	movwf	___lbmod@dividend,c
  8042  00119A  0E08               	movlw	8
  8043  00119C  6E48               	movwf	___lbmod@counter,c
  8044  00119E  6A49               	clrf	___lbmod@rem,c
  8045  0011A0                     l2523:
  8046  0011A0  90D8               	bcf	status,0,c
  8047  0011A2  3447               	rlcf	___lbmod@dividend,w,c
  8048  0011A4  3449               	rlcf	___lbmod@rem,w,c
  8049  0011A6  6E49               	movwf	___lbmod@rem,c
  8050  0011A8  90D8               	bcf	status,0,c
  8051  0011AA  3647               	rlcf	___lbmod@dividend,f,c
  8052  0011AC  5046               	movf	___lbmod@divisor,w,c
  8053  0011AE  5C49               	subwf	___lbmod@rem,w,c
  8054  0011B0  E302               	bnc	l2531
  8055  0011B2  5046               	movf	___lbmod@divisor,w,c
  8056  0011B4  5E49               	subwf	___lbmod@rem,f,c
  8057  0011B6                     l2531:
  8058  0011B6  2E48               	decfsz	___lbmod@counter,f,c
  8059  0011B8  D7F3               	goto	l2523
  8060  0011BA  5049               	movf	___lbmod@rem,w,c
  8061  0011BC  0012               	return		;funcret
  8062  0011BE                     __end_of___lbmod:
  8063                           	opt stack 0
  8064                           tosu	equ	0xFFF
  8065                           tosh	equ	0xFFE
  8066                           tosl	equ	0xFFD
  8067                           pclath	equ	0xFFA
  8068                           tblptru	equ	0xFF8
  8069                           tblptrh	equ	0xFF7
  8070                           tblptrl	equ	0xFF6
  8071                           tablat	equ	0xFF5
  8072                           prodh	equ	0xFF4
  8073                           prodl	equ	0xFF3
  8074                           intcon	equ	0xFF2
  8075                           intcon2	equ	0xFF1
  8076                           postinc0	equ	0xFEE
  8077                           wreg	equ	0xFE8
  8078                           indf1	equ	0xFE7
  8079                           plusw1	equ	0xFE3
  8080                           fsr1h	equ	0xFE2
  8081                           fsr1l	equ	0xFE1
  8082                           indf2	equ	0xFDF
  8083                           postinc2	equ	0xFDE
  8084                           postdec2	equ	0xFDD
  8085                           plusw2	equ	0xFDB
  8086                           fsr2h	equ	0xFDA
  8087                           fsr2l	equ	0xFD9
  8088                           status	equ	0xFD8
  8089                           
  8090 ;; *************** function ___lbdiv *****************
  8091 ;; Defined at:
  8092 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbdiv.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  dividend        1    wreg     unsigned char 
  8095 ;;  divisor         1   14[COMRAM] unsigned char 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  dividend        1   15[COMRAM] unsigned char 
  8098 ;;  quotient        1   17[COMRAM] unsigned char 
  8099 ;;  counter         1   16[COMRAM] unsigned char 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      unsigned char 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8109 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;Total ram usage:        4 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    3
  8116 ;; This function calls:
  8117 ;;		Nothing
  8118 ;; This function is called by:
  8119 ;;		_FillBuf
  8120 ;;		_decimal_to_bcd
  8121 ;;		_time_set_min
  8122 ;;		_time_set_hr
  8123 ;;		_time_set_yr
  8124 ;;		_time_set_dt
  8125 ;; This function uses a non-reentrant model
  8126 ;;
  8127                           
  8128                           	psect	text40
  8129  00100A                     __ptext40:
  8130                           	opt stack 0
  8131  00100A                     ___lbdiv:
  8132                           	opt stack 23
  8133                           
  8134                           ;incstack = 0
  8135                           ;___lbdiv@dividend stored from wreg
  8136  00100A  6E43               	movwf	___lbdiv@dividend,c
  8137  00100C  6A45               	clrf	___lbdiv@quotient,c
  8138  00100E  5042               	movf	___lbdiv@divisor,w,c
  8139  001010  E014               	bz	l2515
  8140  001012  0E01               	movlw	1
  8141  001014  6E44               	movwf	___lbdiv@counter,c
  8142  001016  D003               	goto	l2503
  8143  001018                     l2499:
  8144  001018  90D8               	bcf	status,0,c
  8145  00101A  3642               	rlcf	___lbdiv@divisor,f,c
  8146  00101C  2A44               	incf	___lbdiv@counter,f,c
  8147  00101E                     l2503:
  8148  00101E  AE42               	btfss	___lbdiv@divisor,7,c
  8149  001020  D7FB               	goto	l2499
  8150  001022                     l2505:
  8151  001022  90D8               	bcf	status,0,c
  8152  001024  3645               	rlcf	___lbdiv@quotient,f,c
  8153  001026  5042               	movf	___lbdiv@divisor,w,c
  8154  001028  5C43               	subwf	___lbdiv@dividend,w,c
  8155  00102A  E303               	bnc	l2511
  8156  00102C  5042               	movf	___lbdiv@divisor,w,c
  8157  00102E  5E43               	subwf	___lbdiv@dividend,f,c
  8158  001030  8045               	bsf	___lbdiv@quotient,0,c
  8159  001032                     l2511:
  8160  001032  90D8               	bcf	status,0,c
  8161  001034  3242               	rrcf	___lbdiv@divisor,f,c
  8162  001036  2E44               	decfsz	___lbdiv@counter,f,c
  8163  001038  D7F4               	goto	l2505
  8164  00103A                     l2515:
  8165  00103A  5045               	movf	___lbdiv@quotient,w,c
  8166  00103C  0012               	return		;funcret
  8167  00103E                     __end_of___lbdiv:
  8168                           	opt stack 0
  8169                           tosu	equ	0xFFF
  8170                           tosh	equ	0xFFE
  8171                           tosl	equ	0xFFD
  8172                           pclath	equ	0xFFA
  8173                           tblptru	equ	0xFF8
  8174                           tblptrh	equ	0xFF7
  8175                           tblptrl	equ	0xFF6
  8176                           tablat	equ	0xFF5
  8177                           prodh	equ	0xFF4
  8178                           prodl	equ	0xFF3
  8179                           intcon	equ	0xFF2
  8180                           intcon2	equ	0xFF1
  8181                           postinc0	equ	0xFEE
  8182                           wreg	equ	0xFE8
  8183                           indf1	equ	0xFE7
  8184                           plusw1	equ	0xFE3
  8185                           fsr1h	equ	0xFE2
  8186                           fsr1l	equ	0xFE1
  8187                           indf2	equ	0xFDF
  8188                           postinc2	equ	0xFDE
  8189                           postdec2	equ	0xFDD
  8190                           plusw2	equ	0xFDB
  8191                           fsr2h	equ	0xFDA
  8192                           fsr2l	equ	0xFD9
  8193                           status	equ	0xFD8
  8194                           
  8195 ;; *************** function _getTime *****************
  8196 ;; Defined at:
  8197 ;;		line 46 in file "ds3231.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;  p3              1   19[COMRAM] PTR unsigned char 
  8200 ;;		 -> TTime(7), 
  8201 ;;  p2              1   20[COMRAM] PTR unsigned char 
  8202 ;;		 -> TTime(7), 
  8203 ;;  p1              1   21[COMRAM] PTR unsigned char 
  8204 ;;		 -> TTime(7), 
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;		None
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  1    wreg      void 
  8209 ;; Registers used:
  8210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8216 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;Total ram usage:        3 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    6
  8223 ;; This function calls:
  8224 ;;		_DS3231_Read
  8225 ;;		_bcd_to_decimal
  8226 ;; This function is called by:
  8227 ;;		_GetTime
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text41
  8232  000DE8                     __ptext41:
  8233                           	opt stack 0
  8234  000DE8                     _getTime:
  8235                           	opt stack 22
  8236                           
  8237                           ;ds3231.c: 48: *p1 = DS3231_Read(0x00);
  8238                           
  8239                           ;incstack = 0
  8240  000DE8  5049               	movf	getTime@p1,w,c
  8241  000DEA  6ED9               	movwf	fsr2l,c
  8242  000DEC  6ADA               	clrf	fsr2h,c
  8243  000DEE  0E00               	movlw	0
  8244  000DF0  ECA5  F008         	call	_DS3231_Read
  8245  000DF4  6EDF               	movwf	indf2,c
  8246                           
  8247                           ;ds3231.c: 49: *p1 = bcd_to_decimal(*p1);
  8248  000DF6  5049               	movf	getTime@p1,w,c
  8249  000DF8  6ED9               	movwf	fsr2l,c
  8250  000DFA  6ADA               	clrf	fsr2h,c
  8251  000DFC  5049               	movf	getTime@p1,w,c
  8252  000DFE  ECCC  F005         	call	PL38	;call to abstracted procedure
  8253  000E02  EC72  F009         	call	_bcd_to_decimal
  8254                           
  8255                           ;ds3231.c: 50: *p2 = DS3231_Read(0x01);
  8256  000E06  D816               	call	PL52	;call to abstracted procedure
  8257  000E08  0E01               	movlw	1
  8258  000E0A  ECA5  F008         	call	_DS3231_Read
  8259                           
  8260                           ;ds3231.c: 51: *p2 = bcd_to_decimal(*p2);
  8261  000E0E  D812               	call	PL52	;call to abstracted procedure
  8262  000E10  5048               	movf	getTime@p2,w,c
  8263  000E12  ECCC  F005         	call	PL38	;call to abstracted procedure
  8264  000E16  EC72  F009         	call	_bcd_to_decimal
  8265                           
  8266                           ;ds3231.c: 52: *p3 = (0x3F & DS3231_Read(0x02));
  8267  000E1A  D811               	call	PL54	;call to abstracted procedure
  8268  000E1C  0E02               	movlw	2
  8269  000E1E  ECA5  F008         	call	_DS3231_Read
  8270  000E22  0B3F               	andlw	63
  8271                           
  8272                           ;ds3231.c: 53: *p3 = bcd_to_decimal(*p3);
  8273  000E24  D80C               	call	PL54	;call to abstracted procedure
  8274  000E26  5047               	movf	getTime@p3,w,c
  8275  000E28  ECCC  F005         	call	PL38	;call to abstracted procedure
  8276  000E2C  EC72  F009         	call	_bcd_to_decimal
  8277  000E30  6EDF               	movwf	indf2,c
  8278  000E32  0012               	return		;funcret
  8279  000E34                     __end_of_getTime:
  8280                           	opt stack 0
  8281  000E34                     PL52:
  8282                           	opt stack 22
  8283  000E34  6EDF               	movwf	indf2,c
  8284  000E36  5048               	movf	getTime@p2,w,c
  8285  000E38  6ED9               	movwf	fsr2l,c
  8286  000E3A  6ADA               	clrf	fsr2h,c
  8287  000E3C  0012               	return	
  8288  000E3E                     __end_ofPL52:
  8289                           	opt stack 0
  8290  000E3E                     PL54:
  8291                           	opt stack 22
  8292  000E3E  6EDF               	movwf	indf2,c
  8293  000E40  5047               	movf	getTime@p3,w,c
  8294  000E42  6ED9               	movwf	fsr2l,c
  8295  000E44  6ADA               	clrf	fsr2h,c
  8296  000E46  0012               	return	
  8297  000E48                     __end_ofPL54:
  8298                           	opt stack 0
  8299                           tosu	equ	0xFFF
  8300                           tosh	equ	0xFFE
  8301                           tosl	equ	0xFFD
  8302                           pclath	equ	0xFFA
  8303                           tblptru	equ	0xFF8
  8304                           tblptrh	equ	0xFF7
  8305                           tblptrl	equ	0xFF6
  8306                           tablat	equ	0xFF5
  8307                           prodh	equ	0xFF4
  8308                           prodl	equ	0xFF3
  8309                           intcon	equ	0xFF2
  8310                           intcon2	equ	0xFF1
  8311                           postinc0	equ	0xFEE
  8312                           wreg	equ	0xFE8
  8313                           indf1	equ	0xFE7
  8314                           plusw1	equ	0xFE3
  8315                           fsr1h	equ	0xFE2
  8316                           fsr1l	equ	0xFE1
  8317                           indf2	equ	0xFDF
  8318                           postinc2	equ	0xFDE
  8319                           postdec2	equ	0xFDD
  8320                           plusw2	equ	0xFDB
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function _getDate *****************
  8326 ;; Defined at:
  8327 ;;		line 59 in file "ds3231.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  p4              1   19[COMRAM] PTR unsigned char 
  8330 ;;		 -> TTime(7), 
  8331 ;;  p3              1   20[COMRAM] PTR unsigned char 
  8332 ;;		 -> TTime(7), 
  8333 ;;  p2              1   21[COMRAM] PTR unsigned char 
  8334 ;;		 -> TTime(7), 
  8335 ;;  p1              1   22[COMRAM] PTR unsigned char 
  8336 ;;		 -> TTime(7), 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      void 
  8341 ;; Registers used:
  8342 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8348 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;Total ram usage:        4 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    6
  8355 ;; This function calls:
  8356 ;;		_DS3231_Read
  8357 ;;		_bcd_to_decimal
  8358 ;; This function is called by:
  8359 ;;		_GetTime
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           	psect	text42
  8364  000B3C                     __ptext42:
  8365                           	opt stack 0
  8366  000B3C                     _getDate:
  8367                           	opt stack 22
  8368                           
  8369                           ;ds3231.c: 61: *p1 = DS3231_Read(0x06);
  8370                           
  8371                           ;incstack = 0
  8372  000B3C  504A               	movf	getDate@p1,w,c
  8373  000B3E  6ED9               	movwf	fsr2l,c
  8374  000B40  6ADA               	clrf	fsr2h,c
  8375  000B42  0E06               	movlw	6
  8376  000B44  ECA5  F008         	call	_DS3231_Read
  8377  000B48  6EDF               	movwf	indf2,c
  8378                           
  8379                           ;ds3231.c: 62: *p1 = bcd_to_decimal(*p1);
  8380  000B4A  504A               	movf	getDate@p1,w,c
  8381  000B4C  6ED9               	movwf	fsr2l,c
  8382  000B4E  6ADA               	clrf	fsr2h,c
  8383  000B50  504A               	movf	getDate@p1,w,c
  8384  000B52  D822               	call	PL38	;call to abstracted procedure
  8385  000B54  EC72  F009         	call	_bcd_to_decimal
  8386                           
  8387                           ;ds3231.c: 63: *p2 = (0x1F & DS3231_Read(0x05));
  8388  000B58  D82D               	call	PL76	;call to abstracted procedure
  8389  000B5A  0E05               	movlw	5
  8390  000B5C  ECA5  F008         	call	_DS3231_Read
  8391  000B60  0B1F               	andlw	31
  8392                           
  8393                           ;ds3231.c: 64: *p2 = bcd_to_decimal(*p2);
  8394  000B62  D828               	call	PL76	;call to abstracted procedure
  8395  000B64  5049               	movf	getDate@p2,w,c
  8396  000B66  D818               	call	PL38	;call to abstracted procedure
  8397  000B68  EC72  F009         	call	_bcd_to_decimal
  8398                           
  8399                           ;ds3231.c: 65: *p3 = (0x3F & DS3231_Read(0x04));
  8400  000B6C  D819               	call	PL62	;call to abstracted procedure
  8401  000B6E  0E04               	movlw	4
  8402  000B70  ECA5  F008         	call	_DS3231_Read
  8403  000B74  0B3F               	andlw	63
  8404                           
  8405                           ;ds3231.c: 66: *p3 = bcd_to_decimal(*p3);
  8406  000B76  D814               	call	PL62	;call to abstracted procedure
  8407  000B78  5048               	movf	getDate@p3,w,c
  8408  000B7A  D80E               	call	PL38	;call to abstracted procedure
  8409  000B7C  EC72  F009         	call	_bcd_to_decimal
  8410                           
  8411                           ;ds3231.c: 67: *p4 = (0x07 & DS3231_Read(0x03));
  8412  000B80  D814               	call	PL64	;call to abstracted procedure
  8413  000B82  0E03               	movlw	3
  8414  000B84  ECA5  F008         	call	_DS3231_Read
  8415  000B88  0B07               	andlw	7
  8416                           
  8417                           ;ds3231.c: 68: *p4 = bcd_to_decimal(*p4);
  8418  000B8A  D80F               	call	PL64	;call to abstracted procedure
  8419  000B8C  5047               	movf	getDate@p4,w,c
  8420  000B8E  D804               	call	PL38	;call to abstracted procedure
  8421  000B90  EC72  F009         	call	_bcd_to_decimal
  8422  000B94  6EDF               	movwf	indf2,c
  8423  000B96  0012               	return		;funcret
  8424  000B98                     __end_of_getDate:
  8425                           	opt stack 0
  8426  000B98                     PL38:
  8427                           	opt stack 22
  8428  000B98  6EE1               	movwf	fsr1l,c
  8429  000B9A  6AE2               	clrf	fsr1h,c
  8430  000B9C  50E7               	movf	indf1,w,c
  8431  000B9E  0012               	return	
  8432  000BA0                     __end_ofPL38:
  8433                           	opt stack 0
  8434  000BA0                     PL62:
  8435                           	opt stack 22
  8436  000BA0  6EDF               	movwf	indf2,c
  8437  000BA2  5048               	movf	getDate@p3,w,c
  8438  000BA4  6ED9               	movwf	fsr2l,c
  8439  000BA6  6ADA               	clrf	fsr2h,c
  8440  000BA8  0012               	return	
  8441  000BAA                     __end_ofPL62:
  8442                           	opt stack 0
  8443  000BAA                     PL64:
  8444                           	opt stack 22
  8445  000BAA  6EDF               	movwf	indf2,c
  8446  000BAC  5047               	movf	getDate@p4,w,c
  8447  000BAE  6ED9               	movwf	fsr2l,c
  8448  000BB0  6ADA               	clrf	fsr2h,c
  8449  000BB2  0012               	return	
  8450  000BB4                     __end_ofPL64:
  8451                           	opt stack 0
  8452  000BB4                     PL76:
  8453                           	opt stack 22
  8454  000BB4  6EDF               	movwf	indf2,c
  8455  000BB6  5049               	movf	getDate@p2,w,c
  8456  000BB8  6ED9               	movwf	fsr2l,c
  8457  000BBA  6ADA               	clrf	fsr2h,c
  8458  000BBC  0012               	return	
  8459  000BBE                     __end_ofPL76:
  8460                           	opt stack 0
  8461                           tosu	equ	0xFFF
  8462                           tosh	equ	0xFFE
  8463                           tosl	equ	0xFFD
  8464                           pclath	equ	0xFFA
  8465                           tblptru	equ	0xFF8
  8466                           tblptrh	equ	0xFF7
  8467                           tblptrl	equ	0xFF6
  8468                           tablat	equ	0xFF5
  8469                           prodh	equ	0xFF4
  8470                           prodl	equ	0xFF3
  8471                           intcon	equ	0xFF2
  8472                           intcon2	equ	0xFF1
  8473                           postinc0	equ	0xFEE
  8474                           wreg	equ	0xFE8
  8475                           indf1	equ	0xFE7
  8476                           plusw1	equ	0xFE3
  8477                           fsr1h	equ	0xFE2
  8478                           fsr1l	equ	0xFE1
  8479                           indf2	equ	0xFDF
  8480                           postinc2	equ	0xFDE
  8481                           postdec2	equ	0xFDD
  8482                           plusw2	equ	0xFDB
  8483                           fsr2h	equ	0xFDA
  8484                           fsr2l	equ	0xFD9
  8485                           status	equ	0xFD8
  8486                           
  8487 ;; *************** function _bcd_to_decimal *****************
  8488 ;; Defined at:
  8489 ;;		line 4 in file "ds3231.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  d               1    wreg     unsigned char 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  d               1   15[COMRAM] unsigned char 
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  1    wreg      unsigned char 
  8496 ;; Registers used:
  8497 ;;		wreg, status,2, status,0, prodl, prodh
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/0
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8505 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8507 ;;Total ram usage:        2 bytes
  8508 ;; Hardware stack levels used:    1
  8509 ;; Hardware stack levels required when called:    3
  8510 ;; This function calls:
  8511 ;;		Nothing
  8512 ;; This function is called by:
  8513 ;;		_getTime
  8514 ;;		_getDate
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518                           	psect	text43
  8519  0012E4                     __ptext43:
  8520                           	opt stack 0
  8521  0012E4                     _bcd_to_decimal:
  8522                           	opt stack 24
  8523                           
  8524                           ;incstack = 0
  8525                           ;bcd_to_decimal@d stored from wreg
  8526  0012E4  6E43               	movwf	bcd_to_decimal@d,c
  8527                           
  8528                           ;ds3231.c: 6: return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10));
  8529  0012E6  C043  F042         	movff	bcd_to_decimal@d,??_bcd_to_decimal
  8530  0012EA  0E0F               	movlw	15
  8531  0012EC  1642               	andwf	??_bcd_to_decimal,f,c
  8532  0012EE  3843               	swapf	bcd_to_decimal@d,w,c
  8533  0012F0  0B0F               	andlw	15
  8534  0012F2  0D0A               	mullw	10
  8535  0012F4  50F3               	movf	prodl,w,c
  8536  0012F6  2442               	addwf	??_bcd_to_decimal,w,c
  8537  0012F8  0012               	return		;funcret
  8538  0012FA                     __end_of_bcd_to_decimal:
  8539                           	opt stack 0
  8540                           tosu	equ	0xFFF
  8541                           tosh	equ	0xFFE
  8542                           tosl	equ	0xFFD
  8543                           pclath	equ	0xFFA
  8544                           tblptru	equ	0xFF8
  8545                           tblptrh	equ	0xFF7
  8546                           tblptrl	equ	0xFF6
  8547                           tablat	equ	0xFF5
  8548                           prodh	equ	0xFF4
  8549                           prodl	equ	0xFF3
  8550                           intcon	equ	0xFF2
  8551                           intcon2	equ	0xFF1
  8552                           postinc0	equ	0xFEE
  8553                           wreg	equ	0xFE8
  8554                           indf1	equ	0xFE7
  8555                           plusw1	equ	0xFE3
  8556                           fsr1h	equ	0xFE2
  8557                           fsr1l	equ	0xFE1
  8558                           indf2	equ	0xFDF
  8559                           postinc2	equ	0xFDE
  8560                           postdec2	equ	0xFDD
  8561                           plusw2	equ	0xFDB
  8562                           fsr2h	equ	0xFDA
  8563                           fsr2l	equ	0xFD9
  8564                           status	equ	0xFD8
  8565                           
  8566 ;; *************** function _DS3231_Read *****************
  8567 ;; Defined at:
  8568 ;;		line 16 in file "ds3231.c"
  8569 ;; Parameters:    Size  Location     Type
  8570 ;;  address         1    wreg     unsigned char 
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;  address         1   17[COMRAM] unsigned char 
  8573 ;;  value           1   18[COMRAM] unsigned char 
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  1    wreg      unsigned char 
  8576 ;; Registers used:
  8577 ;;		wreg, status,2, status,0, cstack
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8586 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8587 ;;Total ram usage:        2 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    5
  8590 ;; This function calls:
  8591 ;;		_I2C_read_noack
  8592 ;;		_I2C_restart
  8593 ;;		_I2C_start
  8594 ;;		_I2C_stop
  8595 ;;		_I2C_write
  8596 ;; This function is called by:
  8597 ;;		_getTime
  8598 ;;		_getDate
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text44
  8603  00114A                     __ptext44:
  8604                           	opt stack 0
  8605  00114A                     _DS3231_Read:
  8606                           	opt stack 22
  8607                           
  8608                           ;incstack = 0
  8609                           ;DS3231_Read@address stored from wreg
  8610  00114A  6E45               	movwf	DS3231_Read@address,c
  8611                           
  8612                           ;ds3231.c: 19: I2C_start(0xD0,0);
  8613  00114C  6A43               	clrf	I2C_start@_R_W,c
  8614  00114E  0ED0               	movlw	208
  8615  001150  EC67  F008         	call	_I2C_start
  8616                           
  8617                           ;ds3231.c: 20: I2C_write(address);
  8618  001154  5045               	movf	DS3231_Read@address,w,c
  8619  001156  EC40  F009         	call	_I2C_write
  8620                           
  8621                           ;ds3231.c: 21: I2C_restart(0xD0,1);
  8622  00115A  0E01               	movlw	1
  8623  00115C  6E43               	movwf	I2C_restart@_R_W,c
  8624  00115E  0ED0               	movlw	208
  8625  001160  EC7C  F008         	call	_I2C_restart
  8626                           
  8627                           ;ds3231.c: 22: value = I2C_read_noack();
  8628  001164  EC90  F009         	call	_I2C_read_noack	;wreg free
  8629  001168  6E46               	movwf	DS3231_Read@value,c
  8630                           
  8631                           ;ds3231.c: 23: I2C_stop();
  8632  00116A  ECB8  F009         	call	_I2C_stop	;wreg free
  8633                           
  8634                           ;ds3231.c: 24: return value;
  8635  00116E  5046               	movf	DS3231_Read@value,w,c
  8636  001170  0012               	return		;funcret
  8637  001172                     __end_of_DS3231_Read:
  8638                           	opt stack 0
  8639                           tosu	equ	0xFFF
  8640                           tosh	equ	0xFFE
  8641                           tosl	equ	0xFFD
  8642                           pclath	equ	0xFFA
  8643                           tblptru	equ	0xFF8
  8644                           tblptrh	equ	0xFF7
  8645                           tblptrl	equ	0xFF6
  8646                           tablat	equ	0xFF5
  8647                           prodh	equ	0xFF4
  8648                           prodl	equ	0xFF3
  8649                           intcon	equ	0xFF2
  8650                           intcon2	equ	0xFF1
  8651                           postinc0	equ	0xFEE
  8652                           wreg	equ	0xFE8
  8653                           indf1	equ	0xFE7
  8654                           plusw1	equ	0xFE3
  8655                           fsr1h	equ	0xFE2
  8656                           fsr1l	equ	0xFE1
  8657                           indf2	equ	0xFDF
  8658                           postinc2	equ	0xFDE
  8659                           postdec2	equ	0xFDD
  8660                           plusw2	equ	0xFDB
  8661                           fsr2h	equ	0xFDA
  8662                           fsr2l	equ	0xFD9
  8663                           status	equ	0xFD8
  8664                           
  8665 ;; *************** function _I2C_write *****************
  8666 ;; Defined at:
  8667 ;;		line 63 in file "i2c.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;  data            1    wreg     unsigned char 
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  data            1   15[COMRAM] unsigned char 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;                  1    wreg      unsigned char 
  8674 ;; Registers used:
  8675 ;;		wreg, status,2, status,0, cstack
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;Total ram usage:        1 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    4
  8688 ;; This function calls:
  8689 ;;		_I2C_idle
  8690 ;; This function is called by:
  8691 ;;		_DS3231_Read
  8692 ;;		_DS3231_Write
  8693 ;; This function uses a non-reentrant model
  8694 ;;
  8695                           
  8696                           	psect	text45
  8697  001280                     __ptext45:
  8698                           	opt stack 0
  8699  001280                     _I2C_write:
  8700                           	opt stack 23
  8701                           
  8702                           ;incstack = 0
  8703                           ;I2C_write@data stored from wreg
  8704  001280  6E43               	movwf	I2C_write@data,c
  8705                           
  8706                           ;i2c.c: 65: I2C_idle();
  8707  001282  ECA9  F009         	call	_I2C_idle	;wreg free
  8708                           
  8709                           ;i2c.c: 66: SSPBUF = data;
  8710  001286  C043  FFC9         	movff	I2C_write@data,4041	;volatile
  8711                           
  8712                           ;i2c.c: 67: SSPIF = 0;
  8713  00128A  969E               	bcf	3998,3,c	;volatile
  8714                           
  8715                           ;i2c.c: 68: I2C_idle();
  8716  00128C  ECA9  F009         	call	_I2C_idle	;wreg free
  8717                           
  8718                           ;i2c.c: 69: if (ACKSTAT == 0) return 0;
  8719  001290  ACC5               	btfss	4037,6,c	;volatile
  8720  001292  0012               	return	
  8721                           
  8722                           ;i2c.c: 70: else
  8723                           ;i2c.c: 71: { PEN = 1; while (PEN); return 1;}
  8724  001294  84C5               	bsf	4037,2,c	;volatile
  8725  001296                     l171:
  8726  001296  A4C5               	btfss	4037,2,c	;volatile
  8727  001298  0012               	return		;funcret
  8728  00129A  D7FD               	goto	l171
  8729  00129C                     __end_of_I2C_write:
  8730                           	opt stack 0
  8731                           tosu	equ	0xFFF
  8732                           tosh	equ	0xFFE
  8733                           tosl	equ	0xFFD
  8734                           pclath	equ	0xFFA
  8735                           tblptru	equ	0xFF8
  8736                           tblptrh	equ	0xFF7
  8737                           tblptrl	equ	0xFF6
  8738                           tablat	equ	0xFF5
  8739                           prodh	equ	0xFF4
  8740                           prodl	equ	0xFF3
  8741                           intcon	equ	0xFF2
  8742                           intcon2	equ	0xFF1
  8743                           postinc0	equ	0xFEE
  8744                           wreg	equ	0xFE8
  8745                           indf1	equ	0xFE7
  8746                           plusw1	equ	0xFE3
  8747                           fsr1h	equ	0xFE2
  8748                           fsr1l	equ	0xFE1
  8749                           indf2	equ	0xFDF
  8750                           postinc2	equ	0xFDE
  8751                           postdec2	equ	0xFDD
  8752                           plusw2	equ	0xFDB
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function _I2C_stop *****************
  8758 ;; Defined at:
  8759 ;;		line 87 in file "i2c.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;		None
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;		None
  8764 ;; Return value:  Size  Location     Type
  8765 ;;                  1    wreg      void 
  8766 ;; Registers used:
  8767 ;;		wreg, status,2, status,0, cstack
  8768 ;; Tracked objects:
  8769 ;;		On entry : 0/0
  8770 ;;		On exit  : 0/0
  8771 ;;		Unchanged: 0/0
  8772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;Total ram usage:        0 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; Hardware stack levels required when called:    4
  8780 ;; This function calls:
  8781 ;;		_I2C_idle
  8782 ;; This function is called by:
  8783 ;;		_DS3231_Read
  8784 ;;		_DS3231_Write
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           	psect	text46
  8789  001370                     __ptext46:
  8790                           	opt stack 0
  8791  001370                     _I2C_stop:
  8792                           	opt stack 23
  8793                           
  8794                           ;i2c.c: 89: I2C_idle();
  8795                           
  8796                           ;incstack = 0
  8797  001370  ECA9  F009         	call	_I2C_idle	;wreg free
  8798                           
  8799                           ;i2c.c: 90: PEN = 1;
  8800  001374  84C5               	bsf	4037,2,c	;volatile
  8801  001376                     l179:
  8802  001376  A4C5               	btfss	4037,2,c	;volatile
  8803  001378  0012               	return		;funcret
  8804  00137A  D7FD               	goto	l179
  8805  00137C                     __end_of_I2C_stop:
  8806                           	opt stack 0
  8807                           tosu	equ	0xFFF
  8808                           tosh	equ	0xFFE
  8809                           tosl	equ	0xFFD
  8810                           pclath	equ	0xFFA
  8811                           tblptru	equ	0xFF8
  8812                           tblptrh	equ	0xFF7
  8813                           tblptrl	equ	0xFF6
  8814                           tablat	equ	0xFF5
  8815                           prodh	equ	0xFF4
  8816                           prodl	equ	0xFF3
  8817                           intcon	equ	0xFF2
  8818                           intcon2	equ	0xFF1
  8819                           postinc0	equ	0xFEE
  8820                           wreg	equ	0xFE8
  8821                           indf1	equ	0xFE7
  8822                           plusw1	equ	0xFE3
  8823                           fsr1h	equ	0xFE2
  8824                           fsr1l	equ	0xFE1
  8825                           indf2	equ	0xFDF
  8826                           postinc2	equ	0xFDE
  8827                           postdec2	equ	0xFDD
  8828                           plusw2	equ	0xFDB
  8829                           fsr2h	equ	0xFDA
  8830                           fsr2l	equ	0xFD9
  8831                           status	equ	0xFD8
  8832                           
  8833 ;; *************** function _I2C_start *****************
  8834 ;; Defined at:
  8835 ;;		line 32 in file "i2c.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;  adress          1    wreg     unsigned char 
  8838 ;;  _R_W            1   15[COMRAM] unsigned char 
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;  adress          1   16[COMRAM] unsigned char 
  8841 ;; Return value:  Size  Location     Type
  8842 ;;                  1    wreg      unsigned char 
  8843 ;; Registers used:
  8844 ;;		wreg, status,2, status,0, cstack
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8850 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;Total ram usage:        2 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; Hardware stack levels required when called:    4
  8857 ;; This function calls:
  8858 ;;		_I2C_idle
  8859 ;; This function is called by:
  8860 ;;		_DS3231_Read
  8861 ;;		_DS3231_Write
  8862 ;; This function uses a non-reentrant model
  8863 ;;
  8864                           
  8865                           	psect	text47
  8866  0010CE                     __ptext47:
  8867                           	opt stack 0
  8868  0010CE                     _I2C_start:
  8869                           	opt stack 23
  8870                           
  8871                           ;incstack = 0
  8872                           ;I2C_start@adress stored from wreg
  8873  0010CE  6E44               	movwf	I2C_start@adress,c
  8874                           
  8875                           ;i2c.c: 34: I2C_idle();
  8876  0010D0  ECA9  F009         	call	_I2C_idle	;wreg free
  8877                           
  8878                           ;i2c.c: 35: SEN = 1;
  8879  0010D4  80C5               	bsf	4037,0,c	;volatile
  8880                           
  8881                           ;i2c.c: 36: I2C_idle();
  8882  0010D6  ECA9  F009         	call	_I2C_idle	;wreg free
  8883                           
  8884                           ;i2c.c: 37: if(_R_W == 0) adress &= 0b11111110;
  8885  0010DA  5043               	movf	I2C_start@_R_W,w,c
  8886  0010DC  E102               	bnz	l2433
  8887  0010DE  9044               	bcf	I2C_start@adress,0,c
  8888  0010E0  D001               	goto	l2435
  8889  0010E2                     l2433:
  8890                           
  8891                           ;i2c.c: 38: else adress |= 0b00000001;
  8892  0010E2  8044               	bsf	I2C_start@adress,0,c
  8893  0010E4                     l2435:
  8894                           
  8895                           ;i2c.c: 39: SSPBUF=adress;
  8896  0010E4  C044  FFC9         	movff	I2C_start@adress,4041	;volatile
  8897                           
  8898                           ;i2c.c: 40: I2C_idle();
  8899  0010E8  ECA9  F009         	call	_I2C_idle	;wreg free
  8900                           
  8901                           ;i2c.c: 41: if (ACKSTAT==0) return 0;
  8902  0010EC  ACC5               	btfss	4037,6,c	;volatile
  8903  0010EE  0012               	return	
  8904                           
  8905                           ;i2c.c: 42: else
  8906                           ;i2c.c: 43: { PEN = 1; while (PEN); return 1;}
  8907  0010F0  84C5               	bsf	4037,2,c	;volatile
  8908  0010F2                     l153:
  8909  0010F2  A4C5               	btfss	4037,2,c	;volatile
  8910  0010F4  0012               	return		;funcret
  8911  0010F6  D7FD               	goto	l153
  8912  0010F8                     __end_of_I2C_start:
  8913                           	opt stack 0
  8914                           tosu	equ	0xFFF
  8915                           tosh	equ	0xFFE
  8916                           tosl	equ	0xFFD
  8917                           pclath	equ	0xFFA
  8918                           tblptru	equ	0xFF8
  8919                           tblptrh	equ	0xFF7
  8920                           tblptrl	equ	0xFF6
  8921                           tablat	equ	0xFF5
  8922                           prodh	equ	0xFF4
  8923                           prodl	equ	0xFF3
  8924                           intcon	equ	0xFF2
  8925                           intcon2	equ	0xFF1
  8926                           postinc0	equ	0xFEE
  8927                           wreg	equ	0xFE8
  8928                           indf1	equ	0xFE7
  8929                           plusw1	equ	0xFE3
  8930                           fsr1h	equ	0xFE2
  8931                           fsr1l	equ	0xFE1
  8932                           indf2	equ	0xFDF
  8933                           postinc2	equ	0xFDE
  8934                           postdec2	equ	0xFDD
  8935                           plusw2	equ	0xFDB
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8
  8939                           
  8940 ;; *************** function _I2C_restart *****************
  8941 ;; Defined at:
  8942 ;;		line 48 in file "i2c.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;  adres           1    wreg     unsigned char 
  8945 ;;  _R_W            1   15[COMRAM] unsigned char 
  8946 ;; Auto vars:     Size  Location     Type
  8947 ;;  adres           1   16[COMRAM] unsigned char 
  8948 ;; Return value:  Size  Location     Type
  8949 ;;                  1    wreg      unsigned char 
  8950 ;; Registers used:
  8951 ;;		wreg, status,2, status,0, cstack
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8957 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;Total ram usage:        2 bytes
  8962 ;; Hardware stack levels used:    1
  8963 ;; Hardware stack levels required when called:    4
  8964 ;; This function calls:
  8965 ;;		_I2C_idle
  8966 ;; This function is called by:
  8967 ;;		_DS3231_Read
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text48
  8972  0010F8                     __ptext48:
  8973                           	opt stack 0
  8974  0010F8                     _I2C_restart:
  8975                           	opt stack 22
  8976                           
  8977                           ;incstack = 0
  8978                           ;I2C_restart@adres stored from wreg
  8979  0010F8  6E44               	movwf	I2C_restart@adres,c
  8980                           
  8981                           ;i2c.c: 50: I2C_idle();
  8982  0010FA  ECA9  F009         	call	_I2C_idle	;wreg free
  8983                           
  8984                           ;i2c.c: 51: RSEN = 1;
  8985  0010FE  82C5               	bsf	4037,1,c	;volatile
  8986                           
  8987                           ;i2c.c: 52: I2C_idle();
  8988  001100  ECA9  F009         	call	_I2C_idle	;wreg free
  8989                           
  8990                           ;i2c.c: 53: if(_R_W == 0) adres &= 0b11111110;
  8991  001104  5043               	movf	I2C_restart@_R_W,w,c
  8992  001106  E102               	bnz	l2453
  8993  001108  9044               	bcf	I2C_restart@adres,0,c
  8994  00110A  D001               	goto	l2455
  8995  00110C                     l2453:
  8996                           
  8997                           ;i2c.c: 54: else adres |= 0b00000001;
  8998  00110C  8044               	bsf	I2C_restart@adres,0,c
  8999  00110E                     l2455:
  9000                           
  9001                           ;i2c.c: 55: SSPBUF = adres;
  9002  00110E  C044  FFC9         	movff	I2C_restart@adres,4041	;volatile
  9003                           
  9004                           ;i2c.c: 56: I2C_idle();
  9005  001112  ECA9  F009         	call	_I2C_idle	;wreg free
  9006                           
  9007                           ;i2c.c: 57: if (ACKSTAT == 0) return 0;
  9008  001116  ACC5               	btfss	4037,6,c	;volatile
  9009  001118  0012               	return	
  9010                           
  9011                           ;i2c.c: 58: else
  9012                           ;i2c.c: 59: { PEN = 1; while (PEN); return 1;}
  9013  00111A  84C5               	bsf	4037,2,c	;volatile
  9014  00111C                     l163:
  9015  00111C  A4C5               	btfss	4037,2,c	;volatile
  9016  00111E  0012               	return		;funcret
  9017  001120  D7FD               	goto	l163
  9018  001122                     __end_of_I2C_restart:
  9019                           	opt stack 0
  9020                           tosu	equ	0xFFF
  9021                           tosh	equ	0xFFE
  9022                           tosl	equ	0xFFD
  9023                           pclath	equ	0xFFA
  9024                           tblptru	equ	0xFF8
  9025                           tblptrh	equ	0xFF7
  9026                           tblptrl	equ	0xFF6
  9027                           tablat	equ	0xFF5
  9028                           prodh	equ	0xFF4
  9029                           prodl	equ	0xFF3
  9030                           intcon	equ	0xFF2
  9031                           intcon2	equ	0xFF1
  9032                           postinc0	equ	0xFEE
  9033                           wreg	equ	0xFE8
  9034                           indf1	equ	0xFE7
  9035                           plusw1	equ	0xFE3
  9036                           fsr1h	equ	0xFE2
  9037                           fsr1l	equ	0xFE1
  9038                           indf2	equ	0xFDF
  9039                           postinc2	equ	0xFDE
  9040                           postdec2	equ	0xFDD
  9041                           plusw2	equ	0xFDB
  9042                           fsr2h	equ	0xFDA
  9043                           fsr2l	equ	0xFD9
  9044                           status	equ	0xFD8
  9045                           
  9046 ;; *************** function _I2C_read_noack *****************
  9047 ;; Defined at:
  9048 ;;		line 75 in file "i2c.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;		None
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;		None
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      unsigned char 
  9055 ;; Registers used:
  9056 ;;		wreg, status,2, status,0, cstack
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;Total ram usage:        0 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    4
  9069 ;; This function calls:
  9070 ;;		_I2C_idle
  9071 ;; This function is called by:
  9072 ;;		_DS3231_Read
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           	psect	text49
  9077  001320                     __ptext49:
  9078                           	opt stack 0
  9079  001320                     _I2C_read_noack:
  9080                           	opt stack 22
  9081                           
  9082                           ;i2c.c: 77: I2C_idle();
  9083                           
  9084                           ;incstack = 0
  9085  001320  ECA9  F009         	call	_I2C_idle	;wreg free
  9086                           
  9087                           ;i2c.c: 78: RCEN = 1;
  9088  001324  86C5               	bsf	4037,3,c	;volatile
  9089                           
  9090                           ;i2c.c: 79: I2C_idle();
  9091  001326  ECA9  F009         	call	_I2C_idle	;wreg free
  9092                           
  9093                           ;i2c.c: 80: ACKDT = 1;
  9094  00132A  8AC5               	bsf	4037,5,c	;volatile
  9095                           
  9096                           ;i2c.c: 81: ACKEN = 1;
  9097  00132C  88C5               	bsf	4037,4,c	;volatile
  9098                           
  9099                           ;i2c.c: 83: return SSPBUF;
  9100  00132E  50C9               	movf	4041,w,c	;volatile
  9101  001330  0012               	return		;funcret
  9102  001332                     __end_of_I2C_read_noack:
  9103                           	opt stack 0
  9104                           tosu	equ	0xFFF
  9105                           tosh	equ	0xFFE
  9106                           tosl	equ	0xFFD
  9107                           pclath	equ	0xFFA
  9108                           tblptru	equ	0xFF8
  9109                           tblptrh	equ	0xFF7
  9110                           tblptrl	equ	0xFF6
  9111                           tablat	equ	0xFF5
  9112                           prodh	equ	0xFF4
  9113                           prodl	equ	0xFF3
  9114                           intcon	equ	0xFF2
  9115                           intcon2	equ	0xFF1
  9116                           postinc0	equ	0xFEE
  9117                           wreg	equ	0xFE8
  9118                           indf1	equ	0xFE7
  9119                           plusw1	equ	0xFE3
  9120                           fsr1h	equ	0xFE2
  9121                           fsr1l	equ	0xFE1
  9122                           indf2	equ	0xFDF
  9123                           postinc2	equ	0xFDE
  9124                           postdec2	equ	0xFDD
  9125                           plusw2	equ	0xFDB
  9126                           fsr2h	equ	0xFDA
  9127                           fsr2l	equ	0xFD9
  9128                           status	equ	0xFD8
  9129                           
  9130 ;; *************** function _I2C_idle *****************
  9131 ;; Defined at:
  9132 ;;		line 24 in file "i2c.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;		None
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;		None
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      void 
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9150 ;;Total ram usage:        1 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    3
  9153 ;; This function calls:
  9154 ;;		Nothing
  9155 ;; This function is called by:
  9156 ;;		_I2C_start
  9157 ;;		_I2C_restart
  9158 ;;		_I2C_write
  9159 ;;		_I2C_read_noack
  9160 ;;		_I2C_stop
  9161 ;; This function uses a non-reentrant model
  9162 ;;
  9163                           
  9164                           	psect	text50
  9165  001352                     __ptext50:
  9166                           	opt stack 0
  9167  001352                     _I2C_idle:
  9168                           	opt stack 23
  9169  001352                     l2421:
  9170  001352  CFC5 F042          	movff	4037,??_I2C_idle	;volatile
  9171  001356  0E1F               	movlw	31
  9172  001358  1642               	andwf	??_I2C_idle,f,c
  9173  00135A  E1FB               	bnz	l2421
  9174  00135C  A4C7               	btfss	4039,2,c	;volatile
  9175  00135E  0C1F               	retlw	31	;funcret
  9176  001360  D7F8               	goto	l2421
  9177  001362                     __end_of_I2C_idle:
  9178                           	opt stack 0
  9179                           tosu	equ	0xFFF
  9180                           tosh	equ	0xFFE
  9181                           tosl	equ	0xFFD
  9182                           pclath	equ	0xFFA
  9183                           tblptru	equ	0xFF8
  9184                           tblptrh	equ	0xFF7
  9185                           tblptrl	equ	0xFF6
  9186                           tablat	equ	0xFF5
  9187                           prodh	equ	0xFF4
  9188                           prodl	equ	0xFF3
  9189                           intcon	equ	0xFF2
  9190                           intcon2	equ	0xFF1
  9191                           postinc0	equ	0xFEE
  9192                           wreg	equ	0xFE8
  9193                           indf1	equ	0xFE7
  9194                           plusw1	equ	0xFE3
  9195                           fsr1h	equ	0xFE2
  9196                           fsr1l	equ	0xFE1
  9197                           indf2	equ	0xFDF
  9198                           postinc2	equ	0xFDE
  9199                           postdec2	equ	0xFDD
  9200                           plusw2	equ	0xFDB
  9201                           fsr2h	equ	0xFDA
  9202                           fsr2l	equ	0xFD9
  9203                           status	equ	0xFD8
  9204                           
  9205 ;; *************** function _INTERRUPT_InterruptManager *****************
  9206 ;; Defined at:
  9207 ;;		line 4 in file "interrupt.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;		None
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;		None
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  1    wreg      void 
  9214 ;; Registers used:
  9215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;Total ram usage:        5 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    2
  9228 ;; This function calls:
  9229 ;;		_INT0_ISR
  9230 ;;		_TMR0_ISR
  9231 ;;		_TMR1_ISR
  9232 ;; This function is called by:
  9233 ;;		Interrupt level 2
  9234 ;; This function uses a non-reentrant model
  9235 ;;
  9236                           
  9237                           	psect	intcode
  9238  000008                     __pintcode:
  9239                           	opt stack 0
  9240  000008                     _INTERRUPT_InterruptManager:
  9241                           	opt stack 22
  9242                           
  9243                           ;incstack = 0
  9244  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9245  00000A  ED54  F006         	call	int_func,f	;refresh shadow registers
  9246                           tosu	equ	0xFFF
  9247                           tosh	equ	0xFFE
  9248                           tosl	equ	0xFFD
  9249                           pclath	equ	0xFFA
  9250                           tblptru	equ	0xFF8
  9251                           tblptrh	equ	0xFF7
  9252                           tblptrl	equ	0xFF6
  9253                           tablat	equ	0xFF5
  9254                           prodh	equ	0xFF4
  9255                           prodl	equ	0xFF3
  9256                           intcon	equ	0xFF2
  9257                           intcon2	equ	0xFF1
  9258                           postinc0	equ	0xFEE
  9259                           wreg	equ	0xFE8
  9260                           indf1	equ	0xFE7
  9261                           plusw1	equ	0xFE3
  9262                           fsr1h	equ	0xFE2
  9263                           fsr1l	equ	0xFE1
  9264                           indf2	equ	0xFDF
  9265                           postinc2	equ	0xFDE
  9266                           postdec2	equ	0xFDD
  9267                           plusw2	equ	0xFDB
  9268                           fsr2h	equ	0xFDA
  9269                           fsr2l	equ	0xFD9
  9270                           status	equ	0xFD8
  9271                           
  9272                           	psect	intcode_body
  9273  000CA8                     __pintcode_body:
  9274                           	opt stack 22
  9275  000CA8                     int_func:
  9276                           	opt stack 22
  9277  000CA8  0006               	pop		; remove dummy address from shadow register refresh
  9278  000CAA  CFD9 F03E          	movff	fsr2l,??_INTERRUPT_InterruptManager+1
  9279  000CAE  CFDA F03F          	movff	fsr2h,??_INTERRUPT_InterruptManager+2
  9280  000CB2  CFF3 F040          	movff	prodl,??_INTERRUPT_InterruptManager+3
  9281  000CB6  CFF4 F041          	movff	prodh,??_INTERRUPT_InterruptManager+4
  9282                           
  9283                           ;interrupt.c: 7: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  9284  000CBA  BAF2               	btfsc	intcon,5,c	;volatile
  9285  000CBC  A4F2               	btfss	intcon,2,c	;volatile
  9286  000CBE  D003               	goto	i2l278
  9287                           
  9288                           ;interrupt.c: 8: {
  9289                           ;interrupt.c: 9: TMR0_ISR();
  9290  000CC0  ECB1  F009         	call	_TMR0_ISR	;wreg free
  9291                           
  9292                           ;interrupt.c: 10: }
  9293  000CC4  D013               	goto	i2l3383
  9294  000CC6                     i2l278:
  9295                           
  9296                           ;interrupt.c: 11: else if (INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  9297  000CC6  B8F2               	btfsc	intcon,4,c	;volatile
  9298  000CC8  A2F2               	btfss	intcon,1,c	;volatile
  9299  000CCA  D010               	goto	i2l3383
  9300                           
  9301                           ;interrupt.c: 12: {
  9302                           ;interrupt.c: 13: INTCONbits.INT0IF = 0;
  9303  000CCC  92F2               	bcf	intcon,1,c	;volatile
  9304  000CCE  0E01               	movlw	1
  9305                           
  9306                           ;interrupt.c: 14: INTCON2bits.INTEDG0 = ~INTCON2bits.INTEDG0;
  9307  000CD0  ACF1               	btfss	intcon2,6,c	;volatile
  9308  000CD2  0E00               	movlw	0
  9309  000CD4  0AFF               	xorlw	255
  9310  000CD6  6E3D               	movwf	??_INTERRUPT_InterruptManager& (0+255),c
  9311  000CD8  3A3D               	swapf	??_INTERRUPT_InterruptManager,f,c
  9312  000CDA  463D               	rlncf	??_INTERRUPT_InterruptManager,f,c
  9313  000CDC  463D               	rlncf	??_INTERRUPT_InterruptManager,f,c
  9314  000CDE  50F1               	movf	intcon2,w,c	;volatile
  9315  000CE0  183D               	xorwf	??_INTERRUPT_InterruptManager,w,c
  9316  000CE2  0BBF               	andlw	-65
  9317  000CE4  183D               	xorwf	??_INTERRUPT_InterruptManager,w,c
  9318  000CE6  6EF1               	movwf	intcon2,c	;volatile
  9319                           
  9320                           ;interrupt.c: 16: INT0_ISR();
  9321  000CE8  EC7D  F009         	call	_INT0_ISR	;wreg free
  9322  000CEC                     i2l3383:
  9323                           
  9324                           ;interrupt.c: 17: } if (PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF ==1)
  9325  000CEC  B09D               	btfsc	3997,0,c	;volatile
  9326  000CEE  A09E               	btfss	3998,0,c	;volatile
  9327  000CF0  D007               	goto	i2l282
  9328                           
  9329                           ;interrupt.c: 18: {
  9330                           ;interrupt.c: 19: PIR1bits.TMR1IF = 0;
  9331  000CF2  909E               	bcf	3998,0,c	;volatile
  9332                           
  9333                           ;interrupt.c: 20: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  9334  000CF4  0E3C               	movlw	60
  9335  000CF6  6ECF               	movwf	4047,c	;volatile
  9336                           
  9337                           ;interrupt.c: 21: TMR1L = ((unsigned char)((15536)&0xFF));
  9338  000CF8  0EB0               	movlw	176
  9339  000CFA  6ECE               	movwf	4046,c	;volatile
  9340                           
  9341                           ;interrupt.c: 22: TMR1_ISR();
  9342  000CFC  ECC4  F009         	call	_TMR1_ISR	;wreg free
  9343  000D00                     i2l282:
  9344  000D00  C041  FFF4         	movff	??_INTERRUPT_InterruptManager+4,prodh
  9345  000D04  C040  FFF3         	movff	??_INTERRUPT_InterruptManager+3,prodl
  9346  000D08  C03F  FFDA         	movff	??_INTERRUPT_InterruptManager+2,fsr2h
  9347  000D0C  C03E  FFD9         	movff	??_INTERRUPT_InterruptManager+1,fsr2l
  9348  000D10  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9349  000D12  0011               	retfie		f
  9350  000D14                     __end_of_INTERRUPT_InterruptManager:
  9351                           	opt stack 0
  9352                           tosu	equ	0xFFF
  9353                           tosh	equ	0xFFE
  9354                           tosl	equ	0xFFD
  9355                           pclath	equ	0xFFA
  9356                           tblptru	equ	0xFF8
  9357                           tblptrh	equ	0xFF7
  9358                           tblptrl	equ	0xFF6
  9359                           tablat	equ	0xFF5
  9360                           prodh	equ	0xFF4
  9361                           prodl	equ	0xFF3
  9362                           intcon	equ	0xFF2
  9363                           intcon2	equ	0xFF1
  9364                           postinc0	equ	0xFEE
  9365                           wreg	equ	0xFE8
  9366                           indf1	equ	0xFE7
  9367                           plusw1	equ	0xFE3
  9368                           fsr1h	equ	0xFE2
  9369                           fsr1l	equ	0xFE1
  9370                           indf2	equ	0xFDF
  9371                           postinc2	equ	0xFDE
  9372                           postdec2	equ	0xFDD
  9373                           plusw2	equ	0xFDB
  9374                           fsr2h	equ	0xFDA
  9375                           fsr2l	equ	0xFD9
  9376                           status	equ	0xFD8
  9377                           
  9378 ;; *************** function _TMR1_ISR *****************
  9379 ;; Defined at:
  9380 ;;		line 493 in file "common.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;		None
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  1    wreg      void 
  9387 ;; Registers used:
  9388 ;;		None
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;Total ram usage:        0 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; This function calls:
  9401 ;;		Nothing
  9402 ;; This function is called by:
  9403 ;;		_INTERRUPT_InterruptManager
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           	psect	text52
  9408  001388                     __ptext52:
  9409                           	opt stack 0
  9410  001388                     _TMR1_ISR:
  9411                           	opt stack 23
  9412                           
  9413                           ;incstack = 0
  9414  001388  0012               	return		;funcret
  9415  00138A                     __end_of_TMR1_ISR:
  9416                           	opt stack 0
  9417                           tosu	equ	0xFFF
  9418                           tosh	equ	0xFFE
  9419                           tosl	equ	0xFFD
  9420                           pclath	equ	0xFFA
  9421                           tblptru	equ	0xFF8
  9422                           tblptrh	equ	0xFF7
  9423                           tblptrl	equ	0xFF6
  9424                           tablat	equ	0xFF5
  9425                           prodh	equ	0xFF4
  9426                           prodl	equ	0xFF3
  9427                           intcon	equ	0xFF2
  9428                           intcon2	equ	0xFF1
  9429                           postinc0	equ	0xFEE
  9430                           wreg	equ	0xFE8
  9431                           indf1	equ	0xFE7
  9432                           plusw1	equ	0xFE3
  9433                           fsr1h	equ	0xFE2
  9434                           fsr1l	equ	0xFE1
  9435                           indf2	equ	0xFDF
  9436                           postinc2	equ	0xFDE
  9437                           postdec2	equ	0xFDD
  9438                           plusw2	equ	0xFDB
  9439                           fsr2h	equ	0xFDA
  9440                           fsr2l	equ	0xFD9
  9441                           status	equ	0xFD8
  9442                           
  9443 ;; *************** function _TMR0_ISR *****************
  9444 ;; Defined at:
  9445 ;;		line 127 in file "dispatcher.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;		None
  9448 ;; Auto vars:     Size  Location     Type
  9449 ;;		None
  9450 ;; Return value:  Size  Location     Type
  9451 ;;                  1    wreg      void 
  9452 ;; Registers used:
  9453 ;;		wreg, status,2
  9454 ;; Tracked objects:
  9455 ;;		On entry : 0/0
  9456 ;;		On exit  : 0/0
  9457 ;;		Unchanged: 0/0
  9458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;Total ram usage:        0 bytes
  9464 ;; Hardware stack levels used:    1
  9465 ;; This function calls:
  9466 ;;		Nothing
  9467 ;; This function is called by:
  9468 ;;		_INTERRUPT_InterruptManager
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           	psect	text53
  9473  001362                     __ptext53:
  9474                           	opt stack 0
  9475  001362                     _TMR0_ISR:
  9476                           	opt stack 23
  9477                           
  9478                           ;dispatcher.c: 131: INTCONbits.TMR0IF = 0;
  9479                           
  9480                           ;incstack = 0
  9481  001362  94F2               	bcf	intcon,2,c	;volatile
  9482                           
  9483                           ;dispatcher.c: 132: TMR0 = 61;
  9484  001364  6AD7               	clrf	4055,c	;volatile
  9485  001366  0E3D               	movlw	61
  9486  001368  6ED6               	movwf	4054,c	;volatile
  9487                           
  9488                           ;dispatcher.c: 133: Timer0Interrupt = 1;
  9489  00136A  0E01               	movlw	1
  9490  00136C  6E0B               	movwf	_Timer0Interrupt,c
  9491  00136E  0C01               	retlw	1	;funcret
  9492  001370                     __end_of_TMR0_ISR:
  9493                           	opt stack 0
  9494                           tosu	equ	0xFFF
  9495                           tosh	equ	0xFFE
  9496                           tosl	equ	0xFFD
  9497                           pclath	equ	0xFFA
  9498                           tblptru	equ	0xFF8
  9499                           tblptrh	equ	0xFF7
  9500                           tblptrl	equ	0xFF6
  9501                           tablat	equ	0xFF5
  9502                           prodh	equ	0xFF4
  9503                           prodl	equ	0xFF3
  9504                           intcon	equ	0xFF2
  9505                           intcon2	equ	0xFF1
  9506                           postinc0	equ	0xFEE
  9507                           wreg	equ	0xFE8
  9508                           indf1	equ	0xFE7
  9509                           plusw1	equ	0xFE3
  9510                           fsr1h	equ	0xFE2
  9511                           fsr1l	equ	0xFE1
  9512                           indf2	equ	0xFDF
  9513                           postinc2	equ	0xFDE
  9514                           postdec2	equ	0xFDD
  9515                           plusw2	equ	0xFDB
  9516                           fsr2h	equ	0xFDA
  9517                           fsr2l	equ	0xFD9
  9518                           status	equ	0xFD8
  9519                           
  9520 ;; *************** function _INT0_ISR *****************
  9521 ;; Defined at:
  9522 ;;		line 483 in file "common.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;		None
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;		None
  9527 ;; Return value:  Size  Location     Type
  9528 ;;                  1    wreg      void 
  9529 ;; Registers used:
  9530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;Total ram usage:        0 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    1
  9543 ;; This function calls:
  9544 ;;		i2_RTOS_SetTask
  9545 ;; This function is called by:
  9546 ;;		_INTERRUPT_InterruptManager
  9547 ;; This function uses a non-reentrant model
  9548 ;;
  9549                           
  9550                           	psect	text54
  9551  0012FA                     __ptext54:
  9552                           	opt stack 0
  9553  0012FA                     _INT0_ISR:
  9554                           	opt stack 22
  9555                           
  9556                           ;common.c: 485: RTOS_SetTask(GetTime, 0, 0);
  9557                           
  9558                           ;incstack = 0
  9559  0012FA  0EBE               	movlw	low _GetTime
  9560  0012FC  6E34               	movwf	i2RTOS_SetTask@taskFunc,c
  9561  0012FE  0E11               	movlw	high _GetTime
  9562  001300  6E35               	movwf	i2RTOS_SetTask@taskFunc+1,c
  9563  001302  6A37               	clrf	i2RTOS_SetTask@taskDelay+1,c
  9564  001304  6A36               	clrf	i2RTOS_SetTask@taskDelay,c
  9565  001306  6A39               	clrf	i2RTOS_SetTask@taskPeriod+1,c
  9566  001308  6A38               	clrf	i2RTOS_SetTask@taskPeriod,c
  9567  00130A  EFC3  F004         	goto	i2_RTOS_SetTask	;wreg free
  9568  00130E                     __end_of_INT0_ISR:
  9569                           	opt stack 0
  9570                           tosu	equ	0xFFF
  9571                           tosh	equ	0xFFE
  9572                           tosl	equ	0xFFD
  9573                           pclath	equ	0xFFA
  9574                           tblptru	equ	0xFF8
  9575                           tblptrh	equ	0xFF7
  9576                           tblptrl	equ	0xFF6
  9577                           tablat	equ	0xFF5
  9578                           prodh	equ	0xFF4
  9579                           prodl	equ	0xFF3
  9580                           intcon	equ	0xFF2
  9581                           intcon2	equ	0xFF1
  9582                           postinc0	equ	0xFEE
  9583                           wreg	equ	0xFE8
  9584                           indf1	equ	0xFE7
  9585                           plusw1	equ	0xFE3
  9586                           fsr1h	equ	0xFE2
  9587                           fsr1l	equ	0xFE1
  9588                           indf2	equ	0xFDF
  9589                           postinc2	equ	0xFDE
  9590                           postdec2	equ	0xFDD
  9591                           plusw2	equ	0xFDB
  9592                           fsr2h	equ	0xFDA
  9593                           fsr2l	equ	0xFD9
  9594                           status	equ	0xFD8
  9595                           
  9596 ;; *************** function i2_RTOS_SetTask *****************
  9597 ;; Defined at:
  9598 ;;		line 22 in file "dispatcher.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;  taskFunc        2    0[COMRAM] PTR FTN()void 
  9601 ;;		 -> time_set_dy(1), time_set_dt(1), time_set_mt(1), time_set_yr(1), 
  9602 ;;		 -> default_state(1), time_set_hr(1), time_set_min(1), GetTime(1), 
  9603 ;;		 -> key_press(1), time_led(1), 
  9604 ;;  taskDelay       2    2[COMRAM] unsigned int 
  9605 ;;  taskPeriod      2    4[COMRAM] unsigned int 
  9606 ;; Auto vars:     Size  Location     Type
  9607 ;;  RTOS_SetTask    1    8[COMRAM] unsigned char 
  9608 ;; Return value:  Size  Location     Type
  9609 ;;                  1    wreg      void 
  9610 ;; Registers used:
  9611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9612 ;; Tracked objects:
  9613 ;;		On entry : 0/0
  9614 ;;		On exit  : 0/0
  9615 ;;		Unchanged: 0/0
  9616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9617 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9621 ;;Total ram usage:        9 bytes
  9622 ;; Hardware stack levels used:    1
  9623 ;; This function calls:
  9624 ;;		Nothing
  9625 ;; This function is called by:
  9626 ;;		_INT0_ISR
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           	psect	text55
  9631  000986                     __ptext55:
  9632                           	opt stack 0
  9633  000986                     i2_RTOS_SetTask:
  9634                           	opt stack 22
  9635                           
  9636                           ;dispatcher.c: 24: uint8_t i;
  9637                           ;dispatcher.c: 26: if(!taskFunc) return;
  9638                           
  9639                           ;incstack = 0
  9640  000986  5034               	movf	i2RTOS_SetTask@taskFunc,w,c
  9641  000988  1035               	iorwf	i2RTOS_SetTask@taskFunc+1,w,c
  9642  00098A  E101               	bnz	i2l212
  9643  00098C  0012               	return	
  9644  00098E                     i2l212:
  9645                           
  9646                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
  9647  00098E  6A3C               	clrf	i2RTOS_SetTask@i,c
  9648  000990  D015               	goto	i2l3279
  9649  000992                     i2l3267:
  9650                           
  9651                           ;dispatcher.c: 28: {
  9652                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
  9653  000992  503C               	movf	i2RTOS_SetTask@i,w,c
  9654  000994  D832               	call	PL20	;call to abstracted procedure
  9655  000996  5034               	movf	i2RTOS_SetTask@taskFunc,w,c	;volatile
  9656  000998  18DE               	xorwf	postinc2,w,c
  9657  00099A  E10F               	bnz	i2l3277
  9658  00099C  5035               	movf	i2RTOS_SetTask@taskFunc+1,w,c	;volatile
  9659  00099E  18DE               	xorwf	postinc2,w,c
  9660  0009A0  E10C               	bnz	i2l3277
  9661                           
  9662                           ;dispatcher.c: 30: {
  9663                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
  9664  0009A2  9EF2               	bcf	intcon,7,c	;volatile
  9665                           
  9666                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
  9667  0009A4  503C               	movf	i2RTOS_SetTask@i,w,c
  9668  0009A6  EC51  F004         	call	PL18	;call to abstracted procedure
  9669  0009AA  D838               	call	PL60	;call to abstracted procedure
  9670                           
  9671                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
  9672  0009AC  503C               	movf	i2RTOS_SetTask@i,w,c
  9673  0009AE  D82B               	call	PL26	;call to abstracted procedure
  9674  0009B0  D830               	call	PL46	;call to abstracted procedure
  9675                           
  9676                           ;dispatcher.c: 35: TaskArray[i].run = 0;
  9677  0009B2  503C               	movf	i2RTOS_SetTask@i,w,c
  9678  0009B4  D81A               	call	PL16	;call to abstracted procedure
  9679                           
  9680                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
  9681  0009B6  8EF2               	bsf	intcon,7,c	;volatile
  9682  0009B8  0C00               	retlw	0
  9683  0009BA                     i2l3277:
  9684  0009BA  2A3C               	incf	i2RTOS_SetTask@i,f,c
  9685  0009BC                     i2l3279:
  9686  0009BC  500C               	movf	_arrayTail,w,c	;volatile
  9687  0009BE  5C3C               	subwf	i2RTOS_SetTask@i,w,c
  9688  0009C0  E3E8               	bnc	i2l3267
  9689                           
  9690                           ;dispatcher.c: 39: }
  9691                           ;dispatcher.c: 40: }
  9692                           ;dispatcher.c: 42: if (arrayTail < 15)
  9693  0009C2  0E0F               	movlw	15
  9694  0009C4  600C               	cpfslt	_arrayTail,c	;volatile
  9695  0009C6  0C0F               	retlw	15
  9696                           
  9697                           ;dispatcher.c: 43: {
  9698                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
  9699  0009C8  9EF2               	bcf	intcon,7,c	;volatile
  9700                           
  9701                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
  9702  0009CA  500C               	movf	_arrayTail,w,c
  9703  0009CC  D816               	call	PL20	;call to abstracted procedure
  9704  0009CE  C034  FFDE         	movff	i2RTOS_SetTask@taskFunc,postinc2	;volatile
  9705  0009D2  C035  FFDD         	movff	i2RTOS_SetTask@taskFunc+1,postdec2	;volatile
  9706                           
  9707                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
  9708  0009D6  500C               	movf	_arrayTail,w,c
  9709  0009D8  EC51  F004         	call	PL18	;call to abstracted procedure
  9710  0009DC  D81F               	call	PL60	;call to abstracted procedure
  9711                           
  9712                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
  9713  0009DE  500C               	movf	_arrayTail,w,c
  9714  0009E0  D812               	call	PL26	;call to abstracted procedure
  9715  0009E2  D817               	call	PL46	;call to abstracted procedure
  9716                           
  9717                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
  9718  0009E4  500C               	movf	_arrayTail,w,c
  9719  0009E6  D801               	call	PL16	;call to abstracted procedure
  9720                           
  9721                           ;dispatcher.c: 51: arrayTail++;
  9722                           
  9723                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
  9724  0009E8  D01E               	goto	PL106	;call to abstracted procedure
  9725  0009EA                     __end_ofi2_RTOS_SetTask:
  9726                           	opt stack 0
  9727  0009EA                     PL16:
  9728                           	opt stack 27
  9729  0009EA  0D08               	mullw	8
  9730  0009EC  50F3               	movf	prodl,w,c
  9731  0009EE  0F86               	addlw	low (_TaskArray+6)
  9732  0009F0  6ED9               	movwf	fsr2l,c
  9733  0009F2  6ADA               	clrf	fsr2h,c
  9734  0009F4  6ADE               	clrf	postinc2,c
  9735  0009F6  6ADD               	clrf	postdec2,c
  9736  0009F8  0012               	return	
  9737  0009FA                     __end_ofPL16:
  9738                           	opt stack 0
  9739  0009FA                     PL20:
  9740                           	opt stack 27
  9741  0009FA  0D08               	mullw	8
  9742  0009FC  50F3               	movf	prodl,w,c
  9743  0009FE  0F80               	addlw	low _TaskArray
  9744  000A00  6ED9               	movwf	fsr2l,c
  9745  000A02  6ADA               	clrf	fsr2h,c
  9746  000A04  0012               	return	
  9747  000A06                     __end_ofPL20:
  9748                           	opt stack 0
  9749  000A06                     PL26:
  9750                           	opt stack 27
  9751  000A06  0D08               	mullw	8
  9752  000A08  50F3               	movf	prodl,w,c
  9753  000A0A  0F84               	addlw	low (_TaskArray+4)
  9754  000A0C  6ED9               	movwf	fsr2l,c
  9755  000A0E  6ADA               	clrf	fsr2h,c
  9756  000A10  0012               	return	
  9757  000A12                     __end_ofPL26:
  9758                           	opt stack 0
  9759  000A12                     PL46:
  9760                           	opt stack 22
  9761  000A12  C038  FFDE         	movff	i2RTOS_SetTask@taskPeriod,postinc2
  9762  000A16  C039  FFDD         	movff	i2RTOS_SetTask@taskPeriod+1,postdec2
  9763  000A1A  0012               	return	
  9764  000A1C                     __end_ofPL46:
  9765                           	opt stack 0
  9766  000A1C                     PL60:
  9767                           	opt stack 22
  9768  000A1C  C036  FFDE         	movff	i2RTOS_SetTask@taskDelay,postinc2
  9769  000A20  C037  FFDD         	movff	i2RTOS_SetTask@taskDelay+1,postdec2
  9770  000A24  0012               	return	
  9771  000A26                     __end_ofPL60:
  9772                           	opt stack 0
  9773  000A26                     PL106:
  9774                           	opt stack 27
  9775  000A26  2A0C               	incf	_arrayTail,f,c	;volatile
  9776  000A28  8EF2               	bsf	intcon,7,c	;volatile
  9777  000A2A  0C00               	retlw	0	;funcret
  9778  000A2C                     __end_ofPL106:
  9779                           	opt stack 0
  9780                           tosu	equ	0xFFF
  9781                           tosh	equ	0xFFE
  9782                           tosl	equ	0xFFD
  9783                           pclath	equ	0xFFA
  9784                           tblptru	equ	0xFF8
  9785                           tblptrh	equ	0xFF7
  9786                           tblptrl	equ	0xFF6
  9787                           tablat	equ	0xFF5
  9788                           prodh	equ	0xFF4
  9789                           prodl	equ	0xFF3
  9790                           intcon	equ	0xFF2
  9791                           intcon2	equ	0xFF1
  9792                           postinc0	equ	0xFEE
  9793                           wreg	equ	0xFE8
  9794                           indf1	equ	0xFE7
  9795                           plusw1	equ	0xFE3
  9796                           fsr1h	equ	0xFE2
  9797                           fsr1l	equ	0xFE1
  9798                           indf2	equ	0xFDF
  9799                           postinc2	equ	0xFDE
  9800                           postdec2	equ	0xFDD
  9801                           plusw2	equ	0xFDB
  9802                           fsr2h	equ	0xFDA
  9803                           fsr2l	equ	0xFD9
  9804                           status	equ	0xFD8
  9805                           tosu	equ	0xFFF
  9806                           tosh	equ	0xFFE
  9807                           tosl	equ	0xFFD
  9808                           pclath	equ	0xFFA
  9809                           tblptru	equ	0xFF8
  9810                           tblptrh	equ	0xFF7
  9811                           tblptrl	equ	0xFF6
  9812                           tablat	equ	0xFF5
  9813                           prodh	equ	0xFF4
  9814                           prodl	equ	0xFF3
  9815                           intcon	equ	0xFF2
  9816                           intcon2	equ	0xFF1
  9817                           postinc0	equ	0xFEE
  9818                           wreg	equ	0xFE8
  9819                           indf1	equ	0xFE7
  9820                           plusw1	equ	0xFE3
  9821                           fsr1h	equ	0xFE2
  9822                           fsr1l	equ	0xFE1
  9823                           indf2	equ	0xFDF
  9824                           postinc2	equ	0xFDE
  9825                           postdec2	equ	0xFDD
  9826                           plusw2	equ	0xFDB
  9827                           fsr2h	equ	0xFDA
  9828                           fsr2l	equ	0xFD9
  9829                           status	equ	0xFD8
  9830                           
  9831                           	psect	text56
  9832  000000                     __ptext56:
  9833                           	opt stack 0
  9834                           tosu	equ	0xFFF
  9835                           tosh	equ	0xFFE
  9836                           tosl	equ	0xFFD
  9837                           pclath	equ	0xFFA
  9838                           tblptru	equ	0xFF8
  9839                           tblptrh	equ	0xFF7
  9840                           tblptrl	equ	0xFF6
  9841                           tablat	equ	0xFF5
  9842                           prodh	equ	0xFF4
  9843                           prodl	equ	0xFF3
  9844                           intcon	equ	0xFF2
  9845                           intcon2	equ	0xFF1
  9846                           postinc0	equ	0xFEE
  9847                           wreg	equ	0xFE8
  9848                           indf1	equ	0xFE7
  9849                           plusw1	equ	0xFE3
  9850                           fsr1h	equ	0xFE2
  9851                           fsr1l	equ	0xFE1
  9852                           indf2	equ	0xFDF
  9853                           postinc2	equ	0xFDE
  9854                           postdec2	equ	0xFDD
  9855                           plusw2	equ	0xFDB
  9856                           fsr2h	equ	0xFDA
  9857                           fsr2l	equ	0xFD9
  9858                           status	equ	0xFD8
  9859                           
  9860                           	psect	rparam
  9861  0000                     tosu	equ	0xFFF
  9862                           tosh	equ	0xFFE
  9863                           tosl	equ	0xFFD
  9864                           pclath	equ	0xFFA
  9865                           tblptru	equ	0xFF8
  9866                           tblptrh	equ	0xFF7
  9867                           tblptrl	equ	0xFF6
  9868                           tablat	equ	0xFF5
  9869                           prodh	equ	0xFF4
  9870                           prodl	equ	0xFF3
  9871                           intcon	equ	0xFF2
  9872                           intcon2	equ	0xFF1
  9873                           postinc0	equ	0xFEE
  9874                           wreg	equ	0xFE8
  9875                           indf1	equ	0xFE7
  9876                           plusw1	equ	0xFE3
  9877                           fsr1h	equ	0xFE2
  9878                           fsr1l	equ	0xFE1
  9879                           indf2	equ	0xFDF
  9880                           postinc2	equ	0xFDE
  9881                           postdec2	equ	0xFDD
  9882                           plusw2	equ	0xFDB
  9883                           fsr2h	equ	0xFDA
  9884                           fsr2l	equ	0xFD9
  9885                           status	equ	0xFD8
  9886                           
  9887                           	psect	temp
  9888  00005E                     btemp:
  9889                           	opt stack 0
  9890  00005E                     	ds	1
  9891  0000                     int$flags	set	btemp
  9892                           tosu	equ	0xFFF
  9893                           tosh	equ	0xFFE
  9894                           tosl	equ	0xFFD
  9895                           pclath	equ	0xFFA
  9896                           tblptru	equ	0xFF8
  9897                           tblptrh	equ	0xFF7
  9898                           tblptrl	equ	0xFF6
  9899                           tablat	equ	0xFF5
  9900                           prodh	equ	0xFF4
  9901                           prodl	equ	0xFF3
  9902                           intcon	equ	0xFF2
  9903                           intcon2	equ	0xFF1
  9904                           postinc0	equ	0xFEE
  9905                           wreg	equ	0xFE8
  9906                           indf1	equ	0xFE7
  9907                           plusw1	equ	0xFE3
  9908                           fsr1h	equ	0xFE2
  9909                           fsr1l	equ	0xFE1
  9910                           indf2	equ	0xFDF
  9911                           postinc2	equ	0xFDE
  9912                           postdec2	equ	0xFDD
  9913                           plusw2	equ	0xFDB
  9914                           fsr2h	equ	0xFDA
  9915                           fsr2l	equ	0xFD9
  9916                           status	equ	0xFD8
  9917                           tosu	equ	0xFFF
  9918                           tosh	equ	0xFFE
  9919                           tosl	equ	0xFFD
  9920                           pclath	equ	0xFFA
  9921                           tblptru	equ	0xFF8
  9922                           tblptrh	equ	0xFF7
  9923                           tblptrl	equ	0xFF6
  9924                           tablat	equ	0xFF5
  9925                           prodh	equ	0xFF4
  9926                           prodl	equ	0xFF3
  9927                           intcon	equ	0xFF2
  9928                           intcon2	equ	0xFF1
  9929                           postinc0	equ	0xFEE
  9930                           wreg	equ	0xFE8
  9931                           indf1	equ	0xFE7
  9932                           plusw1	equ	0xFE3
  9933                           fsr1h	equ	0xFE2
  9934                           fsr1l	equ	0xFE1
  9935                           indf2	equ	0xFDF
  9936                           postinc2	equ	0xFDE
  9937                           postdec2	equ	0xFDD
  9938                           plusw2	equ	0xFDB
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    1341
    Data        1
    BSS         271
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     40      93
    BANK0           128      0     120
    BANK1           256      0     100
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 100
		 -> text_buf(BANK1[100]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    getDate@p4	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getDate@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    getTime@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(COMRAM[7]), 

    Update_Matrix@buf	PTR unsigned char  size(1) Largest target is 32
		 -> Dis_Buff(COMRAM[32]), 

    RTOS_DispatchTask@function	PTR FTN()void  size(2) Largest target is 1
		 -> time_set_dy(), time_set_dt(), time_set_mt(), time_set_yr(), 
		 -> default_state(), time_set_hr(), time_set_min(), GetTime(), 
		 -> key_press(), time_led(), 

    RTOS_DeleteTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> time_set_dy(), time_set_dt(), time_set_mt(), time_set_yr(), 
		 -> default_state(), time_set_hr(), time_set_min(), GetTime(), 
		 -> key_press(), time_led(), 

    S416task$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> time_set_dy(), time_set_dt(), time_set_mt(), time_set_yr(), 
		 -> default_state(), time_set_hr(), time_set_min(), GetTime(), 
		 -> key_press(), time_led(), 

    TaskArray.pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> time_set_dy(), time_set_dt(), time_set_mt(), time_set_yr(), 
		 -> default_state(), time_set_hr(), time_set_min(), GetTime(), 
		 -> key_press(), time_led(), 

    RTOS_SetTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> time_set_dy(), time_set_dt(), time_set_mt(), time_set_yr(), 
		 -> default_state(), time_set_hr(), time_set_min(), GetTime(), 
		 -> key_press(), time_led(), 


Critical Paths under _main in COMRAM

    _main->_RTOS_DispatchTask
    _version->_Update_Matrix
    _Init7221->_Cmd7221
    _Cmd7221->_Send_Byte_7221
    _DS3231_init->_DS3231_Write
    _time_set_yr->_setDate
    _time_set_mt->_setDate
    _time_set_min->_putchar_b_buf
    _time_set_hr->_setTime
    _setTime->_DS3231_Write
    _time_set_dy->_setDate
    _time_set_dt->_setDate
    _setDate->_DS3231_Write
    _decimal_to_bcd->___lbmod
    _DS3231_Write->_decimal_to_bcd
    _putchar_b_buf->___lbmod
    _time_led->_pic_to_led
    _pic_to_led->_pixel_off
    _Update_Matrix->_Send_Byte_7221
    _FillBuf->___lbmod
    ___lbmod->___lbdiv
    _GetTime->_getDate
    _getTime->_DS3231_Read
    _getDate->_DS3231_Read
    _DS3231_Read->_I2C_restart
    _DS3231_Read->_I2C_start
    _I2C_write->_I2C_idle
    _I2C_stop->_I2C_idle
    _I2C_start->_I2C_idle
    _I2C_restart->_I2C_idle
    _I2C_read_noack->_I2C_idle

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INT0_ISR->i2_RTOS_SetTask

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  137653
                                             39 COMRAM     1     1      0
                  _RTOS_DispatchTask
                       _RTOS_SetTask
                  _SYSTEM_Initialize
                       _clear_matrix
                            _version
 ---------------------------------------------------------------------------------
 (1) _version                                              2     2      0    1240
                                             20 COMRAM     2     2      0
                      _Update_Matrix
                        _scroll_text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             19    15      4     218
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _scroll_text                                          3     3      0      90
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1295
                        _DS3231_init
                           _I2C_Init
                           _Init7221
                     _Interrupt_Init
                          _Port_Init
                          _RTOS_Init
                           _TMR1Init
 ---------------------------------------------------------------------------------
 (2) _TMR1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTOS_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init7221                                             0     0      0     479
                            _Cmd7221
 ---------------------------------------------------------------------------------
 (3) _Cmd7221                                              3     2      1     479
                                             16 COMRAM     3     2      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DS3231_init                                          0     0      0     816
                       _DS3231_Write
 ---------------------------------------------------------------------------------
 (1) _RTOS_DispatchTask                                    8     8      0  128334
                                             31 COMRAM     8     8      0
                            _GetTime *
                    _RTOS_DeleteTask
                      _default_state *
                          _key_press *
                           _time_led *
                        _time_set_dt *
                        _time_set_dy *
                        _time_set_hr *
                       _time_set_min *
                        _time_set_mt *
                        _time_set_yr *
 ---------------------------------------------------------------------------------
 (2) _time_set_yr                                          0     0      0   20347
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_mt                                          0     0      0   18362
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_min                                         0     0      0   15878
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
 ---------------------------------------------------------------------------------
 (2) _time_set_hr                                          0     0      0   19113
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                       _clear_matrix
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (3) _setTime                                              3     1      2    3167
                                             27 COMRAM     3     1      2
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (2) _time_set_dy                                          0     0      0   18362
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_dt                                          0     0      0   20347
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (3) _setDate                                              4     1      3    4469
                                             27 COMRAM     4     1      3
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (4) _decimal_to_bcd                                       3     3      0    2029
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write                                         2     1      1     816
                                             25 COMRAM     2     1      1
                          _I2C_start
                           _I2C_stop
                          _I2C_write
                     _decimal_to_bcd (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_b_buf                                        7     6      1    4835
                                             22 COMRAM     7     6      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (2) _time_led                                             0     0      0   12405
                            _FillBuf
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                       _clear_matrix
                           _ow_reset
                         _pic_to_led
 ---------------------------------------------------------------------------------
 (3) _pic_to_led                                           7     6      1     931
                                             19 COMRAM     7     6      1
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (4) _pixel_on                                             4     3      1     223
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _pixel_off                                            5     4      1     223
                                             14 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (3) _ow_reset                                             2     2      0       7
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _clear_matrix                                         1     1      0      68
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Update_Matrix                                        4     3      1     886
                                             16 COMRAM     4     3      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (3) _Send_Byte_7221                                       2     2      0      69
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTOS_SetTask                                         9     3      6    6716
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _RTOS_DeleteTask                                      9     7      2    1456
                                             14 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _FillBuf                                              3     3      0    2341
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1    1247
                                             18 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1     738
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _key_press                                            1     1      0      49
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _default_state                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              0     0      0    1702
                            _getDate
                            _getTime
 ---------------------------------------------------------------------------------
 (3) _getTime                                              3     0      3     786
                                             19 COMRAM     3     0      3
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (3) _getDate                                              4     0      4     916
                                             19 COMRAM     4     0      4
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (4) _bcd_to_decimal                                       2     2      0      44
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _DS3231_Read                                          2     2      0     352
                                             17 COMRAM     2     2      0
                     _I2C_read_noack
                        _I2C_restart
                          _I2C_start
                           _I2C_stop
                          _I2C_write
 ---------------------------------------------------------------------------------
 (4) _I2C_write                                            1     1      0      22
                                             15 COMRAM     1     1      0
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_stop                                             0     0      0       0
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_start                                            2     1      1     174
                                             15 COMRAM     2     1      1
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_restart                                          2     1      1     110
                                             15 COMRAM     2     1      1
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_read_noack                                       0     0      0       0
                           _I2C_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_idle                                             1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           5     5      0     344
                                              9 COMRAM     5     5      0
                           _INT0_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0_ISR                                             0     0      0     344
                     i2_RTOS_SetTask
 ---------------------------------------------------------------------------------
 (9) i2_RTOS_SetTask                                       9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTOS_DispatchTask
     _GetTime *
       _getDate
         _DS3231_Read
           _I2C_read_noack
             _I2C_idle
           _I2C_restart
             _I2C_idle
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
         _bcd_to_decimal
       _getTime
         _DS3231_Read
           _I2C_read_noack
             _I2C_idle
           _I2C_restart
             _I2C_idle
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
         _bcd_to_decimal
     _RTOS_DeleteTask *
     _default_state *
     _key_press *
     _time_led *
       _FillBuf
         ___lbdiv
         ___lbmod
           ___lbdiv (ARG)
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _clear_matrix
       _ow_reset
       _pic_to_led
         _pixel_off
         _pixel_on
     _time_set_dt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_dy *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_hr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _clear_matrix
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_min *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
     _time_set_mt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_yr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_start
             _I2C_idle
           _I2C_stop
             _I2C_idle
           _I2C_write
             _I2C_idle
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
   _RTOS_SetTask
   _SYSTEM_Initialize
     _DS3231_init
       _DS3231_Write
         _I2C_start
           _I2C_idle
         _I2C_stop
           _I2C_idle
         _I2C_write
           _I2C_idle
         _decimal_to_bcd (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _I2C_Init
     _Init7221
       _Cmd7221
         _Send_Byte_7221
     _Interrupt_Init
     _Port_Init
     _RTOS_Init
     _TMR1Init
   _clear_matrix
   _version
     _Update_Matrix
       _Send_Byte_7221
     _scroll_text
     _sprintf

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     i2_RTOS_SetTask
   _TMR0_ISR
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      64       7       39.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      78       5       93.8%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     28      5D       1       73.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     139      34        0.0%
DATA                 0      0     139       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Feb 21 16:58:59 2017

                   ??_Interrupt_Init 0042                                   PL2 059A  
                                 PL4 0666                                   PL6 0694  
                                 PL8 05B0                          __CFG_BORV$3 000000  
                    ??_Update_Matrix 0045                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                       _decimal_to_bcd 1172  
                 __size_of_I2C_start 002A                         __CFG_CP2$OFF 000000  
                  ??_RTOS_DeleteTask 0044                   __size_of_I2C_write 001C  
                                PL10 0350                                  PL20 09FA  
                                PL12 01C8                                  PL30 0364  
                                PL22 08AE                                  PL14 06BA  
                                PL40 01D4                                  PL32 0C2A  
                                PL24 06C4                                  PL16 09EA  
                                PL50 07C2                                  PL42 036E  
                                PL34 0972                                  PL26 0A06  
                                PL18 08A2                                  PL60 0A1C  
                                PL52 0E34                                  PL44 097C  
                                PL36 048E                                  PL28 06D4  
                                PL70 1066                                  PL62 0BA0  
                                PL54 0E3E                                  PL46 0A12  
                                PL38 0B98                                  PL80 0B32  
                                PL72 05CE                                  PL64 0BAA  
                                PL56 0B28                                  PL48 049C  
                                PL90 01FC                                  PL82 05D4  
                                PL74 0374                                  PL66 01E0  
                                PL58 01DA                                  PL92 07CC  
                                PL84 01EA                                  PL76 0BB4  
                                PL68 05C4                                  PL94 04B0  
                                PL86 01F0                                  PL78 04A6  
                                PL96 07D2                                  PL88 01F6  
                                PL98 04B6                                  l212 0ABE  
                                l301 1212                                  l302 1214  
                                l311 0F62                                  l136 12C8  
                                l153 10F2                                  l163 111C  
                                l171 1296                                  l229 080C  
                                l353 0D86                                  l425 0BF4  
                                l362 0D1C                                  l179 1376  
                                l606 0770                                  l299 120A  
                                l731 0EFE                                  l619 00A0  
                                l733 0F1C                                  l725 0EE4  
                                l646 0548                                  l727 0EEC  
                                l591 041E                                  l729 0EF4  
                                l577 092C                                  l659 0288  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _R_W 007E3A                                  tosl 000FFD  
                                wreg 000FE8                                 PL100 0202  
                               PL102 04BE                                 PL104 037E  
                               PL106 0A26                         __CFG_LVP$OFF 000000  
                      I2C_start@_R_W 0043                         __CFG_WDT$OFF 000000  
                               l3021 005E                                 l3101 050E  
                               l3015 0052                                 l3201 0A2E  
                               l3033 007A                                 l3009 0036  
                               l3041 008C                                 l3113 0526  
                               l3121 0534                                 l3203 0A34  
                               l3051 00F2                                 l3027 0070  
                               l3107 051C                                 l3131 020A  
                               l2421 1352                                 l3221 0A96  
                               l3213 0A72                                 l3061 0144  
                               l3053 0108                                 l3045 00BE  
                               l3125 058E                                 l3141 0222  
                               l2511 1032                                 l2503 101E  
                               l3063 0152                                 l3055 011A  
                               l3047 00D0                                 l3071 018A  
                               l3231 1040                                 l2433 10E2  
                               l2505 1022                                 l2601 0AF2  
                               l3225 0A9C                                 l3065 0166  
                               l3057 0128                                 l3049 00E0  
                               l3073 01BC                                 l3153 0246  
                               l3313 0F40                                 l3305 0F36  
                               l2435 10E4                                 l2515 103A  
                               l2531 11B6                                 l2523 11A0  
                               l3227 0AAE                                 l3067 0178  
                               l3059 0136                                 l3147 023A  
                               l3323 07E2                                 l3331 0806  
                               l3235 104A                                 l2453 110C  
                               l3253 0F00                                 l3181 02CC  
                               l3165 0262                                 l3173 0274  
                               l3333 0810                                 l3317 0F56  
                               l2455 110E                                 l2623 0C98  
                               l2615 0C3E                                 l2631 0CA0  
                               l2711 0D1E                                 l3095 0502  
                               l3079 04C6                                 l3183 02DE  
                               l3159 0258                                 l3343 0880  
                               l3327 07FA                                 l3089 04E6  
                               l3185 02EE                                 l3177 02AA  
                               l3193 0326                                 l3345 0898  
                               l3329 0804                                 l2715 0D58  
                               l3187 02FC                                 l3179 02BC  
                               l3195 0344                                 l3339 084A  
                               l3347 089A                                 l2629 0C9E  
                               l2717 0D64                                 l2901 03BA  
                               l3189 0310                                 l2735 05DE  
                               l2655 0F66                                 l2639 1230  
                               l2807 0BC0                                 l3367 0E90  
                               l2745 0628                                 l2681 0D88  
                               l2913 03E0                                 l2841 08C4  
                               l2499 1018                                 l2579 12D0  
                               l2907 03D6                                 l2589 0AC2  
                               l2685 0DC2                                 l2941 0482  
                               l2925 03FA                                 l2933 040A  
                               l2845 08DA                                 l2829 0BFC  
                               l2599 0AF0                                 l2687 0DCE  
                               l2919 03F0                                 l2855 0900  
                               l2847 08E2                                 l2881 0956  
                               l2865 090C                                 l2849 08E8  
                               l2963 0724                                 l2947 06E2  
                               l2939 0472                                 l2883 0966  
                               l2981 074A                                 l2957 0708  
                               l2877 0918                                 l2975 0740  
                               l2993 07B6                                 l2969 072E  
                               l2889 0390                                 l2989 075C  
                               l2999 0014                                 STR_1 BFE8  
                               u1230 0C76                                 u1241 0C90  
                               u1154 11F4                                 u1410 08C0  
                               u1155 11F0                                 u1164 1134  
                               u1165 1130                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                       _DS3231_Write 129C                                 u1460 038C  
                               u1641 0A64                                 u1858 0884  
                               u1947 0E4E                                 u1957 0F46  
                               u1967 0FE0                                 u1977 0FF0  
                               u1987 0FFE                                 _RCEN 007E2B  
                               _TMR0 000FD6                                 _RSEN 007E29  
                       _RTOS_SetTask 0AB6                         __CFG_PWRT$ON 000000  
                               _Font BAC7                      __end_of_Cmd7221 1248  
                    I2C_restart@_R_W 0043                                 _main 0E48  
                   __end_of_I2C_Init 12CE                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 005E  
                   __end_of_I2C_idle 1362                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
            __size_ofi2_RTOS_SetTask 0064                     __end_of_I2C_stop 137C  
                      __CFG_IESO$OFF 000000                      __end_of_FillBuf 0666  
                    __end_of_GetTime 11E2                     ??_I2C_read_noack 0043  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
               __size_of_I2C_restart 002A               __end_of_decimal_to_bcd 1198  
               RTOS_SetTask@taskFunc 0042                        I2C_write@data 0043  
                      _putchar_b_buf 0D14                     __end_of_INT0_ISR 130E  
                              ?_main 0034                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___lbdiv 103E  
                    __end_of___lbmod 11BE                __end_of_default_state 1388  
                              _T0CON 000FD5                                _T1CON 000FCD  
                              i2l212 098E                                i2l282 0D00  
                              i2l278 0CC6                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _PORTB 000F81  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _SSPIF 007CF3  
                      __CFG_WRT0$OFF 000000                      __end_of_getDate 0B98  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
               __end_of_clear_matrix 12E4                                _TTime 002D  
                              _FontS BFC7                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                      __end_of_getTime 0E34  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                   __end_of_TMR0_ISR 1370                     __end_of_TMR1_ISR 138A  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                   __end_of_TMR1Init 1342                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        pic_to_led@pic 0047  
                    __end_of_setDate 0FD6                     I2C_restart@adres 0044  
                    __end_of_setTime 10CE                       __pbitbssCOMRAM 02E0  
                              pclath 000FFA                                tablat 000FF5  
                              plusw1 000FE3                                plusw2 000FDB  
                    __end_of_version 0F60                                status 000FD8  
                  __end_of_I2C_start 10F8                      __end_of_sprintf 1066  
                  __end_of_I2C_write 129C                      ___lbdiv@divisor 0042  
                       __end_ofPL100 0208                         __end_ofPL102 04C4  
                       __end_ofPL104 0384                         __end_ofPL106 0A2C  
                 __size_of_RTOS_Init 0010                      ___lbdiv@counter 0044  
                    __initialization 0E96                         __end_of_Font BFC7  
                   __end_of_Init7221 10A0                         __end_of_main 0E96  
                     ?_putchar_b_buf 004A                      ?_decimal_to_bcd 0034  
        ?_INTERRUPT_InterruptManager 0034                       __CFG_OSC$HSPLL 000000  
              RTOS_SetTask@taskDelay 0044                      decimal_to_bcd@d 004C  
                             ??_main 005B                        __activetblptr 000002  
                   ??_Send_Byte_7221 0042                            ??_Cmd7221 0045  
                    I2C_start@adress 0044                               i2l3267 0992  
                             i2l3277 09BA                               i2l3279 09BC  
                             i2l3383 0CEC                            ??_FillBuf 004A  
                          ??_GetTime 004B                               _SSPADD 000FC8  
                             _SSPBUF 000FC9                        setDate@daySet 0052  
                  DS3231_Write@value 004D                               _TSTime 0001  
                     __CFG_XINST$OFF 000000                      Send_Byte_7221@i 0043  
                  _RTOS_DispatchTask 07D8                            ??___lbdiv 0043  
                     __CFG_STVREN$ON 000000                            ??___lbmod 0047  
                             _i_char 000A                     RTOS_DeleteTask@i 004A  
                       ?_scroll_text 0034                               _en_put 02E0  
                             _pic7x8 BAAB                       pic_to_led@mask 004A  
                 ?_RTOS_DispatchTask 0034                               _events 005D  
                             clear_0 0EAE                               clear_1 0EBA  
                             clear_2 0EC8                            ??_getDate 004B  
                          ??_getTime 004A                         ?_time_set_dt 0034  
                       ?_time_set_dy 0034                         ?_time_set_hr 0034  
                  __end_of_RTOS_Init 1352                         ?_time_set_mt 0034  
                       ?_time_set_yr 0034                         __pdataCOMRAM 005D  
                          ?_I2C_Init 0034                   __size_of_Port_Init 001C  
                   __end_of_pixel_on 1206                  ??_RTOS_DispatchTask 0053  
                          ??_setDate 0052                     __end_of_time_led 0AB6  
                          ?_I2C_idle 0034                         __mediumconst BAAA  
                   __end_of_ow_reset 100A                            ??_setTime 0051  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                            ?_I2C_stop 0034  
                          ??_version 0048                            ??_sprintf 0046  
                   ___lbdiv@dividend 0043                    _SYSTEM_Initialize 1248  
                    ___lbmod@divisor 0046                           __accesstop 0080  
            __end_of__initialization 0ECE                      ___lbmod@counter 0048  
                          ?_INT0_ISR 0034                      __CFG_PBADEN$OFF 000000  
                 ?_SYSTEM_Initialize 0034                       i2_RTOS_SetTask 0986  
                      ___rparam_used 000001                      _RTOS_DeleteTask 0C3A  
          __end_of_RTOS_DispatchTask 08A2                        __end_of_FontS BFE8  
                    ??_putchar_b_buf 004B                       __pcstackCOMRAM 0034  
                ??_SYSTEM_Initialize 004F                            ?_TMR0_ISR 0034  
                          ?_TMR1_ISR 0034                            ?_TMR1Init 0034  
                        pic_to_led@i 004D                          pic_to_led@j 004C  
                        pic_to_led@x 004B                           __end_ofPL2 05B0  
                         __end_ofPL4 0694                           __end_ofPL6 06BA  
                         __end_ofPL8 05C4                     ___lbdiv@quotient 0045  
              __size_of_clear_matrix 0016                           ??_I2C_Init 0042  
                         ??_I2C_idle 0042                           ??_I2C_stop 0043  
                          ?_Init7221 0034            __end_of_SYSTEM_Initialize 1264  
             RTOS_SetTask@taskPeriod 0046                           __pbssBANK0 0080  
                         __pbssBANK1 0100               __end_ofi2_RTOS_SetTask 09EA  
                      ??_DS3231_Read 0045                           ??_INT0_ISR 003D  
                      ??_DS3231_init 004F                   __size_of_key_press 0044  
                  __end_of_Port_Init 1280                         _clear_matrix 12CE  
                    bcd_to_decimal@d 0043                           ??_TMR0_ISR 0034  
                         ??_TMR1_ISR 0034                           ??_TMR1Init 0042  
                    _Timer0Interrupt 000B              i2RTOS_SetTask@taskDelay 0036  
                            _ACKSTAT 007E2E                   __size_of_pixel_off 0028  
              __end_of_Update_Matrix 0F9C                              _INTCON2 000FF1  
            __size_of_bcd_to_decimal 0016                              _Cmd7221 122A  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                         ??_Init7221 0047                          setTime@hSet 0051  
                        setTime@mSet 004F                              _SSPSTAT 000FC7  
                        setTime@sSet 0050              __end_of_RTOS_DeleteTask 0CA8  
                     setDate@dateSet 004F                      ?i2_RTOS_SetTask 0034  
                            _FillBuf 05DC                              _GetTime 11BE  
                      ??_I2C_restart 0044                     Update_Matrix@buf 0044  
                   ??_decimal_to_bcd 004A                              __Hparam 0000  
         __size_of_RTOS_DispatchTask 00CA                              __Lparam 0000  
                          _I2C_start 10CE                            _I2C_write 1280  
                          ?_pixel_on 0042                       setDate@yearSet 0051  
                          ?_time_led 0034                  __end_of_DS3231_Read 1172  
                          ?_ow_reset 0034                  __end_of_DS3231_init 1320  
                            ___lbdiv 100A                              ___lbmod 1198  
                            _i_bchar 0009                              __pcinit 0E96  
                            _getDate 0B3C                              __ramtop 1000  
                            __ptext0 0E48                              __ptext1 0F20  
                            __ptext2 103E                              __ptext3 0BBE  
                            _getTime 0DE8                              __ptext4 1248  
                            __ptext5 1332                              __ptext6 1342  
                            __ptext7 1264                              __ptext8 137C  
                            __ptext9 1070                 __size_of_scroll_text 006C  
            __size_of_Interrupt_Init 0006                           _pic_to_led 0D7E  
                  __end_of_key_press 0F20                              _setDate 0F9C  
                            _setTime 10A0                 __size_of_time_set_dt 00D6  
               __size_of_time_set_dy 0148                 __size_of_time_set_hr 010A  
                putchar_b_buf@symbol 004A                 __size_of_time_set_mt 01B6  
               __size_of_time_set_yr 00E2                              _version 0F20  
         __size_of_SYSTEM_Initialize 001C                              _sprintf 103E  
                     __pintcode_body 0CA8                 end_of_initialization 0ECE  
                      ?_time_set_min 0034                         key_press@key 0042  
                      __Lmediumconst BAAA                              int_func 0CA8  
                  __end_of_pixel_off 114A                     DS3231_Read@value 0046  
             __size_of_default_state 0006                   RTOS_DispatchTask@i 005A  
                 RTOS_DispatchTask@j 0059                        RTOS_SetTask@i 004A  
                         ?_I2C_start 0043                           ?_I2C_write 0034  
                         ??_pixel_on 0043                           ??_time_led 004E  
                         ??_ow_reset 0042                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
                __end_of_I2C_restart 1122                            _PORTCbits 000F82  
                         _show_digit 02E1              __size_of_I2C_read_noack 0012  
                   ___lbmod@dividend 0047                            _TRISCbits 000F94  
                  __size_of_I2C_Init 0018                            _RTOS_Init 1342  
                  __size_of_I2C_idle 0010                    __size_of_I2C_stop 000C  
                   ?_RTOS_DeleteTask 0042                       ??_time_set_min 0051  
                        ___lbmod@rem 0049                          _DS3231_Read 114A  
                        _DS3231_init 130E                    __size_of_INT0_ISR 0014  
                      __pidataCOMRAM 138A                    __size_of_TMR0_ISR 000E  
                  __size_of_TMR1_ISR 0002                       __end_of_pic7x8 BAC7  
                  __size_of_TMR1Init 0010                        _default_state 1382  
                        ?_pic_to_led 0047                          __end_ofPL10 0364  
                        __end_ofPL20 0A06                          __end_ofPL12 01D4  
                        __end_ofPL30 036E                          __end_ofPL22 08B8  
                        __end_ofPL14 06C4                          __end_ofPL40 01DA  
                        __end_ofPL32 0C3A                          __end_ofPL24 06D4  
                        __end_ofPL16 09FA                          __end_ofPL50 07CC  
                        __end_ofPL42 0374                          __end_ofPL34 097C  
                        __end_ofPL26 0A12                          __end_ofPL18 08AE  
                        __end_ofPL60 0A26                          __end_ofPL52 0E3E  
                        __end_ofPL44 0986                          __end_ofPL36 049C  
                        __end_ofPL28 06E0                          __end_ofPL70 1070  
                        __end_ofPL62 0BAA                          __end_ofPL54 0E48  
                        __end_ofPL46 0A1C                          __end_ofPL38 0BA0  
                        __end_ofPL80 0B3C                          __end_ofPL72 05D4  
                        __end_ofPL64 0BB4                          __end_ofPL56 0B32  
                        __end_ofPL48 04A6                          __end_ofPL90 0202  
                        __end_ofPL82 05DC                          __end_ofPL74 037E  
                        __end_ofPL66 01EA                          __end_ofPL58 01E0  
                        __end_ofPL92 07D2                          __end_ofPL84 01F0  
                        __end_ofPL76 0BBE                          __end_ofPL68 05CE  
                        __end_ofPL94 04B6                          __end_ofPL86 01F6  
                        __end_ofPL78 04B0                          __end_ofPL96 07D8  
                        __end_ofPL88 01FC                          __end_ofPL98 04BE  
                start_initialization 0E96                       _bcd_to_decimal 12E4  
                         ?_RTOS_Init 0034                        ?_DS3231_Write 004D  
                      ?_RTOS_SetTask 0042                    __size_of_Init7221 0030  
            __size_of_Send_Byte_7221 0024                            _TaskArray 0080  
                        _I2C_restart 10F8                          ??_I2C_start 0044  
                      clear_matrix@i 0042                          ??_I2C_write 0043  
                          _Port_Init 1264                __end_of_putchar_b_buf 0D7E  
                   __CFG_LPT1OSC$OFF 000000                       ?_default_state 0034  
             __end_of_bcd_to_decimal 12FA                       _Interrupt_Init 137C  
                        __pbssCOMRAM 0001                     ??i2_RTOS_SetTask 003A  
          RTOS_DispatchTask@function 0057                             ?_Cmd7221 0044  
                     ??_DS3231_Write 004E                       ??_RTOS_SetTask 0048  
                           ?_FillBuf 0034                             ?_GetTime 0034  
                __size_of_pic_to_led 006A                    __CFG_CCP2MX$PORTC 000000  
                          __pintcode 0008                        __pmediumconst BAAA  
                           ?___lbdiv 0042               i2RTOS_SetTask@taskFunc 0034  
                           ?___lbmod 0046                           ?_Port_Init 0034  
                  __size_of_pixel_on 0024                             Cmd7221@i 0046  
                  __size_of_time_led 008A                    __size_of_ow_reset 0034  
             __end_of_Interrupt_Init 1382                             ?_getDate 0047  
       ??_INTERRUPT_InterruptManager 003D                            _arrayTail 000C  
               __end_of_time_set_min 0972                             ?_getTime 0047  
                     _I2C_read_noack 1320                      ?_bcd_to_decimal 0034  
                           _I2C_Init 12B6                             ?_setDate 004F  
                           _I2C_idle 1352                             ?_setTime 004F  
           i2RTOS_SetTask@taskPeriod 0038                             _I2C_stop 1370  
                        ??_RTOS_Init 0042                             ?_version 0034  
                           ?_sprintf 0042                            _key_press 0EDC  
                         Cmd7221@adr 0045                           Cmd7221@val 0044  
                           _INT0_ISR 12FA                             _LATDbits 000F8C  
                          getDate@p1 004A                            getDate@p2 0049  
                          getDate@p3 0048                            getDate@p4 0047  
                           _PIE1bits 000F9D                           pixel_off@x 0046  
                         pixel_off@y 0042               __size_of_Update_Matrix 003C  
__size_of_INTERRUPT_InterruptManager 0D0C                             _PIR1bits 000F9E  
                           FillBuf@i 004C                            _pixel_off 1122  
                   __CFG_WDTPS$32768 000000                             _TMR0_ISR 1362  
                           _TMR1_ISR 1388                        ??_scroll_text 0042  
                           _TMR1Init 1332                            getTime@p1 0049  
                          getTime@p2 0048                            getTime@p3 0047  
                DS3231_Write@address 004E               __end_of_I2C_read_noack 1332  
                    ??_default_state 0042                      ?_Interrupt_Init 0034  
                      ??_time_set_dt 0053                        ??_time_set_dy 0053  
                      ??_time_set_hr 0052                        ??_time_set_mt 0053  
                      ??_time_set_yr 0053                             _Dis_Buff 000D  
                           _Init7221 1070                           ?_key_press 0034  
                        _INTCON2bits 000FF1                     __size_of_Cmd7221 001E  
                     _Send_Byte_7221 1206                         ?_DS3231_Read 0034  
                  Update_Matrix@data 0045                     __size_of_FillBuf 008A  
                   __size_of_GetTime 0024                         ?_DS3231_init 0034  
                           __Hrparam 0000                      setDate@monthSet 0050  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                         ?_pixel_off 0042                   DS3231_Read@address 0045  
                        ??_Port_Init 0042                    Send_Byte_7221@dat 0042  
                     key_press@count 0008                 __end_of_DS3231_Write 12B6  
                   __size_of___lbdiv 0034                     __size_of___lbmod 0026  
               __end_of_RTOS_SetTask 0B28                      ?_I2C_read_noack 0034  
            __size_of_decimal_to_bcd 0026                     __size_of_getDate 005C  
                   __size_of_getTime 004C                         ??_pic_to_led 0048  
                __end_of_scroll_text 0C2A                        _Update_Matrix 0F60  
                   __size_of_setDate 003A                     __size_of_setTime 002E  
                           __ptext10 122A                             __ptext11 12B6  
                           __ptext20 0384                             __ptext12 130E  
                           __ptext21 0EDC                             __ptext13 07D8  
                           __ptext30 11E2                             __ptext22 0A2C  
                           __ptext14 08B8                             __ptext31 1122  
                           __ptext23 06E0                             __ptext15 11BE  
                           __ptext40 100A                             __ptext32 0FD6  
                           __ptext24 10A0                             __ptext16 0208  
                           __ptext41 0DE8                             __ptext33 12CE  
                           __ptext25 0F9C                             __ptext17 04C4  
                           __ptext50 1352                             __ptext42 0B3C  
                           __ptext34 0F60                             __ptext26 1172  
                           __ptext18 0012                             __ptext43 12E4  
                           __ptext35 1206                             __ptext27 129C  
                           __ptext19 1382                             __ptext52 1388  
                           __ptext44 114A                             __ptext36 0AB6  
                           __ptext28 0D14                             __ptext53 1362  
                           __ptext45 1280                             __ptext37 0C3A  
                           __ptext29 0D7E                             __ptext54 12FA  
                           __ptext46 1370                             __ptext38 05DC  
                           __ptext55 0986                             __ptext47 10CE  
                           __ptext39 1198                             __ptext56 0000  
                           __ptext48 10F8                             __ptext49 1320  
             __end_of_Send_Byte_7221 122A                  __end_of_time_set_dt 059A  
                __end_of_time_set_dy 0350                  __end_of_time_set_hr 048E  
                __end_of_time_set_mt 01C8                  __end_of_time_set_yr 07C2  
                   __size_of_version 0040                     __size_of_sprintf 0028  
                     Update_Matrix@i 0047                       Update_Matrix@j 0046  
                      __size_of_main 004E                    putchar_b_buf@mask 004D  
                     putchar_b_buf@i 0050                       putchar_b_buf@j 004F  
                     putchar_b_buf@x 004E                         ?_I2C_restart 0043  
            RTOS_DeleteTask@taskFunc 0042                            pixel_on@x 0045  
                          pixel_on@y 0042                        ?_clear_matrix 0034  
           __size_of_RTOS_DeleteTask 006E                             _pixel_on 11E2  
                 __end_of_pic_to_led 0DE8                             _time_led 0A2C  
                           _ow_reset 0FD6                __size_of_time_set_min 00BA  
                           int$flags 005E                             _text_buf 0100  
 __end_of_INTERRUPT_InterruptManager 0D14           _INTERRUPT_InterruptManager 0008  
                    i2RTOS_SetTask@i 003C                       ?_Update_Matrix 0044  
                         _INTCONbits 000FF2                      ?_Send_Byte_7221 0034  
                        ??_key_press 0042                         scroll_text@i 0044  
                           intlevel2 0000                            sprintf@sp 0042  
                       _time_set_min 08B8                       ??_clear_matrix 0042  
                        ??_pixel_off 0043                     ??_bcd_to_decimal 0042  
                        _scroll_text 0BBE                             version@i 0049  
                           sprintf@c 0046                             sprintf@f 0044  
                        _time_set_dt 04C4                          _time_set_dy 0208  
                        _time_set_hr 0384                          _time_set_mt 0012  
                        _time_set_yr 06E0               __size_of_putchar_b_buf 006A  
              __size_of_DS3231_Write 001A                 __size_of_DS3231_Read 0028  
              __size_of_RTOS_SetTask 0072                 __size_of_DS3231_init 0012  
