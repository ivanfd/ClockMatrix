

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Tue Mar 07 15:12:05 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18F4525
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    93                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   101                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   102                           	psect	pa_nodes0,global,class=CODE,delta=1
   103  0000                     
   104                           ; Version 1.41
   105                           ; Generated 25/01/2017 GMT
   106                           ; 
   107                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   108                           ; All rights reserved.
   109                           ; 
   110                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   111                           ; 
   112                           ; Redistribution and use in source and binary forms, with or without modification, are
   113                           ; permitted provided that the following conditions are met:
   114                           ; 
   115                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   116                           ;        conditions and the following disclaimer.
   117                           ; 
   118                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   119                           ;        of conditions and the following disclaimer in the documentation and/or other
   120                           ;        materials provided with the distribution.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC18F4525 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138  0000                     tosu	equ	0xFFF
   139                           tosh	equ	0xFFE
   140                           tosl	equ	0xFFD
   141                           pclath	equ	0xFFA
   142                           tblptru	equ	0xFF8
   143                           tblptrh	equ	0xFF7
   144                           tblptrl	equ	0xFF6
   145                           tablat	equ	0xFF5
   146                           prodh	equ	0xFF4
   147                           prodl	equ	0xFF3
   148                           intcon	equ	0xFF2
   149                           intcon2	equ	0xFF1
   150                           wreg	equ	0xFE8
   151                           indf1	equ	0xFE7
   152                           plusw1	equ	0xFE3
   153                           fsr1h	equ	0xFE2
   154                           fsr1l	equ	0xFE1
   155                           indf2	equ	0xFDF
   156                           postinc2	equ	0xFDE
   157                           postdec2	equ	0xFDD
   158                           plusw2	equ	0xFDB
   159                           fsr2h	equ	0xFDA
   160                           fsr2l	equ	0xFD9
   161                           status	equ	0xFD8
   162                           
   163                           	psect	idataCOMRAM
   164  00285E                     __pidataCOMRAM:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _events
   168  00285E  05                 	db	5
   169                           tosu	equ	0xFFF
   170                           tosh	equ	0xFFE
   171                           tosl	equ	0xFFD
   172                           pclath	equ	0xFFA
   173                           tblptru	equ	0xFF8
   174                           tblptrh	equ	0xFF7
   175                           tblptrl	equ	0xFF6
   176                           tablat	equ	0xFF5
   177                           prodh	equ	0xFF4
   178                           prodl	equ	0xFF3
   179                           intcon	equ	0xFF2
   180                           intcon2	equ	0xFF1
   181                           wreg	equ	0xFE8
   182                           indf1	equ	0xFE7
   183                           plusw1	equ	0xFE3
   184                           fsr1h	equ	0xFE2
   185                           fsr1l	equ	0xFE1
   186                           indf2	equ	0xFDF
   187                           postinc2	equ	0xFDE
   188                           postdec2	equ	0xFDD
   189                           plusw2	equ	0xFDB
   190                           fsr2h	equ	0xFDA
   191                           fsr2l	equ	0xFD9
   192                           status	equ	0xFD8
   193                           
   194                           	psect	mediumconst
   195  00B974                     __pmediumconst:
   196                           	opt stack 0
   197  00B974  00                 	db	0
   198  00B975                     _dpowers:
   199                           	opt stack 0
   200  00B975  0001               	dw	1
   201  00B977  0000               	dw	0
   202  00B979  000A               	dw	10
   203  00B97B  0000               	dw	0
   204  00B97D  0064               	dw	100
   205  00B97F  0000               	dw	0
   206  00B981  03E8               	dw	1000
   207  00B983  0000               	dw	0
   208  00B985  2710               	dw	10000
   209  00B987  0000               	dw	0
   210  00B989  86A0               	dw	34464
   211  00B98B  0001               	dw	1
   212  00B98D  4240               	dw	16960
   213  00B98F  000F               	dw	15
   214  00B991  9680               	dw	38528
   215  00B993  0098               	dw	152
   216  00B995  E100               	dw	57600
   217  00B997  05F5               	dw	1525
   218  00B999  CA00               	dw	51712
   219  00B99B  3B9A               	dw	15258
   220  00B99D                     __end_of_dpowers:
   221                           	opt stack 0
   222  00B99D                     _pic7x8:
   223                           	opt stack 0
   224  00B99D  00                 	db	0
   225  00B99E  00                 	db	0
   226  00B99F  00                 	db	0
   227  00B9A0  00                 	db	0
   228  00B9A1  00                 	db	0
   229  00B9A2  00                 	db	0
   230  00B9A3  00                 	db	0
   231  00B9A4  08                 	db	8
   232  00B9A5  7C                 	db	124
   233  00B9A6  4E                 	db	78
   234  00B9A7  4F                 	db	79
   235  00B9A8  4E                 	db	78
   236  00B9A9  7C                 	db	124
   237  00B9AA  08                 	db	8
   238  00B9AB  04                 	db	4
   239  00B9AC  26                 	db	38
   240  00B9AD  47                 	db	71
   241  00B9AE  3F                 	db	63
   242  00B9AF  07                 	db	7
   243  00B9B0  06                 	db	6
   244  00B9B1  04                 	db	4
   245  00B9B2  20                 	db	32
   246  00B9B3  3E                 	db	62
   247  00B9B4  7F                 	db	127
   248  00B9B5  7F                 	db	127
   249  00B9B6  3F                 	db	63
   250  00B9B7  3E                 	db	62
   251  00B9B8  20                 	db	32
   252  00B9B9                     __end_of_pic7x8:
   253                           	opt stack 0
   254  00B9B9                     _fract:
   255                           	opt stack 0
   256  00B9B9  00                 	db	0
   257  00B9BA  01                 	db	1
   258  00B9BB  01                 	db	1
   259  00B9BC  02                 	db	2
   260  00B9BD  02                 	db	2
   261  00B9BE  03                 	db	3
   262  00B9BF  04                 	db	4
   263  00B9C0  04                 	db	4
   264  00B9C1  05                 	db	5
   265  00B9C2  06                 	db	6
   266  00B9C3  06                 	db	6
   267  00B9C4  07                 	db	7
   268  00B9C5  07                 	db	7
   269  00B9C6  08                 	db	8
   270  00B9C7  09                 	db	9
   271  00B9C8  09                 	db	9
   272  00B9C9                     __end_of_fract:
   273                           	opt stack 0
   274  00B9C9                     _Font:
   275                           	opt stack 0
   276  00B9C9  00                 	db	0
   277  00B9CA  00                 	db	0
   278  00B9CB  00                 	db	0
   279  00B9CC  00                 	db	0
   280  00B9CD  00                 	db	0
   281  00B9CE  45                 	db	69
   282  00B9CF  51                 	db	81
   283  00B9D0  45                 	db	69
   284  00B9D1  3E                 	db	62
   285  00B9D2  00                 	db	0
   286  00B9D3  6B                 	db	107
   287  00B9D4  6F                 	db	111
   288  00B9D5  6B                 	db	107
   289  00B9D6  3E                 	db	62
   290  00B9D7  00                 	db	0
   291  00B9D8  3E                 	db	62
   292  00B9D9  7C                 	db	124
   293  00B9DA  3E                 	db	62
   294  00B9DB  1C                 	db	28
   295  00B9DC  00                 	db	0
   296  00B9DD  3C                 	db	60
   297  00B9DE  7E                 	db	126
   298  00B9DF  3C                 	db	60
   299  00B9E0  18                 	db	24
   300  00B9E1  00                 	db	0
   301  00B9E2  36                 	db	54
   302  00B9E3  7F                 	db	127
   303  00B9E4  36                 	db	54
   304  00B9E5  30                 	db	48
   305  00B9E6  00                 	db	0
   306  00B9E7  00                 	db	0
   307  00B9E8  00                 	db	0
   308  00B9E9  00                 	db	0
   309  00B9EA  00                 	db	0
   310  00B9EB  00                 	db	0
   311  00B9EC  00                 	db	0
   312  00B9ED  00                 	db	0
   313  00B9EE  00                 	db	0
   314  00B9EF  00                 	db	0
   315  00B9F0  00                 	db	0
   316  00B9F1  00                 	db	0
   317  00B9F2  00                 	db	0
   318  00B9F3  00                 	db	0
   319  00B9F4  00                 	db	0
   320  00B9F5  00                 	db	0
   321  00B9F6  00                 	db	0
   322  00B9F7  00                 	db	0
   323  00B9F8  00                 	db	0
   324  00B9F9  00                 	db	0
   325  00B9FA  00                 	db	0
   326  00B9FB  00                 	db	0
   327  00B9FC  00                 	db	0
   328  00B9FD  00                 	db	0
   329  00B9FE  00                 	db	0
   330  00B9FF  00                 	db	0
   331  00BA00  00                 	db	0
   332  00BA01  00                 	db	0
   333  00BA02  00                 	db	0
   334  00BA03  00                 	db	0
   335  00BA04  00                 	db	0
   336  00BA05  00                 	db	0
   337  00BA06  00                 	db	0
   338  00BA07  00                 	db	0
   339  00BA08  00                 	db	0
   340  00BA09  00                 	db	0
   341  00BA0A  00                 	db	0
   342  00BA0B  00                 	db	0
   343  00BA0C  00                 	db	0
   344  00BA0D  00                 	db	0
   345  00BA0E  00                 	db	0
   346  00BA0F  00                 	db	0
   347  00BA10  00                 	db	0
   348  00BA11  00                 	db	0
   349  00BA12  00                 	db	0
   350  00BA13  00                 	db	0
   351  00BA14  00                 	db	0
   352  00BA15  00                 	db	0
   353  00BA16  00                 	db	0
   354  00BA17  00                 	db	0
   355  00BA18  00                 	db	0
   356  00BA19  00                 	db	0
   357  00BA1A  00                 	db	0
   358  00BA1B  00                 	db	0
   359  00BA1C  00                 	db	0
   360  00BA1D  00                 	db	0
   361  00BA1E  00                 	db	0
   362  00BA1F  00                 	db	0
   363  00BA20  00                 	db	0
   364  00BA21  00                 	db	0
   365  00BA22  00                 	db	0
   366  00BA23  00                 	db	0
   367  00BA24  00                 	db	0
   368  00BA25  00                 	db	0
   369  00BA26  00                 	db	0
   370  00BA27  00                 	db	0
   371  00BA28  00                 	db	0
   372  00BA29  00                 	db	0
   373  00BA2A  00                 	db	0
   374  00BA2B  00                 	db	0
   375  00BA2C  00                 	db	0
   376  00BA2D  00                 	db	0
   377  00BA2E  00                 	db	0
   378  00BA2F  00                 	db	0
   379  00BA30  00                 	db	0
   380  00BA31  00                 	db	0
   381  00BA32  00                 	db	0
   382  00BA33  00                 	db	0
   383  00BA34  00                 	db	0
   384  00BA35  00                 	db	0
   385  00BA36  00                 	db	0
   386  00BA37  00                 	db	0
   387  00BA38  00                 	db	0
   388  00BA39  00                 	db	0
   389  00BA3A  00                 	db	0
   390  00BA3B  00                 	db	0
   391  00BA3C  00                 	db	0
   392  00BA3D  00                 	db	0
   393  00BA3E  00                 	db	0
   394  00BA3F  00                 	db	0
   395  00BA40  00                 	db	0
   396  00BA41  7C                 	db	124
   397  00BA42  4E                 	db	78
   398  00BA43  4E                 	db	78
   399  00BA44  7C                 	db	124
   400  00BA45  08                 	db	8
   401  00BA46  20                 	db	32
   402  00BA47  34                 	db	52
   403  00BA48  7E                 	db	126
   404  00BA49  34                 	db	52
   405  00BA4A  20                 	db	32
   406  00BA4B  00                 	db	0
   407  00BA4C  00                 	db	0
   408  00BA4D  36                 	db	54
   409  00BA4E  36                 	db	54
   410  00BA4F  00                 	db	0
   411  00BA50  00                 	db	0
   412  00BA51  00                 	db	0
   413  00BA52  00                 	db	0
   414  00BA53  00                 	db	0
   415  00BA54  00                 	db	0
   416  00BA55  00                 	db	0
   417  00BA56  00                 	db	0
   418  00BA57  00                 	db	0
   419  00BA58  00                 	db	0
   420  00BA59  00                 	db	0
   421  00BA5A  00                 	db	0
   422  00BA5B  00                 	db	0
   423  00BA5C  00                 	db	0
   424  00BA5D  00                 	db	0
   425  00BA5E  00                 	db	0
   426  00BA5F  00                 	db	0
   427  00BA60  00                 	db	0
   428  00BA61  00                 	db	0
   429  00BA62  00                 	db	0
   430  00BA63  00                 	db	0
   431  00BA64  00                 	db	0
   432  00BA65  00                 	db	0
   433  00BA66  00                 	db	0
   434  00BA67  00                 	db	0
   435  00BA68  00                 	db	0
   436  00BA69  00                 	db	0
   437  00BA6A  00                 	db	0
   438  00BA6B  00                 	db	0
   439  00BA6C  00                 	db	0
   440  00BA6D  00                 	db	0
   441  00BA6E  00                 	db	0
   442  00BA6F  00                 	db	0
   443  00BA70  5F                 	db	95
   444  00BA71  00                 	db	0
   445  00BA72  00                 	db	0
   446  00BA73  00                 	db	0
   447  00BA74  07                 	db	7
   448  00BA75  00                 	db	0
   449  00BA76  07                 	db	7
   450  00BA77  00                 	db	0
   451  00BA78  14                 	db	20
   452  00BA79  7F                 	db	127
   453  00BA7A  14                 	db	20
   454  00BA7B  7F                 	db	127
   455  00BA7C  14                 	db	20
   456  00BA7D  24                 	db	36
   457  00BA7E  2A                 	db	42
   458  00BA7F  7F                 	db	127
   459  00BA80  2A                 	db	42
   460  00BA81  12                 	db	18
   461  00BA82  23                 	db	35
   462  00BA83  13                 	db	19
   463  00BA84  08                 	db	8
   464  00BA85  64                 	db	100
   465  00BA86  62                 	db	98
   466  00BA87  36                 	db	54
   467  00BA88  49                 	db	73
   468  00BA89  56                 	db	86
   469  00BA8A  20                 	db	32
   470  00BA8B  50                 	db	80
   471  00BA8C  00                 	db	0
   472  00BA8D  08                 	db	8
   473  00BA8E  07                 	db	7
   474  00BA8F  03                 	db	3
   475  00BA90  00                 	db	0
   476  00BA91  00                 	db	0
   477  00BA92  1C                 	db	28
   478  00BA93  22                 	db	34
   479  00BA94  41                 	db	65
   480  00BA95  00                 	db	0
   481  00BA96  00                 	db	0
   482  00BA97  41                 	db	65
   483  00BA98  22                 	db	34
   484  00BA99  1C                 	db	28
   485  00BA9A  00                 	db	0
   486  00BA9B  2A                 	db	42
   487  00BA9C  1C                 	db	28
   488  00BA9D  7F                 	db	127
   489  00BA9E  1C                 	db	28
   490  00BA9F  2A                 	db	42
   491  00BAA0  08                 	db	8
   492  00BAA1  08                 	db	8
   493  00BAA2  3E                 	db	62
   494  00BAA3  08                 	db	8
   495  00BAA4  08                 	db	8
   496  00BAA5  00                 	db	0
   497  00BAA6  80                 	db	128
   498  00BAA7  70                 	db	112
   499  00BAA8  30                 	db	48
   500  00BAA9  00                 	db	0
   501  00BAAA  08                 	db	8
   502  00BAAB  08                 	db	8
   503  00BAAC  08                 	db	8
   504  00BAAD  08                 	db	8
   505  00BAAE  08                 	db	8
   506  00BAAF  60                 	db	96
   507  00BAB0  60                 	db	96
   508  00BAB1  00                 	db	0
   509  00BAB2  00                 	db	0
   510  00BAB3  00                 	db	0
   511  00BAB4  20                 	db	32
   512  00BAB5  10                 	db	16
   513  00BAB6  08                 	db	8
   514  00BAB7  04                 	db	4
   515  00BAB8  02                 	db	2
   516  00BAB9  7F                 	db	127
   517  00BABA  7F                 	db	127
   518  00BABB  41                 	db	65
   519  00BABC  7F                 	db	127
   520  00BABD  7F                 	db	127
   521  00BABE  00                 	db	0
   522  00BABF  01                 	db	1
   523  00BAC0  7F                 	db	127
   524  00BAC1  7F                 	db	127
   525  00BAC2  00                 	db	0
   526  00BAC3  63                 	db	99
   527  00BAC4  73                 	db	115
   528  00BAC5  59                 	db	89
   529  00BAC6  4F                 	db	79
   530  00BAC7  47                 	db	71
   531  00BAC8  63                 	db	99
   532  00BAC9  63                 	db	99
   533  00BACA  49                 	db	73
   534  00BACB  7F                 	db	127
   535  00BACC  77                 	db	119
   536  00BACD  1F                 	db	31
   537  00BACE  1F                 	db	31
   538  00BACF  10                 	db	16
   539  00BAD0  7F                 	db	127
   540  00BAD1  7F                 	db	127
   541  00BAD2  6F                 	db	111
   542  00BAD3  6F                 	db	111
   543  00BAD4  49                 	db	73
   544  00BAD5  79                 	db	121
   545  00BAD6  79                 	db	121
   546  00BAD7  7F                 	db	127
   547  00BAD8  7F                 	db	127
   548  00BAD9  49                 	db	73
   549  00BADA  7B                 	db	123
   550  00BADB  7B                 	db	123
   551  00BADC  03                 	db	3
   552  00BADD  73                 	db	115
   553  00BADE  79                 	db	121
   554  00BADF  0F                 	db	15
   555  00BAE0  07                 	db	7
   556  00BAE1  77                 	db	119
   557  00BAE2  7F                 	db	127
   558  00BAE3  49                 	db	73
   559  00BAE4  7F                 	db	127
   560  00BAE5  77                 	db	119
   561  00BAE6  6F                 	db	111
   562  00BAE7  6F                 	db	111
   563  00BAE8  49                 	db	73
   564  00BAE9  7F                 	db	127
   565  00BAEA  7F                 	db	127
   566  00BAEB  00                 	db	0
   567  00BAEC  00                 	db	0
   568  00BAED  36                 	db	54
   569  00BAEE  36                 	db	54
   570  00BAEF  00                 	db	0
   571  00BAF0  00                 	db	0
   572  00BAF1  40                 	db	64
   573  00BAF2  34                 	db	52
   574  00BAF3  00                 	db	0
   575  00BAF4  00                 	db	0
   576  00BAF5  00                 	db	0
   577  00BAF6  08                 	db	8
   578  00BAF7  14                 	db	20
   579  00BAF8  22                 	db	34
   580  00BAF9  41                 	db	65
   581  00BAFA  14                 	db	20
   582  00BAFB  14                 	db	20
   583  00BAFC  14                 	db	20
   584  00BAFD  14                 	db	20
   585  00BAFE  14                 	db	20
   586  00BAFF  00                 	db	0
   587  00BB00  41                 	db	65
   588  00BB01  22                 	db	34
   589  00BB02  14                 	db	20
   590  00BB03  08                 	db	8
   591  00BB04  02                 	db	2
   592  00BB05  01                 	db	1
   593  00BB06  59                 	db	89
   594  00BB07  09                 	db	9
   595  00BB08  06                 	db	6
   596  00BB09  3E                 	db	62
   597  00BB0A  41                 	db	65
   598  00BB0B  5D                 	db	93
   599  00BB0C  59                 	db	89
   600  00BB0D  4E                 	db	78
   601  00BB0E  7C                 	db	124
   602  00BB0F  12                 	db	18
   603  00BB10  11                 	db	17
   604  00BB11  12                 	db	18
   605  00BB12  7C                 	db	124
   606  00BB13  7F                 	db	127
   607  00BB14  49                 	db	73
   608  00BB15  49                 	db	73
   609  00BB16  49                 	db	73
   610  00BB17  36                 	db	54
   611  00BB18  3E                 	db	62
   612  00BB19  41                 	db	65
   613  00BB1A  41                 	db	65
   614  00BB1B  41                 	db	65
   615  00BB1C  22                 	db	34
   616  00BB1D  7F                 	db	127
   617  00BB1E  41                 	db	65
   618  00BB1F  41                 	db	65
   619  00BB20  41                 	db	65
   620  00BB21  3E                 	db	62
   621  00BB22  7F                 	db	127
   622  00BB23  49                 	db	73
   623  00BB24  49                 	db	73
   624  00BB25  49                 	db	73
   625  00BB26  41                 	db	65
   626  00BB27  7F                 	db	127
   627  00BB28  09                 	db	9
   628  00BB29  09                 	db	9
   629  00BB2A  09                 	db	9
   630  00BB2B  01                 	db	1
   631  00BB2C  3E                 	db	62
   632  00BB2D  41                 	db	65
   633  00BB2E  41                 	db	65
   634  00BB2F  51                 	db	81
   635  00BB30  72                 	db	114
   636  00BB31  7F                 	db	127
   637  00BB32  08                 	db	8
   638  00BB33  08                 	db	8
   639  00BB34  08                 	db	8
   640  00BB35  7F                 	db	127
   641  00BB36  00                 	db	0
   642  00BB37  41                 	db	65
   643  00BB38  7F                 	db	127
   644  00BB39  41                 	db	65
   645  00BB3A  00                 	db	0
   646  00BB3B  20                 	db	32
   647  00BB3C  40                 	db	64
   648  00BB3D  41                 	db	65
   649  00BB3E  3F                 	db	63
   650  00BB3F  01                 	db	1
   651  00BB40  7F                 	db	127
   652  00BB41  08                 	db	8
   653  00BB42  14                 	db	20
   654  00BB43  22                 	db	34
   655  00BB44  41                 	db	65
   656  00BB45  7F                 	db	127
   657  00BB46  40                 	db	64
   658  00BB47  40                 	db	64
   659  00BB48  40                 	db	64
   660  00BB49  40                 	db	64
   661  00BB4A  7F                 	db	127
   662  00BB4B  02                 	db	2
   663  00BB4C  04                 	db	4
   664  00BB4D  02                 	db	2
   665  00BB4E  7F                 	db	127
   666  00BB4F  7F                 	db	127
   667  00BB50  04                 	db	4
   668  00BB51  08                 	db	8
   669  00BB52  10                 	db	16
   670  00BB53  7F                 	db	127
   671  00BB54  3E                 	db	62
   672  00BB55  41                 	db	65
   673  00BB56  41                 	db	65
   674  00BB57  41                 	db	65
   675  00BB58  3E                 	db	62
   676  00BB59  7F                 	db	127
   677  00BB5A  09                 	db	9
   678  00BB5B  09                 	db	9
   679  00BB5C  09                 	db	9
   680  00BB5D  06                 	db	6
   681  00BB5E  3E                 	db	62
   682  00BB5F  41                 	db	65
   683  00BB60  51                 	db	81
   684  00BB61  21                 	db	33
   685  00BB62  5E                 	db	94
   686  00BB63  7F                 	db	127
   687  00BB64  09                 	db	9
   688  00BB65  19                 	db	25
   689  00BB66  29                 	db	41
   690  00BB67  46                 	db	70
   691  00BB68  26                 	db	38
   692  00BB69  49                 	db	73
   693  00BB6A  49                 	db	73
   694  00BB6B  49                 	db	73
   695  00BB6C  32                 	db	50
   696  00BB6D  01                 	db	1
   697  00BB6E  01                 	db	1
   698  00BB6F  7F                 	db	127
   699  00BB70  01                 	db	1
   700  00BB71  01                 	db	1
   701  00BB72  3F                 	db	63
   702  00BB73  40                 	db	64
   703  00BB74  40                 	db	64
   704  00BB75  40                 	db	64
   705  00BB76  3F                 	db	63
   706  00BB77  1F                 	db	31
   707  00BB78  20                 	db	32
   708  00BB79  40                 	db	64
   709  00BB7A  20                 	db	32
   710  00BB7B  1F                 	db	31
   711  00BB7C  3F                 	db	63
   712  00BB7D  40                 	db	64
   713  00BB7E  38                 	db	56
   714  00BB7F  40                 	db	64
   715  00BB80  3F                 	db	63
   716  00BB81  63                 	db	99
   717  00BB82  14                 	db	20
   718  00BB83  08                 	db	8
   719  00BB84  14                 	db	20
   720  00BB85  63                 	db	99
   721  00BB86  03                 	db	3
   722  00BB87  04                 	db	4
   723  00BB88  78                 	db	120
   724  00BB89  04                 	db	4
   725  00BB8A  03                 	db	3
   726  00BB8B  61                 	db	97
   727  00BB8C  51                 	db	81
   728  00BB8D  49                 	db	73
   729  00BB8E  45                 	db	69
   730  00BB8F  43                 	db	67
   731  00BB90  00                 	db	0
   732  00BB91  7F                 	db	127
   733  00BB92  41                 	db	65
   734  00BB93  41                 	db	65
   735  00BB94  00                 	db	0
   736  00BB95  02                 	db	2
   737  00BB96  04                 	db	4
   738  00BB97  08                 	db	8
   739  00BB98  10                 	db	16
   740  00BB99  20                 	db	32
   741  00BB9A  00                 	db	0
   742  00BB9B  41                 	db	65
   743  00BB9C  41                 	db	65
   744  00BB9D  7F                 	db	127
   745  00BB9E  00                 	db	0
   746  00BB9F  04                 	db	4
   747  00BBA0  02                 	db	2
   748  00BBA1  01                 	db	1
   749  00BBA2  02                 	db	2
   750  00BBA3  04                 	db	4
   751  00BBA4  40                 	db	64
   752  00BBA5  40                 	db	64
   753  00BBA6  40                 	db	64
   754  00BBA7  40                 	db	64
   755  00BBA8  40                 	db	64
   756  00BBA9  00                 	db	0
   757  00BBAA  03                 	db	3
   758  00BBAB  07                 	db	7
   759  00BBAC  08                 	db	8
   760  00BBAD  00                 	db	0
   761  00BBAE  20                 	db	32
   762  00BBAF  54                 	db	84
   763  00BBB0  54                 	db	84
   764  00BBB1  78                 	db	120
   765  00BBB2  40                 	db	64
   766  00BBB3  7F                 	db	127
   767  00BBB4  28                 	db	40
   768  00BBB5  44                 	db	68
   769  00BBB6  44                 	db	68
   770  00BBB7  38                 	db	56
   771  00BBB8  38                 	db	56
   772  00BBB9  44                 	db	68
   773  00BBBA  44                 	db	68
   774  00BBBB  44                 	db	68
   775  00BBBC  28                 	db	40
   776  00BBBD  38                 	db	56
   777  00BBBE  44                 	db	68
   778  00BBBF  44                 	db	68
   779  00BBC0  28                 	db	40
   780  00BBC1  7F                 	db	127
   781  00BBC2  38                 	db	56
   782  00BBC3  54                 	db	84
   783  00BBC4  54                 	db	84
   784  00BBC5  54                 	db	84
   785  00BBC6  18                 	db	24
   786  00BBC7  08                 	db	8
   787  00BBC8  7E                 	db	126
   788  00BBC9  09                 	db	9
   789  00BBCA  02                 	db	2
   790  00BBCB  00                 	db	0
   791  00BBCC  18                 	db	24
   792  00BBCD  A4                 	db	164
   793  00BBCE  A4                 	db	164
   794  00BBCF  9C                 	db	156
   795  00BBD0  78                 	db	120
   796  00BBD1  7F                 	db	127
   797  00BBD2  08                 	db	8
   798  00BBD3  04                 	db	4
   799  00BBD4  04                 	db	4
   800  00BBD5  78                 	db	120
   801  00BBD6  00                 	db	0
   802  00BBD7  44                 	db	68
   803  00BBD8  7D                 	db	125
   804  00BBD9  40                 	db	64
   805  00BBDA  00                 	db	0
   806  00BBDB  20                 	db	32
   807  00BBDC  40                 	db	64
   808  00BBDD  40                 	db	64
   809  00BBDE  3D                 	db	61
   810  00BBDF  00                 	db	0
   811  00BBE0  7F                 	db	127
   812  00BBE1  10                 	db	16
   813  00BBE2  28                 	db	40
   814  00BBE3  44                 	db	68
   815  00BBE4  00                 	db	0
   816  00BBE5  00                 	db	0
   817  00BBE6  41                 	db	65
   818  00BBE7  7F                 	db	127
   819  00BBE8  40                 	db	64
   820  00BBE9  00                 	db	0
   821  00BBEA  7C                 	db	124
   822  00BBEB  04                 	db	4
   823  00BBEC  78                 	db	120
   824  00BBED  04                 	db	4
   825  00BBEE  78                 	db	120
   826  00BBEF  7C                 	db	124
   827  00BBF0  08                 	db	8
   828  00BBF1  04                 	db	4
   829  00BBF2  04                 	db	4
   830  00BBF3  78                 	db	120
   831  00BBF4  38                 	db	56
   832  00BBF5  44                 	db	68
   833  00BBF6  44                 	db	68
   834  00BBF7  44                 	db	68
   835  00BBF8  38                 	db	56
   836  00BBF9  FC                 	db	252
   837  00BBFA  18                 	db	24
   838  00BBFB  24                 	db	36
   839  00BBFC  24                 	db	36
   840  00BBFD  18                 	db	24
   841  00BBFE  18                 	db	24
   842  00BBFF  24                 	db	36
   843  00BC00  24                 	db	36
   844  00BC01  18                 	db	24
   845  00BC02  FC                 	db	252
   846  00BC03  7C                 	db	124
   847  00BC04  04                 	db	4
   848  00BC05  04                 	db	4
   849  00BC06  08                 	db	8
   850  00BC07  00                 	db	0
   851  00BC08  48                 	db	72
   852  00BC09  54                 	db	84
   853  00BC0A  54                 	db	84
   854  00BC0B  54                 	db	84
   855  00BC0C  24                 	db	36
   856  00BC0D  00                 	db	0
   857  00BC0E  04                 	db	4
   858  00BC0F  3F                 	db	63
   859  00BC10  44                 	db	68
   860  00BC11  20                 	db	32
   861  00BC12  3C                 	db	60
   862  00BC13  40                 	db	64
   863  00BC14  40                 	db	64
   864  00BC15  20                 	db	32
   865  00BC16  7C                 	db	124
   866  00BC17  1C                 	db	28
   867  00BC18  20                 	db	32
   868  00BC19  40                 	db	64
   869  00BC1A  20                 	db	32
   870  00BC1B  1C                 	db	28
   871  00BC1C  3C                 	db	60
   872  00BC1D  40                 	db	64
   873  00BC1E  30                 	db	48
   874  00BC1F  40                 	db	64
   875  00BC20  3C                 	db	60
   876  00BC21  44                 	db	68
   877  00BC22  28                 	db	40
   878  00BC23  10                 	db	16
   879  00BC24  28                 	db	40
   880  00BC25  44                 	db	68
   881  00BC26  4C                 	db	76
   882  00BC27  90                 	db	144
   883  00BC28  90                 	db	144
   884  00BC29  90                 	db	144
   885  00BC2A  7C                 	db	124
   886  00BC2B  44                 	db	68
   887  00BC2C  64                 	db	100
   888  00BC2D  54                 	db	84
   889  00BC2E  4C                 	db	76
   890  00BC2F  44                 	db	68
   891  00BC30  00                 	db	0
   892  00BC31  08                 	db	8
   893  00BC32  36                 	db	54
   894  00BC33  41                 	db	65
   895  00BC34  00                 	db	0
   896  00BC35  00                 	db	0
   897  00BC36  00                 	db	0
   898  00BC37  77                 	db	119
   899  00BC38  00                 	db	0
   900  00BC39  00                 	db	0
   901  00BC3A  00                 	db	0
   902  00BC3B  41                 	db	65
   903  00BC3C  36                 	db	54
   904  00BC3D  08                 	db	8
   905  00BC3E  00                 	db	0
   906  00BC3F  02                 	db	2
   907  00BC40  01                 	db	1
   908  00BC41  02                 	db	2
   909  00BC42  04                 	db	4
   910  00BC43  02                 	db	2
   911  00BC44  00                 	db	0
   912  00BC45  00                 	db	0
   913  00BC46  00                 	db	0
   914  00BC47  00                 	db	0
   915  00BC48  00                 	db	0
   916  00BC49  00                 	db	0
   917  00BC4A  00                 	db	0
   918  00BC4B  00                 	db	0
   919  00BC4C  00                 	db	0
   920  00BC4D  00                 	db	0
   921  00BC4E  00                 	db	0
   922  00BC4F  00                 	db	0
   923  00BC50  00                 	db	0
   924  00BC51  00                 	db	0
   925  00BC52  00                 	db	0
   926  00BC53  00                 	db	0
   927  00BC54  00                 	db	0
   928  00BC55  00                 	db	0
   929  00BC56  00                 	db	0
   930  00BC57  00                 	db	0
   931  00BC58  00                 	db	0
   932  00BC59  00                 	db	0
   933  00BC5A  00                 	db	0
   934  00BC5B  00                 	db	0
   935  00BC5C  00                 	db	0
   936  00BC5D  00                 	db	0
   937  00BC5E  00                 	db	0
   938  00BC5F  00                 	db	0
   939  00BC60  00                 	db	0
   940  00BC61  00                 	db	0
   941  00BC62  40                 	db	64
   942  00BC63  00                 	db	0
   943  00BC64  40                 	db	64
   944  00BC65  00                 	db	0
   945  00BC66  40                 	db	64
   946  00BC67  00                 	db	0
   947  00BC68  00                 	db	0
   948  00BC69  00                 	db	0
   949  00BC6A  00                 	db	0
   950  00BC6B  00                 	db	0
   951  00BC6C  00                 	db	0
   952  00BC6D  00                 	db	0
   953  00BC6E  00                 	db	0
   954  00BC6F  00                 	db	0
   955  00BC70  00                 	db	0
   956  00BC71  3E                 	db	62
   957  00BC72  55                 	db	85
   958  00BC73  55                 	db	85
   959  00BC74  41                 	db	65
   960  00BC75  22                 	db	34
   961  00BC76  00                 	db	0
   962  00BC77  00                 	db	0
   963  00BC78  00                 	db	0
   964  00BC79  00                 	db	0
   965  00BC7A  00                 	db	0
   966  00BC7B  00                 	db	0
   967  00BC7C  00                 	db	0
   968  00BC7D  00                 	db	0
   969  00BC7E  00                 	db	0
   970  00BC7F  00                 	db	0
   971  00BC80  00                 	db	0
   972  00BC81  00                 	db	0
   973  00BC82  00                 	db	0
   974  00BC83  00                 	db	0
   975  00BC84  00                 	db	0
   976  00BC85  00                 	db	0
   977  00BC86  00                 	db	0
   978  00BC87  00                 	db	0
   979  00BC88  00                 	db	0
   980  00BC89  00                 	db	0
   981  00BC8A  00                 	db	0
   982  00BC8B  00                 	db	0
   983  00BC8C  00                 	db	0
   984  00BC8D  00                 	db	0
   985  00BC8E  00                 	db	0
   986  00BC8F  00                 	db	0
   987  00BC90  00                 	db	0
   988  00BC91  00                 	db	0
   989  00BC92  00                 	db	0
   990  00BC93  00                 	db	0
   991  00BC94  00                 	db	0
   992  00BC95  00                 	db	0
   993  00BC96  00                 	db	0
   994  00BC97  00                 	db	0
   995  00BC98  00                 	db	0
   996  00BC99  00                 	db	0
   997  00BC9A  00                 	db	0
   998  00BC9B  00                 	db	0
   999  00BC9C  00                 	db	0
  1000  00BC9D  00                 	db	0
  1001  00BC9E  00                 	db	0
  1002  00BC9F  00                 	db	0
  1003  00BCA0  00                 	db	0
  1004  00BCA1  00                 	db	0
  1005  00BCA2  00                 	db	0
  1006  00BCA3  00                 	db	0
  1007  00BCA4  00                 	db	0
  1008  00BCA5  00                 	db	0
  1009  00BCA6  00                 	db	0
  1010  00BCA7  00                 	db	0
  1011  00BCA8  00                 	db	0
  1012  00BCA9  00                 	db	0
  1013  00BCAA  00                 	db	0
  1014  00BCAB  00                 	db	0
  1015  00BCAC  00                 	db	0
  1016  00BCAD  00                 	db	0
  1017  00BCAE  00                 	db	0
  1018  00BCAF  00                 	db	0
  1019  00BCB0  00                 	db	0
  1020  00BCB1  00                 	db	0
  1021  00BCB2  00                 	db	0
  1022  00BCB3  0C                 	db	12
  1023  00BCB4  1E                 	db	30
  1024  00BCB5  1E                 	db	30
  1025  00BCB6  0C                 	db	12
  1026  00BCB7  00                 	db	0
  1027  00BCB8  00                 	db	0
  1028  00BCB9  00                 	db	0
  1029  00BCBA  00                 	db	0
  1030  00BCBB  00                 	db	0
  1031  00BCBC  00                 	db	0
  1032  00BCBD  00                 	db	0
  1033  00BCBE  00                 	db	0
  1034  00BCBF  00                 	db	0
  1035  00BCC0  00                 	db	0
  1036  00BCC1  00                 	db	0
  1037  00BCC2  00                 	db	0
  1038  00BCC3  00                 	db	0
  1039  00BCC4  00                 	db	0
  1040  00BCC5  00                 	db	0
  1041  00BCC6  00                 	db	0
  1042  00BCC7  00                 	db	0
  1043  00BCC8  00                 	db	0
  1044  00BCC9  00                 	db	0
  1045  00BCCA  00                 	db	0
  1046  00BCCB  00                 	db	0
  1047  00BCCC  00                 	db	0
  1048  00BCCD  00                 	db	0
  1049  00BCCE  00                 	db	0
  1050  00BCCF  00                 	db	0
  1051  00BCD0  00                 	db	0
  1052  00BCD1  00                 	db	0
  1053  00BCD2  00                 	db	0
  1054  00BCD3  00                 	db	0
  1055  00BCD4  00                 	db	0
  1056  00BCD5  00                 	db	0
  1057  00BCD6  00                 	db	0
  1058  00BCD7  00                 	db	0
  1059  00BCD8  00                 	db	0
  1060  00BCD9  00                 	db	0
  1061  00BCDA  00                 	db	0
  1062  00BCDB  00                 	db	0
  1063  00BCDC  00                 	db	0
  1064  00BCDD  00                 	db	0
  1065  00BCDE  00                 	db	0
  1066  00BCDF  00                 	db	0
  1067  00BCE0  00                 	db	0
  1068  00BCE1  00                 	db	0
  1069  00BCE2  00                 	db	0
  1070  00BCE3  00                 	db	0
  1071  00BCE4  00                 	db	0
  1072  00BCE5  00                 	db	0
  1073  00BCE6  00                 	db	0
  1074  00BCE7  00                 	db	0
  1075  00BCE8  00                 	db	0
  1076  00BCE9  00                 	db	0
  1077  00BCEA  00                 	db	0
  1078  00BCEB  00                 	db	0
  1079  00BCEC  00                 	db	0
  1080  00BCED  00                 	db	0
  1081  00BCEE  00                 	db	0
  1082  00BCEF  00                 	db	0
  1083  00BCF0  00                 	db	0
  1084  00BCF1  00                 	db	0
  1085  00BCF2  00                 	db	0
  1086  00BCF3  00                 	db	0
  1087  00BCF4  00                 	db	0
  1088  00BCF5  00                 	db	0
  1089  00BCF6  00                 	db	0
  1090  00BCF7  00                 	db	0
  1091  00BCF8  00                 	db	0
  1092  00BCF9  00                 	db	0
  1093  00BCFA  00                 	db	0
  1094  00BCFB  00                 	db	0
  1095  00BCFC  00                 	db	0
  1096  00BCFD  00                 	db	0
  1097  00BCFE  00                 	db	0
  1098  00BCFF  00                 	db	0
  1099  00BD00  00                 	db	0
  1100  00BD01  00                 	db	0
  1101  00BD02  7E                 	db	126
  1102  00BD03  02                 	db	2
  1103  00BD04  02                 	db	2
  1104  00BD05  02                 	db	2
  1105  00BD06  03                 	db	3
  1106  00BD07  00                 	db	0
  1107  00BD08  00                 	db	0
  1108  00BD09  00                 	db	0
  1109  00BD0A  00                 	db	0
  1110  00BD0B  00                 	db	0
  1111  00BD0C  00                 	db	0
  1112  00BD0D  00                 	db	0
  1113  00BD0E  00                 	db	0
  1114  00BD0F  00                 	db	0
  1115  00BD10  00                 	db	0
  1116  00BD11  7E                 	db	126
  1117  00BD12  4B                 	db	75
  1118  00BD13  4A                 	db	74
  1119  00BD14  4B                 	db	75
  1120  00BD15  42                 	db	66
  1121  00BD16  00                 	db	0
  1122  00BD17  00                 	db	0
  1123  00BD18  00                 	db	0
  1124  00BD19  00                 	db	0
  1125  00BD1A  00                 	db	0
  1126  00BD1B  3E                 	db	62
  1127  00BD1C  49                 	db	73
  1128  00BD1D  49                 	db	73
  1129  00BD1E  49                 	db	73
  1130  00BD1F  22                 	db	34
  1131  00BD20  00                 	db	0
  1132  00BD21  00                 	db	0
  1133  00BD22  00                 	db	0
  1134  00BD23  00                 	db	0
  1135  00BD24  00                 	db	0
  1136  00BD25  00                 	db	0
  1137  00BD26  00                 	db	0
  1138  00BD27  00                 	db	0
  1139  00BD28  00                 	db	0
  1140  00BD29  00                 	db	0
  1141  00BD2A  00                 	db	0
  1142  00BD2B  00                 	db	0
  1143  00BD2C  00                 	db	0
  1144  00BD2D  00                 	db	0
  1145  00BD2E  00                 	db	0
  1146  00BD2F  00                 	db	0
  1147  00BD30  00                 	db	0
  1148  00BD31  00                 	db	0
  1149  00BD32  00                 	db	0
  1150  00BD33  00                 	db	0
  1151  00BD34  00                 	db	0
  1152  00BD35  41                 	db	65
  1153  00BD36  7E                 	db	126
  1154  00BD37  41                 	db	65
  1155  00BD38  00                 	db	0
  1156  00BD39  00                 	db	0
  1157  00BD3A  06                 	db	6
  1158  00BD3B  09                 	db	9
  1159  00BD3C  09                 	db	9
  1160  00BD3D  06                 	db	6
  1161  00BD3E  44                 	db	68
  1162  00BD3F  44                 	db	68
  1163  00BD40  5F                 	db	95
  1164  00BD41  44                 	db	68
  1165  00BD42  44                 	db	68
  1166  00BD43  00                 	db	0
  1167  00BD44  41                 	db	65
  1168  00BD45  7F                 	db	127
  1169  00BD46  41                 	db	65
  1170  00BD47  00                 	db	0
  1171  00BD48  00                 	db	0
  1172  00BD49  44                 	db	68
  1173  00BD4A  7D                 	db	125
  1174  00BD4B  40                 	db	64
  1175  00BD4C  00                 	db	0
  1176  00BD4D  00                 	db	0
  1177  00BD4E  7C                 	db	124
  1178  00BD4F  04                 	db	4
  1179  00BD50  04                 	db	4
  1180  00BD51  06                 	db	6
  1181  00BD52  00                 	db	0
  1182  00BD53  00                 	db	0
  1183  00BD54  00                 	db	0
  1184  00BD55  00                 	db	0
  1185  00BD56  00                 	db	0
  1186  00BD57  00                 	db	0
  1187  00BD58  00                 	db	0
  1188  00BD59  00                 	db	0
  1189  00BD5A  00                 	db	0
  1190  00BD5B  00                 	db	0
  1191  00BD5C  00                 	db	0
  1192  00BD5D  00                 	db	0
  1193  00BD5E  00                 	db	0
  1194  00BD5F  00                 	db	0
  1195  00BD60  00                 	db	0
  1196  00BD61  38                 	db	56
  1197  00BD62  55                 	db	85
  1198  00BD63  54                 	db	84
  1199  00BD64  55                 	db	85
  1200  00BD65  18                 	db	24
  1201  00BD66  00                 	db	0
  1202  00BD67  00                 	db	0
  1203  00BD68  00                 	db	0
  1204  00BD69  00                 	db	0
  1205  00BD6A  00                 	db	0
  1206  00BD6B  38                 	db	56
  1207  00BD6C  54                 	db	84
  1208  00BD6D  54                 	db	84
  1209  00BD6E  54                 	db	84
  1210  00BD6F  44                 	db	68
  1211  00BD70  22                 	db	34
  1212  00BD71  14                 	db	20
  1213  00BD72  2A                 	db	42
  1214  00BD73  14                 	db	20
  1215  00BD74  08                 	db	8
  1216  00BD75  20                 	db	32
  1217  00BD76  40                 	db	64
  1218  00BD77  40                 	db	64
  1219  00BD78  3D                 	db	61
  1220  00BD79  00                 	db	0
  1221  00BD7A  00                 	db	0
  1222  00BD7B  00                 	db	0
  1223  00BD7C  00                 	db	0
  1224  00BD7D  00                 	db	0
  1225  00BD7E  00                 	db	0
  1226  00BD7F  00                 	db	0
  1227  00BD80  00                 	db	0
  1228  00BD81  00                 	db	0
  1229  00BD82  00                 	db	0
  1230  00BD83  00                 	db	0
  1231  00BD84  00                 	db	0
  1232  00BD85  45                 	db	69
  1233  00BD86  7C                 	db	124
  1234  00BD87  41                 	db	65
  1235  00BD88  00                 	db	0
  1236  00BD89  7E                 	db	126
  1237  00BD8A  11                 	db	17
  1238  00BD8B  11                 	db	17
  1239  00BD8C  11                 	db	17
  1240  00BD8D  7E                 	db	126
  1241  00BD8E  7F                 	db	127
  1242  00BD8F  49                 	db	73
  1243  00BD90  49                 	db	73
  1244  00BD91  49                 	db	73
  1245  00BD92  31                 	db	49
  1246  00BD93  7F                 	db	127
  1247  00BD94  49                 	db	73
  1248  00BD95  49                 	db	73
  1249  00BD96  49                 	db	73
  1250  00BD97  36                 	db	54
  1251  00BD98  7F                 	db	127
  1252  00BD99  01                 	db	1
  1253  00BD9A  01                 	db	1
  1254  00BD9B  01                 	db	1
  1255  00BD9C  01                 	db	1
  1256  00BD9D  C0                 	db	192
  1257  00BD9E  7E                 	db	126
  1258  00BD9F  41                 	db	65
  1259  00BDA0  7E                 	db	126
  1260  00BDA1  C0                 	db	192
  1261  00BDA2  7F                 	db	127
  1262  00BDA3  49                 	db	73
  1263  00BDA4  49                 	db	73
  1264  00BDA5  49                 	db	73
  1265  00BDA6  41                 	db	65
  1266  00BDA7  77                 	db	119
  1267  00BDA8  08                 	db	8
  1268  00BDA9  7F                 	db	127
  1269  00BDAA  08                 	db	8
  1270  00BDAB  77                 	db	119
  1271  00BDAC  22                 	db	34
  1272  00BDAD  41                 	db	65
  1273  00BDAE  49                 	db	73
  1274  00BDAF  49                 	db	73
  1275  00BDB0  36                 	db	54
  1276  00BDB1  7F                 	db	127
  1277  00BDB2  10                 	db	16
  1278  00BDB3  08                 	db	8
  1279  00BDB4  04                 	db	4
  1280  00BDB5  7F                 	db	127
  1281  00BDB6  7E                 	db	126
  1282  00BDB7  11                 	db	17
  1283  00BDB8  09                 	db	9
  1284  00BDB9  05                 	db	5
  1285  00BDBA  7E                 	db	126
  1286  00BDBB  7F                 	db	127
  1287  00BDBC  08                 	db	8
  1288  00BDBD  14                 	db	20
  1289  00BDBE  22                 	db	34
  1290  00BDBF  41                 	db	65
  1291  00BDC0  40                 	db	64
  1292  00BDC1  7E                 	db	126
  1293  00BDC2  01                 	db	1
  1294  00BDC3  01                 	db	1
  1295  00BDC4  7F                 	db	127
  1296  00BDC5  7F                 	db	127
  1297  00BDC6  02                 	db	2
  1298  00BDC7  0C                 	db	12
  1299  00BDC8  02                 	db	2
  1300  00BDC9  7F                 	db	127
  1301  00BDCA  7F                 	db	127
  1302  00BDCB  08                 	db	8
  1303  00BDCC  08                 	db	8
  1304  00BDCD  08                 	db	8
  1305  00BDCE  7F                 	db	127
  1306  00BDCF  3E                 	db	62
  1307  00BDD0  41                 	db	65
  1308  00BDD1  41                 	db	65
  1309  00BDD2  41                 	db	65
  1310  00BDD3  3E                 	db	62
  1311  00BDD4  7F                 	db	127
  1312  00BDD5  01                 	db	1
  1313  00BDD6  01                 	db	1
  1314  00BDD7  01                 	db	1
  1315  00BDD8  7F                 	db	127
  1316  00BDD9  7F                 	db	127
  1317  00BDDA  09                 	db	9
  1318  00BDDB  09                 	db	9
  1319  00BDDC  09                 	db	9
  1320  00BDDD  06                 	db	6
  1321  00BDDE  3E                 	db	62
  1322  00BDDF  41                 	db	65
  1323  00BDE0  41                 	db	65
  1324  00BDE1  41                 	db	65
  1325  00BDE2  22                 	db	34
  1326  00BDE3  01                 	db	1
  1327  00BDE4  01                 	db	1
  1328  00BDE5  7F                 	db	127
  1329  00BDE6  01                 	db	1
  1330  00BDE7  01                 	db	1
  1331  00BDE8  27                 	db	39
  1332  00BDE9  48                 	db	72
  1333  00BDEA  48                 	db	72
  1334  00BDEB  48                 	db	72
  1335  00BDEC  3F                 	db	63
  1336  00BDED  0E                 	db	14
  1337  00BDEE  11                 	db	17
  1338  00BDEF  7F                 	db	127
  1339  00BDF0  11                 	db	17
  1340  00BDF1  0E                 	db	14
  1341  00BDF2  63                 	db	99
  1342  00BDF3  14                 	db	20
  1343  00BDF4  08                 	db	8
  1344  00BDF5  14                 	db	20
  1345  00BDF6  63                 	db	99
  1346  00BDF7  7F                 	db	127
  1347  00BDF8  40                 	db	64
  1348  00BDF9  40                 	db	64
  1349  00BDFA  7F                 	db	127
  1350  00BDFB  C0                 	db	192
  1351  00BDFC  07                 	db	7
  1352  00BDFD  08                 	db	8
  1353  00BDFE  08                 	db	8
  1354  00BDFF  08                 	db	8
  1355  00BE00  7F                 	db	127
  1356  00BE01  7F                 	db	127
  1357  00BE02  40                 	db	64
  1358  00BE03  7E                 	db	126
  1359  00BE04  40                 	db	64
  1360  00BE05  7F                 	db	127
  1361  00BE06  7F                 	db	127
  1362  00BE07  40                 	db	64
  1363  00BE08  7E                 	db	126
  1364  00BE09  40                 	db	64
  1365  00BE0A  FF                 	db	255
  1366  00BE0B  01                 	db	1
  1367  00BE0C  7F                 	db	127
  1368  00BE0D  44                 	db	68
  1369  00BE0E  44                 	db	68
  1370  00BE0F  38                 	db	56
  1371  00BE10  7F                 	db	127
  1372  00BE11  44                 	db	68
  1373  00BE12  38                 	db	56
  1374  00BE13  00                 	db	0
  1375  00BE14  7F                 	db	127
  1376  00BE15  7F                 	db	127
  1377  00BE16  44                 	db	68
  1378  00BE17  44                 	db	68
  1379  00BE18  44                 	db	68
  1380  00BE19  38                 	db	56
  1381  00BE1A  22                 	db	34
  1382  00BE1B  41                 	db	65
  1383  00BE1C  49                 	db	73
  1384  00BE1D  49                 	db	73
  1385  00BE1E  3E                 	db	62
  1386  00BE1F  7F                 	db	127
  1387  00BE20  08                 	db	8
  1388  00BE21  3E                 	db	62
  1389  00BE22  41                 	db	65
  1390  00BE23  3E                 	db	62
  1391  00BE24  46                 	db	70
  1392  00BE25  29                 	db	41
  1393  00BE26  19                 	db	25
  1394  00BE27  09                 	db	9
  1395  00BE28  7F                 	db	127
  1396  00BE29  20                 	db	32
  1397  00BE2A  54                 	db	84
  1398  00BE2B  54                 	db	84
  1399  00BE2C  54                 	db	84
  1400  00BE2D  78                 	db	120
  1401  00BE2E  3C                 	db	60
  1402  00BE2F  4A                 	db	74
  1403  00BE30  4A                 	db	74
  1404  00BE31  4A                 	db	74
  1405  00BE32  31                 	db	49
  1406  00BE33  7C                 	db	124
  1407  00BE34  54                 	db	84
  1408  00BE35  54                 	db	84
  1409  00BE36  54                 	db	84
  1410  00BE37  28                 	db	40
  1411  00BE38  00                 	db	0
  1412  00BE39  7C                 	db	124
  1413  00BE3A  04                 	db	4
  1414  00BE3B  04                 	db	4
  1415  00BE3C  04                 	db	4
  1416  00BE3D  C0                 	db	192
  1417  00BE3E  78                 	db	120
  1418  00BE3F  44                 	db	68
  1419  00BE40  7C                 	db	124
  1420  00BE41  C0                 	db	192
  1421  00BE42  38                 	db	56
  1422  00BE43  54                 	db	84
  1423  00BE44  54                 	db	84
  1424  00BE45  54                 	db	84
  1425  00BE46  18                 	db	24
  1426  00BE47  6C                 	db	108
  1427  00BE48  10                 	db	16
  1428  00BE49  7C                 	db	124
  1429  00BE4A  10                 	db	16
  1430  00BE4B  6C                 	db	108
  1431  00BE4C  28                 	db	40
  1432  00BE4D  44                 	db	68
  1433  00BE4E  54                 	db	84
  1434  00BE4F  54                 	db	84
  1435  00BE50  28                 	db	40
  1436  00BE51  7C                 	db	124
  1437  00BE52  20                 	db	32
  1438  00BE53  10                 	db	16
  1439  00BE54  08                 	db	8
  1440  00BE55  7C                 	db	124
  1441  00BE56  7C                 	db	124
  1442  00BE57  21                 	db	33
  1443  00BE58  11                 	db	17
  1444  00BE59  09                 	db	9
  1445  00BE5A  7C                 	db	124
  1446  00BE5B  7C                 	db	124
  1447  00BE5C  10                 	db	16
  1448  00BE5D  10                 	db	16
  1449  00BE5E  28                 	db	40
  1450  00BE5F  44                 	db	68
  1451  00BE60  40                 	db	64
  1452  00BE61  38                 	db	56
  1453  00BE62  04                 	db	4
  1454  00BE63  04                 	db	4
  1455  00BE64  7C                 	db	124
  1456  00BE65  7C                 	db	124
  1457  00BE66  08                 	db	8
  1458  00BE67  10                 	db	16
  1459  00BE68  08                 	db	8
  1460  00BE69  7C                 	db	124
  1461  00BE6A  7C                 	db	124
  1462  00BE6B  10                 	db	16
  1463  00BE6C  10                 	db	16
  1464  00BE6D  10                 	db	16
  1465  00BE6E  7C                 	db	124
  1466  00BE6F  38                 	db	56
  1467  00BE70  44                 	db	68
  1468  00BE71  44                 	db	68
  1469  00BE72  44                 	db	68
  1470  00BE73  38                 	db	56
  1471  00BE74  7C                 	db	124
  1472  00BE75  04                 	db	4
  1473  00BE76  04                 	db	4
  1474  00BE77  04                 	db	4
  1475  00BE78  7C                 	db	124
  1476  00BE79  7C                 	db	124
  1477  00BE7A  14                 	db	20
  1478  00BE7B  14                 	db	20
  1479  00BE7C  14                 	db	20
  1480  00BE7D  08                 	db	8
  1481  00BE7E  38                 	db	56
  1482  00BE7F  44                 	db	68
  1483  00BE80  44                 	db	68
  1484  00BE81  44                 	db	68
  1485  00BE82  28                 	db	40
  1486  00BE83  04                 	db	4
  1487  00BE84  04                 	db	4
  1488  00BE85  7C                 	db	124
  1489  00BE86  04                 	db	4
  1490  00BE87  04                 	db	4
  1491  00BE88  4C                 	db	76
  1492  00BE89  50                 	db	80
  1493  00BE8A  50                 	db	80
  1494  00BE8B  50                 	db	80
  1495  00BE8C  3C                 	db	60
  1496  00BE8D  18                 	db	24
  1497  00BE8E  24                 	db	36
  1498  00BE8F  7C                 	db	124
  1499  00BE90  24                 	db	36
  1500  00BE91  18                 	db	24
  1501  00BE92  00                 	db	0
  1502  00BE93  6C                 	db	108
  1503  00BE94  10                 	db	16
  1504  00BE95  10                 	db	16
  1505  00BE96  6C                 	db	108
  1506  00BE97  7C                 	db	124
  1507  00BE98  40                 	db	64
  1508  00BE99  40                 	db	64
  1509  00BE9A  7C                 	db	124
  1510  00BE9B  C0                 	db	192
  1511  00BE9C  0C                 	db	12
  1512  00BE9D  10                 	db	16
  1513  00BE9E  10                 	db	16
  1514  00BE9F  10                 	db	16
  1515  00BEA0  7C                 	db	124
  1516  00BEA1  7C                 	db	124
  1517  00BEA2  40                 	db	64
  1518  00BEA3  78                 	db	120
  1519  00BEA4  40                 	db	64
  1520  00BEA5  7C                 	db	124
  1521  00BEA6  7C                 	db	124
  1522  00BEA7  40                 	db	64
  1523  00BEA8  78                 	db	120
  1524  00BEA9  40                 	db	64
  1525  00BEAA  FC                 	db	252
  1526  00BEAB  04                 	db	4
  1527  00BEAC  7C                 	db	124
  1528  00BEAD  50                 	db	80
  1529  00BEAE  50                 	db	80
  1530  00BEAF  20                 	db	32
  1531  00BEB0  7C                 	db	124
  1532  00BEB1  50                 	db	80
  1533  00BEB2  20                 	db	32
  1534  00BEB3  00                 	db	0
  1535  00BEB4  7C                 	db	124
  1536  00BEB5  00                 	db	0
  1537  00BEB6  7C                 	db	124
  1538  00BEB7  50                 	db	80
  1539  00BEB8  50                 	db	80
  1540  00BEB9  20                 	db	32
  1541  00BEBA  44                 	db	68
  1542  00BEBB  54                 	db	84
  1543  00BEBC  54                 	db	84
  1544  00BEBD  54                 	db	84
  1545  00BEBE  38                 	db	56
  1546  00BEBF  7C                 	db	124
  1547  00BEC0  10                 	db	16
  1548  00BEC1  38                 	db	56
  1549  00BEC2  44                 	db	68
  1550  00BEC3  38                 	db	56
  1551  00BEC4  48                 	db	72
  1552  00BEC5  54                 	db	84
  1553  00BEC6  34                 	db	52
  1554  00BEC7  14                 	db	20
  1555  00BEC8  7C                 	db	124
  1556  00BEC9                     __end_of_Font:
  1557                           	opt stack 0
  1558  00BEC9                     _FontS:
  1559                           	opt stack 0
  1560  00BEC9  00                 	db	0
  1561  00BECA  00                 	db	0
  1562  00BECB  00                 	db	0
  1563  00BECC  7C                 	db	124
  1564  00BECD  44                 	db	68
  1565  00BECE  7C                 	db	124
  1566  00BECF  00                 	db	0
  1567  00BED0  7C                 	db	124
  1568  00BED1  00                 	db	0
  1569  00BED2  74                 	db	116
  1570  00BED3  54                 	db	84
  1571  00BED4  5C                 	db	92
  1572  00BED5  54                 	db	84
  1573  00BED6  54                 	db	84
  1574  00BED7  7C                 	db	124
  1575  00BED8  1C                 	db	28
  1576  00BED9  10                 	db	16
  1577  00BEDA  7C                 	db	124
  1578  00BEDB  5C                 	db	92
  1579  00BEDC  54                 	db	84
  1580  00BEDD  74                 	db	116
  1581  00BEDE  7C                 	db	124
  1582  00BEDF  54                 	db	84
  1583  00BEE0  74                 	db	116
  1584  00BEE1  04                 	db	4
  1585  00BEE2  04                 	db	4
  1586  00BEE3  7C                 	db	124
  1587  00BEE4  7C                 	db	124
  1588  00BEE5  54                 	db	84
  1589  00BEE6  7C                 	db	124
  1590  00BEE7  5C                 	db	92
  1591  00BEE8  54                 	db	84
  1592  00BEE9  7C                 	db	124
  1593  00BEEA                     __end_of_FontS:
  1594                           	opt stack 0
  1595  00BEEA                     _OSS:
  1596                           	opt stack 0
  1597  00BEEA  03                 	db	3
  1598  00BEEB                     __end_of_OSS:
  1599                           	opt stack 0
  1600  0000                     _TMR0	set	4054
  1601  0000                     _SPBRG	set	4015
  1602  0000                     _SPBRGH	set	4016
  1603  0000                     _BAUDCONbits	set	4024
  1604  0000                     _RCSTAbits	set	4011
  1605  0000                     _TXSTAbits	set	4012
  1606  0000                     _TXREG	set	4013
  1607  0000                     _TRISCbits	set	3988
  1608  0000                     _PORTB	set	3969
  1609  0000                     _T1CONbits	set	4045
  1610  0000                     _LATDbits	set	3980
  1611  0000                     _TMR1L	set	4046
  1612  0000                     _TMR1H	set	4047
  1613  0000                     _PIR1bits	set	3998
  1614  0000                     _PIE1bits	set	3997
  1615  0000                     _T0CON	set	4053
  1616  0000                     _SSPBUF	set	4041
  1617  0000                     _SSPCON2	set	4037
  1618  0000                     _SSPADD	set	4040
  1619  0000                     _SSPSTAT	set	4039
  1620  0000                     _SSPCON1	set	4038
  1621  0000                     _PORTCbits	set	3970
  1622  0000                     _INTCON2bits	set	4081
  1623  0000                     _TRISD	set	3989
  1624  0000                     _LATD	set	3980
  1625  0000                     _INTCON2	set	4081
  1626  0000                     _TRISB	set	3987
  1627  0000                     _LATB	set	3978
  1628  0000                     _TRISC	set	3988
  1629  0000                     _LATC	set	3979
  1630  0000                     _INTCONbits	set	4082
  1631  0000                     _TXIF	set	31988
  1632  0000                     _ACKEN	set	32300
  1633  0000                     _ACKDT	set	32301
  1634  0000                     _RCEN	set	32299
  1635  0000                     _RSEN	set	32297
  1636  0000                     _SEN	set	32296
  1637  0000                     _PEN	set	32298
  1638  00BEEB  43                 	db	67	;'C'
  1639  00BEEC  6C                 	db	108	;'l'
  1640  00BEED  6F                 	db	111	;'o'
  1641  00BEEE  63                 	db	99	;'c'
  1642  00BEEF  6B                 	db	107	;'k'
  1643  00BEF0  20                 	db	32
  1644  00BEF1  76                 	db	118	;'v'
  1645  00BEF2  31                 	db	49	;'1'
  1646  00BEF3  2E                 	db	46
  1647  00BEF4  30                 	db	48	;'0'
  1648  00BEF5  20                 	db	32
  1649  00BEF6  62                 	db	98	;'b'
  1650  00BEF7  79                 	db	121	;'y'
  1651  00BEF8  20                 	db	32
  1652  00BEF9  49                 	db	73	;'I'
  1653  00BEFA  76                 	db	118	;'v'
  1654  00BEFB  61                 	db	97	;'a'
  1655  00BEFC  6E                 	db	110	;'n'
  1656  00BEFD  5F                 	db	95	;'_'
  1657  00BEFE  66                 	db	102	;'f'
  1658  00BEFF  64                 	db	100	;'d'
  1659  00BF00  00                 	db	0
  1660  00BF01                     STR_2:
  1661  00BF01  54                 	db	84	;'T'
  1662  00BF02  65                 	db	101	;'e'
  1663  00BF03  6D                 	db	109	;'m'
  1664  00BF04  70                 	db	112	;'p'
  1665  00BF05  65                 	db	101	;'e'
  1666  00BF06  72                 	db	114	;'r'
  1667  00BF07  61                 	db	97	;'a'
  1668  00BF08  74                 	db	116	;'t'
  1669  00BF09  75                 	db	117	;'u'
  1670  00BF0A  72                 	db	114	;'r'
  1671  00BF0B  65                 	db	101	;'e'
  1672  00BF0C  3A                 	db	58	;':'
  1673  00BF0D  20                 	db	32
  1674  00BF0E  25                 	db	37
  1675  00BF0F  64                 	db	100	;'d'
  1676  00BF10  0A                 	db	10
  1677  00BF11  0D                 	db	13
  1678  00BF12  20                 	db	32
  1679  00BF13  00                 	db	0
  1680  00BF14                     STR_17:
  1681  00BF14  54                 	db	84	;'T'
  1682  00BF15  65                 	db	101	;'e'
  1683  00BF16  6D                 	db	109	;'m'
  1684  00BF17  70                 	db	112	;'p'
  1685  00BF18  65                 	db	101	;'e'
  1686  00BF19  72                 	db	114	;'r'
  1687  00BF1A  42                 	db	66	;'B'
  1688  00BF1B  4D                 	db	77	;'M'
  1689  00BF1C  50                 	db	80	;'P'
  1690  00BF1D  3A                 	db	58	;':'
  1691  00BF1E  20                 	db	32
  1692  00BF1F  25                 	db	37
  1693  00BF20  64                 	db	100	;'d'
  1694  00BF21  0A                 	db	10
  1695  00BF22  0D                 	db	13
  1696  00BF23  00                 	db	0
  1697  00BF24                     STR_3:
  1698  00BF24  41                 	db	65	;'A'
  1699  00BF25  43                 	db	67	;'C'
  1700  00BF26  31                 	db	49	;'1'
  1701  00BF27  3A                 	db	58	;':'
  1702  00BF28  20                 	db	32
  1703  00BF29  25                 	db	37
  1704  00BF2A  64                 	db	100	;'d'
  1705  00BF2B  0A                 	db	10
  1706  00BF2C  0D                 	db	13
  1707  00BF2D  00                 	db	0
  1708  00BF2E                     STR_4:
  1709  00BF2E  41                 	db	65	;'A'
  1710  00BF2F  43                 	db	67	;'C'
  1711  00BF30  32                 	db	50	;'2'
  1712  00BF31  3A                 	db	58	;':'
  1713  00BF32  20                 	db	32
  1714  00BF33  25                 	db	37
  1715  00BF34  64                 	db	100	;'d'
  1716  00BF35  0A                 	db	10
  1717  00BF36  0D                 	db	13
  1718  00BF37  00                 	db	0
  1719  00BF38                     STR_5:
  1720  00BF38  41                 	db	65	;'A'
  1721  00BF39  43                 	db	67	;'C'
  1722  00BF3A  33                 	db	51	;'3'
  1723  00BF3B  3A                 	db	58	;':'
  1724  00BF3C  20                 	db	32
  1725  00BF3D  25                 	db	37
  1726  00BF3E  64                 	db	100	;'d'
  1727  00BF3F  0A                 	db	10
  1728  00BF40  0D                 	db	13
  1729  00BF41  00                 	db	0
  1730  00BF42                     STR_29:
  1731  00BF42  58                 	db	88	;'X'
  1732  00BF43  31                 	db	49	;'1'
  1733  00BF44  3A                 	db	58	;':'
  1734  00BF45  20                 	db	32
  1735  00BF46  25                 	db	37
  1736  00BF47  6C                 	db	108	;'l'
  1737  00BF48  69                 	db	105	;'i'
  1738  00BF49  0A                 	db	10
  1739  00BF4A  0D                 	db	13
  1740  00BF4B  00                 	db	0
  1741  00BF4C                     STR_31:
  1742  00BF4C  58                 	db	88	;'X'
  1743  00BF4D  32                 	db	50	;'2'
  1744  00BF4E  3A                 	db	58	;':'
  1745  00BF4F  20                 	db	32
  1746  00BF50  25                 	db	37
  1747  00BF51  6C                 	db	108	;'l'
  1748  00BF52  69                 	db	105	;'i'
  1749  00BF53  0A                 	db	10
  1750  00BF54  0D                 	db	13
  1751  00BF55  00                 	db	0
  1752  00BF56                     STR_22:
  1753  00BF56  42                 	db	66	;'B'
  1754  00BF57  33                 	db	51	;'3'
  1755  00BF58  3A                 	db	58	;':'
  1756  00BF59  20                 	db	32
  1757  00BF5A  25                 	db	37
  1758  00BF5B  6C                 	db	108	;'l'
  1759  00BF5C  69                 	db	105	;'i'
  1760  00BF5D  0A                 	db	10
  1761  00BF5E  0D                 	db	13
  1762  00BF5F  00                 	db	0
  1763  00BF60                     STR_26:
  1764  00BF60  42                 	db	66	;'B'
  1765  00BF61  34                 	db	52	;'4'
  1766  00BF62  3A                 	db	58	;':'
  1767  00BF63  20                 	db	32
  1768  00BF64  25                 	db	37
  1769  00BF65  6C                 	db	108	;'l'
  1770  00BF66  69                 	db	105	;'i'
  1771  00BF67  0A                 	db	10
  1772  00BF68  0D                 	db	13
  1773  00BF69  00                 	db	0
  1774  00BF6A                     STR_27:
  1775  00BF6A  42                 	db	66	;'B'
  1776  00BF6B  37                 	db	55	;'7'
  1777  00BF6C  3A                 	db	58	;':'
  1778  00BF6D  20                 	db	32
  1779  00BF6E  25                 	db	37
  1780  00BF6F  6C                 	db	108	;'l'
  1781  00BF70  69                 	db	105	;'i'
  1782  00BF71  0A                 	db	10
  1783  00BF72  0D                 	db	13
  1784  00BF73  00                 	db	0
  1785  00BF74                     STR_28:
  1786  00BF74  50                 	db	80	;'P'
  1787  00BF75  70                 	db	112	;'p'
  1788  00BF76  3A                 	db	58	;':'
  1789  00BF77  20                 	db	32
  1790  00BF78  25                 	db	37
  1791  00BF79  6C                 	db	108	;'l'
  1792  00BF7A  69                 	db	105	;'i'
  1793  00BF7B  0A                 	db	10
  1794  00BF7C  0D                 	db	13
  1795  00BF7D  00                 	db	0
  1796  00BF7E                     STR_6:
  1797  00BF7E  41                 	db	65	;'A'
  1798  00BF7F  43                 	db	67	;'C'
  1799  00BF80  34                 	db	52	;'4'
  1800  00BF81  3A                 	db	58	;':'
  1801  00BF82  20                 	db	32
  1802  00BF83  25                 	db	37
  1803  00BF84  75                 	db	117	;'u'
  1804  00BF85  0A                 	db	10
  1805  00BF86  0D                 	db	13
  1806  00BF87  00                 	db	0
  1807  00BF88                     STR_7:
  1808  00BF88  41                 	db	65	;'A'
  1809  00BF89  43                 	db	67	;'C'
  1810  00BF8A  35                 	db	53	;'5'
  1811  00BF8B  3A                 	db	58	;':'
  1812  00BF8C  20                 	db	32
  1813  00BF8D  25                 	db	37
  1814  00BF8E  75                 	db	117	;'u'
  1815  00BF8F  0A                 	db	10
  1816  00BF90  0D                 	db	13
  1817  00BF91  00                 	db	0
  1818  00BF92                     STR_8:
  1819  00BF92  41                 	db	65	;'A'
  1820  00BF93  43                 	db	67	;'C'
  1821  00BF94  36                 	db	54	;'6'
  1822  00BF95  3A                 	db	58	;':'
  1823  00BF96  20                 	db	32
  1824  00BF97  25                 	db	37
  1825  00BF98  75                 	db	117	;'u'
  1826  00BF99  0A                 	db	10
  1827  00BF9A  0D                 	db	13
  1828  00BF9B  00                 	db	0
  1829  00BF9C                     STR_9:
  1830  00BF9C  42                 	db	66	;'B'
  1831  00BF9D  31                 	db	49	;'1'
  1832  00BF9E  3A                 	db	58	;':'
  1833  00BF9F  20                 	db	32
  1834  00BFA0  25                 	db	37
  1835  00BFA1  64                 	db	100	;'d'
  1836  00BFA2  0A                 	db	10
  1837  00BFA3  0D                 	db	13
  1838  00BFA4  00                 	db	0
  1839  00BFA5                     STR_14:
  1840  00BFA5  58                 	db	88	;'X'
  1841  00BFA6  31                 	db	49	;'1'
  1842  00BFA7  3A                 	db	58	;':'
  1843  00BFA8  20                 	db	32
  1844  00BFA9  25                 	db	37
  1845  00BFAA  64                 	db	100	;'d'
  1846  00BFAB  0A                 	db	10
  1847  00BFAC  0D                 	db	13
  1848  00BFAD  00                 	db	0
  1849  00BFAE                     STR_10:
  1850  00BFAE  42                 	db	66	;'B'
  1851  00BFAF  32                 	db	50	;'2'
  1852  00BFB0  3A                 	db	58	;':'
  1853  00BFB1  20                 	db	32
  1854  00BFB2  25                 	db	37
  1855  00BFB3  64                 	db	100	;'d'
  1856  00BFB4  0A                 	db	10
  1857  00BFB5  0D                 	db	13
  1858  00BFB6  00                 	db	0
  1859  00BFB7                     STR_15:
  1860  00BFB7  58                 	db	88	;'X'
  1861  00BFB8  32                 	db	50	;'2'
  1862  00BFB9  3A                 	db	58	;':'
  1863  00BFBA  20                 	db	32
  1864  00BFBB  25                 	db	37
  1865  00BFBC  64                 	db	100	;'d'
  1866  00BFBD  0A                 	db	10
  1867  00BFBE  0D                 	db	13
  1868  00BFBF  00                 	db	0
  1869  00BFC0                     STR_21:
  1870  00BFC0  58                 	db	88	;'X'
  1871  00BFC1  33                 	db	51	;'3'
  1872  00BFC2  3A                 	db	58	;':'
  1873  00BFC3  20                 	db	32
  1874  00BFC4  25                 	db	37
  1875  00BFC5  64                 	db	100	;'d'
  1876  00BFC6  0A                 	db	10
  1877  00BFC7  0D                 	db	13
  1878  00BFC8  00                 	db	0
  1879  00BFC9                     STR_16:
  1880  00BFC9  42                 	db	66	;'B'
  1881  00BFCA  35                 	db	53	;'5'
  1882  00BFCB  3A                 	db	58	;':'
  1883  00BFCC  20                 	db	32
  1884  00BFCD  25                 	db	37
  1885  00BFCE  64                 	db	100	;'d'
  1886  00BFCF  0A                 	db	10
  1887  00BFD0  0D                 	db	13
  1888  00BFD1  00                 	db	0
  1889  00BFD2                     STR_18:
  1890  00BFD2  42                 	db	66	;'B'
  1891  00BFD3  36                 	db	54	;'6'
  1892  00BFD4  3A                 	db	58	;':'
  1893  00BFD5  20                 	db	32
  1894  00BFD6  25                 	db	37
  1895  00BFD7  64                 	db	100	;'d'
  1896  00BFD8  0A                 	db	10
  1897  00BFD9  0D                 	db	13
  1898  00BFDA  00                 	db	0
  1899  00BFDB                     STR_11:
  1900  00BFDB  4D                 	db	77	;'M'
  1901  00BFDC  42                 	db	66	;'B'
  1902  00BFDD  3A                 	db	58	;':'
  1903  00BFDE  20                 	db	32
  1904  00BFDF  25                 	db	37
  1905  00BFE0  64                 	db	100	;'d'
  1906  00BFE1  0A                 	db	10
  1907  00BFE2  0D                 	db	13
  1908  00BFE3  00                 	db	0
  1909  00BFE4                     STR_12:
  1910  00BFE4  4D                 	db	77	;'M'
  1911  00BFE5  43                 	db	67	;'C'
  1912  00BFE6  3A                 	db	58	;':'
  1913  00BFE7  20                 	db	32
  1914  00BFE8  25                 	db	37
  1915  00BFE9  64                 	db	100	;'d'
  1916  00BFEA  0A                 	db	10
  1917  00BFEB  0D                 	db	13
  1918  00BFEC  00                 	db	0
  1919  00BFED                     STR_13:
  1920  00BFED  4D                 	db	77	;'M'
  1921  00BFEE  44                 	db	68	;'D'
  1922  00BFEF  3A                 	db	58	;':'
  1923  00BFF0  20                 	db	32
  1924  00BFF1  25                 	db	37
  1925  00BFF2  64                 	db	100	;'d'
  1926  00BFF3  0A                 	db	10
  1927  00BFF4  0D                 	db	13
  1928  00BFF5  00                 	db	0
  1929  00BFF6                     STR_33:
  1930  00BFF6  50                 	db	80	;'P'
  1931  00BFF7  70                 	db	112	;'p'
  1932  00BFF8  3A                 	db	58	;':'
  1933  00BFF9  20                 	db	32
  1934  00BFFA  25                 	db	37
  1935  00BFFB  64                 	db	100	;'d'
  1936  00BFFC  0A                 	db	10
  1937  00BFFD  0D                 	db	13
  1938  00BFFE  00                 	db	0
  1939  0000                     
  1940                           ; #config settings
  1941  00BFFF  00                 	db	0	; dummy byte at the end
  1942  0000                     tosu	equ	0xFFF
  1943                           tosh	equ	0xFFE
  1944                           tosl	equ	0xFFD
  1945                           pclath	equ	0xFFA
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           prodh	equ	0xFF4
  1951                           prodl	equ	0xFF3
  1952                           intcon	equ	0xFF2
  1953                           intcon2	equ	0xFF1
  1954                           wreg	equ	0xFE8
  1955                           indf1	equ	0xFE7
  1956                           plusw1	equ	0xFE3
  1957                           fsr1h	equ	0xFE2
  1958                           fsr1l	equ	0xFE1
  1959                           indf2	equ	0xFDF
  1960                           postinc2	equ	0xFDE
  1961                           postdec2	equ	0xFDD
  1962                           plusw2	equ	0xFDB
  1963                           fsr2h	equ	0xFDA
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8
  1966                           
  1967                           	psect	cinit
  1968  0021EA                     __pcinit:
  1969                           	opt stack 0
  1970  0021EA                     start_initialization:
  1971                           	opt stack 0
  1972  0021EA                     __initialization:
  1973                           	opt stack 0
  1974                           
  1975                           ; Initialize objects allocated to COMRAM (1 bytes)
  1976                           ; load TBLPTR registers with __pidataCOMRAM
  1977  0021EA  0E5E               	movlw	low __pidataCOMRAM
  1978  0021EC  6EF6               	movwf	tblptrl,c
  1979  0021EE  0E28               	movlw	high __pidataCOMRAM
  1980  0021F0  6EF7               	movwf	tblptrh,c
  1981  0021F2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1982  0021F4  6EF8               	movwf	tblptru,c
  1983  0021F6  0009               	tblrd		*+	;fetch initializer
  1984  0021F8  CFF5 F070          	movff	tablat,__pdataCOMRAM
  1985                           
  1986                           ; Clear objects allocated to BANK1 (220 bytes)
  1987  0021FC  EE01  F000         	lfsr	0,__pbssBANK1
  1988  002200  0EDC               	movlw	220
  1989  002202                     clear_0:
  1990  002202  6AEE               	clrf	postinc0,c
  1991  002204  06E8               	decf	wreg,f,c
  1992  002206  E1FD               	bnz	clear_0
  1993                           
  1994                           ; Clear objects allocated to BANK0 (84 bytes)
  1995  002208  EE00  F080         	lfsr	0,__pbssBANK0
  1996  00220C  0E54               	movlw	84
  1997  00220E                     clear_1:
  1998  00220E  6AEE               	clrf	postinc0,c
  1999  002210  06E8               	decf	wreg,f,c
  2000  002212  E1FD               	bnz	clear_1
  2001                           
  2002                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  2003  002214  6A6F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  2004                           
  2005                           ; Clear objects allocated to COMRAM (32 bytes)
  2006  002216  EE00  F04F         	lfsr	0,__pbssCOMRAM
  2007  00221A  0E20               	movlw	32
  2008  00221C                     clear_2:
  2009  00221C  6AEE               	clrf	postinc0,c
  2010  00221E  06E8               	decf	wreg,f,c
  2011  002220  E1FD               	bnz	clear_2
  2012  002222                     end_of_initialization:
  2013                           	opt stack 0
  2014  002222                     __end_of__initialization:
  2015                           	opt stack 0
  2016  002222  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2017  002224  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2018  002226  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2019  002228  6EF8               	movwf	tblptru,c
  2020  00222A  0100               	movlb	0
  2021  00222C  EF5D  F010         	goto	_main	;jump to C main() function
  2022                           tosu	equ	0xFFF
  2023                           tosh	equ	0xFFE
  2024                           tosl	equ	0xFFD
  2025                           pclath	equ	0xFFA
  2026                           tblptru	equ	0xFF8
  2027                           tblptrh	equ	0xFF7
  2028                           tblptrl	equ	0xFF6
  2029                           tablat	equ	0xFF5
  2030                           prodh	equ	0xFF4
  2031                           prodl	equ	0xFF3
  2032                           intcon	equ	0xFF2
  2033                           intcon2	equ	0xFF1
  2034                           postinc0	equ	0xFEE
  2035                           wreg	equ	0xFE8
  2036                           indf1	equ	0xFE7
  2037                           plusw1	equ	0xFE3
  2038                           fsr1h	equ	0xFE2
  2039                           fsr1l	equ	0xFE1
  2040                           indf2	equ	0xFDF
  2041                           postinc2	equ	0xFDE
  2042                           postdec2	equ	0xFDD
  2043                           plusw2	equ	0xFDB
  2044                           fsr2h	equ	0xFDA
  2045                           fsr2l	equ	0xFD9
  2046                           status	equ	0xFD8
  2047                           
  2048                           	psect	bitbssCOMRAM
  2049  000378                     __pbitbssCOMRAM:
  2050                           	opt stack 0
  2051  000378                     _en_put:
  2052                           	opt stack 0
  2053  000378                     	ds	1
  2054  000379                     _show_digit:
  2055                           	opt stack 0
  2056  000379                     	ds	1
  2057                           tosu	equ	0xFFF
  2058                           tosh	equ	0xFFE
  2059                           tosl	equ	0xFFD
  2060                           pclath	equ	0xFFA
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           prodh	equ	0xFF4
  2066                           prodl	equ	0xFF3
  2067                           intcon	equ	0xFF2
  2068                           intcon2	equ	0xFF1
  2069                           postinc0	equ	0xFEE
  2070                           wreg	equ	0xFE8
  2071                           indf1	equ	0xFE7
  2072                           plusw1	equ	0xFE3
  2073                           fsr1h	equ	0xFE2
  2074                           fsr1l	equ	0xFE1
  2075                           indf2	equ	0xFDF
  2076                           postinc2	equ	0xFDE
  2077                           postdec2	equ	0xFDD
  2078                           plusw2	equ	0xFDB
  2079                           fsr2h	equ	0xFDA
  2080                           fsr2l	equ	0xFD9
  2081                           status	equ	0xFD8
  2082                           
  2083                           	psect	bssCOMRAM
  2084  00004F                     __pbssCOMRAM:
  2085                           	opt stack 0
  2086  00004F                     _TSTime:
  2087                           	opt stack 0
  2088  00004F                     	ds	7
  2089  000056                     _B6:
  2090                           	opt stack 0
  2091  000056                     	ds	4
  2092  00005A                     _X3:
  2093                           	opt stack 0
  2094  00005A                     	ds	4
  2095  00005E                     _X2:
  2096                           	opt stack 0
  2097  00005E                     	ds	4
  2098  000062                     _X1:
  2099                           	opt stack 0
  2100  000062                     	ds	4
  2101  000066                     _ac1:
  2102                           	opt stack 0
  2103  000066                     	ds	2
  2104  000068                     key_press@count:
  2105                           	opt stack 0
  2106  000068                     	ds	1
  2107  000069                     _Timer0Interrupt:
  2108                           	opt stack 0
  2109  000069                     	ds	1
  2110  00006A                     _arrayTail:
  2111                           	opt stack 0
  2112  00006A                     	ds	1
  2113  00006B                     _temperature:
  2114                           	opt stack 0
  2115  00006B                     	ds	2
  2116  00006D                     _time_flag:
  2117                           	opt stack 0
  2118  00006D                     	ds	1
  2119  00006E                     _timer_val:
  2120                           	opt stack 0
  2121  00006E                     	ds	1
  2122                           tosu	equ	0xFFF
  2123                           tosh	equ	0xFFE
  2124                           tosl	equ	0xFFD
  2125                           pclath	equ	0xFFA
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           prodh	equ	0xFF4
  2131                           prodl	equ	0xFF3
  2132                           intcon	equ	0xFF2
  2133                           intcon2	equ	0xFF1
  2134                           postinc0	equ	0xFEE
  2135                           wreg	equ	0xFE8
  2136                           indf1	equ	0xFE7
  2137                           plusw1	equ	0xFE3
  2138                           fsr1h	equ	0xFE2
  2139                           fsr1l	equ	0xFE1
  2140                           indf2	equ	0xFDF
  2141                           postinc2	equ	0xFDE
  2142                           postdec2	equ	0xFDD
  2143                           plusw2	equ	0xFDB
  2144                           fsr2h	equ	0xFDA
  2145                           fsr2l	equ	0xFD9
  2146                           status	equ	0xFD8
  2147                           
  2148                           	psect	dataCOMRAM
  2149  000070                     __pdataCOMRAM:
  2150                           	opt stack 0
  2151  000070                     _events:
  2152                           	opt stack 0
  2153  000070                     	ds	1
  2154                           tosu	equ	0xFFF
  2155                           tosh	equ	0xFFE
  2156                           tosl	equ	0xFFD
  2157                           pclath	equ	0xFFA
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           prodh	equ	0xFF4
  2163                           prodl	equ	0xFF3
  2164                           intcon	equ	0xFF2
  2165                           intcon2	equ	0xFF1
  2166                           postinc0	equ	0xFEE
  2167                           wreg	equ	0xFE8
  2168                           indf1	equ	0xFE7
  2169                           plusw1	equ	0xFE3
  2170                           fsr1h	equ	0xFE2
  2171                           fsr1l	equ	0xFE1
  2172                           indf2	equ	0xFDF
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           plusw2	equ	0xFDB
  2176                           fsr2h	equ	0xFDA
  2177                           fsr2l	equ	0xFD9
  2178                           status	equ	0xFD8
  2179                           
  2180                           	psect	bssBANK0
  2181  000080                     __pbssBANK0:
  2182                           	opt stack 0
  2183  000080                     _scratch:
  2184                           	opt stack 0
  2185  000080                     	ds	9
  2186  000089                     _B7:
  2187                           	opt stack 0
  2188  000089                     	ds	4
  2189  00008D                     _B5:
  2190                           	opt stack 0
  2191  00008D                     	ds	4
  2192  000091                     _B4:
  2193                           	opt stack 0
  2194  000091                     	ds	4
  2195  000095                     _B3:
  2196                           	opt stack 0
  2197  000095                     	ds	4
  2198  000099                     _md:
  2199                           	opt stack 0
  2200  000099                     	ds	2
  2201  00009B                     _mc:
  2202                           	opt stack 0
  2203  00009B                     	ds	2
  2204  00009D                     _mb:
  2205                           	opt stack 0
  2206  00009D                     	ds	2
  2207  00009F                     _b2:
  2208                           	opt stack 0
  2209  00009F                     	ds	2
  2210  0000A1                     _b1:
  2211                           	opt stack 0
  2212  0000A1                     	ds	2
  2213  0000A3                     _ac6:
  2214                           	opt stack 0
  2215  0000A3                     	ds	2
  2216  0000A5                     _ac5:
  2217                           	opt stack 0
  2218  0000A5                     	ds	2
  2219  0000A7                     _ac4:
  2220                           	opt stack 0
  2221  0000A7                     	ds	2
  2222  0000A9                     _ac3:
  2223                           	opt stack 0
  2224  0000A9                     	ds	2
  2225  0000AB                     _ac2:
  2226                           	opt stack 0
  2227  0000AB                     	ds	2
  2228  0000AD                     _Dis_Buff:
  2229                           	opt stack 0
  2230  0000AD                     	ds	32
  2231  0000CD                     _TTime:
  2232                           	opt stack 0
  2233  0000CD                     	ds	7
  2234                           tosu	equ	0xFFF
  2235                           tosh	equ	0xFFE
  2236                           tosl	equ	0xFFD
  2237                           pclath	equ	0xFFA
  2238                           tblptru	equ	0xFF8
  2239                           tblptrh	equ	0xFF7
  2240                           tblptrl	equ	0xFF6
  2241                           tablat	equ	0xFF5
  2242                           prodh	equ	0xFF4
  2243                           prodl	equ	0xFF3
  2244                           intcon	equ	0xFF2
  2245                           intcon2	equ	0xFF1
  2246                           postinc0	equ	0xFEE
  2247                           wreg	equ	0xFE8
  2248                           indf1	equ	0xFE7
  2249                           plusw1	equ	0xFE3
  2250                           fsr1h	equ	0xFE2
  2251                           fsr1l	equ	0xFE1
  2252                           indf2	equ	0xFDF
  2253                           postinc2	equ	0xFDE
  2254                           postdec2	equ	0xFDD
  2255                           plusw2	equ	0xFDB
  2256                           fsr2h	equ	0xFDA
  2257                           fsr2l	equ	0xFD9
  2258                           status	equ	0xFD8
  2259                           
  2260                           	psect	bssBANK1
  2261  000100                     __pbssBANK1:
  2262                           	opt stack 0
  2263  000100                     _TaskArray:
  2264                           	opt stack 0
  2265  000100                     	ds	120
  2266  000178                     _text_buf:
  2267                           	opt stack 0
  2268  000178                     	ds	100
  2269                           tosu	equ	0xFFF
  2270                           tosh	equ	0xFFE
  2271                           tosl	equ	0xFFD
  2272                           pclath	equ	0xFFA
  2273                           tblptru	equ	0xFF8
  2274                           tblptrh	equ	0xFF7
  2275                           tblptrl	equ	0xFF6
  2276                           tablat	equ	0xFF5
  2277                           prodh	equ	0xFF4
  2278                           prodl	equ	0xFF3
  2279                           intcon	equ	0xFF2
  2280                           intcon2	equ	0xFF1
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           indf1	equ	0xFE7
  2284                           plusw1	equ	0xFE3
  2285                           fsr1h	equ	0xFE2
  2286                           fsr1l	equ	0xFE1
  2287                           indf2	equ	0xFDF
  2288                           postinc2	equ	0xFDE
  2289                           postdec2	equ	0xFDD
  2290                           plusw2	equ	0xFDB
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295                           	psect	cstackBANK0
  2296  0000D4                     __pcstackBANK0:
  2297                           	opt stack 0
  2298  0000D4                     _BMP085GetPressure$2351:
  2299                           	opt stack 0
  2300                           
  2301                           ; 4 bytes @ 0x0
  2302  0000D4                     	ds	4
  2303  0000D8                     BMP085GetPressure@Pp:
  2304                           	opt stack 0
  2305                           
  2306                           ; 4 bytes @ 0x4
  2307  0000D8                     	ds	4
  2308  0000DC                     ??_RTOS_DispatchTask:
  2309                           
  2310                           ; 1 bytes @ 0x8
  2311  0000DC                     	ds	4
  2312  0000E0                     RTOS_DispatchTask@function:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0xC
  2316  0000E0                     	ds	2
  2317  0000E2                     RTOS_DispatchTask@j:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0xE
  2321  0000E2                     	ds	1
  2322  0000E3                     RTOS_DispatchTask@i:
  2323                           	opt stack 0
  2324                           
  2325                           ; 1 bytes @ 0xF
  2326  0000E3                     	ds	1
  2327  0000E4                     ??_main:
  2328                           
  2329                           ; 1 bytes @ 0x10
  2330  0000E4                     	ds	1
  2331                           tosu	equ	0xFFF
  2332                           tosh	equ	0xFFE
  2333                           tosl	equ	0xFFD
  2334                           pclath	equ	0xFFA
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           prodh	equ	0xFF4
  2340                           prodl	equ	0xFF3
  2341                           intcon	equ	0xFF2
  2342                           intcon2	equ	0xFF1
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           indf1	equ	0xFE7
  2346                           plusw1	equ	0xFE3
  2347                           fsr1h	equ	0xFE2
  2348                           fsr1l	equ	0xFE1
  2349                           indf2	equ	0xFDF
  2350                           postinc2	equ	0xFDE
  2351                           postdec2	equ	0xFDD
  2352                           plusw2	equ	0xFDB
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357                           	psect	cstackCOMRAM
  2358  000001                     __pcstackCOMRAM:
  2359                           	opt stack 0
  2360  000001                     i2RTOS_SetTask@taskFunc:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x0
  2364  000001                     	ds	2
  2365  000003                     i2RTOS_SetTask@taskDelay:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x2
  2369  000003                     	ds	2
  2370  000005                     i2RTOS_SetTask@taskPeriod:
  2371                           	opt stack 0
  2372                           
  2373                           ; 2 bytes @ 0x4
  2374  000005                     	ds	2
  2375  000007                     
  2376                           ; 1 bytes @ 0x6
  2377  000007                     	ds	2
  2378  000009                     i2RTOS_SetTask@i:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x8
  2382  000009                     	ds	1
  2383  00000A                     ??_INTERRUPT_InterruptManager:
  2384                           
  2385                           ; 1 bytes @ 0x9
  2386  00000A                     	ds	5
  2387  00000F                     ??_ow_reset:
  2388  00000F                     ??_read_byte:
  2389  00000F                     ??_I2C_Master_Wait:
  2390  00000F                     ??_bcd_to_decimal:
  2391  00000F                     ?___lwdiv:
  2392                           	opt stack 0
  2393  00000F                     ?___lmul:
  2394                           	opt stack 0
  2395  00000F                     ?___lldiv:
  2396                           	opt stack 0
  2397  00000F                     Send_Byte_7221@dat:
  2398                           	opt stack 0
  2399  00000F                     pixel_on@y:
  2400                           	opt stack 0
  2401  00000F                     pixel_off@y:
  2402                           	opt stack 0
  2403  00000F                     clear_matrix@i:
  2404                           	opt stack 0
  2405  00000F                     key_press@key:
  2406                           	opt stack 0
  2407  00000F                     write_bit@bitval:
  2408                           	opt stack 0
  2409  00000F                     putch@data:
  2410                           	opt stack 0
  2411  00000F                     ___lbdiv@divisor:
  2412                           	opt stack 0
  2413  00000F                     RTOS_SetTask@taskFunc:
  2414                           	opt stack 0
  2415  00000F                     RTOS_DeleteTask@taskFunc:
  2416                           	opt stack 0
  2417  00000F                     ___lwdiv@dividend:
  2418                           	opt stack 0
  2419  00000F                     ___lmul@multiplier:
  2420                           	opt stack 0
  2421  00000F                     ___lldiv@dividend:
  2422                           	opt stack 0
  2423                           
  2424                           ; 4 bytes @ 0xE
  2425  00000F                     	ds	1
  2426  000010                     ??_write_byte:
  2427  000010                     ??_pixel_on:
  2428  000010                     ??_pixel_off:
  2429  000010                     I2C_Master_Write@d:
  2430                           	opt stack 0
  2431  000010                     I2C_Master_Read@a:
  2432                           	opt stack 0
  2433  000010                     Send_Byte_7221@i:
  2434                           	opt stack 0
  2435  000010                     bcd_to_decimal@d:
  2436                           	opt stack 0
  2437  000010                     ow_reset@presence:
  2438                           	opt stack 0
  2439  000010                     ___lbdiv@dividend:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0xF
  2443  000010                     	ds	1
  2444  000011                     ??_RTOS_DeleteTask:
  2445  000011                     I2C_Master_Read@temp:
  2446                           	opt stack 0
  2447  000011                     Cmd7221@val:
  2448                           	opt stack 0
  2449  000011                     Update_Matrix@buf:
  2450                           	opt stack 0
  2451  000011                     read_byte@val:
  2452                           	opt stack 0
  2453  000011                     BMP085WriteByte@data:
  2454                           	opt stack 0
  2455  000011                     ___lbdiv@counter:
  2456                           	opt stack 0
  2457  000011                     RTOS_SetTask@taskDelay:
  2458                           	opt stack 0
  2459  000011                     ___lwdiv@divisor:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x10
  2463  000011                     	ds	1
  2464  000012                     ?_bmp085ReadInt:
  2465                           	opt stack 0
  2466  000012                     Cmd7221@adr:
  2467                           	opt stack 0
  2468  000012                     Update_Matrix@data:
  2469                           	opt stack 0
  2470  000012                     pixel_on@x:
  2471                           	opt stack 0
  2472  000012                     DS3231_Read@address:
  2473                           	opt stack 0
  2474  000012                     read_byte@i:
  2475                           	opt stack 0
  2476  000012                     write_byte@val:
  2477                           	opt stack 0
  2478  000012                     BMP085ReadByte@address:
  2479                           	opt stack 0
  2480  000012                     BMP085WriteByte@address:
  2481                           	opt stack 0
  2482  000012                     ___lbdiv@quotient:
  2483                           	opt stack 0
  2484                           
  2485                           ; 1 bytes @ 0x11
  2486  000012                     	ds	1
  2487  000013                     Cmd7221@i:
  2488                           	opt stack 0
  2489  000013                     Update_Matrix@j:
  2490                           	opt stack 0
  2491  000013                     pixel_off@x:
  2492                           	opt stack 0
  2493  000013                     DS3231_Read@value:
  2494                           	opt stack 0
  2495  000013                     write_byte@temp:
  2496                           	opt stack 0
  2497  000013                     BMP085ReadByte@data:
  2498                           	opt stack 0
  2499  000013                     ___lbmod@divisor:
  2500                           	opt stack 0
  2501  000013                     ___lwdiv@counter:
  2502                           	opt stack 0
  2503  000013                     RTOS_SetTask@taskPeriod:
  2504                           	opt stack 0
  2505  000013                     ___lmul@multiplicand:
  2506                           	opt stack 0
  2507  000013                     ___lldiv@divisor:
  2508                           	opt stack 0
  2509                           
  2510                           ; 4 bytes @ 0x12
  2511  000013                     	ds	1
  2512  000014                     ??_bmp085ReadInt:
  2513  000014                     ?_bmp085ReadUP:
  2514                           	opt stack 0
  2515  000014                     Update_Matrix@i:
  2516                           	opt stack 0
  2517  000014                     pic_to_led@pic:
  2518                           	opt stack 0
  2519  000014                     getTime@p3:
  2520                           	opt stack 0
  2521  000014                     getDate@p4:
  2522                           	opt stack 0
  2523  000014                     write_byte@i:
  2524                           	opt stack 0
  2525  000014                     ___lbmod@dividend:
  2526                           	opt stack 0
  2527  000014                     ___lwdiv@quotient:
  2528                           	opt stack 0
  2529                           
  2530                           ; 2 bytes @ 0x13
  2531  000014                     	ds	1
  2532  000015                     ??_pic_to_led:
  2533  000015                     ??_scroll_left:
  2534  000015                     getTime@p2:
  2535                           	opt stack 0
  2536  000015                     getDate@p3:
  2537                           	opt stack 0
  2538  000015                     ___lbmod@counter:
  2539                           	opt stack 0
  2540                           
  2541                           ; 1 bytes @ 0x14
  2542  000015                     	ds	1
  2543  000016                     ?___lwmod:
  2544                           	opt stack 0
  2545  000016                     scroll_left@j:
  2546                           	opt stack 0
  2547  000016                     getTime@p1:
  2548                           	opt stack 0
  2549  000016                     getDate@p2:
  2550                           	opt stack 0
  2551  000016                     bmp085ReadInt@address:
  2552                           	opt stack 0
  2553  000016                     ___lbmod@rem:
  2554                           	opt stack 0
  2555  000016                     ___lwmod@dividend:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x15
  2559  000016                     	ds	1
  2560  000017                     ??_FillBuf:
  2561  000017                     ??_decimal_to_bcd:
  2562  000017                     RTOS_SetTask@i:
  2563                           	opt stack 0
  2564  000017                     RTOS_DeleteTask@i:
  2565                           	opt stack 0
  2566  000017                     pic_to_led@mask:
  2567                           	opt stack 0
  2568  000017                     putchar_b_buf@symbol:
  2569                           	opt stack 0
  2570  000017                     putchar_down_s@symbol:
  2571                           	opt stack 0
  2572  000017                     scroll_left@k:
  2573                           	opt stack 0
  2574  000017                     getDate@p1:
  2575                           	opt stack 0
  2576  000017                     bmp085ReadInt@msb:
  2577                           	opt stack 0
  2578  000017                     ___lmul@product:
  2579                           	opt stack 0
  2580  000017                     ___lldiv@quotient:
  2581                           	opt stack 0
  2582                           
  2583                           ; 4 bytes @ 0x16
  2584  000017                     	ds	1
  2585  000018                     ??_putchar_b_buf:
  2586  000018                     ??_putchar_down_s:
  2587  000018                     ??_bmp085ReadUP:
  2588  000018                     pic_to_led@x:
  2589                           	opt stack 0
  2590  000018                     scroll_left@speed:
  2591                           	opt stack 0
  2592  000018                     ___lwmod@divisor:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x17
  2596  000018                     	ds	1
  2597  000019                     pic_to_led@j:
  2598                           	opt stack 0
  2599  000019                     FillBuf@i:
  2600                           	opt stack 0
  2601  000019                     scroll_left@i:
  2602                           	opt stack 0
  2603  000019                     decimal_to_bcd@d:
  2604                           	opt stack 0
  2605  000019                     bmp085ReadInt@lsb:
  2606                           	opt stack 0
  2607                           
  2608                           ; 2 bytes @ 0x18
  2609  000019                     	ds	1
  2610  00001A                     pic_to_led@i:
  2611                           	opt stack 0
  2612  00001A                     putchar_b_buf@mask:
  2613                           	opt stack 0
  2614  00001A                     DS3231_Write@value:
  2615                           	opt stack 0
  2616  00001A                     ___lwmod@counter:
  2617                           	opt stack 0
  2618                           
  2619                           ; 1 bytes @ 0x19
  2620  00001A                     	ds	1
  2621  00001B                     ?_BMP085ReadUT:
  2622                           	opt stack 0
  2623  00001B                     ?___aldiv:
  2624                           	opt stack 0
  2625  00001B                     putchar_b_buf@x:
  2626                           	opt stack 0
  2627  00001B                     putchar_down@symbol:
  2628                           	opt stack 0
  2629  00001B                     DS3231_Write@address:
  2630                           	opt stack 0
  2631  00001B                     ___lldiv@counter:
  2632                           	opt stack 0
  2633  00001B                     ___aldiv@dividend:
  2634                           	opt stack 0
  2635                           
  2636                           ; 4 bytes @ 0x1A
  2637  00001B                     	ds	1
  2638  00001C                     ??_putchar_down:
  2639  00001C                     ?___llmod:
  2640                           	opt stack 0
  2641  00001C                     putchar_b_buf@j:
  2642                           	opt stack 0
  2643  00001C                     setTime@mSet:
  2644                           	opt stack 0
  2645  00001C                     setDate@dateSet:
  2646                           	opt stack 0
  2647  00001C                     ___llmod@dividend:
  2648                           	opt stack 0
  2649                           
  2650                           ; 4 bytes @ 0x1B
  2651  00001C                     	ds	1
  2652  00001D                     putchar_b_buf@i:
  2653                           	opt stack 0
  2654  00001D                     putchar_down_s@x:
  2655                           	opt stack 0
  2656  00001D                     setTime@sSet:
  2657                           	opt stack 0
  2658  00001D                     setDate@monthSet:
  2659                           	opt stack 0
  2660                           
  2661                           ; 1 bytes @ 0x1C
  2662  00001D                     	ds	1
  2663  00001E                     putchar_down_s@k:
  2664                           	opt stack 0
  2665  00001E                     setTime@hSet:
  2666                           	opt stack 0
  2667  00001E                     setDate@yearSet:
  2668                           	opt stack 0
  2669                           
  2670                           ; 1 bytes @ 0x1D
  2671  00001E                     	ds	1
  2672  00001F                     ??_BMP085ReadUT:
  2673  00001F                     putchar_down_s@j:
  2674                           	opt stack 0
  2675  00001F                     setDate@daySet:
  2676                           	opt stack 0
  2677  00001F                     ___aldiv@divisor:
  2678                           	opt stack 0
  2679                           
  2680                           ; 4 bytes @ 0x1E
  2681  00001F                     	ds	1
  2682  000020                     putchar_down_s@i:
  2683                           	opt stack 0
  2684  000020                     ___llmod@divisor:
  2685                           	opt stack 0
  2686                           
  2687                           ; 4 bytes @ 0x1F
  2688  000020                     	ds	1
  2689  000021                     putchar_down@x:
  2690                           	opt stack 0
  2691                           
  2692                           ; 1 bytes @ 0x20
  2693  000021                     	ds	1
  2694  000022                     putchar_down@k:
  2695                           	opt stack 0
  2696                           
  2697                           ; 1 bytes @ 0x21
  2698  000022                     	ds	1
  2699  000023                     putchar_down@j:
  2700                           	opt stack 0
  2701  000023                     ___aldiv@counter:
  2702                           	opt stack 0
  2703                           
  2704                           ; 1 bytes @ 0x22
  2705  000023                     	ds	1
  2706  000024                     putchar_down@i:
  2707                           	opt stack 0
  2708  000024                     ___aldiv@sign:
  2709                           	opt stack 0
  2710  000024                     ___llmod@counter:
  2711                           	opt stack 0
  2712                           
  2713                           ; 1 bytes @ 0x23
  2714  000024                     	ds	1
  2715  000025                     ??_home_temp:
  2716  000025                     ?__doprnt:
  2717                           	opt stack 0
  2718  000025                     __doprnt@pb:
  2719                           	opt stack 0
  2720  000025                     ___aldiv@quotient:
  2721                           	opt stack 0
  2722                           
  2723                           ; 4 bytes @ 0x24
  2724  000025                     	ds	1
  2725  000026                     __doprnt@f:
  2726                           	opt stack 0
  2727                           
  2728                           ; 2 bytes @ 0x25
  2729  000026                     	ds	2
  2730  000028                     __doprnt@ap:
  2731                           	opt stack 0
  2732  000028                     bmp085ReadUP@msb:
  2733                           	opt stack 0
  2734                           
  2735                           ; 4 bytes @ 0x27
  2736  000028                     	ds	1
  2737  000029                     ??__doprnt:
  2738                           
  2739                           ; 1 bytes @ 0x28
  2740  000029                     	ds	2
  2741  00002B                     __doprnt@prec:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x2A
  2745  00002B                     	ds	1
  2746  00002C                     bmp085ReadUP@lsb:
  2747                           	opt stack 0
  2748                           
  2749                           ; 4 bytes @ 0x2B
  2750  00002C                     	ds	1
  2751  00002D                     __doprnt@val:
  2752                           	opt stack 0
  2753                           
  2754                           ; 4 bytes @ 0x2C
  2755  00002D                     	ds	3
  2756  000030                     bmp085ReadUP@xlsb:
  2757                           	opt stack 0
  2758                           
  2759                           ; 4 bytes @ 0x2F
  2760  000030                     	ds	1
  2761  000031                     __doprnt@flag:
  2762                           	opt stack 0
  2763                           
  2764                           ; 1 bytes @ 0x30
  2765  000031                     	ds	1
  2766  000032                     __doprnt@c:
  2767                           	opt stack 0
  2768                           
  2769                           ; 1 bytes @ 0x31
  2770  000032                     	ds	1
  2771  000033                     ?_printf:
  2772                           	opt stack 0
  2773  000033                     printf@f:
  2774                           	opt stack 0
  2775                           
  2776                           ; 2 bytes @ 0x32
  2777  000033                     	ds	1
  2778  000034                     bmp085ReadUP@p:
  2779                           	opt stack 0
  2780                           
  2781                           ; 4 bytes @ 0x33
  2782  000034                     	ds	5
  2783  000039                     printf@ap:
  2784                           	opt stack 0
  2785                           
  2786                           ; 1 bytes @ 0x38
  2787  000039                     	ds	1
  2788  00003A                     printf@pb:
  2789                           	opt stack 0
  2790                           
  2791                           ; 4 bytes @ 0x39
  2792  00003A                     	ds	4
  2793  00003E                     ??_bmp085Calibration:
  2794  00003E                     ?_BMP085GetPressure:
  2795                           	opt stack 0
  2796  00003E                     ?_BMP085GetTemp:
  2797                           	opt stack 0
  2798  00003E                     readTemp_Single@buf:
  2799                           	opt stack 0
  2800  00003E                     BMP085GetTemp@_tu:
  2801                           	opt stack 0
  2802  00003E                     BMP085GetPressure@_pu:
  2803                           	opt stack 0
  2804                           
  2805                           ; 4 bytes @ 0x3D
  2806  00003E                     	ds	1
  2807  00003F                     readTemp_Single@time_flag:
  2808                           	opt stack 0
  2809                           
  2810                           ; 1 bytes @ 0x3E
  2811  00003F                     	ds	1
  2812  000040                     readTemp_Single@timer_val:
  2813                           	opt stack 0
  2814                           
  2815                           ; 1 bytes @ 0x3F
  2816  000040                     	ds	1
  2817  000041                     ??_readTemp_Single:
  2818                           
  2819                           ; 1 bytes @ 0x40
  2820  000041                     	ds	1
  2821  000042                     ??_BMP085GetTemp:
  2822  000042                     ??_BMP085GetPressure:
  2823                           
  2824                           ; 1 bytes @ 0x41
  2825  000042                     	ds	1
  2826  000043                     readTemp_Single@fptmp:
  2827                           	opt stack 0
  2828                           
  2829                           ; 1 bytes @ 0x42
  2830  000043                     	ds	1
  2831  000044                     readTemp_Single@tmp:
  2832                           	opt stack 0
  2833                           
  2834                           ; 1 bytes @ 0x43
  2835  000044                     	ds	1
  2836  000045                     readTemp_Single@i:
  2837                           	opt stack 0
  2838                           
  2839                           ; 1 bytes @ 0x44
  2840  000045                     	ds	1
  2841  000046                     readTemp_Single@temp:
  2842                           	opt stack 0
  2843                           
  2844                           ; 2 bytes @ 0x45
  2845  000046                     	ds	4
  2846  00004A                     BMP085GetTemp@Tt:
  2847                           	opt stack 0
  2848                           
  2849                           ; 4 bytes @ 0x49
  2850  00004A                     	ds	4
  2851  00004E                     BMP085Pressure@getTemp:
  2852                           	opt stack 0
  2853                           
  2854                           ; 1 bytes @ 0x4D
  2855  00004E                     	ds	1
  2856  00004F                     tosu	equ	0xFFF
  2857                           tosh	equ	0xFFE
  2858                           tosl	equ	0xFFD
  2859                           pclath	equ	0xFFA
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           prodh	equ	0xFF4
  2865                           prodl	equ	0xFF3
  2866                           intcon	equ	0xFF2
  2867                           intcon2	equ	0xFF1
  2868                           postinc0	equ	0xFEE
  2869                           wreg	equ	0xFE8
  2870                           indf1	equ	0xFE7
  2871                           plusw1	equ	0xFE3
  2872                           fsr1h	equ	0xFE2
  2873                           fsr1l	equ	0xFE1
  2874                           indf2	equ	0xFDF
  2875                           postinc2	equ	0xFDE
  2876                           postdec2	equ	0xFDD
  2877                           plusw2	equ	0xFDB
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           status	equ	0xFD8
  2881                           
  2882                           ; 1 bytes @ 0x4E
  2883 ;;
  2884 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2885 ;;
  2886 ;; *************** function _main *****************
  2887 ;; Defined at:
  2888 ;;		line 19 in file "main.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;		None
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 3F/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;Total ram usage:        1 bytes
  2907 ;; Hardware stack levels required when called:   10
  2908 ;; This function calls:
  2909 ;;		_RTOS_DispatchTask
  2910 ;;		_RTOS_SetTask
  2911 ;;		_SYSTEM_Initialize
  2912 ;;		_clear_matrix
  2913 ;; This function is called by:
  2914 ;;		Startup code after reset
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text0
  2919  0020BA                     __ptext0:
  2920                           	opt stack 0
  2921  0020BA                     _main:
  2922                           	opt stack 21
  2923                           
  2924                           ;main.c: 20: _delay((unsigned long)((10)*(40000000/4000.0)));
  2925                           
  2926                           ;incstack = 0
  2927  0020BA  0E82               	movlw	130
  2928  0020BC  0100               	movlb	0	; () banked
  2929  0020BE  6FE4               	movwf	??_main& (0+255),b
  2930  0020C0  0EDD               	movlw	221
  2931  0020C2                     u4797:
  2932  0020C2  2EE8               	decfsz	wreg,f,c
  2933  0020C4  D7FE               	bra	u4797
  2934  0020C6  2FE4               	decfsz	??_main& (0+255),f,b
  2935  0020C8  D7FC               	bra	u4797
  2936  0020CA  D000               	nop2	
  2937                           
  2938                           ;main.c: 22: SYSTEM_Initialize();
  2939  0020CC  EC94  F012         	call	_SYSTEM_Initialize	;wreg free
  2940                           
  2941                           ;main.c: 27: clear_matrix();
  2942  0020D0  ECE1  F013         	call	_clear_matrix	;wreg free
  2943                           
  2944                           ;main.c: 30: (INTCONbits.GIE = 0);
  2945  0020D4  9EF2               	bcf	intcon,7,c	;volatile
  2946                           
  2947                           ;main.c: 31: RTOS_SetTask(time_led, 100, 20);
  2948  0020D6  0EE2               	movlw	low _time_led
  2949  0020D8  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  2950  0020DA  0E18               	movlw	high _time_led
  2951  0020DC  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  2952  0020DE  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  2953  0020E0  0E64               	movlw	100
  2954  0020E2  6E11               	movwf	RTOS_SetTask@taskDelay,c
  2955  0020E4  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  2956  0020E6  0E14               	movlw	20
  2957  0020E8  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  2958  0020EA  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  2959                           
  2960                           ;main.c: 32: RTOS_SetTask(key_press,0,1);
  2961  0020EE  0E30               	movlw	low _key_press
  2962  0020F0  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  2963  0020F2  0E22               	movlw	high _key_press
  2964  0020F4  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  2965  0020F6  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  2966  0020F8  6A11               	clrf	RTOS_SetTask@taskDelay,c
  2967  0020FA  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  2968  0020FC  0E01               	movlw	1
  2969  0020FE  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  2970  002100  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  2971                           
  2972                           ;main.c: 33: (INTCONbits.GIE = 1);
  2973  002104  8EF2               	bsf	intcon,7,c	;volatile
  2974  002106                     l6380:
  2975                           
  2976                           ;main.c: 36: {
  2977                           ;main.c: 37: RTOS_DispatchTask();
  2978  002106  EC88  F00B         	call	_RTOS_DispatchTask	;wreg free
  2979  00210A  D7FD               	goto	l6380
  2980  00210C                     __end_of_main:
  2981                           	opt stack 0
  2982                           tosu	equ	0xFFF
  2983                           tosh	equ	0xFFE
  2984                           tosl	equ	0xFFD
  2985                           pclath	equ	0xFFA
  2986                           tblptru	equ	0xFF8
  2987                           tblptrh	equ	0xFF7
  2988                           tblptrl	equ	0xFF6
  2989                           tablat	equ	0xFF5
  2990                           prodh	equ	0xFF4
  2991                           prodl	equ	0xFF3
  2992                           intcon	equ	0xFF2
  2993                           intcon2	equ	0xFF1
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           indf1	equ	0xFE7
  2997                           plusw1	equ	0xFE3
  2998                           fsr1h	equ	0xFE2
  2999                           fsr1l	equ	0xFE1
  3000                           indf2	equ	0xFDF
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           plusw2	equ	0xFDB
  3004                           fsr2h	equ	0xFDA
  3005                           fsr2l	equ	0xFD9
  3006                           status	equ	0xFD8
  3007                           
  3008 ;; *************** function _SYSTEM_Initialize *****************
  3009 ;; Defined at:
  3010 ;;		line 64 in file "init.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;		None
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;		None
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;Total ram usage:        0 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    7
  3031 ;; This function calls:
  3032 ;;		_DS3231_init
  3033 ;;		_I2C_Init
  3034 ;;		_Init7221
  3035 ;;		_Interrupt_Init
  3036 ;;		_Port_Init
  3037 ;;		_RTOS_Init
  3038 ;;		_TMR1Init
  3039 ;;		_bmp085Calibration
  3040 ;;		_init_ds18b20
  3041 ;;		_init_uart
  3042 ;; This function is called by:
  3043 ;;		_main
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text1
  3048  002528                     __ptext1:
  3049                           	opt stack 0
  3050  002528                     _SYSTEM_Initialize:
  3051                           	opt stack 23
  3052                           
  3053                           ;init.c: 67: Port_Init();
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;incstack = 0
  3057  002528  EC73  F013         	call	_Port_Init	;wreg free
  3058                           
  3059                           ;init.c: 68: I2C_Init();
  3060  00252C  ECB8  F013         	call	_I2C_Init	;wreg free
  3061                           
  3062                           ;init.c: 69: Init7221();
  3063  002530  EC39  F012         	call	_Init7221	;wreg free
  3064                           
  3065                           ;init.c: 70: TMR1Init();
  3066  002534  EC03  F014         	call	_TMR1Init	;wreg free
  3067                           
  3068                           ;init.c: 71: Interrupt_Init();
  3069  002538  EC29  F014         	call	_Interrupt_Init	;wreg free
  3070                           
  3071                           ;init.c: 72: DS3231_init();
  3072  00253C  ECD8  F013         	call	_DS3231_init	;wreg free
  3073                           
  3074                           ;init.c: 73: init_ds18b20();
  3075  002540  ECA8  F012         	call	_init_ds18b20	;wreg free
  3076                           
  3077                           ;init.c: 74: RTOS_Init();
  3078  002544  ECF3  F013         	call	_RTOS_Init	;wreg free
  3079                           
  3080                           ;init.c: 75: init_uart();
  3081  002548  ECAB  F013         	call	_init_uart	;wreg free
  3082                           
  3083                           ;init.c: 76: bmp085Calibration();
  3084  00254C  EFE3  F005         	goto	_bmp085Calibration	;wreg free
  3085  002550                     __end_of_SYSTEM_Initialize:
  3086                           	opt stack 0
  3087                           tosu	equ	0xFFF
  3088                           tosh	equ	0xFFE
  3089                           tosl	equ	0xFFD
  3090                           pclath	equ	0xFFA
  3091                           tblptru	equ	0xFF8
  3092                           tblptrh	equ	0xFF7
  3093                           tblptrl	equ	0xFF6
  3094                           tablat	equ	0xFF5
  3095                           prodh	equ	0xFF4
  3096                           prodl	equ	0xFF3
  3097                           intcon	equ	0xFF2
  3098                           intcon2	equ	0xFF1
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           indf1	equ	0xFE7
  3102                           plusw1	equ	0xFE3
  3103                           fsr1h	equ	0xFE2
  3104                           fsr1l	equ	0xFE1
  3105                           indf2	equ	0xFDF
  3106                           postinc2	equ	0xFDE
  3107                           postdec2	equ	0xFDD
  3108                           plusw2	equ	0xFDB
  3109                           fsr2h	equ	0xFDA
  3110                           fsr2l	equ	0xFD9
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _init_uart *****************
  3114 ;; Defined at:
  3115 ;;		line 13 in file "eusart.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;		None
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      void 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;Total ram usage:        0 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    3
  3136 ;; This function calls:
  3137 ;;		Nothing
  3138 ;; This function is called by:
  3139 ;;		_SYSTEM_Initialize
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text2
  3144  002756                     __ptext2:
  3145                           	opt stack 0
  3146  002756                     _init_uart:
  3147                           	opt stack 26
  3148                           
  3149                           ;eusart.c: 15: TRISCbits.RC6 = 1;
  3150                           
  3151                           ;incstack = 0
  3152  002756  8C94               	bsf	3988,6,c	;volatile
  3153                           
  3154                           ;eusart.c: 16: TRISCbits.RC7 = 1;
  3155  002758  8E94               	bsf	3988,7,c	;volatile
  3156                           
  3157                           ;eusart.c: 17: TXSTAbits.BRGH = 1;
  3158  00275A  84AC               	bsf	4012,2,c	;volatile
  3159                           
  3160                           ;eusart.c: 18: TXSTAbits.SYNC = 0;
  3161  00275C  98AC               	bcf	4012,4,c	;volatile
  3162                           
  3163                           ;eusart.c: 19: TXSTAbits.TXEN = 1;
  3164  00275E  8AAC               	bsf	4012,5,c	;volatile
  3165                           
  3166                           ;eusart.c: 20: RCSTAbits.CREN = 1;
  3167  002760  88AB               	bsf	4011,4,c	;volatile
  3168                           
  3169                           ;eusart.c: 21: RCSTAbits.SPEN = 1;
  3170  002762  8EAB               	bsf	4011,7,c	;volatile
  3171                           
  3172                           ;eusart.c: 22: BAUDCONbits.BRG16 = 1;
  3173  002764  86B8               	bsf	4024,3,c	;volatile
  3174                           
  3175                           ;eusart.c: 30: SPBRGH = 0x04;
  3176  002766  0E04               	movlw	4
  3177  002768  6EB0               	movwf	4016,c	;volatile
  3178                           
  3179                           ;eusart.c: 31: SPBRG = 0x10;
  3180  00276A  0E10               	movlw	16
  3181  00276C  6EAF               	movwf	4015,c	;volatile
  3182  00276E  0C10               	retlw	16	;funcret
  3183  002770                     __end_of_init_uart:
  3184                           	opt stack 0
  3185                           tosu	equ	0xFFF
  3186                           tosh	equ	0xFFE
  3187                           tosl	equ	0xFFD
  3188                           pclath	equ	0xFFA
  3189                           tblptru	equ	0xFF8
  3190                           tblptrh	equ	0xFF7
  3191                           tblptrl	equ	0xFF6
  3192                           tablat	equ	0xFF5
  3193                           prodh	equ	0xFF4
  3194                           prodl	equ	0xFF3
  3195                           intcon	equ	0xFF2
  3196                           intcon2	equ	0xFF1
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           indf1	equ	0xFE7
  3200                           plusw1	equ	0xFE3
  3201                           fsr1h	equ	0xFE2
  3202                           fsr1l	equ	0xFE1
  3203                           indf2	equ	0xFDF
  3204                           postinc2	equ	0xFDE
  3205                           postdec2	equ	0xFDD
  3206                           plusw2	equ	0xFDB
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _init_ds18b20 *****************
  3212 ;; Defined at:
  3213 ;;		line 12 in file "ds18b20.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;		None
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;		None
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      void 
  3220 ;; Registers used:
  3221 ;;		wreg, status,2, status,0, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;Total ram usage:        0 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    5
  3234 ;; This function calls:
  3235 ;;		_ow_reset
  3236 ;;		_write_byte
  3237 ;; This function is called by:
  3238 ;;		_SYSTEM_Initialize
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           	psect	text3
  3243  002550                     __ptext3:
  3244                           	opt stack 0
  3245  002550                     _init_ds18b20:
  3246                           	opt stack 24
  3247                           
  3248                           ;ds18b20.c: 15: if (!ow_reset())
  3249                           
  3250                           ;incstack = 0
  3251  002550  EC59  F011         	call	_ow_reset	;wreg free
  3252  002554  0900               	iorlw	0
  3253  002556  A4D8               	btfss	status,2,c
  3254  002558  0012               	return	
  3255                           
  3256                           ;ds18b20.c: 16: {
  3257                           ;ds18b20.c: 18: write_byte(0xCC);
  3258  00255A  0ECC               	movlw	204
  3259  00255C  ECB2  F011         	call	_write_byte
  3260                           
  3261                           ;ds18b20.c: 19: write_byte(0x4E);
  3262  002560  0E4E               	movlw	78
  3263  002562  ECB2  F011         	call	_write_byte
  3264                           
  3265                           ;ds18b20.c: 20: write_byte(0x00);
  3266  002566  0E00               	movlw	0
  3267  002568  ECB2  F011         	call	_write_byte
  3268                           
  3269                           ;ds18b20.c: 21: write_byte(0x00);
  3270  00256C  0E00               	movlw	0
  3271  00256E  ECB2  F011         	call	_write_byte
  3272                           
  3273                           ;ds18b20.c: 22: write_byte(0x7F);
  3274  002572  0E7F               	movlw	127
  3275  002574  EFB2  F011         	goto	_write_byte
  3276  002578                     __end_of_init_ds18b20:
  3277                           	opt stack 0
  3278                           tosu	equ	0xFFF
  3279                           tosh	equ	0xFFE
  3280                           tosl	equ	0xFFD
  3281                           pclath	equ	0xFFA
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           prodh	equ	0xFF4
  3287                           prodl	equ	0xFF3
  3288                           intcon	equ	0xFF2
  3289                           intcon2	equ	0xFF1
  3290                           postinc0	equ	0xFEE
  3291                           wreg	equ	0xFE8
  3292                           indf1	equ	0xFE7
  3293                           plusw1	equ	0xFE3
  3294                           fsr1h	equ	0xFE2
  3295                           fsr1l	equ	0xFE1
  3296                           indf2	equ	0xFDF
  3297                           postinc2	equ	0xFDE
  3298                           postdec2	equ	0xFDD
  3299                           plusw2	equ	0xFDB
  3300                           fsr2h	equ	0xFDA
  3301                           fsr2l	equ	0xFD9
  3302                           status	equ	0xFD8
  3303                           
  3304 ;; *************** function _bmp085Calibration *****************
  3305 ;; Defined at:
  3306 ;;		line 107 in file "bmp180.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;		None
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;		None
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  1    wreg      void 
  3313 ;; Registers used:
  3314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3315 ;; Tracked objects:
  3316 ;;		On entry : 0/0
  3317 ;;		On exit  : 0/0
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;Total ram usage:        2 bytes
  3325 ;; Hardware stack levels used:    1
  3326 ;; Hardware stack levels required when called:    6
  3327 ;; This function calls:
  3328 ;;		_bmp085ReadInt
  3329 ;;		_printf
  3330 ;; This function is called by:
  3331 ;;		_SYSTEM_Initialize
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text4
  3336  000BC6                     __ptext4:
  3337                           	opt stack 0
  3338  000BC6                     _bmp085Calibration:
  3339                           	opt stack 23
  3340                           
  3341                           ;bmp180.c: 111: ac1 = bmp085ReadInt(0xAA);
  3342                           
  3343                           ;incstack = 0
  3344  000BC6  0EAA               	movlw	170
  3345  000BC8  ECD1  F010         	call	_bmp085ReadInt
  3346  000BCC  C012  F066         	movff	?_bmp085ReadInt,_ac1
  3347  000BD0  C013  F067         	movff	?_bmp085ReadInt+1,_ac1+1
  3348                           
  3349                           ;bmp180.c: 112: ac2 = bmp085ReadInt(0xAC);
  3350  000BD4  0EAC               	movlw	172
  3351  000BD6  ECD1  F010         	call	_bmp085ReadInt
  3352  000BDA  C012  F0AB         	movff	?_bmp085ReadInt,_ac2
  3353  000BDE  C013  F0AC         	movff	?_bmp085ReadInt+1,_ac2+1
  3354                           
  3355                           ;bmp180.c: 113: ac3 = bmp085ReadInt(0xAE);
  3356  000BE2  0EAE               	movlw	174
  3357  000BE4  ECD1  F010         	call	_bmp085ReadInt
  3358  000BE8  C012  F0A9         	movff	?_bmp085ReadInt,_ac3
  3359  000BEC  C013  F0AA         	movff	?_bmp085ReadInt+1,_ac3+1
  3360                           
  3361                           ;bmp180.c: 114: ac4 = bmp085ReadInt(0xB0);
  3362  000BF0  0EB0               	movlw	176
  3363  000BF2  ECD1  F010         	call	_bmp085ReadInt
  3364  000BF6  C012  F0A7         	movff	?_bmp085ReadInt,_ac4
  3365  000BFA  C013  F0A8         	movff	?_bmp085ReadInt+1,_ac4+1
  3366                           
  3367                           ;bmp180.c: 115: ac5 = bmp085ReadInt(0xB2);
  3368  000BFE  0EB2               	movlw	178
  3369  000C00  ECD1  F010         	call	_bmp085ReadInt
  3370  000C04  C012  F0A5         	movff	?_bmp085ReadInt,_ac5
  3371  000C08  C013  F0A6         	movff	?_bmp085ReadInt+1,_ac5+1
  3372                           
  3373                           ;bmp180.c: 116: ac6 = bmp085ReadInt(0xB4);
  3374  000C0C  0EB4               	movlw	180
  3375  000C0E  ECD1  F010         	call	_bmp085ReadInt
  3376  000C12  C012  F0A3         	movff	?_bmp085ReadInt,_ac6
  3377  000C16  C013  F0A4         	movff	?_bmp085ReadInt+1,_ac6+1
  3378                           
  3379                           ;bmp180.c: 117: b1 = bmp085ReadInt(0xB6);
  3380  000C1A  0EB6               	movlw	182
  3381  000C1C  ECD1  F010         	call	_bmp085ReadInt
  3382  000C20  C012  F0A1         	movff	?_bmp085ReadInt,_b1
  3383  000C24  C013  F0A2         	movff	?_bmp085ReadInt+1,_b1+1
  3384                           
  3385                           ;bmp180.c: 118: b2 = bmp085ReadInt(0xB8);
  3386  000C28  0EB8               	movlw	184
  3387  000C2A  ECD1  F010         	call	_bmp085ReadInt
  3388  000C2E  C012  F09F         	movff	?_bmp085ReadInt,_b2
  3389  000C32  C013  F0A0         	movff	?_bmp085ReadInt+1,_b2+1
  3390                           
  3391                           ;bmp180.c: 119: mb = bmp085ReadInt(0xBA);
  3392  000C36  0EBA               	movlw	186
  3393  000C38  ECD1  F010         	call	_bmp085ReadInt
  3394  000C3C  C012  F09D         	movff	?_bmp085ReadInt,_mb
  3395  000C40  C013  F09E         	movff	?_bmp085ReadInt+1,_mb+1
  3396                           
  3397                           ;bmp180.c: 120: mc = bmp085ReadInt(0xBC);
  3398  000C44  0EBC               	movlw	188
  3399  000C46  ECD1  F010         	call	_bmp085ReadInt
  3400  000C4A  C012  F09B         	movff	?_bmp085ReadInt,_mc
  3401  000C4E  C013  F09C         	movff	?_bmp085ReadInt+1,_mc+1
  3402                           
  3403                           ;bmp180.c: 121: md = bmp085ReadInt(0xBE);
  3404  000C52  0EBE               	movlw	190
  3405  000C54  ECD1  F010         	call	_bmp085ReadInt
  3406  000C58  C012  F099         	movff	?_bmp085ReadInt,_md
  3407  000C5C  C013  F09A         	movff	?_bmp085ReadInt+1,_md+1
  3408                           
  3409                           ;bmp180.c: 138: _delay((unsigned long)((200)*(40000000/4000.0)));
  3410  000C60  0E0B               	movlw	11
  3411  000C62  6E3F               	movwf	(??_bmp085Calibration+1)& (0+255),c
  3412  000C64  0E26               	movlw	38
  3413  000C66  6E3E               	movwf	??_bmp085Calibration& (0+255),c
  3414  000C68  0E5E               	movlw	94
  3415  000C6A                     u4807:
  3416  000C6A  2EE8               	decfsz	wreg,f,c
  3417  000C6C  D7FE               	bra	u4807
  3418  000C6E  2E3E               	decfsz	??_bmp085Calibration& (0+255),f,c
  3419  000C70  D7FC               	bra	u4807
  3420  000C72  2E3F               	decfsz	(??_bmp085Calibration+1)& (0+255),f,c
  3421  000C74  D7FA               	bra	u4807
  3422                           
  3423                           ;bmp180.c: 139: printf("AC1: %d\n\r", ac1);
  3424  000C76  0E24               	movlw	low STR_3
  3425  000C78  6E33               	movwf	printf@f,c
  3426  000C7A  0EBF               	movlw	high STR_3
  3427  000C7C  6E34               	movwf	printf@f+1,c
  3428  000C7E  C066  F035         	movff	_ac1,?_printf+2
  3429  000C82  C067  F036         	movff	_ac1+1,?_printf+3
  3430  000C86  EC1C  F013         	call	_printf	;wreg free
  3431                           
  3432                           ;bmp180.c: 140: printf("AC2: %d\n\r", ac2);
  3433  000C8A  0E2E               	movlw	low STR_4
  3434  000C8C  6E33               	movwf	printf@f,c
  3435  000C8E  0EBF               	movlw	high STR_4
  3436  000C90  6E34               	movwf	printf@f+1,c
  3437  000C92  C0AB  F035         	movff	_ac2,?_printf+2
  3438  000C96  C0AC  F036         	movff	_ac2+1,?_printf+3
  3439  000C9A  EC1C  F013         	call	_printf	;wreg free
  3440                           
  3441                           ;bmp180.c: 141: printf("AC3: %d\n\r", ac3);
  3442  000C9E  0E38               	movlw	low STR_5
  3443  000CA0  6E33               	movwf	printf@f,c
  3444  000CA2  0EBF               	movlw	high STR_5
  3445  000CA4  6E34               	movwf	printf@f+1,c
  3446  000CA6  C0A9  F035         	movff	_ac3,?_printf+2
  3447  000CAA  C0AA  F036         	movff	_ac3+1,?_printf+3
  3448  000CAE  EC1C  F013         	call	_printf	;wreg free
  3449                           
  3450                           ;bmp180.c: 142: printf("AC4: %u\n\r", ac4);
  3451  000CB2  0E7E               	movlw	low STR_6
  3452  000CB4  6E33               	movwf	printf@f,c
  3453  000CB6  0EBF               	movlw	high STR_6
  3454  000CB8  6E34               	movwf	printf@f+1,c
  3455  000CBA  C0A7  F035         	movff	_ac4,?_printf+2
  3456  000CBE  C0A8  F036         	movff	_ac4+1,?_printf+3
  3457  000CC2  EC1C  F013         	call	_printf	;wreg free
  3458                           
  3459                           ;bmp180.c: 143: printf("AC5: %u\n\r", ac5);
  3460  000CC6  0E88               	movlw	low STR_7
  3461  000CC8  6E33               	movwf	printf@f,c
  3462  000CCA  0EBF               	movlw	high STR_7
  3463  000CCC  6E34               	movwf	printf@f+1,c
  3464  000CCE  C0A5  F035         	movff	_ac5,?_printf+2
  3465  000CD2  C0A6  F036         	movff	_ac5+1,?_printf+3
  3466  000CD6  EC1C  F013         	call	_printf	;wreg free
  3467                           
  3468                           ;bmp180.c: 144: printf("AC6: %u\n\r", ac6);
  3469  000CDA  0E92               	movlw	low STR_8
  3470  000CDC  6E33               	movwf	printf@f,c
  3471  000CDE  0EBF               	movlw	high STR_8
  3472  000CE0  6E34               	movwf	printf@f+1,c
  3473  000CE2  C0A3  F035         	movff	_ac6,?_printf+2
  3474  000CE6  C0A4  F036         	movff	_ac6+1,?_printf+3
  3475  000CEA  EC1C  F013         	call	_printf	;wreg free
  3476                           
  3477                           ;bmp180.c: 145: printf("B1: %d\n\r", b1);
  3478  000CEE  0E9C               	movlw	low STR_9
  3479  000CF0  6E33               	movwf	printf@f,c
  3480  000CF2  0EBF               	movlw	high STR_9
  3481  000CF4  6E34               	movwf	printf@f+1,c
  3482  000CF6  C0A1  F035         	movff	_b1,?_printf+2
  3483  000CFA  C0A2  F036         	movff	_b1+1,?_printf+3
  3484  000CFE  EC1C  F013         	call	_printf	;wreg free
  3485                           
  3486                           ;bmp180.c: 146: printf("B2: %d\n\r", b2);
  3487  000D02  0EAE               	movlw	low STR_10
  3488  000D04  6E33               	movwf	printf@f,c
  3489  000D06  0EBF               	movlw	high STR_10
  3490  000D08  6E34               	movwf	printf@f+1,c
  3491  000D0A  C09F  F035         	movff	_b2,?_printf+2
  3492  000D0E  C0A0  F036         	movff	_b2+1,?_printf+3
  3493  000D12  EC1C  F013         	call	_printf	;wreg free
  3494                           
  3495                           ;bmp180.c: 147: printf("MB: %d\n\r", mb);
  3496  000D16  0EDB               	movlw	low STR_11
  3497  000D18  6E33               	movwf	printf@f,c
  3498  000D1A  0EBF               	movlw	high STR_11
  3499  000D1C  6E34               	movwf	printf@f+1,c
  3500  000D1E  C09D  F035         	movff	_mb,?_printf+2
  3501  000D22  C09E  F036         	movff	_mb+1,?_printf+3
  3502  000D26  EC1C  F013         	call	_printf	;wreg free
  3503                           
  3504                           ;bmp180.c: 148: printf("MC: %d\n\r", mc);
  3505  000D2A  0EE4               	movlw	low STR_12
  3506  000D2C  6E33               	movwf	printf@f,c
  3507  000D2E  0EBF               	movlw	high STR_12
  3508  000D30  6E34               	movwf	printf@f+1,c
  3509  000D32  C09B  F035         	movff	_mc,?_printf+2
  3510  000D36  C09C  F036         	movff	_mc+1,?_printf+3
  3511  000D3A  EC1C  F013         	call	_printf	;wreg free
  3512                           
  3513                           ;bmp180.c: 149: printf("MD: %d\n\r", md);
  3514  000D3E  0EED               	movlw	low STR_13
  3515  000D40  6E33               	movwf	printf@f,c
  3516  000D42  0EBF               	movlw	high STR_13
  3517  000D44  6E34               	movwf	printf@f+1,c
  3518  000D46  C099  F035         	movff	_md,?_printf+2
  3519  000D4A  C09A  F036         	movff	_md+1,?_printf+3
  3520  000D4E  EF1C  F013         	goto	_printf	;wreg free
  3521  000D52                     __end_of_bmp085Calibration:
  3522                           	opt stack 0
  3523                           tosu	equ	0xFFF
  3524                           tosh	equ	0xFFE
  3525                           tosl	equ	0xFFD
  3526                           pclath	equ	0xFFA
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           intcon	equ	0xFF2
  3534                           intcon2	equ	0xFF1
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           indf1	equ	0xFE7
  3538                           plusw1	equ	0xFE3
  3539                           fsr1h	equ	0xFE2
  3540                           fsr1l	equ	0xFE1
  3541                           indf2	equ	0xFDF
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           plusw2	equ	0xFDB
  3545                           fsr2h	equ	0xFDA
  3546                           fsr2l	equ	0xFD9
  3547                           status	equ	0xFD8
  3548                           
  3549 ;; *************** function _TMR1Init *****************
  3550 ;; Defined at:
  3551 ;;		line 5 in file "timer.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;		None
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;		None
  3556 ;; Return value:  Size  Location     Type
  3557 ;;                  1    wreg      void 
  3558 ;; Registers used:
  3559 ;;		wreg, status,2
  3560 ;; Tracked objects:
  3561 ;;		On entry : 0/0
  3562 ;;		On exit  : 0/0
  3563 ;;		Unchanged: 0/0
  3564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;Total ram usage:        0 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; Hardware stack levels required when called:    3
  3572 ;; This function calls:
  3573 ;;		Nothing
  3574 ;; This function is called by:
  3575 ;;		_SYSTEM_Initialize
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	text5
  3580  002806                     __ptext5:
  3581                           	opt stack 0
  3582  002806                     _TMR1Init:
  3583                           	opt stack 26
  3584                           
  3585                           ;timer.c: 7: T1CONbits.TMR1ON = 0;
  3586                           
  3587                           ;incstack = 0
  3588  002806  90CD               	bcf	4045,0,c	;volatile
  3589                           
  3590                           ;timer.c: 8: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  3591  002808  0E3C               	movlw	60
  3592  00280A  6ECF               	movwf	4047,c	;volatile
  3593                           
  3594                           ;timer.c: 9: TMR1L = ((unsigned char)((15536)&0xFF));
  3595  00280C  0EB0               	movlw	176
  3596  00280E  6ECE               	movwf	4046,c	;volatile
  3597                           
  3598                           ;timer.c: 10: PIE1bits.TMR1IE = 1;
  3599  002810  809D               	bsf	3997,0,c	;volatile
  3600  002812  0CB0               	retlw	176	;funcret
  3601  002814                     __end_of_TMR1Init:
  3602                           	opt stack 0
  3603                           tosu	equ	0xFFF
  3604                           tosh	equ	0xFFE
  3605                           tosl	equ	0xFFD
  3606                           pclath	equ	0xFFA
  3607                           tblptru	equ	0xFF8
  3608                           tblptrh	equ	0xFF7
  3609                           tblptrl	equ	0xFF6
  3610                           tablat	equ	0xFF5
  3611                           prodh	equ	0xFF4
  3612                           prodl	equ	0xFF3
  3613                           intcon	equ	0xFF2
  3614                           intcon2	equ	0xFF1
  3615                           postinc0	equ	0xFEE
  3616                           wreg	equ	0xFE8
  3617                           indf1	equ	0xFE7
  3618                           plusw1	equ	0xFE3
  3619                           fsr1h	equ	0xFE2
  3620                           fsr1l	equ	0xFE1
  3621                           indf2	equ	0xFDF
  3622                           postinc2	equ	0xFDE
  3623                           postdec2	equ	0xFDD
  3624                           plusw2	equ	0xFDB
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8
  3628                           
  3629 ;; *************** function _RTOS_Init *****************
  3630 ;; Defined at:
  3631 ;;		line 10 in file "dispatcher.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;		None
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg, status,2
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;Total ram usage:        0 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    3
  3652 ;; This function calls:
  3653 ;;		Nothing
  3654 ;; This function is called by:
  3655 ;;		_SYSTEM_Initialize
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text6
  3660  0027E6                     __ptext6:
  3661                           	opt stack 0
  3662  0027E6                     _RTOS_Init:
  3663                           	opt stack 26
  3664                           
  3665                           ;dispatcher.c: 12: T0CON = 0b11000111;
  3666                           
  3667                           ;incstack = 0
  3668  0027E6  0EC7               	movlw	199
  3669  0027E8  6ED5               	movwf	4053,c	;volatile
  3670                           
  3671                           ;dispatcher.c: 13: INTCONbits.TMR0IE = 1;
  3672  0027EA  8AF2               	bsf	intcon,5,c	;volatile
  3673                           
  3674                           ;dispatcher.c: 14: TMR0 = 61;
  3675  0027EC  6AD7               	clrf	4055,c	;volatile
  3676  0027EE  0E3D               	movlw	61
  3677  0027F0  6ED6               	movwf	4054,c	;volatile
  3678                           
  3679                           ;dispatcher.c: 16: arrayTail = 0;
  3680  0027F2  6A6A               	clrf	_arrayTail,c	;volatile
  3681  0027F4  0012               	return		;funcret
  3682  0027F6                     __end_of_RTOS_Init:
  3683                           	opt stack 0
  3684                           tosu	equ	0xFFF
  3685                           tosh	equ	0xFFE
  3686                           tosl	equ	0xFFD
  3687                           pclath	equ	0xFFA
  3688                           tblptru	equ	0xFF8
  3689                           tblptrh	equ	0xFF7
  3690                           tblptrl	equ	0xFF6
  3691                           tablat	equ	0xFF5
  3692                           prodh	equ	0xFF4
  3693                           prodl	equ	0xFF3
  3694                           intcon	equ	0xFF2
  3695                           intcon2	equ	0xFF1
  3696                           postinc0	equ	0xFEE
  3697                           wreg	equ	0xFE8
  3698                           indf1	equ	0xFE7
  3699                           plusw1	equ	0xFE3
  3700                           fsr1h	equ	0xFE2
  3701                           fsr1l	equ	0xFE1
  3702                           indf2	equ	0xFDF
  3703                           postinc2	equ	0xFDE
  3704                           postdec2	equ	0xFDD
  3705                           plusw2	equ	0xFDB
  3706                           fsr2h	equ	0xFDA
  3707                           fsr2l	equ	0xFD9
  3708                           status	equ	0xFD8
  3709                           
  3710 ;; *************** function _Port_Init *****************
  3711 ;; Defined at:
  3712 ;;		line 81 in file "init.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;		None
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;		None
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  1    wreg      void 
  3719 ;; Registers used:
  3720 ;;		wreg, status,2, status,0
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;Total ram usage:        0 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    3
  3733 ;; This function calls:
  3734 ;;		Nothing
  3735 ;; This function is called by:
  3736 ;;		_SYSTEM_Initialize
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text7
  3741  0026E6                     __ptext7:
  3742                           	opt stack 0
  3743  0026E6                     _Port_Init:
  3744                           	opt stack 26
  3745                           
  3746                           ;init.c: 83: LATC = 0x00;
  3747                           
  3748                           ;incstack = 0
  3749  0026E6  6A8B               	clrf	3979,c	;volatile
  3750                           
  3751                           ;init.c: 84: TRISC = 0b00011000;
  3752  0026E8  0E18               	movlw	24
  3753  0026EA  6E94               	movwf	3988,c	;volatile
  3754                           
  3755                           ;init.c: 85: LATB = 0x00;
  3756  0026EC  6A8A               	clrf	3978,c	;volatile
  3757                           
  3758                           ;init.c: 86: TRISB = 0b00011111;
  3759  0026EE  0E1F               	movlw	31
  3760  0026F0  6E93               	movwf	3987,c	;volatile
  3761                           
  3762                           ;init.c: 87: INTCON2 &= (~(1<<7));
  3763  0026F2  9EF1               	bcf	intcon2,7,c	;volatile
  3764                           
  3765                           ;init.c: 88: LATD = 0x00;
  3766  0026F4  6A8C               	clrf	3980,c	;volatile
  3767                           
  3768                           ;init.c: 89: TRISD = 0x00;
  3769  0026F6  6A95               	clrf	3989,c	;volatile
  3770                           
  3771                           ;init.c: 90: INTCON2bits.INTEDG0 = 1;
  3772  0026F8  8CF1               	bsf	intcon2,6,c	;volatile
  3773                           
  3774                           ;init.c: 91: INTCONbits.INT0IF = 0;
  3775  0026FA  92F2               	bcf	intcon,1,c	;volatile
  3776                           
  3777                           ;init.c: 92: INTCONbits.INT0IE = 1;
  3778  0026FC  88F2               	bsf	intcon,4,c	;volatile
  3779                           
  3780                           ;init.c: 93: PORTCbits.RC0 = 1;
  3781  0026FE  8082               	bsf	3970,0,c	;volatile
  3782  002700  0012               	return		;funcret
  3783  002702                     __end_of_Port_Init:
  3784                           	opt stack 0
  3785                           tosu	equ	0xFFF
  3786                           tosh	equ	0xFFE
  3787                           tosl	equ	0xFFD
  3788                           pclath	equ	0xFFA
  3789                           tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           prodh	equ	0xFF4
  3794                           prodl	equ	0xFF3
  3795                           intcon	equ	0xFF2
  3796                           intcon2	equ	0xFF1
  3797                           postinc0	equ	0xFEE
  3798                           wreg	equ	0xFE8
  3799                           indf1	equ	0xFE7
  3800                           plusw1	equ	0xFE3
  3801                           fsr1h	equ	0xFE2
  3802                           fsr1l	equ	0xFE1
  3803                           indf2	equ	0xFDF
  3804                           postinc2	equ	0xFDE
  3805                           postdec2	equ	0xFDD
  3806                           plusw2	equ	0xFDB
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _Interrupt_Init *****************
  3812 ;; Defined at:
  3813 ;;		line 96 in file "init.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;		None
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		None
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;Total ram usage:        0 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    3
  3834 ;; This function calls:
  3835 ;;		Nothing
  3836 ;; This function is called by:
  3837 ;;		_SYSTEM_Initialize
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           	psect	text8
  3842  002852                     __ptext8:
  3843                           	opt stack 0
  3844  002852                     _Interrupt_Init:
  3845                           	opt stack 26
  3846                           
  3847                           ;init.c: 98: (INTCONbits.GIE = 1);
  3848                           
  3849                           ;incstack = 0
  3850  002852  8EF2               	bsf	intcon,7,c	;volatile
  3851                           
  3852                           ;init.c: 99: (INTCONbits.PEIE = 1);
  3853  002854  8CF2               	bsf	intcon,6,c	;volatile
  3854  002856  0012               	return		;funcret
  3855  002858                     __end_of_Interrupt_Init:
  3856                           	opt stack 0
  3857                           tosu	equ	0xFFF
  3858                           tosh	equ	0xFFE
  3859                           tosl	equ	0xFFD
  3860                           pclath	equ	0xFFA
  3861                           tblptru	equ	0xFF8
  3862                           tblptrh	equ	0xFF7
  3863                           tblptrl	equ	0xFF6
  3864                           tablat	equ	0xFF5
  3865                           prodh	equ	0xFF4
  3866                           prodl	equ	0xFF3
  3867                           intcon	equ	0xFF2
  3868                           intcon2	equ	0xFF1
  3869                           postinc0	equ	0xFEE
  3870                           wreg	equ	0xFE8
  3871                           indf1	equ	0xFE7
  3872                           plusw1	equ	0xFE3
  3873                           fsr1h	equ	0xFE2
  3874                           fsr1l	equ	0xFE1
  3875                           indf2	equ	0xFDF
  3876                           postinc2	equ	0xFDE
  3877                           postdec2	equ	0xFDD
  3878                           plusw2	equ	0xFDB
  3879                           fsr2h	equ	0xFDA
  3880                           fsr2l	equ	0xFD9
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function _Init7221 *****************
  3884 ;; Defined at:
  3885 ;;		line 77 in file "max7221.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;		None
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;		None
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, status,2, status,0, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;Total ram usage:        0 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    5
  3906 ;; This function calls:
  3907 ;;		_Cmd7221
  3908 ;; This function is called by:
  3909 ;;		_SYSTEM_Initialize
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text9
  3914  002472                     __ptext9:
  3915                           	opt stack 0
  3916  002472                     _Init7221:
  3917                           	opt stack 24
  3918                           
  3919                           ;max7221.c: 79: LATDbits.LD0 = 1;
  3920                           
  3921                           ;incstack = 0
  3922  002472  808C               	bsf	3980,0,c	;volatile
  3923                           
  3924                           ;max7221.c: 81: Cmd7221(0x0C,1);
  3925  002474  0E01               	movlw	1
  3926  002476  6E11               	movwf	Cmd7221@val,c
  3927  002478  0E0C               	movlw	12
  3928  00247A  EC64  F013         	call	_Cmd7221
  3929                           
  3930                           ;max7221.c: 82: Cmd7221(0x09,0);
  3931  00247E  6A11               	clrf	Cmd7221@val,c
  3932  002480  0E09               	movlw	9
  3933  002482  EC64  F013         	call	_Cmd7221
  3934                           
  3935                           ;max7221.c: 83: Cmd7221(0x0B,7);
  3936  002486  0E07               	movlw	7
  3937  002488  6E11               	movwf	Cmd7221@val,c
  3938  00248A  0E0B               	movlw	11
  3939  00248C  EC64  F013         	call	_Cmd7221
  3940                           
  3941                           ;max7221.c: 84: Cmd7221(0x0A,0x01);
  3942  002490  0E01               	movlw	1
  3943  002492  6E11               	movwf	Cmd7221@val,c
  3944  002494  0E0A               	movlw	10
  3945  002496  EC64  F013         	call	_Cmd7221
  3946                           
  3947                           ;max7221.c: 85: Cmd7221(0x0F,0);
  3948  00249A  6A11               	clrf	Cmd7221@val,c
  3949  00249C  0E0F               	movlw	15
  3950  00249E  EF64  F013         	goto	_Cmd7221
  3951  0024A2                     __end_of_Init7221:
  3952                           	opt stack 0
  3953                           tosu	equ	0xFFF
  3954                           tosh	equ	0xFFE
  3955                           tosl	equ	0xFFD
  3956                           pclath	equ	0xFFA
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           intcon2	equ	0xFF1
  3965                           postinc0	equ	0xFEE
  3966                           wreg	equ	0xFE8
  3967                           indf1	equ	0xFE7
  3968                           plusw1	equ	0xFE3
  3969                           fsr1h	equ	0xFE2
  3970                           fsr1l	equ	0xFE1
  3971                           indf2	equ	0xFDF
  3972                           postinc2	equ	0xFDE
  3973                           postdec2	equ	0xFDD
  3974                           plusw2	equ	0xFDB
  3975                           fsr2h	equ	0xFDA
  3976                           fsr2l	equ	0xFD9
  3977                           status	equ	0xFD8
  3978                           
  3979 ;; *************** function _Cmd7221 *****************
  3980 ;; Defined at:
  3981 ;;		line 33 in file "max7221.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  adr             1    wreg     unsigned char 
  3984 ;;  val             1   16[COMRAM] unsigned char 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  adr             1   17[COMRAM] unsigned char 
  3987 ;;  i               1   18[COMRAM] unsigned char 
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  1    wreg      void 
  3990 ;; Registers used:
  3991 ;;		wreg, status,2, status,0, cstack
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3997 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;Total ram usage:        3 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    4
  4004 ;; This function calls:
  4005 ;;		_Send_Byte_7221
  4006 ;; This function is called by:
  4007 ;;		_Init7221
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text10
  4012  0026C8                     __ptext10:
  4013                           	opt stack 0
  4014  0026C8                     _Cmd7221:
  4015                           	opt stack 24
  4016                           
  4017                           ;incstack = 0
  4018                           ;Cmd7221@adr stored from wreg
  4019  0026C8  6E12               	movwf	Cmd7221@adr,c
  4020                           
  4021                           ;max7221.c: 35: uint8_t i;
  4022                           ;max7221.c: 36: LATDbits.LD0 = 0;
  4023  0026CA  908C               	bcf	3980,0,c	;volatile
  4024                           
  4025                           ;max7221.c: 37: for (i = 0; i < 4; i++ )
  4026  0026CC  6A13               	clrf	Cmd7221@i,c
  4027  0026CE                     l5484:
  4028                           
  4029                           ;max7221.c: 38: {
  4030                           ;max7221.c: 39: Send_Byte_7221(adr);
  4031  0026CE  5012               	movf	Cmd7221@adr,w,c
  4032  0026D0  EC2E  F013         	call	_Send_Byte_7221
  4033                           
  4034                           ;max7221.c: 40: Send_Byte_7221(val);
  4035  0026D4  5011               	movf	Cmd7221@val,w,c
  4036  0026D6  EC2E  F013         	call	_Send_Byte_7221
  4037  0026DA  2A13               	incf	Cmd7221@i,f,c
  4038  0026DC  0E03               	movlw	3
  4039  0026DE  6413               	cpfsgt	Cmd7221@i,c
  4040  0026E0  D7F6               	goto	l5484
  4041                           
  4042                           ;max7221.c: 42: }
  4043                           ;max7221.c: 44: LATDbits.LD0 = 1;
  4044  0026E2  808C               	bsf	3980,0,c	;volatile
  4045  0026E4  0C03               	retlw	3	;funcret
  4046  0026E6                     __end_of_Cmd7221:
  4047                           	opt stack 0
  4048                           tosu	equ	0xFFF
  4049                           tosh	equ	0xFFE
  4050                           tosl	equ	0xFFD
  4051                           pclath	equ	0xFFA
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           intcon	equ	0xFF2
  4059                           intcon2	equ	0xFF1
  4060                           postinc0	equ	0xFEE
  4061                           wreg	equ	0xFE8
  4062                           indf1	equ	0xFE7
  4063                           plusw1	equ	0xFE3
  4064                           fsr1h	equ	0xFE2
  4065                           fsr1l	equ	0xFE1
  4066                           indf2	equ	0xFDF
  4067                           postinc2	equ	0xFDE
  4068                           postdec2	equ	0xFDD
  4069                           plusw2	equ	0xFDB
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _I2C_Init *****************
  4075 ;; Defined at:
  4076 ;;		line 11 in file "i2c.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  2   40[None  ] int 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    3
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_SYSTEM_Initialize
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text11
  4105  002770                     __ptext11:
  4106                           	opt stack 0
  4107  002770                     _I2C_Init:
  4108                           	opt stack 26
  4109                           
  4110                           ;i2c.c: 13: TRISC |= 0b00011000;
  4111                           
  4112                           ;incstack = 0
  4113  002770  0E18               	movlw	24
  4114  002772  1294               	iorwf	3988,f,c	;volatile
  4115                           
  4116                           ;i2c.c: 14: SSPCON1 = 0b00101000;
  4117  002774  0E28               	movlw	40
  4118  002776  6EC6               	movwf	4038,c	;volatile
  4119                           
  4120                           ;i2c.c: 15: SSPSTAT = 0b00000000;
  4121  002778  6AC7               	clrf	4039,c	;volatile
  4122                           
  4123                           ;i2c.c: 16: SSPADD = 0x63;
  4124  00277A  0E63               	movlw	99
  4125  00277C  6EC8               	movwf	4040,c	;volatile
  4126                           
  4127                           ;i2c.c: 18: PEN = 1;
  4128  00277E  84C5               	bsf	4037,2,c	;volatile
  4129  002780                     l140:
  4130  002780  A4C5               	btfss	4037,2,c	;volatile
  4131  002782  0012               	return		;funcret
  4132  002784  D7FD               	goto	l140
  4133  002786                     __end_of_I2C_Init:
  4134                           	opt stack 0
  4135                           tosu	equ	0xFFF
  4136                           tosh	equ	0xFFE
  4137                           tosl	equ	0xFFD
  4138                           pclath	equ	0xFFA
  4139                           tblptru	equ	0xFF8
  4140                           tblptrh	equ	0xFF7
  4141                           tblptrl	equ	0xFF6
  4142                           tablat	equ	0xFF5
  4143                           prodh	equ	0xFF4
  4144                           prodl	equ	0xFF3
  4145                           intcon	equ	0xFF2
  4146                           intcon2	equ	0xFF1
  4147                           postinc0	equ	0xFEE
  4148                           wreg	equ	0xFE8
  4149                           indf1	equ	0xFE7
  4150                           plusw1	equ	0xFE3
  4151                           fsr1h	equ	0xFE2
  4152                           fsr1l	equ	0xFE1
  4153                           indf2	equ	0xFDF
  4154                           postinc2	equ	0xFDE
  4155                           postdec2	equ	0xFDD
  4156                           plusw2	equ	0xFDB
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _DS3231_init *****************
  4162 ;; Defined at:
  4163 ;;		line 40 in file "ds3231.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;Total ram usage:        0 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    6
  4184 ;; This function calls:
  4185 ;;		_DS3231_Write
  4186 ;; This function is called by:
  4187 ;;		_SYSTEM_Initialize
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text12
  4192  0027B0                     __ptext12:
  4193                           	opt stack 0
  4194  0027B0                     _DS3231_init:
  4195                           	opt stack 23
  4196                           
  4197                           ;ds3231.c: 42: DS3231_Write(0x0E, 0x00);
  4198                           
  4199                           ;incstack = 0
  4200  0027B0  6A1A               	clrf	DS3231_Write@value,c
  4201  0027B2  0E0E               	movlw	14
  4202  0027B4  EC81  F013         	call	_DS3231_Write
  4203                           
  4204                           ;ds3231.c: 43: DS3231_Write(0x0F, 0x08);
  4205  0027B8  0E08               	movlw	8
  4206  0027BA  6E1A               	movwf	DS3231_Write@value,c
  4207  0027BC  0E0F               	movlw	15
  4208  0027BE  EF81  F013         	goto	_DS3231_Write
  4209  0027C2                     __end_of_DS3231_init:
  4210                           	opt stack 0
  4211                           tosu	equ	0xFFF
  4212                           tosh	equ	0xFFE
  4213                           tosl	equ	0xFFD
  4214                           pclath	equ	0xFFA
  4215                           tblptru	equ	0xFF8
  4216                           tblptrh	equ	0xFF7
  4217                           tblptrl	equ	0xFF6
  4218                           tablat	equ	0xFF5
  4219                           prodh	equ	0xFF4
  4220                           prodl	equ	0xFF3
  4221                           intcon	equ	0xFF2
  4222                           intcon2	equ	0xFF1
  4223                           postinc0	equ	0xFEE
  4224                           wreg	equ	0xFE8
  4225                           indf1	equ	0xFE7
  4226                           plusw1	equ	0xFE3
  4227                           fsr1h	equ	0xFE2
  4228                           fsr1l	equ	0xFE1
  4229                           indf2	equ	0xFDF
  4230                           postinc2	equ	0xFDE
  4231                           postdec2	equ	0xFDD
  4232                           plusw2	equ	0xFDB
  4233                           fsr2h	equ	0xFDA
  4234                           fsr2l	equ	0xFD9
  4235                           status	equ	0xFD8
  4236                           
  4237 ;; *************** function _RTOS_DispatchTask *****************
  4238 ;; Defined at:
  4239 ;;		line 84 in file "dispatcher.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;		None
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  function        2   12[BANK0 ] PTR FTN()void 
  4244 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
  4245 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
  4246 ;;		 -> GetTime(1), key_press(1), time_led(1), 
  4247 ;;  i               1   15[BANK0 ] unsigned char 
  4248 ;;  j               1   14[BANK0 ] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 3F/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        8 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    9
  4265 ;; This function calls:
  4266 ;;		_GetTime
  4267 ;;		_RTOS_DeleteTask
  4268 ;;		_default_state
  4269 ;;		_home_temp
  4270 ;;		_key_press
  4271 ;;		_time_led
  4272 ;;		_time_set_dt
  4273 ;;		_time_set_dy
  4274 ;;		_time_set_hr
  4275 ;;		_time_set_min
  4276 ;;		_time_set_mt
  4277 ;;		_time_set_yr
  4278 ;; This function is called by:
  4279 ;;		_main
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           	psect	text13
  4284  001710                     __ptext13:
  4285                           	opt stack 0
  4286  001710                     _RTOS_DispatchTask:
  4287                           	opt stack 21
  4288                           
  4289                           ;dispatcher.c: 86: uint8_t i, j;
  4290                           ;dispatcher.c: 87: void (*function) (void);
  4291                           ;dispatcher.c: 89: if (Timer0Interrupt)
  4292                           
  4293                           ;incstack = 0
  4294  001710  5069               	movf	_Timer0Interrupt,w,c
  4295  001712  E019               	bz	l213
  4296                           
  4297                           ;dispatcher.c: 90: {
  4298                           ;dispatcher.c: 91: Timer0Interrupt = 0;
  4299  001714  6A69               	clrf	_Timer0Interrupt,c
  4300                           
  4301                           ;dispatcher.c: 92: for (j=0; j<arrayTail; j++)
  4302  001716  0100               	movlb	0	; () banked
  4303  001718  6BE2               	clrf	RTOS_DispatchTask@j& (0+255),b
  4304  00171A  D012               	goto	l6346
  4305  00171C                     l6338:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;dispatcher.c: 93: {
  4309                           ;dispatcher.c: 94: if (TaskArray[j].delay == 0)
  4310  00171C  51E2               	movf	RTOS_DispatchTask@j& (0+255),w,b
  4311  00171E  D861               	call	PL20	;call to abstracted procedure
  4312  001720  50DE               	movf	postinc2,w,c
  4313  001722  10DE               	iorwf	postinc2,w,c
  4314  001724  E107               	bnz	l6342
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;dispatcher.c: 95: TaskArray[j].run = 1;
  4318  001726  51E2               	movf	RTOS_DispatchTask@j& (0+255),w,b
  4319  001728  0D08               	mullw	8
  4320  00172A  D863               	call	PL32	;call to abstracted procedure
  4321  00172C  0E01               	movlw	1
  4322  00172E  6EDE               	movwf	postinc2,c
  4323  001730  6ADD               	clrf	postdec2,c
  4324  001732  D005               	goto	l6344
  4325  001734                     l6342:
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;dispatcher.c: 96: else TaskArray[j].delay--;
  4329  001734  51E2               	movf	RTOS_DispatchTask@j& (0+255),w,b
  4330  001736  D855               	call	PL20	;call to abstracted procedure
  4331  001738  06DE               	decf	postinc2,f,c
  4332  00173A  0E00               	movlw	0
  4333  00173C  5ADD               	subwfb	postdec2,f,c
  4334  00173E                     l6344:
  4335                           
  4336                           ; BSR set to: 0
  4337  00173E  2BE2               	incf	RTOS_DispatchTask@j& (0+255),f,b
  4338  001740                     l6346:
  4339                           
  4340                           ; BSR set to: 0
  4341  001740  506A               	movf	_arrayTail,w,c	;volatile
  4342  001742  5DE2               	subwf	RTOS_DispatchTask@j& (0+255),w,b
  4343  001744  E3EB               	bnc	l6338
  4344  001746                     l213:
  4345                           
  4346                           ;dispatcher.c: 97: }
  4347                           ;dispatcher.c: 98: }
  4348                           ;dispatcher.c: 100: for (i=0; i<arrayTail; i++)
  4349  001746  0100               	movlb	0	; () banked
  4350  001748  6BE3               	clrf	RTOS_DispatchTask@i& (0+255),b
  4351  00174A  D047               	goto	l6362
  4352  00174C                     l6348:
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;dispatcher.c: 101: {
  4356                           ;dispatcher.c: 102: if (TaskArray[i].run == 1)
  4357  00174C  51E3               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4358  00174E  0D08               	mullw	8
  4359  001750  D850               	call	PL32	;call to abstracted procedure
  4360  001752  04DE               	decf	postinc2,w,c
  4361  001754  10DE               	iorwf	postinc2,w,c
  4362  001756  E13F               	bnz	l6360
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;dispatcher.c: 103: {
  4366                           ;dispatcher.c: 104: function = TaskArray[i].pFunc;
  4367  001758  51E3               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4368  00175A  EC6F  F00D         	call	PL24	;call to abstracted procedure
  4369  00175E  CFDE F0E0          	movff	postinc2,RTOS_DispatchTask@function
  4370  001762  CFDD F0E1          	movff	postdec2,RTOS_DispatchTask@function+1
  4371                           
  4372                           ;dispatcher.c: 106: if(TaskArray[i].period == 0)
  4373  001766  51E3               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4374  001768  EC81  F00D         	call	PL30	;call to abstracted procedure
  4375  00176C  50DE               	movf	postinc2,w,c
  4376  00176E  10DE               	iorwf	postinc2,w,c
  4377  001770  E10A               	bnz	l6354
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;dispatcher.c: 107: {
  4381                           ;dispatcher.c: 108: RTOS_DeleteTask(TaskArray[i].pFunc);
  4382  001772  51E3               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4383  001774  EC6F  F00D         	call	PL24	;call to abstracted procedure
  4384  001778  CFDE F00F          	movff	postinc2,RTOS_DeleteTask@taskFunc
  4385  00177C  CFDD F010          	movff	postdec2,RTOS_DeleteTask@taskFunc+1
  4386  001780  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  4387                           
  4388                           ;dispatcher.c: 110: }
  4389  001784  D01B               	goto	l6358
  4390  001786                     l6354:
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;dispatcher.c: 111: else
  4394                           ;dispatcher.c: 112: {
  4395                           ;dispatcher.c: 113: TaskArray[i].run = 0;
  4396  001786  51E3               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4397  001788  EC77  F00D         	call	PL28	;call to abstracted procedure
  4398                           
  4399                           ;dispatcher.c: 114: if(!TaskArray[i].delay)
  4400  00178C  51E3               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4401  00178E  D829               	call	PL20	;call to abstracted procedure
  4402  001790  50DE               	movf	postinc2,w,c
  4403  001792  10DE               	iorwf	postinc2,w,c
  4404  001794  E113               	bnz	l6358
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;dispatcher.c: 115: {
  4408                           ;dispatcher.c: 116: TaskArray[i].delay = TaskArray[i].period-1;
  4409  001796  69DC               	setf	??_RTOS_DispatchTask& (0+255),b
  4410  001798  69DD               	setf	(??_RTOS_DispatchTask+1)& (0+255),b
  4411  00179A  51E3               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4412  00179C  EC81  F00D         	call	PL30	;call to abstracted procedure
  4413  0017A0  CFDE F0DE          	movff	postinc2,??_RTOS_DispatchTask+2
  4414  0017A4  CFDD F0DF          	movff	postdec2,??_RTOS_DispatchTask+3
  4415  0017A8  51DC               	movf	??_RTOS_DispatchTask& (0+255),w,b
  4416  0017AA  27DE               	addwf	(??_RTOS_DispatchTask+2)& (0+255),f,b
  4417  0017AC  51DD               	movf	(??_RTOS_DispatchTask+1)& (0+255),w,b
  4418  0017AE  23DF               	addwfc	(??_RTOS_DispatchTask+3)& (0+255),f,b
  4419  0017B0  51E3               	movf	RTOS_DispatchTask@i& (0+255),w,b
  4420  0017B2  D817               	call	PL20	;call to abstracted procedure
  4421  0017B4  C0DE  FFDE         	movff	??_RTOS_DispatchTask+2,postinc2
  4422  0017B8  C0DF  FFDD         	movff	??_RTOS_DispatchTask+3,postdec2
  4423  0017BC                     l6358:
  4424                           
  4425                           ;dispatcher.c: 117: }
  4426                           ;dispatcher.c: 118: }
  4427                           ;dispatcher.c: 119: (*function)();
  4428  0017BC  D801               	call	u4708
  4429  0017BE  D00B               	goto	l6360
  4430  0017C0                     u4708:
  4431  0017C0  0005               	push	
  4432  0017C2  0100               	movlb	0	; () banked
  4433  0017C4  6EFA               	movwf	pclath,c
  4434  0017C6  51E0               	movf	RTOS_DispatchTask@function& (0+255),w,b
  4435  0017C8  6EFD               	movwf	tosl,c
  4436  0017CA  51E1               	movf	(RTOS_DispatchTask@function+1)& (0+255),w,b
  4437  0017CC  6EFE               	movwf	tosh,c
  4438  0017CE  50F8               	movf	tblptru,w,c
  4439  0017D0  6EFF               	movwf	tosu,c
  4440  0017D2  50FA               	movf	pclath,w,c
  4441  0017D4  0012               	return		;indir
  4442  0017D6                     l6360:
  4443  0017D6  0100               	movlb	0	; () banked
  4444  0017D8  2BE3               	incf	RTOS_DispatchTask@i& (0+255),f,b
  4445  0017DA                     l6362:
  4446                           
  4447                           ; BSR set to: 0
  4448  0017DA  506A               	movf	_arrayTail,w,c	;volatile
  4449  0017DC  5DE3               	subwf	RTOS_DispatchTask@i& (0+255),w,b
  4450  0017DE  E3B6               	bnc	l6348
  4451                           
  4452                           ; BSR set to: 0
  4453  0017E0  0012               	return		;funcret
  4454  0017E2                     __end_of_RTOS_DispatchTask:
  4455                           	opt stack 0
  4456  0017E2                     PL20:
  4457                           	opt stack 27
  4458  0017E2  0D08               	mullw	8
  4459  0017E4  0E02               	movlw	low (_TaskArray+2)
  4460  0017E6  24F3               	addwf	prodl,w,c
  4461  0017E8  6ED9               	movwf	fsr2l,c
  4462  0017EA  0E01               	movlw	high (_TaskArray+2)
  4463  0017EC  20F4               	addwfc	prodh,w,c
  4464  0017EE  6EDA               	movwf	fsr2h,c
  4465  0017F0  0012               	return	
  4466  0017F2                     __end_ofPL20:
  4467                           	opt stack 0
  4468  0017F2                     PL32:
  4469                           	opt stack 21
  4470  0017F2  0E06               	movlw	low (_TaskArray+6)
  4471  0017F4  24F3               	addwf	prodl,w,c
  4472  0017F6  6ED9               	movwf	fsr2l,c
  4473  0017F8  0E01               	movlw	high (_TaskArray+6)
  4474  0017FA  20F4               	addwfc	prodh,w,c
  4475  0017FC  6EDA               	movwf	fsr2h,c
  4476  0017FE  0012               	return	
  4477  001800                     __end_ofPL32:
  4478                           	opt stack 0
  4479                           tosu	equ	0xFFF
  4480                           tosh	equ	0xFFE
  4481                           tosl	equ	0xFFD
  4482                           pclath	equ	0xFFA
  4483                           tblptru	equ	0xFF8
  4484                           tblptrh	equ	0xFF7
  4485                           tblptrl	equ	0xFF6
  4486                           tablat	equ	0xFF5
  4487                           prodh	equ	0xFF4
  4488                           prodl	equ	0xFF3
  4489                           intcon	equ	0xFF2
  4490                           intcon2	equ	0xFF1
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           indf1	equ	0xFE7
  4494                           plusw1	equ	0xFE3
  4495                           fsr1h	equ	0xFE2
  4496                           fsr1l	equ	0xFE1
  4497                           indf2	equ	0xFDF
  4498                           postinc2	equ	0xFDE
  4499                           postdec2	equ	0xFDD
  4500                           plusw2	equ	0xFDB
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function _home_temp *****************
  4506 ;; Defined at:
  4507 ;;		line 424 in file "common.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 3F/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;Total ram usage:        1 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    7
  4528 ;; This function calls:
  4529 ;;		_RTOS_DeleteTask
  4530 ;;		_RTOS_SetTask
  4531 ;;		___lbdiv
  4532 ;;		___lbmod
  4533 ;;		___lwdiv
  4534 ;;		___lwmod
  4535 ;;		_clear_matrix
  4536 ;;		_getTime
  4537 ;;		_pic_to_led
  4538 ;;		_putchar_down
  4539 ;;		_putchar_down_s
  4540 ;;		_scroll_left
  4541 ;; This function is called by:
  4542 ;;		_time_led
  4543 ;;		_RTOS_DispatchTask
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text14
  4548  000A2A                     __ptext14:
  4549                           	opt stack 0
  4550  000A2A                     _home_temp:
  4551                           	opt stack 22
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;common.c: 426: switch (events)
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;incstack = 0
  4558  000A2A  D0A3               	goto	l6244
  4559  000A2C                     l6198:
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;common.c: 431: clear_matrix();
  4563  000A2C  ECE1  F013         	call	_clear_matrix	;wreg free
  4564                           
  4565                           ;common.c: 432: if (!((temperature/10) % 10))
  4566  000A30  D8B0               	call	PL88	;call to abstracted procedure
  4567  000A32  ECAC  F010         	call	___lwdiv	;wreg free
  4568  000A36  D8A5               	call	PL84	;call to abstracted procedure
  4569  000A38  EC3A  F011         	call	___lwmod	;wreg free
  4570  000A3C  5016               	movf	?___lwmod,w,c
  4571  000A3E  1017               	iorwf	?___lwmod+1,w,c
  4572  000A40  E10F               	bnz	l6208
  4573                           
  4574                           ;common.c: 433: {
  4575                           ;common.c: 434: pic_to_led(3,1);
  4576  000A42  D8BB               	call	PL160	;call to abstracted procedure
  4577  000A44  EC99  F00F         	call	_pic_to_led
  4578                           
  4579                           ;common.c: 436: putchar_down(13,temperature % 10 + 48);
  4580  000A48  D8AC               	call	PL92	;call to abstracted procedure
  4581  000A4A  EC3A  F011         	call	___lwmod	;wreg free
  4582  000A4E  D8B1               	call	PL154	;call to abstracted procedure
  4583  000A50  ECE0  F00D         	call	_putchar_down
  4584                           
  4585                           ;common.c: 437: putchar_down(19,176);
  4586  000A54  0EB0               	movlw	176
  4587  000A56  6E1B               	movwf	putchar_down@symbol,c
  4588  000A58  0E13               	movlw	19
  4589  000A5A  ECE0  F00D         	call	_putchar_down
  4590                           
  4591                           ;common.c: 438: }else
  4592  000A5E  D018               	goto	l6216
  4593  000A60                     l6208:
  4594                           
  4595                           ;common.c: 439: {
  4596                           ;common.c: 440: pic_to_led(3,1);
  4597  000A60  D8AC               	call	PL160	;call to abstracted procedure
  4598  000A62  EC99  F00F         	call	_pic_to_led
  4599                           
  4600                           ;common.c: 441: putchar_down(13,(temperature/10) % 10 + 48);
  4601  000A66  D895               	call	PL88	;call to abstracted procedure
  4602  000A68  ECAC  F010         	call	___lwdiv	;wreg free
  4603  000A6C  D88A               	call	PL84	;call to abstracted procedure
  4604  000A6E  EC3A  F011         	call	___lwmod	;wreg free
  4605  000A72  D89F               	call	PL154	;call to abstracted procedure
  4606  000A74  ECE0  F00D         	call	_putchar_down
  4607                           
  4608                           ;common.c: 442: putchar_down(19,temperature % 10 + 48);
  4609  000A78  D894               	call	PL92	;call to abstracted procedure
  4610  000A7A  EC3A  F011         	call	___lwmod	;wreg free
  4611  000A7E  5016               	movf	?___lwmod,w,c
  4612  000A80  D89F               	call	PL184	;call to abstracted procedure
  4613  000A82  ECE0  F00D         	call	_putchar_down
  4614                           
  4615                           ;common.c: 443: putchar_down(25,176);
  4616  000A86  0EB0               	movlw	176
  4617  000A88  6E1B               	movwf	putchar_down@symbol,c
  4618  000A8A  0E19               	movlw	25
  4619  000A8C  ECE0  F00D         	call	_putchar_down
  4620  000A90                     l6216:
  4621                           
  4622                           ;common.c: 445: }
  4623                           ;common.c: 446: events = 6;
  4624  000A90  0E06               	movlw	6
  4625  000A92  6E70               	movwf	_events,c
  4626                           
  4627                           ;common.c: 447: RTOS_SetTask(default_state, 750, 0);
  4628  000A94  0E58               	movlw	low _default_state
  4629  000A96  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  4630  000A98  0E28               	movlw	high _default_state
  4631  000A9A  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  4632  000A9C  0E02               	movlw	2
  4633  000A9E  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  4634  000AA0  0EEE               	movlw	238
  4635  000AA2  6E11               	movwf	RTOS_SetTask@taskDelay,c
  4636  000AA4  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  4637  000AA6  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  4638  000AA8  EF6F  F00E         	goto	_RTOS_SetTask	;wreg free
  4639  000AAC                     l6220:
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;common.c: 455: events = 5;
  4643  000AAC  0E05               	movlw	5
  4644  000AAE  6E70               	movwf	_events,c
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;common.c: 456: scroll_left();
  4648  000AB0  EC2F  F010         	call	_scroll_left	;wreg free
  4649                           
  4650                           ;common.c: 457: if((TTime.Thr/10) % 10)
  4651  000AB4  EC40  F009         	call	PL52	;call to abstracted procedure
  4652  000AB8  51CF               	movf	(_TTime+2)& (0+255),w,b
  4653  000ABA  EC1F  F012         	call	___lbdiv
  4654  000ABE  ECF7  F012         	call	___lbmod
  4655  000AC2  0900               	iorlw	0
  4656  000AC4  E00D               	bz	l6228
  4657                           
  4658                           ;common.c: 458: putchar_down(0, (TTime.Thr/10) % 10 + 48);
  4659  000AC6  EC40  F009         	call	PL52	;call to abstracted procedure
  4660  000ACA  51CF               	movf	(_TTime+2)& (0+255),w,b
  4661  000ACC  EC1F  F012         	call	___lbdiv
  4662  000AD0  ECF7  F012         	call	___lbmod
  4663  000AD4  0F30               	addlw	48
  4664  000AD6  6E1B               	movwf	putchar_down@symbol,c
  4665  000AD8  0E00               	movlw	0
  4666  000ADA  ECE0  F00D         	call	_putchar_down
  4667  000ADE  D004               	goto	l713
  4668  000AE0                     l6228:
  4669                           
  4670                           ;common.c: 459: else putchar_down(0, 0);
  4671  000AE0  0E00               	movlw	0
  4672  000AE2  6A1B               	clrf	putchar_down@symbol,c
  4673  000AE4  ECE0  F00D         	call	_putchar_down
  4674  000AE8                     l713:
  4675                           
  4676                           ;common.c: 460: putchar_down(6, TTime.Thr % 10 + 48);
  4677  000AE8  EC4A  F009         	call	PL112	;call to abstracted procedure
  4678  000AEC  ECF7  F012         	call	___lbmod
  4679  000AF0  0F30               	addlw	48
  4680  000AF2  6E1B               	movwf	putchar_down@symbol,c
  4681  000AF4  0E06               	movlw	6
  4682  000AF6  ECE0  F00D         	call	_putchar_down
  4683                           
  4684                           ;common.c: 461: putchar_down(13, (TTime.Tmin/10) % 10 + 48);
  4685  000AFA  EC40  F009         	call	PL52	;call to abstracted procedure
  4686  000AFE  51CE               	movf	(_TTime+1)& (0+255),w,b
  4687  000B00  EC1F  F012         	call	___lbdiv
  4688  000B04  ECF7  F012         	call	___lbmod
  4689  000B08  0F30               	addlw	48
  4690  000B0A  6E1B               	movwf	putchar_down@symbol,c
  4691  000B0C  0E0D               	movlw	13
  4692  000B0E  ECE0  F00D         	call	_putchar_down
  4693                           
  4694                           ;common.c: 462: putchar_down(19, TTime.Tmin % 10 + 48);
  4695  000B12  EC4F  F009         	call	PL118	;call to abstracted procedure
  4696  000B16  ECF7  F012         	call	___lbmod
  4697  000B1A  D852               	call	PL184	;call to abstracted procedure
  4698  000B1C  ECE0  F00D         	call	_putchar_down
  4699                           
  4700                           ;common.c: 463: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  4701  000B20  ECC9  F012         	call	PL94	;call to abstracted procedure
  4702  000B24  ECFF  F00F         	call	_getTime	;wreg free
  4703                           
  4704                           ;common.c: 464: putchar_down_s(25, (TTime.Ts/10) % 10 + 1);
  4705  000B28  EC40  F009         	call	PL52	;call to abstracted procedure
  4706  000B2C  51CD               	movf	_TTime& (0+255),w,b
  4707  000B2E  EC1F  F012         	call	___lbdiv
  4708  000B32  ECF7  F012         	call	___lbmod
  4709  000B36  6E25               	movwf	??_home_temp& (0+255),c
  4710  000B38  2825               	incf	??_home_temp,w,c
  4711  000B3A  6E17               	movwf	putchar_down_s@symbol,c
  4712  000B3C  0E19               	movlw	25
  4713  000B3E  EC96  F00D         	call	_putchar_down_s
  4714                           
  4715                           ;common.c: 465: putchar_down_s(29, TTime.Ts % 10 + 1);
  4716  000B42  EC54  F009         	call	PL120	;call to abstracted procedure
  4717  000B46  ECF7  F012         	call	___lbmod
  4718  000B4A  6E25               	movwf	??_home_temp& (0+255),c
  4719  000B4C  2825               	incf	??_home_temp,w,c
  4720  000B4E  6E17               	movwf	putchar_down_s@symbol,c
  4721  000B50  0E1D               	movlw	29
  4722  000B52  EC96  F00D         	call	_putchar_down_s
  4723                           
  4724                           ;common.c: 466: RTOS_DeleteTask(default_state);
  4725  000B56  EC57  F007         	call	PL50	;call to abstracted procedure
  4726  000B5A  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  4727                           
  4728                           ;common.c: 467: RTOS_DeleteTask(home_temp);
  4729  000B5E  0E2A               	movlw	low _home_temp
  4730  000B60  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  4731  000B62  0E0A               	movlw	high _home_temp
  4732  000B64  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  4733  000B66  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  4734                           
  4735                           ;common.c: 468: RTOS_SetTask(time_led,0,20);
  4736  000B6A  EC4D  F007         	call	PL10	;call to abstracted procedure
  4737  000B6E  EF6F  F00E         	goto	_RTOS_SetTask	;wreg free
  4738  000B72                     l6244:
  4739                           
  4740                           ; BSR set to: 0
  4741  000B72  5070               	movf	_events,w,c
  4742                           
  4743                           ; Switch size 1, requested type "space"
  4744                           ; Number of cases is 3, Range of values is 4 to 6
  4745                           ; switch strategies available:
  4746                           ; Name         Instructions Cycles
  4747                           ; simple_byte           10     6 (average)
  4748                           ;	Chosen strategy is simple_byte
  4749  000B74  0A04               	xorlw	4	; case 4
  4750  000B76  E09A               	bz	l6220
  4751  000B78  0A01               	xorlw	1	; case 5
  4752  000B7A  E101 D757          	bz	l6198
  4753  000B7E  0A03               	xorlw	3	; case 6
  4754  000B80  0012               	return	
  4755  000B82                     __end_of_home_temp:
  4756                           	opt stack 0
  4757  000B82                     PL84:
  4758                           	opt stack 22
  4759  000B82  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  4760  000B86  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  4761  000B8A  6A19               	clrf	___lwmod@divisor+1,c
  4762  000B8C  0E0A               	movlw	10
  4763  000B8E  6E18               	movwf	___lwmod@divisor,c
  4764  000B90  0C0A               	retlw	10
  4765  000B92                     __end_ofPL84:
  4766                           	opt stack 0
  4767  000B92                     PL88:
  4768                           	opt stack 22
  4769  000B92  6A12               	clrf	___lwdiv@divisor+1,c
  4770  000B94  0E0A               	movlw	10
  4771  000B96  6E11               	movwf	___lwdiv@divisor,c
  4772  000B98  C06B  F00F         	movff	_temperature,___lwdiv@dividend
  4773  000B9C  C06C  F010         	movff	_temperature+1,___lwdiv@dividend+1
  4774  000BA0  0C0A               	retlw	10
  4775  000BA2                     __end_ofPL88:
  4776                           	opt stack 0
  4777  000BA2                     PL92:
  4778                           	opt stack 22
  4779  000BA2  C06B  F016         	movff	_temperature,___lwmod@dividend
  4780  000BA6  C06C  F017         	movff	_temperature+1,___lwmod@dividend+1
  4781  000BAA  6A19               	clrf	___lwmod@divisor+1,c
  4782  000BAC  0E0A               	movlw	10
  4783  000BAE  6E18               	movwf	___lwmod@divisor,c
  4784  000BB0  0C0A               	retlw	10
  4785  000BB2                     __end_ofPL92:
  4786                           	opt stack 0
  4787  000BB2                     PL154:
  4788                           	opt stack 22
  4789  000BB2  5016               	movf	?___lwmod,w,c
  4790  000BB4  0F30               	addlw	48
  4791  000BB6  6E1B               	movwf	putchar_down@symbol,c
  4792  000BB8  0C0D               	retlw	13
  4793  000BBA                     __end_ofPL154:
  4794                           	opt stack 0
  4795  000BBA                     PL160:
  4796                           	opt stack 22
  4797  000BBA  0E01               	movlw	1
  4798  000BBC  6E14               	movwf	pic_to_led@pic,c
  4799  000BBE  0C03               	retlw	3
  4800  000BC0                     __end_ofPL160:
  4801                           	opt stack 0
  4802  000BC0                     PL184:
  4803                           	opt stack 22
  4804  000BC0  0F30               	addlw	48
  4805  000BC2  6E1B               	movwf	putchar_down@symbol,c
  4806  000BC4  0C13               	retlw	19
  4807  000BC6                     __end_ofPL184:
  4808                           	opt stack 0
  4809                           tosu	equ	0xFFF
  4810                           tosh	equ	0xFFE
  4811                           tosl	equ	0xFFD
  4812                           pclath	equ	0xFFA
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           intcon2	equ	0xFF1
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           indf1	equ	0xFE7
  4824                           plusw1	equ	0xFE3
  4825                           fsr1h	equ	0xFE2
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           plusw2	equ	0xFDB
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _time_set_min *****************
  4836 ;; Defined at:
  4837 ;;		line 24 in file "common.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      void 
  4844 ;; Registers used:
  4845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 3F/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;Total ram usage:        0 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    7
  4858 ;; This function calls:
  4859 ;;		_RTOS_DeleteTask
  4860 ;;		_RTOS_SetTask
  4861 ;;		_Update_Matrix
  4862 ;;		___lbdiv
  4863 ;;		___lbmod
  4864 ;;		_putchar_b_buf
  4865 ;;		_setTime
  4866 ;; This function is called by:
  4867 ;;		_time_led
  4868 ;;		_RTOS_DispatchTask
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text15
  4873  001800                     __ptext15:
  4874                           	opt stack 0
  4875  001800                     _time_set_min:
  4876                           	opt stack 22
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;common.c: 26: show_digit = ~show_digit;
  4880                           
  4881                           ;incstack = 0
  4882  001800  B26F               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  4883  001802  D002               	goto	u4240
  4884  001804  826F               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  4885  001806  D03B               	goto	l5868
  4886  001808                     u4240:
  4887  001808  926F               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  4888                           
  4889                           ;common.c: 27: switch (events)
  4890  00180A  D039               	goto	l5868
  4891  00180C                     l5828:
  4892                           
  4893                           ;common.c: 34: RTOS_DeleteTask(time_set_min);
  4894  00180C  D865               	call	PL152	;call to abstracted procedure
  4895  00180E  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  4896                           
  4897                           ;common.c: 35: RTOS_SetTask(time_set_hr, 0, 50);
  4898  001812  0ECE               	movlw	low _time_set_hr
  4899  001814  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  4900  001816  0E0E               	movlw	high _time_set_hr
  4901  001818  ECD3  F00C         	call	PL14	;call to abstracted procedure
  4902  00181C  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  4903                           
  4904                           ;common.c: 36: RTOS_SetTask(default_state, 2000, 0);
  4905  001820  ECEB  F00A         	call	PL2	;call to abstracted procedure
  4906  001824  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  4907  001828                     l5834:
  4908                           
  4909                           ;common.c: 37: events = 5;
  4910  001828  0E05               	movlw	5
  4911  00182A  6E70               	movwf	_events,c
  4912                           
  4913                           ;common.c: 38: break;
  4914  00182C  D032               	goto	l601
  4915  00182E                     l5836:
  4916                           
  4917                           ;common.c: 40: RTOS_DeleteTask(time_set_min);
  4918  00182E  D854               	call	PL152	;call to abstracted procedure
  4919  001830  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  4920                           
  4921                           ;common.c: 41: RTOS_DeleteTask(default_state);
  4922  001834  EC57  F007         	call	PL50	;call to abstracted procedure
  4923  001838  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  4924                           
  4925                           ;common.c: 42: RTOS_SetTask(time_led, 0, 20);
  4926  00183C  EC4D  F007         	call	PL10	;call to abstracted procedure
  4927  001840  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  4928  001844  D7F1               	goto	l5834
  4929  001846                     l5842:
  4930                           
  4931                           ;common.c: 46: TSTime.Tmin++;
  4932  001846  2A50               	incf	_TSTime+1,f,c
  4933                           
  4934                           ;common.c: 47: if(TSTime.Tmin > 59) TSTime.Tmin = 0;
  4935  001848  0E3B               	movlw	59
  4936  00184A  6450               	cpfsgt	_TSTime+1,c
  4937  00184C  D001               	goto	l5848
  4938  00184E  6A50               	clrf	_TSTime+1,c
  4939  001850                     l5848:
  4940                           
  4941                           ;common.c: 48: RTOS_SetTask(default_state, 2000, 0);
  4942  001850  ECEB  F00A         	call	PL2	;call to abstracted procedure
  4943  001854  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  4944                           
  4945                           ;common.c: 49: setTime(TSTime.Thr,TSTime.Tmin,0);
  4946  001858  ECF9  F007         	call	PL86	;call to abstracted procedure
  4947  00185C  EC51  F012         	call	_setTime
  4948  001860  D7E3               	goto	l5834
  4949  001862                     l5854:
  4950                           
  4951                           ;common.c: 53: TSTime.Tmin--;
  4952  001862  0650               	decf	_TSTime+1,f,c
  4953                           
  4954                           ;common.c: 54: if(TSTime.Tmin == 255) TSTime.Tmin = 59;
  4955  001864  2850               	incf	_TSTime+1,w,c
  4956  001866  E102               	bnz	l5860
  4957  001868  0E3B               	movlw	59
  4958  00186A  6E50               	movwf	_TSTime+1,c
  4959  00186C                     l5860:
  4960                           
  4961                           ;common.c: 55: RTOS_SetTask(default_state, 2000, 0);
  4962  00186C  ECEB  F00A         	call	PL2	;call to abstracted procedure
  4963  001870  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  4964                           
  4965                           ;common.c: 56: setTime(TSTime.Thr,TSTime.Tmin,0);
  4966  001874  ECF9  F007         	call	PL86	;call to abstracted procedure
  4967  001878  EC51  F012         	call	_setTime
  4968  00187C  D7D5               	goto	l5834
  4969  00187E                     l5868:
  4970  00187E  5070               	movf	_events,w,c
  4971                           
  4972                           ; Switch size 1, requested type "space"
  4973                           ; Number of cases is 5, Range of values is 1 to 5
  4974                           ; switch strategies available:
  4975                           ; Name         Instructions Cycles
  4976                           ; simple_byte           16     9 (average)
  4977                           ;	Chosen strategy is simple_byte
  4978  001880  0A01               	xorlw	1	; case 1
  4979  001882  E0C4               	bz	l5828
  4980  001884  0A03               	xorlw	3	; case 2
  4981  001886  E0DF               	bz	l5842
  4982  001888  0A01               	xorlw	1	; case 3
  4983  00188A  E0EB               	bz	l5854
  4984  00188C  0A07               	xorlw	7	; case 4
  4985  00188E  E0CF               	bz	l5836
  4986  001890  0A01               	xorlw	1	; case 5
  4987  001892                     l601:
  4988                           
  4989                           ;common.c: 61: if(show_digit)
  4990  001892  A26F               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  4991  001894  D013               	goto	l5872
  4992                           
  4993                           ;common.c: 62: {
  4994                           ;common.c: 63: putchar_b_buf(13,(TSTime.Tmin/10) % 10 + 48);
  4995  001896  EC08  F008         	call	PL148	;call to abstracted procedure
  4996  00189A  EC1F  F012         	call	___lbdiv
  4997  00189E  ECF7  F012         	call	___lbmod
  4998  0018A2  EC14  F008         	call	PL178	;call to abstracted procedure
  4999  0018A6  EC64  F00F         	call	_putchar_b_buf
  5000                           
  5001                           ;common.c: 64: putchar_b_buf(19,TSTime.Tmin % 10 + 48);
  5002  0018AA  EC10  F008         	call	PL172	;call to abstracted procedure
  5003  0018AE  ECF7  F012         	call	___lbmod
  5004  0018B2  EC0D  F008         	call	PL168	;call to abstracted procedure
  5005  0018B6  EC64  F00F         	call	_putchar_b_buf
  5006                           
  5007                           ;common.c: 65: }
  5008  0018BA  D008               	goto	l5874
  5009  0018BC                     l5872:
  5010                           
  5011                           ;common.c: 66: else
  5012                           ;common.c: 67: {
  5013                           ;common.c: 68: putchar_b_buf(13,0);
  5014  0018BC  6A17               	clrf	putchar_b_buf@symbol,c
  5015  0018BE  0E0D               	movlw	13
  5016  0018C0  EC64  F00F         	call	_putchar_b_buf
  5017                           
  5018                           ;common.c: 69: putchar_b_buf(19,0);
  5019  0018C4  6A17               	clrf	putchar_b_buf@symbol,c
  5020  0018C6  0E13               	movlw	19
  5021  0018C8  EC64  F00F         	call	_putchar_b_buf
  5022  0018CC                     l5874:
  5023                           
  5024                           ;common.c: 70: }
  5025                           ;common.c: 71: Update_Matrix(Dis_Buff);
  5026  0018CC  0EAD               	movlw	low _Dis_Buff
  5027  0018CE  6E11               	movwf	Update_Matrix@buf,c
  5028  0018D0  EC77  F011         	call	_Update_Matrix	;wreg free
  5029                           
  5030                           ;common.c: 72: en_put = 1;
  5031  0018D4  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5032  0018D6  0012               	return		;funcret
  5033  0018D8                     __end_of_time_set_min:
  5034                           	opt stack 0
  5035  0018D8                     PL152:
  5036                           	opt stack 22
  5037  0018D8  0E00               	movlw	low _time_set_min
  5038  0018DA  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5039  0018DC  0E18               	movlw	high _time_set_min
  5040  0018DE  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5041  0018E0  0012               	return	
  5042  0018E2                     __end_ofPL152:
  5043                           	opt stack 0
  5044                           tosu	equ	0xFFF
  5045                           tosh	equ	0xFFE
  5046                           tosl	equ	0xFFD
  5047                           pclath	equ	0xFFA
  5048                           tblptru	equ	0xFF8
  5049                           tblptrh	equ	0xFF7
  5050                           tblptrl	equ	0xFF6
  5051                           tablat	equ	0xFF5
  5052                           prodh	equ	0xFF4
  5053                           prodl	equ	0xFF3
  5054                           intcon	equ	0xFF2
  5055                           intcon2	equ	0xFF1
  5056                           postinc0	equ	0xFEE
  5057                           wreg	equ	0xFE8
  5058                           indf1	equ	0xFE7
  5059                           plusw1	equ	0xFE3
  5060                           fsr1h	equ	0xFE2
  5061                           fsr1l	equ	0xFE1
  5062                           indf2	equ	0xFDF
  5063                           postinc2	equ	0xFDE
  5064                           postdec2	equ	0xFDD
  5065                           plusw2	equ	0xFDB
  5066                           fsr2h	equ	0xFDA
  5067                           fsr2l	equ	0xFD9
  5068                           status	equ	0xFD8
  5069                           
  5070 ;; *************** function _GetTime *****************
  5071 ;; Defined at:
  5072 ;;		line 15 in file "common.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;		None
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;		None
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5081 ;; Tracked objects:
  5082 ;;		On entry : 3F/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;Total ram usage:        0 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    7
  5093 ;; This function calls:
  5094 ;;		_getDate
  5095 ;;		_getTime
  5096 ;; This function is called by:
  5097 ;;		_INT0_ISR
  5098 ;;		_RTOS_DispatchTask
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text16
  5103  002578                     __ptext16:
  5104                           	opt stack 0
  5105  002578                     _GetTime:
  5106                           	opt stack 0
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;common.c: 17: getTime(&TTime.Thr, &TTime.Tmin, &TTime.Ts);
  5110                           
  5111                           ;incstack = 0
  5112  002578  D80C               	call	PL94	;call to abstracted procedure
  5113  00257A  ECFF  F00F         	call	_getTime	;wreg free
  5114                           
  5115                           ;common.c: 18: getDate(&TTime.Tdy,&TTime.Tdt,&TTime.Tmt,&TTime.Tyr);
  5116  00257E  0ED0               	movlw	low (_TTime+3)
  5117  002580  6E14               	movwf	getDate@p4,c
  5118  002582  0ED1               	movlw	low (_TTime+4)
  5119  002584  6E15               	movwf	getDate@p3,c
  5120  002586  0ED2               	movlw	low (_TTime+5)
  5121  002588  6E16               	movwf	getDate@p2,c
  5122  00258A  0ED3               	movlw	low (_TTime+6)
  5123  00258C  6E17               	movwf	getDate@p1,c
  5124  00258E  EFB2  F00E         	goto	_getDate	;wreg free
  5125  002592                     __end_of_GetTime:
  5126                           	opt stack 0
  5127  002592                     PL94:
  5128                           	opt stack 22
  5129  002592  0ECF               	movlw	low (_TTime+2)
  5130  002594  6E14               	movwf	getTime@p3,c
  5131  002596  0ECE               	movlw	low (_TTime+1)
  5132  002598  6E15               	movwf	getTime@p2,c
  5133  00259A  0ECD               	movlw	low _TTime
  5134  00259C  6E16               	movwf	getTime@p1,c
  5135  00259E  0012               	return	
  5136  0025A0                     __end_ofPL94:
  5137                           	opt stack 0
  5138                           tosu	equ	0xFFF
  5139                           tosh	equ	0xFFE
  5140                           tosl	equ	0xFFD
  5141                           pclath	equ	0xFFA
  5142                           tblptru	equ	0xFF8
  5143                           tblptrh	equ	0xFF7
  5144                           tblptrl	equ	0xFF6
  5145                           tablat	equ	0xFF5
  5146                           prodh	equ	0xFF4
  5147                           prodl	equ	0xFF3
  5148                           intcon	equ	0xFF2
  5149                           intcon2	equ	0xFF1
  5150                           postinc0	equ	0xFEE
  5151                           wreg	equ	0xFE8
  5152                           indf1	equ	0xFE7
  5153                           plusw1	equ	0xFE3
  5154                           fsr1h	equ	0xFE2
  5155                           fsr1l	equ	0xFE1
  5156                           indf2	equ	0xFDF
  5157                           postinc2	equ	0xFDE
  5158                           postdec2	equ	0xFDD
  5159                           plusw2	equ	0xFDB
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function _time_set_dy *****************
  5165 ;; Defined at:
  5166 ;;		line 344 in file "common.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;		None
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;		None
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      void 
  5173 ;; Registers used:
  5174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : 3F/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;Total ram usage:        0 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    7
  5187 ;; This function calls:
  5188 ;;		_RTOS_DeleteTask
  5189 ;;		_RTOS_SetTask
  5190 ;;		_Update_Matrix
  5191 ;;		_putchar_b_buf
  5192 ;;		_setDate
  5193 ;; This function is called by:
  5194 ;;		_time_set_dt
  5195 ;;		_RTOS_DispatchTask
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text17
  5200  000D52                     __ptext17:
  5201                           	opt stack 0
  5202  000D52                     _time_set_dy:
  5203                           	opt stack 22
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;common.c: 346: switch (events)
  5207                           
  5208                           ;incstack = 0
  5209  000D52  D035               	goto	l6170
  5210  000D54                     l6128:
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;common.c: 352: RTOS_DeleteTask(time_set_dy);
  5214  000D54  D8B4               	call	PL144	;call to abstracted procedure
  5215  000D56  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5216                           
  5217                           ;common.c: 353: RTOS_SetTask(time_led, 0, 20);
  5218  000D5A  D89F               	call	PL10	;call to abstracted procedure
  5219  000D5C  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5220                           
  5221                           ;common.c: 354: RTOS_DeleteTask(default_state);
  5222  000D60  D8A6               	call	PL50	;call to abstracted procedure
  5223  000D62  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5224                           
  5225                           ;common.c: 355: events = 5;
  5226                           
  5227                           ;common.c: 356: en_put=1;
  5228  000D66  EC08  F00B         	call	PL156	;call to abstracted procedure
  5229                           
  5230                           ;common.c: 357: break;
  5231  000D6A  D033               	goto	l685
  5232  000D6C                     l6138:
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;common.c: 359: RTOS_DeleteTask(time_set_dy);
  5236  000D6C  D8A8               	call	PL144	;call to abstracted procedure
  5237  000D6E  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5238                           
  5239                           ;common.c: 360: RTOS_DeleteTask(default_state);
  5240  000D72  D89D               	call	PL50	;call to abstracted procedure
  5241  000D74  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5242                           
  5243                           ;common.c: 361: RTOS_SetTask(time_led, 0, 20);
  5244  000D78  D890               	call	PL10	;call to abstracted procedure
  5245  000D7A  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5246                           
  5247                           ;common.c: 362: events = 5;
  5248  000D7E  0E05               	movlw	5
  5249  000D80  6E70               	movwf	_events,c
  5250                           
  5251                           ;common.c: 363: break;
  5252  000D82  D027               	goto	l685
  5253  000D84                     l6144:
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;common.c: 365: TSTime.Tdy++;
  5257  000D84  2A52               	incf	_TSTime+3,f,c
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;common.c: 366: if(TSTime.Tdy > 7) TSTime.Tdy = 1;
  5261  000D86  0E07               	movlw	7
  5262  000D88  6452               	cpfsgt	_TSTime+3,c
  5263  000D8A  D002               	goto	l6150
  5264                           
  5265                           ; BSR set to: 0
  5266  000D8C  0E01               	movlw	1
  5267  000D8E  6E52               	movwf	_TSTime+3,c
  5268  000D90                     l6150:
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;common.c: 367: RTOS_SetTask(default_state, 2000, 0);
  5272  000D90  ECEB  F00A         	call	PL2	;call to abstracted procedure
  5273  000D94  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5274                           
  5275                           ;common.c: 368: events = 5;
  5276                           
  5277                           ;common.c: 369: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5278  000D98  ECF6  F00A         	call	PL12	;call to abstracted procedure
  5279  000D9C  EC95  F011         	call	_setDate
  5280                           
  5281                           ;common.c: 370: break;
  5282  000DA0  D018               	goto	l685
  5283  000DA2                     l6156:
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;common.c: 372: TSTime.Tdy--;
  5287  000DA2  0652               	decf	_TSTime+3,f,c
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;common.c: 373: if(TSTime.Tdy == 0) TSTime.Tdy = 7;
  5291  000DA4  5052               	movf	_TSTime+3,w,c
  5292  000DA6  E102               	bnz	l6162
  5293                           
  5294                           ; BSR set to: 0
  5295  000DA8  0E07               	movlw	7
  5296  000DAA  6E52               	movwf	_TSTime+3,c
  5297  000DAC                     l6162:
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;common.c: 374: RTOS_SetTask(default_state, 2000, 0);
  5301  000DAC  ECEB  F00A         	call	PL2	;call to abstracted procedure
  5302  000DB0  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5303                           
  5304                           ;common.c: 375: events = 5;
  5305                           
  5306                           ;common.c: 376: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5307  000DB4  ECF6  F00A         	call	PL12	;call to abstracted procedure
  5308  000DB8  EC95  F011         	call	_setDate
  5309                           
  5310                           ;common.c: 377: break;
  5311  000DBC  D00A               	goto	l685
  5312  000DBE                     l6170:
  5313                           
  5314                           ; BSR set to: 0
  5315  000DBE  5070               	movf	_events,w,c
  5316                           
  5317                           ; Switch size 1, requested type "space"
  5318                           ; Number of cases is 5, Range of values is 1 to 5
  5319                           ; switch strategies available:
  5320                           ; Name         Instructions Cycles
  5321                           ; simple_byte           16     9 (average)
  5322                           ;	Chosen strategy is simple_byte
  5323  000DC0  0A01               	xorlw	1	; case 1
  5324  000DC2  E0C8               	bz	l6128
  5325  000DC4  0A03               	xorlw	3	; case 2
  5326  000DC6  E0DE               	bz	l6144
  5327  000DC8  0A01               	xorlw	1	; case 3
  5328  000DCA  E0EB               	bz	l6156
  5329  000DCC  0A07               	xorlw	7	; case 4
  5330  000DCE  E0CE               	bz	l6138
  5331  000DD0  0A01               	xorlw	1	; case 5
  5332  000DD2                     l685:
  5333                           
  5334                           ;common.c: 379: if(en_put)
  5335  000DD2  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5336  000DD4  D05C               	goto	l6192
  5337                           
  5338                           ;common.c: 380: {
  5339                           ;common.c: 381: putchar_b_buf(0,'Ä');
  5340  000DD6  0EC4               	movlw	196
  5341  000DD8  6E17               	movwf	putchar_b_buf@symbol,c
  5342  000DDA  0E00               	movlw	0
  5343  000DDC  EC64  F00F         	call	_putchar_b_buf
  5344                           
  5345                           ;common.c: 382: putchar_b_buf(6,'í');
  5346  000DE0  0EED               	movlw	237
  5347  000DE2  6E17               	movwf	putchar_b_buf@symbol,c
  5348  000DE4  0E06               	movlw	6
  5349  000DE6  EC64  F00F         	call	_putchar_b_buf
  5350                           
  5351                           ;common.c: 383: putchar_b_buf(12,':');
  5352  000DEA  EC05  F00B         	call	PL142	;call to abstracted procedure
  5353  000DEE  EC64  F00F         	call	_putchar_b_buf
  5354                           
  5355                           ;common.c: 384: switch(TSTime.Tdy)
  5356  000DF2  D03E               	goto	l6190
  5357  000DF4                     l6174:
  5358                           
  5359                           ;common.c: 387: putchar_b_buf(18,'Ï');
  5360  000DF4  D869               	call	PL180	;call to abstracted procedure
  5361  000DF6  EC64  F00F         	call	_putchar_b_buf
  5362                           
  5363                           ;common.c: 388: putchar_b_buf(24,'í');
  5364  000DFA  0EED               	movlw	237
  5365  000DFC  6E17               	movwf	putchar_b_buf@symbol,c
  5366  000DFE  0E18               	movlw	24
  5367  000E00  EC64  F00F         	call	_putchar_b_buf
  5368                           
  5369                           ;common.c: 389: break;
  5370  000E04  D044               	goto	l6192
  5371  000E06                     l6176:
  5372                           
  5373                           ;common.c: 391: putchar_b_buf(18,'Â');
  5374  000E06  EC09  F005         	call	PL162	;call to abstracted procedure
  5375  000E0A  EC64  F00F         	call	_putchar_b_buf
  5376                           
  5377                           ;common.c: 392: putchar_b_buf(24,'ò');
  5378  000E0E  D854               	call	PL104	;call to abstracted procedure
  5379  000E10  EC64  F00F         	call	_putchar_b_buf
  5380                           
  5381                           ;common.c: 393: break;
  5382  000E14  D03C               	goto	l6192
  5383  000E16                     l6178:
  5384                           
  5385                           ;common.c: 395: putchar_b_buf(18,'Ñ');
  5386  000E16  ECFE  F004         	call	PL128	;call to abstracted procedure
  5387  000E1A  EC64  F00F         	call	_putchar_b_buf
  5388                           
  5389                           ;common.c: 396: putchar_b_buf(24,'ð');
  5390  000E1E  ECFB  F004         	call	PL100	;call to abstracted procedure
  5391  000E22  EC64  F00F         	call	_putchar_b_buf
  5392                           
  5393                           ;common.c: 397: break;
  5394  000E26  D033               	goto	l6192
  5395  000E28                     l6180:
  5396                           
  5397                           ;common.c: 399: putchar_b_buf(18,'×');
  5398  000E28  EC0C  F005         	call	PL164	;call to abstracted procedure
  5399  000E2C  EC64  F00F         	call	_putchar_b_buf
  5400                           
  5401                           ;common.c: 400: putchar_b_buf(24,'ò');
  5402  000E30  D843               	call	PL104	;call to abstracted procedure
  5403  000E32  EC64  F00F         	call	_putchar_b_buf
  5404                           
  5405                           ;common.c: 401: break;
  5406  000E36  D02B               	goto	l6192
  5407  000E38                     l6182:
  5408                           
  5409                           ;common.c: 403: putchar_b_buf(18,'Ï');
  5410  000E38  D847               	call	PL180	;call to abstracted procedure
  5411  000E3A  EC64  F00F         	call	_putchar_b_buf
  5412                           
  5413                           ;common.c: 404: putchar_b_buf(24,'ò');
  5414  000E3E  D83C               	call	PL104	;call to abstracted procedure
  5415  000E40  EC64  F00F         	call	_putchar_b_buf
  5416                           
  5417                           ;common.c: 405: break;
  5418  000E44  D024               	goto	l6192
  5419  000E46                     l6184:
  5420                           
  5421                           ;common.c: 407: putchar_b_buf(18,'Ñ');
  5422  000E46  ECFE  F004         	call	PL128	;call to abstracted procedure
  5423  000E4A  EC64  F00F         	call	_putchar_b_buf
  5424                           
  5425                           ;common.c: 408: putchar_b_buf(24,'á');
  5426  000E4E  0EE1               	movlw	225
  5427  000E50  6E17               	movwf	putchar_b_buf@symbol,c
  5428  000E52  0E18               	movlw	24
  5429  000E54  EC64  F00F         	call	_putchar_b_buf
  5430                           
  5431                           ;common.c: 409: break;
  5432  000E58  D01A               	goto	l6192
  5433  000E5A                     l6186:
  5434                           
  5435                           ;common.c: 411: putchar_b_buf(18,'Í');
  5436  000E5A  0ECD               	movlw	205
  5437  000E5C  6E17               	movwf	putchar_b_buf@symbol,c
  5438  000E5E  0E12               	movlw	18
  5439  000E60  EC64  F00F         	call	_putchar_b_buf
  5440                           
  5441                           ;common.c: 412: putchar_b_buf(24,'ä');
  5442  000E64  0EE4               	movlw	228
  5443  000E66  6E17               	movwf	putchar_b_buf@symbol,c
  5444  000E68  0E18               	movlw	24
  5445  000E6A  EC64  F00F         	call	_putchar_b_buf
  5446                           
  5447                           ;common.c: 413: break;
  5448  000E6E  D00F               	goto	l6192
  5449  000E70                     l6190:
  5450  000E70  5052               	movf	_TSTime+3,w,c
  5451                           
  5452                           ; Switch size 1, requested type "space"
  5453                           ; Number of cases is 7, Range of values is 1 to 7
  5454                           ; switch strategies available:
  5455                           ; Name         Instructions Cycles
  5456                           ; simple_byte           22    12 (average)
  5457                           ;	Chosen strategy is simple_byte
  5458  000E72  0A01               	xorlw	1	; case 1
  5459  000E74  E0F2               	bz	l6186
  5460  000E76  0A03               	xorlw	3	; case 2
  5461  000E78  E0BD               	bz	l6174
  5462  000E7A  0A01               	xorlw	1	; case 3
  5463  000E7C  E0C4               	bz	l6176
  5464  000E7E  0A07               	xorlw	7	; case 4
  5465  000E80  E0CA               	bz	l6178
  5466  000E82  0A01               	xorlw	1	; case 5
  5467  000E84  E0D1               	bz	l6180
  5468  000E86  0A03               	xorlw	3	; case 6
  5469  000E88  E0D7               	bz	l6182
  5470  000E8A  0A01               	xorlw	1	; case 7
  5471  000E8C  E0DC               	bz	l6184
  5472  000E8E                     l6192:
  5473                           
  5474                           ;common.c: 415: }
  5475                           ;common.c: 416: Update_Matrix(Dis_Buff);
  5476  000E8E  0EAD               	movlw	low _Dis_Buff
  5477  000E90  6E11               	movwf	Update_Matrix@buf,c
  5478  000E92  EC77  F011         	call	_Update_Matrix	;wreg free
  5479                           
  5480                           ;common.c: 417: en_put=1;
  5481  000E96  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5482  000E98  0012               	return		;funcret
  5483  000E9A                     __end_of_time_set_dy:
  5484                           	opt stack 0
  5485  000E9A                     PL10:
  5486                           	opt stack 22
  5487  000E9A  0EE2               	movlw	low _time_led
  5488  000E9C  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5489  000E9E  0E18               	movlw	high _time_led
  5490  000EA0  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5491  000EA2  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  5492  000EA4  6A11               	clrf	RTOS_SetTask@taskDelay,c
  5493  000EA6  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5494  000EA8  0E14               	movlw	20
  5495  000EAA  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  5496  000EAC  0C14               	retlw	20
  5497  000EAE                     __end_ofPL10:
  5498                           	opt stack 0
  5499  000EAE                     PL50:
  5500                           	opt stack 22
  5501  000EAE  0E58               	movlw	low _default_state
  5502  000EB0  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5503  000EB2  0E28               	movlw	high _default_state
  5504  000EB4  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5505  000EB6  0012               	return	
  5506  000EB8                     __end_ofPL50:
  5507                           	opt stack 0
  5508  000EB8                     PL104:
  5509                           	opt stack 22
  5510  000EB8  0EF2               	movlw	242
  5511  000EBA  6E17               	movwf	putchar_b_buf@symbol,c
  5512  000EBC  0C18               	retlw	24
  5513  000EBE                     __end_ofPL104:
  5514                           	opt stack 0
  5515  000EBE                     PL144:
  5516                           	opt stack 22
  5517  000EBE  0E52               	movlw	low _time_set_dy
  5518  000EC0  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5519  000EC2  0E0D               	movlw	high _time_set_dy
  5520  000EC4  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5521  000EC6  0012               	return	
  5522  000EC8                     __end_ofPL144:
  5523                           	opt stack 0
  5524  000EC8                     PL180:
  5525                           	opt stack 22
  5526  000EC8  0ECF               	movlw	207
  5527  000ECA  6E17               	movwf	putchar_b_buf@symbol,c
  5528  000ECC  0C12               	retlw	18
  5529  000ECE                     __end_ofPL180:
  5530                           	opt stack 0
  5531                           tosu	equ	0xFFF
  5532                           tosh	equ	0xFFE
  5533                           tosl	equ	0xFFD
  5534                           pclath	equ	0xFFA
  5535                           tblptru	equ	0xFF8
  5536                           tblptrh	equ	0xFF7
  5537                           tblptrl	equ	0xFF6
  5538                           tablat	equ	0xFF5
  5539                           prodh	equ	0xFF4
  5540                           prodl	equ	0xFF3
  5541                           intcon	equ	0xFF2
  5542                           intcon2	equ	0xFF1
  5543                           postinc0	equ	0xFEE
  5544                           wreg	equ	0xFE8
  5545                           indf1	equ	0xFE7
  5546                           plusw1	equ	0xFE3
  5547                           fsr1h	equ	0xFE2
  5548                           fsr1l	equ	0xFE1
  5549                           indf2	equ	0xFDF
  5550                           postinc2	equ	0xFDE
  5551                           postdec2	equ	0xFDD
  5552                           plusw2	equ	0xFDB
  5553                           fsr2h	equ	0xFDA
  5554                           fsr2l	equ	0xFD9
  5555                           status	equ	0xFD8
  5556                           
  5557 ;; *************** function _time_set_dt *****************
  5558 ;; Defined at:
  5559 ;;		line 293 in file "common.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;		None
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;		None
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 3F/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;Total ram usage:        0 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    7
  5580 ;; This function calls:
  5581 ;;		_RTOS_DeleteTask
  5582 ;;		_RTOS_SetTask
  5583 ;;		_Update_Matrix
  5584 ;;		___lbdiv
  5585 ;;		___lbmod
  5586 ;;		_putchar_b_buf
  5587 ;;		_setDate
  5588 ;; This function is called by:
  5589 ;;		_time_set_mt
  5590 ;;		_RTOS_DispatchTask
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text18
  5595  001500                     __ptext18:
  5596                           	opt stack 0
  5597  001500                     _time_set_dt:
  5598                           	opt stack 22
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;common.c: 295: switch (events)
  5602                           
  5603                           ;incstack = 0
  5604  001500  D037               	goto	l6118
  5605  001502                     l6076:
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;common.c: 301: RTOS_DeleteTask(time_set_dt);
  5609  001502  D87E               	call	PL140	;call to abstracted procedure
  5610  001504  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5611                           
  5612                           ;common.c: 302: RTOS_SetTask(time_set_dy, 0, 20);
  5613  001508  0E52               	movlw	low _time_set_dy
  5614  00150A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5615  00150C  0E0D               	movlw	high _time_set_dy
  5616  00150E  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5617  001510  ECF5  F004         	call	PL22	;call to abstracted procedure
  5618  001514  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5619                           
  5620                           ;common.c: 303: RTOS_SetTask(default_state, 2000, 0);
  5621  001518  D85E               	call	PL2	;call to abstracted procedure
  5622  00151A  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5623                           
  5624                           ;common.c: 304: events = 5;
  5625                           
  5626                           ;common.c: 305: en_put=1;
  5627  00151E  D878               	call	PL156	;call to abstracted procedure
  5628                           
  5629                           ;common.c: 306: break;
  5630  001520  D031               	goto	l672
  5631  001522                     l6086:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;common.c: 308: RTOS_DeleteTask(time_set_dt);
  5635  001522  D86E               	call	PL140	;call to abstracted procedure
  5636  001524  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5637                           
  5638                           ;common.c: 309: RTOS_DeleteTask(default_state);
  5639  001528  EC57  F007         	call	PL50	;call to abstracted procedure
  5640  00152C  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5641                           
  5642                           ;common.c: 310: RTOS_SetTask(time_led, 0, 20);
  5643  001530  EC4D  F007         	call	PL10	;call to abstracted procedure
  5644  001534  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5645                           
  5646                           ;common.c: 311: events = 5;
  5647  001538  0E05               	movlw	5
  5648  00153A  6E70               	movwf	_events,c
  5649                           
  5650                           ;common.c: 312: break;
  5651  00153C  D023               	goto	l672
  5652  00153E                     l6092:
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;common.c: 314: TSTime.Tdt++;
  5656  00153E  2A53               	incf	_TSTime+4,f,c
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;common.c: 315: if(TSTime.Tdt > 31) TSTime.Tdt = 1;
  5660  001540  0E1F               	movlw	31
  5661  001542  6453               	cpfsgt	_TSTime+4,c
  5662  001544  D002               	goto	l6098
  5663                           
  5664                           ; BSR set to: 0
  5665  001546  0E01               	movlw	1
  5666  001548  6E53               	movwf	_TSTime+4,c
  5667  00154A                     l6098:
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;common.c: 316: RTOS_SetTask(default_state, 2000, 0);
  5671  00154A  D845               	call	PL2	;call to abstracted procedure
  5672  00154C  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5673                           
  5674                           ;common.c: 317: events = 5;
  5675                           
  5676                           ;common.c: 318: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5677  001550  D84D               	call	PL12	;call to abstracted procedure
  5678  001552  EC95  F011         	call	_setDate
  5679                           
  5680                           ;common.c: 319: break;
  5681  001556  D016               	goto	l672
  5682  001558                     l6104:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;common.c: 321: TSTime.Tdt--;
  5686  001558  0653               	decf	_TSTime+4,f,c
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;common.c: 322: if(TSTime.Tdt == 0) TSTime.Tdt = 31;
  5690  00155A  5053               	movf	_TSTime+4,w,c
  5691  00155C  E102               	bnz	l6110
  5692                           
  5693                           ; BSR set to: 0
  5694  00155E  0E1F               	movlw	31
  5695  001560  6E53               	movwf	_TSTime+4,c
  5696  001562                     l6110:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;common.c: 323: RTOS_SetTask(default_state, 2000, 0);
  5700  001562  D839               	call	PL2	;call to abstracted procedure
  5701  001564  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5702                           
  5703                           ;common.c: 324: events = 5;
  5704                           
  5705                           ;common.c: 325: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5706  001568  D841               	call	PL12	;call to abstracted procedure
  5707  00156A  EC95  F011         	call	_setDate
  5708                           
  5709                           ;common.c: 326: break;
  5710  00156E  D00A               	goto	l672
  5711  001570                     l6118:
  5712                           
  5713                           ; BSR set to: 0
  5714  001570  5070               	movf	_events,w,c
  5715                           
  5716                           ; Switch size 1, requested type "space"
  5717                           ; Number of cases is 5, Range of values is 1 to 5
  5718                           ; switch strategies available:
  5719                           ; Name         Instructions Cycles
  5720                           ; simple_byte           16     9 (average)
  5721                           ;	Chosen strategy is simple_byte
  5722  001572  0A01               	xorlw	1	; case 1
  5723  001574  E0C6               	bz	l6076
  5724  001576  0A03               	xorlw	3	; case 2
  5725  001578  E0E2               	bz	l6092
  5726  00157A  0A01               	xorlw	1	; case 3
  5727  00157C  E0ED               	bz	l6104
  5728  00157E  0A07               	xorlw	7	; case 4
  5729  001580  E0D0               	bz	l6086
  5730  001582  0A01               	xorlw	1	; case 5
  5731  001584                     l672:
  5732                           
  5733                           ;common.c: 328: if(en_put)
  5734  001584  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  5735  001586  D021               	goto	l6122
  5736                           
  5737                           ;common.c: 329: {
  5738                           ;common.c: 330: putchar_b_buf(0,'×');
  5739  001588  0ED7               	movlw	215
  5740  00158A  6E17               	movwf	putchar_b_buf@symbol,c
  5741  00158C  0E00               	movlw	0
  5742  00158E  EC64  F00F         	call	_putchar_b_buf
  5743                           
  5744                           ;common.c: 331: putchar_b_buf(6,'ñ');
  5745  001592  EC12  F005         	call	PL186	;call to abstracted procedure
  5746  001596  EC64  F00F         	call	_putchar_b_buf
  5747                           
  5748                           ;common.c: 332: putchar_b_buf(12,':');
  5749  00159A  D837               	call	PL142	;call to abstracted procedure
  5750  00159C  EC64  F00F         	call	_putchar_b_buf
  5751                           
  5752                           ;common.c: 333: putchar_b_buf(18,(TSTime.Tdt/10) % 10 + 48);
  5753  0015A0  0E0A               	movlw	10
  5754  0015A2  6E13               	movwf	___lbmod@divisor,c
  5755  0015A4  6E0F               	movwf	___lbdiv@divisor,c
  5756  0015A6  5053               	movf	_TSTime+4,w,c
  5757  0015A8  EC1F  F012         	call	___lbdiv
  5758  0015AC  ECF7  F012         	call	___lbmod
  5759  0015B0  EC82  F00B         	call	PL166	;call to abstracted procedure
  5760  0015B4  EC64  F00F         	call	_putchar_b_buf
  5761                           
  5762                           ;common.c: 334: putchar_b_buf(24,TSTime.Tdt % 10 + 48);
  5763  0015B8  0E0A               	movlw	10
  5764  0015BA  6E13               	movwf	___lbmod@divisor,c
  5765  0015BC  5053               	movf	_TSTime+4,w,c
  5766  0015BE  ECF7  F012         	call	___lbmod
  5767  0015C2  EC85  F00B         	call	PL170	;call to abstracted procedure
  5768  0015C6  EC64  F00F         	call	_putchar_b_buf
  5769  0015CA                     l6122:
  5770                           
  5771                           ;common.c: 335: }
  5772                           ;common.c: 336: Update_Matrix(Dis_Buff);
  5773  0015CA  0EAD               	movlw	low _Dis_Buff
  5774  0015CC  6E11               	movwf	Update_Matrix@buf,c
  5775  0015CE  EC77  F011         	call	_Update_Matrix	;wreg free
  5776                           
  5777                           ;common.c: 337: en_put=1;
  5778  0015D2  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5779  0015D4  0012               	return		;funcret
  5780  0015D6                     __end_of_time_set_dt:
  5781                           	opt stack 0
  5782  0015D6                     PL2:
  5783                           	opt stack 22
  5784  0015D6  0E58               	movlw	low _default_state
  5785  0015D8  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5786  0015DA  0E28               	movlw	high _default_state
  5787  0015DC  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5788  0015DE  0E07               	movlw	7
  5789  0015E0  6E12               	movwf	RTOS_SetTask@taskDelay+1,c
  5790  0015E2  0ED0               	movlw	208
  5791  0015E4  6E11               	movwf	RTOS_SetTask@taskDelay,c
  5792  0015E6  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  5793  0015E8  6A13               	clrf	RTOS_SetTask@taskPeriod,c
  5794  0015EA  0CD0               	retlw	208
  5795  0015EC                     __end_ofPL2:
  5796                           	opt stack 0
  5797  0015EC                     PL12:
  5798                           	opt stack 22
  5799  0015EC  0E05               	movlw	5
  5800  0015EE  6E70               	movwf	_events,c
  5801  0015F0  C053  F01C         	movff	_TSTime+4,setDate@dateSet
  5802  0015F4  C054  F01D         	movff	_TSTime+5,setDate@monthSet
  5803  0015F8  C055  F01E         	movff	_TSTime+6,setDate@yearSet
  5804  0015FC  5052               	movf	_TSTime+3,w,c
  5805  0015FE  0012               	return	
  5806  001600                     __end_ofPL12:
  5807                           	opt stack 0
  5808  001600                     PL140:
  5809                           	opt stack 22
  5810  001600  0E00               	movlw	low _time_set_dt
  5811  001602  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  5812  001604  0E15               	movlw	high _time_set_dt
  5813  001606  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  5814  001608  0012               	return	
  5815  00160A                     __end_ofPL140:
  5816                           	opt stack 0
  5817  00160A                     PL142:
  5818                           	opt stack 22
  5819  00160A  0E3A               	movlw	58
  5820  00160C  6E17               	movwf	putchar_b_buf@symbol,c
  5821  00160E  0C0C               	retlw	12
  5822  001610                     __end_ofPL142:
  5823                           	opt stack 0
  5824  001610                     PL156:
  5825                           	opt stack 22
  5826  001610  0E05               	movlw	5
  5827  001612  6E70               	movwf	_events,c
  5828  001614  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  5829  001616  0C05               	retlw	5
  5830  001618                     __end_ofPL156:
  5831                           	opt stack 0
  5832                           tosu	equ	0xFFF
  5833                           tosh	equ	0xFFE
  5834                           tosl	equ	0xFFD
  5835                           pclath	equ	0xFFA
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           intcon	equ	0xFF2
  5843                           intcon2	equ	0xFF1
  5844                           postinc0	equ	0xFEE
  5845                           wreg	equ	0xFE8
  5846                           indf1	equ	0xFE7
  5847                           plusw1	equ	0xFE3
  5848                           fsr1h	equ	0xFE2
  5849                           fsr1l	equ	0xFE1
  5850                           indf2	equ	0xFDF
  5851                           postinc2	equ	0xFDE
  5852                           postdec2	equ	0xFDD
  5853                           plusw2	equ	0xFDB
  5854                           fsr2h	equ	0xFDA
  5855                           fsr2l	equ	0xFD9
  5856                           status	equ	0xFD8
  5857                           
  5858 ;; *************** function _time_set_mt *****************
  5859 ;; Defined at:
  5860 ;;		line 193 in file "common.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;		None
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;		None
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      void 
  5867 ;; Registers used:
  5868 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 3F/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;Total ram usage:        0 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    7
  5881 ;; This function calls:
  5882 ;;		_RTOS_DeleteTask
  5883 ;;		_RTOS_SetTask
  5884 ;;		_Update_Matrix
  5885 ;;		_putchar_b_buf
  5886 ;;		_setDate
  5887 ;; This function is called by:
  5888 ;;		_time_set_yr
  5889 ;;		_RTOS_DispatchTask
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           	psect	text19
  5894  000834                     __ptext19:
  5895                           	opt stack 0
  5896  000834                     _time_set_mt:
  5897                           	opt stack 22
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;common.c: 195: switch (events)
  5901                           
  5902                           ;incstack = 0
  5903  000834  D03C               	goto	l6038
  5904  000836                     l5996:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;common.c: 201: RTOS_DeleteTask(time_set_mt);
  5908  000836  D8E5               	call	PL138	;call to abstracted procedure
  5909  000838  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5910                           
  5911                           ;common.c: 202: RTOS_SetTask(time_set_dt, 0, 20);
  5912  00083C  0E00               	movlw	low _time_set_dt
  5913  00083E  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  5914  000840  0E15               	movlw	high _time_set_dt
  5915  000842  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  5916  000844  D8D2               	call	PL22	;call to abstracted procedure
  5917  000846  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5918                           
  5919                           ;common.c: 203: RTOS_SetTask(default_state, 2000, 0);
  5920  00084A  ECEB  F00A         	call	PL2	;call to abstracted procedure
  5921  00084E  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5922                           
  5923                           ;common.c: 204: events = 5;
  5924                           
  5925                           ;common.c: 205: en_put=1;
  5926  000852  EC08  F00B         	call	PL156	;call to abstracted procedure
  5927                           
  5928                           ;common.c: 206: break;
  5929  000856  D035               	goto	l645
  5930  000858                     l6006:
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;common.c: 208: RTOS_DeleteTask(time_set_mt);
  5934  000858  D8D4               	call	PL138	;call to abstracted procedure
  5935  00085A  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5936                           
  5937                           ;common.c: 209: RTOS_DeleteTask(default_state);
  5938  00085E  EC57  F007         	call	PL50	;call to abstracted procedure
  5939  000862  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  5940                           
  5941                           ;common.c: 210: RTOS_SetTask(time_led, 0, 20);
  5942  000866  EC4D  F007         	call	PL10	;call to abstracted procedure
  5943  00086A  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5944                           
  5945                           ;common.c: 211: events = 5;
  5946  00086E  0E05               	movlw	5
  5947  000870  6E70               	movwf	_events,c
  5948                           
  5949                           ;common.c: 212: break;
  5950  000872  D027               	goto	l645
  5951  000874                     l6012:
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;common.c: 214: TSTime.Tmt++;
  5955  000874  2A54               	incf	_TSTime+5,f,c
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;common.c: 215: if(TSTime.Tmt > 12) TSTime.Tmt = 1;
  5959  000876  0E0C               	movlw	12
  5960  000878  6454               	cpfsgt	_TSTime+5,c
  5961  00087A  D002               	goto	l6018
  5962                           
  5963                           ; BSR set to: 0
  5964  00087C  0E01               	movlw	1
  5965  00087E  6E54               	movwf	_TSTime+5,c
  5966  000880                     l6018:
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;common.c: 216: RTOS_SetTask(default_state, 2000, 0);
  5970  000880  ECEB  F00A         	call	PL2	;call to abstracted procedure
  5971  000884  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  5972                           
  5973                           ;common.c: 217: events = 5;
  5974                           
  5975                           ;common.c: 218: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  5976  000888  ECF6  F00A         	call	PL12	;call to abstracted procedure
  5977  00088C  EC95  F011         	call	_setDate
  5978                           
  5979                           ;common.c: 219: break;
  5980  000890  D018               	goto	l645
  5981  000892                     l6024:
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;common.c: 221: TSTime.Tmt--;
  5985  000892  0654               	decf	_TSTime+5,f,c
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;common.c: 222: if(TSTime.Tmt == 0) TSTime.Tmt = 12;
  5989  000894  5054               	movf	_TSTime+5,w,c
  5990  000896  E102               	bnz	l6030
  5991                           
  5992                           ; BSR set to: 0
  5993  000898  0E0C               	movlw	12
  5994  00089A  6E54               	movwf	_TSTime+5,c
  5995  00089C                     l6030:
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;common.c: 223: RTOS_SetTask(default_state, 2000, 0);
  5999  00089C  ECEB  F00A         	call	PL2	;call to abstracted procedure
  6000  0008A0  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  6001                           
  6002                           ;common.c: 224: events = 5;
  6003                           
  6004                           ;common.c: 225: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  6005  0008A4  ECF6  F00A         	call	PL12	;call to abstracted procedure
  6006  0008A8  EC95  F011         	call	_setDate
  6007                           
  6008                           ;common.c: 226: break;
  6009  0008AC  D00A               	goto	l645
  6010  0008AE                     l6038:
  6011                           
  6012                           ; BSR set to: 0
  6013  0008AE  5070               	movf	_events,w,c
  6014                           
  6015                           ; Switch size 1, requested type "space"
  6016                           ; Number of cases is 5, Range of values is 1 to 5
  6017                           ; switch strategies available:
  6018                           ; Name         Instructions Cycles
  6019                           ; simple_byte           16     9 (average)
  6020                           ;	Chosen strategy is simple_byte
  6021  0008B0  0A01               	xorlw	1	; case 1
  6022  0008B2  E0C1               	bz	l5996
  6023  0008B4  0A03               	xorlw	3	; case 2
  6024  0008B6  E0DE               	bz	l6012
  6025  0008B8  0A01               	xorlw	1	; case 3
  6026  0008BA  E0EB               	bz	l6024
  6027  0008BC  0A07               	xorlw	7	; case 4
  6028  0008BE  E0CC               	bz	l6006
  6029  0008C0  0A01               	xorlw	1	; case 5
  6030  0008C2                     l645:
  6031                           
  6032                           ;common.c: 228: if(en_put)
  6033  0008C2  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6034  0008C4  D08C               	goto	l6070
  6035                           
  6036                           ;common.c: 229: {
  6037                           ;common.c: 230: putchar_b_buf(0,'Ì');
  6038  0008C6  0ECC               	movlw	204
  6039  0008C8  6E17               	movwf	putchar_b_buf@symbol,c
  6040  0008CA  0E00               	movlw	0
  6041  0008CC  EC64  F00F         	call	_putchar_b_buf
  6042                           
  6043                           ;common.c: 231: putchar_b_buf(6,'ñ');
  6044  0008D0  D8A9               	call	PL186	;call to abstracted procedure
  6045  0008D2  EC64  F00F         	call	_putchar_b_buf
  6046                           
  6047                           ;common.c: 232: putchar_b_buf(12,':');
  6048  0008D6  EC05  F00B         	call	PL142	;call to abstracted procedure
  6049  0008DA  EC64  F00F         	call	_putchar_b_buf
  6050                           
  6051                           ;common.c: 233: switch(TSTime.Tmt)
  6052  0008DE  D066               	goto	l6068
  6053  0008E0                     l6042:
  6054                           
  6055                           ;common.c: 236: putchar_b_buf(18,'Ñ');
  6056  0008E0  D88D               	call	PL128	;call to abstracted procedure
  6057  0008E2  EC64  F00F         	call	_putchar_b_buf
  6058                           
  6059                           ;common.c: 237: putchar_b_buf(24,'÷');
  6060  0008E6  0EF7               	movlw	247
  6061  0008E8  6E17               	movwf	putchar_b_buf@symbol,c
  6062  0008EA  0E18               	movlw	24
  6063  0008EC  EC64  F00F         	call	_putchar_b_buf
  6064                           
  6065                           ;common.c: 238: break;
  6066  0008F0  D076               	goto	l6070
  6067  0008F2                     l6044:
  6068                           
  6069                           ;common.c: 240: putchar_b_buf(18,'Ë');
  6070  0008F2  D88C               	call	PL158	;call to abstracted procedure
  6071  0008F4  EC64  F00F         	call	_putchar_b_buf
  6072                           
  6073                           ;common.c: 241: putchar_b_buf(24,'ò');
  6074  0008F8  EC5C  F007         	call	PL104	;call to abstracted procedure
  6075  0008FC  EC64  F00F         	call	_putchar_b_buf
  6076                           
  6077                           ;common.c: 242: break;
  6078  000900  D06E               	goto	l6070
  6079  000902                     l6046:
  6080                           
  6081                           ;common.c: 244: putchar_b_buf(18,'Á');
  6082  000902  0EC1               	movlw	193
  6083  000904  6E17               	movwf	putchar_b_buf@symbol,c
  6084  000906  0E12               	movlw	18
  6085  000908  EC64  F00F         	call	_putchar_b_buf
  6086                           
  6087                           ;common.c: 245: putchar_b_buf(24,'ð');
  6088  00090C  D874               	call	PL100	;call to abstracted procedure
  6089  00090E  EC64  F00F         	call	_putchar_b_buf
  6090                           
  6091                           ;common.c: 246: break;
  6092  000912  D065               	goto	l6070
  6093  000914                     l6048:
  6094                           
  6095                           ;common.c: 248: putchar_b_buf(18,'Ê');
  6096  000914  0ECA               	movlw	202
  6097  000916  6E17               	movwf	putchar_b_buf@symbol,c
  6098  000918  0E12               	movlw	18
  6099  00091A  EC64  F00F         	call	_putchar_b_buf
  6100                           
  6101                           ;common.c: 249: putchar_b_buf(24,'â');
  6102  00091E  0EE2               	movlw	226
  6103  000920  6E17               	movwf	putchar_b_buf@symbol,c
  6104  000922  0E18               	movlw	24
  6105  000924  EC64  F00F         	call	_putchar_b_buf
  6106                           
  6107                           ;common.c: 250: break;
  6108  000928  D05A               	goto	l6070
  6109  00092A                     l6050:
  6110                           
  6111                           ;common.c: 252: putchar_b_buf(18,'Ò');
  6112  00092A  0ED2               	movlw	210
  6113  00092C  6E17               	movwf	putchar_b_buf@symbol,c
  6114  00092E  0E12               	movlw	18
  6115  000930  EC64  F00F         	call	_putchar_b_buf
  6116                           
  6117                           ;common.c: 253: putchar_b_buf(24,'ð');
  6118  000934  D860               	call	PL100	;call to abstracted procedure
  6119  000936  EC64  F00F         	call	_putchar_b_buf
  6120                           
  6121                           ;common.c: 254: break;
  6122  00093A  D051               	goto	l6070
  6123  00093C                     l6052:
  6124                           
  6125                           ;common.c: 256: putchar_b_buf(18,'×');
  6126  00093C  D86D               	call	PL164	;call to abstracted procedure
  6127  00093E  EC64  F00F         	call	_putchar_b_buf
  6128                           
  6129                           ;common.c: 257: putchar_b_buf(24,'ð');
  6130  000942  D859               	call	PL100	;call to abstracted procedure
  6131  000944  EC64  F00F         	call	_putchar_b_buf
  6132                           
  6133                           ;common.c: 258: break;
  6134  000948  D04A               	goto	l6070
  6135  00094A                     l6054:
  6136                           
  6137                           ;common.c: 260: putchar_b_buf(18,'Ë');
  6138  00094A  D860               	call	PL158	;call to abstracted procedure
  6139  00094C  EC64  F00F         	call	_putchar_b_buf
  6140                           
  6141                           ;common.c: 261: putchar_b_buf(24,'ï');
  6142  000950  D866               	call	PL176	;call to abstracted procedure
  6143  000952  EC64  F00F         	call	_putchar_b_buf
  6144                           
  6145                           ;common.c: 262: break;
  6146  000956  D043               	goto	l6070
  6147  000958                     l6056:
  6148                           
  6149                           ;common.c: 264: putchar_b_buf(18,'Ñ');
  6150  000958  D851               	call	PL128	;call to abstracted procedure
  6151  00095A  EC64  F00F         	call	_putchar_b_buf
  6152                           
  6153                           ;common.c: 265: putchar_b_buf(24,'ï');
  6154  00095E  D85F               	call	PL176	;call to abstracted procedure
  6155  000960  EC64  F00F         	call	_putchar_b_buf
  6156                           
  6157                           ;common.c: 266: break;
  6158  000964  D03C               	goto	l6070
  6159  000966                     l6058:
  6160                           
  6161                           ;common.c: 268: putchar_b_buf(18,'Â');
  6162  000966  D855               	call	PL162	;call to abstracted procedure
  6163  000968  EC64  F00F         	call	_putchar_b_buf
  6164                           
  6165                           ;common.c: 269: putchar_b_buf(24,'ð');
  6166  00096C  D844               	call	PL100	;call to abstracted procedure
  6167  00096E  EC64  F00F         	call	_putchar_b_buf
  6168                           
  6169                           ;common.c: 270: break;
  6170  000972  D035               	goto	l6070
  6171  000974                     l6060:
  6172                           
  6173                           ;common.c: 272: putchar_b_buf(18,'Æ');
  6174  000974  0EC6               	movlw	198
  6175  000976  6E17               	movwf	putchar_b_buf@symbol,c
  6176  000978  0E12               	movlw	18
  6177  00097A  EC64  F00F         	call	_putchar_b_buf
  6178                           
  6179                           ;common.c: 273: putchar_b_buf(24,'ò');
  6180  00097E  EC5C  F007         	call	PL104	;call to abstracted procedure
  6181  000982  EC64  F00F         	call	_putchar_b_buf
  6182                           
  6183                           ;common.c: 274: break;
  6184  000986  D02B               	goto	l6070
  6185  000988                     l6062:
  6186                           
  6187                           ;common.c: 276: putchar_b_buf(18,'Ë');
  6188  000988  D841               	call	PL158	;call to abstracted procedure
  6189  00098A  EC64  F00F         	call	_putchar_b_buf
  6190                           
  6191                           ;common.c: 277: putchar_b_buf(24,'ñ');
  6192  00098E  0EF1               	movlw	241
  6193  000990  6E17               	movwf	putchar_b_buf@symbol,c
  6194  000992  0E18               	movlw	24
  6195  000994  EC64  F00F         	call	_putchar_b_buf
  6196                           
  6197                           ;common.c: 278: break;
  6198  000998  D022               	goto	l6070
  6199  00099A                     l6064:
  6200                           
  6201                           ;common.c: 280: putchar_b_buf(18,'Ã');
  6202  00099A  0EC3               	movlw	195
  6203  00099C  6E17               	movwf	putchar_b_buf@symbol,c
  6204  00099E  0E12               	movlw	18
  6205  0009A0  EC64  F00F         	call	_putchar_b_buf
  6206                           
  6207                           ;common.c: 281: putchar_b_buf(24,'ð');
  6208  0009A4  D828               	call	PL100	;call to abstracted procedure
  6209  0009A6  EC64  F00F         	call	_putchar_b_buf
  6210                           
  6211                           ;common.c: 282: break;
  6212  0009AA  D019               	goto	l6070
  6213  0009AC                     l6068:
  6214  0009AC  5054               	movf	_TSTime+5,w,c
  6215                           
  6216                           ; Switch size 1, requested type "space"
  6217                           ; Number of cases is 12, Range of values is 1 to 12
  6218                           ; switch strategies available:
  6219                           ; Name         Instructions Cycles
  6220                           ; simple_byte           37    19 (average)
  6221                           ;	Chosen strategy is simple_byte
  6222  0009AE  0A01               	xorlw	1	; case 1
  6223  0009B0  E097               	bz	l6042
  6224  0009B2  0A03               	xorlw	3	; case 2
  6225  0009B4  E09E               	bz	l6044
  6226  0009B6  0A01               	xorlw	1	; case 3
  6227  0009B8  E0A4               	bz	l6046
  6228  0009BA  0A07               	xorlw	7	; case 4
  6229  0009BC  E0AB               	bz	l6048
  6230  0009BE  0A01               	xorlw	1	; case 5
  6231  0009C0  E0B4               	bz	l6050
  6232  0009C2  0A03               	xorlw	3	; case 6
  6233  0009C4  E0BB               	bz	l6052
  6234  0009C6  0A01               	xorlw	1	; case 7
  6235  0009C8  E0C0               	bz	l6054
  6236  0009CA  0A0F               	xorlw	15	; case 8
  6237  0009CC  E0C5               	bz	l6056
  6238  0009CE  0A01               	xorlw	1	; case 9
  6239  0009D0  E0CA               	bz	l6058
  6240  0009D2  0A03               	xorlw	3	; case 10
  6241  0009D4  E0CF               	bz	l6060
  6242  0009D6  0A01               	xorlw	1	; case 11
  6243  0009D8  E0D7               	bz	l6062
  6244  0009DA  0A07               	xorlw	7	; case 12
  6245  0009DC  E0DE               	bz	l6064
  6246  0009DE                     l6070:
  6247                           
  6248                           ;common.c: 285: }
  6249                           ;common.c: 286: Update_Matrix(Dis_Buff);
  6250  0009DE  0EAD               	movlw	low _Dis_Buff
  6251  0009E0  6E11               	movwf	Update_Matrix@buf,c
  6252  0009E2  EC77  F011         	call	_Update_Matrix	;wreg free
  6253                           
  6254                           ;common.c: 287: en_put=1;
  6255  0009E6  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6256  0009E8  0012               	return		;funcret
  6257  0009EA                     __end_of_time_set_mt:
  6258                           	opt stack 0
  6259  0009EA                     PL22:
  6260                           	opt stack 22
  6261  0009EA  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  6262  0009EC  6A11               	clrf	RTOS_SetTask@taskDelay,c
  6263  0009EE  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  6264  0009F0  0E14               	movlw	20
  6265  0009F2  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  6266  0009F4  0C14               	retlw	20
  6267  0009F6                     __end_ofPL22:
  6268                           	opt stack 0
  6269  0009F6                     PL100:
  6270                           	opt stack 22
  6271  0009F6  0EF0               	movlw	240
  6272  0009F8  6E17               	movwf	putchar_b_buf@symbol,c
  6273  0009FA  0C18               	retlw	24
  6274  0009FC                     __end_ofPL100:
  6275                           	opt stack 0
  6276  0009FC                     PL128:
  6277                           	opt stack 22
  6278  0009FC  0ED1               	movlw	209
  6279  0009FE  6E17               	movwf	putchar_b_buf@symbol,c
  6280  000A00  0C12               	retlw	18
  6281  000A02                     __end_ofPL128:
  6282                           	opt stack 0
  6283  000A02                     PL138:
  6284                           	opt stack 22
  6285  000A02  0E34               	movlw	low _time_set_mt
  6286  000A04  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6287  000A06  0E08               	movlw	high _time_set_mt
  6288  000A08  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6289  000A0A  0012               	return	
  6290  000A0C                     __end_ofPL138:
  6291                           	opt stack 0
  6292  000A0C                     PL158:
  6293                           	opt stack 22
  6294  000A0C  0ECB               	movlw	203
  6295  000A0E  6E17               	movwf	putchar_b_buf@symbol,c
  6296  000A10  0C12               	retlw	18
  6297  000A12                     __end_ofPL158:
  6298                           	opt stack 0
  6299  000A12                     PL162:
  6300                           	opt stack 22
  6301  000A12  0EC2               	movlw	194
  6302  000A14  6E17               	movwf	putchar_b_buf@symbol,c
  6303  000A16  0C12               	retlw	18
  6304  000A18                     __end_ofPL162:
  6305                           	opt stack 0
  6306  000A18                     PL164:
  6307                           	opt stack 22
  6308  000A18  0ED7               	movlw	215
  6309  000A1A  6E17               	movwf	putchar_b_buf@symbol,c
  6310  000A1C  0C12               	retlw	18
  6311  000A1E                     __end_ofPL164:
  6312                           	opt stack 0
  6313  000A1E                     PL176:
  6314                           	opt stack 22
  6315  000A1E  0EEF               	movlw	239
  6316  000A20  6E17               	movwf	putchar_b_buf@symbol,c
  6317  000A22  0C18               	retlw	24
  6318  000A24                     __end_ofPL176:
  6319                           	opt stack 0
  6320  000A24                     PL186:
  6321                           	opt stack 22
  6322  000A24  0EF1               	movlw	241
  6323  000A26  6E17               	movwf	putchar_b_buf@symbol,c
  6324  000A28  0C06               	retlw	6
  6325  000A2A                     __end_ofPL186:
  6326                           	opt stack 0
  6327                           tosu	equ	0xFFF
  6328                           tosh	equ	0xFFE
  6329                           tosl	equ	0xFFD
  6330                           pclath	equ	0xFFA
  6331                           tblptru	equ	0xFF8
  6332                           tblptrh	equ	0xFF7
  6333                           tblptrl	equ	0xFF6
  6334                           tablat	equ	0xFF5
  6335                           prodh	equ	0xFF4
  6336                           prodl	equ	0xFF3
  6337                           intcon	equ	0xFF2
  6338                           intcon2	equ	0xFF1
  6339                           postinc0	equ	0xFEE
  6340                           wreg	equ	0xFE8
  6341                           indf1	equ	0xFE7
  6342                           plusw1	equ	0xFE3
  6343                           fsr1h	equ	0xFE2
  6344                           fsr1l	equ	0xFE1
  6345                           indf2	equ	0xFDF
  6346                           postinc2	equ	0xFDE
  6347                           postdec2	equ	0xFDD
  6348                           plusw2	equ	0xFDB
  6349                           fsr2h	equ	0xFDA
  6350                           fsr2l	equ	0xFD9
  6351                           status	equ	0xFD8
  6352                           
  6353 ;; *************** function _default_state *****************
  6354 ;; Defined at:
  6355 ;;		line 546 in file "common.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;                  1    wreg      void 
  6362 ;; Registers used:
  6363 ;;		wreg, status,2
  6364 ;; Tracked objects:
  6365 ;;		On entry : 3F/0
  6366 ;;		On exit  : 3F/0
  6367 ;;		Unchanged: 3F/0
  6368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;Total ram usage:        0 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:    3
  6376 ;; This function calls:
  6377 ;;		Nothing
  6378 ;; This function is called by:
  6379 ;;		_time_set_min
  6380 ;;		_time_set_hr
  6381 ;;		_time_set_yr
  6382 ;;		_time_set_mt
  6383 ;;		_time_set_dt
  6384 ;;		_time_set_dy
  6385 ;;		_home_temp
  6386 ;;		_time_led
  6387 ;;		_RTOS_DispatchTask
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text20
  6392  002858                     __ptext20:
  6393                           	opt stack 0
  6394  002858                     _default_state:
  6395                           	opt stack 26
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;common.c: 548: events = 4;
  6399                           
  6400                           ;incstack = 0
  6401  002858  0E04               	movlw	4
  6402  00285A  6E70               	movwf	_events,c
  6403                           
  6404                           ; BSR set to: 0
  6405  00285C  0C04               	retlw	4	;funcret
  6406  00285E                     __end_of_default_state:
  6407                           	opt stack 0
  6408                           tosu	equ	0xFFF
  6409                           tosh	equ	0xFFE
  6410                           tosl	equ	0xFFD
  6411                           pclath	equ	0xFFA
  6412                           tblptru	equ	0xFF8
  6413                           tblptrh	equ	0xFF7
  6414                           tblptrl	equ	0xFF6
  6415                           tablat	equ	0xFF5
  6416                           prodh	equ	0xFF4
  6417                           prodl	equ	0xFF3
  6418                           intcon	equ	0xFF2
  6419                           intcon2	equ	0xFF1
  6420                           postinc0	equ	0xFEE
  6421                           wreg	equ	0xFE8
  6422                           indf1	equ	0xFE7
  6423                           plusw1	equ	0xFE3
  6424                           fsr1h	equ	0xFE2
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           postinc2	equ	0xFDE
  6428                           postdec2	equ	0xFDD
  6429                           plusw2	equ	0xFDB
  6430                           fsr2h	equ	0xFDA
  6431                           fsr2l	equ	0xFD9
  6432                           status	equ	0xFD8
  6433                           
  6434 ;; *************** function _time_set_hr *****************
  6435 ;; Defined at:
  6436 ;;		line 78 in file "common.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;		None
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      void 
  6443 ;; Registers used:
  6444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6445 ;; Tracked objects:
  6446 ;;		On entry : 3F/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;Total ram usage:        0 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    7
  6457 ;; This function calls:
  6458 ;;		_RTOS_DeleteTask
  6459 ;;		_RTOS_SetTask
  6460 ;;		_Update_Matrix
  6461 ;;		___lbdiv
  6462 ;;		___lbmod
  6463 ;;		_clear_matrix
  6464 ;;		_putchar_b_buf
  6465 ;;		_setTime
  6466 ;; This function is called by:
  6467 ;;		_time_set_min
  6468 ;;		_RTOS_DispatchTask
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text21
  6473  000ECE                     __ptext21:
  6474                           	opt stack 0
  6475  000ECE                     _time_set_hr:
  6476                           	opt stack 22
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;common.c: 80: show_digit = ~show_digit;
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;incstack = 0
  6483  000ECE  B26F               	btfsc	_show_digit/(0+8),_show_digit& (0+7),c
  6484  000ED0  D002               	goto	u4290
  6485  000ED2  826F               	bsf	_show_digit/(0+8),_show_digit& (0+7),c
  6486  000ED4  D043               	goto	l5924
  6487  000ED6                     u4290:
  6488  000ED6  926F               	bcf	_show_digit/(0+8),_show_digit& (0+7),c
  6489                           
  6490                           ;common.c: 81: switch (events)
  6491  000ED8  D041               	goto	l5924
  6492  000EDA                     l5880:
  6493                           
  6494                           ;common.c: 87: RTOS_DeleteTask(time_set_hr);
  6495  000EDA  D890               	call	PL110	;call to abstracted procedure
  6496  000EDC  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  6497                           
  6498                           ;common.c: 88: RTOS_SetTask(time_set_yr, 0, 20);
  6499  000EE0  0E18               	movlw	low _time_set_yr
  6500  000EE2  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  6501  000EE4  0E16               	movlw	high _time_set_yr
  6502  000EE6  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  6503  000EE8  ECF5  F004         	call	PL22	;call to abstracted procedure
  6504  000EEC  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  6505                           
  6506                           ;common.c: 89: RTOS_SetTask(default_state, 2000, 0);
  6507  000EF0  ECEB  F00A         	call	PL2	;call to abstracted procedure
  6508  000EF4  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  6509                           
  6510                           ;common.c: 91: events = 5;
  6511  000EF8  0E05               	movlw	5
  6512  000EFA  6E70               	movwf	_events,c
  6513                           
  6514                           ;common.c: 92: clear_matrix();
  6515  000EFC  ECE1  F013         	call	_clear_matrix	;wreg free
  6516                           
  6517                           ;common.c: 93: en_put = 0;
  6518  000F00  906F               	bcf	_en_put/(0+8),_en_put& (0+7),c
  6519                           
  6520                           ;common.c: 94: break;
  6521  000F02  D036               	goto	l615
  6522  000F04                     l5892:
  6523                           
  6524                           ;common.c: 96: RTOS_DeleteTask(time_set_hr);
  6525  000F04  D87B               	call	PL110	;call to abstracted procedure
  6526  000F06  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  6527                           
  6528                           ;common.c: 97: RTOS_DeleteTask(default_state);
  6529  000F0A  EC57  F007         	call	PL50	;call to abstracted procedure
  6530  000F0E  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  6531                           
  6532                           ;common.c: 98: RTOS_SetTask(time_led, 0, 20);
  6533  000F12  EC4D  F007         	call	PL10	;call to abstracted procedure
  6534  000F16  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  6535                           
  6536                           ;common.c: 99: events = 5;
  6537  000F1A  0E05               	movlw	5
  6538  000F1C  6E70               	movwf	_events,c
  6539                           
  6540                           ;common.c: 100: break;
  6541  000F1E  D028               	goto	l615
  6542  000F20                     l5898:
  6543                           
  6544                           ;common.c: 102: TSTime.Thr++;
  6545  000F20  2A51               	incf	_TSTime+2,f,c
  6546                           
  6547                           ;common.c: 103: if(TSTime.Thr > 23) TSTime.Thr = 0;
  6548  000F22  0E17               	movlw	23
  6549  000F24  6451               	cpfsgt	_TSTime+2,c
  6550  000F26  D001               	goto	l5904
  6551  000F28  6A51               	clrf	_TSTime+2,c
  6552  000F2A                     l5904:
  6553                           
  6554                           ;common.c: 104: RTOS_SetTask(default_state, 2000, 0);
  6555  000F2A  ECEB  F00A         	call	PL2	;call to abstracted procedure
  6556  000F2E  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  6557                           
  6558                           ;common.c: 105: events = 5;
  6559  000F32  0E05               	movlw	5
  6560  000F34  6E70               	movwf	_events,c
  6561                           
  6562                           ;common.c: 106: setTime(TSTime.Thr,TSTime.Tmin,0);
  6563  000F36  D85D               	call	PL86	;call to abstracted procedure
  6564  000F38  EC51  F012         	call	_setTime
  6565                           
  6566                           ;common.c: 107: break;
  6567  000F3C  D019               	goto	l615
  6568  000F3E                     l5910:
  6569                           
  6570                           ;common.c: 109: TSTime.Thr--;
  6571  000F3E  0651               	decf	_TSTime+2,f,c
  6572                           
  6573                           ;common.c: 110: if(TSTime.Thr == 255) TSTime.Thr = 23;
  6574  000F40  2851               	incf	_TSTime+2,w,c
  6575  000F42  E102               	bnz	l5916
  6576  000F44  0E17               	movlw	23
  6577  000F46  6E51               	movwf	_TSTime+2,c
  6578  000F48                     l5916:
  6579                           
  6580                           ;common.c: 111: RTOS_SetTask(default_state, 2000, 0);
  6581  000F48  ECEB  F00A         	call	PL2	;call to abstracted procedure
  6582  000F4C  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  6583                           
  6584                           ;common.c: 112: events = 5;
  6585  000F50  0E05               	movlw	5
  6586  000F52  6E70               	movwf	_events,c
  6587                           
  6588                           ;common.c: 113: setTime(TSTime.Thr,TSTime.Tmin,0);
  6589  000F54  D84E               	call	PL86	;call to abstracted procedure
  6590  000F56  EC51  F012         	call	_setTime
  6591                           
  6592                           ;common.c: 114: break;
  6593  000F5A  D00A               	goto	l615
  6594  000F5C                     l5924:
  6595  000F5C  5070               	movf	_events,w,c
  6596                           
  6597                           ; Switch size 1, requested type "space"
  6598                           ; Number of cases is 5, Range of values is 1 to 5
  6599                           ; switch strategies available:
  6600                           ; Name         Instructions Cycles
  6601                           ; simple_byte           16     9 (average)
  6602                           ;	Chosen strategy is simple_byte
  6603  000F5E  0A01               	xorlw	1	; case 1
  6604  000F60  E0BC               	bz	l5880
  6605  000F62  0A03               	xorlw	3	; case 2
  6606  000F64  E0DD               	bz	l5898
  6607  000F66  0A01               	xorlw	1	; case 3
  6608  000F68  E0EA               	bz	l5910
  6609  000F6A  0A07               	xorlw	7	; case 4
  6610  000F6C  E0CB               	bz	l5892
  6611  000F6E  0A01               	xorlw	1	; case 5
  6612  000F70                     l615:
  6613                           
  6614                           ;common.c: 116: if(en_put)
  6615  000F70  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  6616  000F72  D039               	goto	l5938
  6617                           
  6618                           ;common.c: 117: {
  6619                           ;common.c: 118: if(show_digit)
  6620  000F74  A26F               	btfss	_show_digit/(0+8),_show_digit& (0+7),c
  6621  000F76  D02F               	goto	l5936
  6622                           
  6623                           ;common.c: 119: {
  6624                           ;common.c: 121: putchar_b_buf(13,(TSTime.Tmin/10) % 10 + 48);
  6625  000F78  D84B               	call	PL148	;call to abstracted procedure
  6626  000F7A  EC1F  F012         	call	___lbdiv
  6627  000F7E  ECF7  F012         	call	___lbmod
  6628  000F82  D852               	call	PL178	;call to abstracted procedure
  6629  000F84  EC64  F00F         	call	_putchar_b_buf
  6630                           
  6631                           ;common.c: 122: putchar_b_buf(19,TSTime.Tmin % 10 + 48);
  6632  000F88  D84B               	call	PL172	;call to abstracted procedure
  6633  000F8A  ECF7  F012         	call	___lbmod
  6634  000F8E  D845               	call	PL168	;call to abstracted procedure
  6635  000F90  EC64  F00F         	call	_putchar_b_buf
  6636                           
  6637                           ;common.c: 124: if((TSTime.Thr/10) % 10)
  6638  000F94  D838               	call	PL122	;call to abstracted procedure
  6639  000F96  EC1F  F012         	call	___lbdiv
  6640  000F9A  ECF7  F012         	call	___lbmod
  6641  000F9E  0900               	iorlw	0
  6642  000FA0  E00B               	bz	l5934
  6643                           
  6644                           ;common.c: 125: putchar_b_buf(0,(TSTime.Thr/10) % 10 + 48);
  6645  000FA2  D831               	call	PL122	;call to abstracted procedure
  6646  000FA4  EC1F  F012         	call	___lbdiv
  6647  000FA8  ECF7  F012         	call	___lbmod
  6648  000FAC  0F30               	addlw	48
  6649  000FAE  6E17               	movwf	putchar_b_buf@symbol,c
  6650  000FB0  0E00               	movlw	0
  6651  000FB2  EC64  F00F         	call	_putchar_b_buf
  6652  000FB6  D004               	goto	l625
  6653  000FB8                     l5934:
  6654                           
  6655                           ;common.c: 126: else
  6656                           ;common.c: 127: putchar_b_buf(0,0);
  6657  000FB8  0E00               	movlw	0
  6658  000FBA  6A17               	clrf	putchar_b_buf@symbol,c
  6659  000FBC  EC64  F00F         	call	_putchar_b_buf
  6660  000FC0                     l625:
  6661                           
  6662                           ;common.c: 128: putchar_b_buf(6,TSTime.Thr % 10 + 48);
  6663  000FC0  0E0A               	movlw	10
  6664  000FC2  6E13               	movwf	___lbmod@divisor,c
  6665  000FC4  5051               	movf	_TSTime+2,w,c
  6666  000FC6  ECF7  F012         	call	___lbmod
  6667  000FCA  0F30               	addlw	48
  6668  000FCC  6E17               	movwf	putchar_b_buf@symbol,c
  6669  000FCE  0E06               	movlw	6
  6670  000FD0  EC64  F00F         	call	_putchar_b_buf
  6671                           
  6672                           ;common.c: 129: }
  6673  000FD4  D008               	goto	l5938
  6674  000FD6                     l5936:
  6675                           
  6676                           ;common.c: 130: else
  6677                           ;common.c: 131: {
  6678                           ;common.c: 133: putchar_b_buf(0,0);
  6679  000FD6  0E00               	movlw	0
  6680  000FD8  6A17               	clrf	putchar_b_buf@symbol,c
  6681  000FDA  EC64  F00F         	call	_putchar_b_buf
  6682                           
  6683                           ;common.c: 134: putchar_b_buf(6,0);
  6684  000FDE  6A17               	clrf	putchar_b_buf@symbol,c
  6685  000FE0  0E06               	movlw	6
  6686  000FE2  EC64  F00F         	call	_putchar_b_buf
  6687  000FE6                     l5938:
  6688                           
  6689                           ;common.c: 135: }
  6690                           ;common.c: 136: }
  6691                           ;common.c: 137: Update_Matrix(Dis_Buff);
  6692  000FE6  0EAD               	movlw	low _Dis_Buff
  6693  000FE8  6E11               	movwf	Update_Matrix@buf,c
  6694  000FEA  EC77  F011         	call	_Update_Matrix	;wreg free
  6695                           
  6696                           ;common.c: 138: en_put = 1;
  6697  000FEE  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  6698  000FF0  0012               	return		;funcret
  6699  000FF2                     __end_of_time_set_hr:
  6700                           	opt stack 0
  6701  000FF2                     PL86:
  6702                           	opt stack 22
  6703  000FF2  C050  F01C         	movff	_TSTime+1,setTime@mSet
  6704  000FF6  6A1D               	clrf	setTime@sSet,c
  6705  000FF8  5051               	movf	_TSTime+2,w,c
  6706  000FFA  0012               	return	
  6707  000FFC                     __end_ofPL86:
  6708                           	opt stack 0
  6709  000FFC                     PL110:
  6710                           	opt stack 22
  6711  000FFC  0ECE               	movlw	low _time_set_hr
  6712  000FFE  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  6713  001000  0E0E               	movlw	high _time_set_hr
  6714  001002  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  6715  001004  0012               	return	
  6716  001006                     __end_ofPL110:
  6717                           	opt stack 0
  6718  001006                     PL122:
  6719                           	opt stack 22
  6720  001006  0E0A               	movlw	10
  6721  001008  6E13               	movwf	___lbmod@divisor,c
  6722  00100A  6E0F               	movwf	___lbdiv@divisor,c
  6723  00100C  5051               	movf	_TSTime+2,w,c
  6724  00100E  0012               	return	
  6725  001010                     __end_ofPL122:
  6726                           	opt stack 0
  6727  001010                     PL148:
  6728                           	opt stack 22
  6729  001010  0E0A               	movlw	10
  6730  001012  6E13               	movwf	___lbmod@divisor,c
  6731  001014  6E0F               	movwf	___lbdiv@divisor,c
  6732  001016  5050               	movf	_TSTime+1,w,c
  6733  001018  0012               	return	
  6734  00101A                     __end_ofPL148:
  6735                           	opt stack 0
  6736  00101A                     PL168:
  6737                           	opt stack 22
  6738  00101A  0F30               	addlw	48
  6739  00101C  6E17               	movwf	putchar_b_buf@symbol,c
  6740  00101E  0C13               	retlw	19
  6741  001020                     __end_ofPL168:
  6742                           	opt stack 0
  6743  001020                     PL172:
  6744                           	opt stack 22
  6745  001020  0E0A               	movlw	10
  6746  001022  6E13               	movwf	___lbmod@divisor,c
  6747  001024  5050               	movf	_TSTime+1,w,c
  6748  001026  0012               	return	
  6749  001028                     __end_ofPL172:
  6750                           	opt stack 0
  6751  001028                     PL178:
  6752                           	opt stack 22
  6753  001028  0F30               	addlw	48
  6754  00102A  6E17               	movwf	putchar_b_buf@symbol,c
  6755  00102C  0C0D               	retlw	13
  6756  00102E                     __end_ofPL178:
  6757                           	opt stack 0
  6758                           tosu	equ	0xFFF
  6759                           tosh	equ	0xFFE
  6760                           tosl	equ	0xFFD
  6761                           pclath	equ	0xFFA
  6762                           tblptru	equ	0xFF8
  6763                           tblptrh	equ	0xFF7
  6764                           tblptrl	equ	0xFF6
  6765                           tablat	equ	0xFF5
  6766                           prodh	equ	0xFF4
  6767                           prodl	equ	0xFF3
  6768                           intcon	equ	0xFF2
  6769                           intcon2	equ	0xFF1
  6770                           postinc0	equ	0xFEE
  6771                           wreg	equ	0xFE8
  6772                           indf1	equ	0xFE7
  6773                           plusw1	equ	0xFE3
  6774                           fsr1h	equ	0xFE2
  6775                           fsr1l	equ	0xFE1
  6776                           indf2	equ	0xFDF
  6777                           postinc2	equ	0xFDE
  6778                           postdec2	equ	0xFDD
  6779                           plusw2	equ	0xFDB
  6780                           fsr2h	equ	0xFDA
  6781                           fsr2l	equ	0xFD9
  6782                           status	equ	0xFD8
  6783                           
  6784 ;; *************** function _key_press *****************
  6785 ;; Defined at:
  6786 ;;		line 5 in file "key.c"
  6787 ;; Parameters:    Size  Location     Type
  6788 ;;		None
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;  key             1   14[COMRAM] unsigned char 
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  1    wreg      void 
  6793 ;; Registers used:
  6794 ;;		wreg, status,2, status,0
  6795 ;; Tracked objects:
  6796 ;;		On entry : 3F/0
  6797 ;;		On exit  : 3F/0
  6798 ;;		Unchanged: 3F/0
  6799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6804 ;;Total ram usage:        1 bytes
  6805 ;; Hardware stack levels used:    1
  6806 ;; Hardware stack levels required when called:    3
  6807 ;; This function calls:
  6808 ;;		Nothing
  6809 ;; This function is called by:
  6810 ;;		_main
  6811 ;;		_RTOS_DispatchTask
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           	psect	text22
  6816  002230                     __ptext22:
  6817                           	opt stack 0
  6818  002230                     _key_press:
  6819                           	opt stack 26
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;key.c: 7: static uint8_t count = 0;
  6823                           ;key.c: 8: uint8_t key;
  6824                           ;key.c: 10: if ((PORTB & (1<<4))==0)
  6825                           
  6826                           ;incstack = 0
  6827  002230  B881               	btfsc	3969,4,c	;volatile
  6828  002232  D002               	goto	l774
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;key.c: 11: key = 1;
  6832  002234  0E01               	movlw	1
  6833  002236  D00B               	goto	L3
  6834  002238                     l774:
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;key.c: 12: else if ((PORTB & (1<<1))==0)
  6838  002238  B281               	btfsc	3969,1,c	;volatile
  6839  00223A  D002               	goto	l776
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;key.c: 13: key = 2;
  6843  00223C  0E02               	movlw	2
  6844  00223E  D007               	goto	L3
  6845  002240                     l776:
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;key.c: 14: else if ((PORTB & (1<<2))==0)
  6849  002240  B481               	btfsc	3969,2,c	;volatile
  6850  002242  D002               	goto	l778
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;key.c: 15: key = 3;
  6854  002244  0E03               	movlw	3
  6855  002246  D003               	goto	L3
  6856  002248                     l778:
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;key.c: 16: else if ((PORTB & (1<<3))==0)
  6860  002248  B681               	btfsc	3969,3,c	;volatile
  6861  00224A  D003               	goto	l780
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;key.c: 17: key = 4;
  6865  00224C  0E04               	movlw	4
  6866  00224E                     L3:
  6867  00224E  6E0F               	movwf	key_press@key,c
  6868  002250  D001               	goto	l6308
  6869  002252                     l780:
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;key.c: 18: else
  6873                           ;key.c: 19: key = (0);
  6874  002252  6A0F               	clrf	key_press@key,c
  6875  002254                     l6308:
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;key.c: 22: if(key){
  6879  002254  500F               	movf	key_press@key,w,c
  6880  002256  E00C               	bz	l782
  6881                           
  6882                           ; BSR set to: 0
  6883                           ;key.c: 23: if(count <= 30)
  6884  002258  0E1F               	movlw	31
  6885  00225A  6068               	cpfslt	key_press@count,c
  6886  00225C  0C1F               	retlw	31
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;key.c: 24: {
  6890                           ;key.c: 25: count++;
  6891  00225E  2A68               	incf	key_press@count,f,c
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;key.c: 26: if(count == 30)
  6895  002260  0E1E               	movlw	30
  6896  002262  1868               	xorwf	key_press@count,w,c
  6897  002264  A4D8               	btfss	status,2,c
  6898  002266  0012               	return	
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;key.c: 27: {
  6902                           ;key.c: 29: events = key;
  6903  002268  C00F  F070         	movff	key_press@key,_events
  6904                           
  6905                           ;key.c: 30: count = 0;
  6906  00226C  6A68               	clrf	key_press@count,c
  6907  00226E  0012               	return	
  6908  002270                     l782:
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;key.c: 34: else
  6912                           ;key.c: 35: {
  6913                           ;key.c: 36: count = 0;
  6914  002270  6A68               	clrf	key_press@count,c
  6915                           
  6916                           ; BSR set to: 0
  6917  002272  0012               	return		;funcret
  6918  002274                     __end_of_key_press:
  6919                           	opt stack 0
  6920                           tosu	equ	0xFFF
  6921                           tosh	equ	0xFFE
  6922                           tosl	equ	0xFFD
  6923                           pclath	equ	0xFFA
  6924                           tblptru	equ	0xFF8
  6925                           tblptrh	equ	0xFF7
  6926                           tblptrl	equ	0xFF6
  6927                           tablat	equ	0xFF5
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           intcon	equ	0xFF2
  6931                           intcon2	equ	0xFF1
  6932                           postinc0	equ	0xFEE
  6933                           wreg	equ	0xFE8
  6934                           indf1	equ	0xFE7
  6935                           plusw1	equ	0xFE3
  6936                           fsr1h	equ	0xFE2
  6937                           fsr1l	equ	0xFE1
  6938                           indf2	equ	0xFDF
  6939                           postinc2	equ	0xFDE
  6940                           postdec2	equ	0xFDD
  6941                           plusw2	equ	0xFDB
  6942                           fsr2h	equ	0xFDA
  6943                           fsr2l	equ	0xFD9
  6944                           status	equ	0xFD8
  6945                           
  6946 ;; *************** function _time_led *****************
  6947 ;; Defined at:
  6948 ;;		line 475 in file "common.c"
  6949 ;; Parameters:    Size  Location     Type
  6950 ;;		None
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;		None
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      void 
  6955 ;; Registers used:
  6956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6957 ;; Tracked objects:
  6958 ;;		On entry : 3F/0
  6959 ;;		On exit  : 0/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;Total ram usage:        0 bytes
  6967 ;; Hardware stack levels used:    1
  6968 ;; Hardware stack levels required when called:    8
  6969 ;; This function calls:
  6970 ;;		_BMP085Pressure
  6971 ;;		_FillBuf
  6972 ;;		_RTOS_DeleteTask
  6973 ;;		_RTOS_SetTask
  6974 ;;		_Update_Matrix
  6975 ;;		_readTemp_Single
  6976 ;;		_scroll_left
  6977 ;; This function is called by:
  6978 ;;		_main
  6979 ;;		_time_set_min
  6980 ;;		_time_set_hr
  6981 ;;		_time_set_yr
  6982 ;;		_time_set_mt
  6983 ;;		_time_set_dt
  6984 ;;		_time_set_dy
  6985 ;;		_home_temp
  6986 ;;		_RTOS_DispatchTask
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text23
  6991  0018E2                     __ptext23:
  6992                           	opt stack 0
  6993  0018E2                     _time_led:
  6994                           	opt stack 21
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;common.c: 479: switch (events)
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;incstack = 0
  7001  0018E2  D051               	goto	l6292
  7002  0018E4                     l6248:
  7003                           
  7004                           ; BSR set to: 0
  7005                           ;common.c: 482: FillBuf();
  7006  0018E4  ECBE  F008         	call	_FillBuf	;wreg free
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;common.c: 483: if((TTime.Ts>5)&&(TTime.Ts<7))
  7010  0018E8  0E05               	movlw	5
  7011  0018EA  65CD               	cpfsgt	_TTime& (0+255),b
  7012  0018EC  D00B               	goto	l6256
  7013                           
  7014                           ; BSR set to: 0
  7015  0018EE  0E07               	movlw	7
  7016  0018F0  61CD               	cpfslt	_TTime& (0+255),b
  7017  0018F2  D008               	goto	l6256
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;common.c: 484: {
  7021                           ;common.c: 485: readTemp_Single(&temperature, &time_flag, &timer_val);
  7022  0018F4  0E6B               	movlw	low _temperature
  7023  0018F6  6E3E               	movwf	readTemp_Single@buf,c
  7024  0018F8  0E6D               	movlw	low _time_flag
  7025  0018FA  6E3F               	movwf	readTemp_Single@time_flag,c
  7026  0018FC  0E6E               	movlw	low _timer_val
  7027  0018FE  6E40               	movwf	readTemp_Single@timer_val,c
  7028  001900  EC59  F009         	call	_readTemp_Single	;wreg free
  7029  001904                     l6256:
  7030                           
  7031                           ;common.c: 486: }
  7032                           ;common.c: 487: if(((TTime.Ts>14)&&(TTime.Ts<16))||((TTime.Ts>45)&&(TTime.Ts<47)))
  7033  001904  0E0E               	movlw	14
  7034  001906  0100               	movlb	0	; () banked
  7035  001908  65CD               	cpfsgt	_TTime& (0+255),b
  7036  00190A  D003               	goto	l6260
  7037                           
  7038                           ; BSR set to: 0
  7039  00190C  0E0F               	movlw	15
  7040  00190E  65CD               	cpfsgt	_TTime& (0+255),b
  7041  001910  D006               	goto	l6264
  7042  001912                     l6260:
  7043                           
  7044                           ; BSR set to: 0
  7045  001912  0E2D               	movlw	45
  7046  001914  65CD               	cpfsgt	_TTime& (0+255),b
  7047  001916  D043               	goto	l6294
  7048                           
  7049                           ; BSR set to: 0
  7050  001918  0E2F               	movlw	47
  7051  00191A  61CD               	cpfslt	_TTime& (0+255),b
  7052  00191C  D040               	goto	l6294
  7053  00191E                     l6264:
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;common.c: 488: events = 3;
  7057  00191E  0E03               	movlw	3
  7058  001920  D017               	goto	L4
  7059  001922                     l6266:
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;common.c: 491: RTOS_DeleteTask(time_led);
  7063  001922  D848               	call	PL130	;call to abstracted procedure
  7064  001924  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  7065                           
  7066                           ;common.c: 492: RTOS_SetTask(time_set_min, 0, 50);
  7067  001928  0E00               	movlw	low _time_set_min
  7068  00192A  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7069  00192C  0E18               	movlw	high _time_set_min
  7070  00192E  D83B               	call	PL14	;call to abstracted procedure
  7071  001930  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  7072                           
  7073                           ;common.c: 493: RTOS_SetTask(default_state, 2000, 0);
  7074  001934  ECEB  F00A         	call	PL2	;call to abstracted procedure
  7075  001938  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  7076                           
  7077                           ;common.c: 494: TSTime = TTime;
  7078  00193C  EE20  F0CD         	lfsr	2,_TTime
  7079  001940  EE10  F04F         	lfsr	1,_TSTime
  7080  001944  0E06               	movlw	6
  7081  001946                     u4561:
  7082  001946  CFDB FFE3          	movff	plusw2,plusw1
  7083  00194A  06E8               	decf	wreg,f,c
  7084  00194C  E2FC               	bc	u4561
  7085  00194E                     l6274:
  7086                           
  7087                           ;common.c: 495: events = 5;
  7088  00194E  0E05               	movlw	5
  7089  001950                     L4:
  7090  001950  6E70               	movwf	_events,c
  7091                           
  7092                           ;common.c: 496: break;
  7093  001952  D025               	goto	l6294
  7094  001954                     l6276:
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;common.c: 501: BMP085Pressure(1);
  7098  001954  0E01               	movlw	1
  7099  001956  ECEA  F011         	call	_BMP085Pressure
  7100  00195A  D7F9               	goto	l6274
  7101  00195C                     l6280:
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;common.c: 512: scroll_left();
  7105  00195C  EC2F  F010         	call	_scroll_left	;wreg free
  7106                           
  7107                           ;common.c: 513: RTOS_DeleteTask(time_led);
  7108  001960  D829               	call	PL130	;call to abstracted procedure
  7109  001962  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  7110                           
  7111                           ;common.c: 514: RTOS_SetTask(home_temp, 0, 20);
  7112  001966  0E2A               	movlw	low _home_temp
  7113  001968  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7114  00196A  0E0A               	movlw	high _home_temp
  7115  00196C  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7116  00196E  ECF5  F004         	call	PL22	;call to abstracted procedure
  7117  001972  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  7118  001976  D7EB               	goto	l6274
  7119  001978                     l6286:
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;common.c: 518: events = 5;
  7123  001978  0E05               	movlw	5
  7124  00197A  6E70               	movwf	_events,c
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;common.c: 519: RTOS_DeleteTask(default_state);
  7128  00197C  EC57  F007         	call	PL50	;call to abstracted procedure
  7129  001980  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  7130                           
  7131                           ;common.c: 520: break;
  7132  001984  D00C               	goto	l6294
  7133  001986                     l6292:
  7134                           
  7135                           ; BSR set to: 0
  7136  001986  5070               	movf	_events,w,c
  7137                           
  7138                           ; Switch size 1, requested type "space"
  7139                           ; Number of cases is 6, Range of values is 1 to 6
  7140                           ; switch strategies available:
  7141                           ; Name         Instructions Cycles
  7142                           ; simple_byte           19    10 (average)
  7143                           ;	Chosen strategy is simple_byte
  7144  001988  0A01               	xorlw	1	; case 1
  7145  00198A  E0CB               	bz	l6266
  7146  00198C  0A03               	xorlw	3	; case 2
  7147  00198E  E0E2               	bz	l6276
  7148  001990  0A01               	xorlw	1	; case 3
  7149  001992  E0E4               	bz	l6280
  7150  001994  0A07               	xorlw	7	; case 4
  7151  001996  E0F0               	bz	l6286
  7152  001998  0A01               	xorlw	1	; case 5
  7153  00199A  E0A4               	bz	l6248
  7154  00199C  0A03               	xorlw	3	; case 6
  7155  00199E                     l6294:
  7156                           
  7157                           ;common.c: 525: Update_Matrix(Dis_Buff);
  7158  00199E  0EAD               	movlw	low _Dis_Buff
  7159  0019A0  6E11               	movwf	Update_Matrix@buf,c
  7160  0019A2  EF77  F011         	goto	_Update_Matrix	;wreg free
  7161  0019A6                     __end_of_time_led:
  7162                           	opt stack 0
  7163  0019A6                     PL14:
  7164                           	opt stack 22
  7165  0019A6  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7166  0019A8  6A12               	clrf	RTOS_SetTask@taskDelay+1,c
  7167  0019AA  6A11               	clrf	RTOS_SetTask@taskDelay,c
  7168  0019AC  6A14               	clrf	RTOS_SetTask@taskPeriod+1,c
  7169  0019AE  0E32               	movlw	50
  7170  0019B0  6E13               	movwf	RTOS_SetTask@taskPeriod,c
  7171  0019B2  0C32               	retlw	50
  7172  0019B4                     __end_ofPL14:
  7173                           	opt stack 0
  7174  0019B4                     PL130:
  7175                           	opt stack 21
  7176  0019B4  0EE2               	movlw	low _time_led
  7177  0019B6  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  7178  0019B8  0E18               	movlw	high _time_led
  7179  0019BA  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  7180  0019BC  0012               	return	
  7181  0019BE                     __end_ofPL130:
  7182                           	opt stack 0
  7183                           tosu	equ	0xFFF
  7184                           tosh	equ	0xFFE
  7185                           tosl	equ	0xFFD
  7186                           pclath	equ	0xFFA
  7187                           tblptru	equ	0xFF8
  7188                           tblptrh	equ	0xFF7
  7189                           tblptrl	equ	0xFF6
  7190                           tablat	equ	0xFF5
  7191                           prodh	equ	0xFF4
  7192                           prodl	equ	0xFF3
  7193                           intcon	equ	0xFF2
  7194                           intcon2	equ	0xFF1
  7195                           postinc0	equ	0xFEE
  7196                           wreg	equ	0xFE8
  7197                           indf1	equ	0xFE7
  7198                           plusw1	equ	0xFE3
  7199                           fsr1h	equ	0xFE2
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           plusw2	equ	0xFDB
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8
  7208                           
  7209 ;; *************** function _time_set_yr *****************
  7210 ;; Defined at:
  7211 ;;		line 143 in file "common.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;		None
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  1    wreg      void 
  7218 ;; Registers used:
  7219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 3F/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;Total ram usage:        0 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    7
  7232 ;; This function calls:
  7233 ;;		_RTOS_DeleteTask
  7234 ;;		_RTOS_SetTask
  7235 ;;		_Update_Matrix
  7236 ;;		___lbdiv
  7237 ;;		___lbmod
  7238 ;;		_putchar_b_buf
  7239 ;;		_setDate
  7240 ;; This function is called by:
  7241 ;;		_time_set_hr
  7242 ;;		_RTOS_DispatchTask
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text24
  7247  001618                     __ptext24:
  7248                           	opt stack 0
  7249  001618                     _time_set_yr:
  7250                           	opt stack 22
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;common.c: 145: switch (events)
  7254                           
  7255                           ;incstack = 0
  7256  001618  D03D               	goto	l5986
  7257  00161A                     l5944:
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;common.c: 151: RTOS_DeleteTask(time_set_yr);
  7261  00161A  D86F               	call	PL114	;call to abstracted procedure
  7262  00161C  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  7263                           
  7264                           ;common.c: 152: RTOS_SetTask(time_set_mt, 0, 20);
  7265  001620  0E34               	movlw	low _time_set_mt
  7266  001622  6E0F               	movwf	RTOS_SetTask@taskFunc,c
  7267  001624  0E08               	movlw	high _time_set_mt
  7268  001626  6E10               	movwf	RTOS_SetTask@taskFunc+1,c
  7269  001628  ECF5  F004         	call	PL22	;call to abstracted procedure
  7270  00162C  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  7271                           
  7272                           ;common.c: 153: RTOS_SetTask(default_state, 2000, 0);
  7273  001630  ECEB  F00A         	call	PL2	;call to abstracted procedure
  7274  001634  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  7275                           
  7276                           ;common.c: 154: events = 5;
  7277  001638  0E05               	movlw	5
  7278  00163A  6E70               	movwf	_events,c
  7279                           
  7280                           ;common.c: 155: en_put=0;
  7281  00163C  906F               	bcf	_en_put/(0+8),_en_put& (0+7),c
  7282                           
  7283                           ;common.c: 156: break;
  7284  00163E  D034               	goto	l632
  7285  001640                     l5954:
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;common.c: 158: RTOS_DeleteTask(time_set_yr);
  7289  001640  D85C               	call	PL114	;call to abstracted procedure
  7290  001642  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  7291                           
  7292                           ;common.c: 159: RTOS_DeleteTask(default_state);
  7293  001646  EC57  F007         	call	PL50	;call to abstracted procedure
  7294  00164A  EC2A  F00E         	call	_RTOS_DeleteTask	;wreg free
  7295                           
  7296                           ;common.c: 160: RTOS_SetTask(time_led, 0, 20);
  7297  00164E  EC4D  F007         	call	PL10	;call to abstracted procedure
  7298  001652  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  7299                           
  7300                           ;common.c: 161: events = 5;
  7301  001656  0E05               	movlw	5
  7302  001658  6E70               	movwf	_events,c
  7303                           
  7304                           ;common.c: 162: break;
  7305  00165A  D026               	goto	l632
  7306  00165C                     l5960:
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;common.c: 164: TSTime.Tyr++;
  7310  00165C  2A55               	incf	_TSTime+6,f,c
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;common.c: 165: if(TSTime.Tyr > 99) TSTime.Tyr = 0;
  7314  00165E  0E63               	movlw	99
  7315  001660  6455               	cpfsgt	_TSTime+6,c
  7316  001662  D001               	goto	l5966
  7317                           
  7318                           ; BSR set to: 0
  7319  001664  6A55               	clrf	_TSTime+6,c
  7320  001666                     l5966:
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;common.c: 166: RTOS_SetTask(default_state, 2000, 0);
  7324  001666  ECEB  F00A         	call	PL2	;call to abstracted procedure
  7325  00166A  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  7326                           
  7327                           ;common.c: 167: events = 5;
  7328                           
  7329                           ;common.c: 168: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  7330  00166E  ECF6  F00A         	call	PL12	;call to abstracted procedure
  7331  001672  EC95  F011         	call	_setDate
  7332                           
  7333                           ;common.c: 169: break;
  7334  001676  D018               	goto	l632
  7335  001678                     l5972:
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;common.c: 171: TSTime.Tyr--;
  7339  001678  0655               	decf	_TSTime+6,f,c
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;common.c: 172: if(TSTime.Tyr == 255) TSTime.Tyr = 99;
  7343  00167A  2855               	incf	_TSTime+6,w,c
  7344  00167C  E102               	bnz	l5978
  7345                           
  7346                           ; BSR set to: 0
  7347  00167E  0E63               	movlw	99
  7348  001680  6E55               	movwf	_TSTime+6,c
  7349  001682                     l5978:
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;common.c: 173: RTOS_SetTask(default_state, 2000, 0);
  7353  001682  ECEB  F00A         	call	PL2	;call to abstracted procedure
  7354  001686  EC6F  F00E         	call	_RTOS_SetTask	;wreg free
  7355                           
  7356                           ;common.c: 174: events = 5;
  7357                           
  7358                           ;common.c: 175: setDate(TSTime.Tdy,TSTime.Tdt,TSTime.Tmt,TSTime.Tyr);
  7359  00168A  ECF6  F00A         	call	PL12	;call to abstracted procedure
  7360  00168E  EC95  F011         	call	_setDate
  7361                           
  7362                           ;common.c: 176: break;
  7363  001692  D00A               	goto	l632
  7364  001694                     l5986:
  7365                           
  7366                           ; BSR set to: 0
  7367  001694  5070               	movf	_events,w,c
  7368                           
  7369                           ; Switch size 1, requested type "space"
  7370                           ; Number of cases is 5, Range of values is 1 to 5
  7371                           ; switch strategies available:
  7372                           ; Name         Instructions Cycles
  7373                           ; simple_byte           16     9 (average)
  7374                           ;	Chosen strategy is simple_byte
  7375  001696  0A01               	xorlw	1	; case 1
  7376  001698  E0C0               	bz	l5944
  7377  00169A  0A03               	xorlw	3	; case 2
  7378  00169C  E0DF               	bz	l5960
  7379  00169E  0A01               	xorlw	1	; case 3
  7380  0016A0  E0EB               	bz	l5972
  7381  0016A2  0A07               	xorlw	7	; case 4
  7382  0016A4  E0CD               	bz	l5954
  7383  0016A6  0A01               	xorlw	1	; case 5
  7384  0016A8                     l632:
  7385                           
  7386                           ;common.c: 178: if(en_put)
  7387  0016A8  A06F               	btfss	_en_put/(0+8),_en_put& (0+7),c
  7388  0016AA  D021               	goto	l5990
  7389                           
  7390                           ;common.c: 179: {
  7391                           ;common.c: 180: putchar_b_buf(0,'Ð');
  7392  0016AC  0ED0               	movlw	208
  7393  0016AE  6E17               	movwf	putchar_b_buf@symbol,c
  7394  0016B0  0E00               	movlw	0
  7395  0016B2  EC64  F00F         	call	_putchar_b_buf
  7396                           
  7397                           ;common.c: 181: putchar_b_buf(6,'ê');
  7398  0016B6  0EEA               	movlw	234
  7399  0016B8  6E17               	movwf	putchar_b_buf@symbol,c
  7400  0016BA  0E06               	movlw	6
  7401  0016BC  EC64  F00F         	call	_putchar_b_buf
  7402                           
  7403                           ;common.c: 182: putchar_b_buf(12,':');
  7404  0016C0  EC05  F00B         	call	PL142	;call to abstracted procedure
  7405  0016C4  EC64  F00F         	call	_putchar_b_buf
  7406                           
  7407                           ;common.c: 183: putchar_b_buf(18,(TSTime.Tyr/10) % 10 + 48);
  7408  0016C8  0E0A               	movlw	10
  7409  0016CA  6E13               	movwf	___lbmod@divisor,c
  7410  0016CC  6E0F               	movwf	___lbdiv@divisor,c
  7411  0016CE  5055               	movf	_TSTime+6,w,c
  7412  0016D0  EC1F  F012         	call	___lbdiv
  7413  0016D4  ECF7  F012         	call	___lbmod
  7414  0016D8  D815               	call	PL166	;call to abstracted procedure
  7415  0016DA  EC64  F00F         	call	_putchar_b_buf
  7416                           
  7417                           ;common.c: 184: putchar_b_buf(24,TSTime.Tyr % 10 + 48);
  7418  0016DE  0E0A               	movlw	10
  7419  0016E0  6E13               	movwf	___lbmod@divisor,c
  7420  0016E2  5055               	movf	_TSTime+6,w,c
  7421  0016E4  ECF7  F012         	call	___lbmod
  7422  0016E8  D810               	call	PL170	;call to abstracted procedure
  7423  0016EA  EC64  F00F         	call	_putchar_b_buf
  7424  0016EE                     l5990:
  7425                           
  7426                           ;common.c: 185: }
  7427                           ;common.c: 186: Update_Matrix(Dis_Buff);
  7428  0016EE  0EAD               	movlw	low _Dis_Buff
  7429  0016F0  6E11               	movwf	Update_Matrix@buf,c
  7430  0016F2  EC77  F011         	call	_Update_Matrix	;wreg free
  7431                           
  7432                           ;common.c: 187: en_put=1;
  7433  0016F6  806F               	bsf	_en_put/(0+8),_en_put& (0+7),c
  7434  0016F8  0012               	return		;funcret
  7435  0016FA                     __end_of_time_set_yr:
  7436                           	opt stack 0
  7437  0016FA                     PL114:
  7438                           	opt stack 22
  7439  0016FA  0E18               	movlw	low _time_set_yr
  7440  0016FC  6E0F               	movwf	RTOS_DeleteTask@taskFunc,c
  7441  0016FE  0E16               	movlw	high _time_set_yr
  7442  001700  6E10               	movwf	RTOS_DeleteTask@taskFunc+1,c
  7443  001702  0012               	return	
  7444  001704                     __end_ofPL114:
  7445                           	opt stack 0
  7446  001704                     PL166:
  7447                           	opt stack 22
  7448  001704  0F30               	addlw	48
  7449  001706  6E17               	movwf	putchar_b_buf@symbol,c
  7450  001708  0C12               	retlw	18
  7451  00170A                     __end_ofPL166:
  7452                           	opt stack 0
  7453  00170A                     PL170:
  7454                           	opt stack 22
  7455  00170A  0F30               	addlw	48
  7456  00170C  6E17               	movwf	putchar_b_buf@symbol,c
  7457  00170E  0C18               	retlw	24
  7458  001710                     __end_ofPL170:
  7459                           	opt stack 0
  7460                           tosu	equ	0xFFF
  7461                           tosh	equ	0xFFE
  7462                           tosl	equ	0xFFD
  7463                           pclath	equ	0xFFA
  7464                           tblptru	equ	0xFF8
  7465                           tblptrh	equ	0xFF7
  7466                           tblptrl	equ	0xFF6
  7467                           tablat	equ	0xFF5
  7468                           prodh	equ	0xFF4
  7469                           prodl	equ	0xFF3
  7470                           intcon	equ	0xFF2
  7471                           intcon2	equ	0xFF1
  7472                           postinc0	equ	0xFEE
  7473                           wreg	equ	0xFE8
  7474                           indf1	equ	0xFE7
  7475                           plusw1	equ	0xFE3
  7476                           fsr1h	equ	0xFE2
  7477                           fsr1l	equ	0xFE1
  7478                           indf2	equ	0xFDF
  7479                           postinc2	equ	0xFDE
  7480                           postdec2	equ	0xFDD
  7481                           plusw2	equ	0xFDB
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8
  7485                           
  7486 ;; *************** function _setTime *****************
  7487 ;; Defined at:
  7488 ;;		line 74 in file "ds3231.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  hSet            1    wreg     unsigned char 
  7491 ;;  mSet            1   27[COMRAM] unsigned char 
  7492 ;;  sSet            1   28[COMRAM] unsigned char 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;  hSet            1   29[COMRAM] unsigned char 
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  1    wreg      void 
  7497 ;; Registers used:
  7498 ;;		wreg, status,2, status,0, cstack
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7507 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;Total ram usage:        3 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    6
  7511 ;; This function calls:
  7512 ;;		_DS3231_Write
  7513 ;;		_decimal_to_bcd
  7514 ;; This function is called by:
  7515 ;;		_time_set_min
  7516 ;;		_time_set_hr
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text25
  7521  0024A2                     __ptext25:
  7522                           	opt stack 0
  7523  0024A2                     _setTime:
  7524                           	opt stack 22
  7525                           
  7526                           ;incstack = 0
  7527                           ;setTime@hSet stored from wreg
  7528  0024A2  6E1E               	movwf	setTime@hSet,c
  7529                           
  7530                           ;ds3231.c: 76: DS3231_Write(0x00, (decimal_to_bcd(sSet)));
  7531  0024A4  501D               	movf	setTime@sSet,w,c
  7532  0024A6  ECE4  F012         	call	_decimal_to_bcd
  7533  0024AA  6E1A               	movwf	DS3231_Write@value,c
  7534  0024AC  0E00               	movlw	0
  7535  0024AE  EC81  F013         	call	_DS3231_Write
  7536                           
  7537                           ;ds3231.c: 77: DS3231_Write(0x01, (decimal_to_bcd(mSet)));
  7538  0024B2  501C               	movf	setTime@mSet,w,c
  7539  0024B4  ECE4  F012         	call	_decimal_to_bcd
  7540  0024B8  6E1A               	movwf	DS3231_Write@value,c
  7541  0024BA  0E01               	movlw	1
  7542  0024BC  EC81  F013         	call	_DS3231_Write
  7543                           
  7544                           ;ds3231.c: 78: DS3231_Write(0x02, (0x3F & (decimal_to_bcd(hSet))));
  7545  0024C0  501E               	movf	setTime@hSet,w,c
  7546  0024C2  ECE4  F012         	call	_decimal_to_bcd
  7547  0024C6  0B3F               	andlw	63
  7548  0024C8  6E1A               	movwf	DS3231_Write@value,c
  7549  0024CA  0E02               	movlw	2
  7550  0024CC  EF81  F013         	goto	_DS3231_Write
  7551  0024D0                     __end_of_setTime:
  7552                           	opt stack 0
  7553                           tosu	equ	0xFFF
  7554                           tosh	equ	0xFFE
  7555                           tosl	equ	0xFFD
  7556                           pclath	equ	0xFFA
  7557                           tblptru	equ	0xFF8
  7558                           tblptrh	equ	0xFF7
  7559                           tblptrl	equ	0xFF6
  7560                           tablat	equ	0xFF5
  7561                           prodh	equ	0xFF4
  7562                           prodl	equ	0xFF3
  7563                           intcon	equ	0xFF2
  7564                           intcon2	equ	0xFF1
  7565                           postinc0	equ	0xFEE
  7566                           wreg	equ	0xFE8
  7567                           indf1	equ	0xFE7
  7568                           plusw1	equ	0xFE3
  7569                           fsr1h	equ	0xFE2
  7570                           fsr1l	equ	0xFE1
  7571                           indf2	equ	0xFDF
  7572                           postinc2	equ	0xFDE
  7573                           postdec2	equ	0xFDD
  7574                           plusw2	equ	0xFDB
  7575                           fsr2h	equ	0xFDA
  7576                           fsr2l	equ	0xFD9
  7577                           status	equ	0xFD8
  7578                           
  7579 ;; *************** function _setDate *****************
  7580 ;; Defined at:
  7581 ;;		line 82 in file "ds3231.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  daySet          1    wreg     unsigned char 
  7584 ;;  dateSet         1   27[COMRAM] unsigned char 
  7585 ;;  monthSet        1   28[COMRAM] unsigned char 
  7586 ;;  yearSet         1   29[COMRAM] unsigned char 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;  daySet          1   30[COMRAM] unsigned char 
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      void 
  7591 ;; Registers used:
  7592 ;;		wreg, status,2, status,0, cstack
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7598 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;Total ram usage:        4 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    6
  7605 ;; This function calls:
  7606 ;;		_DS3231_Write
  7607 ;;		_decimal_to_bcd
  7608 ;; This function is called by:
  7609 ;;		_time_set_yr
  7610 ;;		_time_set_mt
  7611 ;;		_time_set_dt
  7612 ;;		_time_set_dy
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text26
  7617  00232A                     __ptext26:
  7618                           	opt stack 0
  7619  00232A                     _setDate:
  7620                           	opt stack 22
  7621                           
  7622                           ;incstack = 0
  7623                           ;setDate@daySet stored from wreg
  7624  00232A  6E1F               	movwf	setDate@daySet,c
  7625                           
  7626                           ;ds3231.c: 84: DS3231_Write(0x03, (decimal_to_bcd(daySet)));
  7627  00232C  501F               	movf	setDate@daySet,w,c
  7628  00232E  ECE4  F012         	call	_decimal_to_bcd
  7629  002332  6E1A               	movwf	DS3231_Write@value,c
  7630  002334  0E03               	movlw	3
  7631  002336  EC81  F013         	call	_DS3231_Write
  7632                           
  7633                           ;ds3231.c: 85: DS3231_Write(0x04, (decimal_to_bcd(dateSet)));
  7634  00233A  501C               	movf	setDate@dateSet,w,c
  7635  00233C  ECE4  F012         	call	_decimal_to_bcd
  7636  002340  6E1A               	movwf	DS3231_Write@value,c
  7637  002342  0E04               	movlw	4
  7638  002344  EC81  F013         	call	_DS3231_Write
  7639                           
  7640                           ;ds3231.c: 86: DS3231_Write(0x05, (decimal_to_bcd(monthSet)));
  7641  002348  501D               	movf	setDate@monthSet,w,c
  7642  00234A  ECE4  F012         	call	_decimal_to_bcd
  7643  00234E  6E1A               	movwf	DS3231_Write@value,c
  7644  002350  0E05               	movlw	5
  7645  002352  EC81  F013         	call	_DS3231_Write
  7646                           
  7647                           ;ds3231.c: 87: DS3231_Write(0x06, (decimal_to_bcd(yearSet)));
  7648  002356  501E               	movf	setDate@yearSet,w,c
  7649  002358  ECE4  F012         	call	_decimal_to_bcd
  7650  00235C  6E1A               	movwf	DS3231_Write@value,c
  7651  00235E  0E06               	movlw	6
  7652  002360  EF81  F013         	goto	_DS3231_Write
  7653  002364                     __end_of_setDate:
  7654                           	opt stack 0
  7655                           tosu	equ	0xFFF
  7656                           tosh	equ	0xFFE
  7657                           tosl	equ	0xFFD
  7658                           pclath	equ	0xFFA
  7659                           tblptru	equ	0xFF8
  7660                           tblptrh	equ	0xFF7
  7661                           tblptrl	equ	0xFF6
  7662                           tablat	equ	0xFF5
  7663                           prodh	equ	0xFF4
  7664                           prodl	equ	0xFF3
  7665                           intcon	equ	0xFF2
  7666                           intcon2	equ	0xFF1
  7667                           postinc0	equ	0xFEE
  7668                           wreg	equ	0xFE8
  7669                           indf1	equ	0xFE7
  7670                           plusw1	equ	0xFE3
  7671                           fsr1h	equ	0xFE2
  7672                           fsr1l	equ	0xFE1
  7673                           indf2	equ	0xFDF
  7674                           postinc2	equ	0xFDE
  7675                           postdec2	equ	0xFDD
  7676                           plusw2	equ	0xFDB
  7677                           fsr2h	equ	0xFDA
  7678                           fsr2l	equ	0xFD9
  7679                           status	equ	0xFD8
  7680                           
  7681 ;; *************** function _decimal_to_bcd *****************
  7682 ;; Defined at:
  7683 ;;		line 10 in file "ds3231.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;  d               1    wreg     unsigned char 
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;  d               1   24[COMRAM] unsigned char 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      unsigned char 
  7690 ;; Registers used:
  7691 ;;		wreg, status,2, status,0, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;Total ram usage:        3 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:    4
  7704 ;; This function calls:
  7705 ;;		___lbdiv
  7706 ;;		___lbmod
  7707 ;; This function is called by:
  7708 ;;		_setTime
  7709 ;;		_setDate
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text27
  7714  0025C8                     __ptext27:
  7715                           	opt stack 0
  7716  0025C8                     _decimal_to_bcd:
  7717                           	opt stack 23
  7718                           
  7719                           ;incstack = 0
  7720                           ;decimal_to_bcd@d stored from wreg
  7721  0025C8  6E19               	movwf	decimal_to_bcd@d,c
  7722                           
  7723                           ;ds3231.c: 12: return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
  7724  0025CA  0E0A               	movlw	10
  7725  0025CC  6E13               	movwf	___lbmod@divisor,c
  7726  0025CE  5019               	movf	decimal_to_bcd@d,w,c
  7727  0025D0  ECF7  F012         	call	___lbmod
  7728  0025D4  6E17               	movwf	??_decimal_to_bcd& (0+255),c
  7729  0025D6  0E0F               	movlw	15
  7730  0025D8  1617               	andwf	??_decimal_to_bcd,f,c
  7731  0025DA  0E0A               	movlw	10
  7732  0025DC  6E0F               	movwf	___lbdiv@divisor,c
  7733  0025DE  5019               	movf	decimal_to_bcd@d,w,c
  7734  0025E0  EC1F  F012         	call	___lbdiv
  7735  0025E4  6E18               	movwf	(??_decimal_to_bcd+1)& (0+255),c
  7736  0025E6  3818               	swapf	??_decimal_to_bcd+1,w,c
  7737  0025E8  0BF0               	andlw	240
  7738  0025EA  1017               	iorwf	??_decimal_to_bcd,w,c
  7739  0025EC  0012               	return		;funcret
  7740  0025EE                     __end_of_decimal_to_bcd:
  7741                           	opt stack 0
  7742                           tosu	equ	0xFFF
  7743                           tosh	equ	0xFFE
  7744                           tosl	equ	0xFFD
  7745                           pclath	equ	0xFFA
  7746                           tblptru	equ	0xFF8
  7747                           tblptrh	equ	0xFF7
  7748                           tblptrl	equ	0xFF6
  7749                           tablat	equ	0xFF5
  7750                           prodh	equ	0xFF4
  7751                           prodl	equ	0xFF3
  7752                           intcon	equ	0xFF2
  7753                           intcon2	equ	0xFF1
  7754                           postinc0	equ	0xFEE
  7755                           wreg	equ	0xFE8
  7756                           indf1	equ	0xFE7
  7757                           plusw1	equ	0xFE3
  7758                           fsr1h	equ	0xFE2
  7759                           fsr1l	equ	0xFE1
  7760                           indf2	equ	0xFDF
  7761                           postinc2	equ	0xFDE
  7762                           postdec2	equ	0xFDD
  7763                           plusw2	equ	0xFDB
  7764                           fsr2h	equ	0xFDA
  7765                           fsr2l	equ	0xFD9
  7766                           status	equ	0xFD8
  7767                           
  7768 ;; *************** function _DS3231_Write *****************
  7769 ;; Defined at:
  7770 ;;		line 30 in file "ds3231.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;  address         1    wreg     unsigned char 
  7773 ;;  value           1   25[COMRAM] unsigned char 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;  address         1   26[COMRAM] unsigned char 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1    wreg      void 
  7778 ;; Registers used:
  7779 ;;		wreg, status,2, status,0, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7785 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;Total ram usage:        2 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    5
  7792 ;; This function calls:
  7793 ;;		_I2C_Master_Start
  7794 ;;		_I2C_Master_Stop
  7795 ;;		_I2C_Master_Write
  7796 ;; This function is called by:
  7797 ;;		_DS3231_init
  7798 ;;		_setTime
  7799 ;;		_setDate
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           	psect	text28
  7804  002702                     __ptext28:
  7805                           	opt stack 0
  7806  002702                     _DS3231_Write:
  7807                           	opt stack 23
  7808                           
  7809                           ;incstack = 0
  7810                           ;DS3231_Write@address stored from wreg
  7811  002702  6E1B               	movwf	DS3231_Write@address,c
  7812                           
  7813                           ;ds3231.c: 32: I2C_Master_Start();
  7814  002704  EC21  F014         	call	_I2C_Master_Start	;wreg free
  7815                           
  7816                           ;ds3231.c: 33: I2C_Master_Write(0xD0);
  7817  002708  0ED0               	movlw	208
  7818  00270A  EC17  F014         	call	_I2C_Master_Write
  7819                           
  7820                           ;ds3231.c: 34: I2C_Master_Write(address);
  7821  00270E  501B               	movf	DS3231_Write@address,w,c
  7822  002710  EC17  F014         	call	_I2C_Master_Write
  7823                           
  7824                           ;ds3231.c: 35: I2C_Master_Write(value);
  7825  002714  501A               	movf	DS3231_Write@value,w,c
  7826  002716  EC17  F014         	call	_I2C_Master_Write
  7827                           
  7828                           ;ds3231.c: 36: I2C_Master_Stop();
  7829  00271A  EF1D  F014         	goto	_I2C_Master_Stop	;wreg free
  7830  00271E                     __end_of_DS3231_Write:
  7831                           	opt stack 0
  7832                           tosu	equ	0xFFF
  7833                           tosh	equ	0xFFE
  7834                           tosl	equ	0xFFD
  7835                           pclath	equ	0xFFA
  7836                           tblptru	equ	0xFF8
  7837                           tblptrh	equ	0xFF7
  7838                           tblptrl	equ	0xFF6
  7839                           tablat	equ	0xFF5
  7840                           prodh	equ	0xFF4
  7841                           prodl	equ	0xFF3
  7842                           intcon	equ	0xFF2
  7843                           intcon2	equ	0xFF1
  7844                           postinc0	equ	0xFEE
  7845                           wreg	equ	0xFE8
  7846                           indf1	equ	0xFE7
  7847                           plusw1	equ	0xFE3
  7848                           fsr1h	equ	0xFE2
  7849                           fsr1l	equ	0xFE1
  7850                           indf2	equ	0xFDF
  7851                           postinc2	equ	0xFDE
  7852                           postdec2	equ	0xFDD
  7853                           plusw2	equ	0xFDB
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function _putchar_b_buf *****************
  7859 ;; Defined at:
  7860 ;;		line 50 in file "display.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  x               1    wreg     unsigned char 
  7863 ;;  symbol          1   22[COMRAM] unsigned char 
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;  x               1   26[COMRAM] unsigned char 
  7866 ;;  i               1   28[COMRAM] unsigned char 
  7867 ;;  j               1   27[COMRAM] unsigned char 
  7868 ;;  mask            1   25[COMRAM] unsigned char 
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  1    wreg      void 
  7871 ;; Registers used:
  7872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7878 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7881 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;Total ram usage:        7 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    4
  7885 ;; This function calls:
  7886 ;;		_pixel_off
  7887 ;;		_pixel_on
  7888 ;; This function is called by:
  7889 ;;		_time_set_min
  7890 ;;		_time_set_hr
  7891 ;;		_time_set_yr
  7892 ;;		_time_set_mt
  7893 ;;		_time_set_dt
  7894 ;;		_time_set_dy
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           	psect	text29
  7899  001EC8                     __ptext29:
  7900                           	opt stack 0
  7901  001EC8                     _putchar_b_buf:
  7902                           	opt stack 24
  7903                           
  7904                           ;incstack = 0
  7905                           ;putchar_b_buf@x stored from wreg
  7906  001EC8  6E1B               	movwf	putchar_b_buf@x,c
  7907                           
  7908                           ;display.c: 52: uint8_t i, j, mask=0x01;
  7909  001ECA  0E01               	movlw	1
  7910  001ECC  6E1A               	movwf	putchar_b_buf@mask,c
  7911                           
  7912                           ;display.c: 55: for(i=0; i<5; i++)
  7913  001ECE  6A1D               	clrf	putchar_b_buf@i,c
  7914  001ED0                     l352:
  7915                           
  7916                           ;display.c: 56: {
  7917                           ;display.c: 57: for(j=0;j<8;j++)
  7918  001ED0  6A1C               	clrf	putchar_b_buf@j,c
  7919  001ED2                     l5532:
  7920                           
  7921                           ;display.c: 58: {
  7922                           ;display.c: 59: if(Font[symbol] [i] & mask)
  7923  001ED2  5017               	movf	putchar_b_buf@symbol,w,c
  7924  001ED4  0D05               	mullw	5
  7925  001ED6  0EC9               	movlw	low _Font
  7926  001ED8  6E18               	movwf	??_putchar_b_buf& (0+255),c
  7927  001EDA  0EB9               	movlw	high _Font
  7928  001EDC  6E19               	movwf	(??_putchar_b_buf+1)& (0+255),c
  7929  001EDE  50F3               	movf	prodl,w,c
  7930  001EE0  2618               	addwf	??_putchar_b_buf,f,c
  7931  001EE2  50F4               	movf	prodh,w,c
  7932  001EE4  2219               	addwfc	??_putchar_b_buf+1,f,c
  7933  001EE6  501D               	movf	putchar_b_buf@i,w,c
  7934  001EE8  2618               	addwf	??_putchar_b_buf,f,c
  7935  001EEA  0E00               	movlw	0
  7936  001EEC  2219               	addwfc	??_putchar_b_buf+1,f,c
  7937  001EEE  C018  FFF6         	movff	??_putchar_b_buf,tblptrl
  7938  001EF2  C019  FFF7         	movff	??_putchar_b_buf+1,tblptrh
  7939  001EF6                     	if	0	;tblptru may be non-zero
  7940  001EF6                     	endif
  7941  001EF6                     	if	0	;tblptru may be non-zero
  7942  001EF6                     	endif
  7943  001EF6  0008               	tblrd		*
  7944  001EF8  50F5               	movf	tablat,w,c
  7945  001EFA  141A               	andwf	putchar_b_buf@mask,w,c
  7946  001EFC  E007               	bz	l5536
  7947                           
  7948                           ;display.c: 60: pixel_on(x+i,j);
  7949  001EFE  C01C  F00F         	movff	putchar_b_buf@j,pixel_on@y
  7950  001F02  501B               	movf	putchar_b_buf@x,w,c
  7951  001F04  241D               	addwf	putchar_b_buf@i,w,c
  7952  001F06  EC40  F013         	call	_pixel_on
  7953  001F0A  D006               	goto	l5538
  7954  001F0C                     l5536:
  7955                           
  7956                           ;display.c: 61: else
  7957                           ;display.c: 62: pixel_off(x+i,j);
  7958  001F0C  C01C  F00F         	movff	putchar_b_buf@j,pixel_off@y
  7959  001F10  501B               	movf	putchar_b_buf@x,w,c
  7960  001F12  241D               	addwf	putchar_b_buf@i,w,c
  7961  001F14  ECD0  F012         	call	_pixel_off
  7962  001F18                     l5538:
  7963                           
  7964                           ;display.c: 64: mask = mask<<1;
  7965  001F18  90D8               	bcf	status,0,c
  7966  001F1A  361A               	rlcf	putchar_b_buf@mask,f,c
  7967  001F1C  2A1C               	incf	putchar_b_buf@j,f,c
  7968  001F1E  0E07               	movlw	7
  7969  001F20  641C               	cpfsgt	putchar_b_buf@j,c
  7970  001F22  D7D7               	goto	l5532
  7971                           
  7972                           ;display.c: 65: };
  7973                           ;display.c: 67: mask=0x01;
  7974  001F24  0E01               	movlw	1
  7975  001F26  6E1A               	movwf	putchar_b_buf@mask,c
  7976  001F28  2A1D               	incf	putchar_b_buf@i,f,c
  7977  001F2A  0E04               	movlw	4
  7978  001F2C  641D               	cpfsgt	putchar_b_buf@i,c
  7979  001F2E  D7D0               	goto	l352
  7980  001F30  0C04               	retlw	4
  7981  001F32                     __end_of_putchar_b_buf:
  7982                           	opt stack 0
  7983                           tosu	equ	0xFFF
  7984                           tosh	equ	0xFFE
  7985                           tosl	equ	0xFFD
  7986                           pclath	equ	0xFFA
  7987                           tblptru	equ	0xFF8
  7988                           tblptrh	equ	0xFF7
  7989                           tblptrl	equ	0xFF6
  7990                           tablat	equ	0xFF5
  7991                           prodh	equ	0xFF4
  7992                           prodl	equ	0xFF3
  7993                           intcon	equ	0xFF2
  7994                           intcon2	equ	0xFF1
  7995                           postinc0	equ	0xFEE
  7996                           wreg	equ	0xFE8
  7997                           indf1	equ	0xFE7
  7998                           plusw1	equ	0xFE3
  7999                           fsr1h	equ	0xFE2
  8000                           fsr1l	equ	0xFE1
  8001                           indf2	equ	0xFDF
  8002                           postinc2	equ	0xFDE
  8003                           postdec2	equ	0xFDD
  8004                           plusw2	equ	0xFDB
  8005                           fsr2h	equ	0xFDA
  8006                           fsr2l	equ	0xFD9
  8007                           status	equ	0xFD8
  8008                           
  8009 ;; *************** function _readTemp_Single *****************
  8010 ;; Defined at:
  8011 ;;		line 32 in file "ds18b20.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  buf             1   61[COMRAM] PTR unsigned int 
  8014 ;;		 -> temperature(2), 
  8015 ;;  time_flag       1   62[COMRAM] PTR unsigned char 
  8016 ;;		 -> time_flag(1), 
  8017 ;;  timer_val       1   63[COMRAM] PTR unsigned char 
  8018 ;;		 -> timer_val(1), 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  temp            2   69[COMRAM] unsigned int 
  8021 ;;  i               1   68[COMRAM] unsigned char 
  8022 ;;  tmp             1   67[COMRAM] unsigned char 
  8023 ;;  fptmp           1   66[COMRAM] unsigned char 
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      unsigned char 
  8026 ;; Registers used:
  8027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 3F/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8033 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8034 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8035 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;Total ram usage:       10 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    6
  8040 ;; This function calls:
  8041 ;;		___lwdiv
  8042 ;;		___lwmod
  8043 ;;		_ow_reset
  8044 ;;		_printf
  8045 ;;		_read_byte
  8046 ;;		_write_byte
  8047 ;; This function is called by:
  8048 ;;		_time_led
  8049 ;; This function uses a non-reentrant model
  8050 ;;
  8051                           
  8052                           	psect	text30
  8053  0012B2                     __ptext30:
  8054                           	opt stack 0
  8055  0012B2                     _readTemp_Single:
  8056                           	opt stack 22
  8057                           
  8058                           ; BSR set to: 0
  8059                           ;ds18b20.c: 36: uint8_t i, tmp, fptmp;
  8060                           ;ds18b20.c: 38: switch(*time_flag)
  8061                           
  8062                           ;incstack = 0
  8063  0012B2  D089               	goto	l5780
  8064  0012B4                     l5712:
  8065                           
  8066                           ; BSR set to: 0
  8067                           ;ds18b20.c: 41: if (!ow_reset())
  8068  0012B4  EC59  F011         	call	_ow_reset	;wreg free
  8069  0012B8  0900               	iorlw	0
  8070  0012BA  A4D8               	btfss	status,2,c
  8071  0012BC  0012               	return	
  8072                           
  8073                           ;ds18b20.c: 42: {
  8074                           ;ds18b20.c: 49: write_byte(0xCC);
  8075  0012BE  0ECC               	movlw	204
  8076  0012C0  ECB2  F011         	call	_write_byte
  8077                           
  8078                           ;ds18b20.c: 50: write_byte(0x44);
  8079  0012C4  0E44               	movlw	68
  8080  0012C6  ECB2  F011         	call	_write_byte
  8081                           
  8082                           ;ds18b20.c: 51: *timer_val = 0;
  8083  0012CA  5040               	movf	readTemp_Single@timer_val,w,c
  8084  0012CC  6ED9               	movwf	fsr2l,c
  8085  0012CE  6ADA               	clrf	fsr2h,c
  8086  0012D0  6ADF               	clrf	indf2,c
  8087                           
  8088                           ;ds18b20.c: 52: *time_flag = 2;
  8089  0012D2  503F               	movf	readTemp_Single@time_flag,w,c
  8090  0012D4  6ED9               	movwf	fsr2l,c
  8091  0012D6  6ADA               	clrf	fsr2h,c
  8092  0012D8  0E02               	movlw	2
  8093  0012DA  6EDF               	movwf	indf2,c
  8094                           
  8095                           ;ds18b20.c: 53: T1CONbits.TMR1ON = 1;
  8096  0012DC  80CD               	bsf	4045,0,c	;volatile
  8097  0012DE  0C02               	retlw	2
  8098  0012E0                     l5724:
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;ds18b20.c: 72: ow_reset();
  8102  0012E0  EC59  F011         	call	_ow_reset	;wreg free
  8103                           
  8104                           ;ds18b20.c: 73: write_byte(0xCC);
  8105  0012E4  0ECC               	movlw	204
  8106  0012E6  ECB2  F011         	call	_write_byte
  8107                           
  8108                           ;ds18b20.c: 74: write_byte(0xBE);
  8109  0012EA  0EBE               	movlw	190
  8110  0012EC  ECB2  F011         	call	_write_byte
  8111                           
  8112                           ;ds18b20.c: 75: for(i=0; i<2; i++)
  8113  0012F0  6A45               	clrf	readTemp_Single@i,c
  8114  0012F2                     l5736:
  8115                           
  8116                           ;ds18b20.c: 76: {
  8117                           ;ds18b20.c: 77: scratch[i]= read_byte();
  8118  0012F2  5045               	movf	readTemp_Single@i,w,c
  8119  0012F4  0F80               	addlw	low _scratch
  8120  0012F6  6ED9               	movwf	fsr2l,c
  8121  0012F8  6ADA               	clrf	fsr2h,c
  8122  0012FA  ECCE  F011         	call	_read_byte	;wreg free
  8123  0012FE  6EDF               	movwf	indf2,c
  8124  001300  2A45               	incf	readTemp_Single@i,f,c
  8125  001302  0E01               	movlw	1
  8126  001304  6445               	cpfsgt	readTemp_Single@i,c
  8127  001306  D7F5               	goto	l5736
  8128                           
  8129                           ;ds18b20.c: 78: }
  8130                           ;ds18b20.c: 80: temp =(((uint16_t)scratch[1])<<8)|((uint16_t)scratch[0]);
  8131  001308  0100               	movlb	0	; () banked
  8132  00130A  5181               	movf	(_scratch+1)& (0+255),w,b
  8133  00130C  6E41               	movwf	??_readTemp_Single& (0+255),c
  8134  00130E  5180               	movf	_scratch& (0+255),w,b
  8135  001310  6E46               	movwf	readTemp_Single@temp,c
  8136  001312  C041  F047         	movff	??_readTemp_Single,readTemp_Single@temp+1
  8137                           
  8138                           ; BSR set to: 0
  8139                           ;ds18b20.c: 83: if (temp & 0x8000)
  8140  001316  AE47               	btfss	readTemp_Single@temp+1,7,c
  8141  001318  D004               	goto	l5748
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;ds18b20.c: 86: minus=1;
  8145  00131A  6C46               	negf	readTemp_Single@temp,c
  8146  00131C  1E47               	comf	readTemp_Single@temp+1,f,c
  8147  00131E  B0D8               	btfsc	status,0,c
  8148  001320  2A47               	incf	readTemp_Single@temp+1,f,c
  8149  001322                     l5748:
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;ds18b20.c: 87: }
  8153                           ;ds18b20.c: 89: tmp = temp & 0x0f;
  8154  001322  5046               	movf	readTemp_Single@temp,w,c
  8155  001324  0B0F               	andlw	15
  8156  001326  6E44               	movwf	readTemp_Single@tmp,c
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;ds18b20.c: 90: tmp = fract[tmp];
  8160  001328  0EB9               	movlw	low _fract
  8161  00132A  2444               	addwf	readTemp_Single@tmp,w,c
  8162  00132C  6EF6               	movwf	tblptrl,c
  8163  00132E  6AF7               	clrf	tblptrh,c
  8164  001330  0EB9               	movlw	high _fract
  8165  001332  22F7               	addwfc	tblptrh,f,c
  8166  001334                     	if	0	;There are less than 3 active tblptr bytes
  8167  001334                     	endif
  8168  001334  0008               	tblrd		*
  8169  001336  CFF5 F044          	movff	tablat,readTemp_Single@tmp
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;ds18b20.c: 91: temp = temp>>4;
  8173  00133A  3A46               	swapf	readTemp_Single@temp,f,c
  8174  00133C  3A47               	swapf	readTemp_Single@temp+1,f,c
  8175  00133E  0E0F               	movlw	15
  8176  001340  1646               	andwf	readTemp_Single@temp,f,c
  8177  001342  5047               	movf	readTemp_Single@temp+1,w,c
  8178  001344  0BF0               	andlw	240
  8179  001346  1246               	iorwf	readTemp_Single@temp,f,c
  8180  001348  0E0F               	movlw	15
  8181  00134A  1647               	andwf	readTemp_Single@temp+1,f,c
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;ds18b20.c: 92: temp = (temp & 0x00ff) * 10;
  8185  00134C  5046               	movf	readTemp_Single@temp,w,c
  8186  00134E  0D0A               	mullw	10
  8187  001350  CFF3 F046          	movff	prodl,readTemp_Single@temp
  8188  001354  CFF4 F047          	movff	prodh,readTemp_Single@temp+1
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;ds18b20.c: 93: temp = temp + tmp;
  8192  001358  5044               	movf	readTemp_Single@tmp,w,c
  8193  00135A  2646               	addwf	readTemp_Single@temp,f,c
  8194  00135C  0E00               	movlw	0
  8195  00135E  2247               	addwfc	readTemp_Single@temp+1,f,c
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;ds18b20.c: 96: printf("Temperature: %d\n\r ", temp);
  8199  001360  0E01               	movlw	low STR_2
  8200  001362  6E33               	movwf	printf@f,c
  8201  001364  0EBF               	movlw	high STR_2
  8202  001366  6E34               	movwf	printf@f+1,c
  8203  001368  C046  F035         	movff	readTemp_Single@temp,?_printf+2
  8204  00136C  C047  F036         	movff	readTemp_Single@temp+1,?_printf+3
  8205  001370  EC1C  F013         	call	_printf	;wreg free
  8206                           
  8207                           ;ds18b20.c: 99: fptmp = temp % 10;
  8208  001374  C046  F016         	movff	readTemp_Single@temp,___lwmod@dividend
  8209  001378  C047  F017         	movff	readTemp_Single@temp+1,___lwmod@dividend+1
  8210  00137C  6A19               	clrf	___lwmod@divisor+1,c
  8211  00137E  0E0A               	movlw	10
  8212  001380  6E18               	movwf	___lwmod@divisor,c
  8213  001382  EC3A  F011         	call	___lwmod	;wreg free
  8214  001386  5016               	movf	?___lwmod,w,c
  8215  001388  6E43               	movwf	readTemp_Single@fptmp,c
  8216                           
  8217                           ;ds18b20.c: 100: temp = temp / 10;
  8218  00138A  C046  F00F         	movff	readTemp_Single@temp,___lwdiv@dividend
  8219  00138E  C047  F010         	movff	readTemp_Single@temp+1,___lwdiv@dividend+1
  8220  001392  6A12               	clrf	___lwdiv@divisor+1,c
  8221  001394  0E0A               	movlw	10
  8222  001396  6E11               	movwf	___lwdiv@divisor,c
  8223  001398  ECAC  F010         	call	___lwdiv	;wreg free
  8224  00139C  C00F  F046         	movff	?___lwdiv,readTemp_Single@temp
  8225  0013A0  C010  F047         	movff	?___lwdiv+1,readTemp_Single@temp+1
  8226                           
  8227                           ;ds18b20.c: 102: if (fptmp >=6) temp += 1;
  8228  0013A4  0E05               	movlw	5
  8229  0013A6  6443               	cpfsgt	readTemp_Single@fptmp,c
  8230  0013A8  D002               	goto	l5768
  8231  0013AA  4A46               	infsnz	readTemp_Single@temp,f,c
  8232  0013AC  2A47               	incf	readTemp_Single@temp+1,f,c
  8233  0013AE                     l5768:
  8234                           
  8235                           ;ds18b20.c: 105: *buf = temp;
  8236  0013AE  503E               	movf	readTemp_Single@buf,w,c
  8237  0013B0  6ED9               	movwf	fsr2l,c
  8238  0013B2  6ADA               	clrf	fsr2h,c
  8239  0013B4  C046  FFDE         	movff	readTemp_Single@temp,postinc2
  8240  0013B8  C047  FFDD         	movff	readTemp_Single@temp+1,postdec2
  8241                           
  8242                           ;ds18b20.c: 106: *time_flag = 0;
  8243  0013BC  503F               	movf	readTemp_Single@time_flag,w,c
  8244  0013BE  6ED9               	movwf	fsr2l,c
  8245  0013C0  6ADA               	clrf	fsr2h,c
  8246  0013C2  6ADF               	clrf	indf2,c
  8247  0013C4  0C00               	retlw	0
  8248  0013C6                     l5780:
  8249                           
  8250                           ; BSR set to: 0
  8251  0013C6  503F               	movf	readTemp_Single@time_flag,w,c
  8252  0013C8  6ED9               	movwf	fsr2l,c
  8253  0013CA  6ADA               	clrf	fsr2h,c
  8254  0013CC  50DF               	movf	indf2,w,c
  8255                           
  8256                           ; Switch size 1, requested type "space"
  8257                           ; Number of cases is 3, Range of values is 0 to 2
  8258                           ; switch strategies available:
  8259                           ; Name         Instructions Cycles
  8260                           ; simple_byte           10     6 (average)
  8261                           ;	Chosen strategy is simple_byte
  8262  0013CE  E101 D771          	bz	l5712
  8263  0013D2  0A01               	xorlw	1	; case 1
  8264  0013D4  E085               	bz	l5724
  8265  0013D6  0A03               	xorlw	3	; case 2
  8266  0013D8  0012               	return	
  8267  0013DA                     __end_of_readTemp_Single:
  8268                           	opt stack 0
  8269                           tosu	equ	0xFFF
  8270                           tosh	equ	0xFFE
  8271                           tosl	equ	0xFFD
  8272                           pclath	equ	0xFFA
  8273                           tblptru	equ	0xFF8
  8274                           tblptrh	equ	0xFF7
  8275                           tblptrl	equ	0xFF6
  8276                           tablat	equ	0xFF5
  8277                           prodh	equ	0xFF4
  8278                           prodl	equ	0xFF3
  8279                           intcon	equ	0xFF2
  8280                           intcon2	equ	0xFF1
  8281                           postinc0	equ	0xFEE
  8282                           wreg	equ	0xFE8
  8283                           indf1	equ	0xFE7
  8284                           plusw1	equ	0xFE3
  8285                           fsr1h	equ	0xFE2
  8286                           fsr1l	equ	0xFE1
  8287                           indf2	equ	0xFDF
  8288                           postinc2	equ	0xFDE
  8289                           postdec2	equ	0xFDD
  8290                           plusw2	equ	0xFDB
  8291                           fsr2h	equ	0xFDA
  8292                           fsr2l	equ	0xFD9
  8293                           status	equ	0xFD8
  8294                           
  8295 ;; *************** function _write_byte *****************
  8296 ;; Defined at:
  8297 ;;		line 66 in file "onewire.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  val             1    wreg     unsigned char 
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;  val             1   17[COMRAM] unsigned char 
  8302 ;;  i               1   19[COMRAM] unsigned char 
  8303 ;;  temp            1   18[COMRAM] unsigned char 
  8304 ;; Return value:  Size  Location     Type
  8305 ;;                  1    wreg      void 
  8306 ;; Registers used:
  8307 ;;		wreg, status,2, status,0, cstack
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8314 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8315 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8316 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8317 ;;Total ram usage:        5 bytes
  8318 ;; Hardware stack levels used:    1
  8319 ;; Hardware stack levels required when called:    4
  8320 ;; This function calls:
  8321 ;;		_write_bit
  8322 ;; This function is called by:
  8323 ;;		_init_ds18b20
  8324 ;;		_readTemp_Single
  8325 ;; This function uses a non-reentrant model
  8326 ;;
  8327                           
  8328                           	psect	text31
  8329  002364                     __ptext31:
  8330                           	opt stack 0
  8331  002364                     _write_byte:
  8332                           	opt stack 24
  8333                           
  8334                           ;incstack = 0
  8335                           ;write_byte@val stored from wreg
  8336  002364  6E12               	movwf	write_byte@val,c
  8337                           
  8338                           ;onewire.c: 68: uint8_t i;
  8339                           ;onewire.c: 69: uint8_t temp;
  8340                           ;onewire.c: 71: for (i=0;i<8;i++)
  8341  002366  6A14               	clrf	write_byte@i,c
  8342  002368                     l5244:
  8343                           
  8344                           ;onewire.c: 72: {
  8345                           ;onewire.c: 73: temp = val >> i;
  8346  002368  C014  F010         	movff	write_byte@i,??_write_byte
  8347  00236C  C012  F011         	movff	write_byte@val,??_write_byte+1
  8348  002370  2A10               	incf	??_write_byte,f,c
  8349  002372  D002               	goto	u3704
  8350  002374                     u3705:
  8351  002374  90D8               	bcf	status,0,c
  8352  002376  3211               	rrcf	??_write_byte+1,f,c
  8353  002378                     u3704:
  8354  002378  2E10               	decfsz	??_write_byte,f,c
  8355  00237A  D7FC               	goto	u3705
  8356  00237C  5011               	movf	??_write_byte+1,w,c
  8357  00237E  6E13               	movwf	write_byte@temp,c
  8358                           
  8359                           ;onewire.c: 74: temp &= 0x01;
  8360  002380  0E01               	movlw	1
  8361  002382  1613               	andwf	write_byte@temp,f,c
  8362                           
  8363                           ;onewire.c: 75: write_bit(temp);
  8364  002384  5013               	movf	write_byte@temp,w,c
  8365  002386  EC0A  F013         	call	_write_bit
  8366  00238A  2A14               	incf	write_byte@i,f,c
  8367  00238C  0E07               	movlw	7
  8368  00238E  6414               	cpfsgt	write_byte@i,c
  8369  002390  D7EB               	goto	l5244
  8370                           
  8371                           ;onewire.c: 76: }
  8372                           ;onewire.c: 78: _delay((unsigned long)((105)*(40000000/4000000.0)));
  8373  002392  0ED2               	movlw	210
  8374  002394                     u4817:
  8375  002394  D000               	nop2	
  8376  002396  2EE8               	decfsz	wreg,f,c
  8377  002398  D7FD               	bra	u4817
  8378  00239A  0012               	return		;funcret
  8379  00239C                     __end_of_write_byte:
  8380                           	opt stack 0
  8381                           tosu	equ	0xFFF
  8382                           tosh	equ	0xFFE
  8383                           tosl	equ	0xFFD
  8384                           pclath	equ	0xFFA
  8385                           tblptru	equ	0xFF8
  8386                           tblptrh	equ	0xFF7
  8387                           tblptrl	equ	0xFF6
  8388                           tablat	equ	0xFF5
  8389                           prodh	equ	0xFF4
  8390                           prodl	equ	0xFF3
  8391                           intcon	equ	0xFF2
  8392                           intcon2	equ	0xFF1
  8393                           postinc0	equ	0xFEE
  8394                           wreg	equ	0xFE8
  8395                           indf1	equ	0xFE7
  8396                           plusw1	equ	0xFE3
  8397                           fsr1h	equ	0xFE2
  8398                           fsr1l	equ	0xFE1
  8399                           indf2	equ	0xFDF
  8400                           postinc2	equ	0xFDE
  8401                           postdec2	equ	0xFDD
  8402                           plusw2	equ	0xFDB
  8403                           fsr2h	equ	0xFDA
  8404                           fsr2l	equ	0xFD9
  8405                           status	equ	0xFD8
  8406                           
  8407 ;; *************** function _write_bit *****************
  8408 ;; Defined at:
  8409 ;;		line 34 in file "onewire.c"
  8410 ;; Parameters:    Size  Location     Type
  8411 ;;  bitval          1    wreg     unsigned char 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  bitval          1   14[COMRAM] unsigned char 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      void 
  8416 ;; Registers used:
  8417 ;;		wreg, status,2, status,0, cstack
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;Total ram usage:        1 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    3
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_write_byte
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           	psect	text32
  8438  002614                     __ptext32:
  8439                           	opt stack 0
  8440  002614                     _write_bit:
  8441                           	opt stack 24
  8442                           
  8443                           ;incstack = 0
  8444                           ;write_bit@bitval stored from wreg
  8445  002614  6E0F               	movwf	write_bit@bitval,c
  8446                           
  8447                           ;onewire.c: 36: PORTCbits.RC0 = 0;
  8448  002616  9082               	bcf	3970,0,c	;volatile
  8449                           
  8450                           ;onewire.c: 37: TRISCbits.RC0 = 0;
  8451  002618  9094               	bcf	3988,0,c	;volatile
  8452                           
  8453                           ;onewire.c: 38: if(bitval == 1) {
  8454  00261A  040F               	decf	write_bit@bitval,w,c
  8455  00261C  E106               	bnz	l860
  8456                           
  8457                           ;onewire.c: 39: _delay((unsigned long)((2)*(40000000/4000000.0)));
  8458  00261E  0E06               	movlw	6
  8459  002620                     u4827:
  8460  002620  2EE8               	decfsz	wreg,f,c
  8461  002622  D7FE               	bra	u4827
  8462  002624  D000               	nop2	
  8463                           
  8464                           ;onewire.c: 40: PORTCbits.RC0 = 1;
  8465  002626  8082               	bsf	3970,0,c	;volatile
  8466                           
  8467                           ;onewire.c: 41: TRISCbits.RC0 = 1;
  8468  002628  8094               	bsf	3988,0,c	;volatile
  8469  00262A                     l860:
  8470                           
  8471                           ;onewire.c: 42: }
  8472                           ;onewire.c: 43: _delay((unsigned long)((105)*(40000000/4000000.0)));
  8473  00262A  0ED2               	movlw	210
  8474  00262C                     u4837:
  8475  00262C  D000               	nop2	
  8476  00262E  2EE8               	decfsz	wreg,f,c
  8477  002630  D7FD               	bra	u4837
  8478                           
  8479                           ;onewire.c: 44: PORTCbits.RC0 = 1;
  8480  002632  8082               	bsf	3970,0,c	;volatile
  8481                           
  8482                           ;onewire.c: 45: TRISCbits.RC0 = 1;
  8483  002634  8094               	bsf	3988,0,c	;volatile
  8484  002636  0012               	return		;funcret
  8485  002638                     __end_of_write_bit:
  8486                           	opt stack 0
  8487                           tosu	equ	0xFFF
  8488                           tosh	equ	0xFFE
  8489                           tosl	equ	0xFFD
  8490                           pclath	equ	0xFFA
  8491                           tblptru	equ	0xFF8
  8492                           tblptrh	equ	0xFF7
  8493                           tblptrl	equ	0xFF6
  8494                           tablat	equ	0xFF5
  8495                           prodh	equ	0xFF4
  8496                           prodl	equ	0xFF3
  8497                           intcon	equ	0xFF2
  8498                           intcon2	equ	0xFF1
  8499                           postinc0	equ	0xFEE
  8500                           wreg	equ	0xFE8
  8501                           indf1	equ	0xFE7
  8502                           plusw1	equ	0xFE3
  8503                           fsr1h	equ	0xFE2
  8504                           fsr1l	equ	0xFE1
  8505                           indf2	equ	0xFDF
  8506                           postinc2	equ	0xFDE
  8507                           postdec2	equ	0xFDD
  8508                           plusw2	equ	0xFDB
  8509                           fsr2h	equ	0xFDA
  8510                           fsr2l	equ	0xFD9
  8511                           status	equ	0xFD8
  8512                           
  8513 ;; *************** function _read_byte *****************
  8514 ;; Defined at:
  8515 ;;		line 50 in file "onewire.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;		None
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;  i               1   17[COMRAM] unsigned char 
  8520 ;;  val             1   16[COMRAM] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  1    wreg      unsigned char 
  8523 ;; Registers used:
  8524 ;;		wreg, status,2, status,0, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;Total ram usage:        4 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    4
  8537 ;; This function calls:
  8538 ;;		_read_bit
  8539 ;; This function is called by:
  8540 ;;		_readTemp_Single
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           	psect	text33
  8545  00239C                     __ptext33:
  8546                           	opt stack 0
  8547  00239C                     _read_byte:
  8548                           	opt stack 23
  8549                           
  8550                           ;onewire.c: 52: uint8_t i;
  8551                           ;onewire.c: 53: uint8_t val = 0;
  8552                           
  8553                           ;incstack = 0
  8554  00239C  6A11               	clrf	read_byte@val,c
  8555                           
  8556                           ;onewire.c: 55: for(i=0;i<8;i++)
  8557  00239E  6A12               	clrf	read_byte@i,c
  8558  0023A0                     l5260:
  8559                           
  8560                           ;onewire.c: 56: {
  8561                           ;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  8562  0023A0  EC8F  F013         	call	_read_bit	;wreg free
  8563  0023A4  0900               	iorlw	0
  8564  0023A6  E00C               	bz	l5264
  8565  0023A8  C012  F00F         	movff	read_byte@i,??_read_byte
  8566  0023AC  0E01               	movlw	1
  8567  0023AE  6E10               	movwf	(??_read_byte+1)& (0+255),c
  8568  0023B0  2A0F               	incf	??_read_byte,f,c
  8569  0023B2  D002               	goto	u3734
  8570  0023B4                     u3735:
  8571  0023B4  90D8               	bcf	status,0,c
  8572  0023B6  3610               	rlcf	??_read_byte+1,f,c
  8573  0023B8                     u3734:
  8574  0023B8  2E0F               	decfsz	??_read_byte,f,c
  8575  0023BA  D7FC               	goto	u3735
  8576  0023BC  5010               	movf	??_read_byte+1,w,c
  8577  0023BE  1211               	iorwf	read_byte@val,f,c
  8578  0023C0                     l5264:
  8579                           
  8580                           ;onewire.c: 58: _delay((unsigned long)((120)*(40000000/4000000.0)));
  8581  0023C0  0EF0               	movlw	240
  8582  0023C2                     u4847:
  8583  0023C2  D000               	nop2	
  8584  0023C4  2EE8               	decfsz	wreg,f,c
  8585  0023C6  D7FD               	bra	u4847
  8586  0023C8  2A12               	incf	read_byte@i,f,c
  8587  0023CA  0E07               	movlw	7
  8588  0023CC  6412               	cpfsgt	read_byte@i,c
  8589  0023CE  D7E8               	goto	l5260
  8590                           
  8591                           ;onewire.c: 59: }
  8592                           ;onewire.c: 61: return val;
  8593  0023D0  5011               	movf	read_byte@val,w,c
  8594  0023D2  0012               	return		;funcret
  8595  0023D4                     __end_of_read_byte:
  8596                           	opt stack 0
  8597                           tosu	equ	0xFFF
  8598                           tosh	equ	0xFFE
  8599                           tosl	equ	0xFFD
  8600                           pclath	equ	0xFFA
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           intcon	equ	0xFF2
  8608                           intcon2	equ	0xFF1
  8609                           postinc0	equ	0xFEE
  8610                           wreg	equ	0xFE8
  8611                           indf1	equ	0xFE7
  8612                           plusw1	equ	0xFE3
  8613                           fsr1h	equ	0xFE2
  8614                           fsr1l	equ	0xFE1
  8615                           indf2	equ	0xFDF
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           plusw2	equ	0xFDB
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function _read_bit *****************
  8624 ;; Defined at:
  8625 ;;		line 22 in file "onewire.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;		None
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;		None
  8630 ;; Return value:  Size  Location     Type
  8631 ;;                  1    wreg      unsigned char 
  8632 ;; Registers used:
  8633 ;;		wreg
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;Total ram usage:        0 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:    3
  8646 ;; This function calls:
  8647 ;;		Nothing
  8648 ;; This function is called by:
  8649 ;;		_read_byte
  8650 ;; This function uses a non-reentrant model
  8651 ;;
  8652                           
  8653                           	psect	text34
  8654  00271E                     __ptext34:
  8655                           	opt stack 0
  8656  00271E                     _read_bit:
  8657                           	opt stack 23
  8658                           
  8659                           ;onewire.c: 24: PORTCbits.RC0 = 0;
  8660                           
  8661                           ;incstack = 0
  8662  00271E  9082               	bcf	3970,0,c	;volatile
  8663                           
  8664                           ;onewire.c: 25: TRISCbits.RC0 = 0;
  8665  002720  9094               	bcf	3988,0,c	;volatile
  8666                           
  8667                           ;onewire.c: 26: _delay((unsigned long)((1)*(40000000/4000000.0)));
  8668  002722  0E03               	movlw	3
  8669  002724                     u4857:
  8670  002724  2EE8               	decfsz	wreg,f,c
  8671  002726  D7FE               	bra	u4857
  8672  002728  F000               	nop	
  8673                           
  8674                           ;onewire.c: 27: PORTCbits.RC0 = 1;
  8675  00272A  8082               	bsf	3970,0,c	;volatile
  8676                           
  8677                           ;onewire.c: 28: TRISCbits.RC0 = 1;
  8678  00272C  8094               	bsf	3988,0,c	;volatile
  8679                           
  8680                           ;onewire.c: 29: _delay((unsigned long)((6)*(40000000/4000000.0)));
  8681  00272E  0E14               	movlw	20
  8682  002730                     u4867:
  8683  002730  2EE8               	decfsz	wreg,f,c
  8684  002732  D7FE               	bra	u4867
  8685                           
  8686                           ;onewire.c: 30: return(PORTCbits.RC0);
  8687  002734  B082               	btfsc	3970,0,c	;volatile
  8688  002736  0C01               	retlw	1
  8689  002738  0C00               	retlw	0	;funcret
  8690  00273A                     __end_of_read_bit:
  8691                           	opt stack 0
  8692                           tosu	equ	0xFFF
  8693                           tosh	equ	0xFFE
  8694                           tosl	equ	0xFFD
  8695                           pclath	equ	0xFFA
  8696                           tblptru	equ	0xFF8
  8697                           tblptrh	equ	0xFF7
  8698                           tblptrl	equ	0xFF6
  8699                           tablat	equ	0xFF5
  8700                           prodh	equ	0xFF4
  8701                           prodl	equ	0xFF3
  8702                           intcon	equ	0xFF2
  8703                           intcon2	equ	0xFF1
  8704                           postinc0	equ	0xFEE
  8705                           wreg	equ	0xFE8
  8706                           indf1	equ	0xFE7
  8707                           plusw1	equ	0xFE3
  8708                           fsr1h	equ	0xFE2
  8709                           fsr1l	equ	0xFE1
  8710                           indf2	equ	0xFDF
  8711                           postinc2	equ	0xFDE
  8712                           postdec2	equ	0xFDD
  8713                           plusw2	equ	0xFDB
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function _ow_reset *****************
  8719 ;; Defined at:
  8720 ;;		line 5 in file "onewire.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;  presence        1   15[COMRAM] unsigned char 
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  1    wreg      unsigned char 
  8727 ;; Registers used:
  8728 ;;		wreg, status,2
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;Total ram usage:        2 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    3
  8741 ;; This function calls:
  8742 ;;		Nothing
  8743 ;; This function is called by:
  8744 ;;		_init_ds18b20
  8745 ;;		_readTemp_Single
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text35
  8750  0022B2                     __ptext35:
  8751                           	opt stack 0
  8752  0022B2                     _ow_reset:
  8753                           	opt stack 25
  8754                           
  8755                           ;onewire.c: 7: uint8_t presence;
  8756                           ;onewire.c: 8: PORTCbits.RC0 = 0;
  8757                           
  8758                           ;incstack = 0
  8759  0022B2  9082               	bcf	3970,0,c	;volatile
  8760                           
  8761                           ;onewire.c: 9: TRISCbits.RC0 = 0;
  8762  0022B4  9094               	bcf	3988,0,c	;volatile
  8763                           
  8764                           ;onewire.c: 10: _delay((unsigned long)((500)*(40000000/4000000.0)));
  8765  0022B6  0E07               	movlw	7
  8766  0022B8  6E0F               	movwf	??_ow_reset& (0+255),c
  8767  0022BA  0E7D               	movlw	125
  8768  0022BC                     u4877:
  8769  0022BC  2EE8               	decfsz	wreg,f,c
  8770  0022BE  D7FE               	bra	u4877
  8771  0022C0  2E0F               	decfsz	??_ow_reset& (0+255),f,c
  8772  0022C2  D7FC               	bra	u4877
  8773  0022C4  F000               	nop	
  8774                           
  8775                           ;onewire.c: 11: PORTCbits.RC0 = 1;
  8776  0022C6  8082               	bsf	3970,0,c	;volatile
  8777                           
  8778                           ;onewire.c: 12: TRISCbits.RC0 = 1;
  8779  0022C8  8094               	bsf	3988,0,c	;volatile
  8780                           
  8781                           ;onewire.c: 13: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8782  0022CA  0EC8               	movlw	200
  8783  0022CC                     u4887:
  8784  0022CC  D000               	nop2	
  8785  0022CE  2EE8               	decfsz	wreg,f,c
  8786  0022D0  D7FD               	bra	u4887
  8787                           
  8788                           ;onewire.c: 14: presence = PORTCbits.RC0;
  8789  0022D2  0E00               	movlw	0
  8790  0022D4  B082               	btfsc	3970,0,c	;volatile
  8791  0022D6  0E01               	movlw	1
  8792  0022D8  6E10               	movwf	ow_reset@presence,c
  8793                           
  8794                           ;onewire.c: 15: _delay((unsigned long)((424)*(40000000/4000000.0)));
  8795  0022DA  0E06               	movlw	6
  8796  0022DC  6E0F               	movwf	??_ow_reset& (0+255),c
  8797  0022DE  0E80               	movlw	128
  8798  0022E0                     u4897:
  8799  0022E0  2EE8               	decfsz	wreg,f,c
  8800  0022E2  D7FE               	bra	u4897
  8801  0022E4  2E0F               	decfsz	??_ow_reset& (0+255),f,c
  8802  0022E6  D7FC               	bra	u4897
  8803  0022E8  D000               	nop2	
  8804                           
  8805                           ;onewire.c: 16: return(presence);
  8806  0022EA  5010               	movf	ow_reset@presence,w,c
  8807  0022EC  0012               	return		;funcret
  8808  0022EE                     __end_of_ow_reset:
  8809                           	opt stack 0
  8810                           tosu	equ	0xFFF
  8811                           tosh	equ	0xFFE
  8812                           tosl	equ	0xFFD
  8813                           pclath	equ	0xFFA
  8814                           tblptru	equ	0xFF8
  8815                           tblptrh	equ	0xFF7
  8816                           tblptrl	equ	0xFF6
  8817                           tablat	equ	0xFF5
  8818                           prodh	equ	0xFF4
  8819                           prodl	equ	0xFF3
  8820                           intcon	equ	0xFF2
  8821                           intcon2	equ	0xFF1
  8822                           postinc0	equ	0xFEE
  8823                           wreg	equ	0xFE8
  8824                           indf1	equ	0xFE7
  8825                           plusw1	equ	0xFE3
  8826                           fsr1h	equ	0xFE2
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           postinc2	equ	0xFDE
  8830                           postdec2	equ	0xFDD
  8831                           plusw2	equ	0xFDB
  8832                           fsr2h	equ	0xFDA
  8833                           fsr2l	equ	0xFD9
  8834                           status	equ	0xFD8
  8835                           
  8836 ;; *************** function _FillBuf *****************
  8837 ;; Defined at:
  8838 ;;		line 156 in file "display.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;		None
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;  i               1   24[COMRAM] unsigned char 
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  1    wreg      void 
  8845 ;; Registers used:
  8846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 3F/0
  8849 ;;		On exit  : 3F/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;Total ram usage:        3 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    4
  8859 ;; This function calls:
  8860 ;;		___lbdiv
  8861 ;;		___lbmod
  8862 ;; This function is called by:
  8863 ;;		_time_led
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           	psect	text36
  8868  00117C                     __ptext36:
  8869                           	opt stack 0
  8870  00117C                     _FillBuf:
  8871                           	opt stack 24
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;display.c: 158: uint8_t i;
  8875                           ;display.c: 160: for(i=0; i<5; ++i)
  8876                           
  8877                           ;incstack = 0
  8878  00117C  6A19               	clrf	FillBuf@i,c
  8879  00117E                     l5616:
  8880                           
  8881                           ;display.c: 161: {
  8882                           ;display.c: 162: if((TTime.Thr/10) % 10)
  8883  00117E  D880               	call	PL52	;call to abstracted procedure
  8884  001180  51CF               	movf	(_TTime+2)& (0+255),w,b
  8885  001182  EC1F  F012         	call	___lbdiv
  8886  001186  ECF7  F012         	call	___lbmod
  8887  00118A  0900               	iorlw	0
  8888  00118C  E00A               	bz	l5620
  8889                           
  8890                           ;display.c: 163: Dis_Buff[i] = Font[(TTime.Thr/10) % 10 + 48][i];
  8891  00118E  D878               	call	PL52	;call to abstracted procedure
  8892  001190  51CF               	movf	(_TTime+2)& (0+255),w,b
  8893  001192  EC1F  F012         	call	___lbdiv
  8894  001196  ECF7  F012         	call	___lbmod
  8895  00119A  D83D               	call	PL4	;call to abstracted procedure
  8896  00119C  0FAD               	addlw	low _Dis_Buff
  8897  00119E  D86A               	call	PL48	;call to abstracted procedure
  8898  0011A0  D002               	goto	l5622
  8899  0011A2                     l5620:
  8900                           
  8901                           ;display.c: 164: else
  8902                           ;display.c: 165: Dis_Buff[i] = 0x00;
  8903  0011A2  5019               	movf	FillBuf@i,w,c
  8904  0011A4  D872               	call	PL106	;call to abstracted procedure
  8905  0011A6                     l5622:
  8906                           
  8907                           ;display.c: 167: Dis_Buff[i + 6] = Font[TTime.Thr % 10 + 48][i];
  8908  0011A6  D876               	call	PL112	;call to abstracted procedure
  8909  0011A8  ECF7  F012         	call	___lbmod
  8910  0011AC  D834               	call	PL4	;call to abstracted procedure
  8911  0011AE  0FB3               	addlw	low (_Dis_Buff+6)
  8912  0011B0  D861               	call	PL48	;call to abstracted procedure
  8913                           
  8914                           ;display.c: 168: Dis_Buff[i + 13] = Font[(TTime.Tmin/10) % 10 + 48][i];
  8915  0011B2  D866               	call	PL52	;call to abstracted procedure
  8916  0011B4  51CE               	movf	(_TTime+1)& (0+255),w,b
  8917  0011B6  EC1F  F012         	call	___lbdiv
  8918  0011BA  ECF7  F012         	call	___lbmod
  8919  0011BE  D82B               	call	PL4	;call to abstracted procedure
  8920  0011C0  0FBA               	addlw	low (_Dis_Buff+13)
  8921  0011C2  D858               	call	PL48	;call to abstracted procedure
  8922                           
  8923                           ;display.c: 169: Dis_Buff[i + 19] = Font[TTime.Tmin % 10 + 48][i];
  8924  0011C4  D86C               	call	PL118	;call to abstracted procedure
  8925  0011C6  ECF7  F012         	call	___lbmod
  8926  0011CA  D825               	call	PL4	;call to abstracted procedure
  8927  0011CC  0FC0               	addlw	low (_Dis_Buff+19)
  8928  0011CE  D852               	call	PL48	;call to abstracted procedure
  8929  0011D0  2A19               	incf	FillBuf@i,f,c
  8930  0011D2  0E04               	movlw	4
  8931  0011D4  6419               	cpfsgt	FillBuf@i,c
  8932  0011D6  D7D3               	goto	l5616
  8933                           
  8934                           ;display.c: 171: }
  8935                           ;display.c: 173: for (i=0; i<3; ++i)
  8936  0011D8  6A19               	clrf	FillBuf@i,c
  8937  0011DA                     l5636:
  8938                           
  8939                           ;display.c: 174: {
  8940                           ;display.c: 175: Dis_Buff[i + 25] = FontS[(TTime.Ts/10) % 10 + 1][i];
  8941  0011DA  D852               	call	PL52	;call to abstracted procedure
  8942  0011DC  51CD               	movf	_TTime& (0+255),w,b
  8943  0011DE  EC1F  F012         	call	___lbdiv
  8944  0011E2  ECF7  F012         	call	___lbmod
  8945  0011E6  D841               	call	PL34	;call to abstracted procedure
  8946  0011E8  D82D               	call	PL8	;call to abstracted procedure
  8947  0011EA  0FC6               	addlw	low (_Dis_Buff+25)
  8948  0011EC  D843               	call	PL48	;call to abstracted procedure
  8949                           
  8950                           ;display.c: 176: Dis_Buff[i + 29] = FontS[TTime.Ts % 10 + 1][i];
  8951  0011EE  D85C               	call	PL120	;call to abstracted procedure
  8952  0011F0  ECF7  F012         	call	___lbmod
  8953  0011F4  D83A               	call	PL34	;call to abstracted procedure
  8954  0011F6  D826               	call	PL8	;call to abstracted procedure
  8955  0011F8  0FCA               	addlw	low (_Dis_Buff+29)
  8956  0011FA  D83C               	call	PL48	;call to abstracted procedure
  8957  0011FC  2A19               	incf	FillBuf@i,f,c
  8958  0011FE  0E02               	movlw	2
  8959  001200  6419               	cpfsgt	FillBuf@i,c
  8960  001202  D7EB               	goto	l5636
  8961                           
  8962                           ;display.c: 177: }
  8963                           ;display.c: 179: Dis_Buff[5] = 0;
  8964  001204  0100               	movlb	0	; () banked
  8965  001206  6BB2               	clrf	(_Dis_Buff+5)& (0+255),b
  8966                           
  8967                           ; BSR set to: 0
  8968                           ;display.c: 180: Dis_Buff[11] = 0x80;
  8969  001208  0E80               	movlw	128
  8970  00120A  6FB8               	movwf	(_Dis_Buff+11)& (0+255),b
  8971                           
  8972                           ;display.c: 181: Dis_Buff[12] = 0x80;
  8973  00120C  6FB9               	movwf	(_Dis_Buff+12)& (0+255),b
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;display.c: 182: Dis_Buff[18] = 0;
  8977  00120E  6BBF               	clrf	(_Dis_Buff+18)& (0+255),b
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;display.c: 183: Dis_Buff[24] = 0;
  8981  001210  6BC5               	clrf	(_Dis_Buff+24)& (0+255),b
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;display.c: 184: Dis_Buff[28] = 0;
  8985  001212  6BC9               	clrf	(_Dis_Buff+28)& (0+255),b
  8986                           
  8987                           ; BSR set to: 0
  8988  001214  0012               	return		;funcret
  8989  001216                     __end_of_FillBuf:
  8990                           	opt stack 0
  8991  001216                     PL4:
  8992                           	opt stack 24
  8993  001216  0D05               	mullw	5
  8994  001218  0EC9               	movlw	low _Font
  8995  00121A  6E17               	movwf	??_FillBuf& (0+255),c
  8996  00121C  0EB9               	movlw	high _Font
  8997  00121E  6E18               	movwf	(??_FillBuf+1)& (0+255),c
  8998  001220  50F3               	movf	prodl,w,c
  8999  001222  2617               	addwf	??_FillBuf,f,c
  9000  001224  50F4               	movf	prodh,w,c
  9001  001226  2218               	addwfc	??_FillBuf+1,f,c
  9002  001228  5019               	movf	FillBuf@i,w,c
  9003  00122A  2617               	addwf	??_FillBuf,f,c
  9004  00122C  0E00               	movlw	0
  9005  00122E  2218               	addwfc	??_FillBuf+1,f,c
  9006  001230  0EF0               	movlw	240
  9007  001232  2617               	addwf	??_FillBuf,f,c
  9008  001234  0E00               	movlw	0
  9009  001236  2218               	addwfc	??_FillBuf+1,f,c
  9010  001238  C017  FFF6         	movff	??_FillBuf,tblptrl
  9011  00123C  C018  FFF7         	movff	??_FillBuf+1,tblptrh
  9012  001240                     	if	0	;tblptru may be non-zero
  9013  001240                     	endif
  9014  001240                     	if	0	;tblptru may be non-zero
  9015  001240                     	endif
  9016  001240  5019               	movf	FillBuf@i,w,c
  9017  001242  0012               	return	
  9018  001244                     __end_ofPL4:
  9019                           	opt stack 0
  9020  001244                     PL8:
  9021                           	opt stack 24
  9022  001244  6E18               	movwf	(??_FillBuf+1)& (0+255),c
  9023  001246  50F3               	movf	prodl,w,c
  9024  001248  2617               	addwf	??_FillBuf,f,c
  9025  00124A  50F4               	movf	prodh,w,c
  9026  00124C  2218               	addwfc	??_FillBuf+1,f,c
  9027  00124E  5019               	movf	FillBuf@i,w,c
  9028  001250  2617               	addwf	??_FillBuf,f,c
  9029  001252  0E00               	movlw	0
  9030  001254  2218               	addwfc	??_FillBuf+1,f,c
  9031  001256  0E03               	movlw	3
  9032  001258  2617               	addwf	??_FillBuf,f,c
  9033  00125A  0E00               	movlw	0
  9034  00125C  2218               	addwfc	??_FillBuf+1,f,c
  9035  00125E  C017  FFF6         	movff	??_FillBuf,tblptrl
  9036  001262  C018  FFF7         	movff	??_FillBuf+1,tblptrh
  9037  001266                     	if	0	;tblptru may be non-zero
  9038  001266                     	endif
  9039  001266                     	if	0	;tblptru may be non-zero
  9040  001266                     	endif
  9041  001266  5019               	movf	FillBuf@i,w,c
  9042  001268  0012               	return	
  9043  00126A                     __end_ofPL8:
  9044                           	opt stack 0
  9045  00126A                     PL34:
  9046                           	opt stack 24
  9047  00126A  0D03               	mullw	3
  9048  00126C  0EC9               	movlw	low _FontS
  9049  00126E  6E17               	movwf	??_FillBuf& (0+255),c
  9050  001270  0EBE               	movlw	high _FontS
  9051  001272  0012               	return	
  9052  001274                     __end_ofPL34:
  9053                           	opt stack 0
  9054  001274                     PL48:
  9055                           	opt stack 24
  9056  001274  6ED9               	movwf	fsr2l,c
  9057  001276  6ADA               	clrf	fsr2h,c
  9058  001278  0008               	tblrd		*
  9059  00127A  CFF5 FFDF          	movff	tablat,indf2
  9060  00127E  0012               	return	
  9061  001280                     __end_ofPL48:
  9062                           	opt stack 0
  9063  001280                     PL52:
  9064                           	opt stack 22
  9065  001280  0E0A               	movlw	10
  9066  001282  6E13               	movwf	___lbmod@divisor,c
  9067  001284  6E0F               	movwf	___lbdiv@divisor,c
  9068  001286  0100               	movlb	0	; () banked
  9069  001288  0C0A               	retlw	10
  9070  00128A                     __end_ofPL52:
  9071                           	opt stack 0
  9072  00128A                     PL106:
  9073                           	opt stack 27
  9074  00128A  0FAD               	addlw	low _Dis_Buff
  9075  00128C  6ED9               	movwf	fsr2l,c
  9076  00128E  6ADA               	clrf	fsr2h,c
  9077  001290  6ADF               	clrf	indf2,c
  9078  001292  0012               	return	
  9079  001294                     __end_ofPL106:
  9080                           	opt stack 0
  9081  001294                     PL112:
  9082                           	opt stack 22
  9083  001294  0E0A               	movlw	10
  9084  001296  6E13               	movwf	___lbmod@divisor,c
  9085  001298  0100               	movlb	0	; () banked
  9086  00129A  51CF               	movf	(_TTime+2)& (0+255),w,b
  9087  00129C  0012               	return	
  9088  00129E                     __end_ofPL112:
  9089                           	opt stack 0
  9090  00129E                     PL118:
  9091                           	opt stack 22
  9092  00129E  0E0A               	movlw	10
  9093  0012A0  6E13               	movwf	___lbmod@divisor,c
  9094  0012A2  0100               	movlb	0	; () banked
  9095  0012A4  51CE               	movf	(_TTime+1)& (0+255),w,b
  9096  0012A6  0012               	return	
  9097  0012A8                     __end_ofPL118:
  9098                           	opt stack 0
  9099  0012A8                     PL120:
  9100                           	opt stack 22
  9101  0012A8  0E0A               	movlw	10
  9102  0012AA  6E13               	movwf	___lbmod@divisor,c
  9103  0012AC  0100               	movlb	0	; () banked
  9104  0012AE  51CD               	movf	_TTime& (0+255),w,b
  9105  0012B0  0012               	return	
  9106  0012B2                     __end_ofPL120:
  9107                           	opt stack 0
  9108                           tosu	equ	0xFFF
  9109                           tosh	equ	0xFFE
  9110                           tosl	equ	0xFFD
  9111                           pclath	equ	0xFFA
  9112                           tblptru	equ	0xFF8
  9113                           tblptrh	equ	0xFF7
  9114                           tblptrl	equ	0xFF6
  9115                           tablat	equ	0xFF5
  9116                           prodh	equ	0xFF4
  9117                           prodl	equ	0xFF3
  9118                           intcon	equ	0xFF2
  9119                           intcon2	equ	0xFF1
  9120                           postinc0	equ	0xFEE
  9121                           wreg	equ	0xFE8
  9122                           indf1	equ	0xFE7
  9123                           plusw1	equ	0xFE3
  9124                           fsr1h	equ	0xFE2
  9125                           fsr1l	equ	0xFE1
  9126                           indf2	equ	0xFDF
  9127                           postinc2	equ	0xFDE
  9128                           postdec2	equ	0xFDD
  9129                           plusw2	equ	0xFDB
  9130                           fsr2h	equ	0xFDA
  9131                           fsr2l	equ	0xFD9
  9132                           status	equ	0xFD8
  9133                           
  9134 ;; *************** function _BMP085Pressure *****************
  9135 ;; Defined at:
  9136 ;;		line 323 in file "bmp180.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;  getTemp         1    wreg     unsigned char 
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;  getTemp         1   77[COMRAM] unsigned char 
  9141 ;; Return value:  Size  Location     Type
  9142 ;;                  4  555[None  ] unsigned long 
  9143 ;; Registers used:
  9144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9145 ;; Tracked objects:
  9146 ;;		On entry : 3F/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;Total ram usage:        1 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    7
  9157 ;; This function calls:
  9158 ;;		_BMP085GetPressure
  9159 ;;		_BMP085GetTemp
  9160 ;;		_BMP085ReadUT
  9161 ;;		_bmp085ReadUP
  9162 ;; This function is called by:
  9163 ;;		_time_led
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           	psect	text37
  9168  0023D4                     __ptext37:
  9169                           	opt stack 0
  9170  0023D4                     _BMP085Pressure:
  9171                           	opt stack 21
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;incstack = 0
  9175                           ;BMP085Pressure@getTemp stored from wreg
  9176  0023D4  6E4E               	movwf	BMP085Pressure@getTemp,c
  9177                           
  9178                           ;bmp180.c: 326: if (getTemp)
  9179  0023D6  504E               	movf	BMP085Pressure@getTemp,w,c
  9180  0023D8  E00C               	bz	l978
  9181                           
  9182                           ;bmp180.c: 327: T = BMP085GetTemp(BMP085ReadUT());
  9183  0023DA  EC05  F012         	call	_BMP085ReadUT	;wreg free
  9184  0023DE  C01B  F03E         	movff	?_BMP085ReadUT,BMP085GetTemp@_tu
  9185  0023E2  C01C  F03F         	movff	?_BMP085ReadUT+1,BMP085GetTemp@_tu+1
  9186  0023E6  C01D  F040         	movff	?_BMP085ReadUT+2,BMP085GetTemp@_tu+2
  9187  0023EA  C01E  F041         	movff	?_BMP085ReadUT+3,BMP085GetTemp@_tu+3
  9188  0023EE  EC17  F008         	call	_BMP085GetTemp	;wreg free
  9189  0023F2                     l978:
  9190                           
  9191                           ;bmp180.c: 328: return(BMP085GetPressure(bmp085ReadUP()));
  9192                           ;	Return value of _BMP085Pressure is never used
  9193  0023F2  ECED  F009         	call	_bmp085ReadUP	;wreg free
  9194  0023F6  C014  F03E         	movff	?_bmp085ReadUP,BMP085GetPressure@_pu
  9195  0023FA  C015  F03F         	movff	?_bmp085ReadUP+1,BMP085GetPressure@_pu+1
  9196  0023FE  C016  F040         	movff	?_bmp085ReadUP+2,BMP085GetPressure@_pu+2
  9197  002402  C017  F041         	movff	?_bmp085ReadUP+3,BMP085GetPressure@_pu+3
  9198  002406  EF09  F000         	goto	_BMP085GetPressure	;wreg free
  9199  00240A                     __end_of_BMP085Pressure:
  9200                           	opt stack 0
  9201                           tosu	equ	0xFFF
  9202                           tosh	equ	0xFFE
  9203                           tosl	equ	0xFFD
  9204                           pclath	equ	0xFFA
  9205                           tblptru	equ	0xFF8
  9206                           tblptrh	equ	0xFF7
  9207                           tblptrl	equ	0xFF6
  9208                           tablat	equ	0xFF5
  9209                           prodh	equ	0xFF4
  9210                           prodl	equ	0xFF3
  9211                           intcon	equ	0xFF2
  9212                           intcon2	equ	0xFF1
  9213                           postinc0	equ	0xFEE
  9214                           wreg	equ	0xFE8
  9215                           indf1	equ	0xFE7
  9216                           plusw1	equ	0xFE3
  9217                           fsr1h	equ	0xFE2
  9218                           fsr1l	equ	0xFE1
  9219                           indf2	equ	0xFDF
  9220                           postinc2	equ	0xFDE
  9221                           postdec2	equ	0xFDD
  9222                           plusw2	equ	0xFDB
  9223                           fsr2h	equ	0xFDA
  9224                           fsr2l	equ	0xFD9
  9225                           status	equ	0xFD8
  9226                           
  9227 ;; *************** function _bmp085ReadUP *****************
  9228 ;; Defined at:
  9229 ;;		line 172 in file "bmp180.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;		None
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  p               4   51[COMRAM] long 
  9234 ;;  xlsb            4   47[COMRAM] unsigned long 
  9235 ;;  lsb             4   43[COMRAM] unsigned long 
  9236 ;;  msb             4   39[COMRAM] unsigned long 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;                  4   19[COMRAM] long 
  9239 ;; Registers used:
  9240 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9246 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9247 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;Total ram usage:       36 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    6
  9253 ;; This function calls:
  9254 ;;		_BMP085ReadByte
  9255 ;;		_BMP085WriteByte
  9256 ;; This function is called by:
  9257 ;;		_BMP085Pressure
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           	psect	text38
  9262  0013DA                     __ptext38:
  9263                           	opt stack 0
  9264  0013DA                     _bmp085ReadUP:
  9265                           	opt stack 21
  9266                           
  9267                           ;incstack = 0
  9268  0013DA  0EF4               	movlw	244
  9269  0013DC  6E11               	movwf	BMP085WriteByte@data,c
  9270  0013DE  EC9D  F013         	call	_BMP085WriteByte
  9271                           
  9272                           ;bmp180.c: 183: switch (OSS)
  9273  0013E2  D025               	goto	l5292
  9274  0013E4                     l5282:
  9275  0013E4  0E41               	movlw	65
  9276  0013E6  6E18               	movwf	??_bmp085ReadUP& (0+255),c
  9277  0013E8  0EEE               	movlw	238
  9278  0013EA                     u4907:
  9279  0013EA  2EE8               	decfsz	wreg,f,c
  9280  0013EC  D7FE               	bra	u4907
  9281  0013EE  2E18               	decfsz	??_bmp085ReadUP& (0+255),f,c
  9282  0013F0  D7FC               	bra	u4907
  9283  0013F2  D01B               	goto	L7
  9284  0013F4                     l5284:
  9285  0013F4  0E68               	movlw	104
  9286  0013F6  6E18               	movwf	??_bmp085ReadUP& (0+255),c
  9287  0013F8  0EE4               	movlw	228
  9288  0013FA                     u4917:
  9289  0013FA  2EE8               	decfsz	wreg,f,c
  9290  0013FC  D7FE               	bra	u4917
  9291  0013FE  2E18               	decfsz	??_bmp085ReadUP& (0+255),f,c
  9292  001400  D7FC               	bra	u4917
  9293  001402  D013               	goto	L7
  9294  001404                     l5286:
  9295  001404  0EB6               	movlw	182
  9296  001406  6E18               	movwf	??_bmp085ReadUP& (0+255),c
  9297  001408  0ED0               	movlw	208
  9298  00140A                     u4927:
  9299  00140A  2EE8               	decfsz	wreg,f,c
  9300  00140C  D7FE               	bra	u4927
  9301  00140E  2E18               	decfsz	??_bmp085ReadUP& (0+255),f,c
  9302  001410  D7FC               	bra	u4927
  9303  001412  D00B               	goto	L7
  9304  001414                     l5288:
  9305  001414  0E02               	movlw	2
  9306  001416  6E19               	movwf	(??_bmp085ReadUP+1)& (0+255),c
  9307  001418  0E52               	movlw	82
  9308  00141A  6E18               	movwf	??_bmp085ReadUP& (0+255),c
  9309  00141C  0EA6               	movlw	166
  9310  00141E                     u4937:
  9311  00141E  2EE8               	decfsz	wreg,f,c
  9312  001420  D7FE               	bra	u4937
  9313  001422  2E18               	decfsz	??_bmp085ReadUP& (0+255),f,c
  9314  001424  D7FC               	bra	u4937
  9315  001426  2E19               	decfsz	(??_bmp085ReadUP+1)& (0+255),f,c
  9316  001428  D7FA               	bra	u4937
  9317  00142A                     L7:
  9318  00142A  D000               	nop2	
  9319  00142C  D00D               	goto	l5294
  9320  00142E                     l5292:
  9321  00142E  0EEA               	movlw	low _OSS
  9322  001430  6EF6               	movwf	tblptrl,c
  9323  001432                     	if	1	;There is more than 1 active tblptr byte
  9324  001432  0EBE               	movlw	high _OSS
  9325  001434  6EF7               	movwf	tblptrh,c
  9326  001436                     	endif
  9327  001436                     	if	0	;There are less than 3 active tblptr bytes
  9328  001436                     	endif
  9329  001436  0008               	tblrd		*
  9330  001438  50F5               	movf	tablat,w,c
  9331                           
  9332                           ; Switch size 1, requested type "space"
  9333                           ; Number of cases is 4, Range of values is 0 to 3
  9334                           ; switch strategies available:
  9335                           ; Name         Instructions Cycles
  9336                           ; simple_byte           13     7 (average)
  9337                           ;	Chosen strategy is simple_byte
  9338  00143A  E0D4               	bz	l5282
  9339  00143C  0A01               	xorlw	1	; case 1
  9340  00143E  E0DA               	bz	l5284
  9341  001440  0A03               	xorlw	3	; case 2
  9342  001442  E0E0               	bz	l5286
  9343  001444  0A01               	xorlw	1	; case 3
  9344  001446  E0E6               	bz	l5288
  9345  001448                     l5294:
  9346                           
  9347                           ;bmp180.c: 192: msb = BMP085ReadByte(0xF6);
  9348  001448  0EF6               	movlw	246
  9349  00144A  EC68  F012         	call	_BMP085ReadByte
  9350  00144E  6E28               	movwf	bmp085ReadUP@msb,c
  9351  001450  6A29               	clrf	bmp085ReadUP@msb+1,c
  9352  001452  6A2A               	clrf	bmp085ReadUP@msb+2,c
  9353  001454  6A2B               	clrf	bmp085ReadUP@msb+3,c
  9354                           
  9355                           ;bmp180.c: 193: lsb = BMP085ReadByte(0xF7);
  9356  001456  0EF7               	movlw	247
  9357  001458  EC68  F012         	call	_BMP085ReadByte
  9358  00145C  6E2C               	movwf	bmp085ReadUP@lsb,c
  9359  00145E  6A2D               	clrf	bmp085ReadUP@lsb+1,c
  9360  001460  6A2E               	clrf	bmp085ReadUP@lsb+2,c
  9361  001462  6A2F               	clrf	bmp085ReadUP@lsb+3,c
  9362                           
  9363                           ;bmp180.c: 194: xlsb = BMP085ReadByte(0xF8);
  9364  001464  0EF8               	movlw	248
  9365  001466  EC68  F012         	call	_BMP085ReadByte
  9366  00146A  6E30               	movwf	bmp085ReadUP@xlsb,c
  9367  00146C  6A31               	clrf	bmp085ReadUP@xlsb+1,c
  9368  00146E  6A32               	clrf	bmp085ReadUP@xlsb+2,c
  9369  001470  6A33               	clrf	bmp085ReadUP@xlsb+3,c
  9370                           
  9371                           ;bmp180.c: 195: p = ((msb<<16) + (lsb<<8) + xlsb) >> (8-OSS);
  9372  001472  C02C  F019         	movff	bmp085ReadUP@lsb,??_bmp085ReadUP+1
  9373  001476  C02D  F01A         	movff	bmp085ReadUP@lsb+1,??_bmp085ReadUP+2
  9374  00147A  C02E  F01B         	movff	bmp085ReadUP@lsb+2,??_bmp085ReadUP+3
  9375  00147E  6A18               	clrf	??_bmp085ReadUP& (0+255),c
  9376  001480  C028  F01C         	movff	bmp085ReadUP@msb,??_bmp085ReadUP+4
  9377  001484  C029  F01D         	movff	bmp085ReadUP@msb+1,??_bmp085ReadUP+5
  9378  001488  C02A  F01E         	movff	bmp085ReadUP@msb+2,??_bmp085ReadUP+6
  9379  00148C  C02B  F01F         	movff	bmp085ReadUP@msb+3,??_bmp085ReadUP+7
  9380  001490  C01D  F01F         	movff	??_bmp085ReadUP+5,??_bmp085ReadUP+7
  9381  001494  C01C  F01E         	movff	??_bmp085ReadUP+4,??_bmp085ReadUP+6
  9382  001498  6A1D               	clrf	??_bmp085ReadUP+5,c
  9383  00149A  6A1C               	clrf	??_bmp085ReadUP+4,c
  9384  00149C  5018               	movf	??_bmp085ReadUP,w,c
  9385  00149E  241C               	addwf	??_bmp085ReadUP+4,w,c
  9386  0014A0  6E20               	movwf	(??_bmp085ReadUP+8)& (0+255),c
  9387  0014A2  5019               	movf	??_bmp085ReadUP+1,w,c
  9388  0014A4  201D               	addwfc	??_bmp085ReadUP+5,w,c
  9389  0014A6  6E21               	movwf	(??_bmp085ReadUP+9)& (0+255),c
  9390  0014A8  501A               	movf	??_bmp085ReadUP+2,w,c
  9391  0014AA  201E               	addwfc	??_bmp085ReadUP+6,w,c
  9392  0014AC  6E22               	movwf	(??_bmp085ReadUP+10)& (0+255),c
  9393  0014AE  501B               	movf	??_bmp085ReadUP+3,w,c
  9394  0014B0  201F               	addwfc	??_bmp085ReadUP+7,w,c
  9395  0014B2  6E23               	movwf	(??_bmp085ReadUP+11)& (0+255),c
  9396  0014B4  5030               	movf	bmp085ReadUP@xlsb,w,c
  9397  0014B6  2420               	addwf	??_bmp085ReadUP+8,w,c
  9398  0014B8  6E24               	movwf	(??_bmp085ReadUP+12)& (0+255),c
  9399  0014BA  5031               	movf	bmp085ReadUP@xlsb+1,w,c
  9400  0014BC  2021               	addwfc	??_bmp085ReadUP+9,w,c
  9401  0014BE  6E25               	movwf	(??_bmp085ReadUP+13)& (0+255),c
  9402  0014C0  5032               	movf	bmp085ReadUP@xlsb+2,w,c
  9403  0014C2  2022               	addwfc	??_bmp085ReadUP+10,w,c
  9404  0014C4  6E26               	movwf	(??_bmp085ReadUP+14)& (0+255),c
  9405  0014C6  5033               	movf	bmp085ReadUP@xlsb+3,w,c
  9406  0014C8  2023               	addwfc	??_bmp085ReadUP+11,w,c
  9407  0014CA  6E27               	movwf	(??_bmp085ReadUP+15)& (0+255),c
  9408  0014CC  0E06               	movlw	6
  9409  0014CE  D005               	goto	u3750
  9410  0014D0                     u3755:
  9411  0014D0  90D8               	bcf	status,0,c
  9412  0014D2  3227               	rrcf	??_bmp085ReadUP+15,f,c
  9413  0014D4  3226               	rrcf	??_bmp085ReadUP+14,f,c
  9414  0014D6  3225               	rrcf	??_bmp085ReadUP+13,f,c
  9415  0014D8  3224               	rrcf	??_bmp085ReadUP+12,f,c
  9416  0014DA                     u3750:
  9417  0014DA  2EE8               	decfsz	wreg,f,c
  9418  0014DC  D7F9               	goto	u3755
  9419  0014DE  C024  F034         	movff	??_bmp085ReadUP+12,bmp085ReadUP@p
  9420  0014E2  C025  F035         	movff	??_bmp085ReadUP+13,bmp085ReadUP@p+1
  9421  0014E6  C026  F036         	movff	??_bmp085ReadUP+14,bmp085ReadUP@p+2
  9422  0014EA  C027  F037         	movff	??_bmp085ReadUP+15,bmp085ReadUP@p+3
  9423                           
  9424                           ;bmp180.c: 196: return(p);
  9425  0014EE  C034  F014         	movff	bmp085ReadUP@p,?_bmp085ReadUP
  9426  0014F2  C035  F015         	movff	bmp085ReadUP@p+1,?_bmp085ReadUP+1
  9427  0014F6  C036  F016         	movff	bmp085ReadUP@p+2,?_bmp085ReadUP+2
  9428  0014FA  C037  F017         	movff	bmp085ReadUP@p+3,?_bmp085ReadUP+3
  9429  0014FE  0012               	return		;funcret
  9430  001500                     __end_of_bmp085ReadUP:
  9431                           	opt stack 0
  9432                           tosu	equ	0xFFF
  9433                           tosh	equ	0xFFE
  9434                           tosl	equ	0xFFD
  9435                           pclath	equ	0xFFA
  9436                           tblptru	equ	0xFF8
  9437                           tblptrh	equ	0xFF7
  9438                           tblptrl	equ	0xFF6
  9439                           tablat	equ	0xFF5
  9440                           prodh	equ	0xFF4
  9441                           prodl	equ	0xFF3
  9442                           intcon	equ	0xFF2
  9443                           intcon2	equ	0xFF1
  9444                           postinc0	equ	0xFEE
  9445                           wreg	equ	0xFE8
  9446                           indf1	equ	0xFE7
  9447                           plusw1	equ	0xFE3
  9448                           fsr1h	equ	0xFE2
  9449                           fsr1l	equ	0xFE1
  9450                           indf2	equ	0xFDF
  9451                           postinc2	equ	0xFDE
  9452                           postdec2	equ	0xFDD
  9453                           plusw2	equ	0xFDB
  9454                           fsr2h	equ	0xFDA
  9455                           fsr2l	equ	0xFD9
  9456                           status	equ	0xFD8
  9457                           
  9458 ;; *************** function _BMP085ReadByte *****************
  9459 ;; Defined at:
  9460 ;;		line 47 in file "bmp180.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  address         1    wreg     unsigned char 
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;  address         1   17[COMRAM] unsigned char 
  9465 ;;  data            1   18[COMRAM] unsigned char 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      unsigned char 
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;Total ram usage:        2 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    5
  9482 ;; This function calls:
  9483 ;;		_I2C_Master_Read
  9484 ;;		_I2C_Master_RepeatedStart
  9485 ;;		_I2C_Master_Start
  9486 ;;		_I2C_Master_Stop
  9487 ;;		_I2C_Master_Write
  9488 ;; This function is called by:
  9489 ;;		_bmp085ReadUP
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           	psect	text39
  9494  0024D0                     __ptext39:
  9495                           	opt stack 0
  9496  0024D0                     _BMP085ReadByte:
  9497                           	opt stack 21
  9498                           
  9499                           ;incstack = 0
  9500                           ;BMP085ReadByte@address stored from wreg
  9501  0024D0  6E12               	movwf	BMP085ReadByte@address,c
  9502                           
  9503                           ;bmp180.c: 50: uint8_t data;
  9504                           ;bmp180.c: 52: I2C_Master_Start();
  9505  0024D2  EC21  F014         	call	_I2C_Master_Start	;wreg free
  9506                           
  9507                           ;bmp180.c: 53: I2C_Master_Write(0xEE);
  9508  0024D6  0EEE               	movlw	238
  9509  0024D8  EC17  F014         	call	_I2C_Master_Write
  9510                           
  9511                           ;bmp180.c: 54: I2C_Master_Write(address);
  9512  0024DC  5012               	movf	BMP085ReadByte@address,w,c
  9513  0024DE  EC17  F014         	call	_I2C_Master_Write
  9514                           
  9515                           ;bmp180.c: 55: I2C_Master_RepeatedStart();
  9516  0024E2  EC25  F014         	call	_I2C_Master_RepeatedStart	;wreg free
  9517                           
  9518                           ;bmp180.c: 56: I2C_Master_Write(0xEE | 0x01);
  9519  0024E6  0EEF               	movlw	239
  9520  0024E8  EC17  F014         	call	_I2C_Master_Write
  9521                           
  9522                           ;bmp180.c: 57: data = I2C_Master_Read(0);
  9523  0024EC  0E00               	movlw	0
  9524  0024EE  EC52  F013         	call	_I2C_Master_Read
  9525  0024F2  6E13               	movwf	BMP085ReadByte@data,c
  9526                           
  9527                           ;bmp180.c: 58: I2C_Master_Stop();
  9528  0024F4  EC1D  F014         	call	_I2C_Master_Stop	;wreg free
  9529                           
  9530                           ;bmp180.c: 59: return(data);
  9531  0024F8  5013               	movf	BMP085ReadByte@data,w,c
  9532  0024FA  0012               	return		;funcret
  9533  0024FC                     __end_of_BMP085ReadByte:
  9534                           	opt stack 0
  9535                           tosu	equ	0xFFF
  9536                           tosh	equ	0xFFE
  9537                           tosl	equ	0xFFD
  9538                           pclath	equ	0xFFA
  9539                           tblptru	equ	0xFF8
  9540                           tblptrh	equ	0xFF7
  9541                           tblptrl	equ	0xFF6
  9542                           tablat	equ	0xFF5
  9543                           prodh	equ	0xFF4
  9544                           prodl	equ	0xFF3
  9545                           intcon	equ	0xFF2
  9546                           intcon2	equ	0xFF1
  9547                           postinc0	equ	0xFEE
  9548                           wreg	equ	0xFE8
  9549                           indf1	equ	0xFE7
  9550                           plusw1	equ	0xFE3
  9551                           fsr1h	equ	0xFE2
  9552                           fsr1l	equ	0xFE1
  9553                           indf2	equ	0xFDF
  9554                           postinc2	equ	0xFDE
  9555                           postdec2	equ	0xFDD
  9556                           plusw2	equ	0xFDB
  9557                           fsr2h	equ	0xFDA
  9558                           fsr2l	equ	0xFD9
  9559                           status	equ	0xFD8
  9560                           
  9561 ;; *************** function _BMP085ReadUT *****************
  9562 ;; Defined at:
  9563 ;;		line 157 in file "bmp180.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;		None
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;		None
  9568 ;; Return value:  Size  Location     Type
  9569 ;;                  4   26[COMRAM] long 
  9570 ;; Registers used:
  9571 ;;		wreg, status,2, status,0, cstack
  9572 ;; Tracked objects:
  9573 ;;		On entry : 0/0
  9574 ;;		On exit  : 0/0
  9575 ;;		Unchanged: 0/0
  9576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9577 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;Total ram usage:        5 bytes
  9582 ;; Hardware stack levels used:    1
  9583 ;; Hardware stack levels required when called:    6
  9584 ;; This function calls:
  9585 ;;		_BMP085WriteByte
  9586 ;;		_bmp085ReadInt
  9587 ;; This function is called by:
  9588 ;;		_BMP085Pressure
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           	psect	text40
  9593  00240A                     __ptext40:
  9594                           	opt stack 0
  9595  00240A                     _BMP085ReadUT:
  9596                           	opt stack 21
  9597                           
  9598                           ;bmp180.c: 162: BMP085WriteByte(0xF4, 0x2E);
  9599                           
  9600                           ;incstack = 0
  9601  00240A  0E2E               	movlw	46
  9602  00240C  6E11               	movwf	BMP085WriteByte@data,c
  9603  00240E  0EF4               	movlw	244
  9604  002410  EC9D  F013         	call	_BMP085WriteByte
  9605                           
  9606                           ;bmp180.c: 163: _delay((unsigned long)((5)*(40000000/4000.0)));
  9607  002414  0E41               	movlw	65
  9608  002416  6E1F               	movwf	??_BMP085ReadUT& (0+255),c
  9609  002418  0EEE               	movlw	238
  9610  00241A                     u4947:
  9611  00241A  2EE8               	decfsz	wreg,f,c
  9612  00241C  D7FE               	bra	u4947
  9613  00241E  2E1F               	decfsz	??_BMP085ReadUT& (0+255),f,c
  9614  002420  D7FC               	bra	u4947
  9615  002422  D000               	nop2	
  9616                           
  9617                           ;bmp180.c: 165: return(bmp085ReadInt(0xF6));
  9618  002424  0EF6               	movlw	246
  9619  002426  ECD1  F010         	call	_bmp085ReadInt
  9620  00242A  C012  F01B         	movff	?_bmp085ReadInt,?_BMP085ReadUT
  9621  00242E  C013  F01C         	movff	?_bmp085ReadInt+1,?_BMP085ReadUT+1
  9622  002432  0E00               	movlw	0
  9623  002434  BE1C               	btfsc	?_BMP085ReadUT+1,7,c
  9624  002436  0EFF               	movlw	-1
  9625  002438  6E1D               	movwf	?_BMP085ReadUT+2,c
  9626  00243A  6E1E               	movwf	?_BMP085ReadUT+3,c
  9627  00243C  0012               	return		;funcret
  9628  00243E                     __end_of_BMP085ReadUT:
  9629                           	opt stack 0
  9630                           tosu	equ	0xFFF
  9631                           tosh	equ	0xFFE
  9632                           tosl	equ	0xFFD
  9633                           pclath	equ	0xFFA
  9634                           tblptru	equ	0xFF8
  9635                           tblptrh	equ	0xFF7
  9636                           tblptrl	equ	0xFF6
  9637                           tablat	equ	0xFF5
  9638                           prodh	equ	0xFF4
  9639                           prodl	equ	0xFF3
  9640                           intcon	equ	0xFF2
  9641                           intcon2	equ	0xFF1
  9642                           postinc0	equ	0xFEE
  9643                           wreg	equ	0xFE8
  9644                           indf1	equ	0xFE7
  9645                           plusw1	equ	0xFE3
  9646                           fsr1h	equ	0xFE2
  9647                           fsr1l	equ	0xFE1
  9648                           indf2	equ	0xFDF
  9649                           postinc2	equ	0xFDE
  9650                           postdec2	equ	0xFDD
  9651                           plusw2	equ	0xFDB
  9652                           fsr2h	equ	0xFDA
  9653                           fsr2l	equ	0xFD9
  9654                           status	equ	0xFD8
  9655                           
  9656 ;; *************** function _bmp085ReadInt *****************
  9657 ;; Defined at:
  9658 ;;		line 67 in file "bmp180.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;  address         1    wreg     unsigned char 
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  address         1   21[COMRAM] unsigned char 
  9663 ;;  lsb             2   24[COMRAM] int 
  9664 ;;  msb             2   22[COMRAM] int 
  9665 ;;  temp            2    0        int 
  9666 ;; Return value:  Size  Location     Type
  9667 ;;                  2   17[COMRAM] int 
  9668 ;; Registers used:
  9669 ;;		wreg, status,2, status,0, cstack
  9670 ;; Tracked objects:
  9671 ;;		On entry : 0/0
  9672 ;;		On exit  : 0/0
  9673 ;;		Unchanged: 0/0
  9674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;Total ram usage:        9 bytes
  9680 ;; Hardware stack levels used:    1
  9681 ;; Hardware stack levels required when called:    5
  9682 ;; This function calls:
  9683 ;;		_I2C_Master_Read
  9684 ;;		_I2C_Master_RepeatedStart
  9685 ;;		_I2C_Master_Start
  9686 ;;		_I2C_Master_Stop
  9687 ;;		_I2C_Master_Write
  9688 ;; This function is called by:
  9689 ;;		_bmp085Calibration
  9690 ;;		_BMP085ReadUT
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           	psect	text41
  9695  0021A2                     __ptext41:
  9696                           	opt stack 0
  9697  0021A2                     _bmp085ReadInt:
  9698                           	opt stack 23
  9699                           
  9700                           ;incstack = 0
  9701                           ;bmp085ReadInt@address stored from wreg
  9702  0021A2  6E16               	movwf	bmp085ReadInt@address,c
  9703                           
  9704                           ;bmp180.c: 70: int16_t msb, lsb;
  9705                           ;bmp180.c: 71: int16_t temp;
  9706                           ;bmp180.c: 73: I2C_Master_Start();
  9707  0021A4  EC21  F014         	call	_I2C_Master_Start	;wreg free
  9708                           
  9709                           ;bmp180.c: 74: I2C_Master_Write(0xEE);
  9710  0021A8  0EEE               	movlw	238
  9711  0021AA  EC17  F014         	call	_I2C_Master_Write
  9712                           
  9713                           ;bmp180.c: 75: I2C_Master_Write(address);
  9714  0021AE  5016               	movf	bmp085ReadInt@address,w,c
  9715  0021B0  EC17  F014         	call	_I2C_Master_Write
  9716                           
  9717                           ;bmp180.c: 76: I2C_Master_RepeatedStart();
  9718  0021B4  EC25  F014         	call	_I2C_Master_RepeatedStart	;wreg free
  9719                           
  9720                           ;bmp180.c: 77: I2C_Master_Write(0xEE | 0x01);
  9721  0021B8  0EEF               	movlw	239
  9722  0021BA  EC17  F014         	call	_I2C_Master_Write
  9723                           
  9724                           ;bmp180.c: 78: msb = (int16_t)I2C_Master_Read(1);
  9725  0021BE  0E01               	movlw	1
  9726  0021C0  EC52  F013         	call	_I2C_Master_Read
  9727  0021C4  6E17               	movwf	bmp085ReadInt@msb,c
  9728  0021C6  6A18               	clrf	bmp085ReadInt@msb+1,c
  9729                           
  9730                           ;bmp180.c: 79: lsb = I2C_Master_Read(0);
  9731  0021C8  0E00               	movlw	0
  9732  0021CA  EC52  F013         	call	_I2C_Master_Read
  9733  0021CE  6E19               	movwf	bmp085ReadInt@lsb,c
  9734  0021D0  6A1A               	clrf	bmp085ReadInt@lsb+1,c
  9735                           
  9736                           ;bmp180.c: 80: I2C_Master_Stop();
  9737  0021D2  EC1D  F014         	call	_I2C_Master_Stop	;wreg free
  9738                           
  9739                           ;bmp180.c: 83: return (msb << 8) | lsb;
  9740  0021D6  5017               	movf	bmp085ReadInt@msb,w,c
  9741  0021D8  6E15               	movwf	(??_bmp085ReadInt+1)& (0+255),c
  9742  0021DA  6A14               	clrf	??_bmp085ReadInt& (0+255),c
  9743  0021DC  5019               	movf	bmp085ReadInt@lsb,w,c
  9744  0021DE  1014               	iorwf	??_bmp085ReadInt,w,c
  9745  0021E0  6E12               	movwf	?_bmp085ReadInt,c
  9746  0021E2  501A               	movf	bmp085ReadInt@lsb+1,w,c
  9747  0021E4  1015               	iorwf	??_bmp085ReadInt+1,w,c
  9748  0021E6  6E13               	movwf	?_bmp085ReadInt+1,c
  9749  0021E8  0012               	return		;funcret
  9750  0021EA                     __end_of_bmp085ReadInt:
  9751                           	opt stack 0
  9752                           tosu	equ	0xFFF
  9753                           tosh	equ	0xFFE
  9754                           tosl	equ	0xFFD
  9755                           pclath	equ	0xFFA
  9756                           tblptru	equ	0xFF8
  9757                           tblptrh	equ	0xFF7
  9758                           tblptrl	equ	0xFF6
  9759                           tablat	equ	0xFF5
  9760                           prodh	equ	0xFF4
  9761                           prodl	equ	0xFF3
  9762                           intcon	equ	0xFF2
  9763                           intcon2	equ	0xFF1
  9764                           postinc0	equ	0xFEE
  9765                           wreg	equ	0xFE8
  9766                           indf1	equ	0xFE7
  9767                           plusw1	equ	0xFE3
  9768                           fsr1h	equ	0xFE2
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           postdec2	equ	0xFDD
  9773                           plusw2	equ	0xFDB
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778 ;; *************** function _BMP085WriteByte *****************
  9779 ;; Defined at:
  9780 ;;		line 92 in file "bmp180.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;  address         1    wreg     unsigned char 
  9783 ;;  data            1   16[COMRAM] char 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  address         1   17[COMRAM] unsigned char 
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      void 
  9788 ;; Registers used:
  9789 ;;		wreg, status,2, status,0, cstack
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9795 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;Total ram usage:        2 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    5
  9802 ;; This function calls:
  9803 ;;		_I2C_Master_Start
  9804 ;;		_I2C_Master_Stop
  9805 ;;		_I2C_Master_Write
  9806 ;; This function is called by:
  9807 ;;		_BMP085ReadUT
  9808 ;;		_bmp085ReadUP
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812                           	psect	text42
  9813  00273A                     __ptext42:
  9814                           	opt stack 0
  9815  00273A                     _BMP085WriteByte:
  9816                           	opt stack 21
  9817                           
  9818                           ;incstack = 0
  9819                           ;BMP085WriteByte@address stored from wreg
  9820  00273A  6E12               	movwf	BMP085WriteByte@address,c
  9821                           
  9822                           ;bmp180.c: 95: I2C_Master_Start();
  9823  00273C  EC21  F014         	call	_I2C_Master_Start	;wreg free
  9824                           
  9825                           ;bmp180.c: 96: I2C_Master_Write(0xEE);
  9826  002740  0EEE               	movlw	238
  9827  002742  EC17  F014         	call	_I2C_Master_Write
  9828                           
  9829                           ;bmp180.c: 97: I2C_Master_Write(address);
  9830  002746  5012               	movf	BMP085WriteByte@address,w,c
  9831  002748  EC17  F014         	call	_I2C_Master_Write
  9832                           
  9833                           ;bmp180.c: 98: I2C_Master_Write(data);
  9834  00274C  5011               	movf	BMP085WriteByte@data,w,c
  9835  00274E  EC17  F014         	call	_I2C_Master_Write
  9836                           
  9837                           ;bmp180.c: 99: I2C_Master_Stop();
  9838  002752  EF1D  F014         	goto	_I2C_Master_Stop	;wreg free
  9839  002756                     __end_of_BMP085WriteByte:
  9840                           	opt stack 0
  9841                           tosu	equ	0xFFF
  9842                           tosh	equ	0xFFE
  9843                           tosl	equ	0xFFD
  9844                           pclath	equ	0xFFA
  9845                           tblptru	equ	0xFF8
  9846                           tblptrh	equ	0xFF7
  9847                           tblptrl	equ	0xFF6
  9848                           tablat	equ	0xFF5
  9849                           prodh	equ	0xFF4
  9850                           prodl	equ	0xFF3
  9851                           intcon	equ	0xFF2
  9852                           intcon2	equ	0xFF1
  9853                           postinc0	equ	0xFEE
  9854                           wreg	equ	0xFE8
  9855                           indf1	equ	0xFE7
  9856                           plusw1	equ	0xFE3
  9857                           fsr1h	equ	0xFE2
  9858                           fsr1l	equ	0xFE1
  9859                           indf2	equ	0xFDF
  9860                           postinc2	equ	0xFDE
  9861                           postdec2	equ	0xFDD
  9862                           plusw2	equ	0xFDB
  9863                           fsr2h	equ	0xFDA
  9864                           fsr2l	equ	0xFD9
  9865                           status	equ	0xFD8
  9866                           
  9867 ;; *************** function _BMP085GetTemp *****************
  9868 ;; Defined at:
  9869 ;;		line 202 in file "bmp180.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;  _tu             4   61[COMRAM] long 
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;  Tt              4   73[COMRAM] long 
  9874 ;; Return value:  Size  Location     Type
  9875 ;;                  4   61[COMRAM] long 
  9876 ;; Registers used:
  9877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9878 ;; Tracked objects:
  9879 ;;		On entry : 0/0
  9880 ;;		On exit  : 0/0
  9881 ;;		Unchanged: 0/0
  9882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9883 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;Total ram usage:       16 bytes
  9888 ;; Hardware stack levels used:    1
  9889 ;; Hardware stack levels required when called:    6
  9890 ;; This function calls:
  9891 ;;		___aldiv
  9892 ;;		___lmul
  9893 ;;		_printf
  9894 ;; This function is called by:
  9895 ;;		_BMP085Pressure
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text43
  9900  00102E                     __ptext43:
  9901                           	opt stack 0
  9902  00102E                     _BMP085GetTemp:
  9903                           	opt stack 21
  9904                           
  9905                           ;bmp180.c: 205: int32_t Tt;
  9906                           ;bmp180.c: 207: X1 = (((int32_t)_tu - (int32_t)ac6) * (int32_t)ac5) / 32768;
  9907                           
  9908                           ;incstack = 0
  9909  00102E  0100               	movlb	0	; () banked
  9910  001030  51A3               	movf	_ac6& (0+255),w,b
  9911  001032  6E42               	movwf	??_BMP085GetTemp& (0+255),c
  9912  001034  51A4               	movf	(_ac6+1)& (0+255),w,b
  9913  001036  6E43               	movwf	(??_BMP085GetTemp+1)& (0+255),c
  9914  001038  6A44               	clrf	(??_BMP085GetTemp+2)& (0+255),c
  9915  00103A  6A45               	clrf	(??_BMP085GetTemp+3)& (0+255),c
  9916  00103C  5042               	movf	??_BMP085GetTemp,w,c
  9917  00103E  5C3E               	subwf	BMP085GetTemp@_tu,w,c
  9918  001040  6E0F               	movwf	___lmul@multiplier,c
  9919  001042  5043               	movf	??_BMP085GetTemp+1,w,c
  9920  001044  583F               	subwfb	BMP085GetTemp@_tu+1,w,c
  9921  001046  6E10               	movwf	___lmul@multiplier+1,c
  9922  001048  5044               	movf	??_BMP085GetTemp+2,w,c
  9923  00104A  5840               	subwfb	BMP085GetTemp@_tu+2,w,c
  9924  00104C  6E11               	movwf	___lmul@multiplier+2,c
  9925  00104E  5045               	movf	??_BMP085GetTemp+3,w,c
  9926  001050  5841               	subwfb	BMP085GetTemp@_tu+3,w,c
  9927  001052  6E12               	movwf	___lmul@multiplier+3,c
  9928  001054  C0A5  F013         	movff	_ac5,___lmul@multiplicand
  9929  001058  C0A6  F014         	movff	_ac5+1,___lmul@multiplicand+1
  9930  00105C  6A15               	clrf	___lmul@multiplicand+2,c
  9931  00105E  6A16               	clrf	___lmul@multiplicand+3,c
  9932  001060  EC86  F010         	call	___lmul	;wreg free
  9933  001064  EC0B  F002         	call	PL6	;call to abstracted procedure
  9934  001068  6A1F               	clrf	___aldiv@divisor,c
  9935  00106A  0E80               	movlw	128
  9936  00106C  ECE5  F002         	call	PL102	;call to abstracted procedure
  9937  001070  ECDF  F00C         	call	___aldiv	;wreg free
  9938                           
  9939                           ;bmp180.c: 209: printf("X1: %d\n\r", X1);
  9940  001074  EC29  F002         	call	PL18	;call to abstracted procedure
  9941  001078  EC1C  F013         	call	_printf	;wreg free
  9942                           
  9943                           ;bmp180.c: 211: X2 = ((int32_t)mc << 11) / (X1 + md);
  9944  00107C  C09B  F042         	movff	_mc,??_BMP085GetTemp
  9945  001080  C09C  F043         	movff	_mc+1,??_BMP085GetTemp+1
  9946  001084  0E00               	movlw	0
  9947  001086  BE43               	btfsc	(??_BMP085GetTemp+1)& (0+255),7,c
  9948  001088  0EFF               	movlw	255
  9949  00108A  6E44               	movwf	(??_BMP085GetTemp+2)& (0+255),c
  9950  00108C  6E45               	movwf	(??_BMP085GetTemp+3)& (0+255),c
  9951  00108E  0E0B               	movlw	11
  9952  001090                     u3765:
  9953  001090  90D8               	bcf	status,0,c
  9954  001092  3642               	rlcf	??_BMP085GetTemp,f,c
  9955  001094  3643               	rlcf	??_BMP085GetTemp+1,f,c
  9956  001096  3644               	rlcf	??_BMP085GetTemp+2,f,c
  9957  001098  3645               	rlcf	??_BMP085GetTemp+3,f,c
  9958  00109A  2EE8               	decfsz	wreg,f,c
  9959  00109C  D7F9               	goto	u3765
  9960  00109E  C042  F01B         	movff	??_BMP085GetTemp,___aldiv@dividend
  9961  0010A2  C043  F01C         	movff	??_BMP085GetTemp+1,___aldiv@dividend+1
  9962  0010A6  C044  F01D         	movff	??_BMP085GetTemp+2,___aldiv@dividend+2
  9963  0010AA  C045  F01E         	movff	??_BMP085GetTemp+3,___aldiv@dividend+3
  9964  0010AE  C099  F046         	movff	_md,??_BMP085GetTemp+4
  9965  0010B2  C09A  F047         	movff	_md+1,??_BMP085GetTemp+5
  9966  0010B6  0E00               	movlw	0
  9967  0010B8  BE47               	btfsc	(??_BMP085GetTemp+5)& (0+255),7,c
  9968  0010BA  0EFF               	movlw	255
  9969  0010BC  6E48               	movwf	(??_BMP085GetTemp+6)& (0+255),c
  9970  0010BE  6E49               	movwf	(??_BMP085GetTemp+7)& (0+255),c
  9971  0010C0  5062               	movf	_X1,w,c
  9972  0010C2  2446               	addwf	??_BMP085GetTemp+4,w,c
  9973  0010C4  6E1F               	movwf	___aldiv@divisor,c
  9974  0010C6  5063               	movf	_X1+1,w,c
  9975  0010C8  2047               	addwfc	??_BMP085GetTemp+5,w,c
  9976  0010CA  6E20               	movwf	___aldiv@divisor+1,c
  9977  0010CC  5064               	movf	_X1+2,w,c
  9978  0010CE  2048               	addwfc	??_BMP085GetTemp+6,w,c
  9979  0010D0  6E21               	movwf	___aldiv@divisor+2,c
  9980  0010D2  5065               	movf	_X1+3,w,c
  9981  0010D4  2049               	addwfc	??_BMP085GetTemp+7,w,c
  9982  0010D6  6E22               	movwf	___aldiv@divisor+3,c
  9983  0010D8  ECDF  F00C         	call	___aldiv	;wreg free
  9984                           
  9985                           ;bmp180.c: 213: printf("X2: %d\n\r", X2);
  9986  0010DC  EC14  F002         	call	PL16	;call to abstracted procedure
  9987  0010E0  EC1C  F013         	call	_printf	;wreg free
  9988                           
  9989                           ;bmp180.c: 215: B5 = X1 + X2;
  9990  0010E4  505E               	movf	_X2,w,c
  9991  0010E6  2462               	addwf	_X1,w,c
  9992  0010E8  0100               	movlb	0	; () banked
  9993  0010EA  6F8D               	movwf	_B5& (0+255),b
  9994  0010EC  505F               	movf	_X2+1,w,c
  9995  0010EE  2063               	addwfc	_X1+1,w,c
  9996  0010F0  6F8E               	movwf	(_B5+1)& (0+255),b
  9997  0010F2  5060               	movf	_X2+2,w,c
  9998  0010F4  2064               	addwfc	_X1+2,w,c
  9999  0010F6  6F8F               	movwf	(_B5+2)& (0+255),b
 10000  0010F8  5061               	movf	_X2+3,w,c
 10001  0010FA  2065               	addwfc	_X1+3,w,c
 10002  0010FC  6F90               	movwf	(_B5+3)& (0+255),b
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;bmp180.c: 217: printf("B5: %d\n\r", B5);
 10006  0010FE  0EC9               	movlw	low STR_16
 10007  001100  6E33               	movwf	printf@f,c
 10008  001102  0EBF               	movlw	high STR_16
 10009  001104  6E34               	movwf	printf@f+1,c
 10010  001106  C08D  F035         	movff	_B5,?_printf+2
 10011  00110A  C08E  F036         	movff	_B5+1,?_printf+3
 10012  00110E  C08F  F037         	movff	_B5+2,?_printf+4
 10013  001112  C090  F038         	movff	_B5+3,?_printf+5
 10014  001116  EC1C  F013         	call	_printf	;wreg free
 10015                           
 10016                           ;bmp180.c: 221: Tt = (B5+8) / 16;
 10017  00111A  0E08               	movlw	8
 10018  00111C  0100               	movlb	0	; () banked
 10019  00111E  258D               	addwf	_B5& (0+255),w,b
 10020  001120  6E1B               	movwf	___aldiv@dividend,c
 10021  001122  0E00               	movlw	0
 10022  001124  218E               	addwfc	(_B5+1)& (0+255),w,b
 10023  001126  6E1C               	movwf	___aldiv@dividend+1,c
 10024  001128  0E00               	movlw	0
 10025  00112A  218F               	addwfc	(_B5+2)& (0+255),w,b
 10026  00112C  6E1D               	movwf	___aldiv@dividend+2,c
 10027  00112E  0E00               	movlw	0
 10028  001130  2190               	addwfc	(_B5+3)& (0+255),w,b
 10029  001132  6E1E               	movwf	___aldiv@dividend+3,c
 10030  001134  0E10               	movlw	16
 10031  001136  ECDA  F002         	call	PL90	;call to abstracted procedure
 10032  00113A  ECDF  F00C         	call	___aldiv	;wreg free
 10033  00113E  C01B  F04A         	movff	?___aldiv,BMP085GetTemp@Tt
 10034  001142  C01C  F04B         	movff	?___aldiv+1,BMP085GetTemp@Tt+1
 10035  001146  C01D  F04C         	movff	?___aldiv+2,BMP085GetTemp@Tt+2
 10036  00114A  C01E  F04D         	movff	?___aldiv+3,BMP085GetTemp@Tt+3
 10037                           
 10038                           ;bmp180.c: 223: printf("TemperBMP: %d\n\r", Tt);
 10039  00114E  0E14               	movlw	low STR_17
 10040  001150  6E33               	movwf	printf@f,c
 10041  001152  0EBF               	movlw	high STR_17
 10042  001154  6E34               	movwf	printf@f+1,c
 10043  001156  C04A  F035         	movff	BMP085GetTemp@Tt,?_printf+2
 10044  00115A  C04B  F036         	movff	BMP085GetTemp@Tt+1,?_printf+3
 10045  00115E  C04C  F037         	movff	BMP085GetTemp@Tt+2,?_printf+4
 10046  001162  C04D  F038         	movff	BMP085GetTemp@Tt+3,?_printf+5
 10047  001166  EC1C  F013         	call	_printf	;wreg free
 10048                           
 10049                           ;bmp180.c: 226: return(Tt);
 10050  00116A  C04A  F03E         	movff	BMP085GetTemp@Tt,?_BMP085GetTemp
 10051  00116E  C04B  F03F         	movff	BMP085GetTemp@Tt+1,?_BMP085GetTemp+1
 10052  001172  C04C  F040         	movff	BMP085GetTemp@Tt+2,?_BMP085GetTemp+2
 10053  001176  C04D  F041         	movff	BMP085GetTemp@Tt+3,?_BMP085GetTemp+3
 10054  00117A  0012               	return		;funcret
 10055  00117C                     __end_of_BMP085GetTemp:
 10056                           	opt stack 0
 10057                           tosu	equ	0xFFF
 10058                           tosh	equ	0xFFE
 10059                           tosl	equ	0xFFD
 10060                           pclath	equ	0xFFA
 10061                           tblptru	equ	0xFF8
 10062                           tblptrh	equ	0xFF7
 10063                           tblptrl	equ	0xFF6
 10064                           tablat	equ	0xFF5
 10065                           prodh	equ	0xFF4
 10066                           prodl	equ	0xFF3
 10067                           intcon	equ	0xFF2
 10068                           intcon2	equ	0xFF1
 10069                           postinc0	equ	0xFEE
 10070                           wreg	equ	0xFE8
 10071                           indf1	equ	0xFE7
 10072                           plusw1	equ	0xFE3
 10073                           fsr1h	equ	0xFE2
 10074                           fsr1l	equ	0xFE1
 10075                           indf2	equ	0xFDF
 10076                           postinc2	equ	0xFDE
 10077                           postdec2	equ	0xFDD
 10078                           plusw2	equ	0xFDB
 10079                           fsr2h	equ	0xFDA
 10080                           fsr2l	equ	0xFD9
 10081                           status	equ	0xFD8
 10082                           
 10083 ;; *************** function _BMP085GetPressure *****************
 10084 ;; Defined at:
 10085 ;;		line 232 in file "bmp180.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;  _pu             4   61[COMRAM] long 
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  Pp              4    4[BANK0 ] long 
 10090 ;; Return value:  Size  Location     Type
 10091 ;;                  2   61[COMRAM] unsigned int 
 10092 ;; Registers used:
 10093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10099 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10100 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10101 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10102 ;;      Totals:        12       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;Total ram usage:       20 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; Hardware stack levels required when called:    6
 10106 ;; This function calls:
 10107 ;;		___aldiv
 10108 ;;		___lldiv
 10109 ;;		___lmul
 10110 ;;		_printf
 10111 ;; This function is called by:
 10112 ;;		_BMP085Pressure
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           	psect	text44
 10117  000012                     __ptext44:
 10118                           	opt stack 0
 10119  000012                     _BMP085GetPressure:
 10120                           	opt stack 21
 10121                           
 10122                           ;bmp180.c: 235: int32_t Pp;
 10123                           ;bmp180.c: 237: B6 = B5 - 4000;
 10124                           
 10125                           ;incstack = 0
 10126  000012  0E60               	movlw	96
 10127  000014  0100               	movlb	0	; () banked
 10128  000016  258D               	addwf	_B5& (0+255),w,b
 10129  000018  6E56               	movwf	_B6,c
 10130  00001A  0EF0               	movlw	240
 10131  00001C  218E               	addwfc	(_B5+1)& (0+255),w,b
 10132  00001E  6E57               	movwf	_B6+1,c
 10133  000020  0EFF               	movlw	255
 10134  000022  218F               	addwfc	(_B5+2)& (0+255),w,b
 10135  000024  6E58               	movwf	_B6+2,c
 10136  000026  0EFF               	movlw	255
 10137  000028  2190               	addwfc	(_B5+3)& (0+255),w,b
 10138  00002A  6E59               	movwf	_B6+3,c
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;bmp180.c: 239: printf("B6: %d\n\r", B6);
 10142  00002C  0ED2               	movlw	low STR_18
 10143  00002E  6E33               	movwf	printf@f,c
 10144  000030  0EBF               	movlw	high STR_18
 10145  000032  6E34               	movwf	printf@f+1,c
 10146  000034  C056  F035         	movff	_B6,?_printf+2
 10147  000038  C057  F036         	movff	_B6+1,?_printf+3
 10148  00003C  C058  F037         	movff	_B6+2,?_printf+4
 10149  000040  C059  F038         	movff	_B6+3,?_printf+5
 10150  000044  EC1C  F013         	call	_printf	;wreg free
 10151                           
 10152                           ;bmp180.c: 242: X1 = (b2*(B6*B6/4096))/2048;
 10153  000048  DA23               	call	PL36	;call to abstracted procedure
 10154  00004A  EC86  F010         	call	___lmul	;wreg free
 10155  00004E  D9E3               	call	PL6	;call to abstracted procedure
 10156  000050  ECDF  F00C         	call	___aldiv	;wreg free
 10157  000054  DAA0               	call	PL80	;call to abstracted procedure
 10158                           
 10159                           ;bmp180.c: 242: X1 = (b2*(B6*B6/4096))/2048;
 10160  000056  C09F  F00F         	movff	_b2,___lmul@multiplier
 10161  00005A  C0A0  F010         	movff	_b2+1,___lmul@multiplier+1
 10162  00005E  DA41               	call	PL54	;call to abstracted procedure
 10163  000060  DA88               	call	PL74	;call to abstracted procedure
 10164  000062  EC86  F010         	call	___lmul	;wreg free
 10165  000066  D9D7               	call	PL6	;call to abstracted procedure
 10166  000068  DAAA               	call	PL98	;call to abstracted procedure
 10167  00006A  ECDF  F00C         	call	___aldiv	;wreg free
 10168                           
 10169                           ;bmp180.c: 244: printf("X1: %d\n\r", X1);
 10170  00006E  D9F1               	call	PL18	;call to abstracted procedure
 10171  000070  EC1C  F013         	call	_printf	;wreg free
 10172                           
 10173                           ;bmp180.c: 247: X2 = ac2 * B6 / 2048;
 10174  000074  C0AB  F00F         	movff	_ac2,___lmul@multiplier
 10175  000078  C0AC  F010         	movff	_ac2+1,___lmul@multiplier+1
 10176  00007C  DA32               	call	PL54	;call to abstracted procedure
 10177  00007E  DA1E               	call	PL40	;call to abstracted procedure
 10178  000080  EC86  F010         	call	___lmul	;wreg free
 10179  000084  D9C8               	call	PL6	;call to abstracted procedure
 10180  000086  DA9B               	call	PL98	;call to abstracted procedure
 10181  000088  ECDF  F00C         	call	___aldiv	;wreg free
 10182                           
 10183                           ;bmp180.c: 249: printf("X2: %d\n\r", X2);
 10184  00008C  D9CD               	call	PL16	;call to abstracted procedure
 10185  00008E  EC1C  F013         	call	_printf	;wreg free
 10186                           
 10187                           ;bmp180.c: 251: X3 = X1 + X2;
 10188  000092  505E               	movf	_X2,w,c
 10189  000094  2462               	addwf	_X1,w,c
 10190  000096  6E5A               	movwf	_X3,c
 10191  000098  505F               	movf	_X2+1,w,c
 10192  00009A  2063               	addwfc	_X1+1,w,c
 10193  00009C  6E5B               	movwf	_X3+1,c
 10194  00009E  5060               	movf	_X2+2,w,c
 10195  0000A0  2064               	addwfc	_X1+2,w,c
 10196  0000A2  6E5C               	movwf	_X3+2,c
 10197  0000A4  5061               	movf	_X2+3,w,c
 10198  0000A6  2065               	addwfc	_X1+3,w,c
 10199  0000A8  6E5D               	movwf	_X3+3,c
 10200                           
 10201                           ;bmp180.c: 253: printf("X3: %d\n\r", X3);
 10202  0000AA  DA44               	call	PL64	;call to abstracted procedure
 10203  0000AC  EC1C  F013         	call	_printf	;wreg free
 10204  0000B0  C066  F042         	movff	_ac1,??_BMP085GetPressure
 10205  0000B4  C067  F043         	movff	_ac1+1,??_BMP085GetPressure+1
 10206  0000B8  0E00               	movlw	0
 10207  0000BA  BE43               	btfsc	(??_BMP085GetPressure+1)& (0+255),7,c
 10208  0000BC  0EFF               	movlw	255
 10209  0000BE  6E44               	movwf	(??_BMP085GetPressure+2)& (0+255),c
 10210  0000C0  6E45               	movwf	(??_BMP085GetPressure+3)& (0+255),c
 10211  0000C2  0E02               	movlw	2
 10212  0000C4                     u3775:
 10213  0000C4  90D8               	bcf	status,0,c
 10214  0000C6  3642               	rlcf	??_BMP085GetPressure,f,c
 10215  0000C8  3643               	rlcf	??_BMP085GetPressure+1,f,c
 10216  0000CA  3644               	rlcf	??_BMP085GetPressure+2,f,c
 10217  0000CC  3645               	rlcf	??_BMP085GetPressure+3,f,c
 10218  0000CE  2EE8               	decfsz	wreg,f,c
 10219  0000D0  D7F9               	goto	u3775
 10220  0000D2  505A               	movf	_X3,w,c
 10221  0000D4  2442               	addwf	??_BMP085GetPressure,w,c
 10222  0000D6  6E46               	movwf	(??_BMP085GetPressure+4)& (0+255),c
 10223  0000D8  505B               	movf	_X3+1,w,c
 10224  0000DA  2043               	addwfc	??_BMP085GetPressure+1,w,c
 10225  0000DC  6E47               	movwf	(??_BMP085GetPressure+5)& (0+255),c
 10226  0000DE  505C               	movf	_X3+2,w,c
 10227  0000E0  2044               	addwfc	??_BMP085GetPressure+2,w,c
 10228  0000E2  6E48               	movwf	(??_BMP085GetPressure+6)& (0+255),c
 10229  0000E4  505D               	movf	_X3+3,w,c
 10230  0000E6  2045               	addwfc	??_BMP085GetPressure+3,w,c
 10231  0000E8  6E49               	movwf	(??_BMP085GetPressure+7)& (0+255),c
 10232  0000EA  0E03               	movlw	3
 10233  0000EC                     u3785:
 10234  0000EC  90D8               	bcf	status,0,c
 10235  0000EE  3646               	rlcf	??_BMP085GetPressure+4,f,c
 10236  0000F0  3647               	rlcf	??_BMP085GetPressure+5,f,c
 10237  0000F2  3648               	rlcf	??_BMP085GetPressure+6,f,c
 10238  0000F4  3649               	rlcf	??_BMP085GetPressure+7,f,c
 10239  0000F6  2EE8               	decfsz	wreg,f,c
 10240  0000F8  D7F9               	goto	u3785
 10241  0000FA  0E02               	movlw	2
 10242  0000FC  2446               	addwf	??_BMP085GetPressure+4,w,c
 10243  0000FE  6E1B               	movwf	___aldiv@dividend,c
 10244  000100  0E00               	movlw	0
 10245  000102  2047               	addwfc	??_BMP085GetPressure+5,w,c
 10246  000104  6E1C               	movwf	___aldiv@dividend+1,c
 10247  000106  0E00               	movlw	0
 10248  000108  2048               	addwfc	??_BMP085GetPressure+6,w,c
 10249  00010A  6E1D               	movwf	___aldiv@dividend+2,c
 10250  00010C  0E00               	movlw	0
 10251  00010E  2049               	addwfc	??_BMP085GetPressure+7,w,c
 10252  000110  6E1E               	movwf	___aldiv@dividend+3,c
 10253  000112  0E04               	movlw	4
 10254  000114  DA4F               	call	PL90	;call to abstracted procedure
 10255  000116  ECDF  F00C         	call	___aldiv	;wreg free
 10256  00011A  C01B  F095         	movff	?___aldiv,_B3
 10257  00011E  C01C  F096         	movff	?___aldiv+1,_B3+1
 10258  000122  C01D  F097         	movff	?___aldiv+2,_B3+2
 10259  000126  C01E  F098         	movff	?___aldiv+3,_B3+3
 10260                           
 10261                           ;bmp180.c: 258: printf("B3: %li\n\r", B3);
 10262  00012A  0E56               	movlw	low STR_22
 10263  00012C  6E33               	movwf	printf@f,c
 10264  00012E  0EBF               	movlw	high STR_22
 10265  000130  6E34               	movwf	printf@f+1,c
 10266  000132  C095  F035         	movff	_B3,?_printf+2
 10267  000136  C096  F036         	movff	_B3+1,?_printf+3
 10268  00013A  C097  F037         	movff	_B3+2,?_printf+4
 10269  00013E  C098  F038         	movff	_B3+3,?_printf+5
 10270  000142  EC1C  F013         	call	_printf	;wreg free
 10271                           
 10272                           ;bmp180.c: 261: X1 = ac3 * B6 / 8192;
 10273  000146  C0A9  F00F         	movff	_ac3,___lmul@multiplier
 10274  00014A  C0AA  F010         	movff	_ac3+1,___lmul@multiplier+1
 10275  00014E  D9C9               	call	PL54	;call to abstracted procedure
 10276  000150  D9B5               	call	PL40	;call to abstracted procedure
 10277  000152  EC86  F010         	call	___lmul	;wreg free
 10278  000156  D95F               	call	PL6	;call to abstracted procedure
 10279  000158  6A1F               	clrf	___aldiv@divisor,c
 10280  00015A  0E20               	movlw	32
 10281  00015C  DA36               	call	PL102	;call to abstracted procedure
 10282  00015E  ECDF  F00C         	call	___aldiv	;wreg free
 10283                           
 10284                           ;bmp180.c: 263: printf("X1: %d\n\r", X1);
 10285  000162  D977               	call	PL18	;call to abstracted procedure
 10286  000164  EC1C  F013         	call	_printf	;wreg free
 10287                           
 10288                           ;bmp180.c: 267: X2 = (b1*(B6*B6 / 4096)) / 65536;
 10289  000168  D993               	call	PL36	;call to abstracted procedure
 10290  00016A  EC86  F010         	call	___lmul	;wreg free
 10291  00016E  D953               	call	PL6	;call to abstracted procedure
 10292  000170  ECDF  F00C         	call	___aldiv	;wreg free
 10293  000174  DA10               	call	PL80	;call to abstracted procedure
 10294                           
 10295                           ;bmp180.c: 267: X2 = (b1*(B6*B6 / 4096)) / 65536;
 10296  000176  C0A1  F00F         	movff	_b1,___lmul@multiplier
 10297  00017A  C0A2  F010         	movff	_b1+1,___lmul@multiplier+1
 10298  00017E  D9B1               	call	PL54	;call to abstracted procedure
 10299  000180  D9F8               	call	PL74	;call to abstracted procedure
 10300  000182  EC86  F010         	call	___lmul	;wreg free
 10301  000186  D947               	call	PL6	;call to abstracted procedure
 10302  000188  DA0F               	call	PL82	;call to abstracted procedure
 10303  00018A  ECDF  F00C         	call	___aldiv	;wreg free
 10304                           
 10305                           ;bmp180.c: 269: printf("X2: %d\n\r", X2);
 10306  00018E  D94C               	call	PL16	;call to abstracted procedure
 10307  000190  EC1C  F013         	call	_printf	;wreg free
 10308                           
 10309                           ;bmp180.c: 272: X3 = ((X1 + X2)+2) / 4;
 10310  000194  D9C2               	call	PL62	;call to abstracted procedure
 10311  000196  0E02               	movlw	2
 10312  000198  2442               	addwf	??_BMP085GetPressure,w,c
 10313  00019A  6E1B               	movwf	___aldiv@dividend,c
 10314  00019C  0E00               	movlw	0
 10315  00019E  D9D7               	call	PL70	;call to abstracted procedure
 10316  0001A0  0E04               	movlw	4
 10317  0001A2  DA08               	call	PL90	;call to abstracted procedure
 10318  0001A4  ECDF  F00C         	call	___aldiv	;wreg free
 10319  0001A8  C01B  F05A         	movff	?___aldiv,_X3
 10320  0001AC  C01C  F05B         	movff	?___aldiv+1,_X3+1
 10321  0001B0  C01D  F05C         	movff	?___aldiv+2,_X3+2
 10322  0001B4  C01E  F05D         	movff	?___aldiv+3,_X3+3
 10323                           
 10324                           ;bmp180.c: 274: printf("X3: %d\n\r", X3);
 10325  0001B8  D9BD               	call	PL64	;call to abstracted procedure
 10326  0001BA  EC1C  F013         	call	_printf	;wreg free
 10327                           
 10328                           ;bmp180.c: 277: B4 = (ac4 * (uint32_t)(X3 + 32768)) / 32768;
 10329  0001BE  0E00               	movlw	0
 10330  0001C0  245A               	addwf	_X3,w,c
 10331  0001C2  6E0F               	movwf	___lmul@multiplier,c
 10332  0001C4  0E80               	movlw	128
 10333  0001C6  205B               	addwfc	_X3+1,w,c
 10334  0001C8  6E10               	movwf	___lmul@multiplier+1,c
 10335  0001CA  0E00               	movlw	0
 10336  0001CC  205C               	addwfc	_X3+2,w,c
 10337  0001CE  6E11               	movwf	___lmul@multiplier+2,c
 10338  0001D0  0E00               	movlw	0
 10339  0001D2  205D               	addwfc	_X3+3,w,c
 10340  0001D4  6E12               	movwf	___lmul@multiplier+3,c
 10341  0001D6  C0A7  F013         	movff	_ac4,___lmul@multiplicand
 10342  0001DA  C0A8  F014         	movff	_ac4+1,___lmul@multiplicand+1
 10343  0001DE  6A15               	clrf	___lmul@multiplicand+2,c
 10344  0001E0  6A16               	clrf	___lmul@multiplicand+3,c
 10345  0001E2  EC86  F010         	call	___lmul	;wreg free
 10346  0001E6  0E10               	movlw	16
 10347  0001E8  D005               	goto	u3790
 10348  0001EA                     u3795:
 10349  0001EA  90D8               	bcf	status,0,c
 10350  0001EC  3212               	rrcf	?___lmul+3,f,c
 10351  0001EE  3211               	rrcf	?___lmul+2,f,c
 10352  0001F0  3210               	rrcf	?___lmul+1,f,c
 10353  0001F2  320F               	rrcf	?___lmul,f,c
 10354  0001F4                     u3790:
 10355  0001F4  2EE8               	decfsz	wreg,f,c
 10356  0001F6  D7F9               	goto	u3795
 10357  0001F8  C00F  F091         	movff	?___lmul,_B4
 10358  0001FC  C010  F092         	movff	?___lmul+1,_B4+1
 10359  000200  C011  F093         	movff	?___lmul+2,_B4+2
 10360  000204  C012  F094         	movff	?___lmul+3,_B4+3
 10361                           
 10362                           ;bmp180.c: 279: printf("B4: %li\n\r", B4);
 10363  000208  0E60               	movlw	low STR_26
 10364  00020A  6E33               	movwf	printf@f,c
 10365  00020C  0EBF               	movlw	high STR_26
 10366  00020E  6E34               	movwf	printf@f+1,c
 10367  000210  C091  F035         	movff	_B4,?_printf+2
 10368  000214  C092  F036         	movff	_B4+1,?_printf+3
 10369  000218  C093  F037         	movff	_B4+2,?_printf+4
 10370  00021C  C094  F038         	movff	_B4+3,?_printf+5
 10371  000220  EC1C  F013         	call	_printf	;wreg free
 10372  000224  0100               	movlb	0	; () banked
 10373  000226  5195               	movf	_B3& (0+255),w,b
 10374  000228  5C3E               	subwf	BMP085GetPressure@_pu,w,c
 10375  00022A  6E0F               	movwf	___lmul@multiplier,c
 10376  00022C  5196               	movf	(_B3+1)& (0+255),w,b
 10377  00022E  583F               	subwfb	BMP085GetPressure@_pu+1,w,c
 10378  000230  6E10               	movwf	___lmul@multiplier+1,c
 10379  000232  5197               	movf	(_B3+2)& (0+255),w,b
 10380  000234  5840               	subwfb	BMP085GetPressure@_pu+2,w,c
 10381  000236  6E11               	movwf	___lmul@multiplier+2,c
 10382  000238  5198               	movf	(_B3+3)& (0+255),w,b
 10383  00023A  5841               	subwfb	BMP085GetPressure@_pu+3,w,c
 10384  00023C  6E12               	movwf	___lmul@multiplier+3,c
 10385  00023E  0E6A               	movlw	106
 10386  000240  6E13               	movwf	___lmul@multiplicand,c
 10387  000242  0E18               	movlw	24
 10388  000244  D9C6               	call	PL174	;call to abstracted procedure
 10389  000246  EC86  F010         	call	___lmul	;wreg free
 10390  00024A  C00F  F089         	movff	?___lmul,_B7
 10391  00024E  C010  F08A         	movff	?___lmul+1,_B7+1
 10392  000252  C011  F08B         	movff	?___lmul+2,_B7+2
 10393  000256  C012  F08C         	movff	?___lmul+3,_B7+3
 10394                           
 10395                           ;bmp180.c: 283: printf("B7: %li\n\r", B7);
 10396  00025A  0E6A               	movlw	low STR_27
 10397  00025C  6E33               	movwf	printf@f,c
 10398  00025E  0EBF               	movlw	high STR_27
 10399  000260  6E34               	movwf	printf@f+1,c
 10400  000262  C089  F035         	movff	_B7,?_printf+2
 10401  000266  C08A  F036         	movff	_B7+1,?_printf+3
 10402  00026A  C08B  F037         	movff	_B7+2,?_printf+4
 10403  00026E  C08C  F038         	movff	_B7+3,?_printf+5
 10404  000272  EC1C  F013         	call	_printf	;wreg free
 10405                           
 10406                           ;bmp180.c: 286: if (B7 < 0x80000000)
 10407  000276  0E80               	movlw	128
 10408  000278  0100               	movlb	0	; () banked
 10409  00027A  5D8C               	subwf	(_B7+3)& (0+255),w,b
 10410  00027C  E215               	bc	l5358
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;bmp180.c: 287: Pp = (B7*2)/B4;
 10414  00027E  90D8               	bcf	status,0,c
 10415  000280  3589               	rlcf	_B7& (0+255),w,b
 10416  000282  6E0F               	movwf	___lldiv@dividend,c
 10417  000284  358A               	rlcf	(_B7+1)& (0+255),w,b
 10418  000286  6E10               	movwf	___lldiv@dividend+1,c
 10419  000288  358B               	rlcf	(_B7+2)& (0+255),w,b
 10420  00028A  6E11               	movwf	___lldiv@dividend+2,c
 10421  00028C  358C               	rlcf	(_B7+3)& (0+255),w,b
 10422  00028E  6E12               	movwf	___lldiv@dividend+3,c
 10423  000290  D979               	call	PL78	;call to abstracted procedure
 10424  000292  ECF3  F00E         	call	___lldiv	;wreg free
 10425  000296  C00F  F0D8         	movff	?___lldiv,BMP085GetPressure@Pp
 10426  00029A  C010  F0D9         	movff	?___lldiv+1,BMP085GetPressure@Pp+1
 10427  00029E  C011  F0DA         	movff	?___lldiv+2,BMP085GetPressure@Pp+2
 10428  0002A2  C012  F0DB         	movff	?___lldiv+3,BMP085GetPressure@Pp+3
 10429  0002A6  D015               	goto	l5360
 10430  0002A8                     l5358:
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;bmp180.c: 288: else
 10434                           ;bmp180.c: 289: Pp = (B7/B4)*2;
 10435  0002A8  C089  F00F         	movff	_B7,___lldiv@dividend
 10436  0002AC  C08A  F010         	movff	_B7+1,___lldiv@dividend+1
 10437  0002B0  C08B  F011         	movff	_B7+2,___lldiv@dividend+2
 10438  0002B4  C08C  F012         	movff	_B7+3,___lldiv@dividend+3
 10439  0002B8  D965               	call	PL78	;call to abstracted procedure
 10440  0002BA  ECF3  F00E         	call	___lldiv	;wreg free
 10441  0002BE  90D8               	bcf	status,0,c
 10442  0002C0  340F               	rlcf	?___lldiv,w,c
 10443  0002C2  0100               	movlb	0	; () banked
 10444  0002C4  6FD8               	movwf	BMP085GetPressure@Pp& (0+255),b
 10445  0002C6  3410               	rlcf	?___lldiv+1,w,c
 10446  0002C8  6FD9               	movwf	(BMP085GetPressure@Pp+1)& (0+255),b
 10447  0002CA  3411               	rlcf	?___lldiv+2,w,c
 10448  0002CC  6FDA               	movwf	(BMP085GetPressure@Pp+2)& (0+255),b
 10449  0002CE  3412               	rlcf	?___lldiv+3,w,c
 10450  0002D0  6FDB               	movwf	(BMP085GetPressure@Pp+3)& (0+255),b
 10451  0002D2                     l5360:
 10452                           
 10453                           ;bmp180.c: 291: printf("Pp: %li\n\r", Pp);
 10454  0002D2  D91B               	call	PL58	;call to abstracted procedure
 10455  0002D4  D8FC               	call	PL44	;call to abstracted procedure
 10456  0002D6  EC1C  F013         	call	_printf	;wreg free
 10457                           
 10458                           ;bmp180.c: 294: X1 = (Pp/256)*(Pp/256);
 10459  0002DA  D909               	call	PL56	;call to abstracted procedure
 10460  0002DC  ECDF  F00C         	call	___aldiv	;wreg free
 10461  0002E0  C01B  F00F         	movff	?___aldiv,___lmul@multiplier
 10462  0002E4  C01C  F010         	movff	?___aldiv+1,___lmul@multiplier+1
 10463  0002E8  C01D  F011         	movff	?___aldiv+2,___lmul@multiplier+2
 10464  0002EC  C01E  F012         	movff	?___aldiv+3,___lmul@multiplier+3
 10465  0002F0  D8FE               	call	PL56	;call to abstracted procedure
 10466  0002F2  ECDF  F00C         	call	___aldiv	;wreg free
 10467  0002F6  C01B  F013         	movff	?___aldiv,___lmul@multiplicand
 10468  0002FA  C01C  F014         	movff	?___aldiv+1,___lmul@multiplicand+1
 10469  0002FE  C01D  F015         	movff	?___aldiv+2,___lmul@multiplicand+2
 10470  000302  C01E  F016         	movff	?___aldiv+3,___lmul@multiplicand+3
 10471  000306  EC86  F010         	call	___lmul	;wreg free
 10472  00030A  C00F  F062         	movff	?___lmul,_X1
 10473  00030E  C010  F063         	movff	?___lmul+1,_X1+1
 10474  000312  C011  F064         	movff	?___lmul+2,_X1+2
 10475  000316  C012  F065         	movff	?___lmul+3,_X1+3
 10476                           
 10477                           ;bmp180.c: 296: printf("X1: %li\n\r", X1);
 10478  00031A  D8FB               	call	PL60	;call to abstracted procedure
 10479  00031C  D8AF               	call	PL26	;call to abstracted procedure
 10480  00031E  EC1C  F013         	call	_printf	;wreg free
 10481                           
 10482                           ;bmp180.c: 298: X1 = (X1*3038)/65536;
 10483  000322  C062  F00F         	movff	_X1,___lmul@multiplier
 10484  000326  C063  F010         	movff	_X1+1,___lmul@multiplier+1
 10485  00032A  C064  F011         	movff	_X1+2,___lmul@multiplier+2
 10486  00032E  C065  F012         	movff	_X1+3,___lmul@multiplier+3
 10487  000332  0EDE               	movlw	222
 10488  000334  6E13               	movwf	___lmul@multiplicand,c
 10489  000336  0E0B               	movlw	11
 10490  000338  D94C               	call	PL174	;call to abstracted procedure
 10491  00033A  EC86  F010         	call	___lmul	;wreg free
 10492  00033E  D86B               	call	PL6	;call to abstracted procedure
 10493  000340  D933               	call	PL82	;call to abstracted procedure
 10494  000342  ECDF  F00C         	call	___aldiv	;wreg free
 10495  000346  C01B  F062         	movff	?___aldiv,_X1
 10496  00034A  C01C  F063         	movff	?___aldiv+1,_X1+1
 10497  00034E  C01D  F064         	movff	?___aldiv+2,_X1+2
 10498  000352  C01E  F065         	movff	?___aldiv+3,_X1+3
 10499                           
 10500                           ;bmp180.c: 300: printf("X1: %li\n\r", X1);
 10501  000356  D8DD               	call	PL60	;call to abstracted procedure
 10502  000358  D891               	call	PL26	;call to abstracted procedure
 10503  00035A  EC1C  F013         	call	_printf	;wreg free
 10504                           
 10505                           ;bmp180.c: 302: X2 = -7357 * Pp / 65536;
 10506  00035E  D900               	call	PL72	;call to abstracted procedure
 10507  000360  0E43               	movlw	67
 10508  000362  6E13               	movwf	___lmul@multiplicand,c
 10509  000364  0EE3               	movlw	227
 10510  000366  6E14               	movwf	___lmul@multiplicand+1,c
 10511  000368  6815               	setf	___lmul@multiplicand+2,c
 10512  00036A  6816               	setf	___lmul@multiplicand+3,c
 10513  00036C  EC86  F010         	call	___lmul	;wreg free
 10514  000370  D852               	call	PL6	;call to abstracted procedure
 10515  000372  D91A               	call	PL82	;call to abstracted procedure
 10516  000374  ECDF  F00C         	call	___aldiv	;wreg free
 10517  000378  C01B  F05E         	movff	?___aldiv,_X2
 10518  00037C  C01C  F05F         	movff	?___aldiv+1,_X2+1
 10519  000380  C01D  F060         	movff	?___aldiv+2,_X2+2
 10520  000384  C01E  F061         	movff	?___aldiv+3,_X2+3
 10521                           
 10522                           ;bmp180.c: 304: printf("X2: %li\n\r", X2);
 10523  000388  0E4C               	movlw	low STR_31
 10524  00038A  6E33               	movwf	printf@f,c
 10525  00038C  0EBF               	movlw	high STR_31
 10526  00038E  6E34               	movwf	printf@f+1,c
 10527  000390  C05E  F035         	movff	_X2,?_printf+2
 10528  000394  C05F  F036         	movff	_X2+1,?_printf+3
 10529  000398  C060  F037         	movff	_X2+2,?_printf+4
 10530  00039C  C061  F038         	movff	_X2+3,?_printf+5
 10531  0003A0  EC1C  F013         	call	_printf	;wreg free
 10532                           
 10533                           ;bmp180.c: 306: Pp = Pp+((X1+X2+3791)/16);
 10534  0003A4  D8BA               	call	PL62	;call to abstracted procedure
 10535  0003A6  0ECF               	movlw	207
 10536  0003A8  2442               	addwf	??_BMP085GetPressure,w,c
 10537  0003AA  6E1B               	movwf	___aldiv@dividend,c
 10538  0003AC  0E0E               	movlw	14
 10539  0003AE  D8CF               	call	PL70	;call to abstracted procedure
 10540  0003B0  0E10               	movlw	16
 10541  0003B2  D900               	call	PL90	;call to abstracted procedure
 10542  0003B4  ECDF  F00C         	call	___aldiv	;wreg free
 10543  0003B8  501B               	movf	?___aldiv,w,c
 10544  0003BA  0100               	movlb	0	; () banked
 10545  0003BC  27D8               	addwf	BMP085GetPressure@Pp& (0+255),f,b
 10546  0003BE  501C               	movf	?___aldiv+1,w,c
 10547  0003C0  23D9               	addwfc	(BMP085GetPressure@Pp+1)& (0+255),f,b
 10548  0003C2  501D               	movf	?___aldiv+2,w,c
 10549  0003C4  23DA               	addwfc	(BMP085GetPressure@Pp+2)& (0+255),f,b
 10550  0003C6  501E               	movf	?___aldiv+3,w,c
 10551  0003C8  23DB               	addwfc	(BMP085GetPressure@Pp+3)& (0+255),f,b
 10552                           
 10553                           ;bmp180.c: 308: printf("Pp: %li\n\r", Pp);
 10554  0003CA  D89F               	call	PL58	;call to abstracted procedure
 10555  0003CC  D880               	call	PL44	;call to abstracted procedure
 10556  0003CE  EC1C  F013         	call	_printf	;wreg free
 10557                           
 10558                           ;bmp180.c: 311: Pp = Pp * 100/13332;
 10559  0003D2  D8C6               	call	PL72	;call to abstracted procedure
 10560  0003D4  0E64               	movlw	100
 10561  0003D6  6E13               	movwf	___lmul@multiplicand,c
 10562  0003D8  6A14               	clrf	___lmul@multiplicand+1,c
 10563  0003DA  6A15               	clrf	___lmul@multiplicand+2,c
 10564  0003DC  6A16               	clrf	___lmul@multiplicand+3,c
 10565  0003DE  EC86  F010         	call	___lmul	;wreg free
 10566  0003E2  D819               	call	PL6	;call to abstracted procedure
 10567  0003E4  0E14               	movlw	20
 10568  0003E6  6E1F               	movwf	___aldiv@divisor,c
 10569  0003E8  0E34               	movlw	52
 10570  0003EA  D8EF               	call	PL102	;call to abstracted procedure
 10571  0003EC  ECDF  F00C         	call	___aldiv	;wreg free
 10572  0003F0  C01B  F0D8         	movff	?___aldiv,BMP085GetPressure@Pp
 10573  0003F4  C01C  F0D9         	movff	?___aldiv+1,BMP085GetPressure@Pp+1
 10574  0003F8  C01D  F0DA         	movff	?___aldiv+2,BMP085GetPressure@Pp+2
 10575  0003FC  C01E  F0DB         	movff	?___aldiv+3,BMP085GetPressure@Pp+3
 10576                           
 10577                           ;bmp180.c: 313: printf("Pp: %d\n\r", Pp);
 10578  000400  0EF6               	movlw	low STR_33
 10579  000402  6E33               	movwf	printf@f,c
 10580  000404  0EBF               	movlw	high STR_33
 10581  000406  D863               	call	PL44	;call to abstracted procedure
 10582  000408  EC1C  F013         	call	_printf	;wreg free
 10583                           
 10584                           ;bmp180.c: 317: return(Pp);
 10585  00040C  C0D8  F03E         	movff	BMP085GetPressure@Pp,?_BMP085GetPressure
 10586  000410  C0D9  F03F         	movff	BMP085GetPressure@Pp+1,?_BMP085GetPressure+1
 10587  000414  0012               	return		;funcret
 10588  000416                     __end_of_BMP085GetPressure:
 10589                           	opt stack 0
 10590  000416                     PL6:
 10591                           	opt stack 21
 10592  000416  C00F  F01B         	movff	?___lmul,___aldiv@dividend
 10593  00041A  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
 10594  00041E  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
 10595  000422  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
 10596  000426  0012               	return	
 10597  000428                     __end_ofPL6:
 10598                           	opt stack 0
 10599  000428                     PL16:
 10600                           	opt stack 21
 10601  000428  C01B  F05E         	movff	?___aldiv,_X2
 10602  00042C  C01C  F05F         	movff	?___aldiv+1,_X2+1
 10603  000430  C01D  F060         	movff	?___aldiv+2,_X2+2
 10604  000434  C01E  F061         	movff	?___aldiv+3,_X2+3
 10605  000438  0EB7               	movlw	low STR_15
 10606  00043A  6E33               	movwf	printf@f,c
 10607  00043C  0EBF               	movlw	high STR_15
 10608  00043E  6E34               	movwf	printf@f+1,c
 10609  000440  C05E  F035         	movff	_X2,?_printf+2
 10610  000444  C05F  F036         	movff	_X2+1,?_printf+3
 10611  000448  C060  F037         	movff	_X2+2,?_printf+4
 10612  00044C  C061  F038         	movff	_X2+3,?_printf+5
 10613  000450  0012               	return	
 10614  000452                     __end_ofPL16:
 10615                           	opt stack 0
 10616  000452                     PL18:
 10617                           	opt stack 21
 10618  000452  C01B  F062         	movff	?___aldiv,_X1
 10619  000456  C01C  F063         	movff	?___aldiv+1,_X1+1
 10620  00045A  C01D  F064         	movff	?___aldiv+2,_X1+2
 10621  00045E  C01E  F065         	movff	?___aldiv+3,_X1+3
 10622  000462  0EA5               	movlw	low STR_14
 10623  000464  6E33               	movwf	printf@f,c
 10624  000466  0EBF               	movlw	high STR_14
 10625  000468  6E34               	movwf	printf@f+1,c
 10626  00046A  C062  F035         	movff	_X1,?_printf+2
 10627  00046E  C063  F036         	movff	_X1+1,?_printf+3
 10628  000472  C064  F037         	movff	_X1+2,?_printf+4
 10629  000476  C065  F038         	movff	_X1+3,?_printf+5
 10630  00047A  0012               	return	
 10631  00047C                     __end_ofPL18:
 10632                           	opt stack 0
 10633  00047C                     PL26:
 10634                           	opt stack 21
 10635  00047C  6E34               	movwf	printf@f+1,c
 10636  00047E  C062  F035         	movff	_X1,?_printf+2
 10637  000482  C063  F036         	movff	_X1+1,?_printf+3
 10638  000486  C064  F037         	movff	_X1+2,?_printf+4
 10639  00048A  C065  F038         	movff	_X1+3,?_printf+5
 10640  00048E  0012               	return	
 10641  000490                     __end_ofPL26:
 10642                           	opt stack 0
 10643  000490                     PL36:
 10644                           	opt stack 21
 10645  000490  6A1F               	clrf	___aldiv@divisor,c
 10646  000492  0E10               	movlw	16
 10647  000494  6E20               	movwf	___aldiv@divisor+1,c
 10648  000496  6A21               	clrf	___aldiv@divisor+2,c
 10649  000498  6A22               	clrf	___aldiv@divisor+3,c
 10650  00049A  C056  F00F         	movff	_B6,___lmul@multiplier
 10651  00049E  C057  F010         	movff	_B6+1,___lmul@multiplier+1
 10652  0004A2  C058  F011         	movff	_B6+2,___lmul@multiplier+2
 10653  0004A6  C059  F012         	movff	_B6+3,___lmul@multiplier+3
 10654  0004AA  C056  F013         	movff	_B6,___lmul@multiplicand
 10655  0004AE  C057  F014         	movff	_B6+1,___lmul@multiplicand+1
 10656  0004B2  C058  F015         	movff	_B6+2,___lmul@multiplicand+2
 10657  0004B6  C059  F016         	movff	_B6+3,___lmul@multiplicand+3
 10658  0004BA  0C10               	retlw	16
 10659  0004BC                     __end_ofPL36:
 10660                           	opt stack 0
 10661  0004BC                     PL40:
 10662                           	opt stack 21
 10663  0004BC  C056  F013         	movff	_B6,___lmul@multiplicand
 10664  0004C0  C057  F014         	movff	_B6+1,___lmul@multiplicand+1
 10665  0004C4  C058  F015         	movff	_B6+2,___lmul@multiplicand+2
 10666  0004C8  C059  F016         	movff	_B6+3,___lmul@multiplicand+3
 10667  0004CC  0012               	return	
 10668  0004CE                     __end_ofPL40:
 10669                           	opt stack 0
 10670  0004CE                     PL44:
 10671                           	opt stack 21
 10672  0004CE  6E34               	movwf	printf@f+1,c
 10673  0004D0  C0D8  F035         	movff	BMP085GetPressure@Pp,?_printf+2
 10674  0004D4  C0D9  F036         	movff	BMP085GetPressure@Pp+1,?_printf+3
 10675  0004D8  C0DA  F037         	movff	BMP085GetPressure@Pp+2,?_printf+4
 10676  0004DC  C0DB  F038         	movff	BMP085GetPressure@Pp+3,?_printf+5
 10677  0004E0  0012               	return	
 10678  0004E2                     __end_ofPL44:
 10679                           	opt stack 0
 10680  0004E2                     PL54:
 10681                           	opt stack 21
 10682  0004E2  0E00               	movlw	0
 10683  0004E4  BE10               	btfsc	___lmul@multiplier+1,7,c
 10684  0004E6  0EFF               	movlw	-1
 10685  0004E8  6E11               	movwf	___lmul@multiplier+2,c
 10686  0004EA  6E12               	movwf	___lmul@multiplier+3,c
 10687  0004EC  0012               	return	
 10688  0004EE                     __end_ofPL54:
 10689                           	opt stack 0
 10690  0004EE                     PL56:
 10691                           	opt stack 21
 10692  0004EE  6A1F               	clrf	___aldiv@divisor,c
 10693  0004F0  0E01               	movlw	1
 10694  0004F2  6E20               	movwf	___aldiv@divisor+1,c
 10695  0004F4  6A21               	clrf	___aldiv@divisor+2,c
 10696  0004F6  6A22               	clrf	___aldiv@divisor+3,c
 10697  0004F8  C0D8  F01B         	movff	BMP085GetPressure@Pp,___aldiv@dividend
 10698  0004FC  C0D9  F01C         	movff	BMP085GetPressure@Pp+1,___aldiv@dividend+1
 10699  000500  C0DA  F01D         	movff	BMP085GetPressure@Pp+2,___aldiv@dividend+2
 10700  000504  C0DB  F01E         	movff	BMP085GetPressure@Pp+3,___aldiv@dividend+3
 10701  000508  0C01               	retlw	1
 10702  00050A                     __end_ofPL56:
 10703                           	opt stack 0
 10704  00050A                     PL58:
 10705                           	opt stack 21
 10706  00050A  0E74               	movlw	low STR_28
 10707  00050C  6E33               	movwf	printf@f,c
 10708  00050E  0EBF               	movlw	high STR_28
 10709  000510  0012               	return	
 10710  000512                     __end_ofPL58:
 10711                           	opt stack 0
 10712  000512                     PL60:
 10713                           	opt stack 21
 10714  000512  0E42               	movlw	low STR_29
 10715  000514  6E33               	movwf	printf@f,c
 10716  000516  0EBF               	movlw	high STR_29
 10717  000518  0012               	return	
 10718  00051A                     __end_ofPL60:
 10719                           	opt stack 0
 10720  00051A                     PL62:
 10721                           	opt stack 21
 10722  00051A  505E               	movf	_X2,w,c
 10723  00051C  2462               	addwf	_X1,w,c
 10724  00051E  6E42               	movwf	??_BMP085GetPressure& (0+255),c
 10725  000520  505F               	movf	_X2+1,w,c
 10726  000522  2063               	addwfc	_X1+1,w,c
 10727  000524  6E43               	movwf	(??_BMP085GetPressure+1)& (0+255),c
 10728  000526  5060               	movf	_X2+2,w,c
 10729  000528  2064               	addwfc	_X1+2,w,c
 10730  00052A  6E44               	movwf	(??_BMP085GetPressure+2)& (0+255),c
 10731  00052C  5061               	movf	_X2+3,w,c
 10732  00052E  2065               	addwfc	_X1+3,w,c
 10733  000530  6E45               	movwf	(??_BMP085GetPressure+3)& (0+255),c
 10734  000532  0012               	return	
 10735  000534                     __end_ofPL62:
 10736                           	opt stack 0
 10737  000534                     PL64:
 10738                           	opt stack 21
 10739  000534  0EC0               	movlw	low STR_21
 10740  000536  6E33               	movwf	printf@f,c
 10741  000538  0EBF               	movlw	high STR_21
 10742  00053A  6E34               	movwf	printf@f+1,c
 10743  00053C  C05A  F035         	movff	_X3,?_printf+2
 10744  000540  C05B  F036         	movff	_X3+1,?_printf+3
 10745  000544  C05C  F037         	movff	_X3+2,?_printf+4
 10746  000548  C05D  F038         	movff	_X3+3,?_printf+5
 10747  00054C  0012               	return	
 10748  00054E                     __end_ofPL64:
 10749                           	opt stack 0
 10750  00054E                     PL70:
 10751                           	opt stack 21
 10752  00054E  2043               	addwfc	??_BMP085GetPressure+1,w,c
 10753  000550  6E1C               	movwf	___aldiv@dividend+1,c
 10754  000552  0E00               	movlw	0
 10755  000554  2044               	addwfc	??_BMP085GetPressure+2,w,c
 10756  000556  6E1D               	movwf	___aldiv@dividend+2,c
 10757  000558  0E00               	movlw	0
 10758  00055A  2045               	addwfc	??_BMP085GetPressure+3,w,c
 10759  00055C  6E1E               	movwf	___aldiv@dividend+3,c
 10760  00055E  0012               	return	
 10761  000560                     __end_ofPL70:
 10762                           	opt stack 0
 10763  000560                     PL72:
 10764                           	opt stack 21
 10765  000560  C0D8  F00F         	movff	BMP085GetPressure@Pp,___lmul@multiplier
 10766  000564  C0D9  F010         	movff	BMP085GetPressure@Pp+1,___lmul@multiplier+1
 10767  000568  C0DA  F011         	movff	BMP085GetPressure@Pp+2,___lmul@multiplier+2
 10768  00056C  C0DB  F012         	movff	BMP085GetPressure@Pp+3,___lmul@multiplier+3
 10769  000570  0012               	return	
 10770  000572                     __end_ofPL72:
 10771                           	opt stack 0
 10772  000572                     PL74:
 10773                           	opt stack 21
 10774  000572  C0D4  F013         	movff	_BMP085GetPressure$2351,___lmul@multiplicand
 10775  000576  C0D5  F014         	movff	_BMP085GetPressure$2351+1,___lmul@multiplicand+1
 10776  00057A  C0D6  F015         	movff	_BMP085GetPressure$2351+2,___lmul@multiplicand+2
 10777  00057E  C0D7  F016         	movff	_BMP085GetPressure$2351+3,___lmul@multiplicand+3
 10778  000582  0012               	return	
 10779  000584                     __end_ofPL74:
 10780                           	opt stack 0
 10781  000584                     PL78:
 10782                           	opt stack 21
 10783  000584  C091  F013         	movff	_B4,___lldiv@divisor
 10784  000588  C092  F014         	movff	_B4+1,___lldiv@divisor+1
 10785  00058C  C093  F015         	movff	_B4+2,___lldiv@divisor+2
 10786  000590  C094  F016         	movff	_B4+3,___lldiv@divisor+3
 10787  000594  0012               	return	
 10788  000596                     __end_ofPL78:
 10789                           	opt stack 0
 10790  000596                     PL80:
 10791                           	opt stack 21
 10792  000596  C01B  F0D4         	movff	?___aldiv,_BMP085GetPressure$2351
 10793  00059A  C01C  F0D5         	movff	?___aldiv+1,_BMP085GetPressure$2351+1
 10794  00059E  C01D  F0D6         	movff	?___aldiv+2,_BMP085GetPressure$2351+2
 10795  0005A2  C01E  F0D7         	movff	?___aldiv+3,_BMP085GetPressure$2351+3
 10796  0005A6  0012               	return	
 10797  0005A8                     __end_ofPL80:
 10798                           	opt stack 0
 10799  0005A8                     PL82:
 10800                           	opt stack 21
 10801  0005A8  6A1F               	clrf	___aldiv@divisor,c
 10802  0005AA  6A20               	clrf	___aldiv@divisor+1,c
 10803  0005AC  0E01               	movlw	1
 10804  0005AE  6E21               	movwf	___aldiv@divisor+2,c
 10805  0005B0  6A22               	clrf	___aldiv@divisor+3,c
 10806  0005B2  0C01               	retlw	1
 10807  0005B4                     __end_ofPL82:
 10808                           	opt stack 0
 10809  0005B4                     PL90:
 10810                           	opt stack 21
 10811  0005B4  6E1F               	movwf	___aldiv@divisor,c
 10812  0005B6  6A20               	clrf	___aldiv@divisor+1,c
 10813  0005B8  6A21               	clrf	___aldiv@divisor+2,c
 10814  0005BA  6A22               	clrf	___aldiv@divisor+3,c
 10815  0005BC  0012               	return	
 10816  0005BE                     __end_ofPL90:
 10817                           	opt stack 0
 10818  0005BE                     PL98:
 10819                           	opt stack 21
 10820  0005BE  6A1F               	clrf	___aldiv@divisor,c
 10821  0005C0  0E08               	movlw	8
 10822  0005C2  6E20               	movwf	___aldiv@divisor+1,c
 10823  0005C4  6A21               	clrf	___aldiv@divisor+2,c
 10824  0005C6  6A22               	clrf	___aldiv@divisor+3,c
 10825  0005C8  0C08               	retlw	8
 10826  0005CA                     __end_ofPL98:
 10827                           	opt stack 0
 10828  0005CA                     PL102:
 10829                           	opt stack 21
 10830  0005CA  6E20               	movwf	___aldiv@divisor+1,c
 10831  0005CC  6A21               	clrf	___aldiv@divisor+2,c
 10832  0005CE  6A22               	clrf	___aldiv@divisor+3,c
 10833  0005D0  0012               	return	
 10834  0005D2                     __end_ofPL102:
 10835                           	opt stack 0
 10836  0005D2                     PL174:
 10837                           	opt stack 21
 10838  0005D2  6E14               	movwf	___lmul@multiplicand+1,c
 10839  0005D4  6A15               	clrf	___lmul@multiplicand+2,c
 10840  0005D6  6A16               	clrf	___lmul@multiplicand+3,c
 10841  0005D8  0012               	return	
 10842  0005DA                     __end_ofPL174:
 10843                           	opt stack 0
 10844                           tosu	equ	0xFFF
 10845                           tosh	equ	0xFFE
 10846                           tosl	equ	0xFFD
 10847                           pclath	equ	0xFFA
 10848                           tblptru	equ	0xFF8
 10849                           tblptrh	equ	0xFF7
 10850                           tblptrl	equ	0xFF6
 10851                           tablat	equ	0xFF5
 10852                           prodh	equ	0xFF4
 10853                           prodl	equ	0xFF3
 10854                           intcon	equ	0xFF2
 10855                           intcon2	equ	0xFF1
 10856                           postinc0	equ	0xFEE
 10857                           wreg	equ	0xFE8
 10858                           indf1	equ	0xFE7
 10859                           plusw1	equ	0xFE3
 10860                           fsr1h	equ	0xFE2
 10861                           fsr1l	equ	0xFE1
 10862                           indf2	equ	0xFDF
 10863                           postinc2	equ	0xFDE
 10864                           postdec2	equ	0xFDD
 10865                           plusw2	equ	0xFDB
 10866                           fsr2h	equ	0xFDA
 10867                           fsr2l	equ	0xFD9
 10868                           status	equ	0xFD8
 10869                           
 10870 ;; *************** function _printf *****************
 10871 ;; Defined at:
 10872 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\printf.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;  f               2   50[COMRAM] PTR const unsigned char 
 10875 ;;		 -> STR_33(9), STR_32(10), STR_31(10), STR_30(10), 
 10876 ;;		 -> STR_29(10), STR_28(10), STR_27(10), STR_26(10), 
 10877 ;;		 -> STR_25(9), STR_24(9), STR_23(9), STR_22(10), 
 10878 ;;		 -> STR_21(9), STR_20(9), STR_19(9), STR_18(9), 
 10879 ;;		 -> STR_17(16), STR_16(9), STR_15(9), STR_14(9), 
 10880 ;;		 -> STR_13(9), STR_12(9), STR_11(9), STR_10(9), 
 10881 ;;		 -> STR_9(9), STR_8(10), STR_7(10), STR_6(10), 
 10882 ;;		 -> STR_5(10), STR_4(10), STR_3(10), STR_2(19), 
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;  pb              4   57[COMRAM] struct __prbuf
 10885 ;;  ap              1   56[COMRAM] PTR void [1]
 10886 ;;		 -> ?_sprintf(2), ?_printf(2), 
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  2   50[COMRAM] int 
 10889 ;; Registers used:
 10890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10896 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10899 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;Total ram usage:       11 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:    5
 10903 ;; This function calls:
 10904 ;;		__doprnt
 10905 ;; This function is called by:
 10906 ;;		_readTemp_Single
 10907 ;;		_bmp085Calibration
 10908 ;;		_BMP085GetTemp
 10909 ;;		_BMP085GetPressure
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           	psect	text45
 10914  002638                     __ptext45:
 10915                           	opt stack 0
 10916  002638                     _printf:
 10917                           	opt stack 23
 10918                           
 10919                           ;incstack = 0
 10920  002638  6A3A               	clrf	printf@pb,c
 10921  00263A  6A3B               	clrf	printf@pb+1,c
 10922  00263C  0E22               	movlw	low _putch
 10923  00263E  6E3C               	movwf	printf@pb+2,c
 10924  002640  0E28               	movlw	high _putch
 10925  002642  6E3D               	movwf	printf@pb+3,c
 10926  002644  0E35               	movlw	low (?_printf+2)
 10927  002646  6E39               	movwf	printf@ap,c
 10928                           
 10929                           ;	Return value of _printf is never used
 10930  002648  0E3A               	movlw	low printf@pb
 10931  00264A  6E25               	movwf	__doprnt@pb,c
 10932  00264C  C033  F026         	movff	printf@f,__doprnt@f
 10933  002650  C034  F027         	movff	printf@f+1,__doprnt@f+1
 10934  002654  0E39               	movlw	low printf@ap
 10935  002656  6E28               	movwf	__doprnt@ap,c
 10936  002658  EFED  F002         	goto	__doprnt	;wreg free
 10937  00265C                     __end_of_printf:
 10938                           	opt stack 0
 10939                           tosu	equ	0xFFF
 10940                           tosh	equ	0xFFE
 10941                           tosl	equ	0xFFD
 10942                           pclath	equ	0xFFA
 10943                           tblptru	equ	0xFF8
 10944                           tblptrh	equ	0xFF7
 10945                           tblptrl	equ	0xFF6
 10946                           tablat	equ	0xFF5
 10947                           prodh	equ	0xFF4
 10948                           prodl	equ	0xFF3
 10949                           intcon	equ	0xFF2
 10950                           intcon2	equ	0xFF1
 10951                           postinc0	equ	0xFEE
 10952                           wreg	equ	0xFE8
 10953                           indf1	equ	0xFE7
 10954                           plusw1	equ	0xFE3
 10955                           fsr1h	equ	0xFE2
 10956                           fsr1l	equ	0xFE1
 10957                           indf2	equ	0xFDF
 10958                           postinc2	equ	0xFDE
 10959                           postdec2	equ	0xFDD
 10960                           plusw2	equ	0xFDB
 10961                           fsr2h	equ	0xFDA
 10962                           fsr2l	equ	0xFD9
 10963                           status	equ	0xFD8
 10964                           
 10965 ;; *************** function __doprnt *****************
 10966 ;; Defined at:
 10967 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;  pb              1   36[COMRAM] PTR struct __prbuf
 10970 ;;		 -> sprintf@pb(4), printf@pb(4), 
 10971 ;;  f               2   37[COMRAM] PTR const unsigned char 
 10972 ;;		 -> STR_33(9), STR_32(10), STR_31(10), STR_30(10), 
 10973 ;;		 -> STR_29(10), STR_28(10), STR_27(10), STR_26(10), 
 10974 ;;		 -> STR_25(9), STR_24(9), STR_23(9), STR_22(10), 
 10975 ;;		 -> STR_21(9), STR_20(9), STR_19(9), STR_18(9), 
 10976 ;;		 -> STR_17(16), STR_16(9), STR_15(9), STR_14(9), 
 10977 ;;		 -> STR_13(9), STR_12(9), STR_11(9), STR_10(9), 
 10978 ;;		 -> STR_9(9), STR_8(10), STR_7(10), STR_6(10), 
 10979 ;;		 -> STR_5(10), STR_4(10), STR_3(10), STR_2(19), 
 10980 ;;		 -> STR_1(22), 
 10981 ;;  ap              1   39[COMRAM] PTR PTR void 
 10982 ;;		 -> sprintf@ap(1), printf@ap(1), 
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;  val             4   44[COMRAM] unsigned long 
 10985 ;;  tmpval          4    0        struct .
 10986 ;;  cp              3    0        PTR const unsigned char 
 10987 ;;  prec            2   42[COMRAM] int 
 10988 ;;  len             2    0        unsigned int 
 10989 ;;  c               1   49[COMRAM] char 
 10990 ;;  flag            1   48[COMRAM] unsigned char 
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  2   36[COMRAM] int 
 10993 ;; Registers used:
 10994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11000 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11001 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;Total ram usage:       14 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; Hardware stack levels required when called:    4
 11007 ;; This function calls:
 11008 ;;		Absolute function
 11009 ;;		___lldiv
 11010 ;;		___llmod
 11011 ;;		_putch
 11012 ;; This function is called by:
 11013 ;;		_printf
 11014 ;;		_sprintf
 11015 ;; This function uses a non-reentrant model
 11016 ;;
 11017                           
 11018                           	psect	text46
 11019  0005DA                     __ptext46:
 11020                           	opt stack 0
 11021  0005DA                     __doprnt:
 11022                           	opt stack 23
 11023                           
 11024                           ;doprnt.c: 499: signed char c;
 11025                           ;doprnt.c: 504: int prec;
 11026                           ;doprnt.c: 508: unsigned char flag;
 11027                           ;doprnt.c: 523: union {
 11028                           ;doprnt.c: 524: unsigned long vd;
 11029                           ;doprnt.c: 525: double integ;
 11030                           ;doprnt.c: 526: } tmpval;
 11031                           ;doprnt.c: 528: unsigned long val;
 11032                           ;doprnt.c: 529: unsigned len;
 11033                           ;doprnt.c: 530: const char * cp;
 11034                           ;doprnt.c: 536: while(c = *f++) {
 11035                           
 11036                           ;incstack = 0
 11037  0005DA  D0E8               	goto	l5022
 11038  0005DC                     l4950:
 11039                           
 11040                           ;doprnt.c: 538: if(c != '%')
 11041  0005DC  0E25               	movlw	37
 11042  0005DE  1832               	xorwf	__doprnt@c,w,c
 11043  0005E0  E017               	bz	l1016
 11044                           
 11045                           ;doprnt.c: 540: {
 11046                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 11047  0005E2  D907               	call	PL46	;call to abstracted procedure
 11048  0005E4  50DE               	movf	postinc2,w,c
 11049  0005E6  10DE               	iorwf	postinc2,w,c
 11050  0005E8  E00E               	bz	l4956
 11051  0005EA  D903               	call	PL46	;call to abstracted procedure
 11052  0005EC  D801               	call	u3368
 11053  0005EE  D0DE               	goto	l5022
 11054  0005F0                     u3368:
 11055  0005F0  0005               	push	
 11056  0005F2  6EFA               	movwf	pclath,c
 11057  0005F4  50DE               	movf	postinc2,w,c
 11058  0005F6  6EFD               	movwf	tosl,c
 11059  0005F8  50DE               	movf	postinc2,w,c
 11060  0005FA  6EFE               	movwf	tosh,c
 11061  0005FC  50F8               	movf	tblptru,w,c
 11062  0005FE  6EFF               	movwf	tosu,c
 11063  000600  50FA               	movf	pclath,w,c
 11064  000602  5032               	movf	__doprnt@c,w,c
 11065  000604  0012               	return		;indir
 11066  000606                     l4956:
 11067  000606  D8D8               	call	PL38	;call to abstracted procedure
 11068  000608  C032  FFDF         	movff	__doprnt@c,indf2
 11069  00060C  D903               	call	PL68	;call to abstracted procedure
 11070  00060E  D0CE               	goto	l5022
 11071  000610                     l1016:
 11072                           
 11073                           ;doprnt.c: 543: }
 11074                           ;doprnt.c: 548: flag = 0;
 11075  000610  6A31               	clrf	__doprnt@flag,c
 11076  000612  D004               	goto	l4966
 11077  000614                     l4960:
 11078                           
 11079                           ;doprnt.c: 643: flag |= 0x10;
 11080  000614  8831               	bsf	__doprnt@flag,4,c
 11081                           
 11082                           ;doprnt.c: 644: goto loop;
 11083  000616  D002               	goto	l4966
 11084  000618                     l4962:
 11085                           
 11086                           ;doprnt.c: 818: flag |= 0x40;
 11087  000618  8C31               	bsf	__doprnt@flag,6,c
 11088                           
 11089                           ;doprnt.c: 819: break;
 11090  00061A  D00C               	goto	l1026
 11091  00061C                     l4966:
 11092  00061C  D8F0               	call	PL66	;call to abstracted procedure
 11093                           
 11094                           ; Switch size 1, requested type "space"
 11095                           ; Number of cases is 5, Range of values is 0 to 117
 11096                           ; switch strategies available:
 11097                           ; Name         Instructions Cycles
 11098                           ; simple_byte           16     9 (average)
 11099                           ;	Chosen strategy is simple_byte
 11100  00061E  E101 D0C8          	bz	l1022
 11101  000622  0A64               	xorlw	100	; case 100
 11102  000624  E007               	bz	l1026
 11103  000626  0A0D               	xorlw	13	; case 105
 11104  000628  E005               	bz	l1026
 11105  00062A  0A05               	xorlw	5	; case 108
 11106  00062C  E0F3               	bz	l4960
 11107  00062E  0A19               	xorlw	25	; case 117
 11108  000630  E0F3               	bz	l4962
 11109  000632  D0BC               	goto	l5022
 11110  000634                     l1026:
 11111                           
 11112                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 11113  000634  BC31               	btfsc	__doprnt@flag,6,c
 11114  000636  D01B               	goto	l1029
 11115                           
 11116                           ;doprnt.c: 1253: {
 11117                           ;doprnt.c: 1255: if(flag & 0x10)
 11118  000638  A831               	btfss	__doprnt@flag,4,c
 11119  00063A  D002               	goto	l4972
 11120                           
 11121                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
 11122  00063C  D8C9               	call	PL42	;call to abstracted procedure
 11123  00063E  D00A               	goto	l4974
 11124  000640                     l4972:
 11125                           
 11126                           ;doprnt.c: 1257: else
 11127                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 11128  000640  D8F0               	call	PL76	;call to abstracted procedure
 11129  000642  CFDE F02D          	movff	postinc2,__doprnt@val
 11130  000646  CFDD F02E          	movff	postdec2,__doprnt@val+1
 11131  00064A  0E00               	movlw	0
 11132  00064C  BE2E               	btfsc	__doprnt@val+1,7,c
 11133  00064E  0EFF               	movlw	-1
 11134  000650  6E2F               	movwf	__doprnt@val+2,c
 11135  000652  6E30               	movwf	__doprnt@val+3,c
 11136  000654                     l4974:
 11137                           
 11138                           ;doprnt.c: 1261: if((long)val < 0) {
 11139  000654  AE30               	btfss	__doprnt@val+3,7,c
 11140  000656  D01A               	goto	l4984
 11141                           
 11142                           ;doprnt.c: 1262: flag |= 0x03;
 11143  000658  0E03               	movlw	3
 11144  00065A  1231               	iorwf	__doprnt@flag,f,c
 11145                           
 11146                           ;doprnt.c: 1263: val = -val;
 11147  00065C  1E30               	comf	__doprnt@val+3,f,c
 11148  00065E  1E2F               	comf	__doprnt@val+2,f,c
 11149  000660  1E2E               	comf	__doprnt@val+1,f,c
 11150  000662  6C2D               	negf	__doprnt@val,c
 11151  000664  0E00               	movlw	0
 11152  000666  222E               	addwfc	__doprnt@val+1,f,c
 11153  000668  222F               	addwfc	__doprnt@val+2,f,c
 11154  00066A  2230               	addwfc	__doprnt@val+3,f,c
 11155  00066C  D00F               	goto	l4984
 11156  00066E                     l1029:
 11157                           
 11158                           ;doprnt.c: 1268: else
 11159                           ;doprnt.c: 1273: {
 11160                           ;doprnt.c: 1281: if(flag & 0x10)
 11161  00066E  A831               	btfss	__doprnt@flag,4,c
 11162  000670  D002               	goto	l4982
 11163                           
 11164                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 11165  000672  D8AE               	call	PL42	;call to abstracted procedure
 11166  000674  D00B               	goto	l4984
 11167  000676                     l4982:
 11168                           
 11169                           ;doprnt.c: 1283: else
 11170                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11171  000676  D8D5               	call	PL76	;call to abstracted procedure
 11172  000678  CFDE F029          	movff	postinc2,??__doprnt
 11173  00067C  CFDD F02A          	movff	postdec2,??__doprnt+1
 11174  000680  C029  F02D         	movff	??__doprnt,__doprnt@val
 11175  000684  C02A  F02E         	movff	??__doprnt+1,__doprnt@val+1
 11176  000688  6A2F               	clrf	__doprnt@val+2,c
 11177  00068A  6A30               	clrf	__doprnt@val+3,c
 11178  00068C                     l4984:
 11179                           
 11180                           ;doprnt.c: 1287: }
 11181                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11182  00068C  0E01               	movlw	1
 11183  00068E  6E32               	movwf	__doprnt@c,c
 11184  000690                     l4990:
 11185                           
 11186                           ;doprnt.c: 1306: if(val < dpowers[c])
 11187  000690  5032               	movf	__doprnt@c,w,c
 11188  000692  0D04               	mullw	4
 11189  000694  0E75               	movlw	low _dpowers
 11190  000696  24F3               	addwf	prodl,w,c
 11191  000698  6EF6               	movwf	tblptrl,c
 11192  00069A  0EB9               	movlw	high _dpowers
 11193  00069C  20F4               	addwfc	prodh,w,c
 11194  00069E  6EF7               	movwf	tblptrh,c
 11195  0006A0                     	if	0	;There are less than 3 active tblptr bytes
 11196  0006A0                     	endif
 11197  0006A0  0009               	tblrd		*+
 11198  0006A2  50F5               	movf	tablat,w,c
 11199  0006A4  5C2D               	subwf	__doprnt@val,w,c
 11200  0006A6  0009               	tblrd		*+
 11201  0006A8  50F5               	movf	tablat,w,c
 11202  0006AA  582E               	subwfb	__doprnt@val+1,w,c
 11203  0006AC  0009               	tblrd		*+
 11204  0006AE  50F5               	movf	tablat,w,c
 11205  0006B0  582F               	subwfb	__doprnt@val+2,w,c
 11206  0006B2  0009               	tblrd		*+
 11207  0006B4  50F5               	movf	tablat,w,c
 11208  0006B6  5830               	subwfb	__doprnt@val+3,w,c
 11209  0006B8  E304               	bnc	l4998
 11210  0006BA  2A32               	incf	__doprnt@c,f,c
 11211  0006BC  0E0A               	movlw	10
 11212  0006BE  1832               	xorwf	__doprnt@c,w,c
 11213  0006C0  E1E7               	bnz	l4990
 11214  0006C2                     l4998:
 11215                           
 11216                           ;doprnt.c: 1422: {
 11217                           ;doprnt.c: 1438: if(flag & 0x03)
 11218  0006C2  C031  F029         	movff	__doprnt@flag,??__doprnt
 11219  0006C6  0E03               	movlw	3
 11220  0006C8  1629               	andwf	??__doprnt,f,c
 11221  0006CA  E015               	bz	l5008
 11222                           
 11223                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 11224  0006CC  D892               	call	PL46	;call to abstracted procedure
 11225  0006CE  50DE               	movf	postinc2,w,c
 11226  0006D0  10DE               	iorwf	postinc2,w,c
 11227  0006D2  E00D               	bz	l5004
 11228  0006D4  D88E               	call	PL46	;call to abstracted procedure
 11229  0006D6  D801               	call	u3458
 11230  0006D8  D00E               	goto	l5008
 11231  0006DA                     u3458:
 11232  0006DA  0005               	push	
 11233  0006DC  6EFA               	movwf	pclath,c
 11234  0006DE  50DE               	movf	postinc2,w,c
 11235  0006E0  6EFD               	movwf	tosl,c
 11236  0006E2  50DE               	movf	postinc2,w,c
 11237  0006E4  6EFE               	movwf	tosh,c
 11238  0006E6  50F8               	movf	tblptru,w,c
 11239  0006E8  6EFF               	movwf	tosu,c
 11240  0006EA  50FA               	movf	pclath,w,c
 11241  0006EC  0C2D               	retlw	45	;indir
 11242  0006EE                     l5004:
 11243  0006EE  D864               	call	PL38	;call to abstracted procedure
 11244  0006F0  0E2D               	movlw	45
 11245  0006F2  6EDF               	movwf	indf2,c
 11246  0006F4  D88F               	call	PL68	;call to abstracted procedure
 11247  0006F6                     l5008:
 11248                           
 11249                           ;doprnt.c: 1469: }
 11250                           ;doprnt.c: 1472: prec = c;
 11251  0006F6  5032               	movf	__doprnt@c,w,c
 11252  0006F8  6E2B               	movwf	__doprnt@prec,c
 11253  0006FA  6A2C               	clrf	__doprnt@prec+1,c
 11254  0006FC  BE2B               	btfsc	__doprnt@prec,7,c
 11255  0006FE  062C               	decf	__doprnt@prec+1,f,c
 11256                           
 11257                           ;doprnt.c: 1474: while(prec--) {
 11258  000700  D04E               	goto	l5020
 11259  000702                     l5010:
 11260                           
 11261                           ;doprnt.c: 1478: {
 11262                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11263  000702  C02B  F029         	movff	__doprnt@prec,??__doprnt
 11264  000706  C02C  F02A         	movff	__doprnt@prec+1,??__doprnt+1
 11265  00070A  90D8               	bcf	status,0,c
 11266  00070C  3629               	rlcf	??__doprnt,f,c
 11267  00070E  362A               	rlcf	??__doprnt+1,f,c
 11268  000710  90D8               	bcf	status,0,c
 11269  000712  3629               	rlcf	??__doprnt,f,c
 11270  000714  362A               	rlcf	??__doprnt+1,f,c
 11271  000716  0E75               	movlw	low _dpowers
 11272  000718  2429               	addwf	??__doprnt,w,c
 11273  00071A  6EF6               	movwf	tblptrl,c
 11274  00071C  0EB9               	movlw	high _dpowers
 11275  00071E  202A               	addwfc	??__doprnt+1,w,c
 11276  000720  6EF7               	movwf	tblptrh,c
 11277  000722                     	if	0	;There are less than 3 active tblptr bytes
 11278  000722                     	endif
 11279  000722  0009               	tblrd		*+
 11280  000724  CFF5 F013          	movff	tablat,___lldiv@divisor
 11281  000728  0009               	tblrd		*+
 11282  00072A  CFF5 F014          	movff	tablat,___lldiv@divisor+1
 11283  00072E  0009               	tblrd		*+
 11284  000730  CFF5 F015          	movff	tablat,___lldiv@divisor+2
 11285  000734  000A               	tblrd		*-
 11286  000736  CFF5 F016          	movff	tablat,___lldiv@divisor+3
 11287  00073A  C02D  F00F         	movff	__doprnt@val,___lldiv@dividend
 11288  00073E  C02E  F010         	movff	__doprnt@val+1,___lldiv@dividend+1
 11289  000742  C02F  F011         	movff	__doprnt@val+2,___lldiv@dividend+2
 11290  000746  C030  F012         	movff	__doprnt@val+3,___lldiv@dividend+3
 11291  00074A  ECF3  F00E         	call	___lldiv
 11292  00074E  C00F  F01C         	movff	?___lldiv,___llmod@dividend
 11293  000752  C010  F01D         	movff	?___lldiv+1,___llmod@dividend+1
 11294  000756  C011  F01E         	movff	?___lldiv+2,___llmod@dividend+2
 11295  00075A  C012  F01F         	movff	?___lldiv+3,___llmod@dividend+3
 11296  00075E  0E0A               	movlw	10
 11297  000760  6E20               	movwf	___llmod@divisor,c
 11298  000762  6A21               	clrf	___llmod@divisor+1,c
 11299  000764  6A22               	clrf	___llmod@divisor+2,c
 11300  000766  6A23               	clrf	___llmod@divisor+3,c
 11301  000768  ECCE  F00F         	call	___llmod	;wreg free
 11302  00076C  501C               	movf	?___llmod,w,c
 11303  00076E  0F30               	addlw	48
 11304  000770  6E32               	movwf	__doprnt@c,c
 11305                           
 11306                           ;doprnt.c: 1523: }
 11307                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 11308  000772  D83F               	call	PL46	;call to abstracted procedure
 11309  000774  50DE               	movf	postinc2,w,c
 11310  000776  10DE               	iorwf	postinc2,w,c
 11311  000778  E00E               	bz	l5016
 11312  00077A  D83B               	call	PL46	;call to abstracted procedure
 11313  00077C  D801               	call	u3478
 11314  00077E  D00F               	goto	l5020
 11315  000780                     u3478:
 11316  000780  0005               	push	
 11317  000782  6EFA               	movwf	pclath,c
 11318  000784  50DE               	movf	postinc2,w,c
 11319  000786  6EFD               	movwf	tosl,c
 11320  000788  50DE               	movf	postinc2,w,c
 11321  00078A  6EFE               	movwf	tosh,c
 11322  00078C  50F8               	movf	tblptru,w,c
 11323  00078E  6EFF               	movwf	tosu,c
 11324  000790  50FA               	movf	pclath,w,c
 11325  000792  5032               	movf	__doprnt@c,w,c
 11326  000794  0012               	return		;indir
 11327  000796                     l5016:
 11328  000796  D810               	call	PL38	;call to abstracted procedure
 11329  000798  C032  FFDF         	movff	__doprnt@c,indf2
 11330  00079C  D83B               	call	PL68	;call to abstracted procedure
 11331  00079E                     l5020:
 11332  00079E  062B               	decf	__doprnt@prec,f,c
 11333  0007A0  A0D8               	btfss	status,0,c
 11334  0007A2  062C               	decf	__doprnt@prec+1,f,c
 11335  0007A4  282B               	incf	__doprnt@prec,w,c
 11336  0007A6  E1AD               	bnz	l5010
 11337  0007A8  282C               	incf	__doprnt@prec+1,w,c
 11338  0007AA  E1AB               	bnz	l5010
 11339  0007AC                     l5022:
 11340  0007AC  D828               	call	PL66	;call to abstracted procedure
 11341  0007AE  E001 D715          	bnz	l4950
 11342  0007B2                     l1022:
 11343                           
 11344                           ;doprnt.c: 1540: return 0;
 11345  0007B2  6A25               	clrf	?__doprnt,c
 11346  0007B4  6A26               	clrf	?__doprnt+1,c
 11347  0007B6  0012               	return		;funcret
 11348  0007B8                     __end_of__doprnt:
 11349                           	opt stack 0
 11350  0007B8                     PL38:
 11351                           	opt stack 23
 11352  0007B8  5025               	movf	__doprnt@pb,w,c
 11353  0007BA  6ED9               	movwf	fsr2l,c
 11354  0007BC  6ADA               	clrf	fsr2h,c
 11355  0007BE  CFDE F029          	movff	postinc2,??__doprnt
 11356  0007C2  CFDD F02A          	movff	postdec2,??__doprnt+1
 11357  0007C6  C029  FFD9         	movff	??__doprnt,fsr2l
 11358  0007CA  C02A  FFDA         	movff	??__doprnt+1,fsr2h
 11359  0007CE  0012               	return	
 11360  0007D0                     __end_ofPL38:
 11361                           	opt stack 0
 11362  0007D0                     PL42:
 11363                           	opt stack 23
 11364  0007D0  5028               	movf	__doprnt@ap,w,c
 11365  0007D2  6ED9               	movwf	fsr2l,c
 11366  0007D4  6ADA               	clrf	fsr2h,c
 11367  0007D6  0E04               	movlw	4
 11368  0007D8  26DF               	addwf	indf2,f,c
 11369  0007DA  5CDF               	subwf	indf2,w,c
 11370  0007DC  6ED9               	movwf	fsr2l,c
 11371  0007DE  6ADA               	clrf	fsr2h,c
 11372  0007E0  CFDE F02D          	movff	postinc2,__doprnt@val
 11373  0007E4  CFDE F02E          	movff	postinc2,__doprnt@val+1
 11374  0007E8  CFDE F02F          	movff	postinc2,__doprnt@val+2
 11375  0007EC  CFDE F030          	movff	postinc2,__doprnt@val+3
 11376  0007F0  0012               	return	
 11377  0007F2                     __end_ofPL42:
 11378                           	opt stack 0
 11379  0007F2                     PL46:
 11380                           	opt stack 23
 11381  0007F2  5025               	movf	__doprnt@pb,w,c
 11382  0007F4  6ED9               	movwf	fsr2l,c
 11383  0007F6  6ADA               	clrf	fsr2h,c
 11384  0007F8  0E02               	movlw	2
 11385  0007FA  26D9               	addwf	fsr2l,f,c
 11386  0007FC  0C02               	retlw	2
 11387  0007FE                     __end_ofPL46:
 11388                           	opt stack 0
 11389  0007FE                     PL66:
 11390                           	opt stack 23
 11391  0007FE  C026  FFF6         	movff	__doprnt@f,tblptrl
 11392  000802  C027  FFF7         	movff	__doprnt@f+1,tblptrh
 11393  000806  4A26               	infsnz	__doprnt@f,f,c
 11394  000808  2A27               	incf	__doprnt@f+1,f,c
 11395  00080A                     	if	0	;tblptru may be non-zero
 11396  00080A                     	endif
 11397  00080A                     	if	0	;tblptru may be non-zero
 11398  00080A                     	endif
 11399  00080A  0008               	tblrd		*
 11400  00080C  CFF5 F032          	movff	tablat,__doprnt@c
 11401  000810  5032               	movf	__doprnt@c,w,c
 11402  000812  0012               	return	
 11403  000814                     __end_ofPL66:
 11404                           	opt stack 0
 11405  000814                     PL68:
 11406                           	opt stack 23
 11407  000814  5025               	movf	__doprnt@pb,w,c
 11408  000816  6ED9               	movwf	fsr2l,c
 11409  000818  6ADA               	clrf	fsr2h,c
 11410  00081A  2ADE               	incf	postinc2,f,c
 11411  00081C  0E00               	movlw	0
 11412  00081E  22DD               	addwfc	postdec2,f,c
 11413  000820  0C00               	retlw	0
 11414  000822                     __end_ofPL68:
 11415                           	opt stack 0
 11416  000822                     PL76:
 11417                           	opt stack 23
 11418  000822  5028               	movf	__doprnt@ap,w,c
 11419  000824  6ED9               	movwf	fsr2l,c
 11420  000826  6ADA               	clrf	fsr2h,c
 11421  000828  50DF               	movf	indf2,w,c
 11422  00082A  2ADF               	incf	indf2,f,c
 11423  00082C  2ADF               	incf	indf2,f,c
 11424  00082E  6ED9               	movwf	fsr2l,c
 11425  000830  6ADA               	clrf	fsr2h,c
 11426  000832  0012               	return	
 11427  000834                     __end_ofPL76:
 11428                           	opt stack 0
 11429                           tosu	equ	0xFFF
 11430                           tosh	equ	0xFFE
 11431                           tosl	equ	0xFFD
 11432                           pclath	equ	0xFFA
 11433                           tblptru	equ	0xFF8
 11434                           tblptrh	equ	0xFF7
 11435                           tblptrl	equ	0xFF6
 11436                           tablat	equ	0xFF5
 11437                           prodh	equ	0xFF4
 11438                           prodl	equ	0xFF3
 11439                           intcon	equ	0xFF2
 11440                           intcon2	equ	0xFF1
 11441                           postinc0	equ	0xFEE
 11442                           wreg	equ	0xFE8
 11443                           indf1	equ	0xFE7
 11444                           plusw1	equ	0xFE3
 11445                           fsr1h	equ	0xFE2
 11446                           fsr1l	equ	0xFE1
 11447                           indf2	equ	0xFDF
 11448                           postinc2	equ	0xFDE
 11449                           postdec2	equ	0xFDD
 11450                           plusw2	equ	0xFDB
 11451                           fsr2h	equ	0xFDA
 11452                           fsr2l	equ	0xFD9
 11453                           status	equ	0xFD8
 11454                           
 11455 ;; *************** function _putch *****************
 11456 ;; Defined at:
 11457 ;;		line 5 in file "eusart.c"
 11458 ;; Parameters:    Size  Location     Type
 11459 ;;  data            1    wreg     unsigned char 
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;  data            1   14[COMRAM] unsigned char 
 11462 ;; Return value:  Size  Location     Type
 11463 ;;                  1    wreg      void 
 11464 ;; Registers used:
 11465 ;;		wreg
 11466 ;; Tracked objects:
 11467 ;;		On entry : 0/0
 11468 ;;		On exit  : 0/0
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11475 ;;Total ram usage:        1 bytes
 11476 ;; Hardware stack levels used:    1
 11477 ;; Hardware stack levels required when called:    3
 11478 ;; This function calls:
 11479 ;;		Nothing
 11480 ;; This function is called by:
 11481 ;;		_printf
 11482 ;;		__doprnt
 11483 ;; This function uses a non-reentrant model
 11484 ;;
 11485                           
 11486                           	psect	text47
 11487  002822                     __ptext47:
 11488                           	opt stack 0
 11489  002822                     _putch:
 11490                           	opt stack 23
 11491                           
 11492                           ;incstack = 0
 11493                           ;putch@data stored from wreg
 11494  002822  6E0F               	movwf	putch@data,c
 11495  002824                     l1001:
 11496  002824  A89E               	btfss	3998,4,c	;volatile
 11497  002826  D7FE               	goto	l1001
 11498                           
 11499                           ;eusart.c: 9: TXREG = data;
 11500  002828  C00F  FFAD         	movff	putch@data,4013	;volatile
 11501  00282C  0012               	return		;funcret
 11502  00282E                     __end_of_putch:
 11503                           	opt stack 0
 11504                           tosu	equ	0xFFF
 11505                           tosh	equ	0xFFE
 11506                           tosl	equ	0xFFD
 11507                           pclath	equ	0xFFA
 11508                           tblptru	equ	0xFF8
 11509                           tblptrh	equ	0xFF7
 11510                           tblptrl	equ	0xFF6
 11511                           tablat	equ	0xFF5
 11512                           prodh	equ	0xFF4
 11513                           prodl	equ	0xFF3
 11514                           intcon	equ	0xFF2
 11515                           intcon2	equ	0xFF1
 11516                           postinc0	equ	0xFEE
 11517                           wreg	equ	0xFE8
 11518                           indf1	equ	0xFE7
 11519                           plusw1	equ	0xFE3
 11520                           fsr1h	equ	0xFE2
 11521                           fsr1l	equ	0xFE1
 11522                           indf2	equ	0xFDF
 11523                           postinc2	equ	0xFDE
 11524                           postdec2	equ	0xFDD
 11525                           plusw2	equ	0xFDB
 11526                           fsr2h	equ	0xFDA
 11527                           fsr2l	equ	0xFD9
 11528                           status	equ	0xFD8
 11529                           
 11530 ;; *************** function ___llmod *****************
 11531 ;; Defined at:
 11532 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;  dividend        4   27[COMRAM] unsigned long 
 11535 ;;  divisor         4   31[COMRAM] unsigned long 
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;  counter         1   35[COMRAM] unsigned char 
 11538 ;; Return value:  Size  Location     Type
 11539 ;;                  4   27[COMRAM] unsigned long 
 11540 ;; Registers used:
 11541 ;;		wreg, status,2, status,0
 11542 ;; Tracked objects:
 11543 ;;		On entry : 0/0
 11544 ;;		On exit  : 0/0
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11547 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11550 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;Total ram usage:        9 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; Hardware stack levels required when called:    3
 11554 ;; This function calls:
 11555 ;;		Nothing
 11556 ;; This function is called by:
 11557 ;;		__doprnt
 11558 ;; This function uses a non-reentrant model
 11559 ;;
 11560                           
 11561                           	psect	text48
 11562  001F9C                     __ptext48:
 11563                           	opt stack 0
 11564  001F9C                     ___llmod:
 11565                           	opt stack 23
 11566                           
 11567                           ;incstack = 0
 11568  001F9C  5020               	movf	___llmod@divisor,w,c
 11569  001F9E  1021               	iorwf	___llmod@divisor+1,w,c
 11570  001FA0  1022               	iorwf	___llmod@divisor+2,w,c
 11571  001FA2  1023               	iorwf	___llmod@divisor+3,w,c
 11572  001FA4  E023               	bz	l1408
 11573  001FA6  0E01               	movlw	1
 11574  001FA8  6E24               	movwf	___llmod@counter,c
 11575  001FAA  D006               	goto	l4908
 11576  001FAC                     l4906:
 11577  001FAC  90D8               	bcf	status,0,c
 11578  001FAE  3620               	rlcf	___llmod@divisor,f,c
 11579  001FB0  3621               	rlcf	___llmod@divisor+1,f,c
 11580  001FB2  3622               	rlcf	___llmod@divisor+2,f,c
 11581  001FB4  3623               	rlcf	___llmod@divisor+3,f,c
 11582  001FB6  2A24               	incf	___llmod@counter,f,c
 11583  001FB8                     l4908:
 11584  001FB8  AE23               	btfss	___llmod@divisor+3,7,c
 11585  001FBA  D7F8               	goto	l4906
 11586  001FBC                     l4910:
 11587  001FBC  5020               	movf	___llmod@divisor,w,c
 11588  001FBE  5C1C               	subwf	___llmod@dividend,w,c
 11589  001FC0  5021               	movf	___llmod@divisor+1,w,c
 11590  001FC2  581D               	subwfb	___llmod@dividend+1,w,c
 11591  001FC4  5022               	movf	___llmod@divisor+2,w,c
 11592  001FC6  581E               	subwfb	___llmod@dividend+2,w,c
 11593  001FC8  5023               	movf	___llmod@divisor+3,w,c
 11594  001FCA  581F               	subwfb	___llmod@dividend+3,w,c
 11595  001FCC  E308               	bnc	l4914
 11596  001FCE  5020               	movf	___llmod@divisor,w,c
 11597  001FD0  5E1C               	subwf	___llmod@dividend,f,c
 11598  001FD2  5021               	movf	___llmod@divisor+1,w,c
 11599  001FD4  5A1D               	subwfb	___llmod@dividend+1,f,c
 11600  001FD6  5022               	movf	___llmod@divisor+2,w,c
 11601  001FD8  5A1E               	subwfb	___llmod@dividend+2,f,c
 11602  001FDA  5023               	movf	___llmod@divisor+3,w,c
 11603  001FDC  5A1F               	subwfb	___llmod@dividend+3,f,c
 11604  001FDE                     l4914:
 11605  001FDE  90D8               	bcf	status,0,c
 11606  001FE0  3223               	rrcf	___llmod@divisor+3,f,c
 11607  001FE2  3222               	rrcf	___llmod@divisor+2,f,c
 11608  001FE4  3221               	rrcf	___llmod@divisor+1,f,c
 11609  001FE6  3220               	rrcf	___llmod@divisor,f,c
 11610  001FE8  2E24               	decfsz	___llmod@counter,f,c
 11611  001FEA  D7E8               	goto	l4910
 11612  001FEC                     l1408:
 11613  001FEC  C01C  F01C         	movff	___llmod@dividend,?___llmod
 11614  001FF0  C01D  F01D         	movff	___llmod@dividend+1,?___llmod+1
 11615  001FF4  C01E  F01E         	movff	___llmod@dividend+2,?___llmod+2
 11616  001FF8  C01F  F01F         	movff	___llmod@dividend+3,?___llmod+3
 11617  001FFC  0012               	return		;funcret
 11618  001FFE                     __end_of___llmod:
 11619                           	opt stack 0
 11620                           tosu	equ	0xFFF
 11621                           tosh	equ	0xFFE
 11622                           tosl	equ	0xFFD
 11623                           pclath	equ	0xFFA
 11624                           tblptru	equ	0xFF8
 11625                           tblptrh	equ	0xFF7
 11626                           tblptrl	equ	0xFF6
 11627                           tablat	equ	0xFF5
 11628                           prodh	equ	0xFF4
 11629                           prodl	equ	0xFF3
 11630                           intcon	equ	0xFF2
 11631                           intcon2	equ	0xFF1
 11632                           postinc0	equ	0xFEE
 11633                           wreg	equ	0xFE8
 11634                           indf1	equ	0xFE7
 11635                           plusw1	equ	0xFE3
 11636                           fsr1h	equ	0xFE2
 11637                           fsr1l	equ	0xFE1
 11638                           indf2	equ	0xFDF
 11639                           postinc2	equ	0xFDE
 11640                           postdec2	equ	0xFDD
 11641                           plusw2	equ	0xFDB
 11642                           fsr2h	equ	0xFDA
 11643                           fsr2l	equ	0xFD9
 11644                           status	equ	0xFD8
 11645                           
 11646 ;; *************** function ___lldiv *****************
 11647 ;; Defined at:
 11648 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;  dividend        4   14[COMRAM] unsigned long 
 11651 ;;  divisor         4   18[COMRAM] unsigned long 
 11652 ;; Auto vars:     Size  Location     Type
 11653 ;;  quotient        4   22[COMRAM] unsigned long 
 11654 ;;  counter         1   26[COMRAM] unsigned char 
 11655 ;; Return value:  Size  Location     Type
 11656 ;;                  4   14[COMRAM] unsigned long 
 11657 ;; Registers used:
 11658 ;;		wreg, status,2, status,0
 11659 ;; Tracked objects:
 11660 ;;		On entry : 0/0
 11661 ;;		On exit  : 0/0
 11662 ;;		Unchanged: 0/0
 11663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11664 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11667 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11668 ;;Total ram usage:       13 bytes
 11669 ;; Hardware stack levels used:    1
 11670 ;; Hardware stack levels required when called:    3
 11671 ;; This function calls:
 11672 ;;		Nothing
 11673 ;; This function is called by:
 11674 ;;		_BMP085GetPressure
 11675 ;;		__doprnt
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           	psect	text49
 11680  001DE6                     __ptext49:
 11681                           	opt stack 0
 11682  001DE6                     ___lldiv:
 11683                           	opt stack 23
 11684                           
 11685                           ;incstack = 0
 11686  001DE6  6A17               	clrf	___lldiv@quotient,c
 11687  001DE8  6A18               	clrf	___lldiv@quotient+1,c
 11688  001DEA  6A19               	clrf	___lldiv@quotient+2,c
 11689  001DEC  6A1A               	clrf	___lldiv@quotient+3,c
 11690  001DEE  5013               	movf	___lldiv@divisor,w,c
 11691  001DF0  1014               	iorwf	___lldiv@divisor+1,w,c
 11692  001DF2  1015               	iorwf	___lldiv@divisor+2,w,c
 11693  001DF4  1016               	iorwf	___lldiv@divisor+3,w,c
 11694  001DF6  E029               	bz	l1398
 11695  001DF8  0E01               	movlw	1
 11696  001DFA  6E1B               	movwf	___lldiv@counter,c
 11697  001DFC  D006               	goto	l4888
 11698  001DFE                     l4886:
 11699  001DFE  90D8               	bcf	status,0,c
 11700  001E00  3613               	rlcf	___lldiv@divisor,f,c
 11701  001E02  3614               	rlcf	___lldiv@divisor+1,f,c
 11702  001E04  3615               	rlcf	___lldiv@divisor+2,f,c
 11703  001E06  3616               	rlcf	___lldiv@divisor+3,f,c
 11704  001E08  2A1B               	incf	___lldiv@counter,f,c
 11705  001E0A                     l4888:
 11706  001E0A  AE16               	btfss	___lldiv@divisor+3,7,c
 11707  001E0C  D7F8               	goto	l4886
 11708  001E0E                     l4890:
 11709  001E0E  90D8               	bcf	status,0,c
 11710  001E10  3617               	rlcf	___lldiv@quotient,f,c
 11711  001E12  3618               	rlcf	___lldiv@quotient+1,f,c
 11712  001E14  3619               	rlcf	___lldiv@quotient+2,f,c
 11713  001E16  361A               	rlcf	___lldiv@quotient+3,f,c
 11714  001E18  5013               	movf	___lldiv@divisor,w,c
 11715  001E1A  5C0F               	subwf	___lldiv@dividend,w,c
 11716  001E1C  5014               	movf	___lldiv@divisor+1,w,c
 11717  001E1E  5810               	subwfb	___lldiv@dividend+1,w,c
 11718  001E20  5015               	movf	___lldiv@divisor+2,w,c
 11719  001E22  5811               	subwfb	___lldiv@dividend+2,w,c
 11720  001E24  5016               	movf	___lldiv@divisor+3,w,c
 11721  001E26  5812               	subwfb	___lldiv@dividend+3,w,c
 11722  001E28  E309               	bnc	l4898
 11723  001E2A  5013               	movf	___lldiv@divisor,w,c
 11724  001E2C  5E0F               	subwf	___lldiv@dividend,f,c
 11725  001E2E  5014               	movf	___lldiv@divisor+1,w,c
 11726  001E30  5A10               	subwfb	___lldiv@dividend+1,f,c
 11727  001E32  5015               	movf	___lldiv@divisor+2,w,c
 11728  001E34  5A11               	subwfb	___lldiv@dividend+2,f,c
 11729  001E36  5016               	movf	___lldiv@divisor+3,w,c
 11730  001E38  5A12               	subwfb	___lldiv@dividend+3,f,c
 11731  001E3A  8017               	bsf	___lldiv@quotient,0,c
 11732  001E3C                     l4898:
 11733  001E3C  90D8               	bcf	status,0,c
 11734  001E3E  3216               	rrcf	___lldiv@divisor+3,f,c
 11735  001E40  3215               	rrcf	___lldiv@divisor+2,f,c
 11736  001E42  3214               	rrcf	___lldiv@divisor+1,f,c
 11737  001E44  3213               	rrcf	___lldiv@divisor,f,c
 11738  001E46  2E1B               	decfsz	___lldiv@counter,f,c
 11739  001E48  D7E2               	goto	l4890
 11740  001E4A                     l1398:
 11741  001E4A  C017  F00F         	movff	___lldiv@quotient,?___lldiv
 11742  001E4E  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
 11743  001E52  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
 11744  001E56  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
 11745  001E5A  0012               	return		;funcret
 11746  001E5C                     __end_of___lldiv:
 11747                           	opt stack 0
 11748                           tosu	equ	0xFFF
 11749                           tosh	equ	0xFFE
 11750                           tosl	equ	0xFFD
 11751                           pclath	equ	0xFFA
 11752                           tblptru	equ	0xFF8
 11753                           tblptrh	equ	0xFF7
 11754                           tblptrl	equ	0xFF6
 11755                           tablat	equ	0xFF5
 11756                           prodh	equ	0xFF4
 11757                           prodl	equ	0xFF3
 11758                           intcon	equ	0xFF2
 11759                           intcon2	equ	0xFF1
 11760                           postinc0	equ	0xFEE
 11761                           wreg	equ	0xFE8
 11762                           indf1	equ	0xFE7
 11763                           plusw1	equ	0xFE3
 11764                           fsr1h	equ	0xFE2
 11765                           fsr1l	equ	0xFE1
 11766                           indf2	equ	0xFDF
 11767                           postinc2	equ	0xFDE
 11768                           postdec2	equ	0xFDD
 11769                           plusw2	equ	0xFDB
 11770                           fsr2h	equ	0xFDA
 11771                           fsr2l	equ	0xFD9
 11772                           status	equ	0xFD8
 11773                           
 11774 ;; *************** function ___lmul *****************
 11775 ;; Defined at:
 11776 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 11777 ;; Parameters:    Size  Location     Type
 11778 ;;  multiplier      4   14[COMRAM] unsigned long 
 11779 ;;  multiplicand    4   18[COMRAM] unsigned long 
 11780 ;; Auto vars:     Size  Location     Type
 11781 ;;  product         4   22[COMRAM] unsigned long 
 11782 ;; Return value:  Size  Location     Type
 11783 ;;                  4   14[COMRAM] unsigned long 
 11784 ;; Registers used:
 11785 ;;		wreg, status,2, status,0
 11786 ;; Tracked objects:
 11787 ;;		On entry : 0/0
 11788 ;;		On exit  : 0/0
 11789 ;;		Unchanged: 0/0
 11790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11791 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11794 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11795 ;;Total ram usage:       12 bytes
 11796 ;; Hardware stack levels used:    1
 11797 ;; Hardware stack levels required when called:    3
 11798 ;; This function calls:
 11799 ;;		Nothing
 11800 ;; This function is called by:
 11801 ;;		_BMP085GetTemp
 11802 ;;		_BMP085GetPressure
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           	psect	text50
 11807  00210C                     __ptext50:
 11808                           	opt stack 0
 11809  00210C                     ___lmul:
 11810                           	opt stack 23
 11811                           
 11812                           ;incstack = 0
 11813  00210C  6A17               	clrf	___lmul@product,c
 11814  00210E  6A18               	clrf	___lmul@product+1,c
 11815  002110  6A19               	clrf	___lmul@product+2,c
 11816  002112  6A1A               	clrf	___lmul@product+3,c
 11817  002114                     l1060:
 11818  002114  A00F               	btfss	___lmul@multiplier,0,c
 11819  002116  D008               	goto	l5088
 11820  002118  5013               	movf	___lmul@multiplicand,w,c
 11821  00211A  2617               	addwf	___lmul@product,f,c
 11822  00211C  5014               	movf	___lmul@multiplicand+1,w,c
 11823  00211E  2218               	addwfc	___lmul@product+1,f,c
 11824  002120  5015               	movf	___lmul@multiplicand+2,w,c
 11825  002122  2219               	addwfc	___lmul@product+2,f,c
 11826  002124  5016               	movf	___lmul@multiplicand+3,w,c
 11827  002126  221A               	addwfc	___lmul@product+3,f,c
 11828  002128                     l5088:
 11829  002128  90D8               	bcf	status,0,c
 11830  00212A  3613               	rlcf	___lmul@multiplicand,f,c
 11831  00212C  3614               	rlcf	___lmul@multiplicand+1,f,c
 11832  00212E  3615               	rlcf	___lmul@multiplicand+2,f,c
 11833  002130  3616               	rlcf	___lmul@multiplicand+3,f,c
 11834  002132  90D8               	bcf	status,0,c
 11835  002134  3212               	rrcf	___lmul@multiplier+3,f,c
 11836  002136  3211               	rrcf	___lmul@multiplier+2,f,c
 11837  002138  3210               	rrcf	___lmul@multiplier+1,f,c
 11838  00213A  320F               	rrcf	___lmul@multiplier,f,c
 11839  00213C  500F               	movf	___lmul@multiplier,w,c
 11840  00213E  1010               	iorwf	___lmul@multiplier+1,w,c
 11841  002140  1011               	iorwf	___lmul@multiplier+2,w,c
 11842  002142  1012               	iorwf	___lmul@multiplier+3,w,c
 11843  002144  E1E7               	bnz	l1060
 11844  002146  C017  F00F         	movff	___lmul@product,?___lmul
 11845  00214A  C018  F010         	movff	___lmul@product+1,?___lmul+1
 11846  00214E  C019  F011         	movff	___lmul@product+2,?___lmul+2
 11847  002152  C01A  F012         	movff	___lmul@product+3,?___lmul+3
 11848  002156  0012               	return		;funcret
 11849  002158                     __end_of___lmul:
 11850                           	opt stack 0
 11851                           tosu	equ	0xFFF
 11852                           tosh	equ	0xFFE
 11853                           tosl	equ	0xFFD
 11854                           pclath	equ	0xFFA
 11855                           tblptru	equ	0xFF8
 11856                           tblptrh	equ	0xFF7
 11857                           tblptrl	equ	0xFF6
 11858                           tablat	equ	0xFF5
 11859                           prodh	equ	0xFF4
 11860                           prodl	equ	0xFF3
 11861                           intcon	equ	0xFF2
 11862                           intcon2	equ	0xFF1
 11863                           postinc0	equ	0xFEE
 11864                           wreg	equ	0xFE8
 11865                           indf1	equ	0xFE7
 11866                           plusw1	equ	0xFE3
 11867                           fsr1h	equ	0xFE2
 11868                           fsr1l	equ	0xFE1
 11869                           indf2	equ	0xFDF
 11870                           postinc2	equ	0xFDE
 11871                           postdec2	equ	0xFDD
 11872                           plusw2	equ	0xFDB
 11873                           fsr2h	equ	0xFDA
 11874                           fsr2l	equ	0xFD9
 11875                           status	equ	0xFD8
 11876                           
 11877 ;; *************** function ___aldiv *****************
 11878 ;; Defined at:
 11879 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;  dividend        4   26[COMRAM] long 
 11882 ;;  divisor         4   30[COMRAM] long 
 11883 ;; Auto vars:     Size  Location     Type
 11884 ;;  quotient        4   36[COMRAM] long 
 11885 ;;  sign            1   35[COMRAM] unsigned char 
 11886 ;;  counter         1   34[COMRAM] unsigned char 
 11887 ;; Return value:  Size  Location     Type
 11888 ;;                  4   26[COMRAM] long 
 11889 ;; Registers used:
 11890 ;;		wreg, status,2, status,0
 11891 ;; Tracked objects:
 11892 ;;		On entry : 0/0
 11893 ;;		On exit  : 0/0
 11894 ;;		Unchanged: 0/0
 11895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11896 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;Total ram usage:       14 bytes
 11901 ;; Hardware stack levels used:    1
 11902 ;; Hardware stack levels required when called:    3
 11903 ;; This function calls:
 11904 ;;		Nothing
 11905 ;; This function is called by:
 11906 ;;		_BMP085GetTemp
 11907 ;;		_BMP085GetPressure
 11908 ;; This function uses a non-reentrant model
 11909 ;;
 11910                           
 11911                           	psect	text51
 11912  0019BE                     __ptext51:
 11913                           	opt stack 0
 11914  0019BE                     ___aldiv:
 11915                           	opt stack 23
 11916                           
 11917                           ;incstack = 0
 11918  0019BE  6A24               	clrf	___aldiv@sign,c
 11919  0019C0  AE22               	btfss	___aldiv@divisor+3,7,c
 11920  0019C2  D00A               	goto	l5100
 11921  0019C4  1E22               	comf	___aldiv@divisor+3,f,c
 11922  0019C6  1E21               	comf	___aldiv@divisor+2,f,c
 11923  0019C8  1E20               	comf	___aldiv@divisor+1,f,c
 11924  0019CA  6C1F               	negf	___aldiv@divisor,c
 11925  0019CC  0E00               	movlw	0
 11926  0019CE  2220               	addwfc	___aldiv@divisor+1,f,c
 11927  0019D0  2221               	addwfc	___aldiv@divisor+2,f,c
 11928  0019D2  2222               	addwfc	___aldiv@divisor+3,f,c
 11929  0019D4  0E01               	movlw	1
 11930  0019D6  6E24               	movwf	___aldiv@sign,c
 11931  0019D8                     l5100:
 11932  0019D8  AE1E               	btfss	___aldiv@dividend+3,7,c
 11933  0019DA  D00A               	goto	l5106
 11934  0019DC  1E1E               	comf	___aldiv@dividend+3,f,c
 11935  0019DE  1E1D               	comf	___aldiv@dividend+2,f,c
 11936  0019E0  1E1C               	comf	___aldiv@dividend+1,f,c
 11937  0019E2  6C1B               	negf	___aldiv@dividend,c
 11938  0019E4  0E00               	movlw	0
 11939  0019E6  221C               	addwfc	___aldiv@dividend+1,f,c
 11940  0019E8  221D               	addwfc	___aldiv@dividend+2,f,c
 11941  0019EA  221E               	addwfc	___aldiv@dividend+3,f,c
 11942  0019EC  0E01               	movlw	1
 11943  0019EE  1A24               	xorwf	___aldiv@sign,f,c
 11944  0019F0                     l5106:
 11945  0019F0  6A25               	clrf	___aldiv@quotient,c
 11946  0019F2  6A26               	clrf	___aldiv@quotient+1,c
 11947  0019F4  6A27               	clrf	___aldiv@quotient+2,c
 11948  0019F6  6A28               	clrf	___aldiv@quotient+3,c
 11949  0019F8  501F               	movf	___aldiv@divisor,w,c
 11950  0019FA  1020               	iorwf	___aldiv@divisor+1,w,c
 11951  0019FC  1021               	iorwf	___aldiv@divisor+2,w,c
 11952  0019FE  1022               	iorwf	___aldiv@divisor+3,w,c
 11953  001A00  E029               	bz	l5128
 11954  001A02  0E01               	movlw	1
 11955  001A04  6E23               	movwf	___aldiv@counter,c
 11956  001A06  D006               	goto	l5114
 11957  001A08                     l5112:
 11958  001A08  90D8               	bcf	status,0,c
 11959  001A0A  361F               	rlcf	___aldiv@divisor,f,c
 11960  001A0C  3620               	rlcf	___aldiv@divisor+1,f,c
 11961  001A0E  3621               	rlcf	___aldiv@divisor+2,f,c
 11962  001A10  3622               	rlcf	___aldiv@divisor+3,f,c
 11963  001A12  2A23               	incf	___aldiv@counter,f,c
 11964  001A14                     l5114:
 11965  001A14  AE22               	btfss	___aldiv@divisor+3,7,c
 11966  001A16  D7F8               	goto	l5112
 11967  001A18                     l5116:
 11968  001A18  90D8               	bcf	status,0,c
 11969  001A1A  3625               	rlcf	___aldiv@quotient,f,c
 11970  001A1C  3626               	rlcf	___aldiv@quotient+1,f,c
 11971  001A1E  3627               	rlcf	___aldiv@quotient+2,f,c
 11972  001A20  3628               	rlcf	___aldiv@quotient+3,f,c
 11973  001A22  501F               	movf	___aldiv@divisor,w,c
 11974  001A24  5C1B               	subwf	___aldiv@dividend,w,c
 11975  001A26  5020               	movf	___aldiv@divisor+1,w,c
 11976  001A28  581C               	subwfb	___aldiv@dividend+1,w,c
 11977  001A2A  5021               	movf	___aldiv@divisor+2,w,c
 11978  001A2C  581D               	subwfb	___aldiv@dividend+2,w,c
 11979  001A2E  5022               	movf	___aldiv@divisor+3,w,c
 11980  001A30  581E               	subwfb	___aldiv@dividend+3,w,c
 11981  001A32  E309               	bnc	l5124
 11982  001A34  501F               	movf	___aldiv@divisor,w,c
 11983  001A36  5E1B               	subwf	___aldiv@dividend,f,c
 11984  001A38  5020               	movf	___aldiv@divisor+1,w,c
 11985  001A3A  5A1C               	subwfb	___aldiv@dividend+1,f,c
 11986  001A3C  5021               	movf	___aldiv@divisor+2,w,c
 11987  001A3E  5A1D               	subwfb	___aldiv@dividend+2,f,c
 11988  001A40  5022               	movf	___aldiv@divisor+3,w,c
 11989  001A42  5A1E               	subwfb	___aldiv@dividend+3,f,c
 11990  001A44  8025               	bsf	___aldiv@quotient,0,c
 11991  001A46                     l5124:
 11992  001A46  90D8               	bcf	status,0,c
 11993  001A48  3222               	rrcf	___aldiv@divisor+3,f,c
 11994  001A4A  3221               	rrcf	___aldiv@divisor+2,f,c
 11995  001A4C  3220               	rrcf	___aldiv@divisor+1,f,c
 11996  001A4E  321F               	rrcf	___aldiv@divisor,f,c
 11997  001A50  2E23               	decfsz	___aldiv@counter,f,c
 11998  001A52  D7E2               	goto	l5116
 11999  001A54                     l5128:
 12000  001A54  5024               	movf	___aldiv@sign,w,c
 12001  001A56  E008               	bz	l5132
 12002  001A58  1E28               	comf	___aldiv@quotient+3,f,c
 12003  001A5A  1E27               	comf	___aldiv@quotient+2,f,c
 12004  001A5C  1E26               	comf	___aldiv@quotient+1,f,c
 12005  001A5E  6C25               	negf	___aldiv@quotient,c
 12006  001A60  0E00               	movlw	0
 12007  001A62  2226               	addwfc	___aldiv@quotient+1,f,c
 12008  001A64  2227               	addwfc	___aldiv@quotient+2,f,c
 12009  001A66  2228               	addwfc	___aldiv@quotient+3,f,c
 12010  001A68                     l5132:
 12011  001A68  C025  F01B         	movff	___aldiv@quotient,?___aldiv
 12012  001A6C  C026  F01C         	movff	___aldiv@quotient+1,?___aldiv+1
 12013  001A70  C027  F01D         	movff	___aldiv@quotient+2,?___aldiv+2
 12014  001A74  C028  F01E         	movff	___aldiv@quotient+3,?___aldiv+3
 12015  001A78  0012               	return		;funcret
 12016  001A7A                     __end_of___aldiv:
 12017                           	opt stack 0
 12018                           tosu	equ	0xFFF
 12019                           tosh	equ	0xFFE
 12020                           tosl	equ	0xFFD
 12021                           pclath	equ	0xFFA
 12022                           tblptru	equ	0xFF8
 12023                           tblptrh	equ	0xFF7
 12024                           tblptrl	equ	0xFF6
 12025                           tablat	equ	0xFF5
 12026                           prodh	equ	0xFF4
 12027                           prodl	equ	0xFF3
 12028                           intcon	equ	0xFF2
 12029                           intcon2	equ	0xFF1
 12030                           postinc0	equ	0xFEE
 12031                           wreg	equ	0xFE8
 12032                           indf1	equ	0xFE7
 12033                           plusw1	equ	0xFE3
 12034                           fsr1h	equ	0xFE2
 12035                           fsr1l	equ	0xFE1
 12036                           indf2	equ	0xFDF
 12037                           postinc2	equ	0xFDE
 12038                           postdec2	equ	0xFDD
 12039                           plusw2	equ	0xFDB
 12040                           fsr2h	equ	0xFDA
 12041                           fsr2l	equ	0xFD9
 12042                           status	equ	0xFD8
 12043                           
 12044 ;; *************** function _scroll_left *****************
 12045 ;; Defined at:
 12046 ;;		line 275 in file "display.c"
 12047 ;; Parameters:    Size  Location     Type
 12048 ;;		None
 12049 ;; Auto vars:     Size  Location     Type
 12050 ;;  i               1   24[COMRAM] unsigned char 
 12051 ;;  speed           1   23[COMRAM] unsigned char 
 12052 ;;  k               1   22[COMRAM] unsigned char 
 12053 ;;  j               1   21[COMRAM] unsigned char 
 12054 ;; Return value:  Size  Location     Type
 12055 ;;                  1    wreg      void 
 12056 ;; Registers used:
 12057 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 3F/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;Total ram usage:        5 bytes
 12068 ;; Hardware stack levels used:    1
 12069 ;; Hardware stack levels required when called:    5
 12070 ;; This function calls:
 12071 ;;		_Update_Matrix
 12072 ;; This function is called by:
 12073 ;;		_home_temp
 12074 ;;		_time_led
 12075 ;; This function uses a non-reentrant model
 12076 ;;
 12077                           
 12078                           	psect	text52
 12079  00205E                     __ptext52:
 12080                           	opt stack 0
 12081  00205E                     _scroll_left:
 12082                           	opt stack 23
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;display.c: 277: uint8_t i,j,k,speed = 100;
 12086                           
 12087                           ;incstack = 0
 12088  00205E  0E64               	movlw	100
 12089  002060  6E18               	movwf	scroll_left@speed,c
 12090                           
 12091                           ; BSR set to: 0
 12092                           ;display.c: 280: for (k=0;k<=31;k++)
 12093  002062  6A17               	clrf	scroll_left@k,c
 12094  002064                     l423:
 12095                           
 12096                           ;display.c: 281: {
 12097                           ;display.c: 282: for (i=0; i<=31; i++)
 12098  002064  6A19               	clrf	scroll_left@i,c
 12099  002066                     l5662:
 12100                           
 12101                           ;display.c: 283: Dis_Buff[i] = Dis_Buff[i+1];
 12102  002066  5019               	movf	scroll_left@i,w,c
 12103  002068  0FAE               	addlw	low (_Dis_Buff+1)
 12104  00206A  6ED9               	movwf	fsr2l,c
 12105  00206C  6ADA               	clrf	fsr2h,c
 12106  00206E  5019               	movf	scroll_left@i,w,c
 12107  002070  0FAD               	addlw	low _Dis_Buff
 12108  002072  6EE1               	movwf	fsr1l,c
 12109  002074  6AE2               	clrf	fsr1h,c
 12110  002076  CFDF FFE7          	movff	indf2,indf1
 12111  00207A  2A19               	incf	scroll_left@i,f,c
 12112  00207C  0E1F               	movlw	31
 12113  00207E  6419               	cpfsgt	scroll_left@i,c
 12114  002080  D7F2               	goto	l5662
 12115                           
 12116                           ;display.c: 285: Dis_Buff[31] = 0;
 12117  002082  0100               	movlb	0	; () banked
 12118  002084  6BCC               	clrf	(_Dis_Buff+31)& (0+255),b
 12119                           
 12120                           ; BSR set to: 0
 12121                           ;display.c: 286: Update_Matrix(Dis_Buff);
 12122  002086  0EAD               	movlw	low _Dis_Buff
 12123  002088  6E11               	movwf	Update_Matrix@buf,c
 12124  00208A  EC77  F011         	call	_Update_Matrix
 12125                           
 12126                           ;display.c: 287: for(j=0; j<speed; j++)
 12127  00208E  6A16               	clrf	scroll_left@j,c
 12128  002090  D008               	goto	l427
 12129  002092                     l5672:
 12130                           
 12131                           ;display.c: 288: _delay((unsigned long)((1)*(40000000/4000.0)));
 12132  002092  0E0D               	movlw	13
 12133  002094  6E15               	movwf	??_scroll_left& (0+255),c
 12134  002096  0EFC               	movlw	252
 12135  002098                     u4957:
 12136  002098  2EE8               	decfsz	wreg,f,c
 12137  00209A  D7FE               	bra	u4957
 12138  00209C  2E15               	decfsz	??_scroll_left& (0+255),f,c
 12139  00209E  D7FC               	bra	u4957
 12140  0020A0  2A16               	incf	scroll_left@j,f,c
 12141  0020A2                     l427:
 12142  0020A2  5018               	movf	scroll_left@speed,w,c
 12143  0020A4  5C16               	subwf	scroll_left@j,w,c
 12144  0020A6  E3F5               	bnc	l5672
 12145                           
 12146                           ;display.c: 289: if (speed > 10) speed -=10;
 12147  0020A8  0E0A               	movlw	10
 12148  0020AA  6418               	cpfsgt	scroll_left@speed,c
 12149  0020AC  D001               	goto	l5680
 12150  0020AE  5E18               	subwf	scroll_left@speed,f,c
 12151  0020B0                     l5680:
 12152  0020B0  2A17               	incf	scroll_left@k,f,c
 12153  0020B2  0E1F               	movlw	31
 12154  0020B4  6417               	cpfsgt	scroll_left@k,c
 12155  0020B6  D7D6               	goto	l423
 12156  0020B8  0C1F               	retlw	31
 12157  0020BA                     __end_of_scroll_left:
 12158                           	opt stack 0
 12159                           tosu	equ	0xFFF
 12160                           tosh	equ	0xFFE
 12161                           tosl	equ	0xFFD
 12162                           pclath	equ	0xFFA
 12163                           tblptru	equ	0xFF8
 12164                           tblptrh	equ	0xFF7
 12165                           tblptrl	equ	0xFF6
 12166                           tablat	equ	0xFF5
 12167                           prodh	equ	0xFF4
 12168                           prodl	equ	0xFF3
 12169                           intcon	equ	0xFF2
 12170                           intcon2	equ	0xFF1
 12171                           postinc0	equ	0xFEE
 12172                           wreg	equ	0xFE8
 12173                           indf1	equ	0xFE7
 12174                           plusw1	equ	0xFE3
 12175                           fsr1h	equ	0xFE2
 12176                           fsr1l	equ	0xFE1
 12177                           indf2	equ	0xFDF
 12178                           postinc2	equ	0xFDE
 12179                           postdec2	equ	0xFDD
 12180                           plusw2	equ	0xFDB
 12181                           fsr2h	equ	0xFDA
 12182                           fsr2l	equ	0xFD9
 12183                           status	equ	0xFD8
 12184                           
 12185 ;; *************** function _putchar_down_s *****************
 12186 ;; Defined at:
 12187 ;;		line 120 in file "display.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;  x               1    wreg     unsigned char 
 12190 ;;  symbol          1   22[COMRAM] unsigned char 
 12191 ;; Auto vars:     Size  Location     Type
 12192 ;;  x               1   28[COMRAM] unsigned char 
 12193 ;;  i               1   31[COMRAM] unsigned char 
 12194 ;;  j               1   30[COMRAM] unsigned char 
 12195 ;;  k               1   29[COMRAM] unsigned char 
 12196 ;; Return value:  Size  Location     Type
 12197 ;;                  1    wreg      void 
 12198 ;; Registers used:
 12199 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12200 ;; Tracked objects:
 12201 ;;		On entry : 0/0
 12202 ;;		On exit  : 0/0
 12203 ;;		Unchanged: 0/0
 12204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12205 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12206 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12207 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12208 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12209 ;;Total ram usage:       10 bytes
 12210 ;; Hardware stack levels used:    1
 12211 ;; Hardware stack levels required when called:    5
 12212 ;; This function calls:
 12213 ;;		_Update_Matrix
 12214 ;; This function is called by:
 12215 ;;		_home_temp
 12216 ;; This function uses a non-reentrant model
 12217 ;;
 12218                           
 12219                           	psect	text53
 12220  001B2C                     __ptext53:
 12221                           	opt stack 0
 12222  001B2C                     _putchar_down_s:
 12223                           	opt stack 23
 12224                           
 12225                           ;incstack = 0
 12226                           ;putchar_down_s@x stored from wreg
 12227  001B2C  6E1D               	movwf	putchar_down_s@x,c
 12228                           
 12229                           ;display.c: 122: uint8_t i, j, k;
 12230                           ;display.c: 127: for(j=0;j<=7;j++)
 12231  001B2E  6A1F               	clrf	putchar_down_s@j,c
 12232  001B30                     l379:
 12233                           
 12234                           ;display.c: 128: {
 12235                           ;display.c: 129: for(i=0;i<3;i++)
 12236  001B30  6A20               	clrf	putchar_down_s@i,c
 12237  001B32                     l5590:
 12238                           
 12239                           ;display.c: 130: {
 12240                           ;display.c: 131: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | (FontS[symbol][i] >> (8-1-j));
 12241  001B32  501D               	movf	putchar_down_s@x,w,c
 12242  001B34  0FAD               	addlw	low _Dis_Buff
 12243  001B36  2420               	addwf	putchar_down_s@i,w,c
 12244  001B38  6ED9               	movwf	fsr2l,c
 12245  001B3A  6ADA               	clrf	fsr2h,c
 12246  001B3C  501F               	movf	putchar_down_s@j,w,c
 12247  001B3E  0807               	sublw	7
 12248  001B40  6E18               	movwf	??_putchar_down_s& (0+255),c
 12249  001B42  5017               	movf	putchar_down_s@symbol,w,c
 12250  001B44  0D03               	mullw	3
 12251  001B46  0EC9               	movlw	low _FontS
 12252  001B48  6E19               	movwf	(??_putchar_down_s+1)& (0+255),c
 12253  001B4A  0EBE               	movlw	high _FontS
 12254  001B4C  6E1A               	movwf	(??_putchar_down_s+2)& (0+255),c
 12255  001B4E  50F3               	movf	prodl,w,c
 12256  001B50  2619               	addwf	??_putchar_down_s+1,f,c
 12257  001B52  50F4               	movf	prodh,w,c
 12258  001B54  221A               	addwfc	??_putchar_down_s+2,f,c
 12259  001B56  5020               	movf	putchar_down_s@i,w,c
 12260  001B58  2619               	addwf	??_putchar_down_s+1,f,c
 12261  001B5A  0E00               	movlw	0
 12262  001B5C  221A               	addwfc	??_putchar_down_s+2,f,c
 12263  001B5E  C019  FFF6         	movff	??_putchar_down_s+1,tblptrl
 12264  001B62  C01A  FFF7         	movff	??_putchar_down_s+2,tblptrh
 12265  001B66                     	if	0	;tblptru may be non-zero
 12266  001B66                     	endif
 12267  001B66                     	if	0	;tblptru may be non-zero
 12268  001B66                     	endif
 12269  001B66  0008               	tblrd		*
 12270  001B68  CFF5 F01B          	movff	tablat,??_putchar_down_s+3
 12271  001B6C  2A18               	incf	??_putchar_down_s,f,c
 12272  001B6E  D002               	goto	u4074
 12273  001B70                     u4075:
 12274  001B70  90D8               	bcf	status,0,c
 12275  001B72  321B               	rrcf	??_putchar_down_s+3,f,c
 12276  001B74                     u4074:
 12277  001B74  2E18               	decfsz	??_putchar_down_s,f,c
 12278  001B76  D7FC               	goto	u4075
 12279  001B78  501D               	movf	putchar_down_s@x,w,c
 12280  001B7A  0FAD               	addlw	low _Dis_Buff
 12281  001B7C  2420               	addwf	putchar_down_s@i,w,c
 12282  001B7E  6EE1               	movwf	fsr1l,c
 12283  001B80  6AE2               	clrf	fsr1h,c
 12284  001B82  50E7               	movf	indf1,w,c
 12285  001B84  6E1C               	movwf	(??_putchar_down_s+4)& (0+255),c
 12286  001B86  90D8               	bcf	status,0,c
 12287  001B88  341C               	rlcf	??_putchar_down_s+4,w,c
 12288  001B8A  101B               	iorwf	??_putchar_down_s+3,w,c
 12289  001B8C  6EDF               	movwf	indf2,c
 12290  001B8E  2A20               	incf	putchar_down_s@i,f,c
 12291  001B90  0E02               	movlw	2
 12292  001B92  6420               	cpfsgt	putchar_down_s@i,c
 12293  001B94  D7CE               	goto	l5590
 12294                           
 12295                           ;display.c: 132: }
 12296                           ;display.c: 134: for(k=0;k<20;k++)
 12297  001B96  6A1E               	clrf	putchar_down_s@k,c
 12298  001B98                     l5600:
 12299                           
 12300                           ;display.c: 135: _delay((unsigned long)((1)*(40000000/4000.0)));
 12301  001B98  0E0D               	movlw	13
 12302  001B9A  6E18               	movwf	??_putchar_down_s& (0+255),c
 12303  001B9C  0EFC               	movlw	252
 12304  001B9E                     u4967:
 12305  001B9E  2EE8               	decfsz	wreg,f,c
 12306  001BA0  D7FE               	bra	u4967
 12307  001BA2  2E18               	decfsz	??_putchar_down_s& (0+255),f,c
 12308  001BA4  D7FC               	bra	u4967
 12309  001BA6  2A1E               	incf	putchar_down_s@k,f,c
 12310  001BA8  0E13               	movlw	19
 12311  001BAA  641E               	cpfsgt	putchar_down_s@k,c
 12312  001BAC  D7F5               	goto	l5600
 12313                           
 12314                           ;display.c: 136: Update_Matrix(Dis_Buff);
 12315  001BAE  0EAD               	movlw	low _Dis_Buff
 12316  001BB0  6E11               	movwf	Update_Matrix@buf,c
 12317  001BB2  EC77  F011         	call	_Update_Matrix	;wreg free
 12318  001BB6  2A1F               	incf	putchar_down_s@j,f,c
 12319  001BB8  0E07               	movlw	7
 12320  001BBA  641F               	cpfsgt	putchar_down_s@j,c
 12321  001BBC  D7B9               	goto	l379
 12322  001BBE  0C07               	retlw	7
 12323  001BC0                     __end_of_putchar_down_s:
 12324                           	opt stack 0
 12325                           tosu	equ	0xFFF
 12326                           tosh	equ	0xFFE
 12327                           tosl	equ	0xFFD
 12328                           pclath	equ	0xFFA
 12329                           tblptru	equ	0xFF8
 12330                           tblptrh	equ	0xFF7
 12331                           tblptrl	equ	0xFF6
 12332                           tablat	equ	0xFF5
 12333                           prodh	equ	0xFF4
 12334                           prodl	equ	0xFF3
 12335                           intcon	equ	0xFF2
 12336                           intcon2	equ	0xFF1
 12337                           postinc0	equ	0xFEE
 12338                           wreg	equ	0xFE8
 12339                           indf1	equ	0xFE7
 12340                           plusw1	equ	0xFE3
 12341                           fsr1h	equ	0xFE2
 12342                           fsr1l	equ	0xFE1
 12343                           indf2	equ	0xFDF
 12344                           postinc2	equ	0xFDE
 12345                           postdec2	equ	0xFDD
 12346                           plusw2	equ	0xFDB
 12347                           fsr2h	equ	0xFDA
 12348                           fsr2l	equ	0xFD9
 12349                           status	equ	0xFD8
 12350                           
 12351 ;; *************** function _putchar_down *****************
 12352 ;; Defined at:
 12353 ;;		line 98 in file "display.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;  x               1    wreg     unsigned char 
 12356 ;;  symbol          1   26[COMRAM] unsigned char 
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  x               1   32[COMRAM] unsigned char 
 12359 ;;  i               1   35[COMRAM] unsigned char 
 12360 ;;  j               1   34[COMRAM] unsigned char 
 12361 ;;  k               1   33[COMRAM] unsigned char 
 12362 ;; Return value:  Size  Location     Type
 12363 ;;                  1    wreg      void 
 12364 ;; Registers used:
 12365 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12366 ;; Tracked objects:
 12367 ;;		On entry : 0/0
 12368 ;;		On exit  : 0/0
 12369 ;;		Unchanged: 0/0
 12370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12371 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12372 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12375 ;;Total ram usage:       10 bytes
 12376 ;; Hardware stack levels used:    1
 12377 ;; Hardware stack levels required when called:    5
 12378 ;; This function calls:
 12379 ;;		_Update_Matrix
 12380 ;; This function is called by:
 12381 ;;		_home_temp
 12382 ;; This function uses a non-reentrant model
 12383 ;;
 12384                           
 12385                           	psect	text54
 12386  001BC0                     __ptext54:
 12387                           	opt stack 0
 12388  001BC0                     _putchar_down:
 12389                           	opt stack 23
 12390                           
 12391                           ;incstack = 0
 12392                           ;putchar_down@x stored from wreg
 12393  001BC0  6E21               	movwf	putchar_down@x,c
 12394                           
 12395                           ;display.c: 100: uint8_t i, j, k;
 12396                           ;display.c: 102: for(j=0;j<=7;j++)
 12397  001BC2  6A23               	clrf	putchar_down@j,c
 12398  001BC4                     l370:
 12399                           
 12400                           ;display.c: 103: {
 12401                           ;display.c: 104: for(i=0;i<5;i++)
 12402  001BC4  6A24               	clrf	putchar_down@i,c
 12403  001BC6                     l5560:
 12404                           
 12405                           ;display.c: 105: {
 12406                           ;display.c: 106: Dis_Buff[x+i] = (Dis_Buff[x+i]<<1) | (Font[symbol][i] >> (8-1-j));
 12407  001BC6  5021               	movf	putchar_down@x,w,c
 12408  001BC8  0FAD               	addlw	low _Dis_Buff
 12409  001BCA  2424               	addwf	putchar_down@i,w,c
 12410  001BCC  6ED9               	movwf	fsr2l,c
 12411  001BCE  6ADA               	clrf	fsr2h,c
 12412  001BD0  5023               	movf	putchar_down@j,w,c
 12413  001BD2  0807               	sublw	7
 12414  001BD4  6E1C               	movwf	??_putchar_down& (0+255),c
 12415  001BD6  501B               	movf	putchar_down@symbol,w,c
 12416  001BD8  0D05               	mullw	5
 12417  001BDA  0EC9               	movlw	low _Font
 12418  001BDC  6E1D               	movwf	(??_putchar_down+1)& (0+255),c
 12419  001BDE  0EB9               	movlw	high _Font
 12420  001BE0  6E1E               	movwf	(??_putchar_down+2)& (0+255),c
 12421  001BE2  50F3               	movf	prodl,w,c
 12422  001BE4  261D               	addwf	??_putchar_down+1,f,c
 12423  001BE6  50F4               	movf	prodh,w,c
 12424  001BE8  221E               	addwfc	??_putchar_down+2,f,c
 12425  001BEA  5024               	movf	putchar_down@i,w,c
 12426  001BEC  261D               	addwf	??_putchar_down+1,f,c
 12427  001BEE  0E00               	movlw	0
 12428  001BF0  221E               	addwfc	??_putchar_down+2,f,c
 12429  001BF2  C01D  FFF6         	movff	??_putchar_down+1,tblptrl
 12430  001BF6  C01E  FFF7         	movff	??_putchar_down+2,tblptrh
 12431  001BFA                     	if	0	;tblptru may be non-zero
 12432  001BFA                     	endif
 12433  001BFA                     	if	0	;tblptru may be non-zero
 12434  001BFA                     	endif
 12435  001BFA  0008               	tblrd		*
 12436  001BFC  CFF5 F01F          	movff	tablat,??_putchar_down+3
 12437  001C00  2A1C               	incf	??_putchar_down,f,c
 12438  001C02  D002               	goto	u4034
 12439  001C04                     u4035:
 12440  001C04  90D8               	bcf	status,0,c
 12441  001C06  321F               	rrcf	??_putchar_down+3,f,c
 12442  001C08                     u4034:
 12443  001C08  2E1C               	decfsz	??_putchar_down,f,c
 12444  001C0A  D7FC               	goto	u4035
 12445  001C0C  5021               	movf	putchar_down@x,w,c
 12446  001C0E  0FAD               	addlw	low _Dis_Buff
 12447  001C10  2424               	addwf	putchar_down@i,w,c
 12448  001C12  6EE1               	movwf	fsr1l,c
 12449  001C14  6AE2               	clrf	fsr1h,c
 12450  001C16  50E7               	movf	indf1,w,c
 12451  001C18  6E20               	movwf	(??_putchar_down+4)& (0+255),c
 12452  001C1A  90D8               	bcf	status,0,c
 12453  001C1C  3420               	rlcf	??_putchar_down+4,w,c
 12454  001C1E  101F               	iorwf	??_putchar_down+3,w,c
 12455  001C20  6EDF               	movwf	indf2,c
 12456  001C22  2A24               	incf	putchar_down@i,f,c
 12457  001C24  0E04               	movlw	4
 12458  001C26  6424               	cpfsgt	putchar_down@i,c
 12459  001C28  D7CE               	goto	l5560
 12460                           
 12461                           ;display.c: 107: }
 12462                           ;display.c: 109: for(k=0;k<20;k++)
 12463  001C2A  6A22               	clrf	putchar_down@k,c
 12464  001C2C                     l5570:
 12465                           
 12466                           ;display.c: 110: _delay((unsigned long)((1)*(40000000/4000.0)));
 12467  001C2C  0E0D               	movlw	13
 12468  001C2E  6E1C               	movwf	??_putchar_down& (0+255),c
 12469  001C30  0EFC               	movlw	252
 12470  001C32                     u4977:
 12471  001C32  2EE8               	decfsz	wreg,f,c
 12472  001C34  D7FE               	bra	u4977
 12473  001C36  2E1C               	decfsz	??_putchar_down& (0+255),f,c
 12474  001C38  D7FC               	bra	u4977
 12475  001C3A  2A22               	incf	putchar_down@k,f,c
 12476  001C3C  0E13               	movlw	19
 12477  001C3E  6422               	cpfsgt	putchar_down@k,c
 12478  001C40  D7F5               	goto	l5570
 12479                           
 12480                           ;display.c: 111: Update_Matrix(Dis_Buff);
 12481  001C42  0EAD               	movlw	low _Dis_Buff
 12482  001C44  6E11               	movwf	Update_Matrix@buf,c
 12483  001C46  EC77  F011         	call	_Update_Matrix	;wreg free
 12484  001C4A  2A23               	incf	putchar_down@j,f,c
 12485  001C4C  0E07               	movlw	7
 12486  001C4E  6423               	cpfsgt	putchar_down@j,c
 12487  001C50  D7B9               	goto	l370
 12488  001C52  0C07               	retlw	7
 12489  001C54                     __end_of_putchar_down:
 12490                           	opt stack 0
 12491                           tosu	equ	0xFFF
 12492                           tosh	equ	0xFFE
 12493                           tosl	equ	0xFFD
 12494                           pclath	equ	0xFFA
 12495                           tblptru	equ	0xFF8
 12496                           tblptrh	equ	0xFF7
 12497                           tblptrl	equ	0xFF6
 12498                           tablat	equ	0xFF5
 12499                           prodh	equ	0xFF4
 12500                           prodl	equ	0xFF3
 12501                           intcon	equ	0xFF2
 12502                           intcon2	equ	0xFF1
 12503                           postinc0	equ	0xFEE
 12504                           wreg	equ	0xFE8
 12505                           indf1	equ	0xFE7
 12506                           plusw1	equ	0xFE3
 12507                           fsr1h	equ	0xFE2
 12508                           fsr1l	equ	0xFE1
 12509                           indf2	equ	0xFDF
 12510                           postinc2	equ	0xFDE
 12511                           postdec2	equ	0xFDD
 12512                           plusw2	equ	0xFDB
 12513                           fsr2h	equ	0xFDA
 12514                           fsr2l	equ	0xFD9
 12515                           status	equ	0xFD8
 12516                           
 12517 ;; *************** function _Update_Matrix *****************
 12518 ;; Defined at:
 12519 ;;		line 51 in file "max7221.c"
 12520 ;; Parameters:    Size  Location     Type
 12521 ;;  buf             1   16[COMRAM] PTR unsigned char 
 12522 ;;		 -> Dis_Buff(32), 
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;  i               1   19[COMRAM] unsigned char 
 12525 ;;  j               1   18[COMRAM] unsigned char 
 12526 ;;  data            1   17[COMRAM] unsigned char 
 12527 ;; Return value:  Size  Location     Type
 12528 ;;                  1    wreg      void 
 12529 ;; Registers used:
 12530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12531 ;; Tracked objects:
 12532 ;;		On entry : 0/0
 12533 ;;		On exit  : 0/0
 12534 ;;		Unchanged: 0/0
 12535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12536 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12537 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12539 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12540 ;;Total ram usage:        4 bytes
 12541 ;; Hardware stack levels used:    1
 12542 ;; Hardware stack levels required when called:    4
 12543 ;; This function calls:
 12544 ;;		_Send_Byte_7221
 12545 ;; This function is called by:
 12546 ;;		_putchar_down
 12547 ;;		_putchar_down_s
 12548 ;;		_scroll_left
 12549 ;;		_time_set_min
 12550 ;;		_time_set_hr
 12551 ;;		_time_set_yr
 12552 ;;		_time_set_mt
 12553 ;;		_time_set_dt
 12554 ;;		_time_set_dy
 12555 ;;		_time_led
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559                           	psect	text55
 12560  0022EE                     __ptext55:
 12561                           	opt stack 0
 12562  0022EE                     _Update_Matrix:
 12563                           	opt stack 24
 12564                           
 12565                           ;max7221.c: 53: uint8_t i, j, data;
 12566                           ;max7221.c: 56: for (i = 0; i < 8; i++)
 12567                           
 12568                           ;incstack = 0
 12569  0022EE  6A14               	clrf	Update_Matrix@i,c
 12570  0022F0                     l299:
 12571                           
 12572                           ;max7221.c: 57: {
 12573                           ;max7221.c: 58: LATDbits.LD0 = 0;
 12574  0022F0  908C               	bcf	3980,0,c	;volatile
 12575                           
 12576                           ;max7221.c: 59: for (j = 0; j < 4; j++)
 12577  0022F2  6A13               	clrf	Update_Matrix@j,c
 12578  0022F4                     l5190:
 12579                           
 12580                           ;max7221.c: 60: {
 12581                           ;max7221.c: 62: data = buf[8 * (4 - 1 - j) + i];
 12582  0022F4  5013               	movf	Update_Matrix@j,w,c
 12583  0022F6  0DF8               	mullw	-8
 12584  0022F8  5011               	movf	Update_Matrix@buf,w,c
 12585  0022FA  24F3               	addwf	prodl,w,c
 12586  0022FC  2414               	addwf	Update_Matrix@i,w,c
 12587  0022FE  6ED9               	movwf	fsr2l,c
 12588  002300  6ADA               	clrf	fsr2h,c
 12589  002302  0E18               	movlw	24
 12590  002304  26D9               	addwf	fsr2l,f,c
 12591  002306  50DF               	movf	indf2,w,c
 12592  002308  6E12               	movwf	Update_Matrix@data,c
 12593                           
 12594                           ;max7221.c: 64: Send_Byte_7221(1 + i);
 12595  00230A  2814               	incf	Update_Matrix@i,w,c
 12596  00230C  EC2E  F013         	call	_Send_Byte_7221
 12597                           
 12598                           ;max7221.c: 65: Send_Byte_7221(data);
 12599  002310  5012               	movf	Update_Matrix@data,w,c
 12600  002312  EC2E  F013         	call	_Send_Byte_7221
 12601  002316  2A13               	incf	Update_Matrix@j,f,c
 12602  002318  0E03               	movlw	3
 12603  00231A  6413               	cpfsgt	Update_Matrix@j,c
 12604  00231C  D7EB               	goto	l5190
 12605                           
 12606                           ;max7221.c: 66: }
 12607                           ;max7221.c: 67: LATDbits.LD0 = 1;
 12608  00231E  808C               	bsf	3980,0,c	;volatile
 12609  002320  2A14               	incf	Update_Matrix@i,f,c
 12610  002322  0E07               	movlw	7
 12611  002324  6414               	cpfsgt	Update_Matrix@i,c
 12612  002326  D7E4               	goto	l299
 12613  002328  0C07               	retlw	7
 12614  00232A                     __end_of_Update_Matrix:
 12615                           	opt stack 0
 12616                           tosu	equ	0xFFF
 12617                           tosh	equ	0xFFE
 12618                           tosl	equ	0xFFD
 12619                           pclath	equ	0xFFA
 12620                           tblptru	equ	0xFF8
 12621                           tblptrh	equ	0xFF7
 12622                           tblptrl	equ	0xFF6
 12623                           tablat	equ	0xFF5
 12624                           prodh	equ	0xFF4
 12625                           prodl	equ	0xFF3
 12626                           intcon	equ	0xFF2
 12627                           intcon2	equ	0xFF1
 12628                           postinc0	equ	0xFEE
 12629                           wreg	equ	0xFE8
 12630                           indf1	equ	0xFE7
 12631                           plusw1	equ	0xFE3
 12632                           fsr1h	equ	0xFE2
 12633                           fsr1l	equ	0xFE1
 12634                           indf2	equ	0xFDF
 12635                           postinc2	equ	0xFDE
 12636                           postdec2	equ	0xFDD
 12637                           plusw2	equ	0xFDB
 12638                           fsr2h	equ	0xFDA
 12639                           fsr2l	equ	0xFD9
 12640                           status	equ	0xFD8
 12641                           
 12642 ;; *************** function _Send_Byte_7221 *****************
 12643 ;; Defined at:
 12644 ;;		line 6 in file "max7221.c"
 12645 ;; Parameters:    Size  Location     Type
 12646 ;;  dat             1    wreg     unsigned char 
 12647 ;; Auto vars:     Size  Location     Type
 12648 ;;  dat             1   14[COMRAM] unsigned char 
 12649 ;;  i               1   15[COMRAM] unsigned char 
 12650 ;; Return value:  Size  Location     Type
 12651 ;;                  1    wreg      void 
 12652 ;; Registers used:
 12653 ;;		wreg, status,2, status,0
 12654 ;; Tracked objects:
 12655 ;;		On entry : 0/0
 12656 ;;		On exit  : 0/0
 12657 ;;		Unchanged: 0/0
 12658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12662 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12663 ;;Total ram usage:        2 bytes
 12664 ;; Hardware stack levels used:    1
 12665 ;; Hardware stack levels required when called:    3
 12666 ;; This function calls:
 12667 ;;		Nothing
 12668 ;; This function is called by:
 12669 ;;		_Cmd7221
 12670 ;;		_Update_Matrix
 12671 ;; This function uses a non-reentrant model
 12672 ;;
 12673                           
 12674                           	psect	text56
 12675  00265C                     __ptext56:
 12676                           	opt stack 0
 12677  00265C                     _Send_Byte_7221:
 12678                           	opt stack 24
 12679                           
 12680                           ;incstack = 0
 12681                           ;Send_Byte_7221@dat stored from wreg
 12682  00265C  6E0F               	movwf	Send_Byte_7221@dat,c
 12683                           
 12684                           ;max7221.c: 8: uint8_t i;
 12685                           ;max7221.c: 10: for (i = 0; i < 8; i++)
 12686  00265E  6A10               	clrf	Send_Byte_7221@i,c
 12687  002660                     l287:
 12688                           
 12689                           ;max7221.c: 11: {
 12690                           ;max7221.c: 12: if (dat & 0x80)
 12691  002660  AE0F               	btfss	Send_Byte_7221@dat,7,c
 12692  002662  D002               	goto	l289
 12693                           
 12694                           ;max7221.c: 13: LATDbits.LD2 = 1;
 12695  002664  848C               	bsf	3980,2,c	;volatile
 12696  002666  D001               	goto	l290
 12697  002668                     l289:
 12698                           
 12699                           ;max7221.c: 14: else
 12700                           ;max7221.c: 15: LATDbits.LD2 = 0;
 12701  002668  948C               	bcf	3980,2,c	;volatile
 12702  00266A                     l290:
 12703                           
 12704                           ;max7221.c: 16: LATDbits.LD1 = 1;
 12705  00266A  828C               	bsf	3980,1,c	;volatile
 12706  00266C  F000               	nop		;# 
 12707  00266E  F000               	nop		;# 
 12708                           
 12709                           ;max7221.c: 23: LATDbits.LD1 = 0;
 12710  002670  928C               	bcf	3980,1,c	;volatile
 12711                           
 12712                           ;max7221.c: 24: dat <<= 1;
 12713  002672  90D8               	bcf	status,0,c
 12714  002674  360F               	rlcf	Send_Byte_7221@dat,f,c
 12715  002676  2A10               	incf	Send_Byte_7221@i,f,c
 12716  002678  0E07               	movlw	7
 12717  00267A  6410               	cpfsgt	Send_Byte_7221@i,c
 12718  00267C  D7F1               	goto	l287
 12719  00267E  0C07               	retlw	7
 12720  002680                     __end_of_Send_Byte_7221:
 12721                           	opt stack 0
 12722                           tosu	equ	0xFFF
 12723                           tosh	equ	0xFFE
 12724                           tosl	equ	0xFFD
 12725                           pclath	equ	0xFFA
 12726                           tblptru	equ	0xFF8
 12727                           tblptrh	equ	0xFF7
 12728                           tblptrl	equ	0xFF6
 12729                           tablat	equ	0xFF5
 12730                           prodh	equ	0xFF4
 12731                           prodl	equ	0xFF3
 12732                           intcon	equ	0xFF2
 12733                           intcon2	equ	0xFF1
 12734                           postinc0	equ	0xFEE
 12735                           wreg	equ	0xFE8
 12736                           indf1	equ	0xFE7
 12737                           plusw1	equ	0xFE3
 12738                           fsr1h	equ	0xFE2
 12739                           fsr1l	equ	0xFE1
 12740                           indf2	equ	0xFDF
 12741                           postinc2	equ	0xFDE
 12742                           postdec2	equ	0xFDD
 12743                           plusw2	equ	0xFDB
 12744                           fsr2h	equ	0xFDA
 12745                           fsr2l	equ	0xFD9
 12746                           status	equ	0xFD8
 12747                           
 12748 ;; *************** function _pic_to_led *****************
 12749 ;; Defined at:
 12750 ;;		line 29 in file "display.c"
 12751 ;; Parameters:    Size  Location     Type
 12752 ;;  x               1    wreg     unsigned char 
 12753 ;;  pic             1   19[COMRAM] unsigned char 
 12754 ;; Auto vars:     Size  Location     Type
 12755 ;;  x               1   23[COMRAM] unsigned char 
 12756 ;;  i               1   25[COMRAM] unsigned char 
 12757 ;;  j               1   24[COMRAM] unsigned char 
 12758 ;;  mask            1   22[COMRAM] unsigned char 
 12759 ;; Return value:  Size  Location     Type
 12760 ;;                  1    wreg      void 
 12761 ;; Registers used:
 12762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12763 ;; Tracked objects:
 12764 ;;		On entry : 0/0
 12765 ;;		On exit  : 0/0
 12766 ;;		Unchanged: 0/0
 12767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12768 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12769 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12770 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12771 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12772 ;;Total ram usage:        7 bytes
 12773 ;; Hardware stack levels used:    1
 12774 ;; Hardware stack levels required when called:    4
 12775 ;; This function calls:
 12776 ;;		_pixel_off
 12777 ;;		_pixel_on
 12778 ;; This function is called by:
 12779 ;;		_home_temp
 12780 ;; This function uses a non-reentrant model
 12781 ;;
 12782                           
 12783                           	psect	text57
 12784  001F32                     __ptext57:
 12785                           	opt stack 0
 12786  001F32                     _pic_to_led:
 12787                           	opt stack 24
 12788                           
 12789                           ;incstack = 0
 12790                           ;pic_to_led@x stored from wreg
 12791  001F32  6E18               	movwf	pic_to_led@x,c
 12792                           
 12793                           ;display.c: 31: uint8_t i, j, mask=0x01;
 12794  001F34  0E01               	movlw	1
 12795  001F36  6E17               	movwf	pic_to_led@mask,c
 12796                           
 12797                           ;display.c: 33: for(i=0; i<7; i++){
 12798  001F38  6A1A               	clrf	pic_to_led@i,c
 12799  001F3A                     l343:
 12800                           
 12801                           ;display.c: 34: for(j=0;j<8;j++){
 12802  001F3A  6A19               	clrf	pic_to_led@j,c
 12803  001F3C                     l5502:
 12804                           
 12805                           ;display.c: 35: if(pic7x8[pic][i] & mask){
 12806  001F3C  5014               	movf	pic_to_led@pic,w,c
 12807  001F3E  0D07               	mullw	7
 12808  001F40  0E9D               	movlw	low _pic7x8
 12809  001F42  6E15               	movwf	??_pic_to_led& (0+255),c
 12810  001F44  0EB9               	movlw	high _pic7x8
 12811  001F46  6E16               	movwf	(??_pic_to_led+1)& (0+255),c
 12812  001F48  50F3               	movf	prodl,w,c
 12813  001F4A  2615               	addwf	??_pic_to_led,f,c
 12814  001F4C  50F4               	movf	prodh,w,c
 12815  001F4E  2216               	addwfc	??_pic_to_led+1,f,c
 12816  001F50  501A               	movf	pic_to_led@i,w,c
 12817  001F52  2615               	addwf	??_pic_to_led,f,c
 12818  001F54  0E00               	movlw	0
 12819  001F56  2216               	addwfc	??_pic_to_led+1,f,c
 12820  001F58  C015  FFF6         	movff	??_pic_to_led,tblptrl
 12821  001F5C  C016  FFF7         	movff	??_pic_to_led+1,tblptrh
 12822  001F60                     	if	0	;tblptru may be non-zero
 12823  001F60                     	endif
 12824  001F60                     	if	0	;tblptru may be non-zero
 12825  001F60                     	endif
 12826  001F60  0008               	tblrd		*
 12827  001F62  50F5               	movf	tablat,w,c
 12828  001F64  1417               	andwf	pic_to_led@mask,w,c
 12829  001F66  E007               	bz	l5506
 12830                           
 12831                           ;display.c: 36: pixel_on(x+i,j);
 12832  001F68  C019  F00F         	movff	pic_to_led@j,pixel_on@y
 12833  001F6C  5018               	movf	pic_to_led@x,w,c
 12834  001F6E  241A               	addwf	pic_to_led@i,w,c
 12835  001F70  EC40  F013         	call	_pixel_on
 12836                           
 12837                           ;display.c: 37: }
 12838  001F74  D006               	goto	l5508
 12839  001F76                     l5506:
 12840                           
 12841                           ;display.c: 38: else {
 12842                           ;display.c: 39: pixel_off(x+i,j);
 12843  001F76  C019  F00F         	movff	pic_to_led@j,pixel_off@y
 12844  001F7A  5018               	movf	pic_to_led@x,w,c
 12845  001F7C  241A               	addwf	pic_to_led@i,w,c
 12846  001F7E  ECD0  F012         	call	_pixel_off
 12847  001F82                     l5508:
 12848                           
 12849                           ;display.c: 40: };
 12850                           ;display.c: 41: mask = mask<<1;
 12851  001F82  90D8               	bcf	status,0,c
 12852  001F84  3617               	rlcf	pic_to_led@mask,f,c
 12853  001F86  2A19               	incf	pic_to_led@j,f,c
 12854  001F88  0E07               	movlw	7
 12855  001F8A  6419               	cpfsgt	pic_to_led@j,c
 12856  001F8C  D7D7               	goto	l5502
 12857                           
 12858                           ;display.c: 42: };
 12859                           ;display.c: 43: mask=0x01;
 12860  001F8E  0E01               	movlw	1
 12861  001F90  6E17               	movwf	pic_to_led@mask,c
 12862  001F92  2A1A               	incf	pic_to_led@i,f,c
 12863  001F94  0E06               	movlw	6
 12864  001F96  641A               	cpfsgt	pic_to_led@i,c
 12865  001F98  D7D0               	goto	l343
 12866  001F9A  0C06               	retlw	6
 12867  001F9C                     __end_of_pic_to_led:
 12868                           	opt stack 0
 12869                           tosu	equ	0xFFF
 12870                           tosh	equ	0xFFE
 12871                           tosl	equ	0xFFD
 12872                           pclath	equ	0xFFA
 12873                           tblptru	equ	0xFF8
 12874                           tblptrh	equ	0xFF7
 12875                           tblptrl	equ	0xFF6
 12876                           tablat	equ	0xFF5
 12877                           prodh	equ	0xFF4
 12878                           prodl	equ	0xFF3
 12879                           intcon	equ	0xFF2
 12880                           intcon2	equ	0xFF1
 12881                           postinc0	equ	0xFEE
 12882                           wreg	equ	0xFE8
 12883                           indf1	equ	0xFE7
 12884                           plusw1	equ	0xFE3
 12885                           fsr1h	equ	0xFE2
 12886                           fsr1l	equ	0xFE1
 12887                           indf2	equ	0xFDF
 12888                           postinc2	equ	0xFDE
 12889                           postdec2	equ	0xFDD
 12890                           plusw2	equ	0xFDB
 12891                           fsr2h	equ	0xFDA
 12892                           fsr2l	equ	0xFD9
 12893                           status	equ	0xFD8
 12894                           
 12895 ;; *************** function _pixel_on *****************
 12896 ;; Defined at:
 12897 ;;		line 13 in file "display.c"
 12898 ;; Parameters:    Size  Location     Type
 12899 ;;  x               1    wreg     unsigned char 
 12900 ;;  y               1   14[COMRAM] unsigned char 
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;  x               1   17[COMRAM] unsigned char 
 12903 ;; Return value:  Size  Location     Type
 12904 ;;                  1    wreg      void 
 12905 ;; Registers used:
 12906 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12912 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12913 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12914 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12915 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12916 ;;Total ram usage:        4 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:    3
 12919 ;; This function calls:
 12920 ;;		Nothing
 12921 ;; This function is called by:
 12922 ;;		_pic_to_led
 12923 ;;		_putchar_b_buf
 12924 ;; This function uses a non-reentrant model
 12925 ;;
 12926                           
 12927                           	psect	text58
 12928  002680                     __ptext58:
 12929                           	opt stack 0
 12930  002680                     _pixel_on:
 12931                           	opt stack 24
 12932                           
 12933                           ;incstack = 0
 12934                           ;pixel_on@x stored from wreg
 12935  002680  6E12               	movwf	pixel_on@x,c
 12936                           
 12937                           ;display.c: 15: Dis_Buff[x] |= (1<<y);
 12938  002682  C00F  F010         	movff	pixel_on@y,??_pixel_on
 12939  002686  0E01               	movlw	1
 12940  002688  6E11               	movwf	(??_pixel_on+1)& (0+255),c
 12941  00268A  2A10               	incf	??_pixel_on,f,c
 12942  00268C  D002               	goto	u3684
 12943  00268E                     u3685:
 12944  00268E  90D8               	bcf	status,0,c
 12945  002690  3611               	rlcf	??_pixel_on+1,f,c
 12946  002692                     u3684:
 12947  002692  2E10               	decfsz	??_pixel_on,f,c
 12948  002694  D7FC               	goto	u3685
 12949  002696  5012               	movf	pixel_on@x,w,c
 12950  002698  0FAD               	addlw	low _Dis_Buff
 12951  00269A  6ED9               	movwf	fsr2l,c
 12952  00269C  6ADA               	clrf	fsr2h,c
 12953  00269E  5011               	movf	??_pixel_on+1,w,c
 12954  0026A0  12DF               	iorwf	indf2,f,c
 12955  0026A2  0012               	return		;funcret
 12956  0026A4                     __end_of_pixel_on:
 12957                           	opt stack 0
 12958                           tosu	equ	0xFFF
 12959                           tosh	equ	0xFFE
 12960                           tosl	equ	0xFFD
 12961                           pclath	equ	0xFFA
 12962                           tblptru	equ	0xFF8
 12963                           tblptrh	equ	0xFF7
 12964                           tblptrl	equ	0xFF6
 12965                           tablat	equ	0xFF5
 12966                           prodh	equ	0xFF4
 12967                           prodl	equ	0xFF3
 12968                           intcon	equ	0xFF2
 12969                           intcon2	equ	0xFF1
 12970                           postinc0	equ	0xFEE
 12971                           wreg	equ	0xFE8
 12972                           indf1	equ	0xFE7
 12973                           plusw1	equ	0xFE3
 12974                           fsr1h	equ	0xFE2
 12975                           fsr1l	equ	0xFE1
 12976                           indf2	equ	0xFDF
 12977                           postinc2	equ	0xFDE
 12978                           postdec2	equ	0xFDD
 12979                           plusw2	equ	0xFDB
 12980                           fsr2h	equ	0xFDA
 12981                           fsr2l	equ	0xFD9
 12982                           status	equ	0xFD8
 12983                           
 12984 ;; *************** function _pixel_off *****************
 12985 ;; Defined at:
 12986 ;;		line 21 in file "display.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;  x               1    wreg     unsigned char 
 12989 ;;  y               1   14[COMRAM] unsigned char 
 12990 ;; Auto vars:     Size  Location     Type
 12991 ;;  x               1   18[COMRAM] unsigned char 
 12992 ;; Return value:  Size  Location     Type
 12993 ;;                  1    wreg      void 
 12994 ;; Registers used:
 12995 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12996 ;; Tracked objects:
 12997 ;;		On entry : 0/0
 12998 ;;		On exit  : 0/0
 12999 ;;		Unchanged: 0/0
 13000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13001 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13003 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13004 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13005 ;;Total ram usage:        5 bytes
 13006 ;; Hardware stack levels used:    1
 13007 ;; Hardware stack levels required when called:    3
 13008 ;; This function calls:
 13009 ;;		Nothing
 13010 ;; This function is called by:
 13011 ;;		_pic_to_led
 13012 ;;		_putchar_b_buf
 13013 ;; This function uses a non-reentrant model
 13014 ;;
 13015                           
 13016                           	psect	text59
 13017  0025A0                     __ptext59:
 13018                           	opt stack 0
 13019  0025A0                     _pixel_off:
 13020                           	opt stack 24
 13021                           
 13022                           ;incstack = 0
 13023                           ;pixel_off@x stored from wreg
 13024  0025A0  6E13               	movwf	pixel_off@x,c
 13025                           
 13026                           ;display.c: 23: Dis_Buff[x] &= ~(1<<y);
 13027  0025A2  C00F  F010         	movff	pixel_off@y,??_pixel_off
 13028  0025A6  0E01               	movlw	1
 13029  0025A8  6E11               	movwf	(??_pixel_off+1)& (0+255),c
 13030  0025AA  2A10               	incf	??_pixel_off,f,c
 13031  0025AC  D002               	goto	u3694
 13032  0025AE                     u3695:
 13033  0025AE  90D8               	bcf	status,0,c
 13034  0025B0  3611               	rlcf	??_pixel_off+1,f,c
 13035  0025B2                     u3694:
 13036  0025B2  2E10               	decfsz	??_pixel_off,f,c
 13037  0025B4  D7FC               	goto	u3695
 13038  0025B6  1C11               	comf	??_pixel_off+1,w,c
 13039  0025B8  6E12               	movwf	(??_pixel_off+2)& (0+255),c
 13040  0025BA  5013               	movf	pixel_off@x,w,c
 13041  0025BC  0FAD               	addlw	low _Dis_Buff
 13042  0025BE  6ED9               	movwf	fsr2l,c
 13043  0025C0  6ADA               	clrf	fsr2h,c
 13044  0025C2  5012               	movf	??_pixel_off+2,w,c
 13045  0025C4  16DF               	andwf	indf2,f,c
 13046  0025C6  0012               	return		;funcret
 13047  0025C8                     __end_of_pixel_off:
 13048                           	opt stack 0
 13049                           tosu	equ	0xFFF
 13050                           tosh	equ	0xFFE
 13051                           tosl	equ	0xFFD
 13052                           pclath	equ	0xFFA
 13053                           tblptru	equ	0xFF8
 13054                           tblptrh	equ	0xFF7
 13055                           tblptrl	equ	0xFF6
 13056                           tablat	equ	0xFF5
 13057                           prodh	equ	0xFF4
 13058                           prodl	equ	0xFF3
 13059                           intcon	equ	0xFF2
 13060                           intcon2	equ	0xFF1
 13061                           postinc0	equ	0xFEE
 13062                           wreg	equ	0xFE8
 13063                           indf1	equ	0xFE7
 13064                           plusw1	equ	0xFE3
 13065                           fsr1h	equ	0xFE2
 13066                           fsr1l	equ	0xFE1
 13067                           indf2	equ	0xFDF
 13068                           postinc2	equ	0xFDE
 13069                           postdec2	equ	0xFDD
 13070                           plusw2	equ	0xFDB
 13071                           fsr2h	equ	0xFDA
 13072                           fsr2l	equ	0xFD9
 13073                           status	equ	0xFD8
 13074                           
 13075 ;; *************** function _clear_matrix *****************
 13076 ;; Defined at:
 13077 ;;		line 145 in file "display.c"
 13078 ;; Parameters:    Size  Location     Type
 13079 ;;		None
 13080 ;; Auto vars:     Size  Location     Type
 13081 ;;  i               1   14[COMRAM] unsigned char 
 13082 ;; Return value:  Size  Location     Type
 13083 ;;                  1    wreg      void 
 13084 ;; Registers used:
 13085 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13086 ;; Tracked objects:
 13087 ;;		On entry : 0/0
 13088 ;;		On exit  : 0/0
 13089 ;;		Unchanged: 0/0
 13090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13094 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13095 ;;Total ram usage:        1 bytes
 13096 ;; Hardware stack levels used:    1
 13097 ;; Hardware stack levels required when called:    3
 13098 ;; This function calls:
 13099 ;;		Nothing
 13100 ;; This function is called by:
 13101 ;;		_main
 13102 ;;		_time_set_hr
 13103 ;;		_home_temp
 13104 ;; This function uses a non-reentrant model
 13105 ;;
 13106                           
 13107                           	psect	text60
 13108  0027C2                     __ptext60:
 13109                           	opt stack 0
 13110  0027C2                     _clear_matrix:
 13111                           	opt stack 27
 13112                           
 13113                           ;display.c: 147: uint8_t i;
 13114                           ;display.c: 148: for (i=0; i<=4 * 8; i++)
 13115                           
 13116                           ;incstack = 0
 13117  0027C2  6A0F               	clrf	clear_matrix@i,c
 13118  0027C4                     l5424:
 13119                           
 13120                           ;display.c: 149: Dis_Buff[i] = 0;
 13121  0027C4  500F               	movf	clear_matrix@i,w,c
 13122  0027C6  EC45  F009         	call	PL106	;call to abstracted procedure
 13123  0027CA  2A0F               	incf	clear_matrix@i,f,c
 13124  0027CC  0E20               	movlw	32
 13125  0027CE  640F               	cpfsgt	clear_matrix@i,c
 13126  0027D0  D7F9               	goto	l5424
 13127  0027D2  0C20               	retlw	32
 13128  0027D4                     __end_of_clear_matrix:
 13129                           	opt stack 0
 13130                           tosu	equ	0xFFF
 13131                           tosh	equ	0xFFE
 13132                           tosl	equ	0xFFD
 13133                           pclath	equ	0xFFA
 13134                           tblptru	equ	0xFF8
 13135                           tblptrh	equ	0xFF7
 13136                           tblptrl	equ	0xFF6
 13137                           tablat	equ	0xFF5
 13138                           prodh	equ	0xFF4
 13139                           prodl	equ	0xFF3
 13140                           intcon	equ	0xFF2
 13141                           intcon2	equ	0xFF1
 13142                           postinc0	equ	0xFEE
 13143                           wreg	equ	0xFE8
 13144                           indf1	equ	0xFE7
 13145                           plusw1	equ	0xFE3
 13146                           fsr1h	equ	0xFE2
 13147                           fsr1l	equ	0xFE1
 13148                           indf2	equ	0xFDF
 13149                           postinc2	equ	0xFDE
 13150                           postdec2	equ	0xFDD
 13151                           plusw2	equ	0xFDB
 13152                           fsr2h	equ	0xFDA
 13153                           fsr2l	equ	0xFD9
 13154                           status	equ	0xFD8
 13155                           
 13156 ;; *************** function ___lwmod *****************
 13157 ;; Defined at:
 13158 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 13159 ;; Parameters:    Size  Location     Type
 13160 ;;  dividend        2   21[COMRAM] unsigned int 
 13161 ;;  divisor         2   23[COMRAM] unsigned int 
 13162 ;; Auto vars:     Size  Location     Type
 13163 ;;  counter         1   25[COMRAM] unsigned char 
 13164 ;; Return value:  Size  Location     Type
 13165 ;;                  2   21[COMRAM] unsigned int 
 13166 ;; Registers used:
 13167 ;;		wreg, status,2, status,0
 13168 ;; Tracked objects:
 13169 ;;		On entry : 0/0
 13170 ;;		On exit  : 0/0
 13171 ;;		Unchanged: 0/0
 13172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13173 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13176 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13177 ;;Total ram usage:        5 bytes
 13178 ;; Hardware stack levels used:    1
 13179 ;; Hardware stack levels required when called:    3
 13180 ;; This function calls:
 13181 ;;		Nothing
 13182 ;; This function is called by:
 13183 ;;		_home_temp
 13184 ;;		_readTemp_Single
 13185 ;; This function uses a non-reentrant model
 13186 ;;
 13187                           
 13188                           	psect	text61
 13189  002274                     __ptext61:
 13190                           	opt stack 0
 13191  002274                     ___lwmod:
 13192                           	opt stack 24
 13193                           
 13194                           ;incstack = 0
 13195  002274  5018               	movf	___lwmod@divisor,w,c
 13196  002276  1019               	iorwf	___lwmod@divisor+1,w,c
 13197  002278  E017               	bz	l1461
 13198  00227A  0E01               	movlw	1
 13199  00227C  6E1A               	movwf	___lwmod@counter,c
 13200  00227E  D004               	goto	l5408
 13201  002280                     l5406:
 13202  002280  90D8               	bcf	status,0,c
 13203  002282  3618               	rlcf	___lwmod@divisor,f,c
 13204  002284  3619               	rlcf	___lwmod@divisor+1,f,c
 13205  002286  2A1A               	incf	___lwmod@counter,f,c
 13206  002288                     l5408:
 13207  002288  AE19               	btfss	___lwmod@divisor+1,7,c
 13208  00228A  D7FA               	goto	l5406
 13209  00228C                     l5410:
 13210  00228C  5018               	movf	___lwmod@divisor,w,c
 13211  00228E  5C16               	subwf	___lwmod@dividend,w,c
 13212  002290  5019               	movf	___lwmod@divisor+1,w,c
 13213  002292  5817               	subwfb	___lwmod@dividend+1,w,c
 13214  002294  E304               	bnc	l5414
 13215  002296  5018               	movf	___lwmod@divisor,w,c
 13216  002298  5E16               	subwf	___lwmod@dividend,f,c
 13217  00229A  5019               	movf	___lwmod@divisor+1,w,c
 13218  00229C  5A17               	subwfb	___lwmod@dividend+1,f,c
 13219  00229E                     l5414:
 13220  00229E  90D8               	bcf	status,0,c
 13221  0022A0  3219               	rrcf	___lwmod@divisor+1,f,c
 13222  0022A2  3218               	rrcf	___lwmod@divisor,f,c
 13223  0022A4  2E1A               	decfsz	___lwmod@counter,f,c
 13224  0022A6  D7F2               	goto	l5410
 13225  0022A8                     l1461:
 13226  0022A8  C016  F016         	movff	___lwmod@dividend,?___lwmod
 13227  0022AC  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 13228  0022B0  0012               	return		;funcret
 13229  0022B2                     __end_of___lwmod:
 13230                           	opt stack 0
 13231                           tosu	equ	0xFFF
 13232                           tosh	equ	0xFFE
 13233                           tosl	equ	0xFFD
 13234                           pclath	equ	0xFFA
 13235                           tblptru	equ	0xFF8
 13236                           tblptrh	equ	0xFF7
 13237                           tblptrl	equ	0xFF6
 13238                           tablat	equ	0xFF5
 13239                           prodh	equ	0xFF4
 13240                           prodl	equ	0xFF3
 13241                           intcon	equ	0xFF2
 13242                           intcon2	equ	0xFF1
 13243                           postinc0	equ	0xFEE
 13244                           wreg	equ	0xFE8
 13245                           indf1	equ	0xFE7
 13246                           plusw1	equ	0xFE3
 13247                           fsr1h	equ	0xFE2
 13248                           fsr1l	equ	0xFE1
 13249                           indf2	equ	0xFDF
 13250                           postinc2	equ	0xFDE
 13251                           postdec2	equ	0xFDD
 13252                           plusw2	equ	0xFDB
 13253                           fsr2h	equ	0xFDA
 13254                           fsr2l	equ	0xFD9
 13255                           status	equ	0xFD8
 13256                           
 13257 ;; *************** function ___lwdiv *****************
 13258 ;; Defined at:
 13259 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 13260 ;; Parameters:    Size  Location     Type
 13261 ;;  dividend        2   14[COMRAM] unsigned int 
 13262 ;;  divisor         2   16[COMRAM] unsigned int 
 13263 ;; Auto vars:     Size  Location     Type
 13264 ;;  quotient        2   19[COMRAM] unsigned int 
 13265 ;;  counter         1   18[COMRAM] unsigned char 
 13266 ;; Return value:  Size  Location     Type
 13267 ;;                  2   14[COMRAM] unsigned int 
 13268 ;; Registers used:
 13269 ;;		wreg, status,2, status,0
 13270 ;; Tracked objects:
 13271 ;;		On entry : 0/0
 13272 ;;		On exit  : 0/0
 13273 ;;		Unchanged: 0/0
 13274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13276 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13278 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13279 ;;Total ram usage:        7 bytes
 13280 ;; Hardware stack levels used:    1
 13281 ;; Hardware stack levels required when called:    3
 13282 ;; This function calls:
 13283 ;;		Nothing
 13284 ;; This function is called by:
 13285 ;;		_home_temp
 13286 ;;		_readTemp_Single
 13287 ;; This function uses a non-reentrant model
 13288 ;;
 13289                           
 13290                           	psect	text62
 13291  002158                     __ptext62:
 13292                           	opt stack 0
 13293  002158                     ___lwdiv:
 13294                           	opt stack 24
 13295                           
 13296                           ;incstack = 0
 13297  002158  6A14               	clrf	___lwdiv@quotient,c
 13298  00215A  6A15               	clrf	___lwdiv@quotient+1,c
 13299  00215C  5011               	movf	___lwdiv@divisor,w,c
 13300  00215E  1012               	iorwf	___lwdiv@divisor+1,w,c
 13301  002160  E01B               	bz	l1451
 13302  002162  0E01               	movlw	1
 13303  002164  6E13               	movwf	___lwdiv@counter,c
 13304  002166  D004               	goto	l5388
 13305  002168                     l5386:
 13306  002168  90D8               	bcf	status,0,c
 13307  00216A  3611               	rlcf	___lwdiv@divisor,f,c
 13308  00216C  3612               	rlcf	___lwdiv@divisor+1,f,c
 13309  00216E  2A13               	incf	___lwdiv@counter,f,c
 13310  002170                     l5388:
 13311  002170  AE12               	btfss	___lwdiv@divisor+1,7,c
 13312  002172  D7FA               	goto	l5386
 13313  002174                     l5390:
 13314  002174  90D8               	bcf	status,0,c
 13315  002176  3614               	rlcf	___lwdiv@quotient,f,c
 13316  002178  3615               	rlcf	___lwdiv@quotient+1,f,c
 13317  00217A  5011               	movf	___lwdiv@divisor,w,c
 13318  00217C  5C0F               	subwf	___lwdiv@dividend,w,c
 13319  00217E  5012               	movf	___lwdiv@divisor+1,w,c
 13320  002180  5810               	subwfb	___lwdiv@dividend+1,w,c
 13321  002182  E305               	bnc	l5398
 13322  002184  5011               	movf	___lwdiv@divisor,w,c
 13323  002186  5E0F               	subwf	___lwdiv@dividend,f,c
 13324  002188  5012               	movf	___lwdiv@divisor+1,w,c
 13325  00218A  5A10               	subwfb	___lwdiv@dividend+1,f,c
 13326  00218C  8014               	bsf	___lwdiv@quotient,0,c
 13327  00218E                     l5398:
 13328  00218E  90D8               	bcf	status,0,c
 13329  002190  3212               	rrcf	___lwdiv@divisor+1,f,c
 13330  002192  3211               	rrcf	___lwdiv@divisor,f,c
 13331  002194  2E13               	decfsz	___lwdiv@counter,f,c
 13332  002196  D7EE               	goto	l5390
 13333  002198                     l1451:
 13334  002198  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 13335  00219C  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13336  0021A0  0012               	return		;funcret
 13337  0021A2                     __end_of___lwdiv:
 13338                           	opt stack 0
 13339                           tosu	equ	0xFFF
 13340                           tosh	equ	0xFFE
 13341                           tosl	equ	0xFFD
 13342                           pclath	equ	0xFFA
 13343                           tblptru	equ	0xFF8
 13344                           tblptrh	equ	0xFF7
 13345                           tblptrl	equ	0xFF6
 13346                           tablat	equ	0xFF5
 13347                           prodh	equ	0xFF4
 13348                           prodl	equ	0xFF3
 13349                           intcon	equ	0xFF2
 13350                           intcon2	equ	0xFF1
 13351                           postinc0	equ	0xFEE
 13352                           wreg	equ	0xFE8
 13353                           indf1	equ	0xFE7
 13354                           plusw1	equ	0xFE3
 13355                           fsr1h	equ	0xFE2
 13356                           fsr1l	equ	0xFE1
 13357                           indf2	equ	0xFDF
 13358                           postinc2	equ	0xFDE
 13359                           postdec2	equ	0xFDD
 13360                           plusw2	equ	0xFDB
 13361                           fsr2h	equ	0xFDA
 13362                           fsr2l	equ	0xFD9
 13363                           status	equ	0xFD8
 13364                           
 13365 ;; *************** function ___lbmod *****************
 13366 ;; Defined at:
 13367 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbmod.c"
 13368 ;; Parameters:    Size  Location     Type
 13369 ;;  dividend        1    wreg     unsigned char 
 13370 ;;  divisor         1   18[COMRAM] unsigned char 
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;  dividend        1   19[COMRAM] unsigned char 
 13373 ;;  rem             1   21[COMRAM] unsigned char 
 13374 ;;  counter         1   20[COMRAM] unsigned char 
 13375 ;; Return value:  Size  Location     Type
 13376 ;;                  1    wreg      unsigned char 
 13377 ;; Registers used:
 13378 ;;		wreg, status,2, status,0
 13379 ;; Tracked objects:
 13380 ;;		On entry : 0/0
 13381 ;;		On exit  : 0/0
 13382 ;;		Unchanged: 0/0
 13383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13384 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13385 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13387 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13388 ;;Total ram usage:        4 bytes
 13389 ;; Hardware stack levels used:    1
 13390 ;; Hardware stack levels required when called:    3
 13391 ;; This function calls:
 13392 ;;		Nothing
 13393 ;; This function is called by:
 13394 ;;		_FillBuf
 13395 ;;		_decimal_to_bcd
 13396 ;;		_time_set_min
 13397 ;;		_time_set_hr
 13398 ;;		_time_set_yr
 13399 ;;		_time_set_dt
 13400 ;;		_home_temp
 13401 ;; This function uses a non-reentrant model
 13402 ;;
 13403                           
 13404                           	psect	text63
 13405  0025EE                     __ptext63:
 13406                           	opt stack 0
 13407  0025EE                     ___lbmod:
 13408                           	opt stack 23
 13409                           
 13410                           ;incstack = 0
 13411                           ;___lbmod@dividend stored from wreg
 13412  0025EE  6E14               	movwf	___lbmod@dividend,c
 13413  0025F0  0E08               	movlw	8
 13414  0025F2  6E15               	movwf	___lbmod@counter,c
 13415  0025F4  6A16               	clrf	___lbmod@rem,c
 13416  0025F6                     l5166:
 13417  0025F6  90D8               	bcf	status,0,c
 13418  0025F8  3414               	rlcf	___lbmod@dividend,w,c
 13419  0025FA  3416               	rlcf	___lbmod@rem,w,c
 13420  0025FC  6E16               	movwf	___lbmod@rem,c
 13421  0025FE  90D8               	bcf	status,0,c
 13422  002600  3614               	rlcf	___lbmod@dividend,f,c
 13423  002602  5013               	movf	___lbmod@divisor,w,c
 13424  002604  5C16               	subwf	___lbmod@rem,w,c
 13425  002606  E302               	bnc	l5174
 13426  002608  5013               	movf	___lbmod@divisor,w,c
 13427  00260A  5E16               	subwf	___lbmod@rem,f,c
 13428  00260C                     l5174:
 13429  00260C  2E15               	decfsz	___lbmod@counter,f,c
 13430  00260E  D7F3               	goto	l5166
 13431  002610  5016               	movf	___lbmod@rem,w,c
 13432  002612  0012               	return		;funcret
 13433  002614                     __end_of___lbmod:
 13434                           	opt stack 0
 13435                           tosu	equ	0xFFF
 13436                           tosh	equ	0xFFE
 13437                           tosl	equ	0xFFD
 13438                           pclath	equ	0xFFA
 13439                           tblptru	equ	0xFF8
 13440                           tblptrh	equ	0xFF7
 13441                           tblptrl	equ	0xFF6
 13442                           tablat	equ	0xFF5
 13443                           prodh	equ	0xFF4
 13444                           prodl	equ	0xFF3
 13445                           intcon	equ	0xFF2
 13446                           intcon2	equ	0xFF1
 13447                           postinc0	equ	0xFEE
 13448                           wreg	equ	0xFE8
 13449                           indf1	equ	0xFE7
 13450                           plusw1	equ	0xFE3
 13451                           fsr1h	equ	0xFE2
 13452                           fsr1l	equ	0xFE1
 13453                           indf2	equ	0xFDF
 13454                           postinc2	equ	0xFDE
 13455                           postdec2	equ	0xFDD
 13456                           plusw2	equ	0xFDB
 13457                           fsr2h	equ	0xFDA
 13458                           fsr2l	equ	0xFD9
 13459                           status	equ	0xFD8
 13460                           
 13461 ;; *************** function ___lbdiv *****************
 13462 ;; Defined at:
 13463 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbdiv.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;  dividend        1    wreg     unsigned char 
 13466 ;;  divisor         1   14[COMRAM] unsigned char 
 13467 ;; Auto vars:     Size  Location     Type
 13468 ;;  dividend        1   15[COMRAM] unsigned char 
 13469 ;;  quotient        1   17[COMRAM] unsigned char 
 13470 ;;  counter         1   16[COMRAM] unsigned char 
 13471 ;; Return value:  Size  Location     Type
 13472 ;;                  1    wreg      unsigned char 
 13473 ;; Registers used:
 13474 ;;		wreg, status,2, status,0
 13475 ;; Tracked objects:
 13476 ;;		On entry : 0/0
 13477 ;;		On exit  : 0/0
 13478 ;;		Unchanged: 0/0
 13479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13480 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13484 ;;Total ram usage:        4 bytes
 13485 ;; Hardware stack levels used:    1
 13486 ;; Hardware stack levels required when called:    3
 13487 ;; This function calls:
 13488 ;;		Nothing
 13489 ;; This function is called by:
 13490 ;;		_FillBuf
 13491 ;;		_decimal_to_bcd
 13492 ;;		_time_set_min
 13493 ;;		_time_set_hr
 13494 ;;		_time_set_yr
 13495 ;;		_time_set_dt
 13496 ;;		_home_temp
 13497 ;; This function uses a non-reentrant model
 13498 ;;
 13499                           
 13500                           	psect	text64
 13501  00243E                     __ptext64:
 13502                           	opt stack 0
 13503  00243E                     ___lbdiv:
 13504                           	opt stack 23
 13505                           
 13506                           ;incstack = 0
 13507                           ;___lbdiv@dividend stored from wreg
 13508  00243E  6E10               	movwf	___lbdiv@dividend,c
 13509  002440  6A12               	clrf	___lbdiv@quotient,c
 13510  002442  500F               	movf	___lbdiv@divisor,w,c
 13511  002444  E014               	bz	l5158
 13512  002446  0E01               	movlw	1
 13513  002448  6E11               	movwf	___lbdiv@counter,c
 13514  00244A  D003               	goto	l5146
 13515  00244C                     l5142:
 13516  00244C  90D8               	bcf	status,0,c
 13517  00244E  360F               	rlcf	___lbdiv@divisor,f,c
 13518  002450  2A11               	incf	___lbdiv@counter,f,c
 13519  002452                     l5146:
 13520  002452  AE0F               	btfss	___lbdiv@divisor,7,c
 13521  002454  D7FB               	goto	l5142
 13522  002456                     l5148:
 13523  002456  90D8               	bcf	status,0,c
 13524  002458  3612               	rlcf	___lbdiv@quotient,f,c
 13525  00245A  500F               	movf	___lbdiv@divisor,w,c
 13526  00245C  5C10               	subwf	___lbdiv@dividend,w,c
 13527  00245E  E303               	bnc	l5154
 13528  002460  500F               	movf	___lbdiv@divisor,w,c
 13529  002462  5E10               	subwf	___lbdiv@dividend,f,c
 13530  002464  8012               	bsf	___lbdiv@quotient,0,c
 13531  002466                     l5154:
 13532  002466  90D8               	bcf	status,0,c
 13533  002468  320F               	rrcf	___lbdiv@divisor,f,c
 13534  00246A  2E11               	decfsz	___lbdiv@counter,f,c
 13535  00246C  D7F4               	goto	l5148
 13536  00246E                     l5158:
 13537  00246E  5012               	movf	___lbdiv@quotient,w,c
 13538  002470  0012               	return		;funcret
 13539  002472                     __end_of___lbdiv:
 13540                           	opt stack 0
 13541                           tosu	equ	0xFFF
 13542                           tosh	equ	0xFFE
 13543                           tosl	equ	0xFFD
 13544                           pclath	equ	0xFFA
 13545                           tblptru	equ	0xFF8
 13546                           tblptrh	equ	0xFF7
 13547                           tblptrl	equ	0xFF6
 13548                           tablat	equ	0xFF5
 13549                           prodh	equ	0xFF4
 13550                           prodl	equ	0xFF3
 13551                           intcon	equ	0xFF2
 13552                           intcon2	equ	0xFF1
 13553                           postinc0	equ	0xFEE
 13554                           wreg	equ	0xFE8
 13555                           indf1	equ	0xFE7
 13556                           plusw1	equ	0xFE3
 13557                           fsr1h	equ	0xFE2
 13558                           fsr1l	equ	0xFE1
 13559                           indf2	equ	0xFDF
 13560                           postinc2	equ	0xFDE
 13561                           postdec2	equ	0xFDD
 13562                           plusw2	equ	0xFDB
 13563                           fsr2h	equ	0xFDA
 13564                           fsr2l	equ	0xFD9
 13565                           status	equ	0xFD8
 13566                           
 13567 ;; *************** function _RTOS_SetTask *****************
 13568 ;; Defined at:
 13569 ;;		line 22 in file "dispatcher.c"
 13570 ;; Parameters:    Size  Location     Type
 13571 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 13572 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
 13573 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
 13574 ;;		 -> GetTime(1), key_press(1), time_led(1), 
 13575 ;;  taskDelay       2   16[COMRAM] unsigned int 
 13576 ;;  taskPeriod      2   18[COMRAM] unsigned int 
 13577 ;; Auto vars:     Size  Location     Type
 13578 ;;  i               1   22[COMRAM] unsigned char 
 13579 ;; Return value:  Size  Location     Type
 13580 ;;                  1    wreg      void 
 13581 ;; Registers used:
 13582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13583 ;; Tracked objects:
 13584 ;;		On entry : 0/0
 13585 ;;		On exit  : 0/0
 13586 ;;		Unchanged: 0/0
 13587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13588 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13590 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13591 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13592 ;;Total ram usage:        9 bytes
 13593 ;; Hardware stack levels used:    1
 13594 ;; Hardware stack levels required when called:    3
 13595 ;; This function calls:
 13596 ;;		Nothing
 13597 ;; This function is called by:
 13598 ;;		_main
 13599 ;;		_time_set_min
 13600 ;;		_time_set_hr
 13601 ;;		_time_set_yr
 13602 ;;		_time_set_mt
 13603 ;;		_time_set_dt
 13604 ;;		_time_set_dy
 13605 ;;		_home_temp
 13606 ;;		_time_led
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           	psect	text65
 13611  001CDE                     __ptext65:
 13612                           	opt stack 0
 13613  001CDE                     _RTOS_SetTask:
 13614                           	opt stack 27
 13615                           
 13616                           ;dispatcher.c: 24: uint8_t i;
 13617                           ;dispatcher.c: 26: if(!taskFunc) return;
 13618                           
 13619                           ;incstack = 0
 13620  001CDE  500F               	movf	RTOS_SetTask@taskFunc,w,c
 13621  001CE0  1010               	iorwf	RTOS_SetTask@taskFunc+1,w,c
 13622  001CE2  E101               	bnz	l196
 13623  001CE4  0012               	return	
 13624  001CE6                     l196:
 13625                           
 13626                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 13627  001CE6  6A17               	clrf	RTOS_SetTask@i,c
 13628  001CE8  D018               	goto	l5446
 13629  001CEA                     l5434:
 13630                           
 13631                           ;dispatcher.c: 28: {
 13632                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 13633  001CEA  5017               	movf	RTOS_SetTask@i,w,c
 13634  001CEC  EC6F  F00D         	call	PL24	;call to abstracted procedure
 13635  001CF0  500F               	movf	RTOS_SetTask@taskFunc,w,c	;volatile
 13636  001CF2  18DE               	xorwf	postinc2,w,c
 13637  001CF4  E111               	bnz	l5444
 13638  001CF6  5010               	movf	RTOS_SetTask@taskFunc+1,w,c	;volatile
 13639  001CF8  18DE               	xorwf	postinc2,w,c
 13640  001CFA  E10E               	bnz	l5444
 13641                           
 13642                           ;dispatcher.c: 30: {
 13643                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 13644  001CFC  9EF2               	bcf	intcon,7,c	;volatile
 13645                           
 13646                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 13647  001CFE  5017               	movf	RTOS_SetTask@i,w,c
 13648  001D00  ECF1  F00B         	call	PL20	;call to abstracted procedure
 13649  001D04  D82A               	call	PL150	;call to abstracted procedure
 13650                           
 13651                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 13652  001D06  5017               	movf	RTOS_SetTask@i,w,c
 13653  001D08  EC81  F00D         	call	PL30	;call to abstracted procedure
 13654  001D0C  D821               	call	PL126	;call to abstracted procedure
 13655                           
 13656                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 13657  001D0E  5017               	movf	RTOS_SetTask@i,w,c
 13658  001D10  EC77  F00D         	call	PL28	;call to abstracted procedure
 13659                           
 13660                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 13661  001D14  8EF2               	bsf	intcon,7,c	;volatile
 13662  001D16  0C00               	retlw	0
 13663  001D18                     l5444:
 13664  001D18  2A17               	incf	RTOS_SetTask@i,f,c
 13665  001D1A                     l5446:
 13666  001D1A  506A               	movf	_arrayTail,w,c	;volatile
 13667  001D1C  5C17               	subwf	RTOS_SetTask@i,w,c
 13668  001D1E  E3E5               	bnc	l5434
 13669                           
 13670                           ;dispatcher.c: 39: }
 13671                           ;dispatcher.c: 40: }
 13672                           ;dispatcher.c: 42: if (arrayTail < 15)
 13673  001D20  0E0F               	movlw	15
 13674  001D22  606A               	cpfslt	_arrayTail,c	;volatile
 13675  001D24  0C0F               	retlw	15
 13676                           
 13677                           ;dispatcher.c: 43: {
 13678                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 13679  001D26  9EF2               	bcf	intcon,7,c	;volatile
 13680                           
 13681                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 13682  001D28  506A               	movf	_arrayTail,w,c	;volatile
 13683  001D2A  EC6F  F00D         	call	PL24	;call to abstracted procedure
 13684  001D2E  C00F  FFDE         	movff	RTOS_SetTask@taskFunc,postinc2	;volatile
 13685  001D32  C010  FFDD         	movff	RTOS_SetTask@taskFunc+1,postdec2	;volatile
 13686                           
 13687                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 13688  001D36  506A               	movf	_arrayTail,w,c	;volatile
 13689  001D38  ECF1  F00B         	call	PL20	;call to abstracted procedure
 13690  001D3C  D80E               	call	PL150	;call to abstracted procedure
 13691                           
 13692                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 13693  001D3E  506A               	movf	_arrayTail,w,c	;volatile
 13694  001D40  EC81  F00D         	call	PL30	;call to abstracted procedure
 13695  001D44  D805               	call	PL126	;call to abstracted procedure
 13696                           
 13697                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 13698  001D46  506A               	movf	_arrayTail,w,c	;volatile
 13699  001D48  EC77  F00D         	call	PL28	;call to abstracted procedure
 13700                           
 13701                           ;dispatcher.c: 51: arrayTail++;
 13702                           
 13703                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 13704  001D4C  EF93  F00D         	goto	PL182	;call to abstracted procedure
 13705  001D50                     __end_of_RTOS_SetTask:
 13706                           	opt stack 0
 13707  001D50                     PL126:
 13708                           	opt stack 27
 13709  001D50  C013  FFDE         	movff	RTOS_SetTask@taskPeriod,postinc2
 13710  001D54  C014  FFDD         	movff	RTOS_SetTask@taskPeriod+1,postdec2
 13711  001D58  0012               	return	
 13712  001D5A                     __end_ofPL126:
 13713                           	opt stack 0
 13714  001D5A                     PL150:
 13715                           	opt stack 27
 13716  001D5A  C011  FFDE         	movff	RTOS_SetTask@taskDelay,postinc2
 13717  001D5E  C012  FFDD         	movff	RTOS_SetTask@taskDelay+1,postdec2
 13718  001D62  0012               	return	
 13719  001D64                     __end_ofPL150:
 13720                           	opt stack 0
 13721                           tosu	equ	0xFFF
 13722                           tosh	equ	0xFFE
 13723                           tosl	equ	0xFFD
 13724                           pclath	equ	0xFFA
 13725                           tblptru	equ	0xFF8
 13726                           tblptrh	equ	0xFF7
 13727                           tblptrl	equ	0xFF6
 13728                           tablat	equ	0xFF5
 13729                           prodh	equ	0xFF4
 13730                           prodl	equ	0xFF3
 13731                           intcon	equ	0xFF2
 13732                           intcon2	equ	0xFF1
 13733                           postinc0	equ	0xFEE
 13734                           wreg	equ	0xFE8
 13735                           indf1	equ	0xFE7
 13736                           plusw1	equ	0xFE3
 13737                           fsr1h	equ	0xFE2
 13738                           fsr1l	equ	0xFE1
 13739                           indf2	equ	0xFDF
 13740                           postinc2	equ	0xFDE
 13741                           postdec2	equ	0xFDD
 13742                           plusw2	equ	0xFDB
 13743                           fsr2h	equ	0xFDA
 13744                           fsr2l	equ	0xFD9
 13745                           status	equ	0xFD8
 13746                           
 13747 ;; *************** function _RTOS_DeleteTask *****************
 13748 ;; Defined at:
 13749 ;;		line 59 in file "dispatcher.c"
 13750 ;; Parameters:    Size  Location     Type
 13751 ;;  taskFunc        2   14[COMRAM] PTR FTN()void 
 13752 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
 13753 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
 13754 ;;		 -> GetTime(1), key_press(1), time_led(1), 
 13755 ;; Auto vars:     Size  Location     Type
 13756 ;;  i               1   22[COMRAM] unsigned char 
 13757 ;; Return value:  Size  Location     Type
 13758 ;;                  1    wreg      void 
 13759 ;; Registers used:
 13760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13761 ;; Tracked objects:
 13762 ;;		On entry : 0/0
 13763 ;;		On exit  : 0/0
 13764 ;;		Unchanged: 0/0
 13765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13768 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13769 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13770 ;;Total ram usage:        9 bytes
 13771 ;; Hardware stack levels used:    1
 13772 ;; Hardware stack levels required when called:    3
 13773 ;; This function calls:
 13774 ;;		Nothing
 13775 ;; This function is called by:
 13776 ;;		_RTOS_DispatchTask
 13777 ;;		_time_set_min
 13778 ;;		_time_set_hr
 13779 ;;		_time_set_yr
 13780 ;;		_time_set_mt
 13781 ;;		_time_set_dt
 13782 ;;		_time_set_dy
 13783 ;;		_home_temp
 13784 ;;		_time_led
 13785 ;; This function uses a non-reentrant model
 13786 ;;
 13787                           
 13788                           	psect	text66
 13789  001C54                     __ptext66:
 13790                           	opt stack 0
 13791  001C54                     _RTOS_DeleteTask:
 13792                           	opt stack 25
 13793                           
 13794                           ;dispatcher.c: 61: uint8_t i;
 13795                           ;dispatcher.c: 63: for (i=0; i<arrayTail; i++)
 13796                           
 13797                           ;incstack = 0
 13798  001C54  6A17               	clrf	RTOS_DeleteTask@i,c
 13799  001C56  D03F               	goto	l5476
 13800  001C58                     l5460:
 13801                           
 13802                           ;dispatcher.c: 64: {
 13803                           ;dispatcher.c: 65: if(TaskArray[i].pFunc == taskFunc)
 13804  001C58  5017               	movf	RTOS_DeleteTask@i,w,c
 13805  001C5A  EC6F  F00D         	call	PL24	;call to abstracted procedure
 13806  001C5E  500F               	movf	RTOS_DeleteTask@taskFunc,w,c	;volatile
 13807  001C60  18DE               	xorwf	postinc2,w,c
 13808  001C62  E138               	bnz	l5474
 13809  001C64  5010               	movf	RTOS_DeleteTask@taskFunc+1,w,c	;volatile
 13810  001C66  18DE               	xorwf	postinc2,w,c
 13811  001C68  E135               	bnz	l5474
 13812                           
 13813                           ;dispatcher.c: 66: {
 13814                           ;dispatcher.c: 68: (INTCONbits.GIE = 0);
 13815  001C6A  9EF2               	bcf	intcon,7,c	;volatile
 13816                           
 13817                           ;dispatcher.c: 69: if(i != (arrayTail - 1))
 13818  001C6C  5017               	movf	RTOS_DeleteTask@i,w,c
 13819  001C6E  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 13820  001C70  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 13821  001C72  6813               	setf	(??_RTOS_DeleteTask+2)& (0+255),c
 13822  001C74  6814               	setf	(??_RTOS_DeleteTask+3)& (0+255),c
 13823  001C76  506A               	movf	_arrayTail,w,c	;volatile
 13824  001C78  6E15               	movwf	(??_RTOS_DeleteTask+4)& (0+255),c
 13825  001C7A  6A16               	clrf	(??_RTOS_DeleteTask+5)& (0+255),c
 13826  001C7C  5013               	movf	??_RTOS_DeleteTask+2,w,c
 13827  001C7E  2615               	addwf	??_RTOS_DeleteTask+4,f,c
 13828  001C80  5014               	movf	??_RTOS_DeleteTask+3,w,c
 13829  001C82  2216               	addwfc	??_RTOS_DeleteTask+5,f,c
 13830  001C84  5011               	movf	??_RTOS_DeleteTask,w,c
 13831  001C86  1815               	xorwf	??_RTOS_DeleteTask+4,w,c
 13832  001C88  E103               	bnz	u3930
 13833  001C8A  5012               	movf	??_RTOS_DeleteTask+1,w,c
 13834  001C8C  1816               	xorwf	??_RTOS_DeleteTask+5,w,c
 13835  001C8E  E01F               	bz	l5468
 13836  001C90                     u3930:
 13837                           
 13838                           ;dispatcher.c: 70: {
 13839                           ;dispatcher.c: 71: TaskArray[i] = TaskArray[arrayTail - 1];
 13840  001C90  506A               	movf	_arrayTail,w,c	;volatile
 13841  001C92  6E11               	movwf	??_RTOS_DeleteTask& (0+255),c
 13842  001C94  6A12               	clrf	(??_RTOS_DeleteTask+1)& (0+255),c
 13843  001C96  90D8               	bcf	status,0,c
 13844  001C98  3611               	rlcf	??_RTOS_DeleteTask,f,c
 13845  001C9A  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 13846  001C9C  90D8               	bcf	status,0,c
 13847  001C9E  3611               	rlcf	??_RTOS_DeleteTask,f,c
 13848  001CA0  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 13849  001CA2  90D8               	bcf	status,0,c
 13850  001CA4  3611               	rlcf	??_RTOS_DeleteTask,f,c
 13851  001CA6  3612               	rlcf	??_RTOS_DeleteTask+1,f,c
 13852  001CA8  0EF8               	movlw	low (_TaskArray+65528)
 13853  001CAA  2411               	addwf	??_RTOS_DeleteTask,w,c
 13854  001CAC  6ED9               	movwf	fsr2l,c
 13855  001CAE  0E00               	movlw	high (_TaskArray+65528)
 13856  001CB0  2012               	addwfc	??_RTOS_DeleteTask+1,w,c
 13857  001CB2  6EDA               	movwf	fsr2h,c
 13858  001CB4  5017               	movf	RTOS_DeleteTask@i,w,c
 13859  001CB6  0D08               	mullw	8
 13860  001CB8  0E00               	movlw	low _TaskArray
 13861  001CBA  24F3               	addwf	prodl,w,c
 13862  001CBC  6EE1               	movwf	fsr1l,c
 13863  001CBE  0E01               	movlw	high _TaskArray
 13864  001CC0  20F4               	addwfc	prodh,w,c
 13865  001CC2  6EE2               	movwf	fsr1h,c
 13866  001CC4  0E07               	movlw	7
 13867  001CC6                     u3941:
 13868  001CC6  CFDB FFE3          	movff	plusw2,plusw1
 13869  001CCA  06E8               	decf	wreg,f,c
 13870  001CCC  E2FC               	bc	u3941
 13871  001CCE                     l5468:
 13872                           
 13873                           ;dispatcher.c: 72: }
 13874                           ;dispatcher.c: 73: arrayTail--;
 13875  001CCE  066A               	decf	_arrayTail,f,c	;volatile
 13876                           
 13877                           ;dispatcher.c: 74: (INTCONbits.GIE = 1);
 13878  001CD0  8EF2               	bsf	intcon,7,c	;volatile
 13879  001CD2  0012               	return	
 13880  001CD4                     l5474:
 13881  001CD4  2A17               	incf	RTOS_DeleteTask@i,f,c
 13882  001CD6                     l5476:
 13883  001CD6  506A               	movf	_arrayTail,w,c	;volatile
 13884  001CD8  5C17               	subwf	RTOS_DeleteTask@i,w,c
 13885  001CDA  E3BE               	bnc	l5460
 13886  001CDC  0012               	return		;funcret
 13887  001CDE                     __end_of_RTOS_DeleteTask:
 13888                           	opt stack 0
 13889                           tosu	equ	0xFFF
 13890                           tosh	equ	0xFFE
 13891                           tosl	equ	0xFFD
 13892                           pclath	equ	0xFFA
 13893                           tblptru	equ	0xFF8
 13894                           tblptrh	equ	0xFF7
 13895                           tblptrl	equ	0xFF6
 13896                           tablat	equ	0xFF5
 13897                           prodh	equ	0xFF4
 13898                           prodl	equ	0xFF3
 13899                           intcon	equ	0xFF2
 13900                           intcon2	equ	0xFF1
 13901                           postinc0	equ	0xFEE
 13902                           wreg	equ	0xFE8
 13903                           indf1	equ	0xFE7
 13904                           plusw1	equ	0xFE3
 13905                           fsr1h	equ	0xFE2
 13906                           fsr1l	equ	0xFE1
 13907                           indf2	equ	0xFDF
 13908                           postinc2	equ	0xFDE
 13909                           postdec2	equ	0xFDD
 13910                           plusw2	equ	0xFDB
 13911                           fsr2h	equ	0xFDA
 13912                           fsr2l	equ	0xFD9
 13913                           status	equ	0xFD8
 13914                           
 13915 ;; *************** function _getTime *****************
 13916 ;; Defined at:
 13917 ;;		line 49 in file "ds3231.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;  p3              1   19[COMRAM] PTR unsigned char 
 13920 ;;		 -> TTime(7), 
 13921 ;;  p2              1   20[COMRAM] PTR unsigned char 
 13922 ;;		 -> TTime(7), 
 13923 ;;  p1              1   21[COMRAM] PTR unsigned char 
 13924 ;;		 -> TTime(7), 
 13925 ;; Auto vars:     Size  Location     Type
 13926 ;;		None
 13927 ;; Return value:  Size  Location     Type
 13928 ;;                  1    wreg      void 
 13929 ;; Registers used:
 13930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13931 ;; Tracked objects:
 13932 ;;		On entry : 0/0
 13933 ;;		On exit  : 0/0
 13934 ;;		Unchanged: 0/0
 13935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13936 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13939 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13940 ;;Total ram usage:        3 bytes
 13941 ;; Hardware stack levels used:    1
 13942 ;; Hardware stack levels required when called:    6
 13943 ;; This function calls:
 13944 ;;		_DS3231_Read
 13945 ;;		_bcd_to_decimal
 13946 ;; This function is called by:
 13947 ;;		_GetTime
 13948 ;;		_home_temp
 13949 ;; This function uses a non-reentrant model
 13950 ;;
 13951                           
 13952                           	psect	text67
 13953  001FFE                     __ptext67:
 13954                           	opt stack 0
 13955  001FFE                     _getTime:
 13956                           	opt stack 22
 13957                           
 13958                           ;ds3231.c: 51: *p1 = DS3231_Read(0x00);
 13959                           
 13960                           ;incstack = 0
 13961  001FFE  5016               	movf	getTime@p1,w,c
 13962  002000  6ED9               	movwf	fsr2l,c
 13963  002002  6ADA               	clrf	fsr2h,c
 13964  002004  0E00               	movlw	0
 13965  002006  EC7E  F012         	call	_DS3231_Read
 13966  00200A  6EDF               	movwf	indf2,c
 13967                           
 13968                           ;ds3231.c: 52: *p1 = bcd_to_decimal(*p1);
 13969  00200C  5016               	movf	getTime@p1,w,c
 13970  00200E  6ED9               	movwf	fsr2l,c
 13971  002010  6ADA               	clrf	fsr2h,c
 13972  002012  5016               	movf	getTime@p1,w,c
 13973  002014  ECE0  F00E         	call	PL96	;call to abstracted procedure
 13974  002018  ECC3  F013         	call	_bcd_to_decimal
 13975                           
 13976                           ;ds3231.c: 53: *p2 = DS3231_Read(0x01);
 13977  00201C  D816               	call	PL116	;call to abstracted procedure
 13978  00201E  0E01               	movlw	1
 13979  002020  EC7E  F012         	call	_DS3231_Read
 13980                           
 13981                           ;ds3231.c: 54: *p2 = bcd_to_decimal(*p2);
 13982  002024  D812               	call	PL116	;call to abstracted procedure
 13983  002026  5015               	movf	getTime@p2,w,c
 13984  002028  ECE0  F00E         	call	PL96	;call to abstracted procedure
 13985  00202C  ECC3  F013         	call	_bcd_to_decimal
 13986                           
 13987                           ;ds3231.c: 55: *p3 = (0x3F & DS3231_Read(0x02));
 13988  002030  D811               	call	PL124	;call to abstracted procedure
 13989  002032  0E02               	movlw	2
 13990  002034  EC7E  F012         	call	_DS3231_Read
 13991  002038  0B3F               	andlw	63
 13992                           
 13993                           ;ds3231.c: 56: *p3 = bcd_to_decimal(*p3);
 13994  00203A  D80C               	call	PL124	;call to abstracted procedure
 13995  00203C  5014               	movf	getTime@p3,w,c
 13996  00203E  ECE0  F00E         	call	PL96	;call to abstracted procedure
 13997  002042  ECC3  F013         	call	_bcd_to_decimal
 13998  002046  6EDF               	movwf	indf2,c
 13999  002048  0012               	return		;funcret
 14000  00204A                     __end_of_getTime:
 14001                           	opt stack 0
 14002  00204A                     PL116:
 14003                           	opt stack 22
 14004  00204A  6EDF               	movwf	indf2,c
 14005  00204C  5015               	movf	getTime@p2,w,c
 14006  00204E  6ED9               	movwf	fsr2l,c
 14007  002050  6ADA               	clrf	fsr2h,c
 14008  002052  0012               	return	
 14009  002054                     __end_ofPL116:
 14010                           	opt stack 0
 14011  002054                     PL124:
 14012                           	opt stack 22
 14013  002054  6EDF               	movwf	indf2,c
 14014  002056  5014               	movf	getTime@p3,w,c
 14015  002058  6ED9               	movwf	fsr2l,c
 14016  00205A  6ADA               	clrf	fsr2h,c
 14017  00205C  0012               	return	
 14018  00205E                     __end_ofPL124:
 14019                           	opt stack 0
 14020                           tosu	equ	0xFFF
 14021                           tosh	equ	0xFFE
 14022                           tosl	equ	0xFFD
 14023                           pclath	equ	0xFFA
 14024                           tblptru	equ	0xFF8
 14025                           tblptrh	equ	0xFF7
 14026                           tblptrl	equ	0xFF6
 14027                           tablat	equ	0xFF5
 14028                           prodh	equ	0xFF4
 14029                           prodl	equ	0xFF3
 14030                           intcon	equ	0xFF2
 14031                           intcon2	equ	0xFF1
 14032                           postinc0	equ	0xFEE
 14033                           wreg	equ	0xFE8
 14034                           indf1	equ	0xFE7
 14035                           plusw1	equ	0xFE3
 14036                           fsr1h	equ	0xFE2
 14037                           fsr1l	equ	0xFE1
 14038                           indf2	equ	0xFDF
 14039                           postinc2	equ	0xFDE
 14040                           postdec2	equ	0xFDD
 14041                           plusw2	equ	0xFDB
 14042                           fsr2h	equ	0xFDA
 14043                           fsr2l	equ	0xFD9
 14044                           status	equ	0xFD8
 14045                           
 14046 ;; *************** function _getDate *****************
 14047 ;; Defined at:
 14048 ;;		line 62 in file "ds3231.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;  p4              1   19[COMRAM] PTR unsigned char 
 14051 ;;		 -> TTime(7), 
 14052 ;;  p3              1   20[COMRAM] PTR unsigned char 
 14053 ;;		 -> TTime(7), 
 14054 ;;  p2              1   21[COMRAM] PTR unsigned char 
 14055 ;;		 -> TTime(7), 
 14056 ;;  p1              1   22[COMRAM] PTR unsigned char 
 14057 ;;		 -> TTime(7), 
 14058 ;; Auto vars:     Size  Location     Type
 14059 ;;		None
 14060 ;; Return value:  Size  Location     Type
 14061 ;;                  1    wreg      void 
 14062 ;; Registers used:
 14063 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14064 ;; Tracked objects:
 14065 ;;		On entry : 0/0
 14066 ;;		On exit  : 0/0
 14067 ;;		Unchanged: 0/0
 14068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14069 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14072 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14073 ;;Total ram usage:        4 bytes
 14074 ;; Hardware stack levels used:    1
 14075 ;; Hardware stack levels required when called:    6
 14076 ;; This function calls:
 14077 ;;		_DS3231_Read
 14078 ;;		_bcd_to_decimal
 14079 ;; This function is called by:
 14080 ;;		_GetTime
 14081 ;; This function uses a non-reentrant model
 14082 ;;
 14083                           
 14084                           	psect	text68
 14085  001D64                     __ptext68:
 14086                           	opt stack 0
 14087  001D64                     _getDate:
 14088                           	opt stack 22
 14089                           
 14090                           ;ds3231.c: 64: *p1 = DS3231_Read(0x06);
 14091                           
 14092                           ;incstack = 0
 14093  001D64  5017               	movf	getDate@p1,w,c
 14094  001D66  6ED9               	movwf	fsr2l,c
 14095  001D68  6ADA               	clrf	fsr2h,c
 14096  001D6A  0E06               	movlw	6
 14097  001D6C  EC7E  F012         	call	_DS3231_Read
 14098  001D70  6EDF               	movwf	indf2,c
 14099                           
 14100                           ;ds3231.c: 65: *p1 = bcd_to_decimal(*p1);
 14101  001D72  5017               	movf	getDate@p1,w,c
 14102  001D74  6ED9               	movwf	fsr2l,c
 14103  001D76  6ADA               	clrf	fsr2h,c
 14104  001D78  5017               	movf	getDate@p1,w,c
 14105  001D7A  D822               	call	PL96	;call to abstracted procedure
 14106  001D7C  ECC3  F013         	call	_bcd_to_decimal
 14107                           
 14108                           ;ds3231.c: 66: *p2 = (0x1F & DS3231_Read(0x05));
 14109  001D80  D82D               	call	PL146	;call to abstracted procedure
 14110  001D82  0E05               	movlw	5
 14111  001D84  EC7E  F012         	call	_DS3231_Read
 14112  001D88  0B1F               	andlw	31
 14113                           
 14114                           ;ds3231.c: 67: *p2 = bcd_to_decimal(*p2);
 14115  001D8A  D828               	call	PL146	;call to abstracted procedure
 14116  001D8C  5016               	movf	getDate@p2,w,c
 14117  001D8E  D818               	call	PL96	;call to abstracted procedure
 14118  001D90  ECC3  F013         	call	_bcd_to_decimal
 14119                           
 14120                           ;ds3231.c: 68: *p3 = (0x3F & DS3231_Read(0x04));
 14121  001D94  D819               	call	PL134	;call to abstracted procedure
 14122  001D96  0E04               	movlw	4
 14123  001D98  EC7E  F012         	call	_DS3231_Read
 14124  001D9C  0B3F               	andlw	63
 14125                           
 14126                           ;ds3231.c: 69: *p3 = bcd_to_decimal(*p3);
 14127  001D9E  D814               	call	PL134	;call to abstracted procedure
 14128  001DA0  5015               	movf	getDate@p3,w,c
 14129  001DA2  D80E               	call	PL96	;call to abstracted procedure
 14130  001DA4  ECC3  F013         	call	_bcd_to_decimal
 14131                           
 14132                           ;ds3231.c: 70: *p4 = (0x07 & DS3231_Read(0x03));
 14133  001DA8  D814               	call	PL136	;call to abstracted procedure
 14134  001DAA  0E03               	movlw	3
 14135  001DAC  EC7E  F012         	call	_DS3231_Read
 14136  001DB0  0B07               	andlw	7
 14137                           
 14138                           ;ds3231.c: 71: *p4 = bcd_to_decimal(*p4);
 14139  001DB2  D80F               	call	PL136	;call to abstracted procedure
 14140  001DB4  5014               	movf	getDate@p4,w,c
 14141  001DB6  D804               	call	PL96	;call to abstracted procedure
 14142  001DB8  ECC3  F013         	call	_bcd_to_decimal
 14143  001DBC  6EDF               	movwf	indf2,c
 14144  001DBE  0012               	return		;funcret
 14145  001DC0                     __end_of_getDate:
 14146                           	opt stack 0
 14147  001DC0                     PL96:
 14148                           	opt stack 22
 14149  001DC0  6EE1               	movwf	fsr1l,c
 14150  001DC2  6AE2               	clrf	fsr1h,c
 14151  001DC4  50E7               	movf	indf1,w,c
 14152  001DC6  0012               	return	
 14153  001DC8                     __end_ofPL96:
 14154                           	opt stack 0
 14155  001DC8                     PL134:
 14156                           	opt stack 22
 14157  001DC8  6EDF               	movwf	indf2,c
 14158  001DCA  5015               	movf	getDate@p3,w,c
 14159  001DCC  6ED9               	movwf	fsr2l,c
 14160  001DCE  6ADA               	clrf	fsr2h,c
 14161  001DD0  0012               	return	
 14162  001DD2                     __end_ofPL134:
 14163                           	opt stack 0
 14164  001DD2                     PL136:
 14165                           	opt stack 22
 14166  001DD2  6EDF               	movwf	indf2,c
 14167  001DD4  5014               	movf	getDate@p4,w,c
 14168  001DD6  6ED9               	movwf	fsr2l,c
 14169  001DD8  6ADA               	clrf	fsr2h,c
 14170  001DDA  0012               	return	
 14171  001DDC                     __end_ofPL136:
 14172                           	opt stack 0
 14173  001DDC                     PL146:
 14174                           	opt stack 22
 14175  001DDC  6EDF               	movwf	indf2,c
 14176  001DDE  5016               	movf	getDate@p2,w,c
 14177  001DE0  6ED9               	movwf	fsr2l,c
 14178  001DE2  6ADA               	clrf	fsr2h,c
 14179  001DE4  0012               	return	
 14180  001DE6                     __end_ofPL146:
 14181                           	opt stack 0
 14182                           tosu	equ	0xFFF
 14183                           tosh	equ	0xFFE
 14184                           tosl	equ	0xFFD
 14185                           pclath	equ	0xFFA
 14186                           tblptru	equ	0xFF8
 14187                           tblptrh	equ	0xFF7
 14188                           tblptrl	equ	0xFF6
 14189                           tablat	equ	0xFF5
 14190                           prodh	equ	0xFF4
 14191                           prodl	equ	0xFF3
 14192                           intcon	equ	0xFF2
 14193                           intcon2	equ	0xFF1
 14194                           postinc0	equ	0xFEE
 14195                           wreg	equ	0xFE8
 14196                           indf1	equ	0xFE7
 14197                           plusw1	equ	0xFE3
 14198                           fsr1h	equ	0xFE2
 14199                           fsr1l	equ	0xFE1
 14200                           indf2	equ	0xFDF
 14201                           postinc2	equ	0xFDE
 14202                           postdec2	equ	0xFDD
 14203                           plusw2	equ	0xFDB
 14204                           fsr2h	equ	0xFDA
 14205                           fsr2l	equ	0xFD9
 14206                           status	equ	0xFD8
 14207                           
 14208 ;; *************** function _bcd_to_decimal *****************
 14209 ;; Defined at:
 14210 ;;		line 4 in file "ds3231.c"
 14211 ;; Parameters:    Size  Location     Type
 14212 ;;  d               1    wreg     unsigned char 
 14213 ;; Auto vars:     Size  Location     Type
 14214 ;;  d               1   15[COMRAM] unsigned char 
 14215 ;; Return value:  Size  Location     Type
 14216 ;;                  1    wreg      unsigned char 
 14217 ;; Registers used:
 14218 ;;		wreg, status,2, status,0, prodl, prodh
 14219 ;; Tracked objects:
 14220 ;;		On entry : 0/0
 14221 ;;		On exit  : 0/0
 14222 ;;		Unchanged: 0/0
 14223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14226 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14227 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14228 ;;Total ram usage:        2 bytes
 14229 ;; Hardware stack levels used:    1
 14230 ;; Hardware stack levels required when called:    3
 14231 ;; This function calls:
 14232 ;;		Nothing
 14233 ;; This function is called by:
 14234 ;;		_getTime
 14235 ;;		_getDate
 14236 ;; This function uses a non-reentrant model
 14237 ;;
 14238                           
 14239                           	psect	text69
 14240  002786                     __ptext69:
 14241                           	opt stack 0
 14242  002786                     _bcd_to_decimal:
 14243                           	opt stack 24
 14244                           
 14245                           ;incstack = 0
 14246                           ;bcd_to_decimal@d stored from wreg
 14247  002786  6E10               	movwf	bcd_to_decimal@d,c
 14248                           
 14249                           ;ds3231.c: 6: return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10));
 14250  002788  C010  F00F         	movff	bcd_to_decimal@d,??_bcd_to_decimal
 14251  00278C  0E0F               	movlw	15
 14252  00278E  160F               	andwf	??_bcd_to_decimal,f,c
 14253  002790  3810               	swapf	bcd_to_decimal@d,w,c
 14254  002792  0B0F               	andlw	15
 14255  002794  0D0A               	mullw	10
 14256  002796  50F3               	movf	prodl,w,c
 14257  002798  240F               	addwf	??_bcd_to_decimal,w,c
 14258  00279A  0012               	return		;funcret
 14259  00279C                     __end_of_bcd_to_decimal:
 14260                           	opt stack 0
 14261                           tosu	equ	0xFFF
 14262                           tosh	equ	0xFFE
 14263                           tosl	equ	0xFFD
 14264                           pclath	equ	0xFFA
 14265                           tblptru	equ	0xFF8
 14266                           tblptrh	equ	0xFF7
 14267                           tblptrl	equ	0xFF6
 14268                           tablat	equ	0xFF5
 14269                           prodh	equ	0xFF4
 14270                           prodl	equ	0xFF3
 14271                           intcon	equ	0xFF2
 14272                           intcon2	equ	0xFF1
 14273                           postinc0	equ	0xFEE
 14274                           wreg	equ	0xFE8
 14275                           indf1	equ	0xFE7
 14276                           plusw1	equ	0xFE3
 14277                           fsr1h	equ	0xFE2
 14278                           fsr1l	equ	0xFE1
 14279                           indf2	equ	0xFDF
 14280                           postinc2	equ	0xFDE
 14281                           postdec2	equ	0xFDD
 14282                           plusw2	equ	0xFDB
 14283                           fsr2h	equ	0xFDA
 14284                           fsr2l	equ	0xFD9
 14285                           status	equ	0xFD8
 14286                           
 14287 ;; *************** function _DS3231_Read *****************
 14288 ;; Defined at:
 14289 ;;		line 16 in file "ds3231.c"
 14290 ;; Parameters:    Size  Location     Type
 14291 ;;  address         1    wreg     unsigned char 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;  address         1   17[COMRAM] unsigned char 
 14294 ;;  value           1   18[COMRAM] unsigned char 
 14295 ;; Return value:  Size  Location     Type
 14296 ;;                  1    wreg      unsigned char 
 14297 ;; Registers used:
 14298 ;;		wreg, status,2, status,0, cstack
 14299 ;; Tracked objects:
 14300 ;;		On entry : 0/0
 14301 ;;		On exit  : 0/0
 14302 ;;		Unchanged: 0/0
 14303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14308 ;;Total ram usage:        2 bytes
 14309 ;; Hardware stack levels used:    1
 14310 ;; Hardware stack levels required when called:    5
 14311 ;; This function calls:
 14312 ;;		_I2C_Master_Read
 14313 ;;		_I2C_Master_RepeatedStart
 14314 ;;		_I2C_Master_Start
 14315 ;;		_I2C_Master_Stop
 14316 ;;		_I2C_Master_Write
 14317 ;; This function is called by:
 14318 ;;		_getTime
 14319 ;;		_getDate
 14320 ;; This function uses a non-reentrant model
 14321 ;;
 14322                           
 14323                           	psect	text70
 14324  0024FC                     __ptext70:
 14325                           	opt stack 0
 14326  0024FC                     _DS3231_Read:
 14327                           	opt stack 22
 14328                           
 14329                           ;incstack = 0
 14330                           ;DS3231_Read@address stored from wreg
 14331  0024FC  6E12               	movwf	DS3231_Read@address,c
 14332                           
 14333                           ;ds3231.c: 19: I2C_Master_Start();
 14334  0024FE  EC21  F014         	call	_I2C_Master_Start	;wreg free
 14335                           
 14336                           ;ds3231.c: 20: I2C_Master_Write(0xD0);
 14337  002502  0ED0               	movlw	208
 14338  002504  EC17  F014         	call	_I2C_Master_Write
 14339                           
 14340                           ;ds3231.c: 21: I2C_Master_Write(address);
 14341  002508  5012               	movf	DS3231_Read@address,w,c
 14342  00250A  EC17  F014         	call	_I2C_Master_Write
 14343                           
 14344                           ;ds3231.c: 22: I2C_Master_RepeatedStart();
 14345  00250E  EC25  F014         	call	_I2C_Master_RepeatedStart	;wreg free
 14346                           
 14347                           ;ds3231.c: 23: I2C_Master_Write(0xD1);
 14348  002512  0ED1               	movlw	209
 14349  002514  EC17  F014         	call	_I2C_Master_Write
 14350                           
 14351                           ;ds3231.c: 24: value = I2C_Master_Read(0);
 14352  002518  0E00               	movlw	0
 14353  00251A  EC52  F013         	call	_I2C_Master_Read
 14354  00251E  6E13               	movwf	DS3231_Read@value,c
 14355                           
 14356                           ;ds3231.c: 25: I2C_Master_Stop();
 14357  002520  EC1D  F014         	call	_I2C_Master_Stop	;wreg free
 14358                           
 14359                           ;ds3231.c: 26: return value;
 14360  002524  5013               	movf	DS3231_Read@value,w,c
 14361  002526  0012               	return		;funcret
 14362  002528                     __end_of_DS3231_Read:
 14363                           	opt stack 0
 14364                           tosu	equ	0xFFF
 14365                           tosh	equ	0xFFE
 14366                           tosl	equ	0xFFD
 14367                           pclath	equ	0xFFA
 14368                           tblptru	equ	0xFF8
 14369                           tblptrh	equ	0xFF7
 14370                           tblptrl	equ	0xFF6
 14371                           tablat	equ	0xFF5
 14372                           prodh	equ	0xFF4
 14373                           prodl	equ	0xFF3
 14374                           intcon	equ	0xFF2
 14375                           intcon2	equ	0xFF1
 14376                           postinc0	equ	0xFEE
 14377                           wreg	equ	0xFE8
 14378                           indf1	equ	0xFE7
 14379                           plusw1	equ	0xFE3
 14380                           fsr1h	equ	0xFE2
 14381                           fsr1l	equ	0xFE1
 14382                           indf2	equ	0xFDF
 14383                           postinc2	equ	0xFDE
 14384                           postdec2	equ	0xFDD
 14385                           plusw2	equ	0xFDB
 14386                           fsr2h	equ	0xFDA
 14387                           fsr2l	equ	0xFD9
 14388                           status	equ	0xFD8
 14389                           
 14390 ;; *************** function _I2C_Master_Write *****************
 14391 ;; Defined at:
 14392 ;;		line 51 in file "i2c.c"
 14393 ;; Parameters:    Size  Location     Type
 14394 ;;  d               1    wreg     unsigned char 
 14395 ;; Auto vars:     Size  Location     Type
 14396 ;;  d               1   15[COMRAM] unsigned char 
 14397 ;; Return value:  Size  Location     Type
 14398 ;;                  1    wreg      void 
 14399 ;; Registers used:
 14400 ;;		wreg, status,2, status,0, cstack
 14401 ;; Tracked objects:
 14402 ;;		On entry : 0/0
 14403 ;;		On exit  : 0/0
 14404 ;;		Unchanged: 0/0
 14405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14407 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14409 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14410 ;;Total ram usage:        1 bytes
 14411 ;; Hardware stack levels used:    1
 14412 ;; Hardware stack levels required when called:    4
 14413 ;; This function calls:
 14414 ;;		_I2C_Master_Wait
 14415 ;; This function is called by:
 14416 ;;		_DS3231_Read
 14417 ;;		_DS3231_Write
 14418 ;;		_BMP085ReadByte
 14419 ;;		_bmp085ReadInt
 14420 ;;		_BMP085WriteByte
 14421 ;; This function uses a non-reentrant model
 14422 ;;
 14423                           
 14424                           	psect	text71
 14425  00282E                     __ptext71:
 14426                           	opt stack 0
 14427  00282E                     _I2C_Master_Write:
 14428                           	opt stack 23
 14429                           
 14430                           ;incstack = 0
 14431                           ;I2C_Master_Write@d stored from wreg
 14432  00282E  6E10               	movwf	I2C_Master_Write@d,c
 14433                           
 14434                           ;i2c.c: 53: I2C_Master_Wait();
 14435  002830  ECFB  F013         	call	_I2C_Master_Wait	;wreg free
 14436                           
 14437                           ;i2c.c: 54: SSPBUF = d;
 14438  002834  C010  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 14439  002838  0012               	return		;funcret
 14440  00283A                     __end_of_I2C_Master_Write:
 14441                           	opt stack 0
 14442                           tosu	equ	0xFFF
 14443                           tosh	equ	0xFFE
 14444                           tosl	equ	0xFFD
 14445                           pclath	equ	0xFFA
 14446                           tblptru	equ	0xFF8
 14447                           tblptrh	equ	0xFF7
 14448                           tblptrl	equ	0xFF6
 14449                           tablat	equ	0xFF5
 14450                           prodh	equ	0xFF4
 14451                           prodl	equ	0xFF3
 14452                           intcon	equ	0xFF2
 14453                           intcon2	equ	0xFF1
 14454                           postinc0	equ	0xFEE
 14455                           wreg	equ	0xFE8
 14456                           indf1	equ	0xFE7
 14457                           plusw1	equ	0xFE3
 14458                           fsr1h	equ	0xFE2
 14459                           fsr1l	equ	0xFE1
 14460                           indf2	equ	0xFDF
 14461                           postinc2	equ	0xFDE
 14462                           postdec2	equ	0xFDD
 14463                           plusw2	equ	0xFDB
 14464                           fsr2h	equ	0xFDA
 14465                           fsr2l	equ	0xFD9
 14466                           status	equ	0xFD8
 14467                           
 14468 ;; *************** function _I2C_Master_Stop *****************
 14469 ;; Defined at:
 14470 ;;		line 44 in file "i2c.c"
 14471 ;; Parameters:    Size  Location     Type
 14472 ;;		None
 14473 ;; Auto vars:     Size  Location     Type
 14474 ;;		None
 14475 ;; Return value:  Size  Location     Type
 14476 ;;                  1    wreg      void 
 14477 ;; Registers used:
 14478 ;;		wreg, status,2, status,0, cstack
 14479 ;; Tracked objects:
 14480 ;;		On entry : 0/0
 14481 ;;		On exit  : 0/0
 14482 ;;		Unchanged: 0/0
 14483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14488 ;;Total ram usage:        0 bytes
 14489 ;; Hardware stack levels used:    1
 14490 ;; Hardware stack levels required when called:    4
 14491 ;; This function calls:
 14492 ;;		_I2C_Master_Wait
 14493 ;; This function is called by:
 14494 ;;		_DS3231_Read
 14495 ;;		_DS3231_Write
 14496 ;;		_BMP085ReadByte
 14497 ;;		_bmp085ReadInt
 14498 ;;		_BMP085WriteByte
 14499 ;; This function uses a non-reentrant model
 14500 ;;
 14501                           
 14502                           	psect	text72
 14503  00283A                     __ptext72:
 14504                           	opt stack 0
 14505  00283A                     _I2C_Master_Stop:
 14506                           	opt stack 23
 14507                           
 14508                           ;i2c.c: 46: I2C_Master_Wait();
 14509                           
 14510                           ;incstack = 0
 14511  00283A  ECFB  F013         	call	_I2C_Master_Wait	;wreg free
 14512                           
 14513                           ;i2c.c: 47: PEN = 1;
 14514  00283E  84C5               	bsf	4037,2,c	;volatile
 14515  002840  0012               	return		;funcret
 14516  002842                     __end_of_I2C_Master_Stop:
 14517                           	opt stack 0
 14518                           tosu	equ	0xFFF
 14519                           tosh	equ	0xFFE
 14520                           tosl	equ	0xFFD
 14521                           pclath	equ	0xFFA
 14522                           tblptru	equ	0xFF8
 14523                           tblptrh	equ	0xFF7
 14524                           tblptrl	equ	0xFF6
 14525                           tablat	equ	0xFF5
 14526                           prodh	equ	0xFF4
 14527                           prodl	equ	0xFF3
 14528                           intcon	equ	0xFF2
 14529                           intcon2	equ	0xFF1
 14530                           postinc0	equ	0xFEE
 14531                           wreg	equ	0xFE8
 14532                           indf1	equ	0xFE7
 14533                           plusw1	equ	0xFE3
 14534                           fsr1h	equ	0xFE2
 14535                           fsr1l	equ	0xFE1
 14536                           indf2	equ	0xFDF
 14537                           postinc2	equ	0xFDE
 14538                           postdec2	equ	0xFDD
 14539                           plusw2	equ	0xFDB
 14540                           fsr2h	equ	0xFDA
 14541                           fsr2l	equ	0xFD9
 14542                           status	equ	0xFD8
 14543                           
 14544 ;; *************** function _I2C_Master_Start *****************
 14545 ;; Defined at:
 14546 ;;		line 30 in file "i2c.c"
 14547 ;; Parameters:    Size  Location     Type
 14548 ;;		None
 14549 ;; Auto vars:     Size  Location     Type
 14550 ;;		None
 14551 ;; Return value:  Size  Location     Type
 14552 ;;                  1    wreg      void 
 14553 ;; Registers used:
 14554 ;;		wreg, status,2, status,0, cstack
 14555 ;; Tracked objects:
 14556 ;;		On entry : 0/0
 14557 ;;		On exit  : 0/0
 14558 ;;		Unchanged: 0/0
 14559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14564 ;;Total ram usage:        0 bytes
 14565 ;; Hardware stack levels used:    1
 14566 ;; Hardware stack levels required when called:    4
 14567 ;; This function calls:
 14568 ;;		_I2C_Master_Wait
 14569 ;; This function is called by:
 14570 ;;		_DS3231_Read
 14571 ;;		_DS3231_Write
 14572 ;;		_BMP085ReadByte
 14573 ;;		_bmp085ReadInt
 14574 ;;		_BMP085WriteByte
 14575 ;; This function uses a non-reentrant model
 14576 ;;
 14577                           
 14578                           	psect	text73
 14579  002842                     __ptext73:
 14580                           	opt stack 0
 14581  002842                     _I2C_Master_Start:
 14582                           	opt stack 23
 14583                           
 14584                           ;i2c.c: 32: I2C_Master_Wait();
 14585                           
 14586                           ;incstack = 0
 14587  002842  ECFB  F013         	call	_I2C_Master_Wait	;wreg free
 14588                           
 14589                           ;i2c.c: 33: SEN = 1;
 14590  002846  80C5               	bsf	4037,0,c	;volatile
 14591  002848  0012               	return		;funcret
 14592  00284A                     __end_of_I2C_Master_Start:
 14593                           	opt stack 0
 14594                           tosu	equ	0xFFF
 14595                           tosh	equ	0xFFE
 14596                           tosl	equ	0xFFD
 14597                           pclath	equ	0xFFA
 14598                           tblptru	equ	0xFF8
 14599                           tblptrh	equ	0xFF7
 14600                           tblptrl	equ	0xFF6
 14601                           tablat	equ	0xFF5
 14602                           prodh	equ	0xFF4
 14603                           prodl	equ	0xFF3
 14604                           intcon	equ	0xFF2
 14605                           intcon2	equ	0xFF1
 14606                           postinc0	equ	0xFEE
 14607                           wreg	equ	0xFE8
 14608                           indf1	equ	0xFE7
 14609                           plusw1	equ	0xFE3
 14610                           fsr1h	equ	0xFE2
 14611                           fsr1l	equ	0xFE1
 14612                           indf2	equ	0xFDF
 14613                           postinc2	equ	0xFDE
 14614                           postdec2	equ	0xFDD
 14615                           plusw2	equ	0xFDB
 14616                           fsr2h	equ	0xFDA
 14617                           fsr2l	equ	0xFD9
 14618                           status	equ	0xFD8
 14619                           
 14620 ;; *************** function _I2C_Master_RepeatedStart *****************
 14621 ;; Defined at:
 14622 ;;		line 37 in file "i2c.c"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;		None
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;		None
 14627 ;; Return value:  Size  Location     Type
 14628 ;;                  1    wreg      void 
 14629 ;; Registers used:
 14630 ;;		wreg, status,2, status,0, cstack
 14631 ;; Tracked objects:
 14632 ;;		On entry : 0/0
 14633 ;;		On exit  : 0/0
 14634 ;;		Unchanged: 0/0
 14635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14640 ;;Total ram usage:        0 bytes
 14641 ;; Hardware stack levels used:    1
 14642 ;; Hardware stack levels required when called:    4
 14643 ;; This function calls:
 14644 ;;		_I2C_Master_Wait
 14645 ;; This function is called by:
 14646 ;;		_DS3231_Read
 14647 ;;		_BMP085ReadByte
 14648 ;;		_bmp085ReadInt
 14649 ;; This function uses a non-reentrant model
 14650 ;;
 14651                           
 14652                           	psect	text74
 14653  00284A                     __ptext74:
 14654                           	opt stack 0
 14655  00284A                     _I2C_Master_RepeatedStart:
 14656                           	opt stack 23
 14657                           
 14658                           ;i2c.c: 39: I2C_Master_Wait();
 14659                           
 14660                           ;incstack = 0
 14661  00284A  ECFB  F013         	call	_I2C_Master_Wait	;wreg free
 14662                           
 14663                           ;i2c.c: 40: RSEN = 1;
 14664  00284E  82C5               	bsf	4037,1,c	;volatile
 14665  002850  0012               	return		;funcret
 14666  002852                     __end_of_I2C_Master_RepeatedStart:
 14667                           	opt stack 0
 14668                           tosu	equ	0xFFF
 14669                           tosh	equ	0xFFE
 14670                           tosl	equ	0xFFD
 14671                           pclath	equ	0xFFA
 14672                           tblptru	equ	0xFF8
 14673                           tblptrh	equ	0xFF7
 14674                           tblptrl	equ	0xFF6
 14675                           tablat	equ	0xFF5
 14676                           prodh	equ	0xFF4
 14677                           prodl	equ	0xFF3
 14678                           intcon	equ	0xFF2
 14679                           intcon2	equ	0xFF1
 14680                           postinc0	equ	0xFEE
 14681                           wreg	equ	0xFE8
 14682                           indf1	equ	0xFE7
 14683                           plusw1	equ	0xFE3
 14684                           fsr1h	equ	0xFE2
 14685                           fsr1l	equ	0xFE1
 14686                           indf2	equ	0xFDF
 14687                           postinc2	equ	0xFDE
 14688                           postdec2	equ	0xFDD
 14689                           plusw2	equ	0xFDB
 14690                           fsr2h	equ	0xFDA
 14691                           fsr2l	equ	0xFD9
 14692                           status	equ	0xFD8
 14693                           
 14694 ;; *************** function _I2C_Master_Read *****************
 14695 ;; Defined at:
 14696 ;;		line 58 in file "i2c.c"
 14697 ;; Parameters:    Size  Location     Type
 14698 ;;  a               1    wreg     unsigned char 
 14699 ;; Auto vars:     Size  Location     Type
 14700 ;;  a               1   15[COMRAM] unsigned char 
 14701 ;;  temp            1   16[COMRAM] unsigned char 
 14702 ;; Return value:  Size  Location     Type
 14703 ;;                  1    wreg      unsigned char 
 14704 ;; Registers used:
 14705 ;;		wreg, status,2, status,0, cstack
 14706 ;; Tracked objects:
 14707 ;;		On entry : 0/0
 14708 ;;		On exit  : 0/0
 14709 ;;		Unchanged: 0/0
 14710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14715 ;;Total ram usage:        2 bytes
 14716 ;; Hardware stack levels used:    1
 14717 ;; Hardware stack levels required when called:    4
 14718 ;; This function calls:
 14719 ;;		_I2C_Master_Wait
 14720 ;; This function is called by:
 14721 ;;		_DS3231_Read
 14722 ;;		_BMP085ReadByte
 14723 ;;		_bmp085ReadInt
 14724 ;; This function uses a non-reentrant model
 14725 ;;
 14726                           
 14727                           	psect	text75
 14728  0026A4                     __ptext75:
 14729                           	opt stack 0
 14730  0026A4                     _I2C_Master_Read:
 14731                           	opt stack 23
 14732                           
 14733                           ;incstack = 0
 14734                           ;I2C_Master_Read@a stored from wreg
 14735  0026A4  6E10               	movwf	I2C_Master_Read@a,c
 14736                           
 14737                           ;i2c.c: 60: uint8_t temp;
 14738                           ;i2c.c: 61: I2C_Master_Wait();
 14739  0026A6  ECFB  F013         	call	_I2C_Master_Wait	;wreg free
 14740                           
 14741                           ;i2c.c: 62: RCEN = 1;
 14742  0026AA  86C5               	bsf	4037,3,c	;volatile
 14743                           
 14744                           ;i2c.c: 63: I2C_Master_Wait();
 14745  0026AC  ECFB  F013         	call	_I2C_Master_Wait	;wreg free
 14746                           
 14747                           ;i2c.c: 64: temp = SSPBUF;
 14748  0026B0  CFC9 F011          	movff	4041,I2C_Master_Read@temp	;volatile
 14749                           
 14750                           ;i2c.c: 65: I2C_Master_Wait();
 14751  0026B4  ECFB  F013         	call	_I2C_Master_Wait	;wreg free
 14752                           
 14753                           ;i2c.c: 66: ACKDT = (a)?0:1;
 14754  0026B8  5010               	movf	I2C_Master_Read@a,w,c
 14755  0026BA  E102               	bnz	u3320
 14756  0026BC  8AC5               	bsf	4037,5,c	;volatile
 14757  0026BE  D001               	goto	l4942
 14758  0026C0                     u3320:
 14759  0026C0  9AC5               	bcf	4037,5,c	;volatile
 14760  0026C2                     l4942:
 14761                           
 14762                           ;i2c.c: 67: ACKEN = 1;
 14763  0026C2  88C5               	bsf	4037,4,c	;volatile
 14764                           
 14765                           ;i2c.c: 68: return temp;
 14766  0026C4  5011               	movf	I2C_Master_Read@temp,w,c
 14767  0026C6  0012               	return		;funcret
 14768  0026C8                     __end_of_I2C_Master_Read:
 14769                           	opt stack 0
 14770                           tosu	equ	0xFFF
 14771                           tosh	equ	0xFFE
 14772                           tosl	equ	0xFFD
 14773                           pclath	equ	0xFFA
 14774                           tblptru	equ	0xFF8
 14775                           tblptrh	equ	0xFF7
 14776                           tblptrl	equ	0xFF6
 14777                           tablat	equ	0xFF5
 14778                           prodh	equ	0xFF4
 14779                           prodl	equ	0xFF3
 14780                           intcon	equ	0xFF2
 14781                           intcon2	equ	0xFF1
 14782                           postinc0	equ	0xFEE
 14783                           wreg	equ	0xFE8
 14784                           indf1	equ	0xFE7
 14785                           plusw1	equ	0xFE3
 14786                           fsr1h	equ	0xFE2
 14787                           fsr1l	equ	0xFE1
 14788                           indf2	equ	0xFDF
 14789                           postinc2	equ	0xFDE
 14790                           postdec2	equ	0xFDD
 14791                           plusw2	equ	0xFDB
 14792                           fsr2h	equ	0xFDA
 14793                           fsr2l	equ	0xFD9
 14794                           status	equ	0xFD8
 14795                           
 14796 ;; *************** function _I2C_Master_Wait *****************
 14797 ;; Defined at:
 14798 ;;		line 24 in file "i2c.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;		None
 14801 ;; Auto vars:     Size  Location     Type
 14802 ;;		None
 14803 ;; Return value:  Size  Location     Type
 14804 ;;                  1    wreg      void 
 14805 ;; Registers used:
 14806 ;;		wreg, status,2, status,0
 14807 ;; Tracked objects:
 14808 ;;		On entry : 0/0
 14809 ;;		On exit  : 0/0
 14810 ;;		Unchanged: 0/0
 14811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14814 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14815 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14816 ;;Total ram usage:        1 bytes
 14817 ;; Hardware stack levels used:    1
 14818 ;; Hardware stack levels required when called:    3
 14819 ;; This function calls:
 14820 ;;		Nothing
 14821 ;; This function is called by:
 14822 ;;		_I2C_Master_Start
 14823 ;;		_I2C_Master_RepeatedStart
 14824 ;;		_I2C_Master_Stop
 14825 ;;		_I2C_Master_Write
 14826 ;;		_I2C_Master_Read
 14827 ;; This function uses a non-reentrant model
 14828 ;;
 14829                           
 14830                           	psect	text76
 14831  0027F6                     __ptext76:
 14832                           	opt stack 0
 14833  0027F6                     _I2C_Master_Wait:
 14834                           	opt stack 23
 14835  0027F6                     l146:
 14836  0027F6  B4C7               	btfsc	4039,2,c	;volatile
 14837  0027F8  D7FE               	goto	l146
 14838  0027FA  CFC5 F00F          	movff	4037,??_I2C_Master_Wait	;volatile
 14839  0027FE  0E1F               	movlw	31
 14840  002800  160F               	andwf	??_I2C_Master_Wait,f,c
 14841  002802  E1F9               	bnz	l146
 14842  002804  0C1F               	retlw	31	;funcret
 14843  002806                     __end_of_I2C_Master_Wait:
 14844                           	opt stack 0
 14845                           tosu	equ	0xFFF
 14846                           tosh	equ	0xFFE
 14847                           tosl	equ	0xFFD
 14848                           pclath	equ	0xFFA
 14849                           tblptru	equ	0xFF8
 14850                           tblptrh	equ	0xFF7
 14851                           tblptrl	equ	0xFF6
 14852                           tablat	equ	0xFF5
 14853                           prodh	equ	0xFF4
 14854                           prodl	equ	0xFF3
 14855                           intcon	equ	0xFF2
 14856                           intcon2	equ	0xFF1
 14857                           postinc0	equ	0xFEE
 14858                           wreg	equ	0xFE8
 14859                           indf1	equ	0xFE7
 14860                           plusw1	equ	0xFE3
 14861                           fsr1h	equ	0xFE2
 14862                           fsr1l	equ	0xFE1
 14863                           indf2	equ	0xFDF
 14864                           postinc2	equ	0xFDE
 14865                           postdec2	equ	0xFDD
 14866                           plusw2	equ	0xFDB
 14867                           fsr2h	equ	0xFDA
 14868                           fsr2l	equ	0xFD9
 14869                           status	equ	0xFD8
 14870                           
 14871 ;; *************** function _INTERRUPT_InterruptManager *****************
 14872 ;; Defined at:
 14873 ;;		line 4 in file "interrupt.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;		None
 14876 ;; Auto vars:     Size  Location     Type
 14877 ;;		None
 14878 ;; Return value:  Size  Location     Type
 14879 ;;                  1    wreg      void 
 14880 ;; Registers used:
 14881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14882 ;; Tracked objects:
 14883 ;;		On entry : 0/0
 14884 ;;		On exit  : 0/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14889 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14890 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14891 ;;Total ram usage:        5 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; Hardware stack levels required when called:    2
 14894 ;; This function calls:
 14895 ;;		_INT0_ISR
 14896 ;;		_TMR0_ISR
 14897 ;;		_TMR1_ISR
 14898 ;; This function is called by:
 14899 ;;		Interrupt level 2
 14900 ;; This function uses a non-reentrant model
 14901 ;;
 14902                           
 14903                           	psect	intcode
 14904  000008                     __pintcode:
 14905                           	opt stack 0
 14906  000008                     _INTERRUPT_InterruptManager:
 14907                           	opt stack 21
 14908                           
 14909                           ;incstack = 0
 14910  000008  8271               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14911  00000A  ED2E  F00F         	call	int_func,f	;refresh shadow registers
 14912                           tosu	equ	0xFFF
 14913                           tosh	equ	0xFFE
 14914                           tosl	equ	0xFFD
 14915                           pclath	equ	0xFFA
 14916                           tblptru	equ	0xFF8
 14917                           tblptrh	equ	0xFF7
 14918                           tblptrl	equ	0xFF6
 14919                           tablat	equ	0xFF5
 14920                           prodh	equ	0xFF4
 14921                           prodl	equ	0xFF3
 14922                           intcon	equ	0xFF2
 14923                           intcon2	equ	0xFF1
 14924                           postinc0	equ	0xFEE
 14925                           wreg	equ	0xFE8
 14926                           indf1	equ	0xFE7
 14927                           plusw1	equ	0xFE3
 14928                           fsr1h	equ	0xFE2
 14929                           fsr1l	equ	0xFE1
 14930                           indf2	equ	0xFDF
 14931                           postinc2	equ	0xFDE
 14932                           postdec2	equ	0xFDD
 14933                           plusw2	equ	0xFDB
 14934                           fsr2h	equ	0xFDA
 14935                           fsr2l	equ	0xFD9
 14936                           status	equ	0xFD8
 14937                           
 14938                           	psect	intcode_body
 14939  001E5C                     __pintcode_body:
 14940                           	opt stack 21
 14941  001E5C                     int_func:
 14942                           	opt stack 21
 14943  001E5C  0006               	pop		; remove dummy address from shadow register refresh
 14944  001E5E  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManager+1
 14945  001E62  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManager+2
 14946  001E66  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManager+3
 14947  001E6A  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManager+4
 14948                           
 14949                           ;interrupt.c: 7: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 14950  001E6E  BAF2               	btfsc	intcon,5,c	;volatile
 14951  001E70  A4F2               	btfss	intcon,2,c	;volatile
 14952  001E72  D003               	goto	i2l264
 14953                           
 14954                           ;interrupt.c: 8: {
 14955                           ;interrupt.c: 9: TMR0_ISR();
 14956  001E74  EC0A  F014         	call	_TMR0_ISR	;wreg free
 14957                           
 14958                           ;interrupt.c: 10: }
 14959  001E78  D013               	goto	i2l6396
 14960  001E7A                     i2l264:
 14961                           
 14962                           ;interrupt.c: 11: else if (INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
 14963  001E7A  B8F2               	btfsc	intcon,4,c	;volatile
 14964  001E7C  A2F2               	btfss	intcon,1,c	;volatile
 14965  001E7E  D010               	goto	i2l6396
 14966                           
 14967                           ;interrupt.c: 12: {
 14968                           ;interrupt.c: 13: INTCONbits.INT0IF = 0;
 14969  001E80  92F2               	bcf	intcon,1,c	;volatile
 14970  001E82  0E01               	movlw	1
 14971                           
 14972                           ;interrupt.c: 14: INTCON2bits.INTEDG0 = ~INTCON2bits.INTEDG0;
 14973  001E84  ACF1               	btfss	intcon2,6,c	;volatile
 14974  001E86  0E00               	movlw	0
 14975  001E88  0AFF               	xorlw	255
 14976  001E8A  6E0A               	movwf	??_INTERRUPT_InterruptManager& (0+255),c
 14977  001E8C  3A0A               	swapf	??_INTERRUPT_InterruptManager,f,c
 14978  001E8E  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 14979  001E90  460A               	rlncf	??_INTERRUPT_InterruptManager,f,c
 14980  001E92  50F1               	movf	intcon2,w,c	;volatile
 14981  001E94  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 14982  001E96  0BBF               	andlw	-65
 14983  001E98  180A               	xorwf	??_INTERRUPT_InterruptManager,w,c
 14984  001E9A  6EF1               	movwf	intcon2,c	;volatile
 14985                           
 14986                           ;interrupt.c: 16: INT0_ISR();
 14987  001E9C  ECCE  F013         	call	_INT0_ISR	;wreg free
 14988  001EA0                     i2l6396:
 14989                           
 14990                           ;interrupt.c: 17: } if (PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF ==1)
 14991  001EA0  B09D               	btfsc	3997,0,c	;volatile
 14992  001EA2  A09E               	btfss	3998,0,c	;volatile
 14993  001EA4  D007               	goto	i2l268
 14994                           
 14995                           ;interrupt.c: 18: {
 14996                           ;interrupt.c: 19: PIR1bits.TMR1IF = 0;
 14997  001EA6  909E               	bcf	3998,0,c	;volatile
 14998                           
 14999                           ;interrupt.c: 20: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
 15000  001EA8  0E3C               	movlw	60
 15001  001EAA  6ECF               	movwf	4047,c	;volatile
 15002                           
 15003                           ;interrupt.c: 21: TMR1L = ((unsigned char)((15536)&0xFF));
 15004  001EAC  0EB0               	movlw	176
 15005  001EAE  6ECE               	movwf	4046,c	;volatile
 15006                           
 15007                           ;interrupt.c: 22: TMR1_ISR();
 15008  001EB0  ECEA  F013         	call	_TMR1_ISR	;wreg free
 15009  001EB4                     i2l268:
 15010  001EB4  C00E  FFF4         	movff	??_INTERRUPT_InterruptManager+4,prodh
 15011  001EB8  C00D  FFF3         	movff	??_INTERRUPT_InterruptManager+3,prodl
 15012  001EBC  C00C  FFDA         	movff	??_INTERRUPT_InterruptManager+2,fsr2h
 15013  001EC0  C00B  FFD9         	movff	??_INTERRUPT_InterruptManager+1,fsr2l
 15014  001EC4  9271               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15015  001EC6  0011               	retfie		f
 15016  001EC8                     __end_of_INTERRUPT_InterruptManager:
 15017                           	opt stack 0
 15018                           tosu	equ	0xFFF
 15019                           tosh	equ	0xFFE
 15020                           tosl	equ	0xFFD
 15021                           pclath	equ	0xFFA
 15022                           tblptru	equ	0xFF8
 15023                           tblptrh	equ	0xFF7
 15024                           tblptrl	equ	0xFF6
 15025                           tablat	equ	0xFF5
 15026                           prodh	equ	0xFF4
 15027                           prodl	equ	0xFF3
 15028                           intcon	equ	0xFF2
 15029                           intcon2	equ	0xFF1
 15030                           postinc0	equ	0xFEE
 15031                           wreg	equ	0xFE8
 15032                           indf1	equ	0xFE7
 15033                           plusw1	equ	0xFE3
 15034                           fsr1h	equ	0xFE2
 15035                           fsr1l	equ	0xFE1
 15036                           indf2	equ	0xFDF
 15037                           postinc2	equ	0xFDE
 15038                           postdec2	equ	0xFDD
 15039                           plusw2	equ	0xFDB
 15040                           fsr2h	equ	0xFDA
 15041                           fsr2l	equ	0xFD9
 15042                           status	equ	0xFD8
 15043                           
 15044 ;; *************** function _TMR1_ISR *****************
 15045 ;; Defined at:
 15046 ;;		line 569 in file "common.c"
 15047 ;; Parameters:    Size  Location     Type
 15048 ;;		None
 15049 ;; Auto vars:     Size  Location     Type
 15050 ;;		None
 15051 ;; Return value:  Size  Location     Type
 15052 ;;                  1    wreg      void 
 15053 ;; Registers used:
 15054 ;;		wreg, status,2, status,0
 15055 ;; Tracked objects:
 15056 ;;		On entry : 0/0
 15057 ;;		On exit  : 0/0
 15058 ;;		Unchanged: 0/0
 15059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15064 ;;Total ram usage:        0 bytes
 15065 ;; Hardware stack levels used:    1
 15066 ;; This function calls:
 15067 ;;		Nothing
 15068 ;; This function is called by:
 15069 ;;		_INTERRUPT_InterruptManager
 15070 ;; This function uses a non-reentrant model
 15071 ;;
 15072                           
 15073                           	psect	text78
 15074  0027D4                     __ptext78:
 15075                           	opt stack 0
 15076  0027D4                     _TMR1_ISR:
 15077                           	opt stack 22
 15078                           
 15079                           ;common.c: 573: if(++timer_val >= 150)
 15080                           
 15081                           ;incstack = 0
 15082  0027D4  2A6E               	incf	_timer_val,f,c
 15083  0027D6  0E95               	movlw	149
 15084  0027D8  646E               	cpfsgt	_timer_val,c
 15085  0027DA  0C95               	retlw	149
 15086                           
 15087                           ;common.c: 574: {
 15088                           ;common.c: 575: timer_val = 0;
 15089  0027DC  6A6E               	clrf	_timer_val,c
 15090                           
 15091                           ;common.c: 576: time_flag = 1;
 15092  0027DE  0E01               	movlw	1
 15093  0027E0  6E6D               	movwf	_time_flag,c
 15094                           
 15095                           ;common.c: 577: T1CONbits.TMR1ON = 0;
 15096  0027E2  90CD               	bcf	4045,0,c	;volatile
 15097  0027E4  0C01               	retlw	1	;funcret
 15098  0027E6                     __end_of_TMR1_ISR:
 15099                           	opt stack 0
 15100                           tosu	equ	0xFFF
 15101                           tosh	equ	0xFFE
 15102                           tosl	equ	0xFFD
 15103                           pclath	equ	0xFFA
 15104                           tblptru	equ	0xFF8
 15105                           tblptrh	equ	0xFF7
 15106                           tblptrl	equ	0xFF6
 15107                           tablat	equ	0xFF5
 15108                           prodh	equ	0xFF4
 15109                           prodl	equ	0xFF3
 15110                           intcon	equ	0xFF2
 15111                           intcon2	equ	0xFF1
 15112                           postinc0	equ	0xFEE
 15113                           wreg	equ	0xFE8
 15114                           indf1	equ	0xFE7
 15115                           plusw1	equ	0xFE3
 15116                           fsr1h	equ	0xFE2
 15117                           fsr1l	equ	0xFE1
 15118                           indf2	equ	0xFDF
 15119                           postinc2	equ	0xFDE
 15120                           postdec2	equ	0xFDD
 15121                           plusw2	equ	0xFDB
 15122                           fsr2h	equ	0xFDA
 15123                           fsr2l	equ	0xFD9
 15124                           status	equ	0xFD8
 15125                           
 15126 ;; *************** function _TMR0_ISR *****************
 15127 ;; Defined at:
 15128 ;;		line 127 in file "dispatcher.c"
 15129 ;; Parameters:    Size  Location     Type
 15130 ;;		None
 15131 ;; Auto vars:     Size  Location     Type
 15132 ;;		None
 15133 ;; Return value:  Size  Location     Type
 15134 ;;                  1    wreg      void 
 15135 ;; Registers used:
 15136 ;;		wreg, status,2
 15137 ;; Tracked objects:
 15138 ;;		On entry : 0/0
 15139 ;;		On exit  : 0/0
 15140 ;;		Unchanged: 0/0
 15141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15146 ;;Total ram usage:        0 bytes
 15147 ;; Hardware stack levels used:    1
 15148 ;; This function calls:
 15149 ;;		Nothing
 15150 ;; This function is called by:
 15151 ;;		_INTERRUPT_InterruptManager
 15152 ;; This function uses a non-reentrant model
 15153 ;;
 15154                           
 15155                           	psect	text79
 15156  002814                     __ptext79:
 15157                           	opt stack 0
 15158  002814                     _TMR0_ISR:
 15159                           	opt stack 22
 15160                           
 15161                           ;dispatcher.c: 131: INTCONbits.TMR0IF = 0;
 15162                           
 15163                           ;incstack = 0
 15164  002814  94F2               	bcf	intcon,2,c	;volatile
 15165                           
 15166                           ;dispatcher.c: 132: TMR0 = 61;
 15167  002816  6AD7               	clrf	4055,c	;volatile
 15168  002818  0E3D               	movlw	61
 15169  00281A  6ED6               	movwf	4054,c	;volatile
 15170                           
 15171                           ;dispatcher.c: 133: Timer0Interrupt = 1;
 15172  00281C  0E01               	movlw	1
 15173  00281E  6E69               	movwf	_Timer0Interrupt,c
 15174  002820  0C01               	retlw	1	;funcret
 15175  002822                     __end_of_TMR0_ISR:
 15176                           	opt stack 0
 15177                           tosu	equ	0xFFF
 15178                           tosh	equ	0xFFE
 15179                           tosl	equ	0xFFD
 15180                           pclath	equ	0xFFA
 15181                           tblptru	equ	0xFF8
 15182                           tblptrh	equ	0xFF7
 15183                           tblptrl	equ	0xFF6
 15184                           tablat	equ	0xFF5
 15185                           prodh	equ	0xFF4
 15186                           prodl	equ	0xFF3
 15187                           intcon	equ	0xFF2
 15188                           intcon2	equ	0xFF1
 15189                           postinc0	equ	0xFEE
 15190                           wreg	equ	0xFE8
 15191                           indf1	equ	0xFE7
 15192                           plusw1	equ	0xFE3
 15193                           fsr1h	equ	0xFE2
 15194                           fsr1l	equ	0xFE1
 15195                           indf2	equ	0xFDF
 15196                           postinc2	equ	0xFDE
 15197                           postdec2	equ	0xFDD
 15198                           plusw2	equ	0xFDB
 15199                           fsr2h	equ	0xFDA
 15200                           fsr2l	equ	0xFD9
 15201                           status	equ	0xFD8
 15202                           
 15203 ;; *************** function _INT0_ISR *****************
 15204 ;; Defined at:
 15205 ;;		line 552 in file "common.c"
 15206 ;; Parameters:    Size  Location     Type
 15207 ;;		None
 15208 ;; Auto vars:     Size  Location     Type
 15209 ;;		None
 15210 ;; Return value:  Size  Location     Type
 15211 ;;                  1    wreg      void 
 15212 ;; Registers used:
 15213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15214 ;; Tracked objects:
 15215 ;;		On entry : 0/0
 15216 ;;		On exit  : 0/0
 15217 ;;		Unchanged: 0/0
 15218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15223 ;;Total ram usage:        0 bytes
 15224 ;; Hardware stack levels used:    1
 15225 ;; Hardware stack levels required when called:    1
 15226 ;; This function calls:
 15227 ;;		i2_RTOS_SetTask
 15228 ;; This function is called by:
 15229 ;;		_INTERRUPT_InterruptManager
 15230 ;; This function uses a non-reentrant model
 15231 ;;
 15232                           
 15233                           	psect	text80
 15234  00279C                     __ptext80:
 15235                           	opt stack 0
 15236  00279C                     _INT0_ISR:
 15237                           	opt stack 21
 15238                           
 15239                           ;common.c: 561: RTOS_SetTask(GetTime, 0, 0);
 15240                           
 15241                           ;incstack = 0
 15242  00279C  0E78               	movlw	low _GetTime
 15243  00279E  6E01               	movwf	i2RTOS_SetTask@taskFunc,c
 15244  0027A0  0E25               	movlw	high _GetTime
 15245  0027A2  6E02               	movwf	i2RTOS_SetTask@taskFunc+1,c
 15246  0027A4  6A04               	clrf	i2RTOS_SetTask@taskDelay+1,c
 15247  0027A6  6A03               	clrf	i2RTOS_SetTask@taskDelay,c
 15248  0027A8  6A06               	clrf	i2RTOS_SetTask@taskPeriod+1,c
 15249  0027AA  6A05               	clrf	i2RTOS_SetTask@taskPeriod,c
 15250  0027AC  EF3D  F00D         	goto	i2_RTOS_SetTask	;wreg free
 15251  0027B0                     __end_of_INT0_ISR:
 15252                           	opt stack 0
 15253                           tosu	equ	0xFFF
 15254                           tosh	equ	0xFFE
 15255                           tosl	equ	0xFFD
 15256                           pclath	equ	0xFFA
 15257                           tblptru	equ	0xFF8
 15258                           tblptrh	equ	0xFF7
 15259                           tblptrl	equ	0xFF6
 15260                           tablat	equ	0xFF5
 15261                           prodh	equ	0xFF4
 15262                           prodl	equ	0xFF3
 15263                           intcon	equ	0xFF2
 15264                           intcon2	equ	0xFF1
 15265                           postinc0	equ	0xFEE
 15266                           wreg	equ	0xFE8
 15267                           indf1	equ	0xFE7
 15268                           plusw1	equ	0xFE3
 15269                           fsr1h	equ	0xFE2
 15270                           fsr1l	equ	0xFE1
 15271                           indf2	equ	0xFDF
 15272                           postinc2	equ	0xFDE
 15273                           postdec2	equ	0xFDD
 15274                           plusw2	equ	0xFDB
 15275                           fsr2h	equ	0xFDA
 15276                           fsr2l	equ	0xFD9
 15277                           status	equ	0xFD8
 15278                           
 15279 ;; *************** function i2_RTOS_SetTask *****************
 15280 ;; Defined at:
 15281 ;;		line 22 in file "dispatcher.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;  taskFunc        2    0[COMRAM] PTR FTN()void 
 15284 ;;		 -> home_temp(1), time_set_dy(1), time_set_dt(1), time_set_mt(1), 
 15285 ;;		 -> time_set_yr(1), default_state(1), time_set_hr(1), time_set_min(1), 
 15286 ;;		 -> GetTime(1), key_press(1), time_led(1), 
 15287 ;;  taskDelay       2    2[COMRAM] unsigned int 
 15288 ;;  taskPeriod      2    4[COMRAM] unsigned int 
 15289 ;; Auto vars:     Size  Location     Type
 15290 ;;  RTOS_SetTask    1    8[COMRAM] unsigned char 
 15291 ;; Return value:  Size  Location     Type
 15292 ;;                  1    wreg      void 
 15293 ;; Registers used:
 15294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15295 ;; Tracked objects:
 15296 ;;		On entry : 0/0
 15297 ;;		On exit  : 0/0
 15298 ;;		Unchanged: 0/0
 15299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15300 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15302 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15303 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15304 ;;Total ram usage:        9 bytes
 15305 ;; Hardware stack levels used:    1
 15306 ;; This function calls:
 15307 ;;		Nothing
 15308 ;; This function is called by:
 15309 ;;		_INT0_ISR
 15310 ;; This function uses a non-reentrant model
 15311 ;;
 15312                           
 15313                           	psect	text81
 15314  001A7A                     __ptext81:
 15315                           	opt stack 0
 15316  001A7A                     i2_RTOS_SetTask:
 15317                           	opt stack 21
 15318                           
 15319                           ;dispatcher.c: 24: uint8_t i;
 15320                           ;dispatcher.c: 26: if(!taskFunc) return;
 15321                           
 15322                           ;incstack = 0
 15323  001A7A  5001               	movf	i2RTOS_SetTask@taskFunc,w,c
 15324  001A7C  1002               	iorwf	i2RTOS_SetTask@taskFunc+1,w,c
 15325  001A7E  E101               	bnz	i2l196
 15326  001A80  0012               	return	
 15327  001A82                     i2l196:
 15328                           
 15329                           ;dispatcher.c: 27: for(i = 0; i < arrayTail; i++)
 15330  001A82  6A09               	clrf	i2RTOS_SetTask@i,c
 15331  001A84  D015               	goto	i2l4762
 15332  001A86                     i2l4750:
 15333                           
 15334                           ;dispatcher.c: 28: {
 15335                           ;dispatcher.c: 29: if(TaskArray[i].pFunc == taskFunc)
 15336  001A86  5009               	movf	i2RTOS_SetTask@i,w,c
 15337  001A88  D82A               	call	PL24	;call to abstracted procedure
 15338  001A8A  5001               	movf	i2RTOS_SetTask@taskFunc,w,c	;volatile
 15339  001A8C  18DE               	xorwf	postinc2,w,c
 15340  001A8E  E10F               	bnz	i2l4760
 15341  001A90  5002               	movf	i2RTOS_SetTask@taskFunc+1,w,c	;volatile
 15342  001A92  18DE               	xorwf	postinc2,w,c
 15343  001A94  E10C               	bnz	i2l4760
 15344                           
 15345                           ;dispatcher.c: 30: {
 15346                           ;dispatcher.c: 31: (INTCONbits.GIE = 0);
 15347  001A96  9EF2               	bcf	intcon,7,c	;volatile
 15348                           
 15349                           ;dispatcher.c: 33: TaskArray[i].delay = taskDelay;
 15350  001A98  5009               	movf	i2RTOS_SetTask@i,w,c
 15351  001A9A  ECF1  F00B         	call	PL20	;call to abstracted procedure
 15352  001A9E  D83E               	call	PL132	;call to abstracted procedure
 15353                           
 15354                           ;dispatcher.c: 34: TaskArray[i].period = taskPeriod;
 15355  001AA0  5009               	movf	i2RTOS_SetTask@i,w,c
 15356  001AA2  D82F               	call	PL30	;call to abstracted procedure
 15357  001AA4  D836               	call	PL108	;call to abstracted procedure
 15358                           
 15359                           ;dispatcher.c: 35: TaskArray[i].run = 0;
 15360  001AA6  5009               	movf	i2RTOS_SetTask@i,w,c
 15361  001AA8  D822               	call	PL28	;call to abstracted procedure
 15362                           
 15363                           ;dispatcher.c: 37: (INTCONbits.GIE = 1);
 15364  001AAA  8EF2               	bsf	intcon,7,c	;volatile
 15365  001AAC  0C00               	retlw	0
 15366  001AAE                     i2l4760:
 15367  001AAE  2A09               	incf	i2RTOS_SetTask@i,f,c
 15368  001AB0                     i2l4762:
 15369  001AB0  506A               	movf	_arrayTail,w,c	;volatile
 15370  001AB2  5C09               	subwf	i2RTOS_SetTask@i,w,c
 15371  001AB4  E3E8               	bnc	i2l4750
 15372                           
 15373                           ;dispatcher.c: 39: }
 15374                           ;dispatcher.c: 40: }
 15375                           ;dispatcher.c: 42: if (arrayTail < 15)
 15376  001AB6  0E0F               	movlw	15
 15377  001AB8  606A               	cpfslt	_arrayTail,c	;volatile
 15378  001ABA  0C0F               	retlw	15
 15379                           
 15380                           ;dispatcher.c: 43: {
 15381                           ;dispatcher.c: 44: (INTCONbits.GIE = 0);
 15382  001ABC  9EF2               	bcf	intcon,7,c	;volatile
 15383                           
 15384                           ;dispatcher.c: 46: TaskArray[arrayTail].pFunc = taskFunc;
 15385  001ABE  506A               	movf	_arrayTail,w,c	;volatile
 15386  001AC0  D80E               	call	PL24	;call to abstracted procedure
 15387  001AC2  C001  FFDE         	movff	i2RTOS_SetTask@taskFunc,postinc2	;volatile
 15388  001AC6  C002  FFDD         	movff	i2RTOS_SetTask@taskFunc+1,postdec2	;volatile
 15389                           
 15390                           ;dispatcher.c: 47: TaskArray[arrayTail].delay = taskDelay;
 15391  001ACA  506A               	movf	_arrayTail,w,c	;volatile
 15392  001ACC  ECF1  F00B         	call	PL20	;call to abstracted procedure
 15393  001AD0  D825               	call	PL132	;call to abstracted procedure
 15394                           
 15395                           ;dispatcher.c: 48: TaskArray[arrayTail].period = taskPeriod;
 15396  001AD2  506A               	movf	_arrayTail,w,c	;volatile
 15397  001AD4  D816               	call	PL30	;call to abstracted procedure
 15398  001AD6  D81D               	call	PL108	;call to abstracted procedure
 15399                           
 15400                           ;dispatcher.c: 49: TaskArray[arrayTail].run = 0;
 15401  001AD8  506A               	movf	_arrayTail,w,c	;volatile
 15402  001ADA  D809               	call	PL28	;call to abstracted procedure
 15403                           
 15404                           ;dispatcher.c: 51: arrayTail++;
 15405                           
 15406                           ;dispatcher.c: 52: (INTCONbits.GIE = 1);
 15407  001ADC  D024               	goto	PL182	;call to abstracted procedure
 15408  001ADE                     __end_ofi2_RTOS_SetTask:
 15409                           	opt stack 0
 15410  001ADE                     PL24:
 15411                           	opt stack 27
 15412  001ADE  0D08               	mullw	8
 15413  001AE0  0E00               	movlw	low _TaskArray
 15414  001AE2  24F3               	addwf	prodl,w,c
 15415  001AE4  6ED9               	movwf	fsr2l,c
 15416  001AE6  0E01               	movlw	high _TaskArray
 15417  001AE8  20F4               	addwfc	prodh,w,c
 15418  001AEA  6EDA               	movwf	fsr2h,c
 15419  001AEC  0012               	return	
 15420  001AEE                     __end_ofPL24:
 15421                           	opt stack 0
 15422  001AEE                     PL28:
 15423                           	opt stack 27
 15424  001AEE  0D08               	mullw	8
 15425  001AF0  0E06               	movlw	low (_TaskArray+6)
 15426  001AF2  24F3               	addwf	prodl,w,c
 15427  001AF4  6ED9               	movwf	fsr2l,c
 15428  001AF6  0E01               	movlw	high (_TaskArray+6)
 15429  001AF8  20F4               	addwfc	prodh,w,c
 15430  001AFA  6EDA               	movwf	fsr2h,c
 15431  001AFC  6ADE               	clrf	postinc2,c
 15432  001AFE  6ADD               	clrf	postdec2,c
 15433  001B00  0012               	return	
 15434  001B02                     __end_ofPL28:
 15435                           	opt stack 0
 15436  001B02                     PL30:
 15437                           	opt stack 27
 15438  001B02  0D08               	mullw	8
 15439  001B04  0E04               	movlw	low (_TaskArray+4)
 15440  001B06  24F3               	addwf	prodl,w,c
 15441  001B08  6ED9               	movwf	fsr2l,c
 15442  001B0A  0E01               	movlw	high (_TaskArray+4)
 15443  001B0C  20F4               	addwfc	prodh,w,c
 15444  001B0E  6EDA               	movwf	fsr2h,c
 15445  001B10  0012               	return	
 15446  001B12                     __end_ofPL30:
 15447                           	opt stack 0
 15448  001B12                     PL108:
 15449                           	opt stack 21
 15450  001B12  C005  FFDE         	movff	i2RTOS_SetTask@taskPeriod,postinc2
 15451  001B16  C006  FFDD         	movff	i2RTOS_SetTask@taskPeriod+1,postdec2
 15452  001B1A  0012               	return	
 15453  001B1C                     __end_ofPL108:
 15454                           	opt stack 0
 15455  001B1C                     PL132:
 15456                           	opt stack 21
 15457  001B1C  C003  FFDE         	movff	i2RTOS_SetTask@taskDelay,postinc2
 15458  001B20  C004  FFDD         	movff	i2RTOS_SetTask@taskDelay+1,postdec2
 15459  001B24  0012               	return	
 15460  001B26                     __end_ofPL132:
 15461                           	opt stack 0
 15462  001B26                     PL182:
 15463                           	opt stack 27
 15464  001B26  2A6A               	incf	_arrayTail,f,c	;volatile
 15465  001B28  8EF2               	bsf	intcon,7,c	;volatile
 15466  001B2A  0C00               	retlw	0	;funcret
 15467  001B2C                     __end_ofPL182:
 15468                           	opt stack 0
 15469                           tosu	equ	0xFFF
 15470                           tosh	equ	0xFFE
 15471                           tosl	equ	0xFFD
 15472                           pclath	equ	0xFFA
 15473                           tblptru	equ	0xFF8
 15474                           tblptrh	equ	0xFF7
 15475                           tblptrl	equ	0xFF6
 15476                           tablat	equ	0xFF5
 15477                           prodh	equ	0xFF4
 15478                           prodl	equ	0xFF3
 15479                           intcon	equ	0xFF2
 15480                           intcon2	equ	0xFF1
 15481                           postinc0	equ	0xFEE
 15482                           wreg	equ	0xFE8
 15483                           indf1	equ	0xFE7
 15484                           plusw1	equ	0xFE3
 15485                           fsr1h	equ	0xFE2
 15486                           fsr1l	equ	0xFE1
 15487                           indf2	equ	0xFDF
 15488                           postinc2	equ	0xFDE
 15489                           postdec2	equ	0xFDD
 15490                           plusw2	equ	0xFDB
 15491                           fsr2h	equ	0xFDA
 15492                           fsr2l	equ	0xFD9
 15493                           status	equ	0xFD8
 15494                           tosu	equ	0xFFF
 15495                           tosh	equ	0xFFE
 15496                           tosl	equ	0xFFD
 15497                           pclath	equ	0xFFA
 15498                           tblptru	equ	0xFF8
 15499                           tblptrh	equ	0xFF7
 15500                           tblptrl	equ	0xFF6
 15501                           tablat	equ	0xFF5
 15502                           prodh	equ	0xFF4
 15503                           prodl	equ	0xFF3
 15504                           intcon	equ	0xFF2
 15505                           intcon2	equ	0xFF1
 15506                           postinc0	equ	0xFEE
 15507                           wreg	equ	0xFE8
 15508                           indf1	equ	0xFE7
 15509                           plusw1	equ	0xFE3
 15510                           fsr1h	equ	0xFE2
 15511                           fsr1l	equ	0xFE1
 15512                           indf2	equ	0xFDF
 15513                           postinc2	equ	0xFDE
 15514                           postdec2	equ	0xFDD
 15515                           plusw2	equ	0xFDB
 15516                           fsr2h	equ	0xFDA
 15517                           fsr2l	equ	0xFD9
 15518                           status	equ	0xFD8
 15519                           
 15520                           	psect	text82
 15521  000000                     __ptext82:
 15522                           	opt stack 0
 15523                           tosu	equ	0xFFF
 15524                           tosh	equ	0xFFE
 15525                           tosl	equ	0xFFD
 15526                           pclath	equ	0xFFA
 15527                           tblptru	equ	0xFF8
 15528                           tblptrh	equ	0xFF7
 15529                           tblptrl	equ	0xFF6
 15530                           tablat	equ	0xFF5
 15531                           prodh	equ	0xFF4
 15532                           prodl	equ	0xFF3
 15533                           intcon	equ	0xFF2
 15534                           intcon2	equ	0xFF1
 15535                           postinc0	equ	0xFEE
 15536                           wreg	equ	0xFE8
 15537                           indf1	equ	0xFE7
 15538                           plusw1	equ	0xFE3
 15539                           fsr1h	equ	0xFE2
 15540                           fsr1l	equ	0xFE1
 15541                           indf2	equ	0xFDF
 15542                           postinc2	equ	0xFDE
 15543                           postdec2	equ	0xFDD
 15544                           plusw2	equ	0xFDB
 15545                           fsr2h	equ	0xFDA
 15546                           fsr2l	equ	0xFD9
 15547                           status	equ	0xFD8
 15548                           
 15549                           	psect	rparam
 15550  0000                     tosu	equ	0xFFF
 15551                           tosh	equ	0xFFE
 15552                           tosl	equ	0xFFD
 15553                           pclath	equ	0xFFA
 15554                           tblptru	equ	0xFF8
 15555                           tblptrh	equ	0xFF7
 15556                           tblptrl	equ	0xFF6
 15557                           tablat	equ	0xFF5
 15558                           prodh	equ	0xFF4
 15559                           prodl	equ	0xFF3
 15560                           intcon	equ	0xFF2
 15561                           intcon2	equ	0xFF1
 15562                           postinc0	equ	0xFEE
 15563                           wreg	equ	0xFE8
 15564                           indf1	equ	0xFE7
 15565                           plusw1	equ	0xFE3
 15566                           fsr1h	equ	0xFE2
 15567                           fsr1l	equ	0xFE1
 15568                           indf2	equ	0xFDF
 15569                           postinc2	equ	0xFDE
 15570                           postdec2	equ	0xFDD
 15571                           plusw2	equ	0xFDB
 15572                           fsr2h	equ	0xFDA
 15573                           fsr2l	equ	0xFD9
 15574                           status	equ	0xFD8
 15575                           
 15576                           	psect	temp
 15577  000071                     btemp:
 15578                           	opt stack 0
 15579  000071                     	ds	1
 15580  0000                     int$flags	set	btemp
 15581                           tosu	equ	0xFFF
 15582                           tosh	equ	0xFFE
 15583                           tosl	equ	0xFFD
 15584                           pclath	equ	0xFFA
 15585                           tblptru	equ	0xFF8
 15586                           tblptrh	equ	0xFF7
 15587                           tblptrl	equ	0xFF6
 15588                           tablat	equ	0xFF5
 15589                           prodh	equ	0xFF4
 15590                           prodl	equ	0xFF3
 15591                           intcon	equ	0xFF2
 15592                           intcon2	equ	0xFF1
 15593                           postinc0	equ	0xFEE
 15594                           wreg	equ	0xFE8
 15595                           indf1	equ	0xFE7
 15596                           plusw1	equ	0xFE3
 15597                           fsr1h	equ	0xFE2
 15598                           fsr1l	equ	0xFE1
 15599                           indf2	equ	0xFDF
 15600                           postinc2	equ	0xFDE
 15601                           postdec2	equ	0xFDD
 15602                           plusw2	equ	0xFDB
 15603                           fsr2h	equ	0xFDA
 15604                           fsr2l	equ	0xFD9
 15605                           status	equ	0xFD8
 15606                           tosu	equ	0xFFF
 15607                           tosh	equ	0xFFE
 15608                           tosl	equ	0xFFD
 15609                           pclath	equ	0xFFA
 15610                           tblptru	equ	0xFF8
 15611                           tblptrh	equ	0xFF7
 15612                           tblptrl	equ	0xFF6
 15613                           tablat	equ	0xFF5
 15614                           prodh	equ	0xFF4
 15615                           prodl	equ	0xFF3
 15616                           intcon	equ	0xFF2
 15617                           intcon2	equ	0xFF1
 15618                           postinc0	equ	0xFEE
 15619                           wreg	equ	0xFE8
 15620                           indf1	equ	0xFE7
 15621                           plusw1	equ	0xFE3
 15622                           fsr1h	equ	0xFE2
 15623                           fsr1l	equ	0xFE1
 15624                           indf2	equ	0xFDF
 15625                           postinc2	equ	0xFDE
 15626                           postdec2	equ	0xFDD
 15627                           plusw2	equ	0xFDB
 15628                           fsr2h	equ	0xFDA
 15629                           fsr2l	equ	0xFD9
 15630                           status	equ	0xFD8


Data Sizes:
    Strings     276
    Constant    1398
    Data        1
    BSS         336
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     78     112
    BANK0           128     17     101
    BANK1           256      0     220
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), text_buf(BANK1[100]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_33(CODE[9]), STR_32(CODE[10]), STR_31(CODE[10]), STR_30(CODE[10]), 
		 -> STR_29(CODE[10]), STR_28(CODE[10]), STR_27(CODE[10]), STR_26(CODE[10]), 
		 -> STR_25(CODE[9]), STR_24(CODE[9]), STR_23(CODE[9]), STR_22(CODE[10]), 
		 -> STR_21(CODE[9]), STR_20(CODE[9]), STR_19(CODE[9]), STR_18(CODE[9]), 
		 -> STR_17(CODE[16]), STR_16(CODE[9]), STR_15(CODE[9]), STR_14(CODE[9]), 
		 -> STR_13(CODE[9]), STR_12(CODE[9]), STR_11(CODE[9]), STR_10(CODE[9]), 
		 -> STR_9(CODE[9]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[19]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), text_buf(BANK1[100]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), printf@ap(COMRAM[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_33(CODE[9]), STR_32(CODE[10]), STR_31(CODE[10]), STR_30(CODE[10]), 
		 -> STR_29(CODE[10]), STR_28(CODE[10]), STR_27(CODE[10]), STR_26(CODE[10]), 
		 -> STR_25(CODE[9]), STR_24(CODE[9]), STR_23(CODE[9]), STR_22(CODE[10]), 
		 -> STR_21(CODE[9]), STR_20(CODE[9]), STR_19(CODE[9]), STR_18(CODE[9]), 
		 -> STR_17(CODE[16]), STR_16(CODE[9]), STR_15(CODE[9]), STR_14(CODE[9]), 
		 -> STR_13(CODE[9]), STR_12(CODE[9]), STR_11(CODE[9]), STR_10(CODE[9]), 
		 -> STR_9(CODE[9]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[19]), 
		 -> STR_1(CODE[22]), 

    S1653__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    S1653__prbuf$ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), text_buf(BANK1[100]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), text_buf(BANK1[100]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    readTemp_Single@buf	PTR unsigned int  size(1) Largest target is 2
		 -> temperature(COMRAM[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 

    getDate@p4	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getDate@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getDate@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getDate@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getTime@p3	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getTime@p2	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    getTime@p1	PTR unsigned char  size(1) Largest target is 7
		 -> TTime(BANK0[7]), 

    Update_Matrix@buf	PTR unsigned char  size(1) Largest target is 32
		 -> Dis_Buff(BANK0[32]), 

    RTOS_DispatchTask@function	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    RTOS_DeleteTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    S422task$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    TaskArray.pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 

    RTOS_SetTask@taskFunc	PTR FTN()void  size(2) Largest target is 1
		 -> home_temp(), time_set_dy(), time_set_dt(), time_set_mt(), 
		 -> time_set_yr(), default_state(), time_set_hr(), time_set_min(), 
		 -> GetTime(), key_press(), time_led(), 


Critical Paths under _main in COMRAM

    _SYSTEM_Initialize->_bmp085Calibration
    _init_ds18b20->_write_byte
    _bmp085Calibration->_printf
    _Init7221->_Cmd7221
    _Cmd7221->_Send_Byte_7221
    _DS3231_init->_DS3231_Write
    _time_set_yr->_setDate
    _time_set_mt->_setDate
    _time_set_min->_setTime
    _time_set_hr->_setTime
    _setTime->_DS3231_Write
    _time_set_dy->_setDate
    _time_set_dt->_setDate
    _setDate->_DS3231_Write
    _decimal_to_bcd->___lbmod
    _DS3231_Write->_decimal_to_bcd
    _putchar_b_buf->___lbmod
    _time_led->_BMP085Pressure
    _readTemp_Single->_printf
    _write_byte->_write_bit
    _FillBuf->___lbmod
    _BMP085Pressure->_BMP085GetTemp
    _bmp085ReadUP->_BMP085ReadByte
    _BMP085ReadByte->_I2C_Master_Read
    _BMP085ReadUT->_bmp085ReadInt
    _bmp085ReadInt->_I2C_Master_Read
    _BMP085WriteByte->_I2C_Master_Write
    _BMP085GetTemp->_printf
    _BMP085GetPressure->_printf
    _printf->__doprnt
    __doprnt->___llmod
    ___llmod->___lldiv
    ___aldiv->___lmul
    _home_temp->_putchar_down
    _scroll_left->_Update_Matrix
    _putchar_down_s->___lbmod
    _putchar_down->___lwmod
    _Update_Matrix->_Send_Byte_7221
    _pic_to_led->_pixel_off
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    _GetTime->_getDate
    _getTime->_DS3231_Read
    _getDate->_DS3231_Read
    _DS3231_Read->_I2C_Master_Read
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_RepeatedStart->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INT0_ISR->i2_RTOS_SetTask

Critical Paths under _main in BANK0

    _main->_RTOS_DispatchTask
    _BMP085Pressure->_BMP085GetPressure

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  254240
                                             16 BANK0      1     1      0
                  _RTOS_DispatchTask
                       _RTOS_SetTask
                  _SYSTEM_Initialize
                       _clear_matrix
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    7225
                        _DS3231_init
                           _I2C_Init
                           _Init7221
                     _Interrupt_Init
                          _Port_Init
                          _RTOS_Init
                           _TMR1Init
                  _bmp085Calibration
                       _init_ds18b20
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         0     0      0     232
                           _ow_reset
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _bmp085Calibration                                    2     2      0    5590
                                             61 COMRAM     2     2      0
                      _bmp085ReadInt
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TMR1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTOS_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init7221                                             0     0      0     617
                            _Cmd7221
 ---------------------------------------------------------------------------------
 (3) _Cmd7221                                              3     2      1     617
                                             16 COMRAM     3     2      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DS3231_init                                          0     0      0     786
                       _DS3231_Write
 ---------------------------------------------------------------------------------
 (1) _RTOS_DispatchTask                                    8     8      0  238096
                                              8 BANK0      8     8      0
                            _GetTime *
                    _RTOS_DeleteTask
                      _default_state *
                          _home_temp *
                          _key_press *
                           _time_led *
                        _time_set_dt *
                        _time_set_dy *
                        _time_set_hr *
                       _time_set_min *
                        _time_set_mt *
                        _time_set_yr *
 ---------------------------------------------------------------------------------
 (2) _time_set_yr                                          0     0      0   28184
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_mt                                          0     0      0   24554
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_min                                         0     0      0   26921
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _time_set_hr                                          0     0      0   27020
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                       _clear_matrix
                      _putchar_b_buf
                            _setTime
 ---------------------------------------------------------------------------------
 (3) _setTime                                              3     1      2    5187
                                             27 COMRAM     3     1      2
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (2) _time_set_dy                                          0     0      0   24554
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (2) _time_set_dt                                          0     0      0   28184
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                            ___lbdiv
                            ___lbmod
                      _putchar_b_buf
                            _setDate
 ---------------------------------------------------------------------------------
 (3) _setDate                                              4     1      3    6450
                                             27 COMRAM     4     1      3
                       _DS3231_Write
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (4) _decimal_to_bcd                                       3     3      0    3692
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write                                         2     1      1     786
                                             25 COMRAM     2     1      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                     _decimal_to_bcd (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_b_buf                                        7     6      1    5975
                                             22 COMRAM     7     6      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (2) _time_led                                             0     0      0   50025
                     _BMP085Pressure
                            _FillBuf
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                      _Update_Matrix
                    _readTemp_Single
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _readTemp_Single                                     10     7      3    8327
                                             61 COMRAM    10     7      3
                            ___lwdiv
                            ___lwmod
                           _ow_reset
                             _printf
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (3) _write_byte                                           5     5      0     198
                                             15 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (4) _write_bit                                            1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _read_byte                                            4     4      0     136
                                             14 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (5) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ow_reset                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _FillBuf                                              3     3      0    4169
                                             22 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _BMP085Pressure                                       1     1      0   23874
                                             77 COMRAM     1     1      0
                  _BMP085GetPressure
                      _BMP085GetTemp
                       _BMP085ReadUT
                       _bmp085ReadUP
 ---------------------------------------------------------------------------------
 (4) _bmp085ReadUP                                        36    32      4     544
                                             19 COMRAM    36    32      4
                     _BMP085ReadByte
                    _BMP085WriteByte
 ---------------------------------------------------------------------------------
 (5) _BMP085ReadByte                                       2     2      0     161
                                             17 COMRAM     2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _BMP085ReadUT                                         5     1      4     442
                                             26 COMRAM     5     1      4
                    _BMP085WriteByte
                      _bmp085ReadInt
 ---------------------------------------------------------------------------------
 (3) _bmp085ReadInt                                       11     9      2     195
                                             17 COMRAM     9     7      2
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _BMP085WriteByte                                      2     1      1     247
                                             16 COMRAM     2     1      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _BMP085GetTemp                                       16    12      4   10940
                                             61 COMRAM    16    12      4
                       _BMP085ReadUT (ARG)
                            ___aldiv
                             ___lmul
                             _printf
 ---------------------------------------------------------------------------------
 (4) _BMP085GetPressure                                   24    20      4   11917
                                             61 COMRAM    12     8      4
                                              0 BANK0      8     8      0
                            ___aldiv
                            ___lldiv
                             ___lmul
                       _bmp085ReadUP (ARG)
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              11     5      6    5395
                                             50 COMRAM    11     5      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (4) __doprnt                                             23    19      4    2726
                                             36 COMRAM    14    10      4
                   Absolute function *
                            ___lldiv
                            ___llmod
                              _putch *
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     386
                                             27 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     703
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8    2252
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8    3063
                                             26 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _key_press                                            1     1      0      77
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _home_temp                                            1     1      0   24169
                                             36 COMRAM     1     1      0
                    _RTOS_DeleteTask
                       _RTOS_SetTask
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                       _clear_matrix
                            _getTime
                         _pic_to_led
                       _putchar_down
                     _putchar_down_s
                        _scroll_left
 ---------------------------------------------------------------------------------
 (3) _scroll_left                                          5     5      0    1526
                                             20 COMRAM     5     5      0
                      _Update_Matrix
 ---------------------------------------------------------------------------------
 (3) _putchar_down_s                                      10     9      1    1798
                                             22 COMRAM    10     9      1
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _putchar_down                                        10     9      1    2414
                                             26 COMRAM    10     9      1
                      _Update_Matrix
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Update_Matrix                                        4     3      1    1223
                                             16 COMRAM     4     3      1
                     _Send_Byte_7221
 ---------------------------------------------------------------------------------
 (4) _Send_Byte_7221                                       2     2      0     102
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _pic_to_led                                           7     6      1    1124
                                             19 COMRAM     7     6      1
                          _pixel_off
                           _pixel_on
 ---------------------------------------------------------------------------------
 (4) _pixel_on                                             4     3      1     273
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _pixel_off                                            5     4      1     273
                                             14 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (1) _clear_matrix                                         1     1      0      99
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1002
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1    2234
                                             18 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1    1396
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _RTOS_SetTask                                         9     3      6    8820
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _RTOS_DeleteTask                                      9     7      2    2086
                                             14 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _default_state                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              0     0      0    1873
                            _getDate
                            _getTime
 ---------------------------------------------------------------------------------
 (3) _getTime                                              3     0      3     967
                                             19 COMRAM     3     0      3
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (3) _getDate                                              4     0      4     906
                                             19 COMRAM     4     0      4
                        _DS3231_Read
                     _bcd_to_decimal
 ---------------------------------------------------------------------------------
 (4) _bcd_to_decimal                                       2     2      0      62
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _DS3231_Read                                          2     2      0     164
                                             17 COMRAM     2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     1     1      0      31
                                             15 COMRAM     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             15 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           5     5      0     344
                                              9 COMRAM     5     5      0
                           _INT0_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _INT0_ISR                                             0     0      0     344
                     i2_RTOS_SetTask
 ---------------------------------------------------------------------------------
 (10) i2_RTOS_SetTask                                      9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTOS_DispatchTask
     _GetTime *
       _getDate
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
     _RTOS_DeleteTask *
     _default_state *
     _home_temp *
       _RTOS_DeleteTask
       _RTOS_SetTask
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clear_matrix
       _getTime
         _DS3231_Read
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_RepeatedStart
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _bcd_to_decimal
       _pic_to_led
         _pixel_off
         _pixel_on
       _putchar_down
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
       _putchar_down_s
         _Update_Matrix
           _Send_Byte_7221
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _key_press *
     _time_led *
       _BMP085Pressure
         _BMP085GetPressure
           ___aldiv
             ___lmul (ARG)
           ___lldiv
           ___lmul
           _bmp085ReadUP (ARG)
             _BMP085ReadByte
               _I2C_Master_Read
                 _I2C_Master_Wait
               _I2C_Master_RepeatedStart
                 _I2C_Master_Wait
               _I2C_Master_Start
                 _I2C_Master_Wait
               _I2C_Master_Stop
                 _I2C_Master_Wait
               _I2C_Master_Write
                 _I2C_Master_Wait
             _BMP085WriteByte
               _I2C_Master_Start
                 _I2C_Master_Wait
               _I2C_Master_Stop
                 _I2C_Master_Wait
               _I2C_Master_Write
                 _I2C_Master_Wait
           _printf (ARG)
             __doprnt
               Absolute function(Fake) *
               ___lldiv *
               ___llmod *
                 ___lldiv (ARG)
               _putch *
         _BMP085GetTemp
           _BMP085ReadUT (ARG)
             _BMP085WriteByte
               _I2C_Master_Start
                 _I2C_Master_Wait
               _I2C_Master_Stop
                 _I2C_Master_Wait
               _I2C_Master_Write
                 _I2C_Master_Wait
             _bmp085ReadInt
               _I2C_Master_Read
                 _I2C_Master_Wait
               _I2C_Master_RepeatedStart
                 _I2C_Master_Wait
               _I2C_Master_Start
                 _I2C_Master_Wait
               _I2C_Master_Stop
                 _I2C_Master_Wait
               _I2C_Master_Write
                 _I2C_Master_Wait
           ___aldiv (ARG)
             ___lmul (ARG)
           ___lmul (ARG)
           _printf (ARG)
             __doprnt
               Absolute function(Fake) *
               ___lldiv *
               ___llmod *
                 ___lldiv (ARG)
               _putch *
         _BMP085ReadUT
           _BMP085WriteByte
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
           _bmp085ReadInt
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_RepeatedStart
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
         _bmp085ReadUP
           _BMP085ReadByte
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_RepeatedStart
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
           _BMP085WriteByte
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
       _FillBuf
         ___lbdiv
         ___lbmod
           ___lbdiv (ARG)
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _readTemp_Single
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _ow_reset
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lldiv *
             ___llmod *
               ___lldiv (ARG)
             _putch *
         _read_byte
           _read_bit
         _write_byte
           _write_bit
       _scroll_left
         _Update_Matrix
           _Send_Byte_7221
     _time_set_dt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_dy *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_hr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _clear_matrix
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_min *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setTime
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_mt *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _time_set_yr *
       _RTOS_DeleteTask
       _RTOS_SetTask
       _Update_Matrix
         _Send_Byte_7221
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _putchar_b_buf
         ___lbdiv (ARG)
         ___lbmod (ARG)
           ___lbdiv (ARG)
         _pixel_off (ARG)
         _pixel_on (ARG)
       _setDate
         _DS3231_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _decimal_to_bcd (ARG)
             ___lbdiv
             ___lbmod
               ___lbdiv (ARG)
         _decimal_to_bcd
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
   _RTOS_SetTask
   _SYSTEM_Initialize
     _DS3231_init
       _DS3231_Write
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _decimal_to_bcd (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
     _I2C_Init
     _Init7221
       _Cmd7221
         _Send_Byte_7221
     _Interrupt_Init
     _Port_Init
     _RTOS_Init
     _TMR1Init
     _bmp085Calibration
       _bmp085ReadInt
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_RepeatedStart
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
     _init_ds18b20
       _ow_reset
       _write_byte
         _write_bit
     _init_uart
   _clear_matrix

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     i2_RTOS_SetTask
   _TMR0_ISR
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DC       7       85.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      65       5       78.9%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     4E      70       1       88.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B1      34        0.0%
DATA                 0      0     1B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Mar 07 15:12:05 2017

                   ??_Interrupt_Init 000F                                   PL2 15D6  
                                 PL4 1216                                   PL6 0416  
                                 PL8 1244                                   _B3 0095  
                                 _B4 0091                                   _B5 008D  
                                 _B6 0056                                   _B7 0089  
                                 _X1 0062                                   _X2 005E  
                                 _X3 005A                                   _b1 00A1  
                                 _b2 009F                                   _mb 009D  
                                 _mc 009B                                   _md 0099  
                        __CFG_BORV$3 000000                      ??_Update_Matrix 0012  
                       _bmp085ReadUP 13DA                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                       _decimal_to_bcd 25C8  
                       __CFG_CP2$OFF 000000                    ??_RTOS_DeleteTask 0011  
                                PL10 0E9A                                  PL20 17E2  
                                PL12 15EC                                  PL30 1B02  
                                PL22 09EA                                  PL14 19A6  
                                PL40 04BC                                  PL32 17F2  
                                PL24 1ADE                                  PL16 0428  
                                PL50 0EAE                                  PL42 07D0  
                                PL34 126A                                  PL26 047C  
                                PL18 0452                                  PL60 0512  
                                PL52 1280                                  PL44 04CE  
                                PL36 0490                                  PL28 1AEE  
                                PL70 054E                                  PL62 051A  
                                PL54 04E2                                  PL46 07F2  
                                PL38 07B8                                  PL80 0596  
                                PL72 0560                                  PL64 0534  
                                PL56 04EE                                  PL48 1274  
                                PL90 05B4                                  PL82 05A8  
                                PL74 0572                                  PL66 07FE  
                                PL58 050A                                  PL92 0BA2  
                                PL84 0B82                                  PL76 0822  
                                PL68 0814                                  PL94 2592  
                                PL86 0FF2                                  PL78 0584  
                                PL96 1DC0                                  PL88 0B92  
                                PL98 05BE                                  l140 2780  
                                l213 1746                                  l146 27F6  
                                l343 1F3A                                  l423 2064  
                                l352 1ED0                                  l601 1892  
                                l290 266A                                  l370 1BC4  
                                l427 20A2                                  l196 1CE6  
                                l287 2660                                  l615 0F70  
                                l632 16A8                                  l289 2668  
                                l625 0FC0                                  l713 0AE8  
                                l299 22F0                                  l379 1B30  
                                l645 08C2                                  l672 1584  
                                l860 262A                                  l780 2252  
                                l685 0DD2                                  l782 2270  
                                l774 2238                                  l776 2240  
                                l778 2248                                  l978 23F2  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _OSS BEEA                                  _ac1 0066  
                                _ac2 00AB                                  _ac3 00A9  
                                _ac4 00A7                                  _ac5 00A5  
                                _ac6 00A3                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
                      _bmp085ReadInt 21A2                      _BMP085WriteByte 273A  
                               PL100 09F6                                 PL110 0FFC  
                               PL102 05CA                                 PL120 12A8  
                               PL112 1294                                 PL104 0EB8  
                               PL130 19B4                                 PL122 1006  
                               PL114 16FA                                 PL106 128A  
                               PL140 1600                                 PL132 1B1C  
                               PL124 2054                                 PL116 204A  
                               PL108 1B12                                 PL150 1D5A  
                               PL142 160A                                 PL134 1DC8  
                               PL126 1D50                                 PL118 129E  
                               PL160 0BBA                                 PL152 18D8  
                               PL144 0EBE                                 PL136 1DD2  
                               PL128 09FC                                 PL170 170A  
                               PL162 0A12                                 PL154 0BB2  
                               PL146 1DDC                                 PL138 0A02  
                               PL180 0EC8                                 PL172 1020  
                               PL164 0A18                                 PL156 1610  
                               PL148 1010                                 PL182 1B26  
                               PL174 05D2                                 PL166 1704  
                               PL158 0A0C                                 PL184 0BC0  
                               PL176 0A1E                                 PL168 101A  
                               PL186 0A24                                 PL178 1028  
                       __CFG_LVP$OFF 000000                         _putchar_down 1BC0  
                       __CFG_WDT$OFF 000000                                 l1001 2824  
                               l1022 07B2                                 l1016 0610  
                               l1026 0634                                 l1060 2114  
                               l1029 066E                                 l1408 1FEC  
                               l1451 2198                                 l1461 22A8  
                               l5010 0702                                 l5100 19D8  
                               l5020 079E                                 l5004 06EE  
                               l1398 1E4A                                 l5022 07AC  
                               l5112 1A08                                 l5016 0796  
                               l5008 06F6                                 l5114 1A14  
                               l5106 19F0                                 l5132 1A68  
                               l5124 1A46                                 l5116 1A18  
                               l6012 0874                                 l5142 244C  
                               l6030 089C                                 l6006 0858  
                               l6110 1562                                 l5128 1A54  
                               l6024 0892                                 l6104 1558  
                               l5154 2466                                 l5146 2452  
                               l5410 228C                                 l6050 092A  
                               l6042 08E0                                 l6018 0880  
                               l6122 15CA                                 l5148 2456  
                               l5260 23A0                                 l5244 2368  
                               l6060 0974                                 l6052 093C  
                               l6044 08F2                                 l6220 0AAC  
                               l5158 246E                                 l5174 260C  
                               l5166 25F6                                 l5414 229E  
                               l5406 2280                                 l5502 1F3C  
                               l5190 22F4                                 l6062 0988  
                               l6054 094A                                 l6046 0902  
                               l6070 09DE                                 l6038 08AE  
                               l6118 1570                                 l6150 0D90  
                               l5408 2288                                 l5424 27C4  
                               l5600 1B98                                 l5088 2128  
                               l5360 02D2                                 l5264 23C0  
                               l6064 099A                                 l6056 0958  
                               l6048 0914                                 l6144 0D84  
                               l6128 0D54                                 l6216 0A90  
                               l6208 0A60                                 l5434 1CEA  
                               l5506 1F76                                 l5282 13E4  
                               l6058 0966                                 l6162 0DAC  
                               l6138 0D6C                                 l6170 0DBE  
                               l5460 1C58                                 l5444 1D18  
                               l5508 1F82                                 l5284 13F4  
                               l5292 142E                                 l5620 11A2  
                               l5532 1ED2                                 l6260 1912  
                               l6308 2254                                 l6068 09AC  
                               l6092 153E                                 l6076 1502  
                               l6180 0E28                                 l6156 0DA2  
                               l6228 0AE0                                 l6244 0B72  
                               l5446 1D1A                                 l5390 2174  
                               l4910 1FBC                                 l5358 02A8  
                               l5286 1404                                 l5294 1448  
                               l5622 11A6                                 l6086 1522  
                               l6182 0E38                                 l6174 0DF4  
                               l6190 0E70                                 l6342 1734  
                               l5560 1BC6                                 l5288 1414  
                               l5616 117E                                 l5712 12B4  
                               l5536 1F0C                                 l6280 195C  
                               l6264 191E                                 l6256 1904  
                               l6248 18E4                                 l6184 0E46  
                               l6176 0E06                                 l6192 0E8E  
                               l6360 17D6                                 l6344 173E  
                               l5474 1CD4                                 l5386 2168  
                               l5570 1C2C                                 l4914 1FDE  
                               l4906 1FAC                                 l5538 1F18  
                               l6274 194E                                 l6266 1922  
                               l6098 154A                                 l6186 0E5A  
                               l6178 0E16                                 l6354 1786  
                               l6362 17DA                                 l6338 171C  
                               l6346 1740                                 l5468 1CCE  
                               l5476 1CD6                                 l5388 2170  
                               l4908 1FB8                                 l5636 11DA  
                               l5724 12E0                                 l6276 1954  
                               l6292 1986                                 l6348 174C  
                               l5484 26CE                                 l6380 2106  
                               l4942 26C2                                 l5398 218E  
                               l5590 1B32                                 l5662 2066  
                               l4950 05DC                                 l6286 1978  
                               l6294 199E                                 l5910 0F3E  
                               l6198 0A2C                                 l6358 17BC  
                               l5680 20B0                                 l5672 2092  
                               l4960 0614                                 l5736 12F2  
                               l5904 0F2A                                 l4890 1E0E  
                               l4962 0618                                 l5842 1846  
                               l5834 1828                                 l4972 0640  
                               l4956 0606                                 l5748 1322  
                               l5780 13C6                                 l5916 0F48  
                               l5924 0F5C                                 l5860 186C  
                               l5836 182E                                 l5828 180C  
                               l4886 1DFE                                 l4990 0690  
                               l4982 0676                                 l4974 0654  
                               l4966 061C                                 l5934 0FB8  
                               l5854 1862                                 l4888 1E0A  
                               l4984 068C                                 l5768 13AE  
                               l5960 165C                                 l5944 161A  
                               l5936 0FD6                                 l5880 0EDA  
                               l5872 18BC                                 l5848 1850  
                               l4898 1E3C                                 l5954 1640  
                               l5938 0FE6                                 l5874 18CC  
                               l5972 1678                                 l5892 0F04  
                               l5868 187E                                 l4998 06C2  
                               l5990 16EE                                 l5966 1666  
                               l5978 1682                                 l5986 1694  
                               l5898 0F20                                 l5996 0836  
                               STR_1 BEEB                                 STR_2 BF01  
                               STR_3 BF24                                 STR_4 BF2E  
                               STR_5 BF38                                 STR_6 BF7E  
                               STR_7 BF88                                 STR_8 BF92  
                               STR_9 BF9C                     ow_reset@presence 0010  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                         _DS3231_Write 2702  
                               u3320 26C0                                 u4034 1C08  
                               u4035 1C04                                 u4240 1808  
                               u4074 1B74                                 u4075 1B70  
                               u3368 05F0                                 u3704 2378  
                               u3705 2374                                 u3458 06DA  
                               u4290 0ED6                                 u3478 0780  
                               u3750 14DA                                 u3734 23B8  
                               u3735 23B4                                 u4561 1946  
                               u3930 1C90                                 u3755 14D0  
                               u3684 2692                                 u4708 17C0  
                               _RCEN 007E2B                                 u3941 1CC6  
                               u3685 268E                                 u3765 1090  
                               u3694 25B2                                 u3790 01F4  
                               u3695 25AE                                 u3775 00C4  
                               u4807 0C6A                                 u3785 00EC  
                               u4817 2394                                 u3795 01EA  
                               u4907 13EA                                 u4827 2620  
                               u4917 13FA                                 u4837 262C  
                               u4927 140A                                 u4847 23C2  
                               u4937 141E                                 u4857 2724  
                               u4947 241A                                 u4867 2730  
                               u4957 2098                                 u4877 22BC  
                               u4797 20C2                                 u4967 1B9E  
                               u4887 22CC                                 u4977 1C32  
                               u4897 22E0                                 _TMR0 000FD6  
                               _RSEN 007E29                                 _TXIF 007CF4  
                       _RTOS_SetTask 1CDE                         __CFG_PWRT$ON 000000  
                               _Font B9C9                      __end_of_Cmd7221 26E6  
   __end_of_I2C_Master_RepeatedStart 2852                                 _main 20BA  
                   __end_of_I2C_Init 2786                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0071  
                      write_byte@val 0012                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
            __size_ofi2_RTOS_SetTask 0064                        __CFG_IESO$OFF 000000  
                    __end_of_FillBuf 1216                      __end_of_GetTime 2592  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
              __size_of_BMP085ReadUT 0034                   BMP085ReadByte@data 0013  
             __end_of_decimal_to_bcd 25EE                 RTOS_SetTask@taskFunc 000F  
                      _putchar_b_buf 1EC8                     __end_of_INT0_ISR 27B0  
                   ?_I2C_Master_Read 0001                     ?_I2C_Master_Wait 0001  
                   ?_I2C_Master_Stop 0001                      __end_of___aldiv 1A7A  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___lbdiv 2472  
                              STR_10 BFAE                                STR_11 BFDB  
                              STR_20 BFB7                                STR_12 BFE4  
                              STR_13 BFED                                STR_21 BFC0  
                              STR_30 BF42                                STR_14 BFA5  
                              STR_22 BF56                                STR_23 BFA5  
                              STR_15 BFB7                                STR_31 BF4C  
                              STR_24 BFB7                                STR_32 BF74  
                              STR_16 BFC9                                STR_25 BFC0  
                              STR_33 BFF6                                STR_17 BF14  
                              STR_18 BFD2                                STR_26 BF60  
                              STR_19 BFA5                                STR_27 BF6A  
                              STR_28 BF74                                STR_29 BF42  
                    __end_of___lbmod 2614                __end_of_default_state 285E  
                    __end_of___lldiv 1E5C                                _T0CON 000FD5  
                    __end_of___llmod 1FFE                      __end_of___lwdiv 21A2  
                    __end_of___lwmod 22B2                                i2l264 1E7A  
                              i2l196 1A82                                i2l268 1EB4  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _SPBRG 000FAF                                _PORTB 000F81  
                    __end_of__doprnt 07B8                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TXREG 000FAD                       ?_bmp085ReadInt 0012  
                      __CFG_WRT0$OFF 000000                      __end_of_getDate 1DC0  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
               __end_of_clear_matrix 27D4                  ___lmul@multiplicand 0013  
                              _TTime 00CD                                _FontS BEC9  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                    __end_of_getTime 204A                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                     __end_of_TMR0_ISR 2822  
                   __end_of_TMR1_ISR 27E6                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                     __end_of_TMR1Init 2814  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers B99D                                _fract B9B9  
                      pic_to_led@pic 0014                      __end_of_setDate 2364  
                              _putch 2822                       write_byte@temp 0013  
                    __end_of_setTime 24D0                       __pbitbssCOMRAM 0378  
                              pclath 000FFA                                tablat 000FF5  
                              plusw1 000FE3                                plusw2 000FDB  
                              status 000FD8                         _BMP085ReadUT 240A  
                    ___lbdiv@divisor 000F                         __end_ofPL100 09FC  
                       __end_ofPL110 1006                         __end_ofPL102 05D2  
                       __end_ofPL120 12B2                         __end_ofPL112 129E  
                       __end_ofPL104 0EBE                         __end_ofPL130 19BE  
                       __end_ofPL122 1010                         __end_ofPL114 1704  
                       __end_ofPL106 1294                         __end_ofPL140 160A  
                       __end_ofPL132 1B26                         __end_ofPL124 205E  
                       __end_ofPL116 2054                         __end_ofPL108 1B1C  
                       __end_ofPL150 1D64                         __end_ofPL142 1610  
                       __end_ofPL134 1DD2                         __end_ofPL126 1D5A  
                       __end_ofPL118 12A8                         __end_ofPL160 0BC0  
                       __end_ofPL152 18E2                         __end_ofPL144 0EC8  
                       __end_ofPL136 1DDC                         __end_ofPL128 0A02  
                       __end_ofPL170 1710                         __end_ofPL162 0A18  
                       __end_ofPL154 0BBA                         __end_ofPL146 1DE6  
                       __end_ofPL138 0A0C                         __end_ofPL180 0ECE  
                       __end_ofPL172 1028                         __end_ofPL164 0A1E  
                       __end_ofPL156 1618                         __end_ofPL148 101A  
                       __end_ofPL182 1B2C                         __end_ofPL174 05DA  
                       __end_ofPL166 170A                         __end_ofPL158 0A12  
                       __end_ofPL184 0BC6                         __end_ofPL176 0A24  
                       __end_ofPL168 1020                         __end_ofPL186 0A2A  
                       __end_ofPL178 102E                   __size_of_RTOS_Init 0010  
                    ___lbdiv@counter 0011                      write_bit@bitval 000F  
                    __initialization 21EA                         __end_of_Font BEC9  
                   __end_of_Init7221 24A2               __size_of_BMP085GetTemp 014E  
                       __end_of_main 210C                      _readTemp_Single 12B2  
                     ?_putchar_b_buf 0017                      ?_decimal_to_bcd 0001  
        ?_INTERRUPT_InterruptManager 0001                       __CFG_OSC$HSPLL 000000  
            __end_of_BMP085WriteByte 2756                RTOS_SetTask@taskDelay 0011  
                    decimal_to_bcd@d 0019                               ??_main 00E4  
                      __activetblptr 000002                     ??_Send_Byte_7221 000F  
                      ?_init_ds18b20 0001               _BMP085GetPressure$2351 00D4  
                  ?_I2C_Master_Start 0001                    ?_I2C_Master_Write 0001  
                     _putchar_down_s 1B2C                            ??_Cmd7221 0012  
                 ??_I2C_Master_Start 0010                   ??_I2C_Master_Write 0010  
                   ___llmod@dividend 001C                               ?_putch 0001  
                             i2l4750 1A86                               i2l4760 1AAE  
                             i2l4762 1AB0                               i2l6396 1EA0  
              BMP085Pressure@getTemp 004E                            ??_FillBuf 0017  
                             _SPBRGH 000FB0                            ??_GetTime 0018  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                      setDate@daySet 001F                    DS3231_Write@value 001A  
                             _TSTime 004F                       __CFG_XINST$OFF 000000  
           _I2C_Master_RepeatedStart 284A                      Send_Byte_7221@i 0010  
                             ___lmul 210C                    _RTOS_DispatchTask 1710  
                          ??___aldiv 0023                            ??___lbdiv 0010  
                     __CFG_STVREN$ON 000000                            ??___lbmod 0014  
                          ??___lldiv 0017                         ?_scroll_left 0001  
                          ??___llmod 0024                            ??___lwdiv 0013  
                   RTOS_DeleteTask@i 0017                            ??___lwmod 001A  
                             _en_put 0378                               _pic7x8 B99D  
                     pic_to_led@mask 0017                   ?_RTOS_DispatchTask 0001  
                          ??__doprnt 0029                               _events 0070  
                   __end_of_read_bit 273A                               clear_0 2202  
                             clear_1 220E                               clear_2 221C  
                          ??_getDate 0018                         __doprnt@flag 0031  
                             _printf 2638                            ??_getTime 0017  
                       __doprnt@prec 002B                       ??_init_ds18b20 0015  
                    ??_bmp085ReadInt 0014               __end_of_putchar_down_s 1BC0  
                       ?_time_set_dt 0001                         ?_time_set_dy 0001  
                       ?_time_set_hr 0001                    __end_of_RTOS_Init 27F6  
                       ?_time_set_mt 0001                         ?_time_set_yr 0001  
                       __pdataCOMRAM 0070                            ?_I2C_Init 0001  
                 __size_of_Port_Init 001C                     __end_of_pixel_on 26A4  
                ??_RTOS_DispatchTask 00DC                            ??_setDate 001F  
                   __end_of_time_led 19A6                         __mediumconst B974  
                   __end_of_ow_reset 22EE                            ??_setTime 001E  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                        _BMP085GetTemp 102E  
                   ___lbdiv@dividend 0010                    _SYSTEM_Initialize 2528  
                    ___lbmod@divisor 0013                           __accesstop 0080  
            __end_of__initialization 2222                      ___lbmod@counter 0015  
                          ?_INT0_ISR 0001                      __CFG_PBADEN$OFF 000000  
                 ?_SYSTEM_Initialize 0001                       i2_RTOS_SetTask 1A7A  
                      ___rparam_used 000001              __end_of_readTemp_Single 13DA  
                    _RTOS_DeleteTask 1C54            __end_of_RTOS_DispatchTask 17E2  
                      __end_of_FontS BEEA                      ??_putchar_b_buf 0018  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 0040  
                          ?_TMR0_ISR 0001                            ?_TMR1_ISR 0001  
                          ?_TMR1Init 0001                        __end_of_fract B9C9  
                        pic_to_led@i 001A                          pic_to_led@j 0019  
                        pic_to_led@x 0018                        __end_of_putch 282E  
                         __end_ofPL2 15EC                           __end_ofPL4 1244  
                         __end_ofPL6 0428                           __end_ofPL8 126A  
                   ___lbdiv@quotient 0012                __size_of_clear_matrix 0012  
            __size_of_BMP085ReadByte 002C                     ?_BMP085WriteByte 0011  
                    ?_putchar_down_s 0017                           ??_I2C_Init 000F  
                     ?_BMP085GetTemp 003E                           __doprnt@ap 0028  
                         __doprnt@pb 0025              __size_of_BMP085Pressure 0036  
                          ?_Init7221 0001            __end_of_SYSTEM_Initialize 2550  
                            ??_putch 000F               RTOS_SetTask@taskPeriod 0013  
                         __pbssBANK0 0080                           __pbssBANK1 0100  
             __end_ofi2_RTOS_SetTask 1ADE                        ??_DS3231_Read 0012  
                         ??_INT0_ISR 000A                   __size_of_home_temp 0158  
                      ??_DS3231_init 001C                   __size_of_key_press 0044  
                  _bmp085Calibration 0BC6                   __size_of_init_uart 001A  
                 __size_of_read_byte 0038                    __end_of_Port_Init 2702  
                BMP085GetPressure@Pp 00D8                         _clear_matrix 27C2  
                    bcd_to_decimal@d 0010                   ?_bmp085Calibration 0001  
                      bmp085ReadUP@p 0034                              ?___lmul 000F  
                    bmp085ReadUP@lsb 002C                      bmp085ReadUP@msb 0028  
                         ??_TMR0_ISR 0001                           ??_TMR1_ISR 0001  
                         ??_TMR1Init 000F                      _Timer0Interrupt 0069  
            i2RTOS_SetTask@taskDelay 0003                       ___lmul@product 0017  
                ??_bmp085Calibration 003E                  BMP085WriteByte@data 0011  
                            ?_printf 0033                   __size_of_pixel_off 0028  
              __end_of_Update_Matrix 232A                              _INTCON2 000FF1  
            __size_of_bcd_to_decimal 0016                              _Cmd7221 26C8  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                         ??_Init7221 0014                          setTime@hSet 001E  
                        setTime@mSet 001C                              _SSPSTAT 000FC7  
                        setTime@sSet 001D              __end_of_RTOS_DeleteTask 1CDE  
                     setDate@dateSet 001C                      ?i2_RTOS_SetTask 0001  
          __end_of_bmp085Calibration 0D52                              _FillBuf 117C  
                            _GetTime 2578                            ?_read_bit 0001  
               __end_of_init_ds18b20 2578                   __size_of_write_bit 0024  
                   Update_Matrix@buf 0011                     ?_readTemp_Single 003E  
                   ??_decimal_to_bcd 0017                              __Hparam 0000  
         __size_of_RTOS_DispatchTask 00D2                              __Lparam 0000  
                          ?_pixel_on 000F                       setDate@yearSet 001E  
                          ?_time_led 0001                  __end_of_DS3231_Read 2528  
                          ?_ow_reset 0001                              ___aldiv 19BE  
                __end_of_DS3231_init 27C2                              ___lbdiv 243E  
                    __size_of___lmul 004C                              ___lbmod 25EE  
                            ___lldiv 1DE6                              ___llmod 1F9C  
                            ___lwdiv 2158                              ___lwmod 2274  
                            __doprnt 05DA                              __pcinit 21EA  
                            _getDate 1D64                              __ramtop 1000  
               __size_of_scroll_left 005C             readTemp_Single@time_flag 003F  
                            __ptext0 20BA                              __ptext1 2528  
                            __ptext2 2756                              __ptext3 2550  
                            _getTime 1FFE                              __ptext4 0BC6  
                            __ptext5 2806                              __ptext6 27E6  
                            __ptext7 26E6                              __ptext8 2852  
                            __ptext9 2472                      __size_of_printf 0024  
                  __end_of_home_temp 0B82             readTemp_Single@timer_val 0040  
                    ??_BMP085GetTemp 0042                            _T1CONbits 000FCD  
                            _dpowers B975              __size_of_Interrupt_Init 0006  
                         _pic_to_led 1F32                    __end_of_key_press 2274  
                  __end_of_init_uart 2770                              _setDate 232A  
                  __end_of_read_byte 23D4                     ___aldiv@dividend 001B  
                            _setTime 24A2                              _scratch 0080  
           __size_of_I2C_Master_Read 0024             __size_of_I2C_Master_Wait 0010  
           __size_of_I2C_Master_Stop 0008                 __size_of_time_set_dt 00D6  
                      putchar_down@i 0024                 __size_of_time_set_dy 0148  
                      putchar_down@j 0023                 __size_of_time_set_hr 0124  
                      putchar_down@k 0022                  putchar_b_buf@symbol 0017  
               __size_of_time_set_mt 01B6                        putchar_down@x 0021  
               __size_of_time_set_yr 00E2           __size_of_SYSTEM_Initialize 0028  
                     __pintcode_body 1E5C                 end_of_initialization 2222  
         ??_I2C_Master_RepeatedStart 0010                        ?_time_set_min 0001  
                       key_press@key 000F                        __Lmediumconst B974  
                            int_func 1E5C                           ??_read_bit 000F  
                  __end_of_pixel_off 25C8                     DS3231_Read@value 0013  
          __size_of_I2C_Master_Start 0008               __size_of_default_state 0006  
          __size_of_I2C_Master_Write 000C                   RTOS_DispatchTask@i 00E3  
                 RTOS_DispatchTask@j 00E2                      ___lldiv@divisor 0013  
                      RTOS_SetTask@i 0017                      ___lldiv@counter 001B  
                         ??_pixel_on 0010                           ??_time_led 004F  
                          _RCSTAbits 000FAB                              printf@f 0033  
                   ___aldiv@quotient 0025                           ??_ow_reset 000F  
                   scroll_left@speed 0018                     I2C_Master_Read@a 0010  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                         read_byte@val 0011  
                     _BMP085ReadByte 24D0                            _PORTCbits 000F82  
                         _show_digit 0379                    __end_of_write_bit 2638  
                   ___lbmod@dividend 0014                            _TRISCbits 000F94  
                  __size_of_I2C_Init 0016                       _BMP085Pressure 23D4  
                          _RTOS_Init 27E6                     ?_RTOS_DeleteTask 000F  
                     ??_time_set_min 001F                          ___lbmod@rem 0016  
         __size_of_bmp085Calibration 018C                          _DS3231_Read 24FC  
                          _TXSTAbits 000FAC                          _DS3231_init 27B0  
                  __size_of_INT0_ISR 0014               __end_of_BMP085ReadByte 24FC  
                   ??_putchar_down_s 0018                       __end_of___lmul 2158  
                        _BAUDCONbits 000FB8                        ?_bmp085ReadUP 0014  
                      __pidataCOMRAM 285E                           _write_byte 2364  
                  __size_of_TMR0_ISR 000E                    __size_of_TMR1_ISR 0012  
                     __end_of_pic7x8 B9B9                    __size_of_TMR1Init 000E  
                     __end_of_printf 265C                        _default_state 2858  
                        ?_pic_to_led 0014                          __end_ofPL10 0EAE  
                        __end_ofPL20 17F2                          __end_ofPL12 1600  
                        __end_ofPL30 1B12                          __end_ofPL22 09F6  
                        __end_ofPL14 19B4                          __end_ofPL40 04CE  
                        __end_ofPL32 1800                          __end_ofPL24 1AEE  
                        __end_ofPL16 0452                          __end_ofPL50 0EB8  
                        __end_ofPL42 07F2                          __end_ofPL34 1274  
                        __end_ofPL26 0490                          __end_ofPL18 047C  
                        __end_ofPL60 051A                          __end_ofPL52 128A  
                        __end_ofPL44 04E2                          __end_ofPL36 04BC  
                        __end_ofPL28 1B02                          __end_ofPL70 0560  
                        __end_ofPL62 0534                          __end_ofPL54 04EE  
                        __end_ofPL46 07FE                          __end_ofPL38 07D0  
                        __end_ofPL80 05A8                          __end_ofPL72 0572  
                        __end_ofPL64 054E                          __end_ofPL56 050A  
                        __end_ofPL48 1280                __end_of_bmp085ReadInt 21EA  
                        __end_ofPL90 05BE                          __end_ofPL82 05B4  
                        __end_ofPL74 0584                          __end_ofPL66 0814  
                        __end_ofPL58 0512                          __end_ofPL92 0BB2  
                        __end_ofPL84 0B92                          __end_ofPL76 0834  
                        __end_ofPL68 0822                          __end_ofPL94 25A0  
                        __end_ofPL86 0FFC                          __end_ofPL78 0596  
                        __end_ofPL96 1DC8                          __end_ofPL88 0BA2  
                        __end_ofPL98 05CA                  start_initialization 21EA  
             __end_of_BMP085Pressure 240A                       _bcd_to_decimal 2786  
                        __end_of_OSS BEEB                           ?_RTOS_Init 0001  
                      ?_putchar_down 001B                        ?_DS3231_Write 001A  
              __size_of_init_ds18b20 0028                        ?_RTOS_SetTask 000F  
                  __size_of_Init7221 0030              __size_of_Send_Byte_7221 0024  
                  ??_I2C_Master_Read 0010                    ??_I2C_Master_Wait 000F  
                  ??_I2C_Master_Stop 0010                      ___llmod@divisor 0020  
                          _TaskArray 0100                      ___llmod@counter 0024  
                      clear_matrix@i 000F                             ??___lmul 0017  
              BMP085ReadByte@address 0012                            _Port_Init 26E6  
                    ?_BMP085ReadByte 0001                __end_of_putchar_b_buf 1F32  
                        __doprnt@val 002D                       ??_bmp085ReadUP 0018  
                   __CFG_LPT1OSC$OFF 000000                             ??_printf 0039  
                         read_byte@i 0012                       ?_default_state 0001  
             __end_of_bcd_to_decimal 279C                       _Interrupt_Init 2852  
                       _init_ds18b20 2550                          __pbssCOMRAM 004F  
                    ?_BMP085Pressure 0001                        __pcstackBANK0 00D4  
                   ??i2_RTOS_SetTask 0007                       ??_putchar_down 001C  
          RTOS_DispatchTask@function 00E0                             ?_Cmd7221 0011  
           __size_of_BMP085WriteByte 001C                       ??_DS3231_Write 001B  
                     ??_RTOS_SetTask 0015                 readTemp_Single@fptmp 0043  
                           ?_FillBuf 0001                             ?_GetTime 0001  
                      ?_BMP085ReadUT 001B                            __doprnt@c 0032  
                          __doprnt@f 0026                     _I2C_Master_Start 2842  
                   _I2C_Master_Write 282E                 BMP085GetPressure@_pu 003E  
                  __size_of_read_bit 001C                     ___lwdiv@dividend 000F  
                __size_of_pic_to_led 006A                    __CFG_CCP2MX$PORTC 000000  
                          __pintcode 0008                        __pmediumconst B974  
                           ?___aldiv 001B                             ?___lbdiv 000F  
             i2RTOS_SetTask@taskFunc 0001                             ?___lbmod 0013  
                           ?___lldiv 000F                           ?_Port_Init 0001  
                           ?___llmod 001C                             ?___lwdiv 000F  
                           ?___lwmod 0016                    __size_of_pixel_on 0024  
                           Cmd7221@i 0013                     bmp085ReadUP@xlsb 0030  
                  __size_of_time_led 00C4                             ?__doprnt 0025  
                  __size_of_ow_reset 003C                          ?_write_byte 0001  
             __end_of_Interrupt_Init 2858                             ?_getDate 0014  
       ??_INTERRUPT_InterruptManager 000A                            _arrayTail 006A  
               __end_of_time_set_min 18D8                             ?_getTime 0014  
                   bmp085ReadInt@lsb 0019                     bmp085ReadInt@msb 0017  
                    ?_bcd_to_decimal 0001                             _I2C_Init 2770  
                           ?_setDate 001C                             ?_setTime 001C  
           i2RTOS_SetTask@taskPeriod 0005                            _home_temp 0A2A  
                        ??_RTOS_Init 000F                     ___lwdiv@quotient 0014  
                          _key_press 2230                            _init_uart 2756  
                          _read_byte 239C                           Cmd7221@adr 0012  
                     __size_of_putch 000C                           Cmd7221@val 0011  
                     ??_BMP085ReadUT 001F                      ___aldiv@divisor 001F  
                    ___aldiv@counter 0023                             _INT0_ISR 279C  
                           _LATDbits 000F8C                            getDate@p1 0017  
                          getDate@p2 0016                            getDate@p3 0015  
                          getDate@p4 0014                             _PIE1bits 000F9D  
                         pixel_off@x 0013                           pixel_off@y 000F  
                   readTemp_Single@i 0045               __size_of_Update_Matrix 003C  
__size_of_INTERRUPT_InterruptManager 1EC0                             _PIR1bits 000F9E  
                           FillBuf@i 0019                            _pixel_off 25A0  
                   __CFG_WDTPS$32768 000000                            _time_flag 006D  
                      ??_scroll_left 0015                             _TMR0_ISR 2814  
                           _TMR1_ISR 27D4                             _TMR1Init 2806  
                          getTime@p1 0016                            getTime@p2 0015  
                          getTime@p3 0014                            _timer_val 006E  
                DS3231_Write@address 001B                      putchar_down_s@i 0020  
                    putchar_down_s@j 001F                      putchar_down_s@k 001E  
                    putchar_down_s@x 001D             __size_of_readTemp_Single 0128  
                    ??_default_state 000F                      ?_Interrupt_Init 0001  
                  _BMP085GetPressure 0012                        ??_time_set_dt 0020  
                      ??_time_set_dy 0020                        ??_time_set_hr 001F  
                      ??_time_set_mt 0020                        ??_time_set_yr 0020  
              __end_of_BMP085GetTemp 117C                          write_byte@i 0014  
                 ?_BMP085GetPressure 003E                             _Dis_Buff 00AD  
                         ?_home_temp 0001                  I2C_Master_Read@temp 0011  
                           _Init7221 2472                           ?_key_press 0001  
                          _write_bit 2614                           ?_init_uart 0001  
                  ___lmul@multiplier 000F                          _INTCON2bits 000FF1  
                   __size_of_Cmd7221 001E                           ?_read_byte 0001  
                ??_BMP085GetPressure 0042                       _Send_Byte_7221 265C  
               __end_of_bmp085ReadUP 1500                         ?_DS3231_Read 0001  
                __size_of_write_byte 0038                    Update_Matrix@data 0012  
                  ??_BMP085WriteByte 0012                     __size_of_FillBuf 009A  
                   __size_of_GetTime 001A                         ?_DS3231_init 0001  
                           __Hrparam 0000                      setDate@monthSet 001D  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                         ?_pixel_off 000F               BMP085WriteByte@address 0012  
               __end_of_putchar_down 1C54                   DS3231_Read@address 0012  
                        ??_Port_Init 000F                    Send_Byte_7221@dat 000F  
                     key_press@count 0068                 __end_of_DS3231_Write 271E  
                   __size_of___aldiv 00BC    __size_of_I2C_Master_RepeatedStart 0008  
                   __size_of___lbdiv 0034                     __size_of___lbmod 0026  
          ?_I2C_Master_RepeatedStart 0001                 __end_of_RTOS_SetTask 1D50  
                   __size_of___lldiv 0076                     __size_of___llmod 0062  
          __end_of_BMP085GetPressure 0416                     __size_of___lwdiv 004A  
                   __size_of___lwmod 003E                     __size_of__doprnt 01DE  
            __size_of_decimal_to_bcd 0026                     __size_of_getDate 005C  
                   __size_of_getTime 004C                  __end_of_scroll_left 20BA  
                readTemp_Single@temp 0046                         ??_pic_to_led 0015  
                      _Update_Matrix 22EE                      _I2C_Master_Read 26A4  
                    _I2C_Master_Wait 27F6                      _I2C_Master_Stop 283A  
                    ___lwdiv@divisor 0011                     __size_of_setDate 003A  
                    ___lwdiv@counter 0013                     __size_of_setTime 002E  
                           __ptext10 26C8                             __ptext11 2770  
                           __ptext20 2858                             __ptext12 27B0  
                           __ptext21 0ECE                             __ptext13 1710  
                           __ptext30 12B2                             __ptext22 2230  
                           __ptext14 0A2A                             __ptext31 2364  
                           __ptext23 18E2                             __ptext15 1800  
                           __ptext40 240A                             __ptext32 2614  
                           __ptext24 1618                             __ptext16 2578  
                           __ptext41 21A2                             __ptext33 239C  
                           __ptext25 24A2                             __ptext17 0D52  
                           __ptext50 210C                             __ptext42 273A  
                           __ptext34 271E                             __ptext26 232A  
                           __ptext18 1500                             __ptext51 19BE  
                           __ptext43 102E                             __ptext35 22B2  
                           __ptext27 25C8                             __ptext19 0834  
                           __ptext60 27C2                             __ptext52 205E  
                           __ptext44 0012                             __ptext36 117C  
                           __ptext28 2702                             __ptext61 2274  
                           __ptext53 1B2C                             __ptext45 2638  
                           __ptext37 23D4                             __ptext29 1EC8  
                           __ptext70 24FC                             __ptext62 2158  
                           __ptext54 1BC0                             __ptext46 05DA  
                           __ptext38 13DA                             __ptext71 282E  
                           __ptext63 25EE                             __ptext55 22EE  
                           __ptext47 2822                             __ptext39 24D0  
                           __ptext80 279C                             __ptext72 283A  
                           __ptext64 243E                             __ptext56 265C  
                           __ptext48 1F9C                             __ptext81 1A7A  
                           __ptext73 2842                             __ptext65 1CDE  
                           __ptext57 1F32                             __ptext49 1DE6  
                           __ptext82 0000                             __ptext74 284A  
                           __ptext66 1C54                             __ptext58 2680  
                           __ptext75 26A4                             __ptext67 1FFE  
                           __ptext59 25A0                             __ptext76 27F6  
                           __ptext68 1D64                             __ptext69 2786  
                           __ptext78 27D4                             __ptext79 2814  
             __end_of_Send_Byte_7221 2680                           ?_write_bit 0001  
                __end_of_time_set_dt 15D6                  __end_of_time_set_dy 0E9A  
                __end_of_time_set_hr 0FF2                  __end_of_time_set_mt 09EA  
                __end_of_time_set_yr 16FA                       Update_Matrix@i 0014  
                     Update_Matrix@j 0013                        __size_of_main 0052  
                           _read_bit 271E                    putchar_b_buf@mask 001A  
                     putchar_b_buf@i 001D                       putchar_b_buf@j 001C  
                     putchar_b_buf@x 001B                     ??_BMP085ReadByte 0012  
            RTOS_DeleteTask@taskFunc 000F                            pixel_on@x 0012  
                          pixel_on@y 000F                        ?_clear_matrix 0001  
           __size_of_RTOS_DeleteTask 008A                             _pixel_on 2680  
                 __end_of_pic_to_led 1F9C                             _time_led 18E2  
               putchar_down_s@symbol 0017                             _ow_reset 22B2  
              __size_of_time_set_min 00D8                             int$flags 0071  
                           _text_buf 0178   __end_of_INTERRUPT_InterruptManager 1EC8  
         _INTERRUPT_InterruptManager 0008                      i2RTOS_SetTask@i 0009  
                   ??_BMP085Pressure 004E                 __end_of_BMP085ReadUT 243E  
                     ?_Update_Matrix 0011                            putch@data 000F  
           __end_of_I2C_Master_Start 284A             __end_of_I2C_Master_Write 283A  
                         _INTCONbits 000FF2                    ??_readTemp_Single 0041  
                        ??_home_temp 0025                         scroll_left@i 0019  
                       scroll_left@j 0016                         scroll_left@k 0017  
                    ?_Send_Byte_7221 0001                     BMP085GetTemp@_tu 003E  
                        ??_key_press 000F                          ??_init_uart 000F  
                        ??_read_byte 000F                   readTemp_Single@buf 003E  
                           intlevel2 0000                   readTemp_Single@tmp 0044  
                   ___lwmod@dividend 0016                     ___lldiv@dividend 000F  
                       _time_set_min 1800                       ??_clear_matrix 000F  
             __size_of_bmp085ReadInt 0048                          ??_pixel_off 0010  
                           printf@ap 0039                             printf@pb 003A  
                   ??_bcd_to_decimal 000F                          _scroll_left 205E  
            __end_of_I2C_Master_Read 26C8              __end_of_I2C_Master_Wait 2806  
            __end_of_I2C_Master_Stop 2842                   putchar_down@symbol 001B  
         __size_of_BMP085GetPressure 0404                         ??_write_byte 0010  
                    BMP085GetTemp@Tt 004A                          _temperature 006B  
                        _time_set_dt 1500                     ___lldiv@quotient 0017  
                        _time_set_dy 0D52                          _time_set_hr 0ECE  
                  I2C_Master_Write@d 0010                          _time_set_mt 0834  
                    ___lwmod@divisor 0018                          _time_set_yr 1618  
                    ___lwmod@counter 001A                         ___aldiv@sign 0024  
              __size_of_bmp085ReadUP 0126              __size_of_putchar_down_s 0094  
                        ??_write_bit 000F               __size_of_putchar_b_buf 006A  
               bmp085ReadInt@address 0016                   __end_of_write_byte 239C  
              __size_of_putchar_down 0094                __size_of_DS3231_Write 001C  
               __size_of_DS3231_Read 002C                __size_of_RTOS_SetTask 0072  
               __size_of_DS3231_init 0012  
